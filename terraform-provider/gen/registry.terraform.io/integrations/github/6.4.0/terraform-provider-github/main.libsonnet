local build = {
  expression(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then if std.objectHas(val._, 'ref') then val._.ref else '"%s"' % [std.strReplace(val._.str, '\n', '\\n')] else std.mapWithKey(function(key, value) self.expression(value), val) else if std.type(val) == 'array' then std.map(function(element) self.expression(element), val) else if std.type(val) == 'string' then '"%s"' % [std.strReplace(val, '\n', '\\n')] else val,
  template(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then if std.objectHas(val._, 'ref') then '${%s}' % [val._.ref] else val._.str else std.mapWithKey(function(key, value) self.template(value), val) else if std.type(val) == 'array' then std.map(function(element) self.template(element), val) else if std.type(val) == 'string' then val else val,
  providerRequirements(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then val._.providerRequirements else std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.providerRequirements(val[key]), std.objectFields(val)), {}) else if std.type(val) == 'array' then std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.providerRequirements(val[key]), val), {}) else {},
};

local providerTemplate(provider, requirements, configuration) = {
  local providerRequirements = { [provider]: requirements },
  local providerAlias = if configuration == null then null else configuration.alias,
  local providerWithAlias = if configuration == null then null else '%s.%s' % [provider, providerAlias],
  local providerConfiguration = if configuration == null then {} else { [providerWithAlias]: { provider: { [provider]: configuration } } },
  local providerReference = if configuration == null then {} else { provider: providerWithAlias },
  blockType(blockType): {
    local blockTypePath = if blockType == 'resource' then [] else ['data'],
    resource(type, name): {
      local resourceType = std.substr(type, std.length(provider) + 1, std.length(type)),
      local resourcePath = blockTypePath + [type, name],
      _(rawBlock, block): {
        local metaBlock = {
          depends_on: build.template(std.get(rawBlock, 'depends_on', null)),
          count: build.template(std.get(rawBlock, 'count', null)),
          for_each: build.template(std.get(rawBlock, 'for_each', null)),
        },
        providerRequirements: build.providerRequirements(block + providerRequirements),
        providerConfiguration: providerConfiguration,
        provider: provider,
        providerAlias: providerAlias,
        resourceType: resourceType,
        name: name,
        ref: std.join('.', resourcePath),
        block: {
          [blockType]: {
            [type]: {
              [name]: std.prune(metaBlock + block + providerReference),
            },
          },
        },
      },
      field(fieldName): {
        local fieldPath = resourcePath + [fieldName],
        _: {
          ref: std.join('.', fieldPath),
        },
      },
    },
  },
  func(name, parameters=[]): {
    local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]),
    _: {
      providerRequirements: build.providerRequirements(parameters + providerRequirements),
      providerConfiguration: providerConfiguration,
      ref: 'provider::%s::%s(%s)' % [provider, name, parameterString],
    },
  },
};

local provider(configuration) = {
  local requirements = {
    source: 'registry.terraform.io/integrations/github',
    version: '6.4.0',
  },
  local provider = providerTemplate('github', requirements, configuration),
  resource: {
    local blockType = provider.blockType('resource'),
    actions_environment_secret(name, block): {
      local resource = blockType.resource('github_actions_environment_secret', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        encrypted_value: build.template(std.get(block, 'encrypted_value', null)),
        environment: build.template(block.environment),
        id: build.template(std.get(block, 'id', null)),
        plaintext_value: build.template(std.get(block, 'plaintext_value', null)),
        repository: build.template(block.repository),
        secret_name: build.template(block.secret_name),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      created_at: resource.field('created_at'),
      encrypted_value: resource.field('encrypted_value'),
      environment: resource.field('environment'),
      id: resource.field('id'),
      plaintext_value: resource.field('plaintext_value'),
      repository: resource.field('repository'),
      secret_name: resource.field('secret_name'),
      updated_at: resource.field('updated_at'),
    },
    actions_environment_variable(name, block): {
      local resource = blockType.resource('github_actions_environment_variable', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        environment: build.template(block.environment),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        value: build.template(block.value),
        variable_name: build.template(block.variable_name),
      }),
      created_at: resource.field('created_at'),
      environment: resource.field('environment'),
      id: resource.field('id'),
      repository: resource.field('repository'),
      updated_at: resource.field('updated_at'),
      value: resource.field('value'),
      variable_name: resource.field('variable_name'),
    },
    actions_organization_oidc_subject_claim_customization_template(name, block): {
      local resource = blockType.resource('github_actions_organization_oidc_subject_claim_customization_template', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        include_claim_keys: build.template(block.include_claim_keys),
      }),
      id: resource.field('id'),
      include_claim_keys: resource.field('include_claim_keys'),
    },
    actions_organization_permissions(name, block): {
      local resource = blockType.resource('github_actions_organization_permissions', name),
      _: resource._(block, {
        allowed_actions: build.template(std.get(block, 'allowed_actions', null)),
        enabled_repositories: build.template(block.enabled_repositories),
        id: build.template(std.get(block, 'id', null)),
      }),
      allowed_actions: resource.field('allowed_actions'),
      enabled_repositories: resource.field('enabled_repositories'),
      id: resource.field('id'),
    },
    actions_organization_secret(name, block): {
      local resource = blockType.resource('github_actions_organization_secret', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        encrypted_value: build.template(std.get(block, 'encrypted_value', null)),
        id: build.template(std.get(block, 'id', null)),
        plaintext_value: build.template(std.get(block, 'plaintext_value', null)),
        secret_name: build.template(block.secret_name),
        selected_repository_ids: build.template(std.get(block, 'selected_repository_ids', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        visibility: build.template(block.visibility),
      }),
      created_at: resource.field('created_at'),
      encrypted_value: resource.field('encrypted_value'),
      id: resource.field('id'),
      plaintext_value: resource.field('plaintext_value'),
      secret_name: resource.field('secret_name'),
      selected_repository_ids: resource.field('selected_repository_ids'),
      updated_at: resource.field('updated_at'),
      visibility: resource.field('visibility'),
    },
    actions_organization_secret_repositories(name, block): {
      local resource = blockType.resource('github_actions_organization_secret_repositories', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        secret_name: build.template(block.secret_name),
        selected_repository_ids: build.template(block.selected_repository_ids),
      }),
      id: resource.field('id'),
      secret_name: resource.field('secret_name'),
      selected_repository_ids: resource.field('selected_repository_ids'),
    },
    actions_organization_variable(name, block): {
      local resource = blockType.resource('github_actions_organization_variable', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        selected_repository_ids: build.template(std.get(block, 'selected_repository_ids', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        value: build.template(block.value),
        variable_name: build.template(block.variable_name),
        visibility: build.template(block.visibility),
      }),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      selected_repository_ids: resource.field('selected_repository_ids'),
      updated_at: resource.field('updated_at'),
      value: resource.field('value'),
      variable_name: resource.field('variable_name'),
      visibility: resource.field('visibility'),
    },
    actions_repository_access_level(name, block): {
      local resource = blockType.resource('github_actions_repository_access_level', name),
      _: resource._(block, {
        access_level: build.template(block.access_level),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
      }),
      access_level: resource.field('access_level'),
      id: resource.field('id'),
      repository: resource.field('repository'),
    },
    actions_repository_oidc_subject_claim_customization_template(name, block): {
      local resource = blockType.resource('github_actions_repository_oidc_subject_claim_customization_template', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        include_claim_keys: build.template(std.get(block, 'include_claim_keys', null)),
        repository: build.template(block.repository),
        use_default: build.template(block.use_default),
      }),
      id: resource.field('id'),
      include_claim_keys: resource.field('include_claim_keys'),
      repository: resource.field('repository'),
      use_default: resource.field('use_default'),
    },
    actions_repository_permissions(name, block): {
      local resource = blockType.resource('github_actions_repository_permissions', name),
      _: resource._(block, {
        allowed_actions: build.template(std.get(block, 'allowed_actions', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
      }),
      allowed_actions: resource.field('allowed_actions'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      repository: resource.field('repository'),
    },
    actions_runner_group(name, block): {
      local resource = blockType.resource('github_actions_runner_group', name),
      _: resource._(block, {
        allows_public_repositories: build.template(std.get(block, 'allows_public_repositories', null)),
        default: build.template(std.get(block, 'default', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        inherited: build.template(std.get(block, 'inherited', null)),
        name: build.template(block.name),
        restricted_to_workflows: build.template(std.get(block, 'restricted_to_workflows', null)),
        runners_url: build.template(std.get(block, 'runners_url', null)),
        selected_repositories_url: build.template(std.get(block, 'selected_repositories_url', null)),
        selected_repository_ids: build.template(std.get(block, 'selected_repository_ids', null)),
        selected_workflows: build.template(std.get(block, 'selected_workflows', null)),
        visibility: build.template(block.visibility),
      }),
      allows_public_repositories: resource.field('allows_public_repositories'),
      default: resource.field('default'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      inherited: resource.field('inherited'),
      name: resource.field('name'),
      restricted_to_workflows: resource.field('restricted_to_workflows'),
      runners_url: resource.field('runners_url'),
      selected_repositories_url: resource.field('selected_repositories_url'),
      selected_repository_ids: resource.field('selected_repository_ids'),
      selected_workflows: resource.field('selected_workflows'),
      visibility: resource.field('visibility'),
    },
    actions_secret(name, block): {
      local resource = blockType.resource('github_actions_secret', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        encrypted_value: build.template(std.get(block, 'encrypted_value', null)),
        id: build.template(std.get(block, 'id', null)),
        plaintext_value: build.template(std.get(block, 'plaintext_value', null)),
        repository: build.template(block.repository),
        secret_name: build.template(block.secret_name),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      created_at: resource.field('created_at'),
      encrypted_value: resource.field('encrypted_value'),
      id: resource.field('id'),
      plaintext_value: resource.field('plaintext_value'),
      repository: resource.field('repository'),
      secret_name: resource.field('secret_name'),
      updated_at: resource.field('updated_at'),
    },
    actions_variable(name, block): {
      local resource = blockType.resource('github_actions_variable', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        value: build.template(block.value),
        variable_name: build.template(block.variable_name),
      }),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      repository: resource.field('repository'),
      updated_at: resource.field('updated_at'),
      value: resource.field('value'),
      variable_name: resource.field('variable_name'),
    },
    app_installation_repositories(name, block): {
      local resource = blockType.resource('github_app_installation_repositories', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        installation_id: build.template(block.installation_id),
        selected_repositories: build.template(block.selected_repositories),
      }),
      id: resource.field('id'),
      installation_id: resource.field('installation_id'),
      selected_repositories: resource.field('selected_repositories'),
    },
    app_installation_repository(name, block): {
      local resource = blockType.resource('github_app_installation_repository', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        installation_id: build.template(block.installation_id),
        repo_id: build.template(std.get(block, 'repo_id', null)),
        repository: build.template(block.repository),
      }),
      id: resource.field('id'),
      installation_id: resource.field('installation_id'),
      repo_id: resource.field('repo_id'),
      repository: resource.field('repository'),
    },
    branch(name, block): {
      local resource = blockType.resource('github_branch', name),
      _: resource._(block, {
        branch: build.template(block.branch),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        ref: build.template(std.get(block, 'ref', null)),
        repository: build.template(block.repository),
        sha: build.template(std.get(block, 'sha', null)),
        source_branch: build.template(std.get(block, 'source_branch', null)),
        source_sha: build.template(std.get(block, 'source_sha', null)),
      }),
      branch: resource.field('branch'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      ref: resource.field('ref'),
      repository: resource.field('repository'),
      sha: resource.field('sha'),
      source_branch: resource.field('source_branch'),
      source_sha: resource.field('source_sha'),
    },
    branch_default(name, block): {
      local resource = blockType.resource('github_branch_default', name),
      _: resource._(block, {
        branch: build.template(block.branch),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        rename: build.template(std.get(block, 'rename', null)),
        repository: build.template(block.repository),
      }),
      branch: resource.field('branch'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      rename: resource.field('rename'),
      repository: resource.field('repository'),
    },
    branch_protection(name, block): {
      local resource = blockType.resource('github_branch_protection', name),
      _: resource._(block, {
        allows_deletions: build.template(std.get(block, 'allows_deletions', null)),
        allows_force_pushes: build.template(std.get(block, 'allows_force_pushes', null)),
        enforce_admins: build.template(std.get(block, 'enforce_admins', null)),
        force_push_bypassers: build.template(std.get(block, 'force_push_bypassers', null)),
        id: build.template(std.get(block, 'id', null)),
        lock_branch: build.template(std.get(block, 'lock_branch', null)),
        pattern: build.template(block.pattern),
        repository_id: build.template(block.repository_id),
        require_conversation_resolution: build.template(std.get(block, 'require_conversation_resolution', null)),
        require_signed_commits: build.template(std.get(block, 'require_signed_commits', null)),
        required_linear_history: build.template(std.get(block, 'required_linear_history', null)),
      }),
      allows_deletions: resource.field('allows_deletions'),
      allows_force_pushes: resource.field('allows_force_pushes'),
      enforce_admins: resource.field('enforce_admins'),
      force_push_bypassers: resource.field('force_push_bypassers'),
      id: resource.field('id'),
      lock_branch: resource.field('lock_branch'),
      pattern: resource.field('pattern'),
      repository_id: resource.field('repository_id'),
      require_conversation_resolution: resource.field('require_conversation_resolution'),
      require_signed_commits: resource.field('require_signed_commits'),
      required_linear_history: resource.field('required_linear_history'),
    },
    branch_protection_v3(name, block): {
      local resource = blockType.resource('github_branch_protection_v3', name),
      _: resource._(block, {
        branch: build.template(block.branch),
        enforce_admins: build.template(std.get(block, 'enforce_admins', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
        require_conversation_resolution: build.template(std.get(block, 'require_conversation_resolution', null)),
        require_signed_commits: build.template(std.get(block, 'require_signed_commits', null)),
      }),
      branch: resource.field('branch'),
      enforce_admins: resource.field('enforce_admins'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      repository: resource.field('repository'),
      require_conversation_resolution: resource.field('require_conversation_resolution'),
      require_signed_commits: resource.field('require_signed_commits'),
    },
    codespaces_organization_secret(name, block): {
      local resource = blockType.resource('github_codespaces_organization_secret', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        encrypted_value: build.template(std.get(block, 'encrypted_value', null)),
        id: build.template(std.get(block, 'id', null)),
        plaintext_value: build.template(std.get(block, 'plaintext_value', null)),
        secret_name: build.template(block.secret_name),
        selected_repository_ids: build.template(std.get(block, 'selected_repository_ids', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        visibility: build.template(block.visibility),
      }),
      created_at: resource.field('created_at'),
      encrypted_value: resource.field('encrypted_value'),
      id: resource.field('id'),
      plaintext_value: resource.field('plaintext_value'),
      secret_name: resource.field('secret_name'),
      selected_repository_ids: resource.field('selected_repository_ids'),
      updated_at: resource.field('updated_at'),
      visibility: resource.field('visibility'),
    },
    codespaces_organization_secret_repositories(name, block): {
      local resource = blockType.resource('github_codespaces_organization_secret_repositories', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        secret_name: build.template(block.secret_name),
        selected_repository_ids: build.template(block.selected_repository_ids),
      }),
      id: resource.field('id'),
      secret_name: resource.field('secret_name'),
      selected_repository_ids: resource.field('selected_repository_ids'),
    },
    codespaces_secret(name, block): {
      local resource = blockType.resource('github_codespaces_secret', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        encrypted_value: build.template(std.get(block, 'encrypted_value', null)),
        id: build.template(std.get(block, 'id', null)),
        plaintext_value: build.template(std.get(block, 'plaintext_value', null)),
        repository: build.template(block.repository),
        secret_name: build.template(block.secret_name),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      created_at: resource.field('created_at'),
      encrypted_value: resource.field('encrypted_value'),
      id: resource.field('id'),
      plaintext_value: resource.field('plaintext_value'),
      repository: resource.field('repository'),
      secret_name: resource.field('secret_name'),
      updated_at: resource.field('updated_at'),
    },
    codespaces_user_secret(name, block): {
      local resource = blockType.resource('github_codespaces_user_secret', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        encrypted_value: build.template(std.get(block, 'encrypted_value', null)),
        id: build.template(std.get(block, 'id', null)),
        plaintext_value: build.template(std.get(block, 'plaintext_value', null)),
        secret_name: build.template(block.secret_name),
        selected_repository_ids: build.template(std.get(block, 'selected_repository_ids', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      created_at: resource.field('created_at'),
      encrypted_value: resource.field('encrypted_value'),
      id: resource.field('id'),
      plaintext_value: resource.field('plaintext_value'),
      secret_name: resource.field('secret_name'),
      selected_repository_ids: resource.field('selected_repository_ids'),
      updated_at: resource.field('updated_at'),
    },
    dependabot_organization_secret(name, block): {
      local resource = blockType.resource('github_dependabot_organization_secret', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        encrypted_value: build.template(std.get(block, 'encrypted_value', null)),
        id: build.template(std.get(block, 'id', null)),
        plaintext_value: build.template(std.get(block, 'plaintext_value', null)),
        secret_name: build.template(block.secret_name),
        selected_repository_ids: build.template(std.get(block, 'selected_repository_ids', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        visibility: build.template(block.visibility),
      }),
      created_at: resource.field('created_at'),
      encrypted_value: resource.field('encrypted_value'),
      id: resource.field('id'),
      plaintext_value: resource.field('plaintext_value'),
      secret_name: resource.field('secret_name'),
      selected_repository_ids: resource.field('selected_repository_ids'),
      updated_at: resource.field('updated_at'),
      visibility: resource.field('visibility'),
    },
    dependabot_organization_secret_repositories(name, block): {
      local resource = blockType.resource('github_dependabot_organization_secret_repositories', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        secret_name: build.template(block.secret_name),
        selected_repository_ids: build.template(block.selected_repository_ids),
      }),
      id: resource.field('id'),
      secret_name: resource.field('secret_name'),
      selected_repository_ids: resource.field('selected_repository_ids'),
    },
    dependabot_secret(name, block): {
      local resource = blockType.resource('github_dependabot_secret', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        encrypted_value: build.template(std.get(block, 'encrypted_value', null)),
        id: build.template(std.get(block, 'id', null)),
        plaintext_value: build.template(std.get(block, 'plaintext_value', null)),
        repository: build.template(block.repository),
        secret_name: build.template(block.secret_name),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      created_at: resource.field('created_at'),
      encrypted_value: resource.field('encrypted_value'),
      id: resource.field('id'),
      plaintext_value: resource.field('plaintext_value'),
      repository: resource.field('repository'),
      secret_name: resource.field('secret_name'),
      updated_at: resource.field('updated_at'),
    },
    emu_group_mapping(name, block): {
      local resource = blockType.resource('github_emu_group_mapping', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        group_id: build.template(block.group_id),
        id: build.template(std.get(block, 'id', null)),
        team_slug: build.template(block.team_slug),
      }),
      etag: resource.field('etag'),
      group_id: resource.field('group_id'),
      id: resource.field('id'),
      team_slug: resource.field('team_slug'),
    },
    enterprise_actions_permissions(name, block): {
      local resource = blockType.resource('github_enterprise_actions_permissions', name),
      _: resource._(block, {
        allowed_actions: build.template(std.get(block, 'allowed_actions', null)),
        enabled_organizations: build.template(block.enabled_organizations),
        enterprise_slug: build.template(block.enterprise_slug),
        id: build.template(std.get(block, 'id', null)),
      }),
      allowed_actions: resource.field('allowed_actions'),
      enabled_organizations: resource.field('enabled_organizations'),
      enterprise_slug: resource.field('enterprise_slug'),
      id: resource.field('id'),
    },
    enterprise_actions_runner_group(name, block): {
      local resource = blockType.resource('github_enterprise_actions_runner_group', name),
      _: resource._(block, {
        allows_public_repositories: build.template(std.get(block, 'allows_public_repositories', null)),
        default: build.template(std.get(block, 'default', null)),
        enterprise_slug: build.template(block.enterprise_slug),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        restricted_to_workflows: build.template(std.get(block, 'restricted_to_workflows', null)),
        runners_url: build.template(std.get(block, 'runners_url', null)),
        selected_organization_ids: build.template(std.get(block, 'selected_organization_ids', null)),
        selected_organizations_url: build.template(std.get(block, 'selected_organizations_url', null)),
        selected_workflows: build.template(std.get(block, 'selected_workflows', null)),
        visibility: build.template(block.visibility),
      }),
      allows_public_repositories: resource.field('allows_public_repositories'),
      default: resource.field('default'),
      enterprise_slug: resource.field('enterprise_slug'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      restricted_to_workflows: resource.field('restricted_to_workflows'),
      runners_url: resource.field('runners_url'),
      selected_organization_ids: resource.field('selected_organization_ids'),
      selected_organizations_url: resource.field('selected_organizations_url'),
      selected_workflows: resource.field('selected_workflows'),
      visibility: resource.field('visibility'),
    },
    enterprise_organization(name, block): {
      local resource = blockType.resource('github_enterprise_organization', name),
      _: resource._(block, {
        admin_logins: build.template(block.admin_logins),
        billing_email: build.template(block.billing_email),
        database_id: build.template(std.get(block, 'database_id', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enterprise_id: build.template(block.enterprise_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      admin_logins: resource.field('admin_logins'),
      billing_email: resource.field('billing_email'),
      database_id: resource.field('database_id'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      enterprise_id: resource.field('enterprise_id'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    issue(name, block): {
      local resource = blockType.resource('github_issue', name),
      _: resource._(block, {
        assignees: build.template(std.get(block, 'assignees', null)),
        body: build.template(std.get(block, 'body', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        issue_id: build.template(std.get(block, 'issue_id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        milestone_number: build.template(std.get(block, 'milestone_number', null)),
        number: build.template(std.get(block, 'number', null)),
        repository: build.template(block.repository),
        title: build.template(block.title),
      }),
      assignees: resource.field('assignees'),
      body: resource.field('body'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      issue_id: resource.field('issue_id'),
      labels: resource.field('labels'),
      milestone_number: resource.field('milestone_number'),
      number: resource.field('number'),
      repository: resource.field('repository'),
      title: resource.field('title'),
    },
    issue_label(name, block): {
      local resource = blockType.resource('github_issue_label', name),
      _: resource._(block, {
        color: build.template(block.color),
        description: build.template(std.get(block, 'description', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        repository: build.template(block.repository),
        url: build.template(std.get(block, 'url', null)),
      }),
      color: resource.field('color'),
      description: resource.field('description'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      repository: resource.field('repository'),
      url: resource.field('url'),
    },
    issue_labels(name, block): {
      local resource = blockType.resource('github_issue_labels', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
      }),
      id: resource.field('id'),
      repository: resource.field('repository'),
    },
    membership(name, block): {
      local resource = blockType.resource('github_membership', name),
      _: resource._(block, {
        downgrade_on_destroy: build.template(std.get(block, 'downgrade_on_destroy', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        role: build.template(std.get(block, 'role', null)),
        username: build.template(block.username),
      }),
      downgrade_on_destroy: resource.field('downgrade_on_destroy'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      role: resource.field('role'),
      username: resource.field('username'),
    },
    organization_block(name, block): {
      local resource = blockType.resource('github_organization_block', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        username: build.template(block.username),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      username: resource.field('username'),
    },
    organization_custom_role(name, block): {
      local resource = blockType.resource('github_organization_custom_role', name),
      _: resource._(block, {
        base_role: build.template(block.base_role),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        permissions: build.template(block.permissions),
      }),
      base_role: resource.field('base_role'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      permissions: resource.field('permissions'),
    },
    organization_project(name, block): {
      local resource = blockType.resource('github_organization_project', name),
      _: resource._(block, {
        body: build.template(std.get(block, 'body', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        url: build.template(std.get(block, 'url', null)),
      }),
      body: resource.field('body'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      url: resource.field('url'),
    },
    organization_ruleset(name, block): {
      local resource = blockType.resource('github_organization_ruleset', name),
      _: resource._(block, {
        enforcement: build.template(block.enforcement),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        node_id: build.template(std.get(block, 'node_id', null)),
        ruleset_id: build.template(std.get(block, 'ruleset_id', null)),
        target: build.template(block.target),
      }),
      enforcement: resource.field('enforcement'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      node_id: resource.field('node_id'),
      ruleset_id: resource.field('ruleset_id'),
      target: resource.field('target'),
    },
    organization_security_manager(name, block): {
      local resource = blockType.resource('github_organization_security_manager', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        team_slug: build.template(block.team_slug),
      }),
      id: resource.field('id'),
      team_slug: resource.field('team_slug'),
    },
    organization_settings(name, block): {
      local resource = blockType.resource('github_organization_settings', name),
      _: resource._(block, {
        advanced_security_enabled_for_new_repositories: build.template(std.get(block, 'advanced_security_enabled_for_new_repositories', null)),
        billing_email: build.template(block.billing_email),
        blog: build.template(std.get(block, 'blog', null)),
        company: build.template(std.get(block, 'company', null)),
        default_repository_permission: build.template(std.get(block, 'default_repository_permission', null)),
        dependabot_alerts_enabled_for_new_repositories: build.template(std.get(block, 'dependabot_alerts_enabled_for_new_repositories', null)),
        dependabot_security_updates_enabled_for_new_repositories: build.template(std.get(block, 'dependabot_security_updates_enabled_for_new_repositories', null)),
        dependency_graph_enabled_for_new_repositories: build.template(std.get(block, 'dependency_graph_enabled_for_new_repositories', null)),
        description: build.template(std.get(block, 'description', null)),
        email: build.template(std.get(block, 'email', null)),
        has_organization_projects: build.template(std.get(block, 'has_organization_projects', null)),
        has_repository_projects: build.template(std.get(block, 'has_repository_projects', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members_can_create_internal_repositories: build.template(std.get(block, 'members_can_create_internal_repositories', null)),
        members_can_create_pages: build.template(std.get(block, 'members_can_create_pages', null)),
        members_can_create_private_pages: build.template(std.get(block, 'members_can_create_private_pages', null)),
        members_can_create_private_repositories: build.template(std.get(block, 'members_can_create_private_repositories', null)),
        members_can_create_public_pages: build.template(std.get(block, 'members_can_create_public_pages', null)),
        members_can_create_public_repositories: build.template(std.get(block, 'members_can_create_public_repositories', null)),
        members_can_create_repositories: build.template(std.get(block, 'members_can_create_repositories', null)),
        members_can_fork_private_repositories: build.template(std.get(block, 'members_can_fork_private_repositories', null)),
        name: build.template(std.get(block, 'name', null)),
        secret_scanning_enabled_for_new_repositories: build.template(std.get(block, 'secret_scanning_enabled_for_new_repositories', null)),
        secret_scanning_push_protection_enabled_for_new_repositories: build.template(std.get(block, 'secret_scanning_push_protection_enabled_for_new_repositories', null)),
        twitter_username: build.template(std.get(block, 'twitter_username', null)),
        web_commit_signoff_required: build.template(std.get(block, 'web_commit_signoff_required', null)),
      }),
      advanced_security_enabled_for_new_repositories: resource.field('advanced_security_enabled_for_new_repositories'),
      billing_email: resource.field('billing_email'),
      blog: resource.field('blog'),
      company: resource.field('company'),
      default_repository_permission: resource.field('default_repository_permission'),
      dependabot_alerts_enabled_for_new_repositories: resource.field('dependabot_alerts_enabled_for_new_repositories'),
      dependabot_security_updates_enabled_for_new_repositories: resource.field('dependabot_security_updates_enabled_for_new_repositories'),
      dependency_graph_enabled_for_new_repositories: resource.field('dependency_graph_enabled_for_new_repositories'),
      description: resource.field('description'),
      email: resource.field('email'),
      has_organization_projects: resource.field('has_organization_projects'),
      has_repository_projects: resource.field('has_repository_projects'),
      id: resource.field('id'),
      location: resource.field('location'),
      members_can_create_internal_repositories: resource.field('members_can_create_internal_repositories'),
      members_can_create_pages: resource.field('members_can_create_pages'),
      members_can_create_private_pages: resource.field('members_can_create_private_pages'),
      members_can_create_private_repositories: resource.field('members_can_create_private_repositories'),
      members_can_create_public_pages: resource.field('members_can_create_public_pages'),
      members_can_create_public_repositories: resource.field('members_can_create_public_repositories'),
      members_can_create_repositories: resource.field('members_can_create_repositories'),
      members_can_fork_private_repositories: resource.field('members_can_fork_private_repositories'),
      name: resource.field('name'),
      secret_scanning_enabled_for_new_repositories: resource.field('secret_scanning_enabled_for_new_repositories'),
      secret_scanning_push_protection_enabled_for_new_repositories: resource.field('secret_scanning_push_protection_enabled_for_new_repositories'),
      twitter_username: resource.field('twitter_username'),
      web_commit_signoff_required: resource.field('web_commit_signoff_required'),
    },
    organization_webhook(name, block): {
      local resource = blockType.resource('github_organization_webhook', name),
      _: resource._(block, {
        active: build.template(std.get(block, 'active', null)),
        etag: build.template(std.get(block, 'etag', null)),
        events: build.template(block.events),
        id: build.template(std.get(block, 'id', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      active: resource.field('active'),
      etag: resource.field('etag'),
      events: resource.field('events'),
      id: resource.field('id'),
      url: resource.field('url'),
    },
    project_card(name, block): {
      local resource = blockType.resource('github_project_card', name),
      _: resource._(block, {
        card_id: build.template(std.get(block, 'card_id', null)),
        column_id: build.template(block.column_id),
        content_id: build.template(std.get(block, 'content_id', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        note: build.template(std.get(block, 'note', null)),
      }),
      card_id: resource.field('card_id'),
      column_id: resource.field('column_id'),
      content_id: resource.field('content_id'),
      content_type: resource.field('content_type'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      note: resource.field('note'),
    },
    project_column(name, block): {
      local resource = blockType.resource('github_project_column', name),
      _: resource._(block, {
        column_id: build.template(std.get(block, 'column_id', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project_id: build.template(block.project_id),
      }),
      column_id: resource.field('column_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      project_id: resource.field('project_id'),
    },
    release(name, block): {
      local resource = blockType.resource('github_release', name),
      _: resource._(block, {
        assets_url: build.template(std.get(block, 'assets_url', null)),
        body: build.template(std.get(block, 'body', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        discussion_category_name: build.template(std.get(block, 'discussion_category_name', null)),
        draft: build.template(std.get(block, 'draft', null)),
        etag: build.template(std.get(block, 'etag', null)),
        generate_release_notes: build.template(std.get(block, 'generate_release_notes', null)),
        html_url: build.template(std.get(block, 'html_url', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        node_id: build.template(std.get(block, 'node_id', null)),
        prerelease: build.template(std.get(block, 'prerelease', null)),
        published_at: build.template(std.get(block, 'published_at', null)),
        release_id: build.template(std.get(block, 'release_id', null)),
        repository: build.template(block.repository),
        tag_name: build.template(block.tag_name),
        tarball_url: build.template(std.get(block, 'tarball_url', null)),
        target_commitish: build.template(std.get(block, 'target_commitish', null)),
        upload_url: build.template(std.get(block, 'upload_url', null)),
        url: build.template(std.get(block, 'url', null)),
        zipball_url: build.template(std.get(block, 'zipball_url', null)),
      }),
      assets_url: resource.field('assets_url'),
      body: resource.field('body'),
      created_at: resource.field('created_at'),
      discussion_category_name: resource.field('discussion_category_name'),
      draft: resource.field('draft'),
      etag: resource.field('etag'),
      generate_release_notes: resource.field('generate_release_notes'),
      html_url: resource.field('html_url'),
      id: resource.field('id'),
      name: resource.field('name'),
      node_id: resource.field('node_id'),
      prerelease: resource.field('prerelease'),
      published_at: resource.field('published_at'),
      release_id: resource.field('release_id'),
      repository: resource.field('repository'),
      tag_name: resource.field('tag_name'),
      tarball_url: resource.field('tarball_url'),
      target_commitish: resource.field('target_commitish'),
      upload_url: resource.field('upload_url'),
      url: resource.field('url'),
      zipball_url: resource.field('zipball_url'),
    },
    repository(name, block): {
      local resource = blockType.resource('github_repository', name),
      _: resource._(block, {
        allow_auto_merge: build.template(std.get(block, 'allow_auto_merge', null)),
        allow_merge_commit: build.template(std.get(block, 'allow_merge_commit', null)),
        allow_rebase_merge: build.template(std.get(block, 'allow_rebase_merge', null)),
        allow_squash_merge: build.template(std.get(block, 'allow_squash_merge', null)),
        allow_update_branch: build.template(std.get(block, 'allow_update_branch', null)),
        archive_on_destroy: build.template(std.get(block, 'archive_on_destroy', null)),
        archived: build.template(std.get(block, 'archived', null)),
        auto_init: build.template(std.get(block, 'auto_init', null)),
        default_branch: build.template(std.get(block, 'default_branch', null)),
        delete_branch_on_merge: build.template(std.get(block, 'delete_branch_on_merge', null)),
        description: build.template(std.get(block, 'description', null)),
        etag: build.template(std.get(block, 'etag', null)),
        full_name: build.template(std.get(block, 'full_name', null)),
        git_clone_url: build.template(std.get(block, 'git_clone_url', null)),
        gitignore_template: build.template(std.get(block, 'gitignore_template', null)),
        has_discussions: build.template(std.get(block, 'has_discussions', null)),
        has_downloads: build.template(std.get(block, 'has_downloads', null)),
        has_issues: build.template(std.get(block, 'has_issues', null)),
        has_projects: build.template(std.get(block, 'has_projects', null)),
        has_wiki: build.template(std.get(block, 'has_wiki', null)),
        homepage_url: build.template(std.get(block, 'homepage_url', null)),
        html_url: build.template(std.get(block, 'html_url', null)),
        http_clone_url: build.template(std.get(block, 'http_clone_url', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_vulnerability_alerts_during_read: build.template(std.get(block, 'ignore_vulnerability_alerts_during_read', null)),
        is_template: build.template(std.get(block, 'is_template', null)),
        license_template: build.template(std.get(block, 'license_template', null)),
        merge_commit_message: build.template(std.get(block, 'merge_commit_message', null)),
        merge_commit_title: build.template(std.get(block, 'merge_commit_title', null)),
        name: build.template(block.name),
        node_id: build.template(std.get(block, 'node_id', null)),
        primary_language: build.template(std.get(block, 'primary_language', null)),
        private: build.template(std.get(block, 'private', null)),
        repo_id: build.template(std.get(block, 'repo_id', null)),
        squash_merge_commit_message: build.template(std.get(block, 'squash_merge_commit_message', null)),
        squash_merge_commit_title: build.template(std.get(block, 'squash_merge_commit_title', null)),
        ssh_clone_url: build.template(std.get(block, 'ssh_clone_url', null)),
        svn_url: build.template(std.get(block, 'svn_url', null)),
        topics: build.template(std.get(block, 'topics', null)),
        visibility: build.template(std.get(block, 'visibility', null)),
        vulnerability_alerts: build.template(std.get(block, 'vulnerability_alerts', null)),
        web_commit_signoff_required: build.template(std.get(block, 'web_commit_signoff_required', null)),
      }),
      allow_auto_merge: resource.field('allow_auto_merge'),
      allow_merge_commit: resource.field('allow_merge_commit'),
      allow_rebase_merge: resource.field('allow_rebase_merge'),
      allow_squash_merge: resource.field('allow_squash_merge'),
      allow_update_branch: resource.field('allow_update_branch'),
      archive_on_destroy: resource.field('archive_on_destroy'),
      archived: resource.field('archived'),
      auto_init: resource.field('auto_init'),
      default_branch: resource.field('default_branch'),
      delete_branch_on_merge: resource.field('delete_branch_on_merge'),
      description: resource.field('description'),
      etag: resource.field('etag'),
      full_name: resource.field('full_name'),
      git_clone_url: resource.field('git_clone_url'),
      gitignore_template: resource.field('gitignore_template'),
      has_discussions: resource.field('has_discussions'),
      has_downloads: resource.field('has_downloads'),
      has_issues: resource.field('has_issues'),
      has_projects: resource.field('has_projects'),
      has_wiki: resource.field('has_wiki'),
      homepage_url: resource.field('homepage_url'),
      html_url: resource.field('html_url'),
      http_clone_url: resource.field('http_clone_url'),
      id: resource.field('id'),
      ignore_vulnerability_alerts_during_read: resource.field('ignore_vulnerability_alerts_during_read'),
      is_template: resource.field('is_template'),
      license_template: resource.field('license_template'),
      merge_commit_message: resource.field('merge_commit_message'),
      merge_commit_title: resource.field('merge_commit_title'),
      name: resource.field('name'),
      node_id: resource.field('node_id'),
      primary_language: resource.field('primary_language'),
      private: resource.field('private'),
      repo_id: resource.field('repo_id'),
      squash_merge_commit_message: resource.field('squash_merge_commit_message'),
      squash_merge_commit_title: resource.field('squash_merge_commit_title'),
      ssh_clone_url: resource.field('ssh_clone_url'),
      svn_url: resource.field('svn_url'),
      topics: resource.field('topics'),
      visibility: resource.field('visibility'),
      vulnerability_alerts: resource.field('vulnerability_alerts'),
      web_commit_signoff_required: resource.field('web_commit_signoff_required'),
    },
    repository_autolink_reference(name, block): {
      local resource = blockType.resource('github_repository_autolink_reference', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        is_alphanumeric: build.template(std.get(block, 'is_alphanumeric', null)),
        key_prefix: build.template(block.key_prefix),
        repository: build.template(block.repository),
        target_url_template: build.template(block.target_url_template),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      is_alphanumeric: resource.field('is_alphanumeric'),
      key_prefix: resource.field('key_prefix'),
      repository: resource.field('repository'),
      target_url_template: resource.field('target_url_template'),
    },
    repository_collaborator(name, block): {
      local resource = blockType.resource('github_repository_collaborator', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        invitation_id: build.template(std.get(block, 'invitation_id', null)),
        permission: build.template(std.get(block, 'permission', null)),
        permission_diff_suppression: build.template(std.get(block, 'permission_diff_suppression', null)),
        repository: build.template(block.repository),
        username: build.template(block.username),
      }),
      id: resource.field('id'),
      invitation_id: resource.field('invitation_id'),
      permission: resource.field('permission'),
      permission_diff_suppression: resource.field('permission_diff_suppression'),
      repository: resource.field('repository'),
      username: resource.field('username'),
    },
    repository_collaborators(name, block): {
      local resource = blockType.resource('github_repository_collaborators', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        invitation_ids: build.template(std.get(block, 'invitation_ids', null)),
        repository: build.template(block.repository),
      }),
      id: resource.field('id'),
      invitation_ids: resource.field('invitation_ids'),
      repository: resource.field('repository'),
    },
    repository_dependabot_security_updates(name, block): {
      local resource = blockType.resource('github_repository_dependabot_security_updates', name),
      _: resource._(block, {
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
      }),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      repository: resource.field('repository'),
    },
    repository_deploy_key(name, block): {
      local resource = blockType.resource('github_repository_deploy_key', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        read_only: build.template(std.get(block, 'read_only', null)),
        repository: build.template(block.repository),
        title: build.template(block.title),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      key: resource.field('key'),
      read_only: resource.field('read_only'),
      repository: resource.field('repository'),
      title: resource.field('title'),
    },
    repository_deployment_branch_policy(name, block): {
      local resource = blockType.resource('github_repository_deployment_branch_policy', name),
      _: resource._(block, {
        environment_name: build.template(block.environment_name),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        repository: build.template(block.repository),
      }),
      environment_name: resource.field('environment_name'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      repository: resource.field('repository'),
    },
    repository_environment(name, block): {
      local resource = blockType.resource('github_repository_environment', name),
      _: resource._(block, {
        can_admins_bypass: build.template(std.get(block, 'can_admins_bypass', null)),
        environment: build.template(block.environment),
        id: build.template(std.get(block, 'id', null)),
        prevent_self_review: build.template(std.get(block, 'prevent_self_review', null)),
        repository: build.template(block.repository),
        wait_timer: build.template(std.get(block, 'wait_timer', null)),
      }),
      can_admins_bypass: resource.field('can_admins_bypass'),
      environment: resource.field('environment'),
      id: resource.field('id'),
      prevent_self_review: resource.field('prevent_self_review'),
      repository: resource.field('repository'),
      wait_timer: resource.field('wait_timer'),
    },
    repository_environment_deployment_policy(name, block): {
      local resource = blockType.resource('github_repository_environment_deployment_policy', name),
      _: resource._(block, {
        branch_pattern: build.template(block.branch_pattern),
        environment: build.template(block.environment),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
      }),
      branch_pattern: resource.field('branch_pattern'),
      environment: resource.field('environment'),
      id: resource.field('id'),
      repository: resource.field('repository'),
    },
    repository_file(name, block): {
      local resource = blockType.resource('github_repository_file', name),
      _: resource._(block, {
        branch: build.template(std.get(block, 'branch', null)),
        commit_author: build.template(std.get(block, 'commit_author', null)),
        commit_email: build.template(std.get(block, 'commit_email', null)),
        commit_message: build.template(std.get(block, 'commit_message', null)),
        commit_sha: build.template(std.get(block, 'commit_sha', null)),
        content: build.template(block.content),
        file: build.template(block.file),
        id: build.template(std.get(block, 'id', null)),
        overwrite_on_create: build.template(std.get(block, 'overwrite_on_create', null)),
        ref: build.template(std.get(block, 'ref', null)),
        repository: build.template(block.repository),
        sha: build.template(std.get(block, 'sha', null)),
      }),
      branch: resource.field('branch'),
      commit_author: resource.field('commit_author'),
      commit_email: resource.field('commit_email'),
      commit_message: resource.field('commit_message'),
      commit_sha: resource.field('commit_sha'),
      content: resource.field('content'),
      file: resource.field('file'),
      id: resource.field('id'),
      overwrite_on_create: resource.field('overwrite_on_create'),
      ref: resource.field('ref'),
      repository: resource.field('repository'),
      sha: resource.field('sha'),
    },
    repository_milestone(name, block): {
      local resource = blockType.resource('github_repository_milestone', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        due_date: build.template(std.get(block, 'due_date', null)),
        id: build.template(std.get(block, 'id', null)),
        number: build.template(std.get(block, 'number', null)),
        owner: build.template(block.owner),
        repository: build.template(block.repository),
        state: build.template(std.get(block, 'state', null)),
        title: build.template(block.title),
      }),
      description: resource.field('description'),
      due_date: resource.field('due_date'),
      id: resource.field('id'),
      number: resource.field('number'),
      owner: resource.field('owner'),
      repository: resource.field('repository'),
      state: resource.field('state'),
      title: resource.field('title'),
    },
    repository_project(name, block): {
      local resource = blockType.resource('github_repository_project', name),
      _: resource._(block, {
        body: build.template(std.get(block, 'body', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        repository: build.template(block.repository),
        url: build.template(std.get(block, 'url', null)),
      }),
      body: resource.field('body'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      repository: resource.field('repository'),
      url: resource.field('url'),
    },
    repository_pull_request(name, block): {
      local resource = blockType.resource('github_repository_pull_request', name),
      _: resource._(block, {
        base_ref: build.template(block.base_ref),
        base_repository: build.template(block.base_repository),
        base_sha: build.template(std.get(block, 'base_sha', null)),
        body: build.template(std.get(block, 'body', null)),
        draft: build.template(std.get(block, 'draft', null)),
        head_ref: build.template(block.head_ref),
        head_sha: build.template(std.get(block, 'head_sha', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        maintainer_can_modify: build.template(std.get(block, 'maintainer_can_modify', null)),
        number: build.template(std.get(block, 'number', null)),
        opened_at: build.template(std.get(block, 'opened_at', null)),
        opened_by: build.template(std.get(block, 'opened_by', null)),
        owner: build.template(std.get(block, 'owner', null)),
        state: build.template(std.get(block, 'state', null)),
        title: build.template(block.title),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      base_ref: resource.field('base_ref'),
      base_repository: resource.field('base_repository'),
      base_sha: resource.field('base_sha'),
      body: resource.field('body'),
      draft: resource.field('draft'),
      head_ref: resource.field('head_ref'),
      head_sha: resource.field('head_sha'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      maintainer_can_modify: resource.field('maintainer_can_modify'),
      number: resource.field('number'),
      opened_at: resource.field('opened_at'),
      opened_by: resource.field('opened_by'),
      owner: resource.field('owner'),
      state: resource.field('state'),
      title: resource.field('title'),
      updated_at: resource.field('updated_at'),
    },
    repository_ruleset(name, block): {
      local resource = blockType.resource('github_repository_ruleset', name),
      _: resource._(block, {
        enforcement: build.template(block.enforcement),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        node_id: build.template(std.get(block, 'node_id', null)),
        repository: build.template(std.get(block, 'repository', null)),
        ruleset_id: build.template(std.get(block, 'ruleset_id', null)),
        target: build.template(block.target),
      }),
      enforcement: resource.field('enforcement'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      node_id: resource.field('node_id'),
      repository: resource.field('repository'),
      ruleset_id: resource.field('ruleset_id'),
      target: resource.field('target'),
    },
    repository_tag_protection(name, block): {
      local resource = blockType.resource('github_repository_tag_protection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        pattern: build.template(block.pattern),
        repository: build.template(block.repository),
        tag_protection_id: build.template(std.get(block, 'tag_protection_id', null)),
      }),
      id: resource.field('id'),
      pattern: resource.field('pattern'),
      repository: resource.field('repository'),
      tag_protection_id: resource.field('tag_protection_id'),
    },
    repository_topics(name, block): {
      local resource = blockType.resource('github_repository_topics', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
        topics: build.template(block.topics),
      }),
      id: resource.field('id'),
      repository: resource.field('repository'),
      topics: resource.field('topics'),
    },
    repository_webhook(name, block): {
      local resource = blockType.resource('github_repository_webhook', name),
      _: resource._(block, {
        active: build.template(std.get(block, 'active', null)),
        etag: build.template(std.get(block, 'etag', null)),
        events: build.template(block.events),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
        url: build.template(std.get(block, 'url', null)),
      }),
      active: resource.field('active'),
      etag: resource.field('etag'),
      events: resource.field('events'),
      id: resource.field('id'),
      repository: resource.field('repository'),
      url: resource.field('url'),
    },
    team(name, block): {
      local resource = blockType.resource('github_team', name),
      _: resource._(block, {
        create_default_maintainer: build.template(std.get(block, 'create_default_maintainer', null)),
        description: build.template(std.get(block, 'description', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        ldap_dn: build.template(std.get(block, 'ldap_dn', null)),
        members_count: build.template(std.get(block, 'members_count', null)),
        name: build.template(block.name),
        node_id: build.template(std.get(block, 'node_id', null)),
        parent_team_id: build.template(std.get(block, 'parent_team_id', null)),
        parent_team_read_id: build.template(std.get(block, 'parent_team_read_id', null)),
        parent_team_read_slug: build.template(std.get(block, 'parent_team_read_slug', null)),
        privacy: build.template(std.get(block, 'privacy', null)),
        slug: build.template(std.get(block, 'slug', null)),
      }),
      create_default_maintainer: resource.field('create_default_maintainer'),
      description: resource.field('description'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      ldap_dn: resource.field('ldap_dn'),
      members_count: resource.field('members_count'),
      name: resource.field('name'),
      node_id: resource.field('node_id'),
      parent_team_id: resource.field('parent_team_id'),
      parent_team_read_id: resource.field('parent_team_read_id'),
      parent_team_read_slug: resource.field('parent_team_read_slug'),
      privacy: resource.field('privacy'),
      slug: resource.field('slug'),
    },
    team_members(name, block): {
      local resource = blockType.resource('github_team_members', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        team_id: build.template(block.team_id),
      }),
      id: resource.field('id'),
      team_id: resource.field('team_id'),
    },
    team_membership(name, block): {
      local resource = blockType.resource('github_team_membership', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        role: build.template(std.get(block, 'role', null)),
        team_id: build.template(block.team_id),
        username: build.template(block.username),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      role: resource.field('role'),
      team_id: resource.field('team_id'),
      username: resource.field('username'),
    },
    team_repository(name, block): {
      local resource = blockType.resource('github_team_repository', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        permission: build.template(std.get(block, 'permission', null)),
        repository: build.template(block.repository),
        team_id: build.template(block.team_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      permission: resource.field('permission'),
      repository: resource.field('repository'),
      team_id: resource.field('team_id'),
    },
    team_settings(name, block): {
      local resource = blockType.resource('github_team_settings', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        team_id: build.template(block.team_id),
        team_slug: build.template(std.get(block, 'team_slug', null)),
        team_uid: build.template(std.get(block, 'team_uid', null)),
      }),
      id: resource.field('id'),
      team_id: resource.field('team_id'),
      team_slug: resource.field('team_slug'),
      team_uid: resource.field('team_uid'),
    },
    team_sync_group_mapping(name, block): {
      local resource = blockType.resource('github_team_sync_group_mapping', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        team_slug: build.template(block.team_slug),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      team_slug: resource.field('team_slug'),
    },
    user_gpg_key(name, block): {
      local resource = blockType.resource('github_user_gpg_key', name),
      _: resource._(block, {
        armored_public_key: build.template(block.armored_public_key),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
      }),
      armored_public_key: resource.field('armored_public_key'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      key_id: resource.field('key_id'),
    },
    user_invitation_accepter(name, block): {
      local resource = blockType.resource('github_user_invitation_accepter', name),
      _: resource._(block, {
        allow_empty_id: build.template(std.get(block, 'allow_empty_id', null)),
        id: build.template(std.get(block, 'id', null)),
        invitation_id: build.template(std.get(block, 'invitation_id', null)),
      }),
      allow_empty_id: resource.field('allow_empty_id'),
      id: resource.field('id'),
      invitation_id: resource.field('invitation_id'),
    },
    user_ssh_key(name, block): {
      local resource = blockType.resource('github_user_ssh_key', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        title: build.template(block.title),
        url: build.template(std.get(block, 'url', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      key: resource.field('key'),
      title: resource.field('title'),
      url: resource.field('url'),
    },
  },
  data: {
    local blockType = provider.blockType('data'),
    actions_environment_secrets(name, block): {
      local resource = blockType.resource('github_actions_environment_secrets', name),
      _: resource._(block, {
        environment: build.template(block.environment),
        full_name: build.template(std.get(block, 'full_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        secrets: build.template(std.get(block, 'secrets', null)),
      }),
      environment: resource.field('environment'),
      full_name: resource.field('full_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      secrets: resource.field('secrets'),
    },
    actions_environment_variables(name, block): {
      local resource = blockType.resource('github_actions_environment_variables', name),
      _: resource._(block, {
        environment: build.template(block.environment),
        full_name: build.template(std.get(block, 'full_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        variables: build.template(std.get(block, 'variables', null)),
      }),
      environment: resource.field('environment'),
      full_name: resource.field('full_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      variables: resource.field('variables'),
    },
    actions_organization_oidc_subject_claim_customization_template(name, block): {
      local resource = blockType.resource('github_actions_organization_oidc_subject_claim_customization_template', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        include_claim_keys: build.template(std.get(block, 'include_claim_keys', null)),
      }),
      id: resource.field('id'),
      include_claim_keys: resource.field('include_claim_keys'),
    },
    actions_organization_public_key(name, block): {
      local resource = blockType.resource('github_actions_organization_public_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      key_id: resource.field('key_id'),
    },
    actions_organization_registration_token(name, block): {
      local resource = blockType.resource('github_actions_organization_registration_token', name),
      _: resource._(block, {
        expires_at: build.template(std.get(block, 'expires_at', null)),
        id: build.template(std.get(block, 'id', null)),
        token: build.template(std.get(block, 'token', null)),
      }),
      expires_at: resource.field('expires_at'),
      id: resource.field('id'),
      token: resource.field('token'),
    },
    actions_organization_secrets(name, block): {
      local resource = blockType.resource('github_actions_organization_secrets', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        secrets: build.template(std.get(block, 'secrets', null)),
      }),
      id: resource.field('id'),
      secrets: resource.field('secrets'),
    },
    actions_organization_variables(name, block): {
      local resource = blockType.resource('github_actions_organization_variables', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        variables: build.template(std.get(block, 'variables', null)),
      }),
      id: resource.field('id'),
      variables: resource.field('variables'),
    },
    actions_public_key(name, block): {
      local resource = blockType.resource('github_actions_public_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
        repository: build.template(block.repository),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      key_id: resource.field('key_id'),
      repository: resource.field('repository'),
    },
    actions_registration_token(name, block): {
      local resource = blockType.resource('github_actions_registration_token', name),
      _: resource._(block, {
        expires_at: build.template(std.get(block, 'expires_at', null)),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
        token: build.template(std.get(block, 'token', null)),
      }),
      expires_at: resource.field('expires_at'),
      id: resource.field('id'),
      repository: resource.field('repository'),
      token: resource.field('token'),
    },
    actions_repository_oidc_subject_claim_customization_template(name, block): {
      local resource = blockType.resource('github_actions_repository_oidc_subject_claim_customization_template', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        include_claim_keys: build.template(std.get(block, 'include_claim_keys', null)),
        name: build.template(block.name),
        use_default: build.template(std.get(block, 'use_default', null)),
      }),
      id: resource.field('id'),
      include_claim_keys: resource.field('include_claim_keys'),
      name: resource.field('name'),
      use_default: resource.field('use_default'),
    },
    actions_secrets(name, block): {
      local resource = blockType.resource('github_actions_secrets', name),
      _: resource._(block, {
        full_name: build.template(std.get(block, 'full_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        secrets: build.template(std.get(block, 'secrets', null)),
      }),
      full_name: resource.field('full_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      secrets: resource.field('secrets'),
    },
    actions_variables(name, block): {
      local resource = blockType.resource('github_actions_variables', name),
      _: resource._(block, {
        full_name: build.template(std.get(block, 'full_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        variables: build.template(std.get(block, 'variables', null)),
      }),
      full_name: resource.field('full_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      variables: resource.field('variables'),
    },
    app(name, block): {
      local resource = blockType.resource('github_app', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        node_id: build.template(std.get(block, 'node_id', null)),
        slug: build.template(block.slug),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      node_id: resource.field('node_id'),
      slug: resource.field('slug'),
    },
    app_token(name, block): {
      local resource = blockType.resource('github_app_token', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        id: build.template(std.get(block, 'id', null)),
        installation_id: build.template(block.installation_id),
        pem_file: build.template(block.pem_file),
        token: build.template(std.get(block, 'token', null)),
      }),
      app_id: resource.field('app_id'),
      id: resource.field('id'),
      installation_id: resource.field('installation_id'),
      pem_file: resource.field('pem_file'),
      token: resource.field('token'),
    },
    branch(name, block): {
      local resource = blockType.resource('github_branch', name),
      _: resource._(block, {
        branch: build.template(block.branch),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        ref: build.template(std.get(block, 'ref', null)),
        repository: build.template(block.repository),
        sha: build.template(std.get(block, 'sha', null)),
      }),
      branch: resource.field('branch'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      ref: resource.field('ref'),
      repository: resource.field('repository'),
      sha: resource.field('sha'),
    },
    branch_protection_rules(name, block): {
      local resource = blockType.resource('github_branch_protection_rules', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
        rules: build.template(std.get(block, 'rules', null)),
      }),
      id: resource.field('id'),
      repository: resource.field('repository'),
      rules: resource.field('rules'),
    },
    codespaces_organization_public_key(name, block): {
      local resource = blockType.resource('github_codespaces_organization_public_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      key_id: resource.field('key_id'),
    },
    codespaces_organization_secrets(name, block): {
      local resource = blockType.resource('github_codespaces_organization_secrets', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        secrets: build.template(std.get(block, 'secrets', null)),
      }),
      id: resource.field('id'),
      secrets: resource.field('secrets'),
    },
    codespaces_public_key(name, block): {
      local resource = blockType.resource('github_codespaces_public_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
        repository: build.template(block.repository),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      key_id: resource.field('key_id'),
      repository: resource.field('repository'),
    },
    codespaces_secrets(name, block): {
      local resource = blockType.resource('github_codespaces_secrets', name),
      _: resource._(block, {
        full_name: build.template(std.get(block, 'full_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        secrets: build.template(std.get(block, 'secrets', null)),
      }),
      full_name: resource.field('full_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      secrets: resource.field('secrets'),
    },
    codespaces_user_public_key(name, block): {
      local resource = blockType.resource('github_codespaces_user_public_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      key_id: resource.field('key_id'),
    },
    codespaces_user_secrets(name, block): {
      local resource = blockType.resource('github_codespaces_user_secrets', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        secrets: build.template(std.get(block, 'secrets', null)),
      }),
      id: resource.field('id'),
      secrets: resource.field('secrets'),
    },
    collaborators(name, block): {
      local resource = blockType.resource('github_collaborators', name),
      _: resource._(block, {
        affiliation: build.template(std.get(block, 'affiliation', null)),
        collaborator: build.template(std.get(block, 'collaborator', null)),
        id: build.template(std.get(block, 'id', null)),
        owner: build.template(block.owner),
        repository: build.template(block.repository),
      }),
      affiliation: resource.field('affiliation'),
      collaborator: resource.field('collaborator'),
      id: resource.field('id'),
      owner: resource.field('owner'),
      repository: resource.field('repository'),
    },
    dependabot_organization_public_key(name, block): {
      local resource = blockType.resource('github_dependabot_organization_public_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      key_id: resource.field('key_id'),
    },
    dependabot_organization_secrets(name, block): {
      local resource = blockType.resource('github_dependabot_organization_secrets', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        secrets: build.template(std.get(block, 'secrets', null)),
      }),
      id: resource.field('id'),
      secrets: resource.field('secrets'),
    },
    dependabot_public_key(name, block): {
      local resource = blockType.resource('github_dependabot_public_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
        repository: build.template(block.repository),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      key_id: resource.field('key_id'),
      repository: resource.field('repository'),
    },
    dependabot_secrets(name, block): {
      local resource = blockType.resource('github_dependabot_secrets', name),
      _: resource._(block, {
        full_name: build.template(std.get(block, 'full_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        secrets: build.template(std.get(block, 'secrets', null)),
      }),
      full_name: resource.field('full_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      secrets: resource.field('secrets'),
    },
    enterprise(name, block): {
      local resource = blockType.resource('github_enterprise', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        database_id: build.template(std.get(block, 'database_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        slug: build.template(block.slug),
        url: build.template(std.get(block, 'url', null)),
      }),
      created_at: resource.field('created_at'),
      database_id: resource.field('database_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      slug: resource.field('slug'),
      url: resource.field('url'),
    },
    external_groups(name, block): {
      local resource = blockType.resource('github_external_groups', name),
      _: resource._(block, {
        external_groups: build.template(std.get(block, 'external_groups', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      external_groups: resource.field('external_groups'),
      id: resource.field('id'),
    },
    ip_ranges(name, block): {
      local resource = blockType.resource('github_ip_ranges', name),
      _: resource._(block, {
        actions: build.template(std.get(block, 'actions', null)),
        actions_ipv4: build.template(std.get(block, 'actions_ipv4', null)),
        actions_ipv6: build.template(std.get(block, 'actions_ipv6', null)),
        api: build.template(std.get(block, 'api', null)),
        api_ipv4: build.template(std.get(block, 'api_ipv4', null)),
        api_ipv6: build.template(std.get(block, 'api_ipv6', null)),
        dependabot: build.template(std.get(block, 'dependabot', null)),
        dependabot_ipv4: build.template(std.get(block, 'dependabot_ipv4', null)),
        dependabot_ipv6: build.template(std.get(block, 'dependabot_ipv6', null)),
        git: build.template(std.get(block, 'git', null)),
        git_ipv4: build.template(std.get(block, 'git_ipv4', null)),
        git_ipv6: build.template(std.get(block, 'git_ipv6', null)),
        hooks: build.template(std.get(block, 'hooks', null)),
        hooks_ipv4: build.template(std.get(block, 'hooks_ipv4', null)),
        hooks_ipv6: build.template(std.get(block, 'hooks_ipv6', null)),
        id: build.template(std.get(block, 'id', null)),
        importer: build.template(std.get(block, 'importer', null)),
        importer_ipv4: build.template(std.get(block, 'importer_ipv4', null)),
        importer_ipv6: build.template(std.get(block, 'importer_ipv6', null)),
        packages: build.template(std.get(block, 'packages', null)),
        packages_ipv4: build.template(std.get(block, 'packages_ipv4', null)),
        packages_ipv6: build.template(std.get(block, 'packages_ipv6', null)),
        pages: build.template(std.get(block, 'pages', null)),
        pages_ipv4: build.template(std.get(block, 'pages_ipv4', null)),
        pages_ipv6: build.template(std.get(block, 'pages_ipv6', null)),
        web: build.template(std.get(block, 'web', null)),
        web_ipv4: build.template(std.get(block, 'web_ipv4', null)),
        web_ipv6: build.template(std.get(block, 'web_ipv6', null)),
      }),
      actions: resource.field('actions'),
      actions_ipv4: resource.field('actions_ipv4'),
      actions_ipv6: resource.field('actions_ipv6'),
      api: resource.field('api'),
      api_ipv4: resource.field('api_ipv4'),
      api_ipv6: resource.field('api_ipv6'),
      dependabot: resource.field('dependabot'),
      dependabot_ipv4: resource.field('dependabot_ipv4'),
      dependabot_ipv6: resource.field('dependabot_ipv6'),
      git: resource.field('git'),
      git_ipv4: resource.field('git_ipv4'),
      git_ipv6: resource.field('git_ipv6'),
      hooks: resource.field('hooks'),
      hooks_ipv4: resource.field('hooks_ipv4'),
      hooks_ipv6: resource.field('hooks_ipv6'),
      id: resource.field('id'),
      importer: resource.field('importer'),
      importer_ipv4: resource.field('importer_ipv4'),
      importer_ipv6: resource.field('importer_ipv6'),
      packages: resource.field('packages'),
      packages_ipv4: resource.field('packages_ipv4'),
      packages_ipv6: resource.field('packages_ipv6'),
      pages: resource.field('pages'),
      pages_ipv4: resource.field('pages_ipv4'),
      pages_ipv6: resource.field('pages_ipv6'),
      web: resource.field('web'),
      web_ipv4: resource.field('web_ipv4'),
      web_ipv6: resource.field('web_ipv6'),
    },
    issue_labels(name, block): {
      local resource = blockType.resource('github_issue_labels', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        repository: build.template(block.repository),
      }),
      id: resource.field('id'),
      labels: resource.field('labels'),
      repository: resource.field('repository'),
    },
    membership(name, block): {
      local resource = blockType.resource('github_membership', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(std.get(block, 'organization', null)),
        role: build.template(std.get(block, 'role', null)),
        state: build.template(std.get(block, 'state', null)),
        username: build.template(block.username),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      organization: resource.field('organization'),
      role: resource.field('role'),
      state: resource.field('state'),
      username: resource.field('username'),
    },
    organization(name, block): {
      local resource = blockType.resource('github_organization', name),
      _: resource._(block, {
        advanced_security_enabled_for_new_repositories: build.template(std.get(block, 'advanced_security_enabled_for_new_repositories', null)),
        default_repository_permission: build.template(std.get(block, 'default_repository_permission', null)),
        dependabot_alerts_enabled_for_new_repositories: build.template(std.get(block, 'dependabot_alerts_enabled_for_new_repositories', null)),
        dependabot_security_updates_enabled_for_new_repositories: build.template(std.get(block, 'dependabot_security_updates_enabled_for_new_repositories', null)),
        dependency_graph_enabled_for_new_repositories: build.template(std.get(block, 'dependency_graph_enabled_for_new_repositories', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_archived_repos: build.template(std.get(block, 'ignore_archived_repos', null)),
        login: build.template(std.get(block, 'login', null)),
        members: build.template(std.get(block, 'members', null)),
        members_allowed_repository_creation_type: build.template(std.get(block, 'members_allowed_repository_creation_type', null)),
        members_can_create_internal_repositories: build.template(std.get(block, 'members_can_create_internal_repositories', null)),
        members_can_create_pages: build.template(std.get(block, 'members_can_create_pages', null)),
        members_can_create_private_pages: build.template(std.get(block, 'members_can_create_private_pages', null)),
        members_can_create_private_repositories: build.template(std.get(block, 'members_can_create_private_repositories', null)),
        members_can_create_public_pages: build.template(std.get(block, 'members_can_create_public_pages', null)),
        members_can_create_public_repositories: build.template(std.get(block, 'members_can_create_public_repositories', null)),
        members_can_create_repositories: build.template(std.get(block, 'members_can_create_repositories', null)),
        members_can_fork_private_repositories: build.template(std.get(block, 'members_can_fork_private_repositories', null)),
        name: build.template(block.name),
        node_id: build.template(std.get(block, 'node_id', null)),
        orgname: build.template(std.get(block, 'orgname', null)),
        plan: build.template(std.get(block, 'plan', null)),
        repositories: build.template(std.get(block, 'repositories', null)),
        secret_scanning_enabled_for_new_repositories: build.template(std.get(block, 'secret_scanning_enabled_for_new_repositories', null)),
        secret_scanning_push_protection_enabled_for_new_repositories: build.template(std.get(block, 'secret_scanning_push_protection_enabled_for_new_repositories', null)),
        two_factor_requirement_enabled: build.template(std.get(block, 'two_factor_requirement_enabled', null)),
        users: build.template(std.get(block, 'users', null)),
        web_commit_signoff_required: build.template(std.get(block, 'web_commit_signoff_required', null)),
      }),
      advanced_security_enabled_for_new_repositories: resource.field('advanced_security_enabled_for_new_repositories'),
      default_repository_permission: resource.field('default_repository_permission'),
      dependabot_alerts_enabled_for_new_repositories: resource.field('dependabot_alerts_enabled_for_new_repositories'),
      dependabot_security_updates_enabled_for_new_repositories: resource.field('dependabot_security_updates_enabled_for_new_repositories'),
      dependency_graph_enabled_for_new_repositories: resource.field('dependency_graph_enabled_for_new_repositories'),
      description: resource.field('description'),
      id: resource.field('id'),
      ignore_archived_repos: resource.field('ignore_archived_repos'),
      login: resource.field('login'),
      members: resource.field('members'),
      members_allowed_repository_creation_type: resource.field('members_allowed_repository_creation_type'),
      members_can_create_internal_repositories: resource.field('members_can_create_internal_repositories'),
      members_can_create_pages: resource.field('members_can_create_pages'),
      members_can_create_private_pages: resource.field('members_can_create_private_pages'),
      members_can_create_private_repositories: resource.field('members_can_create_private_repositories'),
      members_can_create_public_pages: resource.field('members_can_create_public_pages'),
      members_can_create_public_repositories: resource.field('members_can_create_public_repositories'),
      members_can_create_repositories: resource.field('members_can_create_repositories'),
      members_can_fork_private_repositories: resource.field('members_can_fork_private_repositories'),
      name: resource.field('name'),
      node_id: resource.field('node_id'),
      orgname: resource.field('orgname'),
      plan: resource.field('plan'),
      repositories: resource.field('repositories'),
      secret_scanning_enabled_for_new_repositories: resource.field('secret_scanning_enabled_for_new_repositories'),
      secret_scanning_push_protection_enabled_for_new_repositories: resource.field('secret_scanning_push_protection_enabled_for_new_repositories'),
      two_factor_requirement_enabled: resource.field('two_factor_requirement_enabled'),
      users: resource.field('users'),
      web_commit_signoff_required: resource.field('web_commit_signoff_required'),
    },
    organization_custom_role(name, block): {
      local resource = blockType.resource('github_organization_custom_role', name),
      _: resource._(block, {
        base_role: build.template(std.get(block, 'base_role', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        permissions: build.template(std.get(block, 'permissions', null)),
      }),
      base_role: resource.field('base_role'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      permissions: resource.field('permissions'),
    },
    organization_external_identities(name, block): {
      local resource = blockType.resource('github_organization_external_identities', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identities: build.template(std.get(block, 'identities', null)),
      }),
      id: resource.field('id'),
      identities: resource.field('identities'),
    },
    organization_ip_allow_list(name, block): {
      local resource = blockType.resource('github_organization_ip_allow_list', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ip_allow_list: build.template(std.get(block, 'ip_allow_list', null)),
      }),
      id: resource.field('id'),
      ip_allow_list: resource.field('ip_allow_list'),
    },
    organization_team_sync_groups(name, block): {
      local resource = blockType.resource('github_organization_team_sync_groups', name),
      _: resource._(block, {
        groups: build.template(std.get(block, 'groups', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      groups: resource.field('groups'),
      id: resource.field('id'),
    },
    organization_teams(name, block): {
      local resource = blockType.resource('github_organization_teams', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        results_per_page: build.template(std.get(block, 'results_per_page', null)),
        root_teams_only: build.template(std.get(block, 'root_teams_only', null)),
        summary_only: build.template(std.get(block, 'summary_only', null)),
        teams: build.template(std.get(block, 'teams', null)),
      }),
      id: resource.field('id'),
      results_per_page: resource.field('results_per_page'),
      root_teams_only: resource.field('root_teams_only'),
      summary_only: resource.field('summary_only'),
      teams: resource.field('teams'),
    },
    organization_webhooks(name, block): {
      local resource = blockType.resource('github_organization_webhooks', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        webhooks: build.template(std.get(block, 'webhooks', null)),
      }),
      id: resource.field('id'),
      webhooks: resource.field('webhooks'),
    },
    ref(name, block): {
      local resource = blockType.resource('github_ref', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        owner: build.template(std.get(block, 'owner', null)),
        ref: build.template(block.ref),
        repository: build.template(block.repository),
        sha: build.template(std.get(block, 'sha', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      owner: resource.field('owner'),
      ref: resource.field('ref'),
      repository: resource.field('repository'),
      sha: resource.field('sha'),
    },
    release(name, block): {
      local resource = blockType.resource('github_release', name),
      _: resource._(block, {
        asserts_url: build.template(std.get(block, 'asserts_url', null)),
        assets: build.template(std.get(block, 'assets', null)),
        assets_url: build.template(std.get(block, 'assets_url', null)),
        body: build.template(std.get(block, 'body', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        draft: build.template(std.get(block, 'draft', null)),
        html_url: build.template(std.get(block, 'html_url', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        owner: build.template(block.owner),
        prerelease: build.template(std.get(block, 'prerelease', null)),
        published_at: build.template(std.get(block, 'published_at', null)),
        release_id: build.template(std.get(block, 'release_id', null)),
        release_tag: build.template(std.get(block, 'release_tag', null)),
        repository: build.template(block.repository),
        retrieve_by: build.template(block.retrieve_by),
        tarball_url: build.template(std.get(block, 'tarball_url', null)),
        target_commitish: build.template(std.get(block, 'target_commitish', null)),
        upload_url: build.template(std.get(block, 'upload_url', null)),
        url: build.template(std.get(block, 'url', null)),
        zipball_url: build.template(std.get(block, 'zipball_url', null)),
      }),
      asserts_url: resource.field('asserts_url'),
      assets: resource.field('assets'),
      assets_url: resource.field('assets_url'),
      body: resource.field('body'),
      created_at: resource.field('created_at'),
      draft: resource.field('draft'),
      html_url: resource.field('html_url'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      prerelease: resource.field('prerelease'),
      published_at: resource.field('published_at'),
      release_id: resource.field('release_id'),
      release_tag: resource.field('release_tag'),
      repository: resource.field('repository'),
      retrieve_by: resource.field('retrieve_by'),
      tarball_url: resource.field('tarball_url'),
      target_commitish: resource.field('target_commitish'),
      upload_url: resource.field('upload_url'),
      url: resource.field('url'),
      zipball_url: resource.field('zipball_url'),
    },
    repositories(name, block): {
      local resource = blockType.resource('github_repositories', name),
      _: resource._(block, {
        full_names: build.template(std.get(block, 'full_names', null)),
        id: build.template(std.get(block, 'id', null)),
        include_repo_id: build.template(std.get(block, 'include_repo_id', null)),
        names: build.template(std.get(block, 'names', null)),
        query: build.template(block.query),
        repo_ids: build.template(std.get(block, 'repo_ids', null)),
        results_per_page: build.template(std.get(block, 'results_per_page', null)),
        sort: build.template(std.get(block, 'sort', null)),
      }),
      full_names: resource.field('full_names'),
      id: resource.field('id'),
      include_repo_id: resource.field('include_repo_id'),
      names: resource.field('names'),
      query: resource.field('query'),
      repo_ids: resource.field('repo_ids'),
      results_per_page: resource.field('results_per_page'),
      sort: resource.field('sort'),
    },
    repository(name, block): {
      local resource = blockType.resource('github_repository', name),
      _: resource._(block, {
        allow_auto_merge: build.template(std.get(block, 'allow_auto_merge', null)),
        allow_merge_commit: build.template(std.get(block, 'allow_merge_commit', null)),
        allow_rebase_merge: build.template(std.get(block, 'allow_rebase_merge', null)),
        allow_squash_merge: build.template(std.get(block, 'allow_squash_merge', null)),
        archived: build.template(std.get(block, 'archived', null)),
        default_branch: build.template(std.get(block, 'default_branch', null)),
        description: build.template(std.get(block, 'description', null)),
        fork: build.template(std.get(block, 'fork', null)),
        full_name: build.template(std.get(block, 'full_name', null)),
        git_clone_url: build.template(std.get(block, 'git_clone_url', null)),
        has_discussions: build.template(std.get(block, 'has_discussions', null)),
        has_downloads: build.template(std.get(block, 'has_downloads', null)),
        has_issues: build.template(std.get(block, 'has_issues', null)),
        has_projects: build.template(std.get(block, 'has_projects', null)),
        has_wiki: build.template(std.get(block, 'has_wiki', null)),
        homepage_url: build.template(std.get(block, 'homepage_url', null)),
        html_url: build.template(std.get(block, 'html_url', null)),
        http_clone_url: build.template(std.get(block, 'http_clone_url', null)),
        id: build.template(std.get(block, 'id', null)),
        is_template: build.template(std.get(block, 'is_template', null)),
        merge_commit_message: build.template(std.get(block, 'merge_commit_message', null)),
        merge_commit_title: build.template(std.get(block, 'merge_commit_title', null)),
        name: build.template(std.get(block, 'name', null)),
        node_id: build.template(std.get(block, 'node_id', null)),
        pages: build.template(std.get(block, 'pages', null)),
        primary_language: build.template(std.get(block, 'primary_language', null)),
        private: build.template(std.get(block, 'private', null)),
        repo_id: build.template(std.get(block, 'repo_id', null)),
        repository_license: build.template(std.get(block, 'repository_license', null)),
        squash_merge_commit_message: build.template(std.get(block, 'squash_merge_commit_message', null)),
        squash_merge_commit_title: build.template(std.get(block, 'squash_merge_commit_title', null)),
        ssh_clone_url: build.template(std.get(block, 'ssh_clone_url', null)),
        svn_url: build.template(std.get(block, 'svn_url', null)),
        template: build.template(std.get(block, 'template', null)),
        topics: build.template(std.get(block, 'topics', null)),
        visibility: build.template(std.get(block, 'visibility', null)),
      }),
      allow_auto_merge: resource.field('allow_auto_merge'),
      allow_merge_commit: resource.field('allow_merge_commit'),
      allow_rebase_merge: resource.field('allow_rebase_merge'),
      allow_squash_merge: resource.field('allow_squash_merge'),
      archived: resource.field('archived'),
      default_branch: resource.field('default_branch'),
      description: resource.field('description'),
      fork: resource.field('fork'),
      full_name: resource.field('full_name'),
      git_clone_url: resource.field('git_clone_url'),
      has_discussions: resource.field('has_discussions'),
      has_downloads: resource.field('has_downloads'),
      has_issues: resource.field('has_issues'),
      has_projects: resource.field('has_projects'),
      has_wiki: resource.field('has_wiki'),
      homepage_url: resource.field('homepage_url'),
      html_url: resource.field('html_url'),
      http_clone_url: resource.field('http_clone_url'),
      id: resource.field('id'),
      is_template: resource.field('is_template'),
      merge_commit_message: resource.field('merge_commit_message'),
      merge_commit_title: resource.field('merge_commit_title'),
      name: resource.field('name'),
      node_id: resource.field('node_id'),
      pages: resource.field('pages'),
      primary_language: resource.field('primary_language'),
      private: resource.field('private'),
      repo_id: resource.field('repo_id'),
      repository_license: resource.field('repository_license'),
      squash_merge_commit_message: resource.field('squash_merge_commit_message'),
      squash_merge_commit_title: resource.field('squash_merge_commit_title'),
      ssh_clone_url: resource.field('ssh_clone_url'),
      svn_url: resource.field('svn_url'),
      template: resource.field('template'),
      topics: resource.field('topics'),
      visibility: resource.field('visibility'),
    },
    repository_autolink_references(name, block): {
      local resource = blockType.resource('github_repository_autolink_references', name),
      _: resource._(block, {
        autolink_references: build.template(std.get(block, 'autolink_references', null)),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
      }),
      autolink_references: resource.field('autolink_references'),
      id: resource.field('id'),
      repository: resource.field('repository'),
    },
    repository_branches(name, block): {
      local resource = blockType.resource('github_repository_branches', name),
      _: resource._(block, {
        branches: build.template(std.get(block, 'branches', null)),
        id: build.template(std.get(block, 'id', null)),
        only_non_protected_branches: build.template(std.get(block, 'only_non_protected_branches', null)),
        only_protected_branches: build.template(std.get(block, 'only_protected_branches', null)),
        repository: build.template(block.repository),
      }),
      branches: resource.field('branches'),
      id: resource.field('id'),
      only_non_protected_branches: resource.field('only_non_protected_branches'),
      only_protected_branches: resource.field('only_protected_branches'),
      repository: resource.field('repository'),
    },
    repository_deploy_keys(name, block): {
      local resource = blockType.resource('github_repository_deploy_keys', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        keys: build.template(std.get(block, 'keys', null)),
        repository: build.template(block.repository),
      }),
      id: resource.field('id'),
      keys: resource.field('keys'),
      repository: resource.field('repository'),
    },
    repository_deployment_branch_policies(name, block): {
      local resource = blockType.resource('github_repository_deployment_branch_policies', name),
      _: resource._(block, {
        deployment_branch_policies: build.template(std.get(block, 'deployment_branch_policies', null)),
        environment_name: build.template(block.environment_name),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
      }),
      deployment_branch_policies: resource.field('deployment_branch_policies'),
      environment_name: resource.field('environment_name'),
      id: resource.field('id'),
      repository: resource.field('repository'),
    },
    repository_environments(name, block): {
      local resource = blockType.resource('github_repository_environments', name),
      _: resource._(block, {
        environments: build.template(std.get(block, 'environments', null)),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
      }),
      environments: resource.field('environments'),
      id: resource.field('id'),
      repository: resource.field('repository'),
    },
    repository_file(name, block): {
      local resource = blockType.resource('github_repository_file', name),
      _: resource._(block, {
        branch: build.template(std.get(block, 'branch', null)),
        commit_author: build.template(std.get(block, 'commit_author', null)),
        commit_email: build.template(std.get(block, 'commit_email', null)),
        commit_message: build.template(std.get(block, 'commit_message', null)),
        commit_sha: build.template(std.get(block, 'commit_sha', null)),
        content: build.template(std.get(block, 'content', null)),
        file: build.template(block.file),
        id: build.template(std.get(block, 'id', null)),
        ref: build.template(std.get(block, 'ref', null)),
        repository: build.template(block.repository),
        sha: build.template(std.get(block, 'sha', null)),
      }),
      branch: resource.field('branch'),
      commit_author: resource.field('commit_author'),
      commit_email: resource.field('commit_email'),
      commit_message: resource.field('commit_message'),
      commit_sha: resource.field('commit_sha'),
      content: resource.field('content'),
      file: resource.field('file'),
      id: resource.field('id'),
      ref: resource.field('ref'),
      repository: resource.field('repository'),
      sha: resource.field('sha'),
    },
    repository_milestone(name, block): {
      local resource = blockType.resource('github_repository_milestone', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        due_date: build.template(std.get(block, 'due_date', null)),
        id: build.template(std.get(block, 'id', null)),
        number: build.template(block.number),
        owner: build.template(block.owner),
        repository: build.template(block.repository),
        state: build.template(std.get(block, 'state', null)),
        title: build.template(std.get(block, 'title', null)),
      }),
      description: resource.field('description'),
      due_date: resource.field('due_date'),
      id: resource.field('id'),
      number: resource.field('number'),
      owner: resource.field('owner'),
      repository: resource.field('repository'),
      state: resource.field('state'),
      title: resource.field('title'),
    },
    repository_pull_request(name, block): {
      local resource = blockType.resource('github_repository_pull_request', name),
      _: resource._(block, {
        base_ref: build.template(std.get(block, 'base_ref', null)),
        base_repository: build.template(block.base_repository),
        base_sha: build.template(std.get(block, 'base_sha', null)),
        body: build.template(std.get(block, 'body', null)),
        draft: build.template(std.get(block, 'draft', null)),
        head_owner: build.template(std.get(block, 'head_owner', null)),
        head_ref: build.template(std.get(block, 'head_ref', null)),
        head_repository: build.template(std.get(block, 'head_repository', null)),
        head_sha: build.template(std.get(block, 'head_sha', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        maintainer_can_modify: build.template(std.get(block, 'maintainer_can_modify', null)),
        number: build.template(block.number),
        opened_at: build.template(std.get(block, 'opened_at', null)),
        opened_by: build.template(std.get(block, 'opened_by', null)),
        owner: build.template(std.get(block, 'owner', null)),
        state: build.template(std.get(block, 'state', null)),
        title: build.template(std.get(block, 'title', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      base_ref: resource.field('base_ref'),
      base_repository: resource.field('base_repository'),
      base_sha: resource.field('base_sha'),
      body: resource.field('body'),
      draft: resource.field('draft'),
      head_owner: resource.field('head_owner'),
      head_ref: resource.field('head_ref'),
      head_repository: resource.field('head_repository'),
      head_sha: resource.field('head_sha'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      maintainer_can_modify: resource.field('maintainer_can_modify'),
      number: resource.field('number'),
      opened_at: resource.field('opened_at'),
      opened_by: resource.field('opened_by'),
      owner: resource.field('owner'),
      state: resource.field('state'),
      title: resource.field('title'),
      updated_at: resource.field('updated_at'),
    },
    repository_pull_requests(name, block): {
      local resource = blockType.resource('github_repository_pull_requests', name),
      _: resource._(block, {
        base_ref: build.template(std.get(block, 'base_ref', null)),
        base_repository: build.template(block.base_repository),
        head_ref: build.template(std.get(block, 'head_ref', null)),
        id: build.template(std.get(block, 'id', null)),
        owner: build.template(std.get(block, 'owner', null)),
        results: build.template(std.get(block, 'results', null)),
        sort_by: build.template(std.get(block, 'sort_by', null)),
        sort_direction: build.template(std.get(block, 'sort_direction', null)),
        state: build.template(std.get(block, 'state', null)),
      }),
      base_ref: resource.field('base_ref'),
      base_repository: resource.field('base_repository'),
      head_ref: resource.field('head_ref'),
      id: resource.field('id'),
      owner: resource.field('owner'),
      results: resource.field('results'),
      sort_by: resource.field('sort_by'),
      sort_direction: resource.field('sort_direction'),
      state: resource.field('state'),
    },
    repository_teams(name, block): {
      local resource = blockType.resource('github_repository_teams', name),
      _: resource._(block, {
        full_name: build.template(std.get(block, 'full_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        teams: build.template(std.get(block, 'teams', null)),
      }),
      full_name: resource.field('full_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      teams: resource.field('teams'),
    },
    repository_webhooks(name, block): {
      local resource = blockType.resource('github_repository_webhooks', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
        webhooks: build.template(std.get(block, 'webhooks', null)),
      }),
      id: resource.field('id'),
      repository: resource.field('repository'),
      webhooks: resource.field('webhooks'),
    },
    rest_api(name, block): {
      local resource = blockType.resource('github_rest_api', name),
      _: resource._(block, {
        body: build.template(std.get(block, 'body', null)),
        code: build.template(std.get(block, 'code', null)),
        endpoint: build.template(block.endpoint),
        headers: build.template(std.get(block, 'headers', null)),
        id: build.template(std.get(block, 'id', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      body: resource.field('body'),
      code: resource.field('code'),
      endpoint: resource.field('endpoint'),
      headers: resource.field('headers'),
      id: resource.field('id'),
      status: resource.field('status'),
    },
    ssh_keys(name, block): {
      local resource = blockType.resource('github_ssh_keys', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        keys: build.template(std.get(block, 'keys', null)),
      }),
      id: resource.field('id'),
      keys: resource.field('keys'),
    },
    team(name, block): {
      local resource = blockType.resource('github_team', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(std.get(block, 'members', null)),
        membership_type: build.template(std.get(block, 'membership_type', null)),
        name: build.template(std.get(block, 'name', null)),
        node_id: build.template(std.get(block, 'node_id', null)),
        permission: build.template(std.get(block, 'permission', null)),
        privacy: build.template(std.get(block, 'privacy', null)),
        repositories: build.template(std.get(block, 'repositories', null)),
        repositories_detailed: build.template(std.get(block, 'repositories_detailed', null)),
        results_per_page: build.template(std.get(block, 'results_per_page', null)),
        slug: build.template(block.slug),
        summary_only: build.template(std.get(block, 'summary_only', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      members: resource.field('members'),
      membership_type: resource.field('membership_type'),
      name: resource.field('name'),
      node_id: resource.field('node_id'),
      permission: resource.field('permission'),
      privacy: resource.field('privacy'),
      repositories: resource.field('repositories'),
      repositories_detailed: resource.field('repositories_detailed'),
      results_per_page: resource.field('results_per_page'),
      slug: resource.field('slug'),
      summary_only: resource.field('summary_only'),
    },
    tree(name, block): {
      local resource = blockType.resource('github_tree', name),
      _: resource._(block, {
        entries: build.template(std.get(block, 'entries', null)),
        id: build.template(std.get(block, 'id', null)),
        recursive: build.template(std.get(block, 'recursive', null)),
        repository: build.template(block.repository),
        tree_sha: build.template(block.tree_sha),
      }),
      entries: resource.field('entries'),
      id: resource.field('id'),
      recursive: resource.field('recursive'),
      repository: resource.field('repository'),
      tree_sha: resource.field('tree_sha'),
    },
    user(name, block): {
      local resource = blockType.resource('github_user', name),
      _: resource._(block, {
        avatar_url: build.template(std.get(block, 'avatar_url', null)),
        bio: build.template(std.get(block, 'bio', null)),
        blog: build.template(std.get(block, 'blog', null)),
        company: build.template(std.get(block, 'company', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        email: build.template(std.get(block, 'email', null)),
        followers: build.template(std.get(block, 'followers', null)),
        following: build.template(std.get(block, 'following', null)),
        gpg_keys: build.template(std.get(block, 'gpg_keys', null)),
        gravatar_id: build.template(std.get(block, 'gravatar_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        login: build.template(std.get(block, 'login', null)),
        name: build.template(std.get(block, 'name', null)),
        node_id: build.template(std.get(block, 'node_id', null)),
        public_gists: build.template(std.get(block, 'public_gists', null)),
        public_repos: build.template(std.get(block, 'public_repos', null)),
        site_admin: build.template(std.get(block, 'site_admin', null)),
        ssh_keys: build.template(std.get(block, 'ssh_keys', null)),
        suspended_at: build.template(std.get(block, 'suspended_at', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        username: build.template(block.username),
      }),
      avatar_url: resource.field('avatar_url'),
      bio: resource.field('bio'),
      blog: resource.field('blog'),
      company: resource.field('company'),
      created_at: resource.field('created_at'),
      email: resource.field('email'),
      followers: resource.field('followers'),
      following: resource.field('following'),
      gpg_keys: resource.field('gpg_keys'),
      gravatar_id: resource.field('gravatar_id'),
      id: resource.field('id'),
      location: resource.field('location'),
      login: resource.field('login'),
      name: resource.field('name'),
      node_id: resource.field('node_id'),
      public_gists: resource.field('public_gists'),
      public_repos: resource.field('public_repos'),
      site_admin: resource.field('site_admin'),
      ssh_keys: resource.field('ssh_keys'),
      suspended_at: resource.field('suspended_at'),
      updated_at: resource.field('updated_at'),
      username: resource.field('username'),
    },
    user_external_identity(name, block): {
      local resource = blockType.resource('github_user_external_identity', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        login: build.template(std.get(block, 'login', null)),
        saml_identity: build.template(std.get(block, 'saml_identity', null)),
        scim_identity: build.template(std.get(block, 'scim_identity', null)),
        username: build.template(block.username),
      }),
      id: resource.field('id'),
      login: resource.field('login'),
      saml_identity: resource.field('saml_identity'),
      scim_identity: resource.field('scim_identity'),
      username: resource.field('username'),
    },
    users(name, block): {
      local resource = blockType.resource('github_users', name),
      _: resource._(block, {
        emails: build.template(std.get(block, 'emails', null)),
        id: build.template(std.get(block, 'id', null)),
        logins: build.template(std.get(block, 'logins', null)),
        node_ids: build.template(std.get(block, 'node_ids', null)),
        unknown_logins: build.template(std.get(block, 'unknown_logins', null)),
        usernames: build.template(block.usernames),
      }),
      emails: resource.field('emails'),
      id: resource.field('id'),
      logins: resource.field('logins'),
      node_ids: resource.field('node_ids'),
      unknown_logins: resource.field('unknown_logins'),
      usernames: resource.field('usernames'),
    },
  },
};

local providerWithConfiguration = provider(null) + {
  withConfiguration(alias, block): provider(std.prune({
    alias: alias,
    base_url: build.template(std.get(block, 'base_url', null)),
    insecure: build.template(std.get(block, 'insecure', null)),
    max_retries: build.template(std.get(block, 'max_retries', null)),
    organization: build.template(std.get(block, 'organization', null)),
    owner: build.template(std.get(block, 'owner', null)),
    parallel_requests: build.template(std.get(block, 'parallel_requests', null)),
    read_delay_ms: build.template(std.get(block, 'read_delay_ms', null)),
    retry_delay_ms: build.template(std.get(block, 'retry_delay_ms', null)),
    retryable_errors: build.template(std.get(block, 'retryable_errors', null)),
    token: build.template(std.get(block, 'token', null)),
    write_delay_ms: build.template(std.get(block, 'write_delay_ms', null)),
  })),
};

providerWithConfiguration
