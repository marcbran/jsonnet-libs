local build = {
  expression(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then if std.objectHas(val._, 'ref') then val._.ref else '"%s"' % [std.strReplace(val._.str, '\n', '\\n')] else std.mapWithKey(function(key, value) self.expression(value), val) else if std.type(val) == 'array' then std.map(function(element) self.expression(element), val) else if std.type(val) == 'string' then '"%s"' % [std.strReplace(val, '\n', '\\n')] else val,
  template(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then if std.objectHas(val._, 'ref') then '${%s}' % [val._.ref] else val._.str else std.mapWithKey(function(key, value) self.template(value), val) else if std.type(val) == 'array' then std.map(function(element) self.template(element), val) else if std.type(val) == 'string' then val else val,
  providerRequirements(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then std.get(val._, 'providerRequirements', {}) else std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.providerRequirements(val[key]), std.objectFields(val)), {}) else if std.type(val) == 'array' then std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(element) build.providerRequirements(element), val), {}) else {},
};

local providerTemplate(provider, requirements, configuration) = {
  local providerRequirements = { [provider]: requirements },
  local providerAlias = if configuration == null then null else configuration.alias,
  local providerWithAlias = if configuration == null then null else '%s.%s' % [provider, providerAlias],
  local providerConfiguration = if configuration == null then {} else { [providerWithAlias]: { provider: { [provider]: configuration } } },
  local providerReference = if configuration == null then {} else { provider: providerWithAlias },
  blockType(blockType): {
    local blockTypePath = if blockType == 'resource' then [] else ['data'],
    resource(type, name): {
      local resourceType = std.substr(type, std.length(provider) + 1, std.length(type)),
      local resourcePath = blockTypePath + [type, name],
      _(rawBlock, block): {
        local metaBlock = {
          depends_on: build.template(std.get(rawBlock, 'depends_on', null)),
          count: build.template(std.get(rawBlock, 'count', null)),
          for_each: build.template(std.get(rawBlock, 'for_each', null)),
        },
        providerRequirements: build.providerRequirements(rawBlock) + providerRequirements,
        providerConfiguration: providerConfiguration,
        provider: provider,
        providerAlias: providerAlias,
        resourceType: resourceType,
        name: name,
        ref: std.join('.', resourcePath),
        block: {
          [blockType]: {
            [type]: {
              [name]: std.prune(metaBlock + block + providerReference),
            },
          },
        },
      },
      field(fieldName): {
        local fieldPath = resourcePath + [fieldName],
        _: {
          ref: std.join('.', fieldPath),
        },
      },
    },
  },
  func(name, parameters=[]): {
    local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]),
    _: {
      providerRequirements: build.providerRequirements(parameters) + providerRequirements,
      providerConfiguration: providerConfiguration,
      ref: 'provider::%s::%s(%s)' % [provider, name, parameterString],
    },
  },
};

local provider(configuration) = {
  local requirements = {
    source: 'registry.terraform.io/hashicorp/google',
    version: '6.12.0',
  },
  local provider = providerTemplate('google', requirements, configuration),
  resource: {
    local blockType = provider.blockType('resource'),
    access_context_manager_access_level(name, block): {
      local resource = blockType.resource('google_access_context_manager_access_level', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parent: build.template(block.parent),
        title: build.template(block.title),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      title: resource.field('title'),
    },
    access_context_manager_access_level_condition(name, block): {
      local resource = blockType.resource('google_access_context_manager_access_level_condition', name),
      _: resource._(block, {
        access_level: build.template(block.access_level),
        id: build.template(std.get(block, 'id', null)),
        ip_subnetworks: build.template(std.get(block, 'ip_subnetworks', null)),
        members: build.template(std.get(block, 'members', null)),
        negate: build.template(std.get(block, 'negate', null)),
        regions: build.template(std.get(block, 'regions', null)),
        required_access_levels: build.template(std.get(block, 'required_access_levels', null)),
      }),
      access_level: resource.field('access_level'),
      id: resource.field('id'),
      ip_subnetworks: resource.field('ip_subnetworks'),
      members: resource.field('members'),
      negate: resource.field('negate'),
      regions: resource.field('regions'),
      required_access_levels: resource.field('required_access_levels'),
    },
    access_context_manager_access_levels(name, block): {
      local resource = blockType.resource('google_access_context_manager_access_levels', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        parent: build.template(block.parent),
      }),
      id: resource.field('id'),
      parent: resource.field('parent'),
    },
    access_context_manager_access_policy(name, block): {
      local resource = blockType.resource('google_access_context_manager_access_policy', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        scopes: build.template(std.get(block, 'scopes', null)),
        title: build.template(block.title),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      scopes: resource.field('scopes'),
      title: resource.field('title'),
      update_time: resource.field('update_time'),
    },
    access_context_manager_access_policy_iam_binding(name, block): {
      local resource = blockType.resource('google_access_context_manager_access_policy_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      name: resource.field('name'),
      role: resource.field('role'),
    },
    access_context_manager_access_policy_iam_member(name, block): {
      local resource = blockType.resource('google_access_context_manager_access_policy_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      name: resource.field('name'),
      role: resource.field('role'),
    },
    access_context_manager_access_policy_iam_policy(name, block): {
      local resource = blockType.resource('google_access_context_manager_access_policy_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
    },
    access_context_manager_authorized_orgs_desc(name, block): {
      local resource = blockType.resource('google_access_context_manager_authorized_orgs_desc', name),
      _: resource._(block, {
        asset_type: build.template(std.get(block, 'asset_type', null)),
        authorization_direction: build.template(std.get(block, 'authorization_direction', null)),
        authorization_type: build.template(std.get(block, 'authorization_type', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        orgs: build.template(std.get(block, 'orgs', null)),
        parent: build.template(block.parent),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      asset_type: resource.field('asset_type'),
      authorization_direction: resource.field('authorization_direction'),
      authorization_type: resource.field('authorization_type'),
      create_time: resource.field('create_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      orgs: resource.field('orgs'),
      parent: resource.field('parent'),
      update_time: resource.field('update_time'),
    },
    access_context_manager_egress_policy(name, block): {
      local resource = blockType.resource('google_access_context_manager_egress_policy', name),
      _: resource._(block, {
        egress_policy_name: build.template(block.egress_policy_name),
        id: build.template(std.get(block, 'id', null)),
        resource: build.template(block.resource),
      }),
      egress_policy_name: resource.field('egress_policy_name'),
      id: resource.field('id'),
      resource: resource.field('resource'),
    },
    access_context_manager_gcp_user_access_binding(name, block): {
      local resource = blockType.resource('google_access_context_manager_gcp_user_access_binding', name),
      _: resource._(block, {
        access_levels: build.template(block.access_levels),
        group_key: build.template(block.group_key),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        organization_id: build.template(block.organization_id),
      }),
      access_levels: resource.field('access_levels'),
      group_key: resource.field('group_key'),
      id: resource.field('id'),
      name: resource.field('name'),
      organization_id: resource.field('organization_id'),
    },
    access_context_manager_ingress_policy(name, block): {
      local resource = blockType.resource('google_access_context_manager_ingress_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ingress_policy_name: build.template(block.ingress_policy_name),
        resource: build.template(block.resource),
      }),
      id: resource.field('id'),
      ingress_policy_name: resource.field('ingress_policy_name'),
      resource: resource.field('resource'),
    },
    access_context_manager_service_perimeter(name, block): {
      local resource = blockType.resource('google_access_context_manager_service_perimeter', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parent: build.template(block.parent),
        perimeter_type: build.template(std.get(block, 'perimeter_type', null)),
        title: build.template(block.title),
        update_time: build.template(std.get(block, 'update_time', null)),
        use_explicit_dry_run_spec: build.template(std.get(block, 'use_explicit_dry_run_spec', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      perimeter_type: resource.field('perimeter_type'),
      title: resource.field('title'),
      update_time: resource.field('update_time'),
      use_explicit_dry_run_spec: resource.field('use_explicit_dry_run_spec'),
    },
    access_context_manager_service_perimeter_dry_run_egress_policy(name, block): {
      local resource = blockType.resource('google_access_context_manager_service_perimeter_dry_run_egress_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        perimeter: build.template(block.perimeter),
      }),
      id: resource.field('id'),
      perimeter: resource.field('perimeter'),
    },
    access_context_manager_service_perimeter_dry_run_ingress_policy(name, block): {
      local resource = blockType.resource('google_access_context_manager_service_perimeter_dry_run_ingress_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        perimeter: build.template(block.perimeter),
      }),
      id: resource.field('id'),
      perimeter: resource.field('perimeter'),
    },
    access_context_manager_service_perimeter_dry_run_resource(name, block): {
      local resource = blockType.resource('google_access_context_manager_service_perimeter_dry_run_resource', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        perimeter_name: build.template(block.perimeter_name),
        resource: build.template(block.resource),
      }),
      id: resource.field('id'),
      perimeter_name: resource.field('perimeter_name'),
      resource: resource.field('resource'),
    },
    access_context_manager_service_perimeter_egress_policy(name, block): {
      local resource = blockType.resource('google_access_context_manager_service_perimeter_egress_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        perimeter: build.template(block.perimeter),
      }),
      id: resource.field('id'),
      perimeter: resource.field('perimeter'),
    },
    access_context_manager_service_perimeter_ingress_policy(name, block): {
      local resource = blockType.resource('google_access_context_manager_service_perimeter_ingress_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        perimeter: build.template(block.perimeter),
      }),
      id: resource.field('id'),
      perimeter: resource.field('perimeter'),
    },
    access_context_manager_service_perimeter_resource(name, block): {
      local resource = blockType.resource('google_access_context_manager_service_perimeter_resource', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        perimeter_name: build.template(block.perimeter_name),
        resource: build.template(block.resource),
      }),
      id: resource.field('id'),
      perimeter_name: resource.field('perimeter_name'),
      resource: resource.field('resource'),
    },
    access_context_manager_service_perimeters(name, block): {
      local resource = blockType.resource('google_access_context_manager_service_perimeters', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        parent: build.template(block.parent),
      }),
      id: resource.field('id'),
      parent: resource.field('parent'),
    },
    active_directory_domain(name, block): {
      local resource = blockType.resource('google_active_directory_domain', name),
      _: resource._(block, {
        admin: build.template(std.get(block, 'admin', null)),
        authorized_networks: build.template(std.get(block, 'authorized_networks', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        domain_name: build.template(block.domain_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        locations: build.template(block.locations),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        reserved_ip_range: build.template(block.reserved_ip_range),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      admin: resource.field('admin'),
      authorized_networks: resource.field('authorized_networks'),
      deletion_protection: resource.field('deletion_protection'),
      domain_name: resource.field('domain_name'),
      effective_labels: resource.field('effective_labels'),
      fqdn: resource.field('fqdn'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      locations: resource.field('locations'),
      name: resource.field('name'),
      project: resource.field('project'),
      reserved_ip_range: resource.field('reserved_ip_range'),
      terraform_labels: resource.field('terraform_labels'),
    },
    active_directory_domain_trust(name, block): {
      local resource = blockType.resource('google_active_directory_domain_trust', name),
      _: resource._(block, {
        domain: build.template(block.domain),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        selective_authentication: build.template(std.get(block, 'selective_authentication', null)),
        target_dns_ip_addresses: build.template(block.target_dns_ip_addresses),
        target_domain_name: build.template(block.target_domain_name),
        trust_direction: build.template(block.trust_direction),
        trust_handshake_secret: build.template(block.trust_handshake_secret),
        trust_type: build.template(block.trust_type),
      }),
      domain: resource.field('domain'),
      id: resource.field('id'),
      project: resource.field('project'),
      selective_authentication: resource.field('selective_authentication'),
      target_dns_ip_addresses: resource.field('target_dns_ip_addresses'),
      target_domain_name: resource.field('target_domain_name'),
      trust_direction: resource.field('trust_direction'),
      trust_handshake_secret: resource.field('trust_handshake_secret'),
      trust_type: resource.field('trust_type'),
    },
    alloydb_backup(name, block): {
      local resource = blockType.resource('google_alloydb_backup', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        backup_id: build.template(block.backup_id),
        cluster_name: build.template(block.cluster_name),
        cluster_uid: build.template(std.get(block, 'cluster_uid', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        encryption_info: build.template(std.get(block, 'encryption_info', null)),
        etag: build.template(std.get(block, 'etag', null)),
        expiry_quantity: build.template(std.get(block, 'expiry_quantity', null)),
        expiry_time: build.template(std.get(block, 'expiry_time', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        size_bytes: build.template(std.get(block, 'size_bytes', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      annotations: resource.field('annotations'),
      backup_id: resource.field('backup_id'),
      cluster_name: resource.field('cluster_name'),
      cluster_uid: resource.field('cluster_uid'),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      encryption_info: resource.field('encryption_info'),
      etag: resource.field('etag'),
      expiry_quantity: resource.field('expiry_quantity'),
      expiry_time: resource.field('expiry_time'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      size_bytes: resource.field('size_bytes'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    alloydb_cluster(name, block): {
      local resource = blockType.resource('google_alloydb_cluster', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        backup_source: build.template(std.get(block, 'backup_source', null)),
        cluster_id: build.template(block.cluster_id),
        cluster_type: build.template(std.get(block, 'cluster_type', null)),
        continuous_backup_info: build.template(std.get(block, 'continuous_backup_info', null)),
        database_version: build.template(std.get(block, 'database_version', null)),
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        encryption_info: build.template(std.get(block, 'encryption_info', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        migration_source: build.template(std.get(block, 'migration_source', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        state: build.template(std.get(block, 'state', null)),
        subscription_type: build.template(std.get(block, 'subscription_type', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        trial_metadata: build.template(std.get(block, 'trial_metadata', null)),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      annotations: resource.field('annotations'),
      backup_source: resource.field('backup_source'),
      cluster_id: resource.field('cluster_id'),
      cluster_type: resource.field('cluster_type'),
      continuous_backup_info: resource.field('continuous_backup_info'),
      database_version: resource.field('database_version'),
      deletion_policy: resource.field('deletion_policy'),
      display_name: resource.field('display_name'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      encryption_info: resource.field('encryption_info'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      migration_source: resource.field('migration_source'),
      name: resource.field('name'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      state: resource.field('state'),
      subscription_type: resource.field('subscription_type'),
      terraform_labels: resource.field('terraform_labels'),
      trial_metadata: resource.field('trial_metadata'),
      uid: resource.field('uid'),
    },
    alloydb_instance(name, block): {
      local resource = blockType.resource('google_alloydb_instance', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        availability_type: build.template(std.get(block, 'availability_type', null)),
        cluster: build.template(block.cluster),
        create_time: build.template(std.get(block, 'create_time', null)),
        database_flags: build.template(std.get(block, 'database_flags', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        gce_zone: build.template(std.get(block, 'gce_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        instance_type: build.template(block.instance_type),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        outbound_public_ip_addresses: build.template(std.get(block, 'outbound_public_ip_addresses', null)),
        public_ip_address: build.template(std.get(block, 'public_ip_address', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      annotations: resource.field('annotations'),
      availability_type: resource.field('availability_type'),
      cluster: resource.field('cluster'),
      create_time: resource.field('create_time'),
      database_flags: resource.field('database_flags'),
      display_name: resource.field('display_name'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      gce_zone: resource.field('gce_zone'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      instance_type: resource.field('instance_type'),
      ip_address: resource.field('ip_address'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      outbound_public_ip_addresses: resource.field('outbound_public_ip_addresses'),
      public_ip_address: resource.field('public_ip_address'),
      reconciling: resource.field('reconciling'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    alloydb_user(name, block): {
      local resource = blockType.resource('google_alloydb_user', name),
      _: resource._(block, {
        cluster: build.template(block.cluster),
        database_roles: build.template(std.get(block, 'database_roles', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        password: build.template(std.get(block, 'password', null)),
        user_id: build.template(block.user_id),
        user_type: build.template(block.user_type),
      }),
      cluster: resource.field('cluster'),
      database_roles: resource.field('database_roles'),
      id: resource.field('id'),
      name: resource.field('name'),
      password: resource.field('password'),
      user_id: resource.field('user_id'),
      user_type: resource.field('user_type'),
    },
    apigee_addons_config(name, block): {
      local resource = blockType.resource('google_apigee_addons_config', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        org: build.template(block.org),
      }),
      id: resource.field('id'),
      org: resource.field('org'),
    },
    apigee_api(name, block): {
      local resource = blockType.resource('google_apigee_api', name),
      _: resource._(block, {
        config_bundle: build.template(block.config_bundle),
        detect_md5hash: build.template(std.get(block, 'detect_md5hash', null)),
        id: build.template(std.get(block, 'id', null)),
        latest_revision_id: build.template(std.get(block, 'latest_revision_id', null)),
        md5hash: build.template(std.get(block, 'md5hash', null)),
        meta_data: build.template(std.get(block, 'meta_data', null)),
        name: build.template(block.name),
        org_id: build.template(block.org_id),
        revision: build.template(std.get(block, 'revision', null)),
      }),
      config_bundle: resource.field('config_bundle'),
      detect_md5hash: resource.field('detect_md5hash'),
      id: resource.field('id'),
      latest_revision_id: resource.field('latest_revision_id'),
      md5hash: resource.field('md5hash'),
      meta_data: resource.field('meta_data'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      revision: resource.field('revision'),
    },
    apigee_app_group(name, block): {
      local resource = blockType.resource('google_apigee_app_group', name),
      _: resource._(block, {
        app_group_id: build.template(std.get(block, 'app_group_id', null)),
        channel_id: build.template(std.get(block, 'channel_id', null)),
        channel_uri: build.template(std.get(block, 'channel_uri', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified_at: build.template(std.get(block, 'last_modified_at', null)),
        name: build.template(block.name),
        org_id: build.template(block.org_id),
        organization: build.template(std.get(block, 'organization', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      app_group_id: resource.field('app_group_id'),
      channel_id: resource.field('channel_id'),
      channel_uri: resource.field('channel_uri'),
      created_at: resource.field('created_at'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      last_modified_at: resource.field('last_modified_at'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      organization: resource.field('organization'),
      status: resource.field('status'),
    },
    apigee_developer(name, block): {
      local resource = blockType.resource('google_apigee_developer', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        email: build.template(block.email),
        first_name: build.template(block.first_name),
        id: build.template(std.get(block, 'id', null)),
        last_modified_at: build.template(std.get(block, 'last_modified_at', null)),
        last_name: build.template(block.last_name),
        org_id: build.template(block.org_id),
        organizatio_name: build.template(std.get(block, 'organizatio_name', null)),
        status: build.template(std.get(block, 'status', null)),
        user_name: build.template(block.user_name),
      }),
      created_at: resource.field('created_at'),
      email: resource.field('email'),
      first_name: resource.field('first_name'),
      id: resource.field('id'),
      last_modified_at: resource.field('last_modified_at'),
      last_name: resource.field('last_name'),
      org_id: resource.field('org_id'),
      organizatio_name: resource.field('organizatio_name'),
      status: resource.field('status'),
      user_name: resource.field('user_name'),
    },
    apigee_endpoint_attachment(name, block): {
      local resource = blockType.resource('google_apigee_endpoint_attachment', name),
      _: resource._(block, {
        connection_state: build.template(std.get(block, 'connection_state', null)),
        endpoint_attachment_id: build.template(block.endpoint_attachment_id),
        host: build.template(std.get(block, 'host', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        org_id: build.template(block.org_id),
        service_attachment: build.template(block.service_attachment),
      }),
      connection_state: resource.field('connection_state'),
      endpoint_attachment_id: resource.field('endpoint_attachment_id'),
      host: resource.field('host'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      service_attachment: resource.field('service_attachment'),
    },
    apigee_env_keystore(name, block): {
      local resource = blockType.resource('google_apigee_env_keystore', name),
      _: resource._(block, {
        aliases: build.template(std.get(block, 'aliases', null)),
        env_id: build.template(block.env_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      aliases: resource.field('aliases'),
      env_id: resource.field('env_id'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    apigee_env_references(name, block): {
      local resource = blockType.resource('google_apigee_env_references', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        env_id: build.template(block.env_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        refers: build.template(block.refers),
        resource_type: build.template(block.resource_type),
      }),
      description: resource.field('description'),
      env_id: resource.field('env_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      refers: resource.field('refers'),
      resource_type: resource.field('resource_type'),
    },
    apigee_envgroup(name, block): {
      local resource = blockType.resource('google_apigee_envgroup', name),
      _: resource._(block, {
        hostnames: build.template(std.get(block, 'hostnames', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        org_id: build.template(block.org_id),
      }),
      hostnames: resource.field('hostnames'),
      id: resource.field('id'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
    },
    apigee_envgroup_attachment(name, block): {
      local resource = blockType.resource('google_apigee_envgroup_attachment', name),
      _: resource._(block, {
        envgroup_id: build.template(block.envgroup_id),
        environment: build.template(block.environment),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      envgroup_id: resource.field('envgroup_id'),
      environment: resource.field('environment'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    apigee_environment(name, block): {
      local resource = blockType.resource('google_apigee_environment', name),
      _: resource._(block, {
        api_proxy_type: build.template(std.get(block, 'api_proxy_type', null)),
        deployment_type: build.template(std.get(block, 'deployment_type', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        forward_proxy_uri: build.template(std.get(block, 'forward_proxy_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        org_id: build.template(block.org_id),
        type: build.template(std.get(block, 'type', null)),
      }),
      api_proxy_type: resource.field('api_proxy_type'),
      deployment_type: resource.field('deployment_type'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      forward_proxy_uri: resource.field('forward_proxy_uri'),
      id: resource.field('id'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      type: resource.field('type'),
    },
    apigee_environment_iam_binding(name, block): {
      local resource = blockType.resource('google_apigee_environment_iam_binding', name),
      _: resource._(block, {
        env_id: build.template(block.env_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        org_id: build.template(block.org_id),
        role: build.template(block.role),
      }),
      env_id: resource.field('env_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      org_id: resource.field('org_id'),
      role: resource.field('role'),
    },
    apigee_environment_iam_member(name, block): {
      local resource = blockType.resource('google_apigee_environment_iam_member', name),
      _: resource._(block, {
        env_id: build.template(block.env_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        org_id: build.template(block.org_id),
        role: build.template(block.role),
      }),
      env_id: resource.field('env_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      org_id: resource.field('org_id'),
      role: resource.field('role'),
    },
    apigee_environment_iam_policy(name, block): {
      local resource = blockType.resource('google_apigee_environment_iam_policy', name),
      _: resource._(block, {
        env_id: build.template(block.env_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(block.org_id),
        policy_data: build.template(block.policy_data),
      }),
      env_id: resource.field('env_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      policy_data: resource.field('policy_data'),
    },
    apigee_environment_keyvaluemaps(name, block): {
      local resource = blockType.resource('google_apigee_environment_keyvaluemaps', name),
      _: resource._(block, {
        env_id: build.template(block.env_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      env_id: resource.field('env_id'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    apigee_environment_keyvaluemaps_entries(name, block): {
      local resource = blockType.resource('google_apigee_environment_keyvaluemaps_entries', name),
      _: resource._(block, {
        env_keyvaluemap_id: build.template(block.env_keyvaluemap_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        value: build.template(block.value),
      }),
      env_keyvaluemap_id: resource.field('env_keyvaluemap_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      value: resource.field('value'),
    },
    apigee_flowhook(name, block): {
      local resource = blockType.resource('google_apigee_flowhook', name),
      _: resource._(block, {
        continue_on_error: build.template(std.get(block, 'continue_on_error', null)),
        description: build.template(std.get(block, 'description', null)),
        environment: build.template(block.environment),
        flow_hook_point: build.template(block.flow_hook_point),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(block.org_id),
        sharedflow: build.template(block.sharedflow),
      }),
      continue_on_error: resource.field('continue_on_error'),
      description: resource.field('description'),
      environment: resource.field('environment'),
      flow_hook_point: resource.field('flow_hook_point'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      sharedflow: resource.field('sharedflow'),
    },
    apigee_instance(name, block): {
      local resource = blockType.resource('google_apigee_instance', name),
      _: resource._(block, {
        consumer_accept_list: build.template(std.get(block, 'consumer_accept_list', null)),
        description: build.template(std.get(block, 'description', null)),
        disk_encryption_key_name: build.template(std.get(block, 'disk_encryption_key_name', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        host: build.template(std.get(block, 'host', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_range: build.template(std.get(block, 'ip_range', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        org_id: build.template(block.org_id),
        peering_cidr_range: build.template(std.get(block, 'peering_cidr_range', null)),
        port: build.template(std.get(block, 'port', null)),
        service_attachment: build.template(std.get(block, 'service_attachment', null)),
      }),
      consumer_accept_list: resource.field('consumer_accept_list'),
      description: resource.field('description'),
      disk_encryption_key_name: resource.field('disk_encryption_key_name'),
      display_name: resource.field('display_name'),
      host: resource.field('host'),
      id: resource.field('id'),
      ip_range: resource.field('ip_range'),
      location: resource.field('location'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      peering_cidr_range: resource.field('peering_cidr_range'),
      port: resource.field('port'),
      service_attachment: resource.field('service_attachment'),
    },
    apigee_instance_attachment(name, block): {
      local resource = blockType.resource('google_apigee_instance_attachment', name),
      _: resource._(block, {
        environment: build.template(block.environment),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(std.get(block, 'name', null)),
      }),
      environment: resource.field('environment'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
    },
    apigee_keystores_aliases_key_cert_file(name, block): {
      local resource = blockType.resource('google_apigee_keystores_aliases_key_cert_file', name),
      _: resource._(block, {
        alias: build.template(block.alias),
        cert: build.template(block.cert),
        environment: build.template(block.environment),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        keystore: build.template(block.keystore),
        org_id: build.template(block.org_id),
        password: build.template(std.get(block, 'password', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      alias: resource.field('alias'),
      cert: resource.field('cert'),
      environment: resource.field('environment'),
      id: resource.field('id'),
      key: resource.field('key'),
      keystore: resource.field('keystore'),
      org_id: resource.field('org_id'),
      password: resource.field('password'),
      type: resource.field('type'),
    },
    apigee_keystores_aliases_pkcs12(name, block): {
      local resource = blockType.resource('google_apigee_keystores_aliases_pkcs12', name),
      _: resource._(block, {
        alias: build.template(block.alias),
        certs_info: build.template(std.get(block, 'certs_info', null)),
        environment: build.template(block.environment),
        file: build.template(block.file),
        filehash: build.template(block.filehash),
        id: build.template(std.get(block, 'id', null)),
        keystore: build.template(block.keystore),
        org_id: build.template(block.org_id),
        password: build.template(std.get(block, 'password', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      alias: resource.field('alias'),
      certs_info: resource.field('certs_info'),
      environment: resource.field('environment'),
      file: resource.field('file'),
      filehash: resource.field('filehash'),
      id: resource.field('id'),
      keystore: resource.field('keystore'),
      org_id: resource.field('org_id'),
      password: resource.field('password'),
      type: resource.field('type'),
    },
    apigee_keystores_aliases_self_signed_cert(name, block): {
      local resource = blockType.resource('google_apigee_keystores_aliases_self_signed_cert', name),
      _: resource._(block, {
        alias: build.template(block.alias),
        cert_validity_in_days: build.template(std.get(block, 'cert_validity_in_days', null)),
        certs_info: build.template(std.get(block, 'certs_info', null)),
        environment: build.template(block.environment),
        id: build.template(std.get(block, 'id', null)),
        key_size: build.template(std.get(block, 'key_size', null)),
        keystore: build.template(block.keystore),
        org_id: build.template(block.org_id),
        sig_alg: build.template(block.sig_alg),
        type: build.template(std.get(block, 'type', null)),
      }),
      alias: resource.field('alias'),
      cert_validity_in_days: resource.field('cert_validity_in_days'),
      certs_info: resource.field('certs_info'),
      environment: resource.field('environment'),
      id: resource.field('id'),
      key_size: resource.field('key_size'),
      keystore: resource.field('keystore'),
      org_id: resource.field('org_id'),
      sig_alg: resource.field('sig_alg'),
      type: resource.field('type'),
    },
    apigee_nat_address(name, block): {
      local resource = blockType.resource('google_apigee_nat_address', name),
      _: resource._(block, {
        activate: build.template(std.get(block, 'activate', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        name: build.template(block.name),
        state: build.template(std.get(block, 'state', null)),
      }),
      activate: resource.field('activate'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      ip_address: resource.field('ip_address'),
      name: resource.field('name'),
      state: resource.field('state'),
    },
    apigee_organization(name, block): {
      local resource = blockType.resource('google_apigee_organization', name),
      _: resource._(block, {
        analytics_region: build.template(std.get(block, 'analytics_region', null)),
        api_consumer_data_encryption_key_name: build.template(std.get(block, 'api_consumer_data_encryption_key_name', null)),
        api_consumer_data_location: build.template(std.get(block, 'api_consumer_data_location', null)),
        apigee_project_id: build.template(std.get(block, 'apigee_project_id', null)),
        authorized_network: build.template(std.get(block, 'authorized_network', null)),
        billing_type: build.template(std.get(block, 'billing_type', null)),
        ca_certificate: build.template(std.get(block, 'ca_certificate', null)),
        control_plane_encryption_key_name: build.template(std.get(block, 'control_plane_encryption_key_name', null)),
        description: build.template(std.get(block, 'description', null)),
        disable_vpc_peering: build.template(std.get(block, 'disable_vpc_peering', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project_id: build.template(block.project_id),
        retention: build.template(std.get(block, 'retention', null)),
        runtime_database_encryption_key_name: build.template(std.get(block, 'runtime_database_encryption_key_name', null)),
        runtime_type: build.template(std.get(block, 'runtime_type', null)),
        subscription_type: build.template(std.get(block, 'subscription_type', null)),
      }),
      analytics_region: resource.field('analytics_region'),
      api_consumer_data_encryption_key_name: resource.field('api_consumer_data_encryption_key_name'),
      api_consumer_data_location: resource.field('api_consumer_data_location'),
      apigee_project_id: resource.field('apigee_project_id'),
      authorized_network: resource.field('authorized_network'),
      billing_type: resource.field('billing_type'),
      ca_certificate: resource.field('ca_certificate'),
      control_plane_encryption_key_name: resource.field('control_plane_encryption_key_name'),
      description: resource.field('description'),
      disable_vpc_peering: resource.field('disable_vpc_peering'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      project_id: resource.field('project_id'),
      retention: resource.field('retention'),
      runtime_database_encryption_key_name: resource.field('runtime_database_encryption_key_name'),
      runtime_type: resource.field('runtime_type'),
      subscription_type: resource.field('subscription_type'),
    },
    apigee_sharedflow(name, block): {
      local resource = blockType.resource('google_apigee_sharedflow', name),
      _: resource._(block, {
        config_bundle: build.template(block.config_bundle),
        detect_md5hash: build.template(std.get(block, 'detect_md5hash', null)),
        id: build.template(std.get(block, 'id', null)),
        latest_revision_id: build.template(std.get(block, 'latest_revision_id', null)),
        md5hash: build.template(std.get(block, 'md5hash', null)),
        meta_data: build.template(std.get(block, 'meta_data', null)),
        name: build.template(block.name),
        org_id: build.template(block.org_id),
        revision: build.template(std.get(block, 'revision', null)),
      }),
      config_bundle: resource.field('config_bundle'),
      detect_md5hash: resource.field('detect_md5hash'),
      id: resource.field('id'),
      latest_revision_id: resource.field('latest_revision_id'),
      md5hash: resource.field('md5hash'),
      meta_data: resource.field('meta_data'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      revision: resource.field('revision'),
    },
    apigee_sharedflow_deployment(name, block): {
      local resource = blockType.resource('google_apigee_sharedflow_deployment', name),
      _: resource._(block, {
        environment: build.template(block.environment),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(block.org_id),
        revision: build.template(block.revision),
        service_account: build.template(std.get(block, 'service_account', null)),
        sharedflow_id: build.template(block.sharedflow_id),
      }),
      environment: resource.field('environment'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      revision: resource.field('revision'),
      service_account: resource.field('service_account'),
      sharedflow_id: resource.field('sharedflow_id'),
    },
    apigee_sync_authorization(name, block): {
      local resource = blockType.resource('google_apigee_sync_authorization', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        identities: build.template(block.identities),
        name: build.template(block.name),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      identities: resource.field('identities'),
      name: resource.field('name'),
    },
    apigee_target_server(name, block): {
      local resource = blockType.resource('google_apigee_target_server', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        env_id: build.template(block.env_id),
        host: build.template(block.host),
        id: build.template(std.get(block, 'id', null)),
        is_enabled: build.template(std.get(block, 'is_enabled', null)),
        name: build.template(block.name),
        port: build.template(block.port),
        protocol: build.template(std.get(block, 'protocol', null)),
      }),
      description: resource.field('description'),
      env_id: resource.field('env_id'),
      host: resource.field('host'),
      id: resource.field('id'),
      is_enabled: resource.field('is_enabled'),
      name: resource.field('name'),
      port: resource.field('port'),
      protocol: resource.field('protocol'),
    },
    apikeys_key(name, block): {
      local resource = blockType.resource('google_apikeys_key', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        key_string: build.template(std.get(block, 'key_string', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      key_string: resource.field('key_string'),
      name: resource.field('name'),
      project: resource.field('project'),
      uid: resource.field('uid'),
    },
    app_engine_application(name, block): {
      local resource = blockType.resource('google_app_engine_application', name),
      _: resource._(block, {
        app_id: build.template(std.get(block, 'app_id', null)),
        auth_domain: build.template(std.get(block, 'auth_domain', null)),
        code_bucket: build.template(std.get(block, 'code_bucket', null)),
        database_type: build.template(std.get(block, 'database_type', null)),
        default_bucket: build.template(std.get(block, 'default_bucket', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        gcr_domain: build.template(std.get(block, 'gcr_domain', null)),
        id: build.template(std.get(block, 'id', null)),
        location_id: build.template(block.location_id),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        serving_status: build.template(std.get(block, 'serving_status', null)),
        url_dispatch_rule: build.template(std.get(block, 'url_dispatch_rule', null)),
      }),
      app_id: resource.field('app_id'),
      auth_domain: resource.field('auth_domain'),
      code_bucket: resource.field('code_bucket'),
      database_type: resource.field('database_type'),
      default_bucket: resource.field('default_bucket'),
      default_hostname: resource.field('default_hostname'),
      gcr_domain: resource.field('gcr_domain'),
      id: resource.field('id'),
      location_id: resource.field('location_id'),
      name: resource.field('name'),
      project: resource.field('project'),
      serving_status: resource.field('serving_status'),
      url_dispatch_rule: resource.field('url_dispatch_rule'),
    },
    app_engine_application_url_dispatch_rules(name, block): {
      local resource = blockType.resource('google_app_engine_application_url_dispatch_rules', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      id: resource.field('id'),
      project: resource.field('project'),
    },
    app_engine_domain_mapping(name, block): {
      local resource = blockType.resource('google_app_engine_domain_mapping', name),
      _: resource._(block, {
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        override_strategy: build.template(std.get(block, 'override_strategy', null)),
        project: build.template(std.get(block, 'project', null)),
        resource_records: build.template(std.get(block, 'resource_records', null)),
      }),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      override_strategy: resource.field('override_strategy'),
      project: resource.field('project'),
      resource_records: resource.field('resource_records'),
    },
    app_engine_firewall_rule(name, block): {
      local resource = blockType.resource('google_app_engine_firewall_rule', name),
      _: resource._(block, {
        action: build.template(block.action),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        priority: build.template(std.get(block, 'priority', null)),
        project: build.template(std.get(block, 'project', null)),
        source_range: build.template(block.source_range),
      }),
      action: resource.field('action'),
      description: resource.field('description'),
      id: resource.field('id'),
      priority: resource.field('priority'),
      project: resource.field('project'),
      source_range: resource.field('source_range'),
    },
    app_engine_flexible_app_version(name, block): {
      local resource = blockType.resource('google_app_engine_flexible_app_version', name),
      _: resource._(block, {
        beta_settings: build.template(std.get(block, 'beta_settings', null)),
        default_expiration: build.template(std.get(block, 'default_expiration', null)),
        delete_service_on_destroy: build.template(std.get(block, 'delete_service_on_destroy', null)),
        env_variables: build.template(std.get(block, 'env_variables', null)),
        id: build.template(std.get(block, 'id', null)),
        inbound_services: build.template(std.get(block, 'inbound_services', null)),
        instance_class: build.template(std.get(block, 'instance_class', null)),
        name: build.template(std.get(block, 'name', null)),
        nobuild_files_regex: build.template(std.get(block, 'nobuild_files_regex', null)),
        noop_on_destroy: build.template(std.get(block, 'noop_on_destroy', null)),
        project: build.template(std.get(block, 'project', null)),
        runtime: build.template(block.runtime),
        runtime_api_version: build.template(std.get(block, 'runtime_api_version', null)),
        runtime_channel: build.template(std.get(block, 'runtime_channel', null)),
        runtime_main_executable_path: build.template(std.get(block, 'runtime_main_executable_path', null)),
        service: build.template(block.service),
        service_account: build.template(std.get(block, 'service_account', null)),
        serving_status: build.template(std.get(block, 'serving_status', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
      }),
      beta_settings: resource.field('beta_settings'),
      default_expiration: resource.field('default_expiration'),
      delete_service_on_destroy: resource.field('delete_service_on_destroy'),
      env_variables: resource.field('env_variables'),
      id: resource.field('id'),
      inbound_services: resource.field('inbound_services'),
      instance_class: resource.field('instance_class'),
      name: resource.field('name'),
      nobuild_files_regex: resource.field('nobuild_files_regex'),
      noop_on_destroy: resource.field('noop_on_destroy'),
      project: resource.field('project'),
      runtime: resource.field('runtime'),
      runtime_api_version: resource.field('runtime_api_version'),
      runtime_channel: resource.field('runtime_channel'),
      runtime_main_executable_path: resource.field('runtime_main_executable_path'),
      service: resource.field('service'),
      service_account: resource.field('service_account'),
      serving_status: resource.field('serving_status'),
      version_id: resource.field('version_id'),
    },
    app_engine_service_network_settings(name, block): {
      local resource = blockType.resource('google_app_engine_service_network_settings', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        service: build.template(block.service),
      }),
      id: resource.field('id'),
      project: resource.field('project'),
      service: resource.field('service'),
    },
    app_engine_service_split_traffic(name, block): {
      local resource = blockType.resource('google_app_engine_service_split_traffic', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        migrate_traffic: build.template(std.get(block, 'migrate_traffic', null)),
        project: build.template(std.get(block, 'project', null)),
        service: build.template(block.service),
      }),
      id: resource.field('id'),
      migrate_traffic: resource.field('migrate_traffic'),
      project: resource.field('project'),
      service: resource.field('service'),
    },
    app_engine_standard_app_version(name, block): {
      local resource = blockType.resource('google_app_engine_standard_app_version', name),
      _: resource._(block, {
        app_engine_apis: build.template(std.get(block, 'app_engine_apis', null)),
        delete_service_on_destroy: build.template(std.get(block, 'delete_service_on_destroy', null)),
        env_variables: build.template(std.get(block, 'env_variables', null)),
        id: build.template(std.get(block, 'id', null)),
        inbound_services: build.template(std.get(block, 'inbound_services', null)),
        instance_class: build.template(std.get(block, 'instance_class', null)),
        name: build.template(std.get(block, 'name', null)),
        noop_on_destroy: build.template(std.get(block, 'noop_on_destroy', null)),
        project: build.template(std.get(block, 'project', null)),
        runtime: build.template(block.runtime),
        runtime_api_version: build.template(std.get(block, 'runtime_api_version', null)),
        service: build.template(block.service),
        service_account: build.template(std.get(block, 'service_account', null)),
        threadsafe: build.template(std.get(block, 'threadsafe', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
      }),
      app_engine_apis: resource.field('app_engine_apis'),
      delete_service_on_destroy: resource.field('delete_service_on_destroy'),
      env_variables: resource.field('env_variables'),
      id: resource.field('id'),
      inbound_services: resource.field('inbound_services'),
      instance_class: resource.field('instance_class'),
      name: resource.field('name'),
      noop_on_destroy: resource.field('noop_on_destroy'),
      project: resource.field('project'),
      runtime: resource.field('runtime'),
      runtime_api_version: resource.field('runtime_api_version'),
      service: resource.field('service'),
      service_account: resource.field('service_account'),
      threadsafe: resource.field('threadsafe'),
      version_id: resource.field('version_id'),
    },
    apphub_application(name, block): {
      local resource = blockType.resource('google_apphub_application', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      application_id: resource.field('application_id'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    apphub_service(name, block): {
      local resource = blockType.resource('google_apphub_service', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        discovered_service: build.template(block.discovered_service),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        service_id: build.template(block.service_id),
        service_properties: build.template(std.get(block, 'service_properties', null)),
        service_reference: build.template(std.get(block, 'service_reference', null)),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      application_id: resource.field('application_id'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      discovered_service: resource.field('discovered_service'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_id: resource.field('service_id'),
      service_properties: resource.field('service_properties'),
      service_reference: resource.field('service_reference'),
      state: resource.field('state'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    apphub_service_project_attachment(name, block): {
      local resource = blockType.resource('google_apphub_service_project_attachment', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        service_project: build.template(std.get(block, 'service_project', null)),
        service_project_attachment_id: build.template(block.service_project_attachment_id),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      create_time: resource.field('create_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_project: resource.field('service_project'),
      service_project_attachment_id: resource.field('service_project_attachment_id'),
      state: resource.field('state'),
      uid: resource.field('uid'),
    },
    apphub_workload(name, block): {
      local resource = blockType.resource('google_apphub_workload', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        discovered_workload: build.template(block.discovered_workload),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        workload_id: build.template(block.workload_id),
        workload_properties: build.template(std.get(block, 'workload_properties', null)),
        workload_reference: build.template(std.get(block, 'workload_reference', null)),
      }),
      application_id: resource.field('application_id'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      discovered_workload: resource.field('discovered_workload'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      workload_id: resource.field('workload_id'),
      workload_properties: resource.field('workload_properties'),
      workload_reference: resource.field('workload_reference'),
    },
    artifact_registry_repository(name, block): {
      local resource = blockType.resource('google_artifact_registry_repository', name),
      _: resource._(block, {
        cleanup_policy_dry_run: build.template(std.get(block, 'cleanup_policy_dry_run', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        format: build.template(block.format),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        repository_id: build.template(block.repository_id),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      cleanup_policy_dry_run: resource.field('cleanup_policy_dry_run'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      format: resource.field('format'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      mode: resource.field('mode'),
      name: resource.field('name'),
      project: resource.field('project'),
      repository_id: resource.field('repository_id'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    artifact_registry_repository_iam_binding(name, block): {
      local resource = blockType.resource('google_artifact_registry_repository_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        repository: build.template(block.repository),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      repository: resource.field('repository'),
      role: resource.field('role'),
    },
    artifact_registry_repository_iam_member(name, block): {
      local resource = blockType.resource('google_artifact_registry_repository_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        repository: build.template(block.repository),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      repository: resource.field('repository'),
      role: resource.field('role'),
    },
    artifact_registry_repository_iam_policy(name, block): {
      local resource = blockType.resource('google_artifact_registry_repository_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        repository: build.template(block.repository),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      repository: resource.field('repository'),
    },
    assured_workloads_workload(name, block): {
      local resource = blockType.resource('google_assured_workloads_workload', name),
      _: resource._(block, {
        billing_account: build.template(std.get(block, 'billing_account', null)),
        compliance_regime: build.template(block.compliance_regime),
        compliance_status: build.template(std.get(block, 'compliance_status', null)),
        compliant_but_disallowed_services: build.template(std.get(block, 'compliant_but_disallowed_services', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        display_name: build.template(block.display_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        ekm_provisioning_response: build.template(std.get(block, 'ekm_provisioning_response', null)),
        enable_sovereign_controls: build.template(std.get(block, 'enable_sovereign_controls', null)),
        id: build.template(std.get(block, 'id', null)),
        kaj_enrollment_state: build.template(std.get(block, 'kaj_enrollment_state', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        partner: build.template(std.get(block, 'partner', null)),
        partner_services_billing_account: build.template(std.get(block, 'partner_services_billing_account', null)),
        provisioned_resources_parent: build.template(std.get(block, 'provisioned_resources_parent', null)),
        resources: build.template(std.get(block, 'resources', null)),
        saa_enrollment_response: build.template(std.get(block, 'saa_enrollment_response', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        violation_notifications_enabled: build.template(std.get(block, 'violation_notifications_enabled', null)),
      }),
      billing_account: resource.field('billing_account'),
      compliance_regime: resource.field('compliance_regime'),
      compliance_status: resource.field('compliance_status'),
      compliant_but_disallowed_services: resource.field('compliant_but_disallowed_services'),
      create_time: resource.field('create_time'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      ekm_provisioning_response: resource.field('ekm_provisioning_response'),
      enable_sovereign_controls: resource.field('enable_sovereign_controls'),
      id: resource.field('id'),
      kaj_enrollment_state: resource.field('kaj_enrollment_state'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      partner: resource.field('partner'),
      partner_services_billing_account: resource.field('partner_services_billing_account'),
      provisioned_resources_parent: resource.field('provisioned_resources_parent'),
      resources: resource.field('resources'),
      saa_enrollment_response: resource.field('saa_enrollment_response'),
      terraform_labels: resource.field('terraform_labels'),
      violation_notifications_enabled: resource.field('violation_notifications_enabled'),
    },
    beyondcorp_app_connection(name, block): {
      local resource = blockType.resource('google_beyondcorp_app_connection', name),
      _: resource._(block, {
        connectors: build.template(std.get(block, 'connectors', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      connectors: resource.field('connectors'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
    },
    beyondcorp_app_connector(name, block): {
      local resource = blockType.resource('google_beyondcorp_app_connector', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
    },
    beyondcorp_app_gateway(name, block): {
      local resource = blockType.resource('google_beyondcorp_app_gateway', name),
      _: resource._(block, {
        allocated_connections: build.template(std.get(block, 'allocated_connections', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        host_type: build.template(std.get(block, 'host_type', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      allocated_connections: resource.field('allocated_connections'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      host_type: resource.field('host_type'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      uri: resource.field('uri'),
    },
    biglake_catalog(name, block): {
      local resource = blockType.resource('google_biglake_catalog', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      update_time: resource.field('update_time'),
    },
    biglake_database(name, block): {
      local resource = blockType.resource('google_biglake_database', name),
      _: resource._(block, {
        catalog: build.template(block.catalog),
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        type: build.template(block.type),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      catalog: resource.field('catalog'),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    biglake_table(name, block): {
      local resource = blockType.resource('google_biglake_table', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        database: build.template(std.get(block, 'database', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        etag: build.template(std.get(block, 'etag', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        type: build.template(std.get(block, 'type', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      database: resource.field('database'),
      delete_time: resource.field('delete_time'),
      etag: resource.field('etag'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    bigquery_analytics_hub_data_exchange(name, block): {
      local resource = blockType.resource('google_bigquery_analytics_hub_data_exchange', name),
      _: resource._(block, {
        data_exchange_id: build.template(block.data_exchange_id),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        documentation: build.template(std.get(block, 'documentation', null)),
        icon: build.template(std.get(block, 'icon', null)),
        id: build.template(std.get(block, 'id', null)),
        listing_count: build.template(std.get(block, 'listing_count', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        primary_contact: build.template(std.get(block, 'primary_contact', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      data_exchange_id: resource.field('data_exchange_id'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      documentation: resource.field('documentation'),
      icon: resource.field('icon'),
      id: resource.field('id'),
      listing_count: resource.field('listing_count'),
      location: resource.field('location'),
      name: resource.field('name'),
      primary_contact: resource.field('primary_contact'),
      project: resource.field('project'),
    },
    bigquery_analytics_hub_data_exchange_iam_binding(name, block): {
      local resource = blockType.resource('google_bigquery_analytics_hub_data_exchange_iam_binding', name),
      _: resource._(block, {
        data_exchange_id: build.template(block.data_exchange_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      data_exchange_id: resource.field('data_exchange_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    bigquery_analytics_hub_data_exchange_iam_member(name, block): {
      local resource = blockType.resource('google_bigquery_analytics_hub_data_exchange_iam_member', name),
      _: resource._(block, {
        data_exchange_id: build.template(block.data_exchange_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      data_exchange_id: resource.field('data_exchange_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    bigquery_analytics_hub_data_exchange_iam_policy(name, block): {
      local resource = blockType.resource('google_bigquery_analytics_hub_data_exchange_iam_policy', name),
      _: resource._(block, {
        data_exchange_id: build.template(block.data_exchange_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      data_exchange_id: resource.field('data_exchange_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    bigquery_analytics_hub_listing(name, block): {
      local resource = blockType.resource('google_bigquery_analytics_hub_listing', name),
      _: resource._(block, {
        categories: build.template(std.get(block, 'categories', null)),
        data_exchange_id: build.template(block.data_exchange_id),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        documentation: build.template(std.get(block, 'documentation', null)),
        icon: build.template(std.get(block, 'icon', null)),
        id: build.template(std.get(block, 'id', null)),
        listing_id: build.template(block.listing_id),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        primary_contact: build.template(std.get(block, 'primary_contact', null)),
        project: build.template(std.get(block, 'project', null)),
        request_access: build.template(std.get(block, 'request_access', null)),
      }),
      categories: resource.field('categories'),
      data_exchange_id: resource.field('data_exchange_id'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      documentation: resource.field('documentation'),
      icon: resource.field('icon'),
      id: resource.field('id'),
      listing_id: resource.field('listing_id'),
      location: resource.field('location'),
      name: resource.field('name'),
      primary_contact: resource.field('primary_contact'),
      project: resource.field('project'),
      request_access: resource.field('request_access'),
    },
    bigquery_analytics_hub_listing_iam_binding(name, block): {
      local resource = blockType.resource('google_bigquery_analytics_hub_listing_iam_binding', name),
      _: resource._(block, {
        data_exchange_id: build.template(block.data_exchange_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        listing_id: build.template(block.listing_id),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      data_exchange_id: resource.field('data_exchange_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      listing_id: resource.field('listing_id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    bigquery_analytics_hub_listing_iam_member(name, block): {
      local resource = blockType.resource('google_bigquery_analytics_hub_listing_iam_member', name),
      _: resource._(block, {
        data_exchange_id: build.template(block.data_exchange_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        listing_id: build.template(block.listing_id),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      data_exchange_id: resource.field('data_exchange_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      listing_id: resource.field('listing_id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    bigquery_analytics_hub_listing_iam_policy(name, block): {
      local resource = blockType.resource('google_bigquery_analytics_hub_listing_iam_policy', name),
      _: resource._(block, {
        data_exchange_id: build.template(block.data_exchange_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        listing_id: build.template(block.listing_id),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      data_exchange_id: resource.field('data_exchange_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      listing_id: resource.field('listing_id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    bigquery_bi_reservation(name, block): {
      local resource = blockType.resource('google_bigquery_bi_reservation', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        size: build.template(std.get(block, 'size', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      size: resource.field('size'),
      update_time: resource.field('update_time'),
    },
    bigquery_capacity_commitment(name, block): {
      local resource = blockType.resource('google_bigquery_capacity_commitment', name),
      _: resource._(block, {
        capacity_commitment_id: build.template(std.get(block, 'capacity_commitment_id', null)),
        commitment_end_time: build.template(std.get(block, 'commitment_end_time', null)),
        commitment_start_time: build.template(std.get(block, 'commitment_start_time', null)),
        edition: build.template(std.get(block, 'edition', null)),
        enforce_single_admin_project_per_org: build.template(std.get(block, 'enforce_single_admin_project_per_org', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        plan: build.template(block.plan),
        project: build.template(std.get(block, 'project', null)),
        renewal_plan: build.template(std.get(block, 'renewal_plan', null)),
        slot_count: build.template(block.slot_count),
        state: build.template(std.get(block, 'state', null)),
      }),
      capacity_commitment_id: resource.field('capacity_commitment_id'),
      commitment_end_time: resource.field('commitment_end_time'),
      commitment_start_time: resource.field('commitment_start_time'),
      edition: resource.field('edition'),
      enforce_single_admin_project_per_org: resource.field('enforce_single_admin_project_per_org'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      plan: resource.field('plan'),
      project: resource.field('project'),
      renewal_plan: resource.field('renewal_plan'),
      slot_count: resource.field('slot_count'),
      state: resource.field('state'),
    },
    bigquery_connection(name, block): {
      local resource = blockType.resource('google_bigquery_connection', name),
      _: resource._(block, {
        connection_id: build.template(std.get(block, 'connection_id', null)),
        description: build.template(std.get(block, 'description', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        has_credential: build.template(std.get(block, 'has_credential', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      connection_id: resource.field('connection_id'),
      description: resource.field('description'),
      friendly_name: resource.field('friendly_name'),
      has_credential: resource.field('has_credential'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    bigquery_connection_iam_binding(name, block): {
      local resource = blockType.resource('google_bigquery_connection_iam_binding', name),
      _: resource._(block, {
        connection_id: build.template(block.connection_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      connection_id: resource.field('connection_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    bigquery_connection_iam_member(name, block): {
      local resource = blockType.resource('google_bigquery_connection_iam_member', name),
      _: resource._(block, {
        connection_id: build.template(block.connection_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      connection_id: resource.field('connection_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    bigquery_connection_iam_policy(name, block): {
      local resource = blockType.resource('google_bigquery_connection_iam_policy', name),
      _: resource._(block, {
        connection_id: build.template(block.connection_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      connection_id: resource.field('connection_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    bigquery_data_transfer_config(name, block): {
      local resource = blockType.resource('google_bigquery_data_transfer_config', name),
      _: resource._(block, {
        data_refresh_window_days: build.template(std.get(block, 'data_refresh_window_days', null)),
        data_source_id: build.template(block.data_source_id),
        destination_dataset_id: build.template(std.get(block, 'destination_dataset_id', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        notification_pubsub_topic: build.template(std.get(block, 'notification_pubsub_topic', null)),
        params: build.template(block.params),
        project: build.template(std.get(block, 'project', null)),
        schedule: build.template(std.get(block, 'schedule', null)),
        service_account_name: build.template(std.get(block, 'service_account_name', null)),
      }),
      data_refresh_window_days: resource.field('data_refresh_window_days'),
      data_source_id: resource.field('data_source_id'),
      destination_dataset_id: resource.field('destination_dataset_id'),
      disabled: resource.field('disabled'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      notification_pubsub_topic: resource.field('notification_pubsub_topic'),
      params: resource.field('params'),
      project: resource.field('project'),
      schedule: resource.field('schedule'),
      service_account_name: resource.field('service_account_name'),
    },
    bigquery_datapolicy_data_policy(name, block): {
      local resource = blockType.resource('google_bigquery_datapolicy_data_policy', name),
      _: resource._(block, {
        data_policy_id: build.template(block.data_policy_id),
        data_policy_type: build.template(block.data_policy_type),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        policy_tag: build.template(block.policy_tag),
        project: build.template(std.get(block, 'project', null)),
      }),
      data_policy_id: resource.field('data_policy_id'),
      data_policy_type: resource.field('data_policy_type'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_tag: resource.field('policy_tag'),
      project: resource.field('project'),
    },
    bigquery_datapolicy_data_policy_iam_binding(name, block): {
      local resource = blockType.resource('google_bigquery_datapolicy_data_policy_iam_binding', name),
      _: resource._(block, {
        data_policy_id: build.template(block.data_policy_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      data_policy_id: resource.field('data_policy_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    bigquery_datapolicy_data_policy_iam_member(name, block): {
      local resource = blockType.resource('google_bigquery_datapolicy_data_policy_iam_member', name),
      _: resource._(block, {
        data_policy_id: build.template(block.data_policy_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      data_policy_id: resource.field('data_policy_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    bigquery_datapolicy_data_policy_iam_policy(name, block): {
      local resource = blockType.resource('google_bigquery_datapolicy_data_policy_iam_policy', name),
      _: resource._(block, {
        data_policy_id: build.template(block.data_policy_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      data_policy_id: resource.field('data_policy_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    bigquery_dataset(name, block): {
      local resource = blockType.resource('google_bigquery_dataset', name),
      _: resource._(block, {
        creation_time: build.template(std.get(block, 'creation_time', null)),
        dataset_id: build.template(block.dataset_id),
        default_collation: build.template(std.get(block, 'default_collation', null)),
        default_partition_expiration_ms: build.template(std.get(block, 'default_partition_expiration_ms', null)),
        default_table_expiration_ms: build.template(std.get(block, 'default_table_expiration_ms', null)),
        delete_contents_on_destroy: build.template(std.get(block, 'delete_contents_on_destroy', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        is_case_insensitive: build.template(std.get(block, 'is_case_insensitive', null)),
        labels: build.template(std.get(block, 'labels', null)),
        last_modified_time: build.template(std.get(block, 'last_modified_time', null)),
        location: build.template(std.get(block, 'location', null)),
        max_time_travel_hours: build.template(std.get(block, 'max_time_travel_hours', null)),
        project: build.template(std.get(block, 'project', null)),
        resource_tags: build.template(std.get(block, 'resource_tags', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        storage_billing_model: build.template(std.get(block, 'storage_billing_model', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      creation_time: resource.field('creation_time'),
      dataset_id: resource.field('dataset_id'),
      default_collation: resource.field('default_collation'),
      default_partition_expiration_ms: resource.field('default_partition_expiration_ms'),
      default_table_expiration_ms: resource.field('default_table_expiration_ms'),
      delete_contents_on_destroy: resource.field('delete_contents_on_destroy'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      friendly_name: resource.field('friendly_name'),
      id: resource.field('id'),
      is_case_insensitive: resource.field('is_case_insensitive'),
      labels: resource.field('labels'),
      last_modified_time: resource.field('last_modified_time'),
      location: resource.field('location'),
      max_time_travel_hours: resource.field('max_time_travel_hours'),
      project: resource.field('project'),
      resource_tags: resource.field('resource_tags'),
      self_link: resource.field('self_link'),
      storage_billing_model: resource.field('storage_billing_model'),
      terraform_labels: resource.field('terraform_labels'),
    },
    bigquery_dataset_access(name, block): {
      local resource = blockType.resource('google_bigquery_dataset_access', name),
      _: resource._(block, {
        api_updated_member: build.template(std.get(block, 'api_updated_member', null)),
        dataset_id: build.template(block.dataset_id),
        domain: build.template(std.get(block, 'domain', null)),
        group_by_email: build.template(std.get(block, 'group_by_email', null)),
        iam_member: build.template(std.get(block, 'iam_member', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(std.get(block, 'role', null)),
        special_group: build.template(std.get(block, 'special_group', null)),
        user_by_email: build.template(std.get(block, 'user_by_email', null)),
      }),
      api_updated_member: resource.field('api_updated_member'),
      dataset_id: resource.field('dataset_id'),
      domain: resource.field('domain'),
      group_by_email: resource.field('group_by_email'),
      iam_member: resource.field('iam_member'),
      id: resource.field('id'),
      project: resource.field('project'),
      role: resource.field('role'),
      special_group: resource.field('special_group'),
      user_by_email: resource.field('user_by_email'),
    },
    bigquery_dataset_iam_binding(name, block): {
      local resource = blockType.resource('google_bigquery_dataset_iam_binding', name),
      _: resource._(block, {
        dataset_id: build.template(block.dataset_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      dataset_id: resource.field('dataset_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    bigquery_dataset_iam_member(name, block): {
      local resource = blockType.resource('google_bigquery_dataset_iam_member', name),
      _: resource._(block, {
        dataset_id: build.template(block.dataset_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      dataset_id: resource.field('dataset_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    bigquery_dataset_iam_policy(name, block): {
      local resource = blockType.resource('google_bigquery_dataset_iam_policy', name),
      _: resource._(block, {
        dataset_id: build.template(block.dataset_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      dataset_id: resource.field('dataset_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    bigquery_job(name, block): {
      local resource = blockType.resource('google_bigquery_job', name),
      _: resource._(block, {
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        job_id: build.template(block.job_id),
        job_timeout_ms: build.template(std.get(block, 'job_timeout_ms', null)),
        job_type: build.template(std.get(block, 'job_type', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        project: build.template(std.get(block, 'project', null)),
        status: build.template(std.get(block, 'status', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        user_email: build.template(std.get(block, 'user_email', null)),
      }),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      job_id: resource.field('job_id'),
      job_timeout_ms: resource.field('job_timeout_ms'),
      job_type: resource.field('job_type'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      project: resource.field('project'),
      status: resource.field('status'),
      terraform_labels: resource.field('terraform_labels'),
      user_email: resource.field('user_email'),
    },
    bigquery_reservation(name, block): {
      local resource = blockType.resource('google_bigquery_reservation', name),
      _: resource._(block, {
        concurrency: build.template(std.get(block, 'concurrency', null)),
        edition: build.template(std.get(block, 'edition', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_idle_slots: build.template(std.get(block, 'ignore_idle_slots', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        slot_capacity: build.template(block.slot_capacity),
      }),
      concurrency: resource.field('concurrency'),
      edition: resource.field('edition'),
      id: resource.field('id'),
      ignore_idle_slots: resource.field('ignore_idle_slots'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      slot_capacity: resource.field('slot_capacity'),
    },
    bigquery_reservation_assignment(name, block): {
      local resource = blockType.resource('google_bigquery_reservation_assignment', name),
      _: resource._(block, {
        assignee: build.template(block.assignee),
        id: build.template(std.get(block, 'id', null)),
        job_type: build.template(block.job_type),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        reservation: build.template(block.reservation),
        state: build.template(std.get(block, 'state', null)),
      }),
      assignee: resource.field('assignee'),
      id: resource.field('id'),
      job_type: resource.field('job_type'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      reservation: resource.field('reservation'),
      state: resource.field('state'),
    },
    bigquery_routine(name, block): {
      local resource = blockType.resource('google_bigquery_routine', name),
      _: resource._(block, {
        creation_time: build.template(std.get(block, 'creation_time', null)),
        data_governance_type: build.template(std.get(block, 'data_governance_type', null)),
        dataset_id: build.template(block.dataset_id),
        definition_body: build.template(block.definition_body),
        description: build.template(std.get(block, 'description', null)),
        determinism_level: build.template(std.get(block, 'determinism_level', null)),
        id: build.template(std.get(block, 'id', null)),
        imported_libraries: build.template(std.get(block, 'imported_libraries', null)),
        language: build.template(std.get(block, 'language', null)),
        last_modified_time: build.template(std.get(block, 'last_modified_time', null)),
        project: build.template(std.get(block, 'project', null)),
        return_table_type: build.template(std.get(block, 'return_table_type', null)),
        return_type: build.template(std.get(block, 'return_type', null)),
        routine_id: build.template(block.routine_id),
        routine_type: build.template(block.routine_type),
      }),
      creation_time: resource.field('creation_time'),
      data_governance_type: resource.field('data_governance_type'),
      dataset_id: resource.field('dataset_id'),
      definition_body: resource.field('definition_body'),
      description: resource.field('description'),
      determinism_level: resource.field('determinism_level'),
      id: resource.field('id'),
      imported_libraries: resource.field('imported_libraries'),
      language: resource.field('language'),
      last_modified_time: resource.field('last_modified_time'),
      project: resource.field('project'),
      return_table_type: resource.field('return_table_type'),
      return_type: resource.field('return_type'),
      routine_id: resource.field('routine_id'),
      routine_type: resource.field('routine_type'),
    },
    bigquery_table(name, block): {
      local resource = blockType.resource('google_bigquery_table', name),
      _: resource._(block, {
        clustering: build.template(std.get(block, 'clustering', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        dataset_id: build.template(block.dataset_id),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        expiration_time: build.template(std.get(block, 'expiration_time', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        last_modified_time: build.template(std.get(block, 'last_modified_time', null)),
        location: build.template(std.get(block, 'location', null)),
        max_staleness: build.template(std.get(block, 'max_staleness', null)),
        num_bytes: build.template(std.get(block, 'num_bytes', null)),
        num_long_term_bytes: build.template(std.get(block, 'num_long_term_bytes', null)),
        num_rows: build.template(std.get(block, 'num_rows', null)),
        project: build.template(std.get(block, 'project', null)),
        require_partition_filter: build.template(std.get(block, 'require_partition_filter', null)),
        resource_tags: build.template(std.get(block, 'resource_tags', null)),
        schema: build.template(std.get(block, 'schema', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        table_id: build.template(block.table_id),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      clustering: resource.field('clustering'),
      creation_time: resource.field('creation_time'),
      dataset_id: resource.field('dataset_id'),
      deletion_protection: resource.field('deletion_protection'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      expiration_time: resource.field('expiration_time'),
      friendly_name: resource.field('friendly_name'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      last_modified_time: resource.field('last_modified_time'),
      location: resource.field('location'),
      max_staleness: resource.field('max_staleness'),
      num_bytes: resource.field('num_bytes'),
      num_long_term_bytes: resource.field('num_long_term_bytes'),
      num_rows: resource.field('num_rows'),
      project: resource.field('project'),
      require_partition_filter: resource.field('require_partition_filter'),
      resource_tags: resource.field('resource_tags'),
      schema: resource.field('schema'),
      self_link: resource.field('self_link'),
      table_id: resource.field('table_id'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
    },
    bigquery_table_iam_binding(name, block): {
      local resource = blockType.resource('google_bigquery_table_iam_binding', name),
      _: resource._(block, {
        dataset_id: build.template(block.dataset_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        table_id: build.template(block.table_id),
      }),
      dataset_id: resource.field('dataset_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      table_id: resource.field('table_id'),
    },
    bigquery_table_iam_member(name, block): {
      local resource = blockType.resource('google_bigquery_table_iam_member', name),
      _: resource._(block, {
        dataset_id: build.template(block.dataset_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        table_id: build.template(block.table_id),
      }),
      dataset_id: resource.field('dataset_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      table_id: resource.field('table_id'),
    },
    bigquery_table_iam_policy(name, block): {
      local resource = blockType.resource('google_bigquery_table_iam_policy', name),
      _: resource._(block, {
        dataset_id: build.template(block.dataset_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        table_id: build.template(block.table_id),
      }),
      dataset_id: resource.field('dataset_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      table_id: resource.field('table_id'),
    },
    bigtable_app_profile(name, block): {
      local resource = blockType.resource('google_bigtable_app_profile', name),
      _: resource._(block, {
        app_profile_id: build.template(block.app_profile_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_warnings: build.template(std.get(block, 'ignore_warnings', null)),
        instance: build.template(std.get(block, 'instance', null)),
        multi_cluster_routing_cluster_ids: build.template(std.get(block, 'multi_cluster_routing_cluster_ids', null)),
        multi_cluster_routing_use_any: build.template(std.get(block, 'multi_cluster_routing_use_any', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      app_profile_id: resource.field('app_profile_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      ignore_warnings: resource.field('ignore_warnings'),
      instance: resource.field('instance'),
      multi_cluster_routing_cluster_ids: resource.field('multi_cluster_routing_cluster_ids'),
      multi_cluster_routing_use_any: resource.field('multi_cluster_routing_use_any'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    bigtable_authorized_view(name, block): {
      local resource = blockType.resource('google_bigtable_authorized_view', name),
      _: resource._(block, {
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        table_name: build.template(block.table_name),
      }),
      deletion_protection: resource.field('deletion_protection'),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
      name: resource.field('name'),
      project: resource.field('project'),
      table_name: resource.field('table_name'),
    },
    bigtable_gc_policy(name, block): {
      local resource = blockType.resource('google_bigtable_gc_policy', name),
      _: resource._(block, {
        column_family: build.template(block.column_family),
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        gc_rules: build.template(std.get(block, 'gc_rules', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_warnings: build.template(std.get(block, 'ignore_warnings', null)),
        instance_name: build.template(block.instance_name),
        mode: build.template(std.get(block, 'mode', null)),
        project: build.template(std.get(block, 'project', null)),
        table: build.template(block.table),
      }),
      column_family: resource.field('column_family'),
      deletion_policy: resource.field('deletion_policy'),
      gc_rules: resource.field('gc_rules'),
      id: resource.field('id'),
      ignore_warnings: resource.field('ignore_warnings'),
      instance_name: resource.field('instance_name'),
      mode: resource.field('mode'),
      project: resource.field('project'),
      table: resource.field('table'),
    },
    bigtable_instance(name, block): {
      local resource = blockType.resource('google_bigtable_instance', name),
      _: resource._(block, {
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      deletion_protection: resource.field('deletion_protection'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      instance_type: resource.field('instance_type'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
    },
    bigtable_instance_iam_binding(name, block): {
      local resource = blockType.resource('google_bigtable_instance_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    bigtable_instance_iam_member(name, block): {
      local resource = blockType.resource('google_bigtable_instance_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    bigtable_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_bigtable_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    bigtable_table(name, block): {
      local resource = blockType.resource('google_bigtable_table', name),
      _: resource._(block, {
        change_stream_retention: build.template(std.get(block, 'change_stream_retention', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        split_keys: build.template(std.get(block, 'split_keys', null)),
      }),
      change_stream_retention: resource.field('change_stream_retention'),
      deletion_protection: resource.field('deletion_protection'),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
      name: resource.field('name'),
      project: resource.field('project'),
      split_keys: resource.field('split_keys'),
    },
    bigtable_table_iam_binding(name, block): {
      local resource = blockType.resource('google_bigtable_table_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        table: build.template(block.table),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      table: resource.field('table'),
    },
    bigtable_table_iam_member(name, block): {
      local resource = blockType.resource('google_bigtable_table_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        table: build.template(block.table),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      table: resource.field('table'),
    },
    bigtable_table_iam_policy(name, block): {
      local resource = blockType.resource('google_bigtable_table_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        table: build.template(block.table),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      table: resource.field('table'),
    },
    billing_account_iam_binding(name, block): {
      local resource = blockType.resource('google_billing_account_iam_binding', name),
      _: resource._(block, {
        billing_account_id: build.template(block.billing_account_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
      }),
      billing_account_id: resource.field('billing_account_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
    },
    billing_account_iam_member(name, block): {
      local resource = blockType.resource('google_billing_account_iam_member', name),
      _: resource._(block, {
        billing_account_id: build.template(block.billing_account_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
      }),
      billing_account_id: resource.field('billing_account_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
    },
    billing_account_iam_policy(name, block): {
      local resource = blockType.resource('google_billing_account_iam_policy', name),
      _: resource._(block, {
        billing_account_id: build.template(block.billing_account_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
      }),
      billing_account_id: resource.field('billing_account_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    billing_budget(name, block): {
      local resource = blockType.resource('google_billing_budget', name),
      _: resource._(block, {
        billing_account: build.template(block.billing_account),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        ownership_scope: build.template(std.get(block, 'ownership_scope', null)),
      }),
      billing_account: resource.field('billing_account'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      ownership_scope: resource.field('ownership_scope'),
    },
    billing_project_info(name, block): {
      local resource = blockType.resource('google_billing_project_info', name),
      _: resource._(block, {
        billing_account: build.template(block.billing_account),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      billing_account: resource.field('billing_account'),
      id: resource.field('id'),
      project: resource.field('project'),
    },
    billing_subaccount(name, block): {
      local resource = blockType.resource('google_billing_subaccount', name),
      _: resource._(block, {
        billing_account_id: build.template(std.get(block, 'billing_account_id', null)),
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        master_billing_account: build.template(block.master_billing_account),
        name: build.template(std.get(block, 'name', null)),
        open: build.template(std.get(block, 'open', null)),
      }),
      billing_account_id: resource.field('billing_account_id'),
      deletion_policy: resource.field('deletion_policy'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      master_billing_account: resource.field('master_billing_account'),
      name: resource.field('name'),
      open: resource.field('open'),
    },
    binary_authorization_attestor(name, block): {
      local resource = blockType.resource('google_binary_authorization_attestor', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    binary_authorization_attestor_iam_binding(name, block): {
      local resource = blockType.resource('google_binary_authorization_attestor_iam_binding', name),
      _: resource._(block, {
        attestor: build.template(block.attestor),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      attestor: resource.field('attestor'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    binary_authorization_attestor_iam_member(name, block): {
      local resource = blockType.resource('google_binary_authorization_attestor_iam_member', name),
      _: resource._(block, {
        attestor: build.template(block.attestor),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      attestor: resource.field('attestor'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    binary_authorization_attestor_iam_policy(name, block): {
      local resource = blockType.resource('google_binary_authorization_attestor_iam_policy', name),
      _: resource._(block, {
        attestor: build.template(block.attestor),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      attestor: resource.field('attestor'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    binary_authorization_policy(name, block): {
      local resource = blockType.resource('google_binary_authorization_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        global_policy_evaluation_mode: build.template(std.get(block, 'global_policy_evaluation_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      description: resource.field('description'),
      global_policy_evaluation_mode: resource.field('global_policy_evaluation_mode'),
      id: resource.field('id'),
      project: resource.field('project'),
    },
    blockchain_node_engine_blockchain_nodes(name, block): {
      local resource = blockType.resource('google_blockchain_node_engine_blockchain_nodes', name),
      _: resource._(block, {
        blockchain_node_id: build.template(block.blockchain_node_id),
        blockchain_type: build.template(std.get(block, 'blockchain_type', null)),
        connection_info: build.template(std.get(block, 'connection_info', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      blockchain_node_id: resource.field('blockchain_node_id'),
      blockchain_type: resource.field('blockchain_type'),
      connection_info: resource.field('connection_info'),
      create_time: resource.field('create_time'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    certificate_manager_certificate(name, block): {
      local resource = blockType.resource('google_certificate_manager_certificate', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        san_dnsnames: build.template(std.get(block, 'san_dnsnames', null)),
        scope: build.template(std.get(block, 'scope', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      san_dnsnames: resource.field('san_dnsnames'),
      scope: resource.field('scope'),
      terraform_labels: resource.field('terraform_labels'),
    },
    certificate_manager_certificate_issuance_config(name, block): {
      local resource = blockType.resource('google_certificate_manager_certificate_issuance_config', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        key_algorithm: build.template(block.key_algorithm),
        labels: build.template(std.get(block, 'labels', null)),
        lifetime: build.template(block.lifetime),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        rotation_window_percentage: build.template(block.rotation_window_percentage),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      key_algorithm: resource.field('key_algorithm'),
      labels: resource.field('labels'),
      lifetime: resource.field('lifetime'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      rotation_window_percentage: resource.field('rotation_window_percentage'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    certificate_manager_certificate_map(name, block): {
      local resource = blockType.resource('google_certificate_manager_certificate_map', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        gclb_targets: build.template(std.get(block, 'gclb_targets', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      gclb_targets: resource.field('gclb_targets'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    certificate_manager_certificate_map_entry(name, block): {
      local resource = blockType.resource('google_certificate_manager_certificate_map_entry', name),
      _: resource._(block, {
        certificates: build.template(block.certificates),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        map: build.template(block.map),
        matcher: build.template(std.get(block, 'matcher', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      certificates: resource.field('certificates'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      hostname: resource.field('hostname'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      map: resource.field('map'),
      matcher: resource.field('matcher'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    certificate_manager_dns_authorization(name, block): {
      local resource = blockType.resource('google_certificate_manager_dns_authorization', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        dns_resource_record: build.template(std.get(block, 'dns_resource_record', null)),
        domain: build.template(block.domain),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      description: resource.field('description'),
      dns_resource_record: resource.field('dns_resource_record'),
      domain: resource.field('domain'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
    },
    certificate_manager_trust_config(name, block): {
      local resource = blockType.resource('google_certificate_manager_trust_config', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    cloud_asset_folder_feed(name, block): {
      local resource = blockType.resource('google_cloud_asset_folder_feed', name),
      _: resource._(block, {
        asset_names: build.template(std.get(block, 'asset_names', null)),
        asset_types: build.template(std.get(block, 'asset_types', null)),
        billing_project: build.template(block.billing_project),
        content_type: build.template(std.get(block, 'content_type', null)),
        feed_id: build.template(block.feed_id),
        folder: build.template(block.folder),
        folder_id: build.template(std.get(block, 'folder_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      asset_names: resource.field('asset_names'),
      asset_types: resource.field('asset_types'),
      billing_project: resource.field('billing_project'),
      content_type: resource.field('content_type'),
      feed_id: resource.field('feed_id'),
      folder: resource.field('folder'),
      folder_id: resource.field('folder_id'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    cloud_asset_organization_feed(name, block): {
      local resource = blockType.resource('google_cloud_asset_organization_feed', name),
      _: resource._(block, {
        asset_names: build.template(std.get(block, 'asset_names', null)),
        asset_types: build.template(std.get(block, 'asset_types', null)),
        billing_project: build.template(block.billing_project),
        content_type: build.template(std.get(block, 'content_type', null)),
        feed_id: build.template(block.feed_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        org_id: build.template(block.org_id),
      }),
      asset_names: resource.field('asset_names'),
      asset_types: resource.field('asset_types'),
      billing_project: resource.field('billing_project'),
      content_type: resource.field('content_type'),
      feed_id: resource.field('feed_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
    },
    cloud_asset_project_feed(name, block): {
      local resource = blockType.resource('google_cloud_asset_project_feed', name),
      _: resource._(block, {
        asset_names: build.template(std.get(block, 'asset_names', null)),
        asset_types: build.template(std.get(block, 'asset_types', null)),
        billing_project: build.template(std.get(block, 'billing_project', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        feed_id: build.template(block.feed_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      asset_names: resource.field('asset_names'),
      asset_types: resource.field('asset_types'),
      billing_project: resource.field('billing_project'),
      content_type: resource.field('content_type'),
      feed_id: resource.field('feed_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    cloud_identity_group(name, block): {
      local resource = blockType.resource('google_cloud_identity_group', name),
      _: resource._(block, {
        additional_group_keys: build.template(std.get(block, 'additional_group_keys', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        initial_group_config: build.template(std.get(block, 'initial_group_config', null)),
        labels: build.template(block.labels),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      additional_group_keys: resource.field('additional_group_keys'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      initial_group_config: resource.field('initial_group_config'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      update_time: resource.field('update_time'),
    },
    cloud_identity_group_membership(name, block): {
      local resource = blockType.resource('google_cloud_identity_group_membership', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        group: build.template(block.group),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        type: build.template(std.get(block, 'type', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      group: resource.field('group'),
      id: resource.field('id'),
      name: resource.field('name'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    cloud_ids_endpoint(name, block): {
      local resource = blockType.resource('google_cloud_ids_endpoint', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        endpoint_forwarding_rule: build.template(std.get(block, 'endpoint_forwarding_rule', null)),
        endpoint_ip: build.template(std.get(block, 'endpoint_ip', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        network: build.template(block.network),
        project: build.template(std.get(block, 'project', null)),
        severity: build.template(block.severity),
        threat_exceptions: build.template(std.get(block, 'threat_exceptions', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      endpoint_forwarding_rule: resource.field('endpoint_forwarding_rule'),
      endpoint_ip: resource.field('endpoint_ip'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      severity: resource.field('severity'),
      threat_exceptions: resource.field('threat_exceptions'),
      update_time: resource.field('update_time'),
    },
    cloud_quotas_quota_preference(name, block): {
      local resource = blockType.resource('google_cloud_quotas_quota_preference', name),
      _: resource._(block, {
        contact_email: build.template(std.get(block, 'contact_email', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        dimensions: build.template(std.get(block, 'dimensions', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_safety_checks: build.template(std.get(block, 'ignore_safety_checks', null)),
        justification: build.template(std.get(block, 'justification', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(std.get(block, 'parent', null)),
        quota_id: build.template(std.get(block, 'quota_id', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        service: build.template(std.get(block, 'service', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      contact_email: resource.field('contact_email'),
      create_time: resource.field('create_time'),
      dimensions: resource.field('dimensions'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      ignore_safety_checks: resource.field('ignore_safety_checks'),
      justification: resource.field('justification'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      quota_id: resource.field('quota_id'),
      reconciling: resource.field('reconciling'),
      service: resource.field('service'),
      update_time: resource.field('update_time'),
    },
    cloud_run_domain_mapping(name, block): {
      local resource = blockType.resource('google_cloud_run_domain_mapping', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      status: resource.field('status'),
    },
    cloud_run_service(name, block): {
      local resource = blockType.resource('google_cloud_run_service', name),
      _: resource._(block, {
        autogenerate_revision_name: build.template(std.get(block, 'autogenerate_revision_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      autogenerate_revision_name: resource.field('autogenerate_revision_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      status: resource.field('status'),
    },
    cloud_run_service_iam_binding(name, block): {
      local resource = blockType.resource('google_cloud_run_service_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        service: build.template(block.service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      service: resource.field('service'),
    },
    cloud_run_service_iam_member(name, block): {
      local resource = blockType.resource('google_cloud_run_service_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        service: build.template(block.service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      service: resource.field('service'),
    },
    cloud_run_service_iam_policy(name, block): {
      local resource = blockType.resource('google_cloud_run_service_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        service: build.template(block.service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      service: resource.field('service'),
    },
    cloud_run_v2_job(name, block): {
      local resource = blockType.resource('google_cloud_run_v2_job', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        client: build.template(std.get(block, 'client', null)),
        client_version: build.template(std.get(block, 'client_version', null)),
        conditions: build.template(std.get(block, 'conditions', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        creator: build.template(std.get(block, 'creator', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        execution_count: build.template(std.get(block, 'execution_count', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        generation: build.template(std.get(block, 'generation', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        last_modifier: build.template(std.get(block, 'last_modifier', null)),
        latest_created_execution: build.template(std.get(block, 'latest_created_execution', null)),
        launch_stage: build.template(std.get(block, 'launch_stage', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        observed_generation: build.template(std.get(block, 'observed_generation', null)),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        terminal_condition: build.template(std.get(block, 'terminal_condition', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      annotations: resource.field('annotations'),
      client: resource.field('client'),
      client_version: resource.field('client_version'),
      conditions: resource.field('conditions'),
      create_time: resource.field('create_time'),
      creator: resource.field('creator'),
      delete_time: resource.field('delete_time'),
      deletion_protection: resource.field('deletion_protection'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      execution_count: resource.field('execution_count'),
      expire_time: resource.field('expire_time'),
      generation: resource.field('generation'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      last_modifier: resource.field('last_modifier'),
      latest_created_execution: resource.field('latest_created_execution'),
      launch_stage: resource.field('launch_stage'),
      location: resource.field('location'),
      name: resource.field('name'),
      observed_generation: resource.field('observed_generation'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      terminal_condition: resource.field('terminal_condition'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    cloud_run_v2_job_iam_binding(name, block): {
      local resource = blockType.resource('google_cloud_run_v2_job_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    cloud_run_v2_job_iam_member(name, block): {
      local resource = blockType.resource('google_cloud_run_v2_job_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    cloud_run_v2_job_iam_policy(name, block): {
      local resource = blockType.resource('google_cloud_run_v2_job_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    cloud_run_v2_service(name, block): {
      local resource = blockType.resource('google_cloud_run_v2_service', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        client: build.template(std.get(block, 'client', null)),
        client_version: build.template(std.get(block, 'client_version', null)),
        conditions: build.template(std.get(block, 'conditions', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        creator: build.template(std.get(block, 'creator', null)),
        custom_audiences: build.template(std.get(block, 'custom_audiences', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        generation: build.template(std.get(block, 'generation', null)),
        id: build.template(std.get(block, 'id', null)),
        ingress: build.template(std.get(block, 'ingress', null)),
        invoker_iam_disabled: build.template(std.get(block, 'invoker_iam_disabled', null)),
        labels: build.template(std.get(block, 'labels', null)),
        last_modifier: build.template(std.get(block, 'last_modifier', null)),
        latest_created_revision: build.template(std.get(block, 'latest_created_revision', null)),
        latest_ready_revision: build.template(std.get(block, 'latest_ready_revision', null)),
        launch_stage: build.template(std.get(block, 'launch_stage', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        observed_generation: build.template(std.get(block, 'observed_generation', null)),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        terminal_condition: build.template(std.get(block, 'terminal_condition', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        traffic_statuses: build.template(std.get(block, 'traffic_statuses', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        uri: build.template(std.get(block, 'uri', null)),
        urls: build.template(std.get(block, 'urls', null)),
      }),
      annotations: resource.field('annotations'),
      client: resource.field('client'),
      client_version: resource.field('client_version'),
      conditions: resource.field('conditions'),
      create_time: resource.field('create_time'),
      creator: resource.field('creator'),
      custom_audiences: resource.field('custom_audiences'),
      delete_time: resource.field('delete_time'),
      deletion_protection: resource.field('deletion_protection'),
      description: resource.field('description'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      expire_time: resource.field('expire_time'),
      generation: resource.field('generation'),
      id: resource.field('id'),
      ingress: resource.field('ingress'),
      invoker_iam_disabled: resource.field('invoker_iam_disabled'),
      labels: resource.field('labels'),
      last_modifier: resource.field('last_modifier'),
      latest_created_revision: resource.field('latest_created_revision'),
      latest_ready_revision: resource.field('latest_ready_revision'),
      launch_stage: resource.field('launch_stage'),
      location: resource.field('location'),
      name: resource.field('name'),
      observed_generation: resource.field('observed_generation'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      terminal_condition: resource.field('terminal_condition'),
      terraform_labels: resource.field('terraform_labels'),
      traffic_statuses: resource.field('traffic_statuses'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      uri: resource.field('uri'),
      urls: resource.field('urls'),
    },
    cloud_run_v2_service_iam_binding(name, block): {
      local resource = blockType.resource('google_cloud_run_v2_service_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    cloud_run_v2_service_iam_member(name, block): {
      local resource = blockType.resource('google_cloud_run_v2_service_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    cloud_run_v2_service_iam_policy(name, block): {
      local resource = blockType.resource('google_cloud_run_v2_service_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    cloud_scheduler_job(name, block): {
      local resource = blockType.resource('google_cloud_scheduler_job', name),
      _: resource._(block, {
        attempt_deadline: build.template(std.get(block, 'attempt_deadline', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        paused: build.template(std.get(block, 'paused', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        schedule: build.template(std.get(block, 'schedule', null)),
        state: build.template(std.get(block, 'state', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
      }),
      attempt_deadline: resource.field('attempt_deadline'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      paused: resource.field('paused'),
      project: resource.field('project'),
      region: resource.field('region'),
      schedule: resource.field('schedule'),
      state: resource.field('state'),
      time_zone: resource.field('time_zone'),
    },
    cloud_tasks_queue(name, block): {
      local resource = blockType.resource('google_cloud_tasks_queue', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    cloud_tasks_queue_iam_binding(name, block): {
      local resource = blockType.resource('google_cloud_tasks_queue_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    cloud_tasks_queue_iam_member(name, block): {
      local resource = blockType.resource('google_cloud_tasks_queue_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    cloud_tasks_queue_iam_policy(name, block): {
      local resource = blockType.resource('google_cloud_tasks_queue_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    cloudbuild_bitbucket_server_config(name, block): {
      local resource = blockType.resource('google_cloudbuild_bitbucket_server_config', name),
      _: resource._(block, {
        api_key: build.template(block.api_key),
        config_id: build.template(block.config_id),
        host_uri: build.template(block.host_uri),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        peered_network: build.template(std.get(block, 'peered_network', null)),
        project: build.template(std.get(block, 'project', null)),
        ssl_ca: build.template(std.get(block, 'ssl_ca', null)),
        username: build.template(block.username),
        webhook_key: build.template(std.get(block, 'webhook_key', null)),
      }),
      api_key: resource.field('api_key'),
      config_id: resource.field('config_id'),
      host_uri: resource.field('host_uri'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      peered_network: resource.field('peered_network'),
      project: resource.field('project'),
      ssl_ca: resource.field('ssl_ca'),
      username: resource.field('username'),
      webhook_key: resource.field('webhook_key'),
    },
    cloudbuild_trigger(name, block): {
      local resource = blockType.resource('google_cloudbuild_trigger', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        filename: build.template(std.get(block, 'filename', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        ignored_files: build.template(std.get(block, 'ignored_files', null)),
        include_build_logs: build.template(std.get(block, 'include_build_logs', null)),
        included_files: build.template(std.get(block, 'included_files', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        substitutions: build.template(std.get(block, 'substitutions', null)),
        tags: build.template(std.get(block, 'tags', null)),
        trigger_id: build.template(std.get(block, 'trigger_id', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      disabled: resource.field('disabled'),
      filename: resource.field('filename'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      ignored_files: resource.field('ignored_files'),
      include_build_logs: resource.field('include_build_logs'),
      included_files: resource.field('included_files'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_account: resource.field('service_account'),
      substitutions: resource.field('substitutions'),
      tags: resource.field('tags'),
      trigger_id: resource.field('trigger_id'),
    },
    cloudbuild_worker_pool(name, block): {
      local resource = blockType.resource('google_cloudbuild_worker_pool', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      annotations: resource.field('annotations'),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      display_name: resource.field('display_name'),
      effective_annotations: resource.field('effective_annotations'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    cloudbuildv2_connection(name, block): {
      local resource = blockType.resource('google_cloudbuildv2_connection', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        installation_state: build.template(std.get(block, 'installation_state', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      annotations: resource.field('annotations'),
      create_time: resource.field('create_time'),
      disabled: resource.field('disabled'),
      effective_annotations: resource.field('effective_annotations'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      installation_state: resource.field('installation_state'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      update_time: resource.field('update_time'),
    },
    cloudbuildv2_connection_iam_binding(name, block): {
      local resource = blockType.resource('google_cloudbuildv2_connection_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    cloudbuildv2_connection_iam_member(name, block): {
      local resource = blockType.resource('google_cloudbuildv2_connection_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    cloudbuildv2_connection_iam_policy(name, block): {
      local resource = blockType.resource('google_cloudbuildv2_connection_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    cloudbuildv2_repository(name, block): {
      local resource = blockType.resource('google_cloudbuildv2_repository', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        parent_connection: build.template(block.parent_connection),
        project: build.template(std.get(block, 'project', null)),
        remote_uri: build.template(block.remote_uri),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      annotations: resource.field('annotations'),
      create_time: resource.field('create_time'),
      effective_annotations: resource.field('effective_annotations'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent_connection: resource.field('parent_connection'),
      project: resource.field('project'),
      remote_uri: resource.field('remote_uri'),
      update_time: resource.field('update_time'),
    },
    clouddeploy_automation(name, block): {
      local resource = blockType.resource('google_clouddeploy_automation', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        delivery_pipeline: build.template(block.delivery_pipeline),
        description: build.template(std.get(block, 'description', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        service_account: build.template(block.service_account),
        suspended: build.template(std.get(block, 'suspended', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      annotations: resource.field('annotations'),
      create_time: resource.field('create_time'),
      delivery_pipeline: resource.field('delivery_pipeline'),
      description: resource.field('description'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_account: resource.field('service_account'),
      suspended: resource.field('suspended'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    clouddeploy_custom_target_type(name, block): {
      local resource = blockType.resource('google_clouddeploy_custom_target_type', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        custom_target_type_id: build.template(std.get(block, 'custom_target_type_id', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      annotations: resource.field('annotations'),
      create_time: resource.field('create_time'),
      custom_target_type_id: resource.field('custom_target_type_id'),
      description: resource.field('description'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    clouddeploy_custom_target_type_iam_binding(name, block): {
      local resource = blockType.resource('google_clouddeploy_custom_target_type_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    clouddeploy_custom_target_type_iam_member(name, block): {
      local resource = blockType.resource('google_clouddeploy_custom_target_type_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    clouddeploy_custom_target_type_iam_policy(name, block): {
      local resource = blockType.resource('google_clouddeploy_custom_target_type_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    clouddeploy_delivery_pipeline(name, block): {
      local resource = blockType.resource('google_clouddeploy_delivery_pipeline', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        condition: build.template(std.get(block, 'condition', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        suspended: build.template(std.get(block, 'suspended', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      annotations: resource.field('annotations'),
      condition: resource.field('condition'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      suspended: resource.field('suspended'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    clouddeploy_delivery_pipeline_iam_binding(name, block): {
      local resource = blockType.resource('google_clouddeploy_delivery_pipeline_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    clouddeploy_delivery_pipeline_iam_member(name, block): {
      local resource = blockType.resource('google_clouddeploy_delivery_pipeline_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    clouddeploy_delivery_pipeline_iam_policy(name, block): {
      local resource = blockType.resource('google_clouddeploy_delivery_pipeline_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    clouddeploy_target(name, block): {
      local resource = blockType.resource('google_clouddeploy_target', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        deploy_parameters: build.template(std.get(block, 'deploy_parameters', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        require_approval: build.template(std.get(block, 'require_approval', null)),
        target_id: build.template(std.get(block, 'target_id', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      annotations: resource.field('annotations'),
      create_time: resource.field('create_time'),
      deploy_parameters: resource.field('deploy_parameters'),
      description: resource.field('description'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      require_approval: resource.field('require_approval'),
      target_id: resource.field('target_id'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    clouddeploy_target_iam_binding(name, block): {
      local resource = blockType.resource('google_clouddeploy_target_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    clouddeploy_target_iam_member(name, block): {
      local resource = blockType.resource('google_clouddeploy_target_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    clouddeploy_target_iam_policy(name, block): {
      local resource = blockType.resource('google_clouddeploy_target_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    clouddomains_registration(name, block): {
      local resource = blockType.resource('google_clouddomains_registration', name),
      _: resource._(block, {
        contact_notices: build.template(std.get(block, 'contact_notices', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        domain_name: build.template(block.domain_name),
        domain_notices: build.template(std.get(block, 'domain_notices', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        issues: build.template(std.get(block, 'issues', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        register_failure_reason: build.template(std.get(block, 'register_failure_reason', null)),
        state: build.template(std.get(block, 'state', null)),
        supported_privacy: build.template(std.get(block, 'supported_privacy', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      contact_notices: resource.field('contact_notices'),
      create_time: resource.field('create_time'),
      domain_name: resource.field('domain_name'),
      domain_notices: resource.field('domain_notices'),
      effective_labels: resource.field('effective_labels'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      issues: resource.field('issues'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      register_failure_reason: resource.field('register_failure_reason'),
      state: resource.field('state'),
      supported_privacy: resource.field('supported_privacy'),
      terraform_labels: resource.field('terraform_labels'),
    },
    cloudfunctions2_function(name, block): {
      local resource = blockType.resource('google_cloudfunctions2_function', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        environment: build.template(std.get(block, 'environment', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      environment: resource.field('environment'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
      url: resource.field('url'),
    },
    cloudfunctions2_function_iam_binding(name, block): {
      local resource = blockType.resource('google_cloudfunctions2_function_iam_binding', name),
      _: resource._(block, {
        cloud_function: build.template(block.cloud_function),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      cloud_function: resource.field('cloud_function'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    cloudfunctions2_function_iam_member(name, block): {
      local resource = blockType.resource('google_cloudfunctions2_function_iam_member', name),
      _: resource._(block, {
        cloud_function: build.template(block.cloud_function),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      cloud_function: resource.field('cloud_function'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    cloudfunctions2_function_iam_policy(name, block): {
      local resource = blockType.resource('google_cloudfunctions2_function_iam_policy', name),
      _: resource._(block, {
        cloud_function: build.template(block.cloud_function),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      cloud_function: resource.field('cloud_function'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    cloudfunctions_function(name, block): {
      local resource = blockType.resource('google_cloudfunctions_function', name),
      _: resource._(block, {
        available_memory_mb: build.template(std.get(block, 'available_memory_mb', null)),
        build_environment_variables: build.template(std.get(block, 'build_environment_variables', null)),
        build_service_account: build.template(std.get(block, 'build_service_account', null)),
        build_worker_pool: build.template(std.get(block, 'build_worker_pool', null)),
        description: build.template(std.get(block, 'description', null)),
        docker_registry: build.template(std.get(block, 'docker_registry', null)),
        docker_repository: build.template(std.get(block, 'docker_repository', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        entry_point: build.template(std.get(block, 'entry_point', null)),
        environment_variables: build.template(std.get(block, 'environment_variables', null)),
        https_trigger_security_level: build.template(std.get(block, 'https_trigger_security_level', null)),
        https_trigger_url: build.template(std.get(block, 'https_trigger_url', null)),
        id: build.template(std.get(block, 'id', null)),
        ingress_settings: build.template(std.get(block, 'ingress_settings', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        labels: build.template(std.get(block, 'labels', null)),
        max_instances: build.template(std.get(block, 'max_instances', null)),
        min_instances: build.template(std.get(block, 'min_instances', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        runtime: build.template(block.runtime),
        service_account_email: build.template(std.get(block, 'service_account_email', null)),
        source_archive_bucket: build.template(std.get(block, 'source_archive_bucket', null)),
        source_archive_object: build.template(std.get(block, 'source_archive_object', null)),
        status: build.template(std.get(block, 'status', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
        trigger_http: build.template(std.get(block, 'trigger_http', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
        vpc_connector: build.template(std.get(block, 'vpc_connector', null)),
        vpc_connector_egress_settings: build.template(std.get(block, 'vpc_connector_egress_settings', null)),
      }),
      available_memory_mb: resource.field('available_memory_mb'),
      build_environment_variables: resource.field('build_environment_variables'),
      build_service_account: resource.field('build_service_account'),
      build_worker_pool: resource.field('build_worker_pool'),
      description: resource.field('description'),
      docker_registry: resource.field('docker_registry'),
      docker_repository: resource.field('docker_repository'),
      effective_labels: resource.field('effective_labels'),
      entry_point: resource.field('entry_point'),
      environment_variables: resource.field('environment_variables'),
      https_trigger_security_level: resource.field('https_trigger_security_level'),
      https_trigger_url: resource.field('https_trigger_url'),
      id: resource.field('id'),
      ingress_settings: resource.field('ingress_settings'),
      kms_key_name: resource.field('kms_key_name'),
      labels: resource.field('labels'),
      max_instances: resource.field('max_instances'),
      min_instances: resource.field('min_instances'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      runtime: resource.field('runtime'),
      service_account_email: resource.field('service_account_email'),
      source_archive_bucket: resource.field('source_archive_bucket'),
      source_archive_object: resource.field('source_archive_object'),
      status: resource.field('status'),
      terraform_labels: resource.field('terraform_labels'),
      timeout: resource.field('timeout'),
      trigger_http: resource.field('trigger_http'),
      version_id: resource.field('version_id'),
      vpc_connector: resource.field('vpc_connector'),
      vpc_connector_egress_settings: resource.field('vpc_connector_egress_settings'),
    },
    cloudfunctions_function_iam_binding(name, block): {
      local resource = blockType.resource('google_cloudfunctions_function_iam_binding', name),
      _: resource._(block, {
        cloud_function: build.template(block.cloud_function),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      cloud_function: resource.field('cloud_function'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    cloudfunctions_function_iam_member(name, block): {
      local resource = blockType.resource('google_cloudfunctions_function_iam_member', name),
      _: resource._(block, {
        cloud_function: build.template(block.cloud_function),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      cloud_function: resource.field('cloud_function'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    cloudfunctions_function_iam_policy(name, block): {
      local resource = blockType.resource('google_cloudfunctions_function_iam_policy', name),
      _: resource._(block, {
        cloud_function: build.template(block.cloud_function),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      cloud_function: resource.field('cloud_function'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    composer_environment(name, block): {
      local resource = blockType.resource('google_composer_environment', name),
      _: resource._(block, {
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
    },
    compute_address(name, block): {
      local resource = blockType.resource('google_compute_address', name),
      _: resource._(block, {
        address: build.template(std.get(block, 'address', null)),
        address_type: build.template(std.get(block, 'address_type', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_version: build.template(std.get(block, 'ip_version', null)),
        ipv6_endpoint_type: build.template(std.get(block, 'ipv6_endpoint_type', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        network_tier: build.template(std.get(block, 'network_tier', null)),
        prefix_length: build.template(std.get(block, 'prefix_length', null)),
        project: build.template(std.get(block, 'project', null)),
        purpose: build.template(std.get(block, 'purpose', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        users: build.template(std.get(block, 'users', null)),
      }),
      address: resource.field('address'),
      address_type: resource.field('address_type'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      ip_version: resource.field('ip_version'),
      ipv6_endpoint_type: resource.field('ipv6_endpoint_type'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      network: resource.field('network'),
      network_tier: resource.field('network_tier'),
      prefix_length: resource.field('prefix_length'),
      project: resource.field('project'),
      purpose: resource.field('purpose'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      subnetwork: resource.field('subnetwork'),
      terraform_labels: resource.field('terraform_labels'),
      users: resource.field('users'),
    },
    compute_attached_disk(name, block): {
      local resource = blockType.resource('google_compute_attached_disk', name),
      _: resource._(block, {
        device_name: build.template(std.get(block, 'device_name', null)),
        disk: build.template(block.disk),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        interface: build.template(std.get(block, 'interface', null)),
        mode: build.template(std.get(block, 'mode', null)),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      device_name: resource.field('device_name'),
      disk: resource.field('disk'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      interface: resource.field('interface'),
      mode: resource.field('mode'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_autoscaler(name, block): {
      local resource = blockType.resource('google_compute_autoscaler', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        target: build.template(block.target),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      target: resource.field('target'),
      zone: resource.field('zone'),
    },
    compute_backend_bucket(name, block): {
      local resource = blockType.resource('google_compute_backend_bucket', name),
      _: resource._(block, {
        bucket_name: build.template(block.bucket_name),
        compression_mode: build.template(std.get(block, 'compression_mode', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        custom_response_headers: build.template(std.get(block, 'custom_response_headers', null)),
        description: build.template(std.get(block, 'description', null)),
        edge_security_policy: build.template(std.get(block, 'edge_security_policy', null)),
        enable_cdn: build.template(std.get(block, 'enable_cdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      bucket_name: resource.field('bucket_name'),
      compression_mode: resource.field('compression_mode'),
      creation_timestamp: resource.field('creation_timestamp'),
      custom_response_headers: resource.field('custom_response_headers'),
      description: resource.field('description'),
      edge_security_policy: resource.field('edge_security_policy'),
      enable_cdn: resource.field('enable_cdn'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
    },
    compute_backend_bucket_signed_url_key(name, block): {
      local resource = blockType.resource('google_compute_backend_bucket_signed_url_key', name),
      _: resource._(block, {
        backend_bucket: build.template(block.backend_bucket),
        id: build.template(std.get(block, 'id', null)),
        key_value: build.template(block.key_value),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
      }),
      backend_bucket: resource.field('backend_bucket'),
      id: resource.field('id'),
      key_value: resource.field('key_value'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    compute_backend_service(name, block): {
      local resource = blockType.resource('google_compute_backend_service', name),
      _: resource._(block, {
        affinity_cookie_ttl_sec: build.template(std.get(block, 'affinity_cookie_ttl_sec', null)),
        compression_mode: build.template(std.get(block, 'compression_mode', null)),
        connection_draining_timeout_sec: build.template(std.get(block, 'connection_draining_timeout_sec', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        custom_request_headers: build.template(std.get(block, 'custom_request_headers', null)),
        custom_response_headers: build.template(std.get(block, 'custom_response_headers', null)),
        description: build.template(std.get(block, 'description', null)),
        edge_security_policy: build.template(std.get(block, 'edge_security_policy', null)),
        enable_cdn: build.template(std.get(block, 'enable_cdn', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        generated_id: build.template(std.get(block, 'generated_id', null)),
        health_checks: build.template(std.get(block, 'health_checks', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_selection_policy: build.template(std.get(block, 'ip_address_selection_policy', null)),
        load_balancing_scheme: build.template(std.get(block, 'load_balancing_scheme', null)),
        locality_lb_policy: build.template(std.get(block, 'locality_lb_policy', null)),
        name: build.template(block.name),
        port_name: build.template(std.get(block, 'port_name', null)),
        project: build.template(std.get(block, 'project', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        security_policy: build.template(std.get(block, 'security_policy', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        service_lb_policy: build.template(std.get(block, 'service_lb_policy', null)),
        session_affinity: build.template(std.get(block, 'session_affinity', null)),
        timeout_sec: build.template(std.get(block, 'timeout_sec', null)),
      }),
      affinity_cookie_ttl_sec: resource.field('affinity_cookie_ttl_sec'),
      compression_mode: resource.field('compression_mode'),
      connection_draining_timeout_sec: resource.field('connection_draining_timeout_sec'),
      creation_timestamp: resource.field('creation_timestamp'),
      custom_request_headers: resource.field('custom_request_headers'),
      custom_response_headers: resource.field('custom_response_headers'),
      description: resource.field('description'),
      edge_security_policy: resource.field('edge_security_policy'),
      enable_cdn: resource.field('enable_cdn'),
      fingerprint: resource.field('fingerprint'),
      generated_id: resource.field('generated_id'),
      health_checks: resource.field('health_checks'),
      id: resource.field('id'),
      ip_address_selection_policy: resource.field('ip_address_selection_policy'),
      load_balancing_scheme: resource.field('load_balancing_scheme'),
      locality_lb_policy: resource.field('locality_lb_policy'),
      name: resource.field('name'),
      port_name: resource.field('port_name'),
      project: resource.field('project'),
      protocol: resource.field('protocol'),
      security_policy: resource.field('security_policy'),
      self_link: resource.field('self_link'),
      service_lb_policy: resource.field('service_lb_policy'),
      session_affinity: resource.field('session_affinity'),
      timeout_sec: resource.field('timeout_sec'),
    },
    compute_backend_service_signed_url_key(name, block): {
      local resource = blockType.resource('google_compute_backend_service_signed_url_key', name),
      _: resource._(block, {
        backend_service: build.template(block.backend_service),
        id: build.template(std.get(block, 'id', null)),
        key_value: build.template(block.key_value),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
      }),
      backend_service: resource.field('backend_service'),
      id: resource.field('id'),
      key_value: resource.field('key_value'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    compute_disk(name, block): {
      local resource = blockType.resource('google_compute_disk', name),
      _: resource._(block, {
        access_mode: build.template(std.get(block, 'access_mode', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        disk_id: build.template(std.get(block, 'disk_id', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_confidential_compute: build.template(std.get(block, 'enable_confidential_compute', null)),
        id: build.template(std.get(block, 'id', null)),
        image: build.template(std.get(block, 'image', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        last_attach_timestamp: build.template(std.get(block, 'last_attach_timestamp', null)),
        last_detach_timestamp: build.template(std.get(block, 'last_detach_timestamp', null)),
        licenses: build.template(std.get(block, 'licenses', null)),
        name: build.template(block.name),
        physical_block_size_bytes: build.template(std.get(block, 'physical_block_size_bytes', null)),
        project: build.template(std.get(block, 'project', null)),
        provisioned_iops: build.template(std.get(block, 'provisioned_iops', null)),
        provisioned_throughput: build.template(std.get(block, 'provisioned_throughput', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        size: build.template(std.get(block, 'size', null)),
        snapshot: build.template(std.get(block, 'snapshot', null)),
        source_disk: build.template(std.get(block, 'source_disk', null)),
        source_disk_id: build.template(std.get(block, 'source_disk_id', null)),
        source_image_id: build.template(std.get(block, 'source_image_id', null)),
        source_snapshot_id: build.template(std.get(block, 'source_snapshot_id', null)),
        storage_pool: build.template(std.get(block, 'storage_pool', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
        users: build.template(std.get(block, 'users', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      access_mode: resource.field('access_mode'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      disk_id: resource.field('disk_id'),
      effective_labels: resource.field('effective_labels'),
      enable_confidential_compute: resource.field('enable_confidential_compute'),
      id: resource.field('id'),
      image: resource.field('image'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      last_attach_timestamp: resource.field('last_attach_timestamp'),
      last_detach_timestamp: resource.field('last_detach_timestamp'),
      licenses: resource.field('licenses'),
      name: resource.field('name'),
      physical_block_size_bytes: resource.field('physical_block_size_bytes'),
      project: resource.field('project'),
      provisioned_iops: resource.field('provisioned_iops'),
      provisioned_throughput: resource.field('provisioned_throughput'),
      self_link: resource.field('self_link'),
      size: resource.field('size'),
      snapshot: resource.field('snapshot'),
      source_disk: resource.field('source_disk'),
      source_disk_id: resource.field('source_disk_id'),
      source_image_id: resource.field('source_image_id'),
      source_snapshot_id: resource.field('source_snapshot_id'),
      storage_pool: resource.field('storage_pool'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      users: resource.field('users'),
      zone: resource.field('zone'),
    },
    compute_disk_async_replication(name, block): {
      local resource = blockType.resource('google_compute_disk_async_replication', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        primary_disk: build.template(block.primary_disk),
      }),
      id: resource.field('id'),
      primary_disk: resource.field('primary_disk'),
    },
    compute_disk_iam_binding(name, block): {
      local resource = blockType.resource('google_compute_disk_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
      zone: resource.field('zone'),
    },
    compute_disk_iam_member(name, block): {
      local resource = blockType.resource('google_compute_disk_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
      zone: resource.field('zone'),
    },
    compute_disk_iam_policy(name, block): {
      local resource = blockType.resource('google_compute_disk_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_disk_resource_policy_attachment(name, block): {
      local resource = blockType.resource('google_compute_disk_resource_policy_attachment', name),
      _: resource._(block, {
        disk: build.template(block.disk),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      disk: resource.field('disk'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_external_vpn_gateway(name, block): {
      local resource = blockType.resource('google_compute_external_vpn_gateway', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        redundancy_type: build.template(std.get(block, 'redundancy_type', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      redundancy_type: resource.field('redundancy_type'),
      self_link: resource.field('self_link'),
      terraform_labels: resource.field('terraform_labels'),
    },
    compute_firewall(name, block): {
      local resource = blockType.resource('google_compute_firewall', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        destination_ranges: build.template(std.get(block, 'destination_ranges', null)),
        direction: build.template(std.get(block, 'direction', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        enable_logging: build.template(std.get(block, 'enable_logging', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        priority: build.template(std.get(block, 'priority', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        source_ranges: build.template(std.get(block, 'source_ranges', null)),
        source_service_accounts: build.template(std.get(block, 'source_service_accounts', null)),
        source_tags: build.template(std.get(block, 'source_tags', null)),
        target_service_accounts: build.template(std.get(block, 'target_service_accounts', null)),
        target_tags: build.template(std.get(block, 'target_tags', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      destination_ranges: resource.field('destination_ranges'),
      direction: resource.field('direction'),
      disabled: resource.field('disabled'),
      enable_logging: resource.field('enable_logging'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      priority: resource.field('priority'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      source_ranges: resource.field('source_ranges'),
      source_service_accounts: resource.field('source_service_accounts'),
      source_tags: resource.field('source_tags'),
      target_service_accounts: resource.field('target_service_accounts'),
      target_tags: resource.field('target_tags'),
    },
    compute_firewall_policy(name, block): {
      local resource = blockType.resource('google_compute_firewall_policy', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        firewall_policy_id: build.template(std.get(block, 'firewall_policy_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        rule_tuple_count: build.template(std.get(block, 'rule_tuple_count', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        self_link_with_id: build.template(std.get(block, 'self_link_with_id', null)),
        short_name: build.template(block.short_name),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      fingerprint: resource.field('fingerprint'),
      firewall_policy_id: resource.field('firewall_policy_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      rule_tuple_count: resource.field('rule_tuple_count'),
      self_link: resource.field('self_link'),
      self_link_with_id: resource.field('self_link_with_id'),
      short_name: resource.field('short_name'),
    },
    compute_firewall_policy_association(name, block): {
      local resource = blockType.resource('google_compute_firewall_policy_association', name),
      _: resource._(block, {
        attachment_target: build.template(block.attachment_target),
        firewall_policy: build.template(block.firewall_policy),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        short_name: build.template(std.get(block, 'short_name', null)),
      }),
      attachment_target: resource.field('attachment_target'),
      firewall_policy: resource.field('firewall_policy'),
      id: resource.field('id'),
      name: resource.field('name'),
      short_name: resource.field('short_name'),
    },
    compute_firewall_policy_rule(name, block): {
      local resource = blockType.resource('google_compute_firewall_policy_rule', name),
      _: resource._(block, {
        action: build.template(block.action),
        description: build.template(std.get(block, 'description', null)),
        direction: build.template(block.direction),
        disabled: build.template(std.get(block, 'disabled', null)),
        enable_logging: build.template(std.get(block, 'enable_logging', null)),
        firewall_policy: build.template(block.firewall_policy),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        priority: build.template(block.priority),
        rule_tuple_count: build.template(std.get(block, 'rule_tuple_count', null)),
        security_profile_group: build.template(std.get(block, 'security_profile_group', null)),
        target_resources: build.template(std.get(block, 'target_resources', null)),
        target_service_accounts: build.template(std.get(block, 'target_service_accounts', null)),
        tls_inspect: build.template(std.get(block, 'tls_inspect', null)),
      }),
      action: resource.field('action'),
      description: resource.field('description'),
      direction: resource.field('direction'),
      disabled: resource.field('disabled'),
      enable_logging: resource.field('enable_logging'),
      firewall_policy: resource.field('firewall_policy'),
      id: resource.field('id'),
      kind: resource.field('kind'),
      priority: resource.field('priority'),
      rule_tuple_count: resource.field('rule_tuple_count'),
      security_profile_group: resource.field('security_profile_group'),
      target_resources: resource.field('target_resources'),
      target_service_accounts: resource.field('target_service_accounts'),
      tls_inspect: resource.field('tls_inspect'),
    },
    compute_forwarding_rule(name, block): {
      local resource = blockType.resource('google_compute_forwarding_rule', name),
      _: resource._(block, {
        all_ports: build.template(std.get(block, 'all_ports', null)),
        allow_global_access: build.template(std.get(block, 'allow_global_access', null)),
        allow_psc_global_access: build.template(std.get(block, 'allow_psc_global_access', null)),
        backend_service: build.template(std.get(block, 'backend_service', null)),
        base_forwarding_rule: build.template(std.get(block, 'base_forwarding_rule', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        forwarding_rule_id: build.template(std.get(block, 'forwarding_rule_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        ip_protocol: build.template(std.get(block, 'ip_protocol', null)),
        ip_version: build.template(std.get(block, 'ip_version', null)),
        is_mirroring_collector: build.template(std.get(block, 'is_mirroring_collector', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        load_balancing_scheme: build.template(std.get(block, 'load_balancing_scheme', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        network_tier: build.template(std.get(block, 'network_tier', null)),
        no_automate_dns_zone: build.template(std.get(block, 'no_automate_dns_zone', null)),
        port_range: build.template(std.get(block, 'port_range', null)),
        ports: build.template(std.get(block, 'ports', null)),
        project: build.template(std.get(block, 'project', null)),
        psc_connection_id: build.template(std.get(block, 'psc_connection_id', null)),
        psc_connection_status: build.template(std.get(block, 'psc_connection_status', null)),
        recreate_closed_psc: build.template(std.get(block, 'recreate_closed_psc', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        service_label: build.template(std.get(block, 'service_label', null)),
        service_name: build.template(std.get(block, 'service_name', null)),
        source_ip_ranges: build.template(std.get(block, 'source_ip_ranges', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        target: build.template(std.get(block, 'target', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      all_ports: resource.field('all_ports'),
      allow_global_access: resource.field('allow_global_access'),
      allow_psc_global_access: resource.field('allow_psc_global_access'),
      backend_service: resource.field('backend_service'),
      base_forwarding_rule: resource.field('base_forwarding_rule'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      forwarding_rule_id: resource.field('forwarding_rule_id'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      ip_protocol: resource.field('ip_protocol'),
      ip_version: resource.field('ip_version'),
      is_mirroring_collector: resource.field('is_mirroring_collector'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      load_balancing_scheme: resource.field('load_balancing_scheme'),
      name: resource.field('name'),
      network: resource.field('network'),
      network_tier: resource.field('network_tier'),
      no_automate_dns_zone: resource.field('no_automate_dns_zone'),
      port_range: resource.field('port_range'),
      ports: resource.field('ports'),
      project: resource.field('project'),
      psc_connection_id: resource.field('psc_connection_id'),
      psc_connection_status: resource.field('psc_connection_status'),
      recreate_closed_psc: resource.field('recreate_closed_psc'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      service_label: resource.field('service_label'),
      service_name: resource.field('service_name'),
      source_ip_ranges: resource.field('source_ip_ranges'),
      subnetwork: resource.field('subnetwork'),
      target: resource.field('target'),
      terraform_labels: resource.field('terraform_labels'),
    },
    compute_global_address(name, block): {
      local resource = blockType.resource('google_compute_global_address', name),
      _: resource._(block, {
        address: build.template(std.get(block, 'address', null)),
        address_type: build.template(std.get(block, 'address_type', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_version: build.template(std.get(block, 'ip_version', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        prefix_length: build.template(std.get(block, 'prefix_length', null)),
        project: build.template(std.get(block, 'project', null)),
        purpose: build.template(std.get(block, 'purpose', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      address: resource.field('address'),
      address_type: resource.field('address_type'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      ip_version: resource.field('ip_version'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      network: resource.field('network'),
      prefix_length: resource.field('prefix_length'),
      project: resource.field('project'),
      purpose: resource.field('purpose'),
      self_link: resource.field('self_link'),
      terraform_labels: resource.field('terraform_labels'),
    },
    compute_global_forwarding_rule(name, block): {
      local resource = blockType.resource('google_compute_global_forwarding_rule', name),
      _: resource._(block, {
        base_forwarding_rule: build.template(std.get(block, 'base_forwarding_rule', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        ip_protocol: build.template(std.get(block, 'ip_protocol', null)),
        ip_version: build.template(std.get(block, 'ip_version', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        load_balancing_scheme: build.template(std.get(block, 'load_balancing_scheme', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        no_automate_dns_zone: build.template(std.get(block, 'no_automate_dns_zone', null)),
        port_range: build.template(std.get(block, 'port_range', null)),
        project: build.template(std.get(block, 'project', null)),
        psc_connection_id: build.template(std.get(block, 'psc_connection_id', null)),
        psc_connection_status: build.template(std.get(block, 'psc_connection_status', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        source_ip_ranges: build.template(std.get(block, 'source_ip_ranges', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        target: build.template(block.target),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      base_forwarding_rule: resource.field('base_forwarding_rule'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      ip_protocol: resource.field('ip_protocol'),
      ip_version: resource.field('ip_version'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      load_balancing_scheme: resource.field('load_balancing_scheme'),
      name: resource.field('name'),
      network: resource.field('network'),
      no_automate_dns_zone: resource.field('no_automate_dns_zone'),
      port_range: resource.field('port_range'),
      project: resource.field('project'),
      psc_connection_id: resource.field('psc_connection_id'),
      psc_connection_status: resource.field('psc_connection_status'),
      self_link: resource.field('self_link'),
      source_ip_ranges: resource.field('source_ip_ranges'),
      subnetwork: resource.field('subnetwork'),
      target: resource.field('target'),
      terraform_labels: resource.field('terraform_labels'),
    },
    compute_global_network_endpoint(name, block): {
      local resource = blockType.resource('google_compute_global_network_endpoint', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        global_network_endpoint_group: build.template(block.global_network_endpoint_group),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        port: build.template(block.port),
        project: build.template(std.get(block, 'project', null)),
      }),
      fqdn: resource.field('fqdn'),
      global_network_endpoint_group: resource.field('global_network_endpoint_group'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      port: resource.field('port'),
      project: resource.field('project'),
    },
    compute_global_network_endpoint_group(name, block): {
      local resource = blockType.resource('google_compute_global_network_endpoint_group', name),
      _: resource._(block, {
        default_port: build.template(std.get(block, 'default_port', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_endpoint_type: build.template(block.network_endpoint_type),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      default_port: resource.field('default_port'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      network_endpoint_type: resource.field('network_endpoint_type'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
    },
    compute_ha_vpn_gateway(name, block): {
      local resource = blockType.resource('google_compute_ha_vpn_gateway', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        gateway_ip_version: build.template(std.get(block, 'gateway_ip_version', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        stack_type: build.template(std.get(block, 'stack_type', null)),
      }),
      description: resource.field('description'),
      gateway_ip_version: resource.field('gateway_ip_version'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      stack_type: resource.field('stack_type'),
    },
    compute_health_check(name, block): {
      local resource = blockType.resource('google_compute_health_check', name),
      _: resource._(block, {
        check_interval_sec: build.template(std.get(block, 'check_interval_sec', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        healthy_threshold: build.template(std.get(block, 'healthy_threshold', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        source_regions: build.template(std.get(block, 'source_regions', null)),
        timeout_sec: build.template(std.get(block, 'timeout_sec', null)),
        type: build.template(std.get(block, 'type', null)),
        unhealthy_threshold: build.template(std.get(block, 'unhealthy_threshold', null)),
      }),
      check_interval_sec: resource.field('check_interval_sec'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      healthy_threshold: resource.field('healthy_threshold'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      source_regions: resource.field('source_regions'),
      timeout_sec: resource.field('timeout_sec'),
      type: resource.field('type'),
      unhealthy_threshold: resource.field('unhealthy_threshold'),
    },
    compute_http_health_check(name, block): {
      local resource = blockType.resource('google_compute_http_health_check', name),
      _: resource._(block, {
        check_interval_sec: build.template(std.get(block, 'check_interval_sec', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        healthy_threshold: build.template(std.get(block, 'healthy_threshold', null)),
        host: build.template(std.get(block, 'host', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        port: build.template(std.get(block, 'port', null)),
        project: build.template(std.get(block, 'project', null)),
        request_path: build.template(std.get(block, 'request_path', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        timeout_sec: build.template(std.get(block, 'timeout_sec', null)),
        unhealthy_threshold: build.template(std.get(block, 'unhealthy_threshold', null)),
      }),
      check_interval_sec: resource.field('check_interval_sec'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      healthy_threshold: resource.field('healthy_threshold'),
      host: resource.field('host'),
      id: resource.field('id'),
      name: resource.field('name'),
      port: resource.field('port'),
      project: resource.field('project'),
      request_path: resource.field('request_path'),
      self_link: resource.field('self_link'),
      timeout_sec: resource.field('timeout_sec'),
      unhealthy_threshold: resource.field('unhealthy_threshold'),
    },
    compute_https_health_check(name, block): {
      local resource = blockType.resource('google_compute_https_health_check', name),
      _: resource._(block, {
        check_interval_sec: build.template(std.get(block, 'check_interval_sec', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        healthy_threshold: build.template(std.get(block, 'healthy_threshold', null)),
        host: build.template(std.get(block, 'host', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        port: build.template(std.get(block, 'port', null)),
        project: build.template(std.get(block, 'project', null)),
        request_path: build.template(std.get(block, 'request_path', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        timeout_sec: build.template(std.get(block, 'timeout_sec', null)),
        unhealthy_threshold: build.template(std.get(block, 'unhealthy_threshold', null)),
      }),
      check_interval_sec: resource.field('check_interval_sec'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      healthy_threshold: resource.field('healthy_threshold'),
      host: resource.field('host'),
      id: resource.field('id'),
      name: resource.field('name'),
      port: resource.field('port'),
      project: resource.field('project'),
      request_path: resource.field('request_path'),
      self_link: resource.field('self_link'),
      timeout_sec: resource.field('timeout_sec'),
      unhealthy_threshold: resource.field('unhealthy_threshold'),
    },
    compute_image(name, block): {
      local resource = blockType.resource('google_compute_image', name),
      _: resource._(block, {
        archive_size_bytes: build.template(std.get(block, 'archive_size_bytes', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        disk_size_gb: build.template(std.get(block, 'disk_size_gb', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        family: build.template(std.get(block, 'family', null)),
        id: build.template(std.get(block, 'id', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        licenses: build.template(std.get(block, 'licenses', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        source_disk: build.template(std.get(block, 'source_disk', null)),
        source_image: build.template(std.get(block, 'source_image', null)),
        source_snapshot: build.template(std.get(block, 'source_snapshot', null)),
        storage_locations: build.template(std.get(block, 'storage_locations', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      archive_size_bytes: resource.field('archive_size_bytes'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      disk_size_gb: resource.field('disk_size_gb'),
      effective_labels: resource.field('effective_labels'),
      family: resource.field('family'),
      id: resource.field('id'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      licenses: resource.field('licenses'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      source_disk: resource.field('source_disk'),
      source_image: resource.field('source_image'),
      source_snapshot: resource.field('source_snapshot'),
      storage_locations: resource.field('storage_locations'),
      terraform_labels: resource.field('terraform_labels'),
    },
    compute_image_iam_binding(name, block): {
      local resource = blockType.resource('google_compute_image_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        image: build.template(block.image),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      image: resource.field('image'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    compute_image_iam_member(name, block): {
      local resource = blockType.resource('google_compute_image_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        image: build.template(block.image),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      image: resource.field('image'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    compute_image_iam_policy(name, block): {
      local resource = blockType.resource('google_compute_image_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        image: build.template(block.image),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      image: resource.field('image'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    compute_instance(name, block): {
      local resource = blockType.resource('google_compute_instance', name),
      _: resource._(block, {
        allow_stopping_for_update: build.template(std.get(block, 'allow_stopping_for_update', null)),
        can_ip_forward: build.template(std.get(block, 'can_ip_forward', null)),
        cpu_platform: build.template(std.get(block, 'cpu_platform', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        current_status: build.template(std.get(block, 'current_status', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        description: build.template(std.get(block, 'description', null)),
        desired_status: build.template(std.get(block, 'desired_status', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_display: build.template(std.get(block, 'enable_display', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(std.get(block, 'instance_id', null)),
        key_revocation_action_type: build.template(std.get(block, 'key_revocation_action_type', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        machine_type: build.template(block.machine_type),
        metadata: build.template(std.get(block, 'metadata', null)),
        metadata_fingerprint: build.template(std.get(block, 'metadata_fingerprint', null)),
        metadata_startup_script: build.template(std.get(block, 'metadata_startup_script', null)),
        min_cpu_platform: build.template(std.get(block, 'min_cpu_platform', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        resource_policies: build.template(std.get(block, 'resource_policies', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_fingerprint: build.template(std.get(block, 'tags_fingerprint', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      allow_stopping_for_update: resource.field('allow_stopping_for_update'),
      can_ip_forward: resource.field('can_ip_forward'),
      cpu_platform: resource.field('cpu_platform'),
      creation_timestamp: resource.field('creation_timestamp'),
      current_status: resource.field('current_status'),
      deletion_protection: resource.field('deletion_protection'),
      description: resource.field('description'),
      desired_status: resource.field('desired_status'),
      effective_labels: resource.field('effective_labels'),
      enable_display: resource.field('enable_display'),
      hostname: resource.field('hostname'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      key_revocation_action_type: resource.field('key_revocation_action_type'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      machine_type: resource.field('machine_type'),
      metadata: resource.field('metadata'),
      metadata_fingerprint: resource.field('metadata_fingerprint'),
      metadata_startup_script: resource.field('metadata_startup_script'),
      min_cpu_platform: resource.field('min_cpu_platform'),
      name: resource.field('name'),
      project: resource.field('project'),
      resource_policies: resource.field('resource_policies'),
      self_link: resource.field('self_link'),
      tags: resource.field('tags'),
      tags_fingerprint: resource.field('tags_fingerprint'),
      terraform_labels: resource.field('terraform_labels'),
      zone: resource.field('zone'),
    },
    compute_instance_from_template(name, block): {
      local resource = blockType.resource('google_compute_instance_from_template', name),
      _: resource._(block, {
        allow_stopping_for_update: build.template(std.get(block, 'allow_stopping_for_update', null)),
        can_ip_forward: build.template(std.get(block, 'can_ip_forward', null)),
        cpu_platform: build.template(std.get(block, 'cpu_platform', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        current_status: build.template(std.get(block, 'current_status', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        description: build.template(std.get(block, 'description', null)),
        desired_status: build.template(std.get(block, 'desired_status', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_display: build.template(std.get(block, 'enable_display', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(std.get(block, 'instance_id', null)),
        key_revocation_action_type: build.template(std.get(block, 'key_revocation_action_type', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        machine_type: build.template(std.get(block, 'machine_type', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        metadata_fingerprint: build.template(std.get(block, 'metadata_fingerprint', null)),
        metadata_startup_script: build.template(std.get(block, 'metadata_startup_script', null)),
        min_cpu_platform: build.template(std.get(block, 'min_cpu_platform', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        resource_policies: build.template(std.get(block, 'resource_policies', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        source_instance_template: build.template(block.source_instance_template),
        tags: build.template(std.get(block, 'tags', null)),
        tags_fingerprint: build.template(std.get(block, 'tags_fingerprint', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      allow_stopping_for_update: resource.field('allow_stopping_for_update'),
      can_ip_forward: resource.field('can_ip_forward'),
      cpu_platform: resource.field('cpu_platform'),
      creation_timestamp: resource.field('creation_timestamp'),
      current_status: resource.field('current_status'),
      deletion_protection: resource.field('deletion_protection'),
      description: resource.field('description'),
      desired_status: resource.field('desired_status'),
      effective_labels: resource.field('effective_labels'),
      enable_display: resource.field('enable_display'),
      hostname: resource.field('hostname'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      key_revocation_action_type: resource.field('key_revocation_action_type'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      machine_type: resource.field('machine_type'),
      metadata: resource.field('metadata'),
      metadata_fingerprint: resource.field('metadata_fingerprint'),
      metadata_startup_script: resource.field('metadata_startup_script'),
      min_cpu_platform: resource.field('min_cpu_platform'),
      name: resource.field('name'),
      project: resource.field('project'),
      resource_policies: resource.field('resource_policies'),
      self_link: resource.field('self_link'),
      source_instance_template: resource.field('source_instance_template'),
      tags: resource.field('tags'),
      tags_fingerprint: resource.field('tags_fingerprint'),
      terraform_labels: resource.field('terraform_labels'),
      zone: resource.field('zone'),
    },
    compute_instance_group(name, block): {
      local resource = blockType.resource('google_compute_instance_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instances: build.template(std.get(block, 'instances', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        size: build.template(std.get(block, 'size', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      instances: resource.field('instances'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      size: resource.field('size'),
      zone: resource.field('zone'),
    },
    compute_instance_group_manager(name, block): {
      local resource = blockType.resource('google_compute_instance_group_manager', name),
      _: resource._(block, {
        base_instance_name: build.template(block.base_instance_name),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_group: build.template(std.get(block, 'instance_group', null)),
        list_managed_instances_results: build.template(std.get(block, 'list_managed_instances_results', null)),
        name: build.template(block.name),
        operation: build.template(std.get(block, 'operation', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        status: build.template(std.get(block, 'status', null)),
        target_pools: build.template(std.get(block, 'target_pools', null)),
        target_size: build.template(std.get(block, 'target_size', null)),
        wait_for_instances: build.template(std.get(block, 'wait_for_instances', null)),
        wait_for_instances_status: build.template(std.get(block, 'wait_for_instances_status', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      base_instance_name: resource.field('base_instance_name'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      instance_group: resource.field('instance_group'),
      list_managed_instances_results: resource.field('list_managed_instances_results'),
      name: resource.field('name'),
      operation: resource.field('operation'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      status: resource.field('status'),
      target_pools: resource.field('target_pools'),
      target_size: resource.field('target_size'),
      wait_for_instances: resource.field('wait_for_instances'),
      wait_for_instances_status: resource.field('wait_for_instances_status'),
      zone: resource.field('zone'),
    },
    compute_instance_group_membership(name, block): {
      local resource = blockType.resource('google_compute_instance_group_membership', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        instance_group: build.template(block.instance_group),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      id: resource.field('id'),
      instance: resource.field('instance'),
      instance_group: resource.field('instance_group'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_instance_group_named_port(name, block): {
      local resource = blockType.resource('google_compute_instance_group_named_port', name),
      _: resource._(block, {
        group: build.template(block.group),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        port: build.template(block.port),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      group: resource.field('group'),
      id: resource.field('id'),
      name: resource.field('name'),
      port: resource.field('port'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_instance_iam_binding(name, block): {
      local resource = blockType.resource('google_compute_instance_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      zone: resource.field('zone'),
    },
    compute_instance_iam_member(name, block): {
      local resource = blockType.resource('google_compute_instance_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      zone: resource.field('zone'),
    },
    compute_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_compute_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_instance_settings(name, block): {
      local resource = blockType.resource('google_compute_instance_settings', name),
      _: resource._(block, {
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(block.zone),
      }),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_instance_template(name, block): {
      local resource = blockType.resource('google_compute_instance_template', name),
      _: resource._(block, {
        can_ip_forward: build.template(std.get(block, 'can_ip_forward', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_description: build.template(std.get(block, 'instance_description', null)),
        key_revocation_action_type: build.template(std.get(block, 'key_revocation_action_type', null)),
        labels: build.template(std.get(block, 'labels', null)),
        machine_type: build.template(block.machine_type),
        metadata: build.template(std.get(block, 'metadata', null)),
        metadata_fingerprint: build.template(std.get(block, 'metadata_fingerprint', null)),
        metadata_startup_script: build.template(std.get(block, 'metadata_startup_script', null)),
        min_cpu_platform: build.template(std.get(block, 'min_cpu_platform', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        resource_manager_tags: build.template(std.get(block, 'resource_manager_tags', null)),
        resource_policies: build.template(std.get(block, 'resource_policies', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        self_link_unique: build.template(std.get(block, 'self_link_unique', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_fingerprint: build.template(std.get(block, 'tags_fingerprint', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      can_ip_forward: resource.field('can_ip_forward'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      instance_description: resource.field('instance_description'),
      key_revocation_action_type: resource.field('key_revocation_action_type'),
      labels: resource.field('labels'),
      machine_type: resource.field('machine_type'),
      metadata: resource.field('metadata'),
      metadata_fingerprint: resource.field('metadata_fingerprint'),
      metadata_startup_script: resource.field('metadata_startup_script'),
      min_cpu_platform: resource.field('min_cpu_platform'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      project: resource.field('project'),
      region: resource.field('region'),
      resource_manager_tags: resource.field('resource_manager_tags'),
      resource_policies: resource.field('resource_policies'),
      self_link: resource.field('self_link'),
      self_link_unique: resource.field('self_link_unique'),
      tags: resource.field('tags'),
      tags_fingerprint: resource.field('tags_fingerprint'),
      terraform_labels: resource.field('terraform_labels'),
    },
    compute_interconnect(name, block): {
      local resource = blockType.resource('google_compute_interconnect', name),
      _: resource._(block, {
        admin_enabled: build.template(std.get(block, 'admin_enabled', null)),
        available_features: build.template(std.get(block, 'available_features', null)),
        circuit_infos: build.template(std.get(block, 'circuit_infos', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        customer_name: build.template(std.get(block, 'customer_name', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        expected_outages: build.template(std.get(block, 'expected_outages', null)),
        google_ip_address: build.template(std.get(block, 'google_ip_address', null)),
        google_reference_id: build.template(std.get(block, 'google_reference_id', null)),
        id: build.template(std.get(block, 'id', null)),
        interconnect_attachments: build.template(std.get(block, 'interconnect_attachments', null)),
        interconnect_type: build.template(block.interconnect_type),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        link_type: build.template(block.link_type),
        location: build.template(std.get(block, 'location', null)),
        macsec_enabled: build.template(std.get(block, 'macsec_enabled', null)),
        name: build.template(block.name),
        noc_contact_email: build.template(std.get(block, 'noc_contact_email', null)),
        operational_status: build.template(std.get(block, 'operational_status', null)),
        peer_ip_address: build.template(std.get(block, 'peer_ip_address', null)),
        project: build.template(std.get(block, 'project', null)),
        provisioned_link_count: build.template(std.get(block, 'provisioned_link_count', null)),
        remote_location: build.template(std.get(block, 'remote_location', null)),
        requested_features: build.template(std.get(block, 'requested_features', null)),
        requested_link_count: build.template(block.requested_link_count),
        satisfies_pzs: build.template(std.get(block, 'satisfies_pzs', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      admin_enabled: resource.field('admin_enabled'),
      available_features: resource.field('available_features'),
      circuit_infos: resource.field('circuit_infos'),
      creation_timestamp: resource.field('creation_timestamp'),
      customer_name: resource.field('customer_name'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      expected_outages: resource.field('expected_outages'),
      google_ip_address: resource.field('google_ip_address'),
      google_reference_id: resource.field('google_reference_id'),
      id: resource.field('id'),
      interconnect_attachments: resource.field('interconnect_attachments'),
      interconnect_type: resource.field('interconnect_type'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      link_type: resource.field('link_type'),
      location: resource.field('location'),
      macsec_enabled: resource.field('macsec_enabled'),
      name: resource.field('name'),
      noc_contact_email: resource.field('noc_contact_email'),
      operational_status: resource.field('operational_status'),
      peer_ip_address: resource.field('peer_ip_address'),
      project: resource.field('project'),
      provisioned_link_count: resource.field('provisioned_link_count'),
      remote_location: resource.field('remote_location'),
      requested_features: resource.field('requested_features'),
      requested_link_count: resource.field('requested_link_count'),
      satisfies_pzs: resource.field('satisfies_pzs'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
    },
    compute_interconnect_attachment(name, block): {
      local resource = blockType.resource('google_compute_interconnect_attachment', name),
      _: resource._(block, {
        admin_enabled: build.template(std.get(block, 'admin_enabled', null)),
        bandwidth: build.template(std.get(block, 'bandwidth', null)),
        candidate_subnets: build.template(std.get(block, 'candidate_subnets', null)),
        cloud_router_ip_address: build.template(std.get(block, 'cloud_router_ip_address', null)),
        cloud_router_ipv6_address: build.template(std.get(block, 'cloud_router_ipv6_address', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        customer_router_ip_address: build.template(std.get(block, 'customer_router_ip_address', null)),
        customer_router_ipv6_address: build.template(std.get(block, 'customer_router_ipv6_address', null)),
        description: build.template(std.get(block, 'description', null)),
        edge_availability_domain: build.template(std.get(block, 'edge_availability_domain', null)),
        encryption: build.template(std.get(block, 'encryption', null)),
        google_reference_id: build.template(std.get(block, 'google_reference_id', null)),
        id: build.template(std.get(block, 'id', null)),
        interconnect: build.template(std.get(block, 'interconnect', null)),
        ipsec_internal_addresses: build.template(std.get(block, 'ipsec_internal_addresses', null)),
        mtu: build.template(std.get(block, 'mtu', null)),
        name: build.template(block.name),
        pairing_key: build.template(std.get(block, 'pairing_key', null)),
        partner_asn: build.template(std.get(block, 'partner_asn', null)),
        private_interconnect_info: build.template(std.get(block, 'private_interconnect_info', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        router: build.template(block.router),
        self_link: build.template(std.get(block, 'self_link', null)),
        stack_type: build.template(std.get(block, 'stack_type', null)),
        state: build.template(std.get(block, 'state', null)),
        subnet_length: build.template(std.get(block, 'subnet_length', null)),
        type: build.template(std.get(block, 'type', null)),
        vlan_tag8021q: build.template(std.get(block, 'vlan_tag8021q', null)),
      }),
      admin_enabled: resource.field('admin_enabled'),
      bandwidth: resource.field('bandwidth'),
      candidate_subnets: resource.field('candidate_subnets'),
      cloud_router_ip_address: resource.field('cloud_router_ip_address'),
      cloud_router_ipv6_address: resource.field('cloud_router_ipv6_address'),
      creation_timestamp: resource.field('creation_timestamp'),
      customer_router_ip_address: resource.field('customer_router_ip_address'),
      customer_router_ipv6_address: resource.field('customer_router_ipv6_address'),
      description: resource.field('description'),
      edge_availability_domain: resource.field('edge_availability_domain'),
      encryption: resource.field('encryption'),
      google_reference_id: resource.field('google_reference_id'),
      id: resource.field('id'),
      interconnect: resource.field('interconnect'),
      ipsec_internal_addresses: resource.field('ipsec_internal_addresses'),
      mtu: resource.field('mtu'),
      name: resource.field('name'),
      pairing_key: resource.field('pairing_key'),
      partner_asn: resource.field('partner_asn'),
      private_interconnect_info: resource.field('private_interconnect_info'),
      project: resource.field('project'),
      region: resource.field('region'),
      router: resource.field('router'),
      self_link: resource.field('self_link'),
      stack_type: resource.field('stack_type'),
      state: resource.field('state'),
      subnet_length: resource.field('subnet_length'),
      type: resource.field('type'),
      vlan_tag8021q: resource.field('vlan_tag8021q'),
    },
    compute_managed_ssl_certificate(name, block): {
      local resource = blockType.resource('google_compute_managed_ssl_certificate', name),
      _: resource._(block, {
        certificate_id: build.template(std.get(block, 'certificate_id', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        subject_alternative_names: build.template(std.get(block, 'subject_alternative_names', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      certificate_id: resource.field('certificate_id'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      subject_alternative_names: resource.field('subject_alternative_names'),
      type: resource.field('type'),
    },
    compute_network(name, block): {
      local resource = blockType.resource('google_compute_network', name),
      _: resource._(block, {
        auto_create_subnetworks: build.template(std.get(block, 'auto_create_subnetworks', null)),
        delete_default_routes_on_create: build.template(std.get(block, 'delete_default_routes_on_create', null)),
        description: build.template(std.get(block, 'description', null)),
        enable_ula_internal_ipv6: build.template(std.get(block, 'enable_ula_internal_ipv6', null)),
        gateway_ipv4: build.template(std.get(block, 'gateway_ipv4', null)),
        id: build.template(std.get(block, 'id', null)),
        internal_ipv6_range: build.template(std.get(block, 'internal_ipv6_range', null)),
        mtu: build.template(std.get(block, 'mtu', null)),
        name: build.template(block.name),
        network_firewall_policy_enforcement_order: build.template(std.get(block, 'network_firewall_policy_enforcement_order', null)),
        numeric_id: build.template(std.get(block, 'numeric_id', null)),
        project: build.template(std.get(block, 'project', null)),
        routing_mode: build.template(std.get(block, 'routing_mode', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      auto_create_subnetworks: resource.field('auto_create_subnetworks'),
      delete_default_routes_on_create: resource.field('delete_default_routes_on_create'),
      description: resource.field('description'),
      enable_ula_internal_ipv6: resource.field('enable_ula_internal_ipv6'),
      gateway_ipv4: resource.field('gateway_ipv4'),
      id: resource.field('id'),
      internal_ipv6_range: resource.field('internal_ipv6_range'),
      mtu: resource.field('mtu'),
      name: resource.field('name'),
      network_firewall_policy_enforcement_order: resource.field('network_firewall_policy_enforcement_order'),
      numeric_id: resource.field('numeric_id'),
      project: resource.field('project'),
      routing_mode: resource.field('routing_mode'),
      self_link: resource.field('self_link'),
    },
    compute_network_attachment(name, block): {
      local resource = blockType.resource('google_compute_network_attachment', name),
      _: resource._(block, {
        connection_endpoints: build.template(std.get(block, 'connection_endpoints', null)),
        connection_preference: build.template(block.connection_preference),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        producer_accept_lists: build.template(std.get(block, 'producer_accept_lists', null)),
        producer_reject_lists: build.template(std.get(block, 'producer_reject_lists', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        self_link_with_id: build.template(std.get(block, 'self_link_with_id', null)),
        subnetworks: build.template(block.subnetworks),
      }),
      connection_endpoints: resource.field('connection_endpoints'),
      connection_preference: resource.field('connection_preference'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      kind: resource.field('kind'),
      name: resource.field('name'),
      network: resource.field('network'),
      producer_accept_lists: resource.field('producer_accept_lists'),
      producer_reject_lists: resource.field('producer_reject_lists'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      self_link_with_id: resource.field('self_link_with_id'),
      subnetworks: resource.field('subnetworks'),
    },
    compute_network_endpoint(name, block): {
      local resource = blockType.resource('google_compute_network_endpoint', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(std.get(block, 'instance', null)),
        ip_address: build.template(block.ip_address),
        network_endpoint_group: build.template(block.network_endpoint_group),
        port: build.template(std.get(block, 'port', null)),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      id: resource.field('id'),
      instance: resource.field('instance'),
      ip_address: resource.field('ip_address'),
      network_endpoint_group: resource.field('network_endpoint_group'),
      port: resource.field('port'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_network_endpoint_group(name, block): {
      local resource = blockType.resource('google_compute_network_endpoint_group', name),
      _: resource._(block, {
        default_port: build.template(std.get(block, 'default_port', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        network_endpoint_type: build.template(std.get(block, 'network_endpoint_type', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        size: build.template(std.get(block, 'size', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      default_port: resource.field('default_port'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      network_endpoint_type: resource.field('network_endpoint_type'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      size: resource.field('size'),
      subnetwork: resource.field('subnetwork'),
      zone: resource.field('zone'),
    },
    compute_network_endpoints(name, block): {
      local resource = blockType.resource('google_compute_network_endpoints', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        network_endpoint_group: build.template(block.network_endpoint_group),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      id: resource.field('id'),
      network_endpoint_group: resource.field('network_endpoint_group'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_network_firewall_policy(name, block): {
      local resource = blockType.resource('google_compute_network_firewall_policy', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_firewall_policy_id: build.template(std.get(block, 'network_firewall_policy_id', null)),
        project: build.template(std.get(block, 'project', null)),
        rule_tuple_count: build.template(std.get(block, 'rule_tuple_count', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        self_link_with_id: build.template(std.get(block, 'self_link_with_id', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      name: resource.field('name'),
      network_firewall_policy_id: resource.field('network_firewall_policy_id'),
      project: resource.field('project'),
      rule_tuple_count: resource.field('rule_tuple_count'),
      self_link: resource.field('self_link'),
      self_link_with_id: resource.field('self_link_with_id'),
    },
    compute_network_firewall_policy_association(name, block): {
      local resource = blockType.resource('google_compute_network_firewall_policy_association', name),
      _: resource._(block, {
        attachment_target: build.template(block.attachment_target),
        firewall_policy: build.template(block.firewall_policy),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        short_name: build.template(std.get(block, 'short_name', null)),
      }),
      attachment_target: resource.field('attachment_target'),
      firewall_policy: resource.field('firewall_policy'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      short_name: resource.field('short_name'),
    },
    compute_network_firewall_policy_rule(name, block): {
      local resource = blockType.resource('google_compute_network_firewall_policy_rule', name),
      _: resource._(block, {
        action: build.template(block.action),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        direction: build.template(block.direction),
        disabled: build.template(std.get(block, 'disabled', null)),
        enable_logging: build.template(std.get(block, 'enable_logging', null)),
        firewall_policy: build.template(block.firewall_policy),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        priority: build.template(block.priority),
        project: build.template(std.get(block, 'project', null)),
        rule_name: build.template(std.get(block, 'rule_name', null)),
        rule_tuple_count: build.template(std.get(block, 'rule_tuple_count', null)),
        security_profile_group: build.template(std.get(block, 'security_profile_group', null)),
        target_service_accounts: build.template(std.get(block, 'target_service_accounts', null)),
        tls_inspect: build.template(std.get(block, 'tls_inspect', null)),
      }),
      action: resource.field('action'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      direction: resource.field('direction'),
      disabled: resource.field('disabled'),
      enable_logging: resource.field('enable_logging'),
      firewall_policy: resource.field('firewall_policy'),
      id: resource.field('id'),
      kind: resource.field('kind'),
      priority: resource.field('priority'),
      project: resource.field('project'),
      rule_name: resource.field('rule_name'),
      rule_tuple_count: resource.field('rule_tuple_count'),
      security_profile_group: resource.field('security_profile_group'),
      target_service_accounts: resource.field('target_service_accounts'),
      tls_inspect: resource.field('tls_inspect'),
    },
    compute_network_peering(name, block): {
      local resource = blockType.resource('google_compute_network_peering', name),
      _: resource._(block, {
        export_custom_routes: build.template(std.get(block, 'export_custom_routes', null)),
        export_subnet_routes_with_public_ip: build.template(std.get(block, 'export_subnet_routes_with_public_ip', null)),
        id: build.template(std.get(block, 'id', null)),
        import_custom_routes: build.template(std.get(block, 'import_custom_routes', null)),
        import_subnet_routes_with_public_ip: build.template(std.get(block, 'import_subnet_routes_with_public_ip', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        peer_network: build.template(block.peer_network),
        stack_type: build.template(std.get(block, 'stack_type', null)),
        state: build.template(std.get(block, 'state', null)),
        state_details: build.template(std.get(block, 'state_details', null)),
      }),
      export_custom_routes: resource.field('export_custom_routes'),
      export_subnet_routes_with_public_ip: resource.field('export_subnet_routes_with_public_ip'),
      id: resource.field('id'),
      import_custom_routes: resource.field('import_custom_routes'),
      import_subnet_routes_with_public_ip: resource.field('import_subnet_routes_with_public_ip'),
      name: resource.field('name'),
      network: resource.field('network'),
      peer_network: resource.field('peer_network'),
      stack_type: resource.field('stack_type'),
      state: resource.field('state'),
      state_details: resource.field('state_details'),
    },
    compute_network_peering_routes_config(name, block): {
      local resource = blockType.resource('google_compute_network_peering_routes_config', name),
      _: resource._(block, {
        export_custom_routes: build.template(block.export_custom_routes),
        id: build.template(std.get(block, 'id', null)),
        import_custom_routes: build.template(block.import_custom_routes),
        network: build.template(block.network),
        peering: build.template(block.peering),
        project: build.template(std.get(block, 'project', null)),
      }),
      export_custom_routes: resource.field('export_custom_routes'),
      id: resource.field('id'),
      import_custom_routes: resource.field('import_custom_routes'),
      network: resource.field('network'),
      peering: resource.field('peering'),
      project: resource.field('project'),
    },
    compute_node_group(name, block): {
      local resource = blockType.resource('google_compute_node_group', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        initial_size: build.template(std.get(block, 'initial_size', null)),
        maintenance_policy: build.template(std.get(block, 'maintenance_policy', null)),
        name: build.template(std.get(block, 'name', null)),
        node_template: build.template(block.node_template),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        size: build.template(std.get(block, 'size', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      initial_size: resource.field('initial_size'),
      maintenance_policy: resource.field('maintenance_policy'),
      name: resource.field('name'),
      node_template: resource.field('node_template'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      size: resource.field('size'),
      zone: resource.field('zone'),
    },
    compute_node_template(name, block): {
      local resource = blockType.resource('google_compute_node_template', name),
      _: resource._(block, {
        cpu_overcommit_type: build.template(std.get(block, 'cpu_overcommit_type', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        node_affinity_labels: build.template(std.get(block, 'node_affinity_labels', null)),
        node_type: build.template(std.get(block, 'node_type', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      cpu_overcommit_type: resource.field('cpu_overcommit_type'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      node_affinity_labels: resource.field('node_affinity_labels'),
      node_type: resource.field('node_type'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
    },
    compute_packet_mirroring(name, block): {
      local resource = blockType.resource('google_compute_packet_mirroring', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        priority: build.template(std.get(block, 'priority', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      priority: resource.field('priority'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    compute_per_instance_config(name, block): {
      local resource = blockType.resource('google_compute_per_instance_config', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_group_manager: build.template(block.instance_group_manager),
        minimal_action: build.template(std.get(block, 'minimal_action', null)),
        most_disruptive_allowed_action: build.template(std.get(block, 'most_disruptive_allowed_action', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        remove_instance_on_destroy: build.template(std.get(block, 'remove_instance_on_destroy', null)),
        remove_instance_state_on_destroy: build.template(std.get(block, 'remove_instance_state_on_destroy', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      id: resource.field('id'),
      instance_group_manager: resource.field('instance_group_manager'),
      minimal_action: resource.field('minimal_action'),
      most_disruptive_allowed_action: resource.field('most_disruptive_allowed_action'),
      name: resource.field('name'),
      project: resource.field('project'),
      remove_instance_on_destroy: resource.field('remove_instance_on_destroy'),
      remove_instance_state_on_destroy: resource.field('remove_instance_state_on_destroy'),
      zone: resource.field('zone'),
    },
    compute_project_cloud_armor_tier(name, block): {
      local resource = blockType.resource('google_compute_project_cloud_armor_tier', name),
      _: resource._(block, {
        cloud_armor_tier: build.template(block.cloud_armor_tier),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      cloud_armor_tier: resource.field('cloud_armor_tier'),
      id: resource.field('id'),
      project: resource.field('project'),
    },
    compute_project_default_network_tier(name, block): {
      local resource = blockType.resource('google_compute_project_default_network_tier', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        network_tier: build.template(block.network_tier),
        project: build.template(std.get(block, 'project', null)),
      }),
      id: resource.field('id'),
      network_tier: resource.field('network_tier'),
      project: resource.field('project'),
    },
    compute_project_metadata(name, block): {
      local resource = blockType.resource('google_compute_project_metadata', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(block.metadata),
        project: build.template(std.get(block, 'project', null)),
      }),
      id: resource.field('id'),
      metadata: resource.field('metadata'),
      project: resource.field('project'),
    },
    compute_project_metadata_item(name, block): {
      local resource = blockType.resource('google_compute_project_metadata_item', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        project: build.template(std.get(block, 'project', null)),
        value: build.template(block.value),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      project: resource.field('project'),
      value: resource.field('value'),
    },
    compute_public_advertised_prefix(name, block): {
      local resource = blockType.resource('google_compute_public_advertised_prefix', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        dns_verification_ip: build.template(block.dns_verification_ip),
        id: build.template(std.get(block, 'id', null)),
        ip_cidr_range: build.template(block.ip_cidr_range),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        shared_secret: build.template(std.get(block, 'shared_secret', null)),
      }),
      description: resource.field('description'),
      dns_verification_ip: resource.field('dns_verification_ip'),
      id: resource.field('id'),
      ip_cidr_range: resource.field('ip_cidr_range'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      shared_secret: resource.field('shared_secret'),
    },
    compute_public_delegated_prefix(name, block): {
      local resource = blockType.resource('google_compute_public_delegated_prefix', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_cidr_range: build.template(block.ip_cidr_range),
        is_live_migration: build.template(std.get(block, 'is_live_migration', null)),
        name: build.template(block.name),
        parent_prefix: build.template(block.parent_prefix),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(block.region),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      ip_cidr_range: resource.field('ip_cidr_range'),
      is_live_migration: resource.field('is_live_migration'),
      name: resource.field('name'),
      parent_prefix: resource.field('parent_prefix'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
    },
    compute_region_autoscaler(name, block): {
      local resource = blockType.resource('google_compute_region_autoscaler', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        target: build.template(block.target),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      target: resource.field('target'),
    },
    compute_region_backend_service(name, block): {
      local resource = blockType.resource('google_compute_region_backend_service', name),
      _: resource._(block, {
        affinity_cookie_ttl_sec: build.template(std.get(block, 'affinity_cookie_ttl_sec', null)),
        connection_draining_timeout_sec: build.template(std.get(block, 'connection_draining_timeout_sec', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        enable_cdn: build.template(std.get(block, 'enable_cdn', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        generated_id: build.template(std.get(block, 'generated_id', null)),
        health_checks: build.template(std.get(block, 'health_checks', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_selection_policy: build.template(std.get(block, 'ip_address_selection_policy', null)),
        load_balancing_scheme: build.template(std.get(block, 'load_balancing_scheme', null)),
        locality_lb_policy: build.template(std.get(block, 'locality_lb_policy', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        port_name: build.template(std.get(block, 'port_name', null)),
        project: build.template(std.get(block, 'project', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        session_affinity: build.template(std.get(block, 'session_affinity', null)),
        timeout_sec: build.template(std.get(block, 'timeout_sec', null)),
      }),
      affinity_cookie_ttl_sec: resource.field('affinity_cookie_ttl_sec'),
      connection_draining_timeout_sec: resource.field('connection_draining_timeout_sec'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      enable_cdn: resource.field('enable_cdn'),
      fingerprint: resource.field('fingerprint'),
      generated_id: resource.field('generated_id'),
      health_checks: resource.field('health_checks'),
      id: resource.field('id'),
      ip_address_selection_policy: resource.field('ip_address_selection_policy'),
      load_balancing_scheme: resource.field('load_balancing_scheme'),
      locality_lb_policy: resource.field('locality_lb_policy'),
      name: resource.field('name'),
      network: resource.field('network'),
      port_name: resource.field('port_name'),
      project: resource.field('project'),
      protocol: resource.field('protocol'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      session_affinity: resource.field('session_affinity'),
      timeout_sec: resource.field('timeout_sec'),
    },
    compute_region_commitment(name, block): {
      local resource = blockType.resource('google_compute_region_commitment', name),
      _: resource._(block, {
        auto_renew: build.template(std.get(block, 'auto_renew', null)),
        category: build.template(std.get(block, 'category', null)),
        commitment_id: build.template(std.get(block, 'commitment_id', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        end_timestamp: build.template(std.get(block, 'end_timestamp', null)),
        existing_reservations: build.template(std.get(block, 'existing_reservations', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        plan: build.template(block.plan),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        start_timestamp: build.template(std.get(block, 'start_timestamp', null)),
        status: build.template(std.get(block, 'status', null)),
        status_message: build.template(std.get(block, 'status_message', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      auto_renew: resource.field('auto_renew'),
      category: resource.field('category'),
      commitment_id: resource.field('commitment_id'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      end_timestamp: resource.field('end_timestamp'),
      existing_reservations: resource.field('existing_reservations'),
      id: resource.field('id'),
      name: resource.field('name'),
      plan: resource.field('plan'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      start_timestamp: resource.field('start_timestamp'),
      status: resource.field('status'),
      status_message: resource.field('status_message'),
      type: resource.field('type'),
    },
    compute_region_disk(name, block): {
      local resource = blockType.resource('google_compute_region_disk', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        last_attach_timestamp: build.template(std.get(block, 'last_attach_timestamp', null)),
        last_detach_timestamp: build.template(std.get(block, 'last_detach_timestamp', null)),
        licenses: build.template(std.get(block, 'licenses', null)),
        name: build.template(block.name),
        physical_block_size_bytes: build.template(std.get(block, 'physical_block_size_bytes', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        replica_zones: build.template(block.replica_zones),
        self_link: build.template(std.get(block, 'self_link', null)),
        size: build.template(std.get(block, 'size', null)),
        snapshot: build.template(std.get(block, 'snapshot', null)),
        source_disk: build.template(std.get(block, 'source_disk', null)),
        source_disk_id: build.template(std.get(block, 'source_disk_id', null)),
        source_snapshot_id: build.template(std.get(block, 'source_snapshot_id', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
        users: build.template(std.get(block, 'users', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      last_attach_timestamp: resource.field('last_attach_timestamp'),
      last_detach_timestamp: resource.field('last_detach_timestamp'),
      licenses: resource.field('licenses'),
      name: resource.field('name'),
      physical_block_size_bytes: resource.field('physical_block_size_bytes'),
      project: resource.field('project'),
      region: resource.field('region'),
      replica_zones: resource.field('replica_zones'),
      self_link: resource.field('self_link'),
      size: resource.field('size'),
      snapshot: resource.field('snapshot'),
      source_disk: resource.field('source_disk'),
      source_disk_id: resource.field('source_disk_id'),
      source_snapshot_id: resource.field('source_snapshot_id'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      users: resource.field('users'),
    },
    compute_region_disk_iam_binding(name, block): {
      local resource = blockType.resource('google_compute_region_disk_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    compute_region_disk_iam_member(name, block): {
      local resource = blockType.resource('google_compute_region_disk_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    compute_region_disk_iam_policy(name, block): {
      local resource = blockType.resource('google_compute_region_disk_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    compute_region_disk_resource_policy_attachment(name, block): {
      local resource = blockType.resource('google_compute_region_disk_resource_policy_attachment', name),
      _: resource._(block, {
        disk: build.template(block.disk),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      disk: resource.field('disk'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    compute_region_health_check(name, block): {
      local resource = blockType.resource('google_compute_region_health_check', name),
      _: resource._(block, {
        check_interval_sec: build.template(std.get(block, 'check_interval_sec', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        healthy_threshold: build.template(std.get(block, 'healthy_threshold', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        timeout_sec: build.template(std.get(block, 'timeout_sec', null)),
        type: build.template(std.get(block, 'type', null)),
        unhealthy_threshold: build.template(std.get(block, 'unhealthy_threshold', null)),
      }),
      check_interval_sec: resource.field('check_interval_sec'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      healthy_threshold: resource.field('healthy_threshold'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      timeout_sec: resource.field('timeout_sec'),
      type: resource.field('type'),
      unhealthy_threshold: resource.field('unhealthy_threshold'),
    },
    compute_region_instance_group_manager(name, block): {
      local resource = blockType.resource('google_compute_region_instance_group_manager', name),
      _: resource._(block, {
        base_instance_name: build.template(block.base_instance_name),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        distribution_policy_target_shape: build.template(std.get(block, 'distribution_policy_target_shape', null)),
        distribution_policy_zones: build.template(std.get(block, 'distribution_policy_zones', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_group: build.template(std.get(block, 'instance_group', null)),
        list_managed_instances_results: build.template(std.get(block, 'list_managed_instances_results', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        status: build.template(std.get(block, 'status', null)),
        target_pools: build.template(std.get(block, 'target_pools', null)),
        target_size: build.template(std.get(block, 'target_size', null)),
        wait_for_instances: build.template(std.get(block, 'wait_for_instances', null)),
        wait_for_instances_status: build.template(std.get(block, 'wait_for_instances_status', null)),
      }),
      base_instance_name: resource.field('base_instance_name'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      distribution_policy_target_shape: resource.field('distribution_policy_target_shape'),
      distribution_policy_zones: resource.field('distribution_policy_zones'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      instance_group: resource.field('instance_group'),
      list_managed_instances_results: resource.field('list_managed_instances_results'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      status: resource.field('status'),
      target_pools: resource.field('target_pools'),
      target_size: resource.field('target_size'),
      wait_for_instances: resource.field('wait_for_instances'),
      wait_for_instances_status: resource.field('wait_for_instances_status'),
    },
    compute_region_instance_template(name, block): {
      local resource = blockType.resource('google_compute_region_instance_template', name),
      _: resource._(block, {
        can_ip_forward: build.template(std.get(block, 'can_ip_forward', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_description: build.template(std.get(block, 'instance_description', null)),
        key_revocation_action_type: build.template(std.get(block, 'key_revocation_action_type', null)),
        labels: build.template(std.get(block, 'labels', null)),
        machine_type: build.template(block.machine_type),
        metadata: build.template(std.get(block, 'metadata', null)),
        metadata_fingerprint: build.template(std.get(block, 'metadata_fingerprint', null)),
        metadata_startup_script: build.template(std.get(block, 'metadata_startup_script', null)),
        min_cpu_platform: build.template(std.get(block, 'min_cpu_platform', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        resource_manager_tags: build.template(std.get(block, 'resource_manager_tags', null)),
        resource_policies: build.template(std.get(block, 'resource_policies', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_fingerprint: build.template(std.get(block, 'tags_fingerprint', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      can_ip_forward: resource.field('can_ip_forward'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      instance_description: resource.field('instance_description'),
      key_revocation_action_type: resource.field('key_revocation_action_type'),
      labels: resource.field('labels'),
      machine_type: resource.field('machine_type'),
      metadata: resource.field('metadata'),
      metadata_fingerprint: resource.field('metadata_fingerprint'),
      metadata_startup_script: resource.field('metadata_startup_script'),
      min_cpu_platform: resource.field('min_cpu_platform'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      project: resource.field('project'),
      region: resource.field('region'),
      resource_manager_tags: resource.field('resource_manager_tags'),
      resource_policies: resource.field('resource_policies'),
      self_link: resource.field('self_link'),
      tags: resource.field('tags'),
      tags_fingerprint: resource.field('tags_fingerprint'),
      terraform_labels: resource.field('terraform_labels'),
    },
    compute_region_network_endpoint(name, block): {
      local resource = blockType.resource('google_compute_region_network_endpoint', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        port: build.template(block.port),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        region_network_endpoint_group: build.template(block.region_network_endpoint_group),
      }),
      fqdn: resource.field('fqdn'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      port: resource.field('port'),
      project: resource.field('project'),
      region: resource.field('region'),
      region_network_endpoint_group: resource.field('region_network_endpoint_group'),
    },
    compute_region_network_endpoint_group(name, block): {
      local resource = blockType.resource('google_compute_region_network_endpoint_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        network_endpoint_type: build.template(std.get(block, 'network_endpoint_type', null)),
        project: build.template(std.get(block, 'project', null)),
        psc_target_service: build.template(std.get(block, 'psc_target_service', null)),
        region: build.template(block.region),
        self_link: build.template(std.get(block, 'self_link', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      network_endpoint_type: resource.field('network_endpoint_type'),
      project: resource.field('project'),
      psc_target_service: resource.field('psc_target_service'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      subnetwork: resource.field('subnetwork'),
    },
    compute_region_network_firewall_policy(name, block): {
      local resource = blockType.resource('google_compute_region_network_firewall_policy', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        region_network_firewall_policy_id: build.template(std.get(block, 'region_network_firewall_policy_id', null)),
        rule_tuple_count: build.template(std.get(block, 'rule_tuple_count', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        self_link_with_id: build.template(std.get(block, 'self_link_with_id', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      region_network_firewall_policy_id: resource.field('region_network_firewall_policy_id'),
      rule_tuple_count: resource.field('rule_tuple_count'),
      self_link: resource.field('self_link'),
      self_link_with_id: resource.field('self_link_with_id'),
    },
    compute_region_network_firewall_policy_association(name, block): {
      local resource = blockType.resource('google_compute_region_network_firewall_policy_association', name),
      _: resource._(block, {
        attachment_target: build.template(block.attachment_target),
        firewall_policy: build.template(block.firewall_policy),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        short_name: build.template(std.get(block, 'short_name', null)),
      }),
      attachment_target: resource.field('attachment_target'),
      firewall_policy: resource.field('firewall_policy'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      short_name: resource.field('short_name'),
    },
    compute_region_network_firewall_policy_rule(name, block): {
      local resource = blockType.resource('google_compute_region_network_firewall_policy_rule', name),
      _: resource._(block, {
        action: build.template(block.action),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        direction: build.template(block.direction),
        disabled: build.template(std.get(block, 'disabled', null)),
        enable_logging: build.template(std.get(block, 'enable_logging', null)),
        firewall_policy: build.template(block.firewall_policy),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        priority: build.template(block.priority),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        rule_name: build.template(std.get(block, 'rule_name', null)),
        rule_tuple_count: build.template(std.get(block, 'rule_tuple_count', null)),
        security_profile_group: build.template(std.get(block, 'security_profile_group', null)),
        target_service_accounts: build.template(std.get(block, 'target_service_accounts', null)),
        tls_inspect: build.template(std.get(block, 'tls_inspect', null)),
      }),
      action: resource.field('action'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      direction: resource.field('direction'),
      disabled: resource.field('disabled'),
      enable_logging: resource.field('enable_logging'),
      firewall_policy: resource.field('firewall_policy'),
      id: resource.field('id'),
      kind: resource.field('kind'),
      priority: resource.field('priority'),
      project: resource.field('project'),
      region: resource.field('region'),
      rule_name: resource.field('rule_name'),
      rule_tuple_count: resource.field('rule_tuple_count'),
      security_profile_group: resource.field('security_profile_group'),
      target_service_accounts: resource.field('target_service_accounts'),
      tls_inspect: resource.field('tls_inspect'),
    },
    compute_region_per_instance_config(name, block): {
      local resource = blockType.resource('google_compute_region_per_instance_config', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        minimal_action: build.template(std.get(block, 'minimal_action', null)),
        most_disruptive_allowed_action: build.template(std.get(block, 'most_disruptive_allowed_action', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        region_instance_group_manager: build.template(block.region_instance_group_manager),
        remove_instance_on_destroy: build.template(std.get(block, 'remove_instance_on_destroy', null)),
        remove_instance_state_on_destroy: build.template(std.get(block, 'remove_instance_state_on_destroy', null)),
      }),
      id: resource.field('id'),
      minimal_action: resource.field('minimal_action'),
      most_disruptive_allowed_action: resource.field('most_disruptive_allowed_action'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      region_instance_group_manager: resource.field('region_instance_group_manager'),
      remove_instance_on_destroy: resource.field('remove_instance_on_destroy'),
      remove_instance_state_on_destroy: resource.field('remove_instance_state_on_destroy'),
    },
    compute_region_ssl_certificate(name, block): {
      local resource = blockType.resource('google_compute_region_ssl_certificate', name),
      _: resource._(block, {
        certificate: build.template(block.certificate),
        certificate_id: build.template(std.get(block, 'certificate_id', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        private_key: build.template(block.private_key),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      certificate: resource.field('certificate'),
      certificate_id: resource.field('certificate_id'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      private_key: resource.field('private_key'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
    },
    compute_region_ssl_policy(name, block): {
      local resource = blockType.resource('google_compute_region_ssl_policy', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        custom_features: build.template(std.get(block, 'custom_features', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled_features: build.template(std.get(block, 'enabled_features', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        min_tls_version: build.template(std.get(block, 'min_tls_version', null)),
        name: build.template(block.name),
        profile: build.template(std.get(block, 'profile', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      custom_features: resource.field('custom_features'),
      description: resource.field('description'),
      enabled_features: resource.field('enabled_features'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      min_tls_version: resource.field('min_tls_version'),
      name: resource.field('name'),
      profile: resource.field('profile'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
    },
    compute_region_target_http_proxy(name, block): {
      local resource = blockType.resource('google_compute_region_target_http_proxy', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        http_keep_alive_timeout_sec: build.template(std.get(block, 'http_keep_alive_timeout_sec', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        proxy_id: build.template(std.get(block, 'proxy_id', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        url_map: build.template(block.url_map),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      http_keep_alive_timeout_sec: resource.field('http_keep_alive_timeout_sec'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      proxy_id: resource.field('proxy_id'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      url_map: resource.field('url_map'),
    },
    compute_region_target_https_proxy(name, block): {
      local resource = blockType.resource('google_compute_region_target_https_proxy', name),
      _: resource._(block, {
        certificate_manager_certificates: build.template(std.get(block, 'certificate_manager_certificates', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        http_keep_alive_timeout_sec: build.template(std.get(block, 'http_keep_alive_timeout_sec', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        proxy_id: build.template(std.get(block, 'proxy_id', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        server_tls_policy: build.template(std.get(block, 'server_tls_policy', null)),
        ssl_certificates: build.template(std.get(block, 'ssl_certificates', null)),
        ssl_policy: build.template(std.get(block, 'ssl_policy', null)),
        url_map: build.template(block.url_map),
      }),
      certificate_manager_certificates: resource.field('certificate_manager_certificates'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      http_keep_alive_timeout_sec: resource.field('http_keep_alive_timeout_sec'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      proxy_id: resource.field('proxy_id'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      server_tls_policy: resource.field('server_tls_policy'),
      ssl_certificates: resource.field('ssl_certificates'),
      ssl_policy: resource.field('ssl_policy'),
      url_map: resource.field('url_map'),
    },
    compute_region_target_tcp_proxy(name, block): {
      local resource = blockType.resource('google_compute_region_target_tcp_proxy', name),
      _: resource._(block, {
        backend_service: build.template(block.backend_service),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        proxy_bind: build.template(std.get(block, 'proxy_bind', null)),
        proxy_header: build.template(std.get(block, 'proxy_header', null)),
        proxy_id: build.template(std.get(block, 'proxy_id', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      backend_service: resource.field('backend_service'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      proxy_bind: resource.field('proxy_bind'),
      proxy_header: resource.field('proxy_header'),
      proxy_id: resource.field('proxy_id'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
    },
    compute_region_url_map(name, block): {
      local resource = blockType.resource('google_compute_region_url_map', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        default_service: build.template(std.get(block, 'default_service', null)),
        description: build.template(std.get(block, 'description', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        map_id: build.template(std.get(block, 'map_id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      default_service: resource.field('default_service'),
      description: resource.field('description'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      map_id: resource.field('map_id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
    },
    compute_reservation(name, block): {
      local resource = blockType.resource('google_compute_reservation', name),
      _: resource._(block, {
        commitment: build.template(std.get(block, 'commitment', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        specific_reservation_required: build.template(std.get(block, 'specific_reservation_required', null)),
        status: build.template(std.get(block, 'status', null)),
        zone: build.template(block.zone),
      }),
      commitment: resource.field('commitment'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      specific_reservation_required: resource.field('specific_reservation_required'),
      status: resource.field('status'),
      zone: resource.field('zone'),
    },
    compute_resize_request(name, block): {
      local resource = blockType.resource('google_compute_resize_request', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_group_manager: build.template(block.instance_group_manager),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        resize_by: build.template(block.resize_by),
        state: build.template(std.get(block, 'state', null)),
        status: build.template(std.get(block, 'status', null)),
        zone: build.template(block.zone),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_group_manager: resource.field('instance_group_manager'),
      name: resource.field('name'),
      project: resource.field('project'),
      resize_by: resource.field('resize_by'),
      state: resource.field('state'),
      status: resource.field('status'),
      zone: resource.field('zone'),
    },
    compute_resource_policy(name, block): {
      local resource = blockType.resource('google_compute_resource_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
    },
    compute_route(name, block): {
      local resource = blockType.resource('google_compute_route', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        dest_range: build.template(block.dest_range),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        next_hop_gateway: build.template(std.get(block, 'next_hop_gateway', null)),
        next_hop_ilb: build.template(std.get(block, 'next_hop_ilb', null)),
        next_hop_instance: build.template(std.get(block, 'next_hop_instance', null)),
        next_hop_instance_zone: build.template(std.get(block, 'next_hop_instance_zone', null)),
        next_hop_ip: build.template(std.get(block, 'next_hop_ip', null)),
        next_hop_network: build.template(std.get(block, 'next_hop_network', null)),
        next_hop_vpn_tunnel: build.template(std.get(block, 'next_hop_vpn_tunnel', null)),
        priority: build.template(std.get(block, 'priority', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field('description'),
      dest_range: resource.field('dest_range'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      next_hop_gateway: resource.field('next_hop_gateway'),
      next_hop_ilb: resource.field('next_hop_ilb'),
      next_hop_instance: resource.field('next_hop_instance'),
      next_hop_instance_zone: resource.field('next_hop_instance_zone'),
      next_hop_ip: resource.field('next_hop_ip'),
      next_hop_network: resource.field('next_hop_network'),
      next_hop_vpn_tunnel: resource.field('next_hop_vpn_tunnel'),
      priority: resource.field('priority'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      tags: resource.field('tags'),
    },
    compute_router(name, block): {
      local resource = blockType.resource('google_compute_router', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        encrypted_interconnect_router: build.template(std.get(block, 'encrypted_interconnect_router', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      encrypted_interconnect_router: resource.field('encrypted_interconnect_router'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
    },
    compute_router_interface(name, block): {
      local resource = blockType.resource('google_compute_router_interface', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        interconnect_attachment: build.template(std.get(block, 'interconnect_attachment', null)),
        ip_range: build.template(std.get(block, 'ip_range', null)),
        ip_version: build.template(std.get(block, 'ip_version', null)),
        name: build.template(block.name),
        private_ip_address: build.template(std.get(block, 'private_ip_address', null)),
        project: build.template(std.get(block, 'project', null)),
        redundant_interface: build.template(std.get(block, 'redundant_interface', null)),
        region: build.template(std.get(block, 'region', null)),
        router: build.template(block.router),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        vpn_tunnel: build.template(std.get(block, 'vpn_tunnel', null)),
      }),
      id: resource.field('id'),
      interconnect_attachment: resource.field('interconnect_attachment'),
      ip_range: resource.field('ip_range'),
      ip_version: resource.field('ip_version'),
      name: resource.field('name'),
      private_ip_address: resource.field('private_ip_address'),
      project: resource.field('project'),
      redundant_interface: resource.field('redundant_interface'),
      region: resource.field('region'),
      router: resource.field('router'),
      subnetwork: resource.field('subnetwork'),
      vpn_tunnel: resource.field('vpn_tunnel'),
    },
    compute_router_nat(name, block): {
      local resource = blockType.resource('google_compute_router_nat', name),
      _: resource._(block, {
        auto_network_tier: build.template(std.get(block, 'auto_network_tier', null)),
        drain_nat_ips: build.template(std.get(block, 'drain_nat_ips', null)),
        enable_dynamic_port_allocation: build.template(std.get(block, 'enable_dynamic_port_allocation', null)),
        enable_endpoint_independent_mapping: build.template(std.get(block, 'enable_endpoint_independent_mapping', null)),
        endpoint_types: build.template(std.get(block, 'endpoint_types', null)),
        icmp_idle_timeout_sec: build.template(std.get(block, 'icmp_idle_timeout_sec', null)),
        id: build.template(std.get(block, 'id', null)),
        initial_nat_ips: build.template(std.get(block, 'initial_nat_ips', null)),
        max_ports_per_vm: build.template(std.get(block, 'max_ports_per_vm', null)),
        min_ports_per_vm: build.template(std.get(block, 'min_ports_per_vm', null)),
        name: build.template(block.name),
        nat_ip_allocate_option: build.template(std.get(block, 'nat_ip_allocate_option', null)),
        nat_ips: build.template(std.get(block, 'nat_ips', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        router: build.template(block.router),
        source_subnetwork_ip_ranges_to_nat: build.template(block.source_subnetwork_ip_ranges_to_nat),
        tcp_established_idle_timeout_sec: build.template(std.get(block, 'tcp_established_idle_timeout_sec', null)),
        tcp_time_wait_timeout_sec: build.template(std.get(block, 'tcp_time_wait_timeout_sec', null)),
        tcp_transitory_idle_timeout_sec: build.template(std.get(block, 'tcp_transitory_idle_timeout_sec', null)),
        udp_idle_timeout_sec: build.template(std.get(block, 'udp_idle_timeout_sec', null)),
      }),
      auto_network_tier: resource.field('auto_network_tier'),
      drain_nat_ips: resource.field('drain_nat_ips'),
      enable_dynamic_port_allocation: resource.field('enable_dynamic_port_allocation'),
      enable_endpoint_independent_mapping: resource.field('enable_endpoint_independent_mapping'),
      endpoint_types: resource.field('endpoint_types'),
      icmp_idle_timeout_sec: resource.field('icmp_idle_timeout_sec'),
      id: resource.field('id'),
      initial_nat_ips: resource.field('initial_nat_ips'),
      max_ports_per_vm: resource.field('max_ports_per_vm'),
      min_ports_per_vm: resource.field('min_ports_per_vm'),
      name: resource.field('name'),
      nat_ip_allocate_option: resource.field('nat_ip_allocate_option'),
      nat_ips: resource.field('nat_ips'),
      project: resource.field('project'),
      region: resource.field('region'),
      router: resource.field('router'),
      source_subnetwork_ip_ranges_to_nat: resource.field('source_subnetwork_ip_ranges_to_nat'),
      tcp_established_idle_timeout_sec: resource.field('tcp_established_idle_timeout_sec'),
      tcp_time_wait_timeout_sec: resource.field('tcp_time_wait_timeout_sec'),
      tcp_transitory_idle_timeout_sec: resource.field('tcp_transitory_idle_timeout_sec'),
      udp_idle_timeout_sec: resource.field('udp_idle_timeout_sec'),
    },
    compute_router_nat_address(name, block): {
      local resource = blockType.resource('google_compute_router_nat_address', name),
      _: resource._(block, {
        drain_nat_ips: build.template(std.get(block, 'drain_nat_ips', null)),
        id: build.template(std.get(block, 'id', null)),
        nat_ips: build.template(block.nat_ips),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        router: build.template(block.router),
        router_nat: build.template(block.router_nat),
      }),
      drain_nat_ips: resource.field('drain_nat_ips'),
      id: resource.field('id'),
      nat_ips: resource.field('nat_ips'),
      project: resource.field('project'),
      region: resource.field('region'),
      router: resource.field('router'),
      router_nat: resource.field('router_nat'),
    },
    compute_router_peer(name, block): {
      local resource = blockType.resource('google_compute_router_peer', name),
      _: resource._(block, {
        advertise_mode: build.template(std.get(block, 'advertise_mode', null)),
        advertised_groups: build.template(std.get(block, 'advertised_groups', null)),
        advertised_route_priority: build.template(std.get(block, 'advertised_route_priority', null)),
        custom_learned_route_priority: build.template(std.get(block, 'custom_learned_route_priority', null)),
        enable: build.template(std.get(block, 'enable', null)),
        enable_ipv4: build.template(std.get(block, 'enable_ipv4', null)),
        enable_ipv6: build.template(std.get(block, 'enable_ipv6', null)),
        id: build.template(std.get(block, 'id', null)),
        interface: build.template(block.interface),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        ipv4_nexthop_address: build.template(std.get(block, 'ipv4_nexthop_address', null)),
        ipv6_nexthop_address: build.template(std.get(block, 'ipv6_nexthop_address', null)),
        management_type: build.template(std.get(block, 'management_type', null)),
        name: build.template(block.name),
        peer_asn: build.template(block.peer_asn),
        peer_ip_address: build.template(std.get(block, 'peer_ip_address', null)),
        peer_ipv4_nexthop_address: build.template(std.get(block, 'peer_ipv4_nexthop_address', null)),
        peer_ipv6_nexthop_address: build.template(std.get(block, 'peer_ipv6_nexthop_address', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        router: build.template(block.router),
        router_appliance_instance: build.template(std.get(block, 'router_appliance_instance', null)),
      }),
      advertise_mode: resource.field('advertise_mode'),
      advertised_groups: resource.field('advertised_groups'),
      advertised_route_priority: resource.field('advertised_route_priority'),
      custom_learned_route_priority: resource.field('custom_learned_route_priority'),
      enable: resource.field('enable'),
      enable_ipv4: resource.field('enable_ipv4'),
      enable_ipv6: resource.field('enable_ipv6'),
      id: resource.field('id'),
      interface: resource.field('interface'),
      ip_address: resource.field('ip_address'),
      ipv4_nexthop_address: resource.field('ipv4_nexthop_address'),
      ipv6_nexthop_address: resource.field('ipv6_nexthop_address'),
      management_type: resource.field('management_type'),
      name: resource.field('name'),
      peer_asn: resource.field('peer_asn'),
      peer_ip_address: resource.field('peer_ip_address'),
      peer_ipv4_nexthop_address: resource.field('peer_ipv4_nexthop_address'),
      peer_ipv6_nexthop_address: resource.field('peer_ipv6_nexthop_address'),
      project: resource.field('project'),
      region: resource.field('region'),
      router: resource.field('router'),
      router_appliance_instance: resource.field('router_appliance_instance'),
    },
    compute_security_policy(name, block): {
      local resource = blockType.resource('google_compute_security_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      description: resource.field('description'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      type: resource.field('type'),
    },
    compute_security_policy_rule(name, block): {
      local resource = blockType.resource('google_compute_security_policy_rule', name),
      _: resource._(block, {
        action: build.template(block.action),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        preview: build.template(std.get(block, 'preview', null)),
        priority: build.template(block.priority),
        project: build.template(std.get(block, 'project', null)),
        security_policy: build.template(block.security_policy),
      }),
      action: resource.field('action'),
      description: resource.field('description'),
      id: resource.field('id'),
      preview: resource.field('preview'),
      priority: resource.field('priority'),
      project: resource.field('project'),
      security_policy: resource.field('security_policy'),
    },
    compute_service_attachment(name, block): {
      local resource = blockType.resource('google_compute_service_attachment', name),
      _: resource._(block, {
        connected_endpoints: build.template(std.get(block, 'connected_endpoints', null)),
        connection_preference: build.template(block.connection_preference),
        consumer_reject_lists: build.template(std.get(block, 'consumer_reject_lists', null)),
        description: build.template(std.get(block, 'description', null)),
        domain_names: build.template(std.get(block, 'domain_names', null)),
        enable_proxy_protocol: build.template(block.enable_proxy_protocol),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        nat_subnets: build.template(block.nat_subnets),
        project: build.template(std.get(block, 'project', null)),
        propagated_connection_limit: build.template(std.get(block, 'propagated_connection_limit', null)),
        reconcile_connections: build.template(std.get(block, 'reconcile_connections', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        target_service: build.template(block.target_service),
      }),
      connected_endpoints: resource.field('connected_endpoints'),
      connection_preference: resource.field('connection_preference'),
      consumer_reject_lists: resource.field('consumer_reject_lists'),
      description: resource.field('description'),
      domain_names: resource.field('domain_names'),
      enable_proxy_protocol: resource.field('enable_proxy_protocol'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      name: resource.field('name'),
      nat_subnets: resource.field('nat_subnets'),
      project: resource.field('project'),
      propagated_connection_limit: resource.field('propagated_connection_limit'),
      reconcile_connections: resource.field('reconcile_connections'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      target_service: resource.field('target_service'),
    },
    compute_shared_vpc_host_project(name, block): {
      local resource = blockType.resource('google_compute_shared_vpc_host_project', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        project: build.template(block.project),
      }),
      id: resource.field('id'),
      project: resource.field('project'),
    },
    compute_shared_vpc_service_project(name, block): {
      local resource = blockType.resource('google_compute_shared_vpc_service_project', name),
      _: resource._(block, {
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        host_project: build.template(block.host_project),
        id: build.template(std.get(block, 'id', null)),
        service_project: build.template(block.service_project),
      }),
      deletion_policy: resource.field('deletion_policy'),
      host_project: resource.field('host_project'),
      id: resource.field('id'),
      service_project: resource.field('service_project'),
    },
    compute_snapshot(name, block): {
      local resource = blockType.resource('google_compute_snapshot', name),
      _: resource._(block, {
        chain_name: build.template(std.get(block, 'chain_name', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        disk_size_gb: build.template(std.get(block, 'disk_size_gb', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        licenses: build.template(std.get(block, 'licenses', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        snapshot_id: build.template(std.get(block, 'snapshot_id', null)),
        source_disk: build.template(block.source_disk),
        storage_bytes: build.template(std.get(block, 'storage_bytes', null)),
        storage_locations: build.template(std.get(block, 'storage_locations', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      chain_name: resource.field('chain_name'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      disk_size_gb: resource.field('disk_size_gb'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      licenses: resource.field('licenses'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      snapshot_id: resource.field('snapshot_id'),
      source_disk: resource.field('source_disk'),
      storage_bytes: resource.field('storage_bytes'),
      storage_locations: resource.field('storage_locations'),
      terraform_labels: resource.field('terraform_labels'),
      zone: resource.field('zone'),
    },
    compute_snapshot_iam_binding(name, block): {
      local resource = blockType.resource('google_compute_snapshot_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    compute_snapshot_iam_member(name, block): {
      local resource = blockType.resource('google_compute_snapshot_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    compute_snapshot_iam_policy(name, block): {
      local resource = blockType.resource('google_compute_snapshot_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    compute_ssl_certificate(name, block): {
      local resource = blockType.resource('google_compute_ssl_certificate', name),
      _: resource._(block, {
        certificate: build.template(block.certificate),
        certificate_id: build.template(std.get(block, 'certificate_id', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        private_key: build.template(block.private_key),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      certificate: resource.field('certificate'),
      certificate_id: resource.field('certificate_id'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      private_key: resource.field('private_key'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
    },
    compute_ssl_policy(name, block): {
      local resource = blockType.resource('google_compute_ssl_policy', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        custom_features: build.template(std.get(block, 'custom_features', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled_features: build.template(std.get(block, 'enabled_features', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        min_tls_version: build.template(std.get(block, 'min_tls_version', null)),
        name: build.template(block.name),
        profile: build.template(std.get(block, 'profile', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      custom_features: resource.field('custom_features'),
      description: resource.field('description'),
      enabled_features: resource.field('enabled_features'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      min_tls_version: resource.field('min_tls_version'),
      name: resource.field('name'),
      profile: resource.field('profile'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
    },
    compute_subnetwork(name, block): {
      local resource = blockType.resource('google_compute_subnetwork', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        external_ipv6_prefix: build.template(std.get(block, 'external_ipv6_prefix', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        gateway_address: build.template(std.get(block, 'gateway_address', null)),
        id: build.template(std.get(block, 'id', null)),
        internal_ipv6_prefix: build.template(std.get(block, 'internal_ipv6_prefix', null)),
        ip_cidr_range: build.template(std.get(block, 'ip_cidr_range', null)),
        ipv6_access_type: build.template(std.get(block, 'ipv6_access_type', null)),
        ipv6_cidr_range: build.template(std.get(block, 'ipv6_cidr_range', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        private_ip_google_access: build.template(std.get(block, 'private_ip_google_access', null)),
        private_ipv6_google_access: build.template(std.get(block, 'private_ipv6_google_access', null)),
        project: build.template(std.get(block, 'project', null)),
        purpose: build.template(std.get(block, 'purpose', null)),
        region: build.template(std.get(block, 'region', null)),
        reserved_internal_range: build.template(std.get(block, 'reserved_internal_range', null)),
        role: build.template(std.get(block, 'role', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        send_secondary_ip_range_if_empty: build.template(std.get(block, 'send_secondary_ip_range_if_empty', null)),
        stack_type: build.template(std.get(block, 'stack_type', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      external_ipv6_prefix: resource.field('external_ipv6_prefix'),
      fingerprint: resource.field('fingerprint'),
      gateway_address: resource.field('gateway_address'),
      id: resource.field('id'),
      internal_ipv6_prefix: resource.field('internal_ipv6_prefix'),
      ip_cidr_range: resource.field('ip_cidr_range'),
      ipv6_access_type: resource.field('ipv6_access_type'),
      ipv6_cidr_range: resource.field('ipv6_cidr_range'),
      name: resource.field('name'),
      network: resource.field('network'),
      private_ip_google_access: resource.field('private_ip_google_access'),
      private_ipv6_google_access: resource.field('private_ipv6_google_access'),
      project: resource.field('project'),
      purpose: resource.field('purpose'),
      region: resource.field('region'),
      reserved_internal_range: resource.field('reserved_internal_range'),
      role: resource.field('role'),
      self_link: resource.field('self_link'),
      send_secondary_ip_range_if_empty: resource.field('send_secondary_ip_range_if_empty'),
      stack_type: resource.field('stack_type'),
    },
    compute_subnetwork_iam_binding(name, block): {
      local resource = blockType.resource('google_compute_subnetwork_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
        subnetwork: build.template(block.subnetwork),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
      subnetwork: resource.field('subnetwork'),
    },
    compute_subnetwork_iam_member(name, block): {
      local resource = blockType.resource('google_compute_subnetwork_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
        subnetwork: build.template(block.subnetwork),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
      subnetwork: resource.field('subnetwork'),
    },
    compute_subnetwork_iam_policy(name, block): {
      local resource = blockType.resource('google_compute_subnetwork_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        subnetwork: build.template(block.subnetwork),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
      subnetwork: resource.field('subnetwork'),
    },
    compute_target_grpc_proxy(name, block): {
      local resource = blockType.resource('google_compute_target_grpc_proxy', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        self_link_with_id: build.template(std.get(block, 'self_link_with_id', null)),
        url_map: build.template(std.get(block, 'url_map', null)),
        validate_for_proxyless: build.template(std.get(block, 'validate_for_proxyless', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      self_link_with_id: resource.field('self_link_with_id'),
      url_map: resource.field('url_map'),
      validate_for_proxyless: resource.field('validate_for_proxyless'),
    },
    compute_target_http_proxy(name, block): {
      local resource = blockType.resource('google_compute_target_http_proxy', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        http_keep_alive_timeout_sec: build.template(std.get(block, 'http_keep_alive_timeout_sec', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        proxy_bind: build.template(std.get(block, 'proxy_bind', null)),
        proxy_id: build.template(std.get(block, 'proxy_id', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        url_map: build.template(block.url_map),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      http_keep_alive_timeout_sec: resource.field('http_keep_alive_timeout_sec'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      proxy_bind: resource.field('proxy_bind'),
      proxy_id: resource.field('proxy_id'),
      self_link: resource.field('self_link'),
      url_map: resource.field('url_map'),
    },
    compute_target_https_proxy(name, block): {
      local resource = blockType.resource('google_compute_target_https_proxy', name),
      _: resource._(block, {
        certificate_manager_certificates: build.template(std.get(block, 'certificate_manager_certificates', null)),
        certificate_map: build.template(std.get(block, 'certificate_map', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        http_keep_alive_timeout_sec: build.template(std.get(block, 'http_keep_alive_timeout_sec', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        proxy_bind: build.template(std.get(block, 'proxy_bind', null)),
        proxy_id: build.template(std.get(block, 'proxy_id', null)),
        quic_override: build.template(std.get(block, 'quic_override', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        server_tls_policy: build.template(std.get(block, 'server_tls_policy', null)),
        ssl_certificates: build.template(std.get(block, 'ssl_certificates', null)),
        ssl_policy: build.template(std.get(block, 'ssl_policy', null)),
        tls_early_data: build.template(std.get(block, 'tls_early_data', null)),
        url_map: build.template(block.url_map),
      }),
      certificate_manager_certificates: resource.field('certificate_manager_certificates'),
      certificate_map: resource.field('certificate_map'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      http_keep_alive_timeout_sec: resource.field('http_keep_alive_timeout_sec'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      proxy_bind: resource.field('proxy_bind'),
      proxy_id: resource.field('proxy_id'),
      quic_override: resource.field('quic_override'),
      self_link: resource.field('self_link'),
      server_tls_policy: resource.field('server_tls_policy'),
      ssl_certificates: resource.field('ssl_certificates'),
      ssl_policy: resource.field('ssl_policy'),
      tls_early_data: resource.field('tls_early_data'),
      url_map: resource.field('url_map'),
    },
    compute_target_instance(name, block): {
      local resource = blockType.resource('google_compute_target_instance', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        name: build.template(block.name),
        nat_policy: build.template(std.get(block, 'nat_policy', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      name: resource.field('name'),
      nat_policy: resource.field('nat_policy'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      zone: resource.field('zone'),
    },
    compute_target_pool(name, block): {
      local resource = blockType.resource('google_compute_target_pool', name),
      _: resource._(block, {
        backup_pool: build.template(std.get(block, 'backup_pool', null)),
        description: build.template(std.get(block, 'description', null)),
        failover_ratio: build.template(std.get(block, 'failover_ratio', null)),
        health_checks: build.template(std.get(block, 'health_checks', null)),
        id: build.template(std.get(block, 'id', null)),
        instances: build.template(std.get(block, 'instances', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        session_affinity: build.template(std.get(block, 'session_affinity', null)),
      }),
      backup_pool: resource.field('backup_pool'),
      description: resource.field('description'),
      failover_ratio: resource.field('failover_ratio'),
      health_checks: resource.field('health_checks'),
      id: resource.field('id'),
      instances: resource.field('instances'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      session_affinity: resource.field('session_affinity'),
    },
    compute_target_ssl_proxy(name, block): {
      local resource = blockType.resource('google_compute_target_ssl_proxy', name),
      _: resource._(block, {
        backend_service: build.template(block.backend_service),
        certificate_map: build.template(std.get(block, 'certificate_map', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        proxy_header: build.template(std.get(block, 'proxy_header', null)),
        proxy_id: build.template(std.get(block, 'proxy_id', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        ssl_certificates: build.template(std.get(block, 'ssl_certificates', null)),
        ssl_policy: build.template(std.get(block, 'ssl_policy', null)),
      }),
      backend_service: resource.field('backend_service'),
      certificate_map: resource.field('certificate_map'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      proxy_header: resource.field('proxy_header'),
      proxy_id: resource.field('proxy_id'),
      self_link: resource.field('self_link'),
      ssl_certificates: resource.field('ssl_certificates'),
      ssl_policy: resource.field('ssl_policy'),
    },
    compute_target_tcp_proxy(name, block): {
      local resource = blockType.resource('google_compute_target_tcp_proxy', name),
      _: resource._(block, {
        backend_service: build.template(block.backend_service),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        proxy_bind: build.template(std.get(block, 'proxy_bind', null)),
        proxy_header: build.template(std.get(block, 'proxy_header', null)),
        proxy_id: build.template(std.get(block, 'proxy_id', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      backend_service: resource.field('backend_service'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      proxy_bind: resource.field('proxy_bind'),
      proxy_header: resource.field('proxy_header'),
      proxy_id: resource.field('proxy_id'),
      self_link: resource.field('self_link'),
    },
    compute_url_map(name, block): {
      local resource = blockType.resource('google_compute_url_map', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        default_service: build.template(std.get(block, 'default_service', null)),
        description: build.template(std.get(block, 'description', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        map_id: build.template(std.get(block, 'map_id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      default_service: resource.field('default_service'),
      description: resource.field('description'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      map_id: resource.field('map_id'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
    },
    compute_vpn_gateway(name, block): {
      local resource = blockType.resource('google_compute_vpn_gateway', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        gateway_id: build.template(std.get(block, 'gateway_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      gateway_id: resource.field('gateway_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
    },
    compute_vpn_tunnel(name, block): {
      local resource = blockType.resource('google_compute_vpn_tunnel', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        detailed_status: build.template(std.get(block, 'detailed_status', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        ike_version: build.template(std.get(block, 'ike_version', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        local_traffic_selector: build.template(std.get(block, 'local_traffic_selector', null)),
        name: build.template(block.name),
        peer_external_gateway: build.template(std.get(block, 'peer_external_gateway', null)),
        peer_external_gateway_interface: build.template(std.get(block, 'peer_external_gateway_interface', null)),
        peer_gcp_gateway: build.template(std.get(block, 'peer_gcp_gateway', null)),
        peer_ip: build.template(std.get(block, 'peer_ip', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        remote_traffic_selector: build.template(std.get(block, 'remote_traffic_selector', null)),
        router: build.template(std.get(block, 'router', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        shared_secret: build.template(block.shared_secret),
        shared_secret_hash: build.template(std.get(block, 'shared_secret_hash', null)),
        target_vpn_gateway: build.template(std.get(block, 'target_vpn_gateway', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        tunnel_id: build.template(std.get(block, 'tunnel_id', null)),
        vpn_gateway: build.template(std.get(block, 'vpn_gateway', null)),
        vpn_gateway_interface: build.template(std.get(block, 'vpn_gateway_interface', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      detailed_status: resource.field('detailed_status'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      ike_version: resource.field('ike_version'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      local_traffic_selector: resource.field('local_traffic_selector'),
      name: resource.field('name'),
      peer_external_gateway: resource.field('peer_external_gateway'),
      peer_external_gateway_interface: resource.field('peer_external_gateway_interface'),
      peer_gcp_gateway: resource.field('peer_gcp_gateway'),
      peer_ip: resource.field('peer_ip'),
      project: resource.field('project'),
      region: resource.field('region'),
      remote_traffic_selector: resource.field('remote_traffic_selector'),
      router: resource.field('router'),
      self_link: resource.field('self_link'),
      shared_secret: resource.field('shared_secret'),
      shared_secret_hash: resource.field('shared_secret_hash'),
      target_vpn_gateway: resource.field('target_vpn_gateway'),
      terraform_labels: resource.field('terraform_labels'),
      tunnel_id: resource.field('tunnel_id'),
      vpn_gateway: resource.field('vpn_gateway'),
      vpn_gateway_interface: resource.field('vpn_gateway_interface'),
    },
    container_analysis_note(name, block): {
      local resource = blockType.resource('google_container_analysis_note', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        expiration_time: build.template(std.get(block, 'expiration_time', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        long_description: build.template(std.get(block, 'long_description', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        related_note_names: build.template(std.get(block, 'related_note_names', null)),
        short_description: build.template(std.get(block, 'short_description', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      expiration_time: resource.field('expiration_time'),
      id: resource.field('id'),
      kind: resource.field('kind'),
      long_description: resource.field('long_description'),
      name: resource.field('name'),
      project: resource.field('project'),
      related_note_names: resource.field('related_note_names'),
      short_description: resource.field('short_description'),
      update_time: resource.field('update_time'),
    },
    container_analysis_note_iam_binding(name, block): {
      local resource = blockType.resource('google_container_analysis_note_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        note: build.template(block.note),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      note: resource.field('note'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    container_analysis_note_iam_member(name, block): {
      local resource = blockType.resource('google_container_analysis_note_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        note: build.template(block.note),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      note: resource.field('note'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    container_analysis_note_iam_policy(name, block): {
      local resource = blockType.resource('google_container_analysis_note_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        note: build.template(block.note),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      note: resource.field('note'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    container_analysis_occurrence(name, block): {
      local resource = blockType.resource('google_container_analysis_occurrence', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        name: build.template(std.get(block, 'name', null)),
        note_name: build.template(block.note_name),
        project: build.template(std.get(block, 'project', null)),
        remediation: build.template(std.get(block, 'remediation', null)),
        resource_uri: build.template(block.resource_uri),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      id: resource.field('id'),
      kind: resource.field('kind'),
      name: resource.field('name'),
      note_name: resource.field('note_name'),
      project: resource.field('project'),
      remediation: resource.field('remediation'),
      resource_uri: resource.field('resource_uri'),
      update_time: resource.field('update_time'),
    },
    container_attached_cluster(name, block): {
      local resource = blockType.resource('google_container_attached_cluster', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        cluster_region: build.template(std.get(block, 'cluster_region', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        description: build.template(std.get(block, 'description', null)),
        distribution: build.template(block.distribution),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        errors: build.template(std.get(block, 'errors', null)),
        id: build.template(std.get(block, 'id', null)),
        kubernetes_version: build.template(std.get(block, 'kubernetes_version', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        platform_version: build.template(block.platform_version),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        workload_identity_config: build.template(std.get(block, 'workload_identity_config', null)),
      }),
      annotations: resource.field('annotations'),
      cluster_region: resource.field('cluster_region'),
      create_time: resource.field('create_time'),
      deletion_policy: resource.field('deletion_policy'),
      description: resource.field('description'),
      distribution: resource.field('distribution'),
      effective_annotations: resource.field('effective_annotations'),
      errors: resource.field('errors'),
      id: resource.field('id'),
      kubernetes_version: resource.field('kubernetes_version'),
      location: resource.field('location'),
      name: resource.field('name'),
      platform_version: resource.field('platform_version'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      state: resource.field('state'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      workload_identity_config: resource.field('workload_identity_config'),
    },
    container_aws_cluster(name, block): {
      local resource = blockType.resource('google_container_aws_cluster', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        aws_region: build.template(block.aws_region),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        workload_identity_config: build.template(std.get(block, 'workload_identity_config', null)),
      }),
      annotations: resource.field('annotations'),
      aws_region: resource.field('aws_region'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_annotations: resource.field('effective_annotations'),
      endpoint: resource.field('endpoint'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      state: resource.field('state'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      workload_identity_config: resource.field('workload_identity_config'),
    },
    container_aws_node_pool(name, block): {
      local resource = blockType.resource('google_container_aws_node_pool', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        cluster: build.template(block.cluster),
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        state: build.template(std.get(block, 'state', null)),
        subnet_id: build.template(block.subnet_id),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        version: build.template(block.version),
      }),
      annotations: resource.field('annotations'),
      cluster: resource.field('cluster'),
      create_time: resource.field('create_time'),
      effective_annotations: resource.field('effective_annotations'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      state: resource.field('state'),
      subnet_id: resource.field('subnet_id'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      version: resource.field('version'),
    },
    container_azure_client(name, block): {
      local resource = blockType.resource('google_container_azure_client', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        certificate: build.template(std.get(block, 'certificate', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        tenant_id: build.template(block.tenant_id),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      application_id: resource.field('application_id'),
      certificate: resource.field('certificate'),
      create_time: resource.field('create_time'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      tenant_id: resource.field('tenant_id'),
      uid: resource.field('uid'),
    },
    container_azure_cluster(name, block): {
      local resource = blockType.resource('google_container_azure_cluster', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        azure_region: build.template(block.azure_region),
        client: build.template(std.get(block, 'client', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        resource_group_id: build.template(block.resource_group_id),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        workload_identity_config: build.template(std.get(block, 'workload_identity_config', null)),
      }),
      annotations: resource.field('annotations'),
      azure_region: resource.field('azure_region'),
      client: resource.field('client'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_annotations: resource.field('effective_annotations'),
      endpoint: resource.field('endpoint'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      resource_group_id: resource.field('resource_group_id'),
      state: resource.field('state'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      workload_identity_config: resource.field('workload_identity_config'),
    },
    container_azure_node_pool(name, block): {
      local resource = blockType.resource('google_container_azure_node_pool', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        azure_availability_zone: build.template(std.get(block, 'azure_availability_zone', null)),
        cluster: build.template(block.cluster),
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        state: build.template(std.get(block, 'state', null)),
        subnet_id: build.template(block.subnet_id),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        version: build.template(block.version),
      }),
      annotations: resource.field('annotations'),
      azure_availability_zone: resource.field('azure_availability_zone'),
      cluster: resource.field('cluster'),
      create_time: resource.field('create_time'),
      effective_annotations: resource.field('effective_annotations'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      state: resource.field('state'),
      subnet_id: resource.field('subnet_id'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      version: resource.field('version'),
    },
    container_cluster(name, block): {
      local resource = blockType.resource('google_container_cluster', name),
      _: resource._(block, {
        allow_net_admin: build.template(std.get(block, 'allow_net_admin', null)),
        cluster_ipv4_cidr: build.template(std.get(block, 'cluster_ipv4_cidr', null)),
        datapath_provider: build.template(std.get(block, 'datapath_provider', null)),
        default_max_pods_per_node: build.template(std.get(block, 'default_max_pods_per_node', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_autopilot: build.template(std.get(block, 'enable_autopilot', null)),
        enable_cilium_clusterwide_network_policy: build.template(std.get(block, 'enable_cilium_clusterwide_network_policy', null)),
        enable_intranode_visibility: build.template(std.get(block, 'enable_intranode_visibility', null)),
        enable_kubernetes_alpha: build.template(std.get(block, 'enable_kubernetes_alpha', null)),
        enable_l4_ilb_subsetting: build.template(std.get(block, 'enable_l4_ilb_subsetting', null)),
        enable_legacy_abac: build.template(std.get(block, 'enable_legacy_abac', null)),
        enable_multi_networking: build.template(std.get(block, 'enable_multi_networking', null)),
        enable_shielded_nodes: build.template(std.get(block, 'enable_shielded_nodes', null)),
        enable_tpu: build.template(std.get(block, 'enable_tpu', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        initial_node_count: build.template(std.get(block, 'initial_node_count', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        location: build.template(std.get(block, 'location', null)),
        logging_service: build.template(std.get(block, 'logging_service', null)),
        master_version: build.template(std.get(block, 'master_version', null)),
        min_master_version: build.template(std.get(block, 'min_master_version', null)),
        monitoring_service: build.template(std.get(block, 'monitoring_service', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        networking_mode: build.template(std.get(block, 'networking_mode', null)),
        node_locations: build.template(std.get(block, 'node_locations', null)),
        node_version: build.template(std.get(block, 'node_version', null)),
        operation: build.template(std.get(block, 'operation', null)),
        private_ipv6_google_access: build.template(std.get(block, 'private_ipv6_google_access', null)),
        project: build.template(std.get(block, 'project', null)),
        remove_default_node_pool: build.template(std.get(block, 'remove_default_node_pool', null)),
        resource_labels: build.template(std.get(block, 'resource_labels', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        services_ipv4_cidr: build.template(std.get(block, 'services_ipv4_cidr', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        tpu_ipv4_cidr_block: build.template(std.get(block, 'tpu_ipv4_cidr_block', null)),
      }),
      allow_net_admin: resource.field('allow_net_admin'),
      cluster_ipv4_cidr: resource.field('cluster_ipv4_cidr'),
      datapath_provider: resource.field('datapath_provider'),
      default_max_pods_per_node: resource.field('default_max_pods_per_node'),
      deletion_protection: resource.field('deletion_protection'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      enable_autopilot: resource.field('enable_autopilot'),
      enable_cilium_clusterwide_network_policy: resource.field('enable_cilium_clusterwide_network_policy'),
      enable_intranode_visibility: resource.field('enable_intranode_visibility'),
      enable_kubernetes_alpha: resource.field('enable_kubernetes_alpha'),
      enable_l4_ilb_subsetting: resource.field('enable_l4_ilb_subsetting'),
      enable_legacy_abac: resource.field('enable_legacy_abac'),
      enable_multi_networking: resource.field('enable_multi_networking'),
      enable_shielded_nodes: resource.field('enable_shielded_nodes'),
      enable_tpu: resource.field('enable_tpu'),
      endpoint: resource.field('endpoint'),
      id: resource.field('id'),
      initial_node_count: resource.field('initial_node_count'),
      label_fingerprint: resource.field('label_fingerprint'),
      location: resource.field('location'),
      logging_service: resource.field('logging_service'),
      master_version: resource.field('master_version'),
      min_master_version: resource.field('min_master_version'),
      monitoring_service: resource.field('monitoring_service'),
      name: resource.field('name'),
      network: resource.field('network'),
      networking_mode: resource.field('networking_mode'),
      node_locations: resource.field('node_locations'),
      node_version: resource.field('node_version'),
      operation: resource.field('operation'),
      private_ipv6_google_access: resource.field('private_ipv6_google_access'),
      project: resource.field('project'),
      remove_default_node_pool: resource.field('remove_default_node_pool'),
      resource_labels: resource.field('resource_labels'),
      self_link: resource.field('self_link'),
      services_ipv4_cidr: resource.field('services_ipv4_cidr'),
      subnetwork: resource.field('subnetwork'),
      terraform_labels: resource.field('terraform_labels'),
      tpu_ipv4_cidr_block: resource.field('tpu_ipv4_cidr_block'),
    },
    container_node_pool(name, block): {
      local resource = blockType.resource('google_container_node_pool', name),
      _: resource._(block, {
        cluster: build.template(block.cluster),
        id: build.template(std.get(block, 'id', null)),
        initial_node_count: build.template(std.get(block, 'initial_node_count', null)),
        instance_group_urls: build.template(std.get(block, 'instance_group_urls', null)),
        location: build.template(std.get(block, 'location', null)),
        managed_instance_group_urls: build.template(std.get(block, 'managed_instance_group_urls', null)),
        max_pods_per_node: build.template(std.get(block, 'max_pods_per_node', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        node_count: build.template(std.get(block, 'node_count', null)),
        node_locations: build.template(std.get(block, 'node_locations', null)),
        operation: build.template(std.get(block, 'operation', null)),
        project: build.template(std.get(block, 'project', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      cluster: resource.field('cluster'),
      id: resource.field('id'),
      initial_node_count: resource.field('initial_node_count'),
      instance_group_urls: resource.field('instance_group_urls'),
      location: resource.field('location'),
      managed_instance_group_urls: resource.field('managed_instance_group_urls'),
      max_pods_per_node: resource.field('max_pods_per_node'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      node_count: resource.field('node_count'),
      node_locations: resource.field('node_locations'),
      operation: resource.field('operation'),
      project: resource.field('project'),
      version: resource.field('version'),
    },
    container_registry(name, block): {
      local resource = blockType.resource('google_container_registry', name),
      _: resource._(block, {
        bucket_self_link: build.template(std.get(block, 'bucket_self_link', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      bucket_self_link: resource.field('bucket_self_link'),
      id: resource.field('id'),
      location: resource.field('location'),
      project: resource.field('project'),
    },
    data_catalog_entry(name, block): {
      local resource = blockType.resource('google_data_catalog_entry', name),
      _: resource._(block, {
        bigquery_date_sharded_spec: build.template(std.get(block, 'bigquery_date_sharded_spec', null)),
        bigquery_table_spec: build.template(std.get(block, 'bigquery_table_spec', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        entry_group: build.template(block.entry_group),
        entry_id: build.template(block.entry_id),
        id: build.template(std.get(block, 'id', null)),
        integrated_system: build.template(std.get(block, 'integrated_system', null)),
        linked_resource: build.template(std.get(block, 'linked_resource', null)),
        name: build.template(std.get(block, 'name', null)),
        schema: build.template(std.get(block, 'schema', null)),
        type: build.template(std.get(block, 'type', null)),
        user_specified_system: build.template(std.get(block, 'user_specified_system', null)),
        user_specified_type: build.template(std.get(block, 'user_specified_type', null)),
      }),
      bigquery_date_sharded_spec: resource.field('bigquery_date_sharded_spec'),
      bigquery_table_spec: resource.field('bigquery_table_spec'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      entry_group: resource.field('entry_group'),
      entry_id: resource.field('entry_id'),
      id: resource.field('id'),
      integrated_system: resource.field('integrated_system'),
      linked_resource: resource.field('linked_resource'),
      name: resource.field('name'),
      schema: resource.field('schema'),
      type: resource.field('type'),
      user_specified_system: resource.field('user_specified_system'),
      user_specified_type: resource.field('user_specified_type'),
    },
    data_catalog_entry_group(name, block): {
      local resource = blockType.resource('google_data_catalog_entry_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        entry_group_id: build.template(block.entry_group_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      entry_group_id: resource.field('entry_group_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    data_catalog_entry_group_iam_binding(name, block): {
      local resource = blockType.resource('google_data_catalog_entry_group_iam_binding', name),
      _: resource._(block, {
        entry_group: build.template(block.entry_group),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      entry_group: resource.field('entry_group'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    data_catalog_entry_group_iam_member(name, block): {
      local resource = blockType.resource('google_data_catalog_entry_group_iam_member', name),
      _: resource._(block, {
        entry_group: build.template(block.entry_group),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      entry_group: resource.field('entry_group'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    data_catalog_entry_group_iam_policy(name, block): {
      local resource = blockType.resource('google_data_catalog_entry_group_iam_policy', name),
      _: resource._(block, {
        entry_group: build.template(block.entry_group),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      entry_group: resource.field('entry_group'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    data_catalog_policy_tag(name, block): {
      local resource = blockType.resource('google_data_catalog_policy_tag', name),
      _: resource._(block, {
        child_policy_tags: build.template(std.get(block, 'child_policy_tags', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent_policy_tag: build.template(std.get(block, 'parent_policy_tag', null)),
        taxonomy: build.template(block.taxonomy),
      }),
      child_policy_tags: resource.field('child_policy_tags'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent_policy_tag: resource.field('parent_policy_tag'),
      taxonomy: resource.field('taxonomy'),
    },
    data_catalog_policy_tag_iam_binding(name, block): {
      local resource = blockType.resource('google_data_catalog_policy_tag_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        policy_tag: build.template(block.policy_tag),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      policy_tag: resource.field('policy_tag'),
      role: resource.field('role'),
    },
    data_catalog_policy_tag_iam_member(name, block): {
      local resource = blockType.resource('google_data_catalog_policy_tag_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        policy_tag: build.template(block.policy_tag),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      policy_tag: resource.field('policy_tag'),
      role: resource.field('role'),
    },
    data_catalog_policy_tag_iam_policy(name, block): {
      local resource = blockType.resource('google_data_catalog_policy_tag_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        policy_tag: build.template(block.policy_tag),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      policy_tag: resource.field('policy_tag'),
    },
    data_catalog_tag(name, block): {
      local resource = blockType.resource('google_data_catalog_tag', name),
      _: resource._(block, {
        column: build.template(std.get(block, 'column', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(std.get(block, 'parent', null)),
        template: build.template(block.template),
        template_displayname: build.template(std.get(block, 'template_displayname', null)),
      }),
      column: resource.field('column'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      template: resource.field('template'),
      template_displayname: resource.field('template_displayname'),
    },
    data_catalog_tag_template(name, block): {
      local resource = blockType.resource('google_data_catalog_tag_template', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        tag_template_id: build.template(block.tag_template_id),
      }),
      display_name: resource.field('display_name'),
      force_delete: resource.field('force_delete'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      tag_template_id: resource.field('tag_template_id'),
    },
    data_catalog_tag_template_iam_binding(name, block): {
      local resource = blockType.resource('google_data_catalog_tag_template_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
        tag_template: build.template(block.tag_template),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
      tag_template: resource.field('tag_template'),
    },
    data_catalog_tag_template_iam_member(name, block): {
      local resource = blockType.resource('google_data_catalog_tag_template_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
        tag_template: build.template(block.tag_template),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
      tag_template: resource.field('tag_template'),
    },
    data_catalog_tag_template_iam_policy(name, block): {
      local resource = blockType.resource('google_data_catalog_tag_template_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        tag_template: build.template(block.tag_template),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
      tag_template: resource.field('tag_template'),
    },
    data_catalog_taxonomy(name, block): {
      local resource = blockType.resource('google_data_catalog_taxonomy', name),
      _: resource._(block, {
        activated_policy_types: build.template(std.get(block, 'activated_policy_types', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      activated_policy_types: resource.field('activated_policy_types'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    data_catalog_taxonomy_iam_binding(name, block): {
      local resource = blockType.resource('google_data_catalog_taxonomy_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
        taxonomy: build.template(block.taxonomy),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
      taxonomy: resource.field('taxonomy'),
    },
    data_catalog_taxonomy_iam_member(name, block): {
      local resource = blockType.resource('google_data_catalog_taxonomy_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
        taxonomy: build.template(block.taxonomy),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
      taxonomy: resource.field('taxonomy'),
    },
    data_catalog_taxonomy_iam_policy(name, block): {
      local resource = blockType.resource('google_data_catalog_taxonomy_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        taxonomy: build.template(block.taxonomy),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
      taxonomy: resource.field('taxonomy'),
    },
    data_fusion_instance(name, block): {
      local resource = blockType.resource('google_data_fusion_instance', name),
      _: resource._(block, {
        api_endpoint: build.template(std.get(block, 'api_endpoint', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        dataproc_service_account: build.template(std.get(block, 'dataproc_service_account', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_rbac: build.template(std.get(block, 'enable_rbac', null)),
        enable_stackdriver_logging: build.template(std.get(block, 'enable_stackdriver_logging', null)),
        enable_stackdriver_monitoring: build.template(std.get(block, 'enable_stackdriver_monitoring', null)),
        gcs_bucket: build.template(std.get(block, 'gcs_bucket', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        options: build.template(std.get(block, 'options', null)),
        p4_service_account: build.template(std.get(block, 'p4_service_account', null)),
        private_instance: build.template(std.get(block, 'private_instance', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        service_endpoint: build.template(std.get(block, 'service_endpoint', null)),
        state: build.template(std.get(block, 'state', null)),
        state_message: build.template(std.get(block, 'state_message', null)),
        tenant_project_id: build.template(std.get(block, 'tenant_project_id', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(block.type),
        update_time: build.template(std.get(block, 'update_time', null)),
        version: build.template(std.get(block, 'version', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      api_endpoint: resource.field('api_endpoint'),
      create_time: resource.field('create_time'),
      dataproc_service_account: resource.field('dataproc_service_account'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      enable_rbac: resource.field('enable_rbac'),
      enable_stackdriver_logging: resource.field('enable_stackdriver_logging'),
      enable_stackdriver_monitoring: resource.field('enable_stackdriver_monitoring'),
      gcs_bucket: resource.field('gcs_bucket'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      options: resource.field('options'),
      p4_service_account: resource.field('p4_service_account'),
      private_instance: resource.field('private_instance'),
      project: resource.field('project'),
      region: resource.field('region'),
      service_endpoint: resource.field('service_endpoint'),
      state: resource.field('state'),
      state_message: resource.field('state_message'),
      tenant_project_id: resource.field('tenant_project_id'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
      version: resource.field('version'),
      zone: resource.field('zone'),
    },
    data_fusion_instance_iam_binding(name, block): {
      local resource = blockType.resource('google_data_fusion_instance_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    data_fusion_instance_iam_member(name, block): {
      local resource = blockType.resource('google_data_fusion_instance_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    data_fusion_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_data_fusion_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    data_loss_prevention_deidentify_template(name, block): {
      local resource = blockType.resource('google_data_loss_prevention_deidentify_template', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        template_id: build.template(std.get(block, 'template_id', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      template_id: resource.field('template_id'),
      update_time: resource.field('update_time'),
    },
    data_loss_prevention_discovery_config(name, block): {
      local resource = blockType.resource('google_data_loss_prevention_discovery_config', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        errors: build.template(std.get(block, 'errors', null)),
        id: build.template(std.get(block, 'id', null)),
        inspect_templates: build.template(std.get(block, 'inspect_templates', null)),
        last_run_time: build.template(std.get(block, 'last_run_time', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        status: build.template(std.get(block, 'status', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      display_name: resource.field('display_name'),
      errors: resource.field('errors'),
      id: resource.field('id'),
      inspect_templates: resource.field('inspect_templates'),
      last_run_time: resource.field('last_run_time'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      status: resource.field('status'),
      update_time: resource.field('update_time'),
    },
    data_loss_prevention_inspect_template(name, block): {
      local resource = blockType.resource('google_data_loss_prevention_inspect_template', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        template_id: build.template(std.get(block, 'template_id', null)),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      template_id: resource.field('template_id'),
    },
    data_loss_prevention_job_trigger(name, block): {
      local resource = blockType.resource('google_data_loss_prevention_job_trigger', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        last_run_time: build.template(std.get(block, 'last_run_time', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        status: build.template(std.get(block, 'status', null)),
        trigger_id: build.template(std.get(block, 'trigger_id', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      last_run_time: resource.field('last_run_time'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      status: resource.field('status'),
      trigger_id: resource.field('trigger_id'),
      update_time: resource.field('update_time'),
    },
    data_loss_prevention_stored_info_type(name, block): {
      local resource = blockType.resource('google_data_loss_prevention_stored_info_type', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        stored_info_type_id: build.template(std.get(block, 'stored_info_type_id', null)),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      stored_info_type_id: resource.field('stored_info_type_id'),
    },
    data_pipeline_pipeline(name, block): {
      local resource = blockType.resource('google_data_pipeline_pipeline', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        job_count: build.template(std.get(block, 'job_count', null)),
        last_update_time: build.template(std.get(block, 'last_update_time', null)),
        name: build.template(block.name),
        pipeline_sources: build.template(std.get(block, 'pipeline_sources', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        scheduler_service_account_email: build.template(std.get(block, 'scheduler_service_account_email', null)),
        state: build.template(block.state),
        type: build.template(block.type),
      }),
      create_time: resource.field('create_time'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      job_count: resource.field('job_count'),
      last_update_time: resource.field('last_update_time'),
      name: resource.field('name'),
      pipeline_sources: resource.field('pipeline_sources'),
      project: resource.field('project'),
      region: resource.field('region'),
      scheduler_service_account_email: resource.field('scheduler_service_account_email'),
      state: resource.field('state'),
      type: resource.field('type'),
    },
    database_migration_service_connection_profile(name, block): {
      local resource = blockType.resource('google_database_migration_service_connection_profile', name),
      _: resource._(block, {
        connection_profile_id: build.template(block.connection_profile_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        dbprovider: build.template(std.get(block, 'dbprovider', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        'error': build.template(std.get(block, 'error', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      connection_profile_id: resource.field('connection_profile_id'),
      create_time: resource.field('create_time'),
      dbprovider: resource.field('dbprovider'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      'error': resource.field('error'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
    },
    database_migration_service_migration_job(name, block): {
      local resource = blockType.resource('google_database_migration_service_migration_job', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        destination: build.template(block.destination),
        display_name: build.template(std.get(block, 'display_name', null)),
        dump_path: build.template(std.get(block, 'dump_path', null)),
        dump_type: build.template(std.get(block, 'dump_type', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        'error': build.template(std.get(block, 'error', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        migration_job_id: build.template(block.migration_job_id),
        name: build.template(std.get(block, 'name', null)),
        phase: build.template(std.get(block, 'phase', null)),
        project: build.template(std.get(block, 'project', null)),
        source: build.template(block.source),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(block.type),
      }),
      create_time: resource.field('create_time'),
      destination: resource.field('destination'),
      display_name: resource.field('display_name'),
      dump_path: resource.field('dump_path'),
      dump_type: resource.field('dump_type'),
      effective_labels: resource.field('effective_labels'),
      'error': resource.field('error'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      migration_job_id: resource.field('migration_job_id'),
      name: resource.field('name'),
      phase: resource.field('phase'),
      project: resource.field('project'),
      source: resource.field('source'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
    },
    database_migration_service_private_connection(name, block): {
      local resource = blockType.resource('google_database_migration_service_private_connection', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        'error': build.template(std.get(block, 'error', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        private_connection_id: build.template(block.private_connection_id),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      'error': resource.field('error'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      private_connection_id: resource.field('private_connection_id'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
    },
    dataflow_job(name, block): {
      local resource = blockType.resource('google_dataflow_job', name),
      _: resource._(block, {
        additional_experiments: build.template(std.get(block, 'additional_experiments', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_streaming_engine: build.template(std.get(block, 'enable_streaming_engine', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_configuration: build.template(std.get(block, 'ip_configuration', null)),
        job_id: build.template(std.get(block, 'job_id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        labels: build.template(std.get(block, 'labels', null)),
        machine_type: build.template(std.get(block, 'machine_type', null)),
        max_workers: build.template(std.get(block, 'max_workers', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        on_delete: build.template(std.get(block, 'on_delete', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        service_account_email: build.template(std.get(block, 'service_account_email', null)),
        skip_wait_on_job_termination: build.template(std.get(block, 'skip_wait_on_job_termination', null)),
        state: build.template(std.get(block, 'state', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        temp_gcs_location: build.template(block.temp_gcs_location),
        template_gcs_path: build.template(block.template_gcs_path),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        transform_name_mapping: build.template(std.get(block, 'transform_name_mapping', null)),
        type: build.template(std.get(block, 'type', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      additional_experiments: resource.field('additional_experiments'),
      effective_labels: resource.field('effective_labels'),
      enable_streaming_engine: resource.field('enable_streaming_engine'),
      id: resource.field('id'),
      ip_configuration: resource.field('ip_configuration'),
      job_id: resource.field('job_id'),
      kms_key_name: resource.field('kms_key_name'),
      labels: resource.field('labels'),
      machine_type: resource.field('machine_type'),
      max_workers: resource.field('max_workers'),
      name: resource.field('name'),
      network: resource.field('network'),
      on_delete: resource.field('on_delete'),
      parameters: resource.field('parameters'),
      project: resource.field('project'),
      region: resource.field('region'),
      service_account_email: resource.field('service_account_email'),
      skip_wait_on_job_termination: resource.field('skip_wait_on_job_termination'),
      state: resource.field('state'),
      subnetwork: resource.field('subnetwork'),
      temp_gcs_location: resource.field('temp_gcs_location'),
      template_gcs_path: resource.field('template_gcs_path'),
      terraform_labels: resource.field('terraform_labels'),
      transform_name_mapping: resource.field('transform_name_mapping'),
      type: resource.field('type'),
      zone: resource.field('zone'),
    },
    dataplex_aspect_type(name, block): {
      local resource = blockType.resource('google_dataplex_aspect_type', name),
      _: resource._(block, {
        aspect_type_id: build.template(std.get(block, 'aspect_type_id', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        metadata_template: build.template(std.get(block, 'metadata_template', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        transfer_status: build.template(std.get(block, 'transfer_status', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      aspect_type_id: resource.field('aspect_type_id'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      metadata_template: resource.field('metadata_template'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      transfer_status: resource.field('transfer_status'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    dataplex_aspect_type_iam_binding(name, block): {
      local resource = blockType.resource('google_dataplex_aspect_type_iam_binding', name),
      _: resource._(block, {
        aspect_type_id: build.template(block.aspect_type_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      aspect_type_id: resource.field('aspect_type_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_aspect_type_iam_member(name, block): {
      local resource = blockType.resource('google_dataplex_aspect_type_iam_member', name),
      _: resource._(block, {
        aspect_type_id: build.template(block.aspect_type_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      aspect_type_id: resource.field('aspect_type_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_aspect_type_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_aspect_type_iam_policy', name),
      _: resource._(block, {
        aspect_type_id: build.template(block.aspect_type_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      aspect_type_id: resource.field('aspect_type_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataplex_asset(name, block): {
      local resource = blockType.resource('google_dataplex_asset', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        dataplex_zone: build.template(block.dataplex_zone),
        description: build.template(std.get(block, 'description', null)),
        discovery_status: build.template(std.get(block, 'discovery_status', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        lake: build.template(block.lake),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        resource_status: build.template(std.get(block, 'resource_status', null)),
        security_status: build.template(std.get(block, 'security_status', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      dataplex_zone: resource.field('dataplex_zone'),
      description: resource.field('description'),
      discovery_status: resource.field('discovery_status'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      resource_status: resource.field('resource_status'),
      security_status: resource.field('security_status'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    dataplex_asset_iam_binding(name, block): {
      local resource = blockType.resource('google_dataplex_asset_iam_binding', name),
      _: resource._(block, {
        asset: build.template(block.asset),
        dataplex_zone: build.template(block.dataplex_zone),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      asset: resource.field('asset'),
      dataplex_zone: resource.field('dataplex_zone'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_asset_iam_member(name, block): {
      local resource = blockType.resource('google_dataplex_asset_iam_member', name),
      _: resource._(block, {
        asset: build.template(block.asset),
        dataplex_zone: build.template(block.dataplex_zone),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      asset: resource.field('asset'),
      dataplex_zone: resource.field('dataplex_zone'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_asset_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_asset_iam_policy', name),
      _: resource._(block, {
        asset: build.template(block.asset),
        dataplex_zone: build.template(block.dataplex_zone),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      asset: resource.field('asset'),
      dataplex_zone: resource.field('dataplex_zone'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataplex_datascan(name, block): {
      local resource = blockType.resource('google_dataplex_datascan', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        data_scan_id: build.template(block.data_scan_id),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        execution_status: build.template(std.get(block, 'execution_status', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      data_scan_id: resource.field('data_scan_id'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      execution_status: resource.field('execution_status'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    dataplex_datascan_iam_binding(name, block): {
      local resource = blockType.resource('google_dataplex_datascan_iam_binding', name),
      _: resource._(block, {
        data_scan_id: build.template(block.data_scan_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      data_scan_id: resource.field('data_scan_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_datascan_iam_member(name, block): {
      local resource = blockType.resource('google_dataplex_datascan_iam_member', name),
      _: resource._(block, {
        data_scan_id: build.template(block.data_scan_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      data_scan_id: resource.field('data_scan_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_datascan_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_datascan_iam_policy', name),
      _: resource._(block, {
        data_scan_id: build.template(block.data_scan_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      data_scan_id: resource.field('data_scan_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataplex_entry_group(name, block): {
      local resource = blockType.resource('google_dataplex_entry_group', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        entry_group_id: build.template(std.get(block, 'entry_group_id', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        transfer_status: build.template(std.get(block, 'transfer_status', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      entry_group_id: resource.field('entry_group_id'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      transfer_status: resource.field('transfer_status'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    dataplex_entry_group_iam_binding(name, block): {
      local resource = blockType.resource('google_dataplex_entry_group_iam_binding', name),
      _: resource._(block, {
        entry_group_id: build.template(block.entry_group_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      entry_group_id: resource.field('entry_group_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_entry_group_iam_member(name, block): {
      local resource = blockType.resource('google_dataplex_entry_group_iam_member', name),
      _: resource._(block, {
        entry_group_id: build.template(block.entry_group_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      entry_group_id: resource.field('entry_group_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_entry_group_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_entry_group_iam_policy', name),
      _: resource._(block, {
        entry_group_id: build.template(block.entry_group_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      entry_group_id: resource.field('entry_group_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataplex_entry_type(name, block): {
      local resource = blockType.resource('google_dataplex_entry_type', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        entry_type_id: build.template(std.get(block, 'entry_type_id', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        platform: build.template(std.get(block, 'platform', null)),
        project: build.template(std.get(block, 'project', null)),
        system: build.template(std.get(block, 'system', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type_aliases: build.template(std.get(block, 'type_aliases', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      entry_type_id: resource.field('entry_type_id'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      platform: resource.field('platform'),
      project: resource.field('project'),
      system: resource.field('system'),
      terraform_labels: resource.field('terraform_labels'),
      type_aliases: resource.field('type_aliases'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    dataplex_entry_type_iam_binding(name, block): {
      local resource = blockType.resource('google_dataplex_entry_type_iam_binding', name),
      _: resource._(block, {
        entry_type_id: build.template(block.entry_type_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      entry_type_id: resource.field('entry_type_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_entry_type_iam_member(name, block): {
      local resource = blockType.resource('google_dataplex_entry_type_iam_member', name),
      _: resource._(block, {
        entry_type_id: build.template(block.entry_type_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      entry_type_id: resource.field('entry_type_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_entry_type_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_entry_type_iam_policy', name),
      _: resource._(block, {
        entry_type_id: build.template(block.entry_type_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      entry_type_id: resource.field('entry_type_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataplex_lake(name, block): {
      local resource = blockType.resource('google_dataplex_lake', name),
      _: resource._(block, {
        asset_status: build.template(std.get(block, 'asset_status', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        metastore_status: build.template(std.get(block, 'metastore_status', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      asset_status: resource.field('asset_status'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      metastore_status: resource.field('metastore_status'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_account: resource.field('service_account'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    dataplex_lake_iam_binding(name, block): {
      local resource = blockType.resource('google_dataplex_lake_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_lake_iam_member(name, block): {
      local resource = blockType.resource('google_dataplex_lake_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_lake_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_lake_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataplex_task(name, block): {
      local resource = blockType.resource('google_dataplex_task', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        execution_status: build.template(std.get(block, 'execution_status', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        lake: build.template(std.get(block, 'lake', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        task_id: build.template(std.get(block, 'task_id', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      execution_status: resource.field('execution_status'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      task_id: resource.field('task_id'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    dataplex_task_iam_binding(name, block): {
      local resource = blockType.resource('google_dataplex_task_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        task_id: build.template(block.task_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      task_id: resource.field('task_id'),
    },
    dataplex_task_iam_member(name, block): {
      local resource = blockType.resource('google_dataplex_task_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        task_id: build.template(block.task_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      task_id: resource.field('task_id'),
    },
    dataplex_task_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_task_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        task_id: build.template(block.task_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      task_id: resource.field('task_id'),
    },
    dataplex_zone(name, block): {
      local resource = blockType.resource('google_dataplex_zone', name),
      _: resource._(block, {
        asset_status: build.template(std.get(block, 'asset_status', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        lake: build.template(block.lake),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(block.type),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      asset_status: resource.field('asset_status'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    dataplex_zone_iam_binding(name, block): {
      local resource = blockType.resource('google_dataplex_zone_iam_binding', name),
      _: resource._(block, {
        dataplex_zone: build.template(block.dataplex_zone),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      dataplex_zone: resource.field('dataplex_zone'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_zone_iam_member(name, block): {
      local resource = blockType.resource('google_dataplex_zone_iam_member', name),
      _: resource._(block, {
        dataplex_zone: build.template(block.dataplex_zone),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      dataplex_zone: resource.field('dataplex_zone'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataplex_zone_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_zone_iam_policy', name),
      _: resource._(block, {
        dataplex_zone: build.template(block.dataplex_zone),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      dataplex_zone: resource.field('dataplex_zone'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataproc_autoscaling_policy(name, block): {
      local resource = blockType.resource('google_dataproc_autoscaling_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        policy_id: build.template(block.policy_id),
        project: build.template(std.get(block, 'project', null)),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_id: resource.field('policy_id'),
      project: resource.field('project'),
    },
    dataproc_autoscaling_policy_iam_binding(name, block): {
      local resource = blockType.resource('google_dataproc_autoscaling_policy_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        policy_id: build.template(block.policy_id),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      policy_id: resource.field('policy_id'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataproc_autoscaling_policy_iam_member(name, block): {
      local resource = blockType.resource('google_dataproc_autoscaling_policy_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        policy_id: build.template(block.policy_id),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      policy_id: resource.field('policy_id'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataproc_autoscaling_policy_iam_policy(name, block): {
      local resource = blockType.resource('google_dataproc_autoscaling_policy_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        policy_id: build.template(block.policy_id),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      policy_id: resource.field('policy_id'),
      project: resource.field('project'),
    },
    dataproc_batch(name, block): {
      local resource = blockType.resource('google_dataproc_batch', name),
      _: resource._(block, {
        batch_id: build.template(std.get(block, 'batch_id', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        creator: build.template(std.get(block, 'creator', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        operation: build.template(std.get(block, 'operation', null)),
        project: build.template(std.get(block, 'project', null)),
        runtime_info: build.template(std.get(block, 'runtime_info', null)),
        state: build.template(std.get(block, 'state', null)),
        state_history: build.template(std.get(block, 'state_history', null)),
        state_message: build.template(std.get(block, 'state_message', null)),
        state_time: build.template(std.get(block, 'state_time', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uuid: build.template(std.get(block, 'uuid', null)),
      }),
      batch_id: resource.field('batch_id'),
      create_time: resource.field('create_time'),
      creator: resource.field('creator'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      operation: resource.field('operation'),
      project: resource.field('project'),
      runtime_info: resource.field('runtime_info'),
      state: resource.field('state'),
      state_history: resource.field('state_history'),
      state_message: resource.field('state_message'),
      state_time: resource.field('state_time'),
      terraform_labels: resource.field('terraform_labels'),
      uuid: resource.field('uuid'),
    },
    dataproc_cluster(name, block): {
      local resource = blockType.resource('google_dataproc_cluster', name),
      _: resource._(block, {
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        graceful_decommission_timeout: build.template(std.get(block, 'graceful_decommission_timeout', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      effective_labels: resource.field('effective_labels'),
      graceful_decommission_timeout: resource.field('graceful_decommission_timeout'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
    },
    dataproc_cluster_iam_binding(name, block): {
      local resource = blockType.resource('google_dataproc_cluster_iam_binding', name),
      _: resource._(block, {
        cluster: build.template(block.cluster),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      cluster: resource.field('cluster'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    dataproc_cluster_iam_member(name, block): {
      local resource = blockType.resource('google_dataproc_cluster_iam_member', name),
      _: resource._(block, {
        cluster: build.template(block.cluster),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      cluster: resource.field('cluster'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    dataproc_cluster_iam_policy(name, block): {
      local resource = blockType.resource('google_dataproc_cluster_iam_policy', name),
      _: resource._(block, {
        cluster: build.template(block.cluster),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      cluster: resource.field('cluster'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    dataproc_gdc_application_environment(name, block): {
      local resource = blockType.resource('google_dataproc_gdc_application_environment', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        application_environment_id: build.template(std.get(block, 'application_environment_id', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        namespace: build.template(std.get(block, 'namespace', null)),
        project: build.template(std.get(block, 'project', null)),
        serviceinstance: build.template(block.serviceinstance),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      annotations: resource.field('annotations'),
      application_environment_id: resource.field('application_environment_id'),
      create_time: resource.field('create_time'),
      display_name: resource.field('display_name'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      namespace: resource.field('namespace'),
      project: resource.field('project'),
      serviceinstance: resource.field('serviceinstance'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    dataproc_gdc_service_instance(name, block): {
      local resource = blockType.resource('google_dataproc_gdc_service_instance', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        effective_service_account: build.template(std.get(block, 'effective_service_account', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        requested_state: build.template(std.get(block, 'requested_state', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        service_instance_id: build.template(block.service_instance_id),
        state: build.template(std.get(block, 'state', null)),
        state_message: build.template(std.get(block, 'state_message', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      effective_service_account: resource.field('effective_service_account'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      requested_state: resource.field('requested_state'),
      service_account: resource.field('service_account'),
      service_instance_id: resource.field('service_instance_id'),
      state: resource.field('state'),
      state_message: resource.field('state_message'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    dataproc_gdc_spark_application(name, block): {
      local resource = blockType.resource('google_dataproc_gdc_spark_application', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        application_environment: build.template(std.get(block, 'application_environment', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        dependency_images: build.template(std.get(block, 'dependency_images', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        monitoring_endpoint: build.template(std.get(block, 'monitoring_endpoint', null)),
        name: build.template(std.get(block, 'name', null)),
        namespace: build.template(std.get(block, 'namespace', null)),
        output_uri: build.template(std.get(block, 'output_uri', null)),
        project: build.template(std.get(block, 'project', null)),
        properties: build.template(std.get(block, 'properties', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        serviceinstance: build.template(block.serviceinstance),
        spark_application_id: build.template(block.spark_application_id),
        state: build.template(std.get(block, 'state', null)),
        state_message: build.template(std.get(block, 'state_message', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      annotations: resource.field('annotations'),
      application_environment: resource.field('application_environment'),
      create_time: resource.field('create_time'),
      dependency_images: resource.field('dependency_images'),
      display_name: resource.field('display_name'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      monitoring_endpoint: resource.field('monitoring_endpoint'),
      name: resource.field('name'),
      namespace: resource.field('namespace'),
      output_uri: resource.field('output_uri'),
      project: resource.field('project'),
      properties: resource.field('properties'),
      reconciling: resource.field('reconciling'),
      serviceinstance: resource.field('serviceinstance'),
      spark_application_id: resource.field('spark_application_id'),
      state: resource.field('state'),
      state_message: resource.field('state_message'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      version: resource.field('version'),
    },
    dataproc_job(name, block): {
      local resource = blockType.resource('google_dataproc_job', name),
      _: resource._(block, {
        driver_controls_files_uri: build.template(std.get(block, 'driver_controls_files_uri', null)),
        driver_output_resource_uri: build.template(std.get(block, 'driver_output_resource_uri', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        status: build.template(std.get(block, 'status', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      driver_controls_files_uri: resource.field('driver_controls_files_uri'),
      driver_output_resource_uri: resource.field('driver_output_resource_uri'),
      effective_labels: resource.field('effective_labels'),
      force_delete: resource.field('force_delete'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      project: resource.field('project'),
      region: resource.field('region'),
      status: resource.field('status'),
      terraform_labels: resource.field('terraform_labels'),
    },
    dataproc_job_iam_binding(name, block): {
      local resource = blockType.resource('google_dataproc_job_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        job_id: build.template(block.job_id),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      job_id: resource.field('job_id'),
      members: resource.field('members'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    dataproc_job_iam_member(name, block): {
      local resource = blockType.resource('google_dataproc_job_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        job_id: build.template(block.job_id),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      job_id: resource.field('job_id'),
      member: resource.field('member'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    dataproc_job_iam_policy(name, block): {
      local resource = blockType.resource('google_dataproc_job_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        job_id: build.template(block.job_id),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      job_id: resource.field('job_id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    dataproc_metastore_federation(name, block): {
      local resource = blockType.resource('google_dataproc_metastore_federation', name),
      _: resource._(block, {
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        endpoint_uri: build.template(std.get(block, 'endpoint_uri', null)),
        federation_id: build.template(block.federation_id),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        state_message: build.template(std.get(block, 'state_message', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        version: build.template(block.version),
      }),
      effective_labels: resource.field('effective_labels'),
      endpoint_uri: resource.field('endpoint_uri'),
      federation_id: resource.field('federation_id'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      state_message: resource.field('state_message'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      version: resource.field('version'),
    },
    dataproc_metastore_federation_iam_binding(name, block): {
      local resource = blockType.resource('google_dataproc_metastore_federation_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        federation_id: build.template(block.federation_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      federation_id: resource.field('federation_id'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataproc_metastore_federation_iam_member(name, block): {
      local resource = blockType.resource('google_dataproc_metastore_federation_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        federation_id: build.template(block.federation_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      federation_id: resource.field('federation_id'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dataproc_metastore_federation_iam_policy(name, block): {
      local resource = blockType.resource('google_dataproc_metastore_federation_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        federation_id: build.template(block.federation_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      federation_id: resource.field('federation_id'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataproc_metastore_service(name, block): {
      local resource = blockType.resource('google_dataproc_metastore_service', name),
      _: resource._(block, {
        artifact_gcs_uri: build.template(std.get(block, 'artifact_gcs_uri', null)),
        database_type: build.template(std.get(block, 'database_type', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        endpoint_uri: build.template(std.get(block, 'endpoint_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        network: build.template(std.get(block, 'network', null)),
        port: build.template(std.get(block, 'port', null)),
        project: build.template(std.get(block, 'project', null)),
        release_channel: build.template(std.get(block, 'release_channel', null)),
        service_id: build.template(block.service_id),
        state: build.template(std.get(block, 'state', null)),
        state_message: build.template(std.get(block, 'state_message', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        tier: build.template(std.get(block, 'tier', null)),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      artifact_gcs_uri: resource.field('artifact_gcs_uri'),
      database_type: resource.field('database_type'),
      deletion_protection: resource.field('deletion_protection'),
      effective_labels: resource.field('effective_labels'),
      endpoint_uri: resource.field('endpoint_uri'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      network: resource.field('network'),
      port: resource.field('port'),
      project: resource.field('project'),
      release_channel: resource.field('release_channel'),
      service_id: resource.field('service_id'),
      state: resource.field('state'),
      state_message: resource.field('state_message'),
      terraform_labels: resource.field('terraform_labels'),
      tier: resource.field('tier'),
      uid: resource.field('uid'),
    },
    dataproc_metastore_service_iam_binding(name, block): {
      local resource = blockType.resource('google_dataproc_metastore_service_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        service_id: build.template(block.service_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      service_id: resource.field('service_id'),
    },
    dataproc_metastore_service_iam_member(name, block): {
      local resource = blockType.resource('google_dataproc_metastore_service_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        service_id: build.template(block.service_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      service_id: resource.field('service_id'),
    },
    dataproc_metastore_service_iam_policy(name, block): {
      local resource = blockType.resource('google_dataproc_metastore_service_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        service_id: build.template(block.service_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      service_id: resource.field('service_id'),
    },
    dataproc_workflow_template(name, block): {
      local resource = blockType.resource('google_dataproc_workflow_template', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        dag_timeout: build.template(std.get(block, 'dag_timeout', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      create_time: resource.field('create_time'),
      dag_timeout: resource.field('dag_timeout'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
      version: resource.field('version'),
    },
    datastream_connection_profile(name, block): {
      local resource = blockType.resource('google_datastream_connection_profile', name),
      _: resource._(block, {
        connection_profile_id: build.template(block.connection_profile_id),
        create_without_validation: build.template(std.get(block, 'create_without_validation', null)),
        display_name: build.template(block.display_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      connection_profile_id: resource.field('connection_profile_id'),
      create_without_validation: resource.field('create_without_validation'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
    },
    datastream_private_connection(name, block): {
      local resource = blockType.resource('google_datastream_private_connection', name),
      _: resource._(block, {
        create_without_validation: build.template(std.get(block, 'create_without_validation', null)),
        display_name: build.template(block.display_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        'error': build.template(std.get(block, 'error', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        private_connection_id: build.template(block.private_connection_id),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      create_without_validation: resource.field('create_without_validation'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      'error': resource.field('error'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      private_connection_id: resource.field('private_connection_id'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
    },
    datastream_stream(name, block): {
      local resource = blockType.resource('google_datastream_stream', name),
      _: resource._(block, {
        create_without_validation: build.template(std.get(block, 'create_without_validation', null)),
        customer_managed_encryption_key: build.template(std.get(block, 'customer_managed_encryption_key', null)),
        desired_state: build.template(std.get(block, 'desired_state', null)),
        display_name: build.template(block.display_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        stream_id: build.template(block.stream_id),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      create_without_validation: resource.field('create_without_validation'),
      customer_managed_encryption_key: resource.field('customer_managed_encryption_key'),
      desired_state: resource.field('desired_state'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      stream_id: resource.field('stream_id'),
      terraform_labels: resource.field('terraform_labels'),
    },
    deployment_manager_deployment(name, block): {
      local resource = blockType.resource('google_deployment_manager_deployment', name),
      _: resource._(block, {
        create_policy: build.template(std.get(block, 'create_policy', null)),
        delete_policy: build.template(std.get(block, 'delete_policy', null)),
        deployment_id: build.template(std.get(block, 'deployment_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        manifest: build.template(std.get(block, 'manifest', null)),
        name: build.template(block.name),
        preview: build.template(std.get(block, 'preview', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      create_policy: resource.field('create_policy'),
      delete_policy: resource.field('delete_policy'),
      deployment_id: resource.field('deployment_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      manifest: resource.field('manifest'),
      name: resource.field('name'),
      preview: resource.field('preview'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
    },
    dialogflow_agent(name, block): {
      local resource = blockType.resource('google_dialogflow_agent', name),
      _: resource._(block, {
        api_version: build.template(std.get(block, 'api_version', null)),
        avatar_uri: build.template(std.get(block, 'avatar_uri', null)),
        avatar_uri_backend: build.template(std.get(block, 'avatar_uri_backend', null)),
        classification_threshold: build.template(std.get(block, 'classification_threshold', null)),
        default_language_code: build.template(block.default_language_code),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        enable_logging: build.template(std.get(block, 'enable_logging', null)),
        id: build.template(std.get(block, 'id', null)),
        match_mode: build.template(std.get(block, 'match_mode', null)),
        project: build.template(std.get(block, 'project', null)),
        supported_language_codes: build.template(std.get(block, 'supported_language_codes', null)),
        tier: build.template(std.get(block, 'tier', null)),
        time_zone: build.template(block.time_zone),
      }),
      api_version: resource.field('api_version'),
      avatar_uri: resource.field('avatar_uri'),
      avatar_uri_backend: resource.field('avatar_uri_backend'),
      classification_threshold: resource.field('classification_threshold'),
      default_language_code: resource.field('default_language_code'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      enable_logging: resource.field('enable_logging'),
      id: resource.field('id'),
      match_mode: resource.field('match_mode'),
      project: resource.field('project'),
      supported_language_codes: resource.field('supported_language_codes'),
      tier: resource.field('tier'),
      time_zone: resource.field('time_zone'),
    },
    dialogflow_cx_agent(name, block): {
      local resource = blockType.resource('google_dialogflow_cx_agent', name),
      _: resource._(block, {
        avatar_uri: build.template(std.get(block, 'avatar_uri', null)),
        default_language_code: build.template(block.default_language_code),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        enable_spell_correction: build.template(std.get(block, 'enable_spell_correction', null)),
        enable_stackdriver_logging: build.template(std.get(block, 'enable_stackdriver_logging', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        security_settings: build.template(std.get(block, 'security_settings', null)),
        start_flow: build.template(std.get(block, 'start_flow', null)),
        supported_language_codes: build.template(std.get(block, 'supported_language_codes', null)),
        time_zone: build.template(block.time_zone),
      }),
      avatar_uri: resource.field('avatar_uri'),
      default_language_code: resource.field('default_language_code'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      enable_spell_correction: resource.field('enable_spell_correction'),
      enable_stackdriver_logging: resource.field('enable_stackdriver_logging'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      security_settings: resource.field('security_settings'),
      start_flow: resource.field('start_flow'),
      supported_language_codes: resource.field('supported_language_codes'),
      time_zone: resource.field('time_zone'),
    },
    dialogflow_cx_entity_type(name, block): {
      local resource = blockType.resource('google_dialogflow_cx_entity_type', name),
      _: resource._(block, {
        auto_expansion_mode: build.template(std.get(block, 'auto_expansion_mode', null)),
        display_name: build.template(block.display_name),
        enable_fuzzy_extraction: build.template(std.get(block, 'enable_fuzzy_extraction', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(block.kind),
        language_code: build.template(std.get(block, 'language_code', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(std.get(block, 'parent', null)),
        redact: build.template(std.get(block, 'redact', null)),
      }),
      auto_expansion_mode: resource.field('auto_expansion_mode'),
      display_name: resource.field('display_name'),
      enable_fuzzy_extraction: resource.field('enable_fuzzy_extraction'),
      id: resource.field('id'),
      kind: resource.field('kind'),
      language_code: resource.field('language_code'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      redact: resource.field('redact'),
    },
    dialogflow_cx_environment(name, block): {
      local resource = blockType.resource('google_dialogflow_cx_environment', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(std.get(block, 'parent', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      update_time: resource.field('update_time'),
    },
    dialogflow_cx_flow(name, block): {
      local resource = blockType.resource('google_dialogflow_cx_flow', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        is_default_start_flow: build.template(std.get(block, 'is_default_start_flow', null)),
        language_code: build.template(std.get(block, 'language_code', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(std.get(block, 'parent', null)),
        transition_route_groups: build.template(std.get(block, 'transition_route_groups', null)),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      is_default_start_flow: resource.field('is_default_start_flow'),
      language_code: resource.field('language_code'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      transition_route_groups: resource.field('transition_route_groups'),
    },
    dialogflow_cx_intent(name, block): {
      local resource = blockType.resource('google_dialogflow_cx_intent', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        is_default_negative_intent: build.template(std.get(block, 'is_default_negative_intent', null)),
        is_default_welcome_intent: build.template(std.get(block, 'is_default_welcome_intent', null)),
        is_fallback: build.template(std.get(block, 'is_fallback', null)),
        labels: build.template(std.get(block, 'labels', null)),
        language_code: build.template(std.get(block, 'language_code', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(std.get(block, 'parent', null)),
        priority: build.template(std.get(block, 'priority', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      is_default_negative_intent: resource.field('is_default_negative_intent'),
      is_default_welcome_intent: resource.field('is_default_welcome_intent'),
      is_fallback: resource.field('is_fallback'),
      labels: resource.field('labels'),
      language_code: resource.field('language_code'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      priority: resource.field('priority'),
      terraform_labels: resource.field('terraform_labels'),
    },
    dialogflow_cx_page(name, block): {
      local resource = blockType.resource('google_dialogflow_cx_page', name),
      _: resource._(block, {
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        language_code: build.template(std.get(block, 'language_code', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(std.get(block, 'parent', null)),
        transition_route_groups: build.template(std.get(block, 'transition_route_groups', null)),
      }),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      language_code: resource.field('language_code'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      transition_route_groups: resource.field('transition_route_groups'),
    },
    dialogflow_cx_security_settings(name, block): {
      local resource = blockType.resource('google_dialogflow_cx_security_settings', name),
      _: resource._(block, {
        deidentify_template: build.template(std.get(block, 'deidentify_template', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        inspect_template: build.template(std.get(block, 'inspect_template', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        purge_data_types: build.template(std.get(block, 'purge_data_types', null)),
        redaction_scope: build.template(std.get(block, 'redaction_scope', null)),
        redaction_strategy: build.template(std.get(block, 'redaction_strategy', null)),
        retention_strategy: build.template(std.get(block, 'retention_strategy', null)),
        retention_window_days: build.template(std.get(block, 'retention_window_days', null)),
      }),
      deidentify_template: resource.field('deidentify_template'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      inspect_template: resource.field('inspect_template'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      purge_data_types: resource.field('purge_data_types'),
      redaction_scope: resource.field('redaction_scope'),
      redaction_strategy: resource.field('redaction_strategy'),
      retention_strategy: resource.field('retention_strategy'),
      retention_window_days: resource.field('retention_window_days'),
    },
    dialogflow_cx_test_case(name, block): {
      local resource = blockType.resource('google_dialogflow_cx_test_case', name),
      _: resource._(block, {
        creation_time: build.template(std.get(block, 'creation_time', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        last_test_result: build.template(std.get(block, 'last_test_result', null)),
        name: build.template(std.get(block, 'name', null)),
        notes: build.template(std.get(block, 'notes', null)),
        parent: build.template(std.get(block, 'parent', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      creation_time: resource.field('creation_time'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      last_test_result: resource.field('last_test_result'),
      name: resource.field('name'),
      notes: resource.field('notes'),
      parent: resource.field('parent'),
      tags: resource.field('tags'),
    },
    dialogflow_cx_version(name, block): {
      local resource = blockType.resource('google_dialogflow_cx_version', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        nlu_settings: build.template(std.get(block, 'nlu_settings', null)),
        parent: build.template(std.get(block, 'parent', null)),
        state: build.template(std.get(block, 'state', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      nlu_settings: resource.field('nlu_settings'),
      parent: resource.field('parent'),
      state: resource.field('state'),
    },
    dialogflow_cx_webhook(name, block): {
      local resource = blockType.resource('google_dialogflow_cx_webhook', name),
      _: resource._(block, {
        disabled: build.template(std.get(block, 'disabled', null)),
        display_name: build.template(block.display_name),
        enable_spell_correction: build.template(std.get(block, 'enable_spell_correction', null)),
        enable_stackdriver_logging: build.template(std.get(block, 'enable_stackdriver_logging', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(std.get(block, 'parent', null)),
        security_settings: build.template(std.get(block, 'security_settings', null)),
        start_flow: build.template(std.get(block, 'start_flow', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
      }),
      disabled: resource.field('disabled'),
      display_name: resource.field('display_name'),
      enable_spell_correction: resource.field('enable_spell_correction'),
      enable_stackdriver_logging: resource.field('enable_stackdriver_logging'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      security_settings: resource.field('security_settings'),
      start_flow: resource.field('start_flow'),
      timeout: resource.field('timeout'),
    },
    dialogflow_entity_type(name, block): {
      local resource = blockType.resource('google_dialogflow_entity_type', name),
      _: resource._(block, {
        display_name: build.template(block.display_name),
        enable_fuzzy_extraction: build.template(std.get(block, 'enable_fuzzy_extraction', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(block.kind),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      display_name: resource.field('display_name'),
      enable_fuzzy_extraction: resource.field('enable_fuzzy_extraction'),
      id: resource.field('id'),
      kind: resource.field('kind'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    dialogflow_fulfillment(name, block): {
      local resource = blockType.resource('google_dialogflow_fulfillment', name),
      _: resource._(block, {
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      display_name: resource.field('display_name'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    dialogflow_intent(name, block): {
      local resource = blockType.resource('google_dialogflow_intent', name),
      _: resource._(block, {
        action: build.template(std.get(block, 'action', null)),
        default_response_platforms: build.template(std.get(block, 'default_response_platforms', null)),
        display_name: build.template(block.display_name),
        events: build.template(std.get(block, 'events', null)),
        followup_intent_info: build.template(std.get(block, 'followup_intent_info', null)),
        id: build.template(std.get(block, 'id', null)),
        input_context_names: build.template(std.get(block, 'input_context_names', null)),
        is_fallback: build.template(std.get(block, 'is_fallback', null)),
        ml_disabled: build.template(std.get(block, 'ml_disabled', null)),
        name: build.template(std.get(block, 'name', null)),
        parent_followup_intent_name: build.template(std.get(block, 'parent_followup_intent_name', null)),
        priority: build.template(std.get(block, 'priority', null)),
        project: build.template(std.get(block, 'project', null)),
        reset_contexts: build.template(std.get(block, 'reset_contexts', null)),
        root_followup_intent_name: build.template(std.get(block, 'root_followup_intent_name', null)),
        webhook_state: build.template(std.get(block, 'webhook_state', null)),
      }),
      action: resource.field('action'),
      default_response_platforms: resource.field('default_response_platforms'),
      display_name: resource.field('display_name'),
      events: resource.field('events'),
      followup_intent_info: resource.field('followup_intent_info'),
      id: resource.field('id'),
      input_context_names: resource.field('input_context_names'),
      is_fallback: resource.field('is_fallback'),
      ml_disabled: resource.field('ml_disabled'),
      name: resource.field('name'),
      parent_followup_intent_name: resource.field('parent_followup_intent_name'),
      priority: resource.field('priority'),
      project: resource.field('project'),
      reset_contexts: resource.field('reset_contexts'),
      root_followup_intent_name: resource.field('root_followup_intent_name'),
      webhook_state: resource.field('webhook_state'),
    },
    discovery_engine_chat_engine(name, block): {
      local resource = blockType.resource('google_discovery_engine_chat_engine', name),
      _: resource._(block, {
        chat_engine_metadata: build.template(std.get(block, 'chat_engine_metadata', null)),
        collection_id: build.template(block.collection_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        data_store_ids: build.template(block.data_store_ids),
        display_name: build.template(block.display_name),
        engine_id: build.template(block.engine_id),
        id: build.template(std.get(block, 'id', null)),
        industry_vertical: build.template(std.get(block, 'industry_vertical', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      chat_engine_metadata: resource.field('chat_engine_metadata'),
      collection_id: resource.field('collection_id'),
      create_time: resource.field('create_time'),
      data_store_ids: resource.field('data_store_ids'),
      display_name: resource.field('display_name'),
      engine_id: resource.field('engine_id'),
      id: resource.field('id'),
      industry_vertical: resource.field('industry_vertical'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      update_time: resource.field('update_time'),
    },
    discovery_engine_data_store(name, block): {
      local resource = blockType.resource('google_discovery_engine_data_store', name),
      _: resource._(block, {
        content_config: build.template(block.content_config),
        create_advanced_site_search: build.template(std.get(block, 'create_advanced_site_search', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        data_store_id: build.template(block.data_store_id),
        default_schema_id: build.template(std.get(block, 'default_schema_id', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        industry_vertical: build.template(block.industry_vertical),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        skip_default_schema_creation: build.template(std.get(block, 'skip_default_schema_creation', null)),
        solution_types: build.template(std.get(block, 'solution_types', null)),
      }),
      content_config: resource.field('content_config'),
      create_advanced_site_search: resource.field('create_advanced_site_search'),
      create_time: resource.field('create_time'),
      data_store_id: resource.field('data_store_id'),
      default_schema_id: resource.field('default_schema_id'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      industry_vertical: resource.field('industry_vertical'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      skip_default_schema_creation: resource.field('skip_default_schema_creation'),
      solution_types: resource.field('solution_types'),
    },
    discovery_engine_schema(name, block): {
      local resource = blockType.resource('google_discovery_engine_schema', name),
      _: resource._(block, {
        data_store_id: build.template(block.data_store_id),
        id: build.template(std.get(block, 'id', null)),
        json_schema: build.template(std.get(block, 'json_schema', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        schema_id: build.template(block.schema_id),
      }),
      data_store_id: resource.field('data_store_id'),
      id: resource.field('id'),
      json_schema: resource.field('json_schema'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      schema_id: resource.field('schema_id'),
    },
    discovery_engine_search_engine(name, block): {
      local resource = blockType.resource('google_discovery_engine_search_engine', name),
      _: resource._(block, {
        collection_id: build.template(block.collection_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        data_store_ids: build.template(block.data_store_ids),
        display_name: build.template(block.display_name),
        engine_id: build.template(block.engine_id),
        id: build.template(std.get(block, 'id', null)),
        industry_vertical: build.template(std.get(block, 'industry_vertical', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      collection_id: resource.field('collection_id'),
      create_time: resource.field('create_time'),
      data_store_ids: resource.field('data_store_ids'),
      display_name: resource.field('display_name'),
      engine_id: resource.field('engine_id'),
      id: resource.field('id'),
      industry_vertical: resource.field('industry_vertical'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      update_time: resource.field('update_time'),
    },
    discovery_engine_target_site(name, block): {
      local resource = blockType.resource('google_discovery_engine_target_site', name),
      _: resource._(block, {
        data_store_id: build.template(block.data_store_id),
        exact_match: build.template(std.get(block, 'exact_match', null)),
        failure_reason: build.template(std.get(block, 'failure_reason', null)),
        generated_uri_pattern: build.template(std.get(block, 'generated_uri_pattern', null)),
        id: build.template(std.get(block, 'id', null)),
        indexing_status: build.template(std.get(block, 'indexing_status', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        provided_uri_pattern: build.template(block.provided_uri_pattern),
        root_domain_uri: build.template(std.get(block, 'root_domain_uri', null)),
        site_verification_info: build.template(std.get(block, 'site_verification_info', null)),
        target_site_id: build.template(std.get(block, 'target_site_id', null)),
        type: build.template(std.get(block, 'type', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      data_store_id: resource.field('data_store_id'),
      exact_match: resource.field('exact_match'),
      failure_reason: resource.field('failure_reason'),
      generated_uri_pattern: resource.field('generated_uri_pattern'),
      id: resource.field('id'),
      indexing_status: resource.field('indexing_status'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      provided_uri_pattern: resource.field('provided_uri_pattern'),
      root_domain_uri: resource.field('root_domain_uri'),
      site_verification_info: resource.field('site_verification_info'),
      target_site_id: resource.field('target_site_id'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    dns_managed_zone(name, block): {
      local resource = blockType.resource('google_dns_managed_zone', name),
      _: resource._(block, {
        creation_time: build.template(std.get(block, 'creation_time', null)),
        description: build.template(std.get(block, 'description', null)),
        dns_name: build.template(block.dns_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        managed_zone_id: build.template(std.get(block, 'managed_zone_id', null)),
        name: build.template(block.name),
        name_servers: build.template(std.get(block, 'name_servers', null)),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        visibility: build.template(std.get(block, 'visibility', null)),
      }),
      creation_time: resource.field('creation_time'),
      description: resource.field('description'),
      dns_name: resource.field('dns_name'),
      effective_labels: resource.field('effective_labels'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      managed_zone_id: resource.field('managed_zone_id'),
      name: resource.field('name'),
      name_servers: resource.field('name_servers'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      visibility: resource.field('visibility'),
    },
    dns_managed_zone_iam_binding(name, block): {
      local resource = blockType.resource('google_dns_managed_zone_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_zone: build.template(block.managed_zone),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      managed_zone: resource.field('managed_zone'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dns_managed_zone_iam_member(name, block): {
      local resource = blockType.resource('google_dns_managed_zone_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_zone: build.template(block.managed_zone),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      managed_zone: resource.field('managed_zone'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    dns_managed_zone_iam_policy(name, block): {
      local resource = blockType.resource('google_dns_managed_zone_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_zone: build.template(block.managed_zone),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      managed_zone: resource.field('managed_zone'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dns_policy(name, block): {
      local resource = blockType.resource('google_dns_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        enable_inbound_forwarding: build.template(std.get(block, 'enable_inbound_forwarding', null)),
        enable_logging: build.template(std.get(block, 'enable_logging', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
      }),
      description: resource.field('description'),
      enable_inbound_forwarding: resource.field('enable_inbound_forwarding'),
      enable_logging: resource.field('enable_logging'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    dns_record_set(name, block): {
      local resource = blockType.resource('google_dns_record_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        managed_zone: build.template(block.managed_zone),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        rrdatas: build.template(std.get(block, 'rrdatas', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        type: build.template(block.type),
      }),
      id: resource.field('id'),
      managed_zone: resource.field('managed_zone'),
      name: resource.field('name'),
      project: resource.field('project'),
      rrdatas: resource.field('rrdatas'),
      ttl: resource.field('ttl'),
      type: resource.field('type'),
    },
    dns_response_policy(name, block): {
      local resource = blockType.resource('google_dns_response_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        response_policy_name: build.template(block.response_policy_name),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      project: resource.field('project'),
      response_policy_name: resource.field('response_policy_name'),
    },
    dns_response_policy_rule(name, block): {
      local resource = blockType.resource('google_dns_response_policy_rule', name),
      _: resource._(block, {
        dns_name: build.template(block.dns_name),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        response_policy: build.template(block.response_policy),
        rule_name: build.template(block.rule_name),
      }),
      dns_name: resource.field('dns_name'),
      id: resource.field('id'),
      project: resource.field('project'),
      response_policy: resource.field('response_policy'),
      rule_name: resource.field('rule_name'),
    },
    document_ai_processor(name, block): {
      local resource = blockType.resource('google_document_ai_processor', name),
      _: resource._(block, {
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        type: build.template(block.type),
      }),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      type: resource.field('type'),
    },
    document_ai_processor_default_version(name, block): {
      local resource = blockType.resource('google_document_ai_processor_default_version', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        processor: build.template(block.processor),
        version: build.template(block.version),
      }),
      id: resource.field('id'),
      processor: resource.field('processor'),
      version: resource.field('version'),
    },
    document_ai_warehouse_document_schema(name, block): {
      local resource = blockType.resource('google_document_ai_warehouse_document_schema', name),
      _: resource._(block, {
        display_name: build.template(block.display_name),
        document_is_folder: build.template(std.get(block, 'document_is_folder', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project_number: build.template(block.project_number),
      }),
      display_name: resource.field('display_name'),
      document_is_folder: resource.field('document_is_folder'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project_number: resource.field('project_number'),
    },
    document_ai_warehouse_location(name, block): {
      local resource = blockType.resource('google_document_ai_warehouse_location', name),
      _: resource._(block, {
        access_control_mode: build.template(block.access_control_mode),
        database_type: build.template(block.database_type),
        document_creator_default_role: build.template(std.get(block, 'document_creator_default_role', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key: build.template(std.get(block, 'kms_key', null)),
        location: build.template(block.location),
        project_number: build.template(block.project_number),
      }),
      access_control_mode: resource.field('access_control_mode'),
      database_type: resource.field('database_type'),
      document_creator_default_role: resource.field('document_creator_default_role'),
      id: resource.field('id'),
      kms_key: resource.field('kms_key'),
      location: resource.field('location'),
      project_number: resource.field('project_number'),
    },
    edgecontainer_cluster(name, block): {
      local resource = blockType.resource('google_edgecontainer_cluster', name),
      _: resource._(block, {
        cluster_ca_certificate: build.template(std.get(block, 'cluster_ca_certificate', null)),
        control_plane_version: build.template(std.get(block, 'control_plane_version', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        default_max_pods_per_node: build.template(std.get(block, 'default_max_pods_per_node', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        external_load_balancer_ipv4_address_pools: build.template(std.get(block, 'external_load_balancer_ipv4_address_pools', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        maintenance_events: build.template(std.get(block, 'maintenance_events', null)),
        name: build.template(block.name),
        node_version: build.template(std.get(block, 'node_version', null)),
        port: build.template(std.get(block, 'port', null)),
        project: build.template(std.get(block, 'project', null)),
        release_channel: build.template(std.get(block, 'release_channel', null)),
        status: build.template(std.get(block, 'status', null)),
        target_version: build.template(std.get(block, 'target_version', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      cluster_ca_certificate: resource.field('cluster_ca_certificate'),
      control_plane_version: resource.field('control_plane_version'),
      create_time: resource.field('create_time'),
      default_max_pods_per_node: resource.field('default_max_pods_per_node'),
      effective_labels: resource.field('effective_labels'),
      endpoint: resource.field('endpoint'),
      external_load_balancer_ipv4_address_pools: resource.field('external_load_balancer_ipv4_address_pools'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      maintenance_events: resource.field('maintenance_events'),
      name: resource.field('name'),
      node_version: resource.field('node_version'),
      port: resource.field('port'),
      project: resource.field('project'),
      release_channel: resource.field('release_channel'),
      status: resource.field('status'),
      target_version: resource.field('target_version'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    edgecontainer_node_pool(name, block): {
      local resource = blockType.resource('google_edgecontainer_node_pool', name),
      _: resource._(block, {
        cluster: build.template(block.cluster),
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        machine_filter: build.template(std.get(block, 'machine_filter', null)),
        name: build.template(block.name),
        node_count: build.template(block.node_count),
        node_location: build.template(block.node_location),
        node_version: build.template(std.get(block, 'node_version', null)),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      cluster: resource.field('cluster'),
      create_time: resource.field('create_time'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      machine_filter: resource.field('machine_filter'),
      name: resource.field('name'),
      node_count: resource.field('node_count'),
      node_location: resource.field('node_location'),
      node_version: resource.field('node_version'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    edgecontainer_vpn_connection(name, block): {
      local resource = blockType.resource('google_edgecontainer_vpn_connection', name),
      _: resource._(block, {
        cluster: build.template(block.cluster),
        create_time: build.template(std.get(block, 'create_time', null)),
        details: build.template(std.get(block, 'details', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_high_availability: build.template(std.get(block, 'enable_high_availability', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        nat_gateway_ip: build.template(std.get(block, 'nat_gateway_ip', null)),
        project: build.template(std.get(block, 'project', null)),
        router: build.template(std.get(block, 'router', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        vpc: build.template(std.get(block, 'vpc', null)),
      }),
      cluster: resource.field('cluster'),
      create_time: resource.field('create_time'),
      details: resource.field('details'),
      effective_labels: resource.field('effective_labels'),
      enable_high_availability: resource.field('enable_high_availability'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      nat_gateway_ip: resource.field('nat_gateway_ip'),
      project: resource.field('project'),
      router: resource.field('router'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
      vpc: resource.field('vpc'),
    },
    edgenetwork_network(name, block): {
      local resource = blockType.resource('google_edgenetwork_network', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        mtu: build.template(std.get(block, 'mtu', null)),
        name: build.template(std.get(block, 'name', null)),
        network_id: build.template(block.network_id),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        zone: build.template(block.zone),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      mtu: resource.field('mtu'),
      name: resource.field('name'),
      network_id: resource.field('network_id'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
      zone: resource.field('zone'),
    },
    edgenetwork_subnet(name, block): {
      local resource = blockType.resource('google_edgenetwork_subnet', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv4_cidr: build.template(std.get(block, 'ipv4_cidr', null)),
        ipv6_cidr: build.template(std.get(block, 'ipv6_cidr', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        network: build.template(block.network),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        subnet_id: build.template(block.subnet_id),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        vlan_id: build.template(std.get(block, 'vlan_id', null)),
        zone: build.template(block.zone),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      ipv4_cidr: resource.field('ipv4_cidr'),
      ipv6_cidr: resource.field('ipv6_cidr'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      state: resource.field('state'),
      subnet_id: resource.field('subnet_id'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
      vlan_id: resource.field('vlan_id'),
      zone: resource.field('zone'),
    },
    endpoints_service(name, block): {
      local resource = blockType.resource('google_endpoints_service', name),
      _: resource._(block, {
        apis: build.template(std.get(block, 'apis', null)),
        config_id: build.template(std.get(block, 'config_id', null)),
        dns_address: build.template(std.get(block, 'dns_address', null)),
        endpoints: build.template(std.get(block, 'endpoints', null)),
        grpc_config: build.template(std.get(block, 'grpc_config', null)),
        id: build.template(std.get(block, 'id', null)),
        openapi_config: build.template(std.get(block, 'openapi_config', null)),
        project: build.template(std.get(block, 'project', null)),
        protoc_output_base64: build.template(std.get(block, 'protoc_output_base64', null)),
        service_name: build.template(block.service_name),
      }),
      apis: resource.field('apis'),
      config_id: resource.field('config_id'),
      dns_address: resource.field('dns_address'),
      endpoints: resource.field('endpoints'),
      grpc_config: resource.field('grpc_config'),
      id: resource.field('id'),
      openapi_config: resource.field('openapi_config'),
      project: resource.field('project'),
      protoc_output_base64: resource.field('protoc_output_base64'),
      service_name: resource.field('service_name'),
    },
    endpoints_service_consumers_iam_binding(name, block): {
      local resource = blockType.resource('google_endpoints_service_consumers_iam_binding', name),
      _: resource._(block, {
        consumer_project: build.template(block.consumer_project),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
        service_name: build.template(block.service_name),
      }),
      consumer_project: resource.field('consumer_project'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
      service_name: resource.field('service_name'),
    },
    endpoints_service_consumers_iam_member(name, block): {
      local resource = blockType.resource('google_endpoints_service_consumers_iam_member', name),
      _: resource._(block, {
        consumer_project: build.template(block.consumer_project),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
        service_name: build.template(block.service_name),
      }),
      consumer_project: resource.field('consumer_project'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
      service_name: resource.field('service_name'),
    },
    endpoints_service_consumers_iam_policy(name, block): {
      local resource = blockType.resource('google_endpoints_service_consumers_iam_policy', name),
      _: resource._(block, {
        consumer_project: build.template(block.consumer_project),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        service_name: build.template(block.service_name),
      }),
      consumer_project: resource.field('consumer_project'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      service_name: resource.field('service_name'),
    },
    endpoints_service_iam_binding(name, block): {
      local resource = blockType.resource('google_endpoints_service_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
        service_name: build.template(block.service_name),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
      service_name: resource.field('service_name'),
    },
    endpoints_service_iam_member(name, block): {
      local resource = blockType.resource('google_endpoints_service_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
        service_name: build.template(block.service_name),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
      service_name: resource.field('service_name'),
    },
    endpoints_service_iam_policy(name, block): {
      local resource = blockType.resource('google_endpoints_service_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        service_name: build.template(block.service_name),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      service_name: resource.field('service_name'),
    },
    essential_contacts_contact(name, block): {
      local resource = blockType.resource('google_essential_contacts_contact', name),
      _: resource._(block, {
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
        language_tag: build.template(block.language_tag),
        name: build.template(std.get(block, 'name', null)),
        notification_category_subscriptions: build.template(block.notification_category_subscriptions),
        parent: build.template(block.parent),
      }),
      email: resource.field('email'),
      id: resource.field('id'),
      language_tag: resource.field('language_tag'),
      name: resource.field('name'),
      notification_category_subscriptions: resource.field('notification_category_subscriptions'),
      parent: resource.field('parent'),
    },
    eventarc_channel(name, block): {
      local resource = blockType.resource('google_eventarc_channel', name),
      _: resource._(block, {
        activation_token: build.template(std.get(block, 'activation_token', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        crypto_key_name: build.template(std.get(block, 'crypto_key_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        pubsub_topic: build.template(std.get(block, 'pubsub_topic', null)),
        state: build.template(std.get(block, 'state', null)),
        third_party_provider: build.template(std.get(block, 'third_party_provider', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      activation_token: resource.field('activation_token'),
      create_time: resource.field('create_time'),
      crypto_key_name: resource.field('crypto_key_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      pubsub_topic: resource.field('pubsub_topic'),
      state: resource.field('state'),
      third_party_provider: resource.field('third_party_provider'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    eventarc_google_channel_config(name, block): {
      local resource = blockType.resource('google_eventarc_google_channel_config', name),
      _: resource._(block, {
        crypto_key_name: build.template(std.get(block, 'crypto_key_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      crypto_key_name: resource.field('crypto_key_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      update_time: resource.field('update_time'),
    },
    eventarc_trigger(name, block): {
      local resource = blockType.resource('google_eventarc_trigger', name),
      _: resource._(block, {
        channel: build.template(std.get(block, 'channel', null)),
        conditions: build.template(std.get(block, 'conditions', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        event_data_content_type: build.template(std.get(block, 'event_data_content_type', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      channel: resource.field('channel'),
      conditions: resource.field('conditions'),
      create_time: resource.field('create_time'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      event_data_content_type: resource.field('event_data_content_type'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_account: resource.field('service_account'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    filestore_backup(name, block): {
      local resource = blockType.resource('google_filestore_backup', name),
      _: resource._(block, {
        capacity_gb: build.template(std.get(block, 'capacity_gb', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        download_bytes: build.template(std.get(block, 'download_bytes', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        source_file_share: build.template(block.source_file_share),
        source_instance: build.template(block.source_instance),
        source_instance_tier: build.template(std.get(block, 'source_instance_tier', null)),
        state: build.template(std.get(block, 'state', null)),
        storage_bytes: build.template(std.get(block, 'storage_bytes', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      capacity_gb: resource.field('capacity_gb'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      download_bytes: resource.field('download_bytes'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      source_file_share: resource.field('source_file_share'),
      source_instance: resource.field('source_instance'),
      source_instance_tier: resource.field('source_instance_tier'),
      state: resource.field('state'),
      storage_bytes: resource.field('storage_bytes'),
      terraform_labels: resource.field('terraform_labels'),
    },
    filestore_instance(name, block): {
      local resource = blockType.resource('google_filestore_instance', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        deletion_protection_enabled: build.template(std.get(block, 'deletion_protection_enabled', null)),
        deletion_protection_reason: build.template(std.get(block, 'deletion_protection_reason', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        tier: build.template(block.tier),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      create_time: resource.field('create_time'),
      deletion_protection_enabled: resource.field('deletion_protection_enabled'),
      deletion_protection_reason: resource.field('deletion_protection_reason'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      protocol: resource.field('protocol'),
      terraform_labels: resource.field('terraform_labels'),
      tier: resource.field('tier'),
      zone: resource.field('zone'),
    },
    filestore_snapshot(name, block): {
      local resource = blockType.resource('google_filestore_snapshot', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        filesystem_used_bytes: build.template(std.get(block, 'filesystem_used_bytes', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      filesystem_used_bytes: resource.field('filesystem_used_bytes'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
    },
    firebase_app_check_app_attest_config(name, block): {
      local resource = blockType.resource('google_firebase_app_check_app_attest_config', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        token_ttl: build.template(std.get(block, 'token_ttl', null)),
      }),
      app_id: resource.field('app_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      token_ttl: resource.field('token_ttl'),
    },
    firebase_app_check_debug_token(name, block): {
      local resource = blockType.resource('google_firebase_app_check_debug_token', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        debug_token_id: build.template(std.get(block, 'debug_token_id', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        token: build.template(block.token),
      }),
      app_id: resource.field('app_id'),
      debug_token_id: resource.field('debug_token_id'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      project: resource.field('project'),
      token: resource.field('token'),
    },
    firebase_app_check_device_check_config(name, block): {
      local resource = blockType.resource('google_firebase_app_check_device_check_config', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        id: build.template(std.get(block, 'id', null)),
        key_id: build.template(block.key_id),
        name: build.template(std.get(block, 'name', null)),
        private_key: build.template(block.private_key),
        private_key_set: build.template(std.get(block, 'private_key_set', null)),
        project: build.template(std.get(block, 'project', null)),
        token_ttl: build.template(std.get(block, 'token_ttl', null)),
      }),
      app_id: resource.field('app_id'),
      id: resource.field('id'),
      key_id: resource.field('key_id'),
      name: resource.field('name'),
      private_key: resource.field('private_key'),
      private_key_set: resource.field('private_key_set'),
      project: resource.field('project'),
      token_ttl: resource.field('token_ttl'),
    },
    firebase_app_check_play_integrity_config(name, block): {
      local resource = blockType.resource('google_firebase_app_check_play_integrity_config', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        token_ttl: build.template(std.get(block, 'token_ttl', null)),
      }),
      app_id: resource.field('app_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      token_ttl: resource.field('token_ttl'),
    },
    firebase_app_check_recaptcha_enterprise_config(name, block): {
      local resource = blockType.resource('google_firebase_app_check_recaptcha_enterprise_config', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        site_key: build.template(block.site_key),
        token_ttl: build.template(std.get(block, 'token_ttl', null)),
      }),
      app_id: resource.field('app_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      site_key: resource.field('site_key'),
      token_ttl: resource.field('token_ttl'),
    },
    firebase_app_check_recaptcha_v3_config(name, block): {
      local resource = blockType.resource('google_firebase_app_check_recaptcha_v3_config', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        site_secret: build.template(block.site_secret),
        site_secret_set: build.template(std.get(block, 'site_secret_set', null)),
        token_ttl: build.template(std.get(block, 'token_ttl', null)),
      }),
      app_id: resource.field('app_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      site_secret: resource.field('site_secret'),
      site_secret_set: resource.field('site_secret_set'),
      token_ttl: resource.field('token_ttl'),
    },
    firebase_app_check_service_config(name, block): {
      local resource = blockType.resource('google_firebase_app_check_service_config', name),
      _: resource._(block, {
        enforcement_mode: build.template(std.get(block, 'enforcement_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        service_id: build.template(block.service_id),
      }),
      enforcement_mode: resource.field('enforcement_mode'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_id: resource.field('service_id'),
    },
    firebaserules_release(name, block): {
      local resource = blockType.resource('google_firebaserules_release', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        ruleset_name: build.template(block.ruleset_name),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      disabled: resource.field('disabled'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      ruleset_name: resource.field('ruleset_name'),
      update_time: resource.field('update_time'),
    },
    firebaserules_ruleset(name, block): {
      local resource = blockType.resource('google_firebaserules_ruleset', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      create_time: resource.field('create_time'),
      id: resource.field('id'),
      metadata: resource.field('metadata'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    firestore_backup_schedule(name, block): {
      local resource = blockType.resource('google_firestore_backup_schedule', name),
      _: resource._(block, {
        database: build.template(std.get(block, 'database', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        retention: build.template(block.retention),
      }),
      database: resource.field('database'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      retention: resource.field('retention'),
    },
    firestore_database(name, block): {
      local resource = blockType.resource('google_firestore_database', name),
      _: resource._(block, {
        app_engine_integration_mode: build.template(std.get(block, 'app_engine_integration_mode', null)),
        concurrency_mode: build.template(std.get(block, 'concurrency_mode', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_protection_state: build.template(std.get(block, 'delete_protection_state', null)),
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        earliest_version_time: build.template(std.get(block, 'earliest_version_time', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key_prefix: build.template(std.get(block, 'key_prefix', null)),
        location_id: build.template(block.location_id),
        name: build.template(block.name),
        point_in_time_recovery_enablement: build.template(std.get(block, 'point_in_time_recovery_enablement', null)),
        project: build.template(std.get(block, 'project', null)),
        type: build.template(block.type),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        version_retention_period: build.template(std.get(block, 'version_retention_period', null)),
      }),
      app_engine_integration_mode: resource.field('app_engine_integration_mode'),
      concurrency_mode: resource.field('concurrency_mode'),
      create_time: resource.field('create_time'),
      delete_protection_state: resource.field('delete_protection_state'),
      deletion_policy: resource.field('deletion_policy'),
      earliest_version_time: resource.field('earliest_version_time'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      key_prefix: resource.field('key_prefix'),
      location_id: resource.field('location_id'),
      name: resource.field('name'),
      point_in_time_recovery_enablement: resource.field('point_in_time_recovery_enablement'),
      project: resource.field('project'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      version_retention_period: resource.field('version_retention_period'),
    },
    firestore_document(name, block): {
      local resource = blockType.resource('google_firestore_document', name),
      _: resource._(block, {
        collection: build.template(block.collection),
        create_time: build.template(std.get(block, 'create_time', null)),
        database: build.template(std.get(block, 'database', null)),
        document_id: build.template(block.document_id),
        fields: build.template(block.fields),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        path: build.template(std.get(block, 'path', null)),
        project: build.template(std.get(block, 'project', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      collection: resource.field('collection'),
      create_time: resource.field('create_time'),
      database: resource.field('database'),
      document_id: resource.field('document_id'),
      fields: resource.field('fields'),
      id: resource.field('id'),
      name: resource.field('name'),
      path: resource.field('path'),
      project: resource.field('project'),
      update_time: resource.field('update_time'),
    },
    firestore_field(name, block): {
      local resource = blockType.resource('google_firestore_field', name),
      _: resource._(block, {
        collection: build.template(block.collection),
        database: build.template(std.get(block, 'database', null)),
        field: build.template(block.field),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      collection: resource.field('collection'),
      database: resource.field('database'),
      field: resource.field('field'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    firestore_index(name, block): {
      local resource = blockType.resource('google_firestore_index', name),
      _: resource._(block, {
        api_scope: build.template(std.get(block, 'api_scope', null)),
        collection: build.template(block.collection),
        database: build.template(std.get(block, 'database', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        query_scope: build.template(std.get(block, 'query_scope', null)),
      }),
      api_scope: resource.field('api_scope'),
      collection: resource.field('collection'),
      database: resource.field('database'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      query_scope: resource.field('query_scope'),
    },
    folder(name, block): {
      local resource = blockType.resource('google_folder', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        display_name: build.template(block.display_name),
        folder_id: build.template(std.get(block, 'folder_id', null)),
        id: build.template(std.get(block, 'id', null)),
        lifecycle_state: build.template(std.get(block, 'lifecycle_state', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      create_time: resource.field('create_time'),
      deletion_protection: resource.field('deletion_protection'),
      display_name: resource.field('display_name'),
      folder_id: resource.field('folder_id'),
      id: resource.field('id'),
      lifecycle_state: resource.field('lifecycle_state'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      tags: resource.field('tags'),
    },
    folder_access_approval_settings(name, block): {
      local resource = blockType.resource('google_folder_access_approval_settings', name),
      _: resource._(block, {
        active_key_version: build.template(std.get(block, 'active_key_version', null)),
        ancestor_has_active_key_version: build.template(std.get(block, 'ancestor_has_active_key_version', null)),
        enrolled_ancestor: build.template(std.get(block, 'enrolled_ancestor', null)),
        folder_id: build.template(block.folder_id),
        id: build.template(std.get(block, 'id', null)),
        invalid_key_version: build.template(std.get(block, 'invalid_key_version', null)),
        name: build.template(std.get(block, 'name', null)),
        notification_emails: build.template(std.get(block, 'notification_emails', null)),
      }),
      active_key_version: resource.field('active_key_version'),
      ancestor_has_active_key_version: resource.field('ancestor_has_active_key_version'),
      enrolled_ancestor: resource.field('enrolled_ancestor'),
      folder_id: resource.field('folder_id'),
      id: resource.field('id'),
      invalid_key_version: resource.field('invalid_key_version'),
      name: resource.field('name'),
      notification_emails: resource.field('notification_emails'),
    },
    folder_iam_audit_config(name, block): {
      local resource = blockType.resource('google_folder_iam_audit_config', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        service: build.template(block.service),
      }),
      etag: resource.field('etag'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      service: resource.field('service'),
    },
    folder_iam_binding(name, block): {
      local resource = blockType.resource('google_folder_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
    },
    folder_iam_member(name, block): {
      local resource = blockType.resource('google_folder_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
    },
    folder_iam_policy(name, block): {
      local resource = blockType.resource('google_folder_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
      }),
      etag: resource.field('etag'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    folder_organization_policy(name, block): {
      local resource = blockType.resource('google_folder_organization_policy', name),
      _: resource._(block, {
        constraint: build.template(block.constraint),
        etag: build.template(std.get(block, 'etag', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      constraint: resource.field('constraint'),
      etag: resource.field('etag'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      update_time: resource.field('update_time'),
      version: resource.field('version'),
    },
    gke_backup_backup_plan(name, block): {
      local resource = blockType.resource('google_gke_backup_backup_plan', name),
      _: resource._(block, {
        cluster: build.template(block.cluster),
        deactivated: build.template(std.get(block, 'deactivated', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        protected_pod_count: build.template(std.get(block, 'protected_pod_count', null)),
        state: build.template(std.get(block, 'state', null)),
        state_reason: build.template(std.get(block, 'state_reason', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      cluster: resource.field('cluster'),
      deactivated: resource.field('deactivated'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      protected_pod_count: resource.field('protected_pod_count'),
      state: resource.field('state'),
      state_reason: resource.field('state_reason'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
    },
    gke_backup_backup_plan_iam_binding(name, block): {
      local resource = blockType.resource('google_gke_backup_backup_plan_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    gke_backup_backup_plan_iam_member(name, block): {
      local resource = blockType.resource('google_gke_backup_backup_plan_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    gke_backup_backup_plan_iam_policy(name, block): {
      local resource = blockType.resource('google_gke_backup_backup_plan_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    gke_backup_restore_plan(name, block): {
      local resource = blockType.resource('google_gke_backup_restore_plan', name),
      _: resource._(block, {
        backup_plan: build.template(block.backup_plan),
        cluster: build.template(block.cluster),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        state_reason: build.template(std.get(block, 'state_reason', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      backup_plan: resource.field('backup_plan'),
      cluster: resource.field('cluster'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      state_reason: resource.field('state_reason'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
    },
    gke_backup_restore_plan_iam_binding(name, block): {
      local resource = blockType.resource('google_gke_backup_restore_plan_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    gke_backup_restore_plan_iam_member(name, block): {
      local resource = blockType.resource('google_gke_backup_restore_plan_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    gke_backup_restore_plan_iam_policy(name, block): {
      local resource = blockType.resource('google_gke_backup_restore_plan_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    gke_hub_feature(name, block): {
      local resource = blockType.resource('google_gke_hub_feature', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        resource_state: build.template(std.get(block, 'resource_state', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      resource_state: resource.field('resource_state'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    gke_hub_feature_iam_binding(name, block): {
      local resource = blockType.resource('google_gke_hub_feature_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    gke_hub_feature_iam_member(name, block): {
      local resource = blockType.resource('google_gke_hub_feature_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    gke_hub_feature_iam_policy(name, block): {
      local resource = blockType.resource('google_gke_hub_feature_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    gke_hub_feature_membership(name, block): {
      local resource = blockType.resource('google_gke_hub_feature_membership', name),
      _: resource._(block, {
        feature: build.template(block.feature),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        membership: build.template(block.membership),
        membership_location: build.template(std.get(block, 'membership_location', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      feature: resource.field('feature'),
      id: resource.field('id'),
      location: resource.field('location'),
      membership: resource.field('membership'),
      membership_location: resource.field('membership_location'),
      project: resource.field('project'),
    },
    gke_hub_fleet(name, block): {
      local resource = blockType.resource('google_gke_hub_fleet', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      project: resource.field('project'),
      state: resource.field('state'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    gke_hub_membership(name, block): {
      local resource = blockType.resource('google_gke_hub_membership', name),
      _: resource._(block, {
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        membership_id: build.template(block.membership_id),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      membership_id: resource.field('membership_id'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
    },
    gke_hub_membership_binding(name, block): {
      local resource = blockType.resource('google_gke_hub_membership_binding', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        membership_binding_id: build.template(block.membership_binding_id),
        membership_id: build.template(block.membership_id),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        scope: build.template(block.scope),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      membership_binding_id: resource.field('membership_binding_id'),
      membership_id: resource.field('membership_id'),
      name: resource.field('name'),
      project: resource.field('project'),
      scope: resource.field('scope'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    gke_hub_membership_iam_binding(name, block): {
      local resource = blockType.resource('google_gke_hub_membership_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        membership_id: build.template(block.membership_id),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      membership_id: resource.field('membership_id'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    gke_hub_membership_iam_member(name, block): {
      local resource = blockType.resource('google_gke_hub_membership_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        membership_id: build.template(block.membership_id),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      membership_id: resource.field('membership_id'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    gke_hub_membership_iam_policy(name, block): {
      local resource = blockType.resource('google_gke_hub_membership_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        membership_id: build.template(block.membership_id),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      membership_id: resource.field('membership_id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    gke_hub_namespace(name, block): {
      local resource = blockType.resource('google_gke_hub_namespace', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        namespace_labels: build.template(std.get(block, 'namespace_labels', null)),
        project: build.template(std.get(block, 'project', null)),
        scope: build.template(block.scope),
        scope_id: build.template(block.scope_id),
        scope_namespace_id: build.template(block.scope_namespace_id),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      namespace_labels: resource.field('namespace_labels'),
      project: resource.field('project'),
      scope: resource.field('scope'),
      scope_id: resource.field('scope_id'),
      scope_namespace_id: resource.field('scope_namespace_id'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    gke_hub_scope(name, block): {
      local resource = blockType.resource('google_gke_hub_scope', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        namespace_labels: build.template(std.get(block, 'namespace_labels', null)),
        project: build.template(std.get(block, 'project', null)),
        scope_id: build.template(block.scope_id),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      namespace_labels: resource.field('namespace_labels'),
      project: resource.field('project'),
      scope_id: resource.field('scope_id'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    gke_hub_scope_iam_binding(name, block): {
      local resource = blockType.resource('google_gke_hub_scope_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        scope_id: build.template(block.scope_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      scope_id: resource.field('scope_id'),
    },
    gke_hub_scope_iam_member(name, block): {
      local resource = blockType.resource('google_gke_hub_scope_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        scope_id: build.template(block.scope_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      scope_id: resource.field('scope_id'),
    },
    gke_hub_scope_iam_policy(name, block): {
      local resource = blockType.resource('google_gke_hub_scope_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        scope_id: build.template(block.scope_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      scope_id: resource.field('scope_id'),
    },
    gke_hub_scope_rbac_role_binding(name, block): {
      local resource = blockType.resource('google_gke_hub_scope_rbac_role_binding', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        group: build.template(std.get(block, 'group', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        scope_id: build.template(block.scope_id),
        scope_rbac_role_binding_id: build.template(block.scope_rbac_role_binding_id),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        user: build.template(std.get(block, 'user', null)),
      }),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      effective_labels: resource.field('effective_labels'),
      group: resource.field('group'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      scope_id: resource.field('scope_id'),
      scope_rbac_role_binding_id: resource.field('scope_rbac_role_binding_id'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      user: resource.field('user'),
    },
    gkeonprem_bare_metal_admin_cluster(name, block): {
      local resource = blockType.resource('google_gkeonprem_bare_metal_admin_cluster', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        bare_metal_version: build.template(std.get(block, 'bare_metal_version', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        etag: build.template(std.get(block, 'etag', null)),
        fleet: build.template(std.get(block, 'fleet', null)),
        id: build.template(std.get(block, 'id', null)),
        local_name: build.template(std.get(block, 'local_name', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        state: build.template(std.get(block, 'state', null)),
        status: build.template(std.get(block, 'status', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        validation_check: build.template(std.get(block, 'validation_check', null)),
      }),
      annotations: resource.field('annotations'),
      bare_metal_version: resource.field('bare_metal_version'),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      description: resource.field('description'),
      effective_annotations: resource.field('effective_annotations'),
      endpoint: resource.field('endpoint'),
      etag: resource.field('etag'),
      fleet: resource.field('fleet'),
      id: resource.field('id'),
      local_name: resource.field('local_name'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      state: resource.field('state'),
      status: resource.field('status'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      validation_check: resource.field('validation_check'),
    },
    gkeonprem_bare_metal_cluster(name, block): {
      local resource = blockType.resource('google_gkeonprem_bare_metal_cluster', name),
      _: resource._(block, {
        admin_cluster_membership: build.template(block.admin_cluster_membership),
        annotations: build.template(std.get(block, 'annotations', null)),
        bare_metal_version: build.template(block.bare_metal_version),
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        etag: build.template(std.get(block, 'etag', null)),
        fleet: build.template(std.get(block, 'fleet', null)),
        id: build.template(std.get(block, 'id', null)),
        local_name: build.template(std.get(block, 'local_name', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        state: build.template(std.get(block, 'state', null)),
        status: build.template(std.get(block, 'status', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        validation_check: build.template(std.get(block, 'validation_check', null)),
      }),
      admin_cluster_membership: resource.field('admin_cluster_membership'),
      annotations: resource.field('annotations'),
      bare_metal_version: resource.field('bare_metal_version'),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      description: resource.field('description'),
      effective_annotations: resource.field('effective_annotations'),
      endpoint: resource.field('endpoint'),
      etag: resource.field('etag'),
      fleet: resource.field('fleet'),
      id: resource.field('id'),
      local_name: resource.field('local_name'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      state: resource.field('state'),
      status: resource.field('status'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      validation_check: resource.field('validation_check'),
    },
    gkeonprem_bare_metal_node_pool(name, block): {
      local resource = blockType.resource('google_gkeonprem_bare_metal_node_pool', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        bare_metal_cluster: build.template(block.bare_metal_cluster),
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        state: build.template(std.get(block, 'state', null)),
        status: build.template(std.get(block, 'status', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      annotations: resource.field('annotations'),
      bare_metal_cluster: resource.field('bare_metal_cluster'),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      display_name: resource.field('display_name'),
      effective_annotations: resource.field('effective_annotations'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      state: resource.field('state'),
      status: resource.field('status'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    gkeonprem_vmware_cluster(name, block): {
      local resource = blockType.resource('google_gkeonprem_vmware_cluster', name),
      _: resource._(block, {
        admin_cluster_membership: build.template(block.admin_cluster_membership),
        annotations: build.template(std.get(block, 'annotations', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        description: build.template(std.get(block, 'description', null)),
        disable_bundled_ingress: build.template(std.get(block, 'disable_bundled_ingress', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        enable_control_plane_v2: build.template(std.get(block, 'enable_control_plane_v2', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        etag: build.template(std.get(block, 'etag', null)),
        fleet: build.template(std.get(block, 'fleet', null)),
        id: build.template(std.get(block, 'id', null)),
        local_name: build.template(std.get(block, 'local_name', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        on_prem_version: build.template(block.on_prem_version),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        state: build.template(std.get(block, 'state', null)),
        status: build.template(std.get(block, 'status', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        validation_check: build.template(std.get(block, 'validation_check', null)),
        vm_tracking_enabled: build.template(std.get(block, 'vm_tracking_enabled', null)),
      }),
      admin_cluster_membership: resource.field('admin_cluster_membership'),
      annotations: resource.field('annotations'),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      description: resource.field('description'),
      disable_bundled_ingress: resource.field('disable_bundled_ingress'),
      effective_annotations: resource.field('effective_annotations'),
      enable_control_plane_v2: resource.field('enable_control_plane_v2'),
      endpoint: resource.field('endpoint'),
      etag: resource.field('etag'),
      fleet: resource.field('fleet'),
      id: resource.field('id'),
      local_name: resource.field('local_name'),
      location: resource.field('location'),
      name: resource.field('name'),
      on_prem_version: resource.field('on_prem_version'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      state: resource.field('state'),
      status: resource.field('status'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      validation_check: resource.field('validation_check'),
      vm_tracking_enabled: resource.field('vm_tracking_enabled'),
    },
    gkeonprem_vmware_node_pool(name, block): {
      local resource = blockType.resource('google_gkeonprem_vmware_node_pool', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        on_prem_version: build.template(std.get(block, 'on_prem_version', null)),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        state: build.template(std.get(block, 'state', null)),
        status: build.template(std.get(block, 'status', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        vmware_cluster: build.template(block.vmware_cluster),
      }),
      annotations: resource.field('annotations'),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      display_name: resource.field('display_name'),
      effective_annotations: resource.field('effective_annotations'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      on_prem_version: resource.field('on_prem_version'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      state: resource.field('state'),
      status: resource.field('status'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      vmware_cluster: resource.field('vmware_cluster'),
    },
    healthcare_consent_store(name, block): {
      local resource = blockType.resource('google_healthcare_consent_store', name),
      _: resource._(block, {
        dataset: build.template(block.dataset),
        default_consent_ttl: build.template(std.get(block, 'default_consent_ttl', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_consent_create_on_update: build.template(std.get(block, 'enable_consent_create_on_update', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      dataset: resource.field('dataset'),
      default_consent_ttl: resource.field('default_consent_ttl'),
      effective_labels: resource.field('effective_labels'),
      enable_consent_create_on_update: resource.field('enable_consent_create_on_update'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      terraform_labels: resource.field('terraform_labels'),
    },
    healthcare_consent_store_iam_binding(name, block): {
      local resource = blockType.resource('google_healthcare_consent_store_iam_binding', name),
      _: resource._(block, {
        consent_store_id: build.template(block.consent_store_id),
        dataset: build.template(block.dataset),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
      }),
      consent_store_id: resource.field('consent_store_id'),
      dataset: resource.field('dataset'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
    },
    healthcare_consent_store_iam_member(name, block): {
      local resource = blockType.resource('google_healthcare_consent_store_iam_member', name),
      _: resource._(block, {
        consent_store_id: build.template(block.consent_store_id),
        dataset: build.template(block.dataset),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
      }),
      consent_store_id: resource.field('consent_store_id'),
      dataset: resource.field('dataset'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
    },
    healthcare_consent_store_iam_policy(name, block): {
      local resource = blockType.resource('google_healthcare_consent_store_iam_policy', name),
      _: resource._(block, {
        consent_store_id: build.template(block.consent_store_id),
        dataset: build.template(block.dataset),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
      }),
      consent_store_id: resource.field('consent_store_id'),
      dataset: resource.field('dataset'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    healthcare_dataset(name, block): {
      local resource = blockType.resource('google_healthcare_dataset', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      time_zone: resource.field('time_zone'),
    },
    healthcare_dataset_iam_binding(name, block): {
      local resource = blockType.resource('google_healthcare_dataset_iam_binding', name),
      _: resource._(block, {
        dataset_id: build.template(block.dataset_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
      }),
      dataset_id: resource.field('dataset_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
    },
    healthcare_dataset_iam_member(name, block): {
      local resource = blockType.resource('google_healthcare_dataset_iam_member', name),
      _: resource._(block, {
        dataset_id: build.template(block.dataset_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
      }),
      dataset_id: resource.field('dataset_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
    },
    healthcare_dataset_iam_policy(name, block): {
      local resource = blockType.resource('google_healthcare_dataset_iam_policy', name),
      _: resource._(block, {
        dataset_id: build.template(block.dataset_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
      }),
      dataset_id: resource.field('dataset_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    healthcare_dicom_store(name, block): {
      local resource = blockType.resource('google_healthcare_dicom_store', name),
      _: resource._(block, {
        dataset: build.template(block.dataset),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        self_link: build.template(std.get(block, 'self_link', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      dataset: resource.field('dataset'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      self_link: resource.field('self_link'),
      terraform_labels: resource.field('terraform_labels'),
    },
    healthcare_dicom_store_iam_binding(name, block): {
      local resource = blockType.resource('google_healthcare_dicom_store_iam_binding', name),
      _: resource._(block, {
        dicom_store_id: build.template(block.dicom_store_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
      }),
      dicom_store_id: resource.field('dicom_store_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
    },
    healthcare_dicom_store_iam_member(name, block): {
      local resource = blockType.resource('google_healthcare_dicom_store_iam_member', name),
      _: resource._(block, {
        dicom_store_id: build.template(block.dicom_store_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
      }),
      dicom_store_id: resource.field('dicom_store_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
    },
    healthcare_dicom_store_iam_policy(name, block): {
      local resource = blockType.resource('google_healthcare_dicom_store_iam_policy', name),
      _: resource._(block, {
        dicom_store_id: build.template(block.dicom_store_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
      }),
      dicom_store_id: resource.field('dicom_store_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    healthcare_fhir_store(name, block): {
      local resource = blockType.resource('google_healthcare_fhir_store', name),
      _: resource._(block, {
        complex_data_type_reference_parsing: build.template(std.get(block, 'complex_data_type_reference_parsing', null)),
        dataset: build.template(block.dataset),
        default_search_handling_strict: build.template(std.get(block, 'default_search_handling_strict', null)),
        disable_referential_integrity: build.template(std.get(block, 'disable_referential_integrity', null)),
        disable_resource_versioning: build.template(std.get(block, 'disable_resource_versioning', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_history_import: build.template(std.get(block, 'enable_history_import', null)),
        enable_update_create: build.template(std.get(block, 'enable_update_create', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        self_link: build.template(std.get(block, 'self_link', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        version: build.template(block.version),
      }),
      complex_data_type_reference_parsing: resource.field('complex_data_type_reference_parsing'),
      dataset: resource.field('dataset'),
      default_search_handling_strict: resource.field('default_search_handling_strict'),
      disable_referential_integrity: resource.field('disable_referential_integrity'),
      disable_resource_versioning: resource.field('disable_resource_versioning'),
      effective_labels: resource.field('effective_labels'),
      enable_history_import: resource.field('enable_history_import'),
      enable_update_create: resource.field('enable_update_create'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      self_link: resource.field('self_link'),
      terraform_labels: resource.field('terraform_labels'),
      version: resource.field('version'),
    },
    healthcare_fhir_store_iam_binding(name, block): {
      local resource = blockType.resource('google_healthcare_fhir_store_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        fhir_store_id: build.template(block.fhir_store_id),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      fhir_store_id: resource.field('fhir_store_id'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
    },
    healthcare_fhir_store_iam_member(name, block): {
      local resource = blockType.resource('google_healthcare_fhir_store_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        fhir_store_id: build.template(block.fhir_store_id),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      fhir_store_id: resource.field('fhir_store_id'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
    },
    healthcare_fhir_store_iam_policy(name, block): {
      local resource = blockType.resource('google_healthcare_fhir_store_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        fhir_store_id: build.template(block.fhir_store_id),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
      }),
      etag: resource.field('etag'),
      fhir_store_id: resource.field('fhir_store_id'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    healthcare_hl7_v2_store(name, block): {
      local resource = blockType.resource('google_healthcare_hl7_v2_store', name),
      _: resource._(block, {
        dataset: build.template(block.dataset),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        reject_duplicate_message: build.template(std.get(block, 'reject_duplicate_message', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      dataset: resource.field('dataset'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      reject_duplicate_message: resource.field('reject_duplicate_message'),
      self_link: resource.field('self_link'),
      terraform_labels: resource.field('terraform_labels'),
    },
    healthcare_hl7_v2_store_iam_binding(name, block): {
      local resource = blockType.resource('google_healthcare_hl7_v2_store_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        hl7_v2_store_id: build.template(block.hl7_v2_store_id),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      hl7_v2_store_id: resource.field('hl7_v2_store_id'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
    },
    healthcare_hl7_v2_store_iam_member(name, block): {
      local resource = blockType.resource('google_healthcare_hl7_v2_store_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        hl7_v2_store_id: build.template(block.hl7_v2_store_id),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      hl7_v2_store_id: resource.field('hl7_v2_store_id'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
    },
    healthcare_hl7_v2_store_iam_policy(name, block): {
      local resource = blockType.resource('google_healthcare_hl7_v2_store_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        hl7_v2_store_id: build.template(block.hl7_v2_store_id),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
      }),
      etag: resource.field('etag'),
      hl7_v2_store_id: resource.field('hl7_v2_store_id'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    healthcare_pipeline_job(name, block): {
      local resource = blockType.resource('google_healthcare_pipeline_job', name),
      _: resource._(block, {
        dataset: build.template(block.dataset),
        disable_lineage: build.template(std.get(block, 'disable_lineage', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        self_link: build.template(std.get(block, 'self_link', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      dataset: resource.field('dataset'),
      disable_lineage: resource.field('disable_lineage'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      self_link: resource.field('self_link'),
      terraform_labels: resource.field('terraform_labels'),
    },
    healthcare_workspace(name, block): {
      local resource = blockType.resource('google_healthcare_workspace', name),
      _: resource._(block, {
        dataset: build.template(block.dataset),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      dataset: resource.field('dataset'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      terraform_labels: resource.field('terraform_labels'),
    },
    iam_access_boundary_policy(name, block): {
      local resource = blockType.resource('google_iam_access_boundary_policy', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parent: build.template(block.parent),
      }),
      display_name: resource.field('display_name'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
    },
    iam_deny_policy(name, block): {
      local resource = blockType.resource('google_iam_deny_policy', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parent: build.template(block.parent),
      }),
      display_name: resource.field('display_name'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
    },
    iam_workforce_pool(name, block): {
      local resource = blockType.resource('google_iam_workforce_pool', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        session_duration: build.template(std.get(block, 'session_duration', null)),
        state: build.template(std.get(block, 'state', null)),
        workforce_pool_id: build.template(block.workforce_pool_id),
      }),
      description: resource.field('description'),
      disabled: resource.field('disabled'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      session_duration: resource.field('session_duration'),
      state: resource.field('state'),
      workforce_pool_id: resource.field('workforce_pool_id'),
    },
    iam_workforce_pool_provider(name, block): {
      local resource = blockType.resource('google_iam_workforce_pool_provider', name),
      _: resource._(block, {
        attribute_condition: build.template(std.get(block, 'attribute_condition', null)),
        attribute_mapping: build.template(std.get(block, 'attribute_mapping', null)),
        description: build.template(std.get(block, 'description', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        provider_id: build.template(block.provider_id),
        state: build.template(std.get(block, 'state', null)),
        workforce_pool_id: build.template(block.workforce_pool_id),
      }),
      attribute_condition: resource.field('attribute_condition'),
      attribute_mapping: resource.field('attribute_mapping'),
      description: resource.field('description'),
      disabled: resource.field('disabled'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      provider_id: resource.field('provider_id'),
      state: resource.field('state'),
      workforce_pool_id: resource.field('workforce_pool_id'),
    },
    iam_workload_identity_pool(name, block): {
      local resource = blockType.resource('google_iam_workload_identity_pool', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        workload_identity_pool_id: build.template(block.workload_identity_pool_id),
      }),
      description: resource.field('description'),
      disabled: resource.field('disabled'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      workload_identity_pool_id: resource.field('workload_identity_pool_id'),
    },
    iam_workload_identity_pool_provider(name, block): {
      local resource = blockType.resource('google_iam_workload_identity_pool_provider', name),
      _: resource._(block, {
        attribute_condition: build.template(std.get(block, 'attribute_condition', null)),
        attribute_mapping: build.template(std.get(block, 'attribute_mapping', null)),
        description: build.template(std.get(block, 'description', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        workload_identity_pool_id: build.template(block.workload_identity_pool_id),
        workload_identity_pool_provider_id: build.template(block.workload_identity_pool_provider_id),
      }),
      attribute_condition: resource.field('attribute_condition'),
      attribute_mapping: resource.field('attribute_mapping'),
      description: resource.field('description'),
      disabled: resource.field('disabled'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      workload_identity_pool_id: resource.field('workload_identity_pool_id'),
      workload_identity_pool_provider_id: resource.field('workload_identity_pool_provider_id'),
    },
    iap_app_engine_service_iam_binding(name, block): {
      local resource = blockType.resource('google_iap_app_engine_service_iam_binding', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        service: build.template(block.service),
      }),
      app_id: resource.field('app_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      service: resource.field('service'),
    },
    iap_app_engine_service_iam_member(name, block): {
      local resource = blockType.resource('google_iap_app_engine_service_iam_member', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        service: build.template(block.service),
      }),
      app_id: resource.field('app_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      service: resource.field('service'),
    },
    iap_app_engine_service_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_app_engine_service_iam_policy', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        service: build.template(block.service),
      }),
      app_id: resource.field('app_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      service: resource.field('service'),
    },
    iap_app_engine_version_iam_binding(name, block): {
      local resource = blockType.resource('google_iap_app_engine_version_iam_binding', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        service: build.template(block.service),
        version_id: build.template(block.version_id),
      }),
      app_id: resource.field('app_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      service: resource.field('service'),
      version_id: resource.field('version_id'),
    },
    iap_app_engine_version_iam_member(name, block): {
      local resource = blockType.resource('google_iap_app_engine_version_iam_member', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        service: build.template(block.service),
        version_id: build.template(block.version_id),
      }),
      app_id: resource.field('app_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      service: resource.field('service'),
      version_id: resource.field('version_id'),
    },
    iap_app_engine_version_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_app_engine_version_iam_policy', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        service: build.template(block.service),
        version_id: build.template(block.version_id),
      }),
      app_id: resource.field('app_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      service: resource.field('service'),
      version_id: resource.field('version_id'),
    },
    iap_brand(name, block): {
      local resource = blockType.resource('google_iap_brand', name),
      _: resource._(block, {
        application_title: build.template(block.application_title),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        org_internal_only: build.template(std.get(block, 'org_internal_only', null)),
        project: build.template(std.get(block, 'project', null)),
        support_email: build.template(block.support_email),
      }),
      application_title: resource.field('application_title'),
      id: resource.field('id'),
      name: resource.field('name'),
      org_internal_only: resource.field('org_internal_only'),
      project: resource.field('project'),
      support_email: resource.field('support_email'),
    },
    iap_client(name, block): {
      local resource = blockType.resource('google_iap_client', name),
      _: resource._(block, {
        brand: build.template(block.brand),
        client_id: build.template(std.get(block, 'client_id', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        secret: build.template(std.get(block, 'secret', null)),
      }),
      brand: resource.field('brand'),
      client_id: resource.field('client_id'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      secret: resource.field('secret'),
    },
    iap_settings(name, block): {
      local resource = blockType.resource('google_iap_settings', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    iap_tunnel_dest_group(name, block): {
      local resource = blockType.resource('google_iap_tunnel_dest_group', name),
      _: resource._(block, {
        cidrs: build.template(std.get(block, 'cidrs', null)),
        fqdns: build.template(std.get(block, 'fqdns', null)),
        group_name: build.template(block.group_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      cidrs: resource.field('cidrs'),
      fqdns: resource.field('fqdns'),
      group_name: resource.field('group_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    iap_tunnel_dest_group_iam_binding(name, block): {
      local resource = blockType.resource('google_iap_tunnel_dest_group_iam_binding', name),
      _: resource._(block, {
        dest_group: build.template(block.dest_group),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      dest_group: resource.field('dest_group'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    iap_tunnel_dest_group_iam_member(name, block): {
      local resource = blockType.resource('google_iap_tunnel_dest_group_iam_member', name),
      _: resource._(block, {
        dest_group: build.template(block.dest_group),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
      }),
      dest_group: resource.field('dest_group'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
    },
    iap_tunnel_dest_group_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_tunnel_dest_group_iam_policy', name),
      _: resource._(block, {
        dest_group: build.template(block.dest_group),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      dest_group: resource.field('dest_group'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    iap_tunnel_iam_binding(name, block): {
      local resource = blockType.resource('google_iap_tunnel_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    iap_tunnel_iam_member(name, block): {
      local resource = blockType.resource('google_iap_tunnel_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    iap_tunnel_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_tunnel_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    iap_tunnel_instance_iam_binding(name, block): {
      local resource = blockType.resource('google_iap_tunnel_instance_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      zone: resource.field('zone'),
    },
    iap_tunnel_instance_iam_member(name, block): {
      local resource = blockType.resource('google_iap_tunnel_instance_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      zone: resource.field('zone'),
    },
    iap_tunnel_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_tunnel_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    iap_web_backend_service_iam_binding(name, block): {
      local resource = blockType.resource('google_iap_web_backend_service_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        web_backend_service: build.template(block.web_backend_service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      web_backend_service: resource.field('web_backend_service'),
    },
    iap_web_backend_service_iam_member(name, block): {
      local resource = blockType.resource('google_iap_web_backend_service_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        web_backend_service: build.template(block.web_backend_service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      web_backend_service: resource.field('web_backend_service'),
    },
    iap_web_backend_service_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_web_backend_service_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        web_backend_service: build.template(block.web_backend_service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      web_backend_service: resource.field('web_backend_service'),
    },
    iap_web_iam_binding(name, block): {
      local resource = blockType.resource('google_iap_web_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    iap_web_iam_member(name, block): {
      local resource = blockType.resource('google_iap_web_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    iap_web_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_web_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    iap_web_region_backend_service_iam_binding(name, block): {
      local resource = blockType.resource('google_iap_web_region_backend_service_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
        web_region_backend_service: build.template(block.web_region_backend_service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
      web_region_backend_service: resource.field('web_region_backend_service'),
    },
    iap_web_region_backend_service_iam_member(name, block): {
      local resource = blockType.resource('google_iap_web_region_backend_service_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        role: build.template(block.role),
        web_region_backend_service: build.template(block.web_region_backend_service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      region: resource.field('region'),
      role: resource.field('role'),
      web_region_backend_service: resource.field('web_region_backend_service'),
    },
    iap_web_region_backend_service_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_web_region_backend_service_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        web_region_backend_service: build.template(block.web_region_backend_service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
      web_region_backend_service: resource.field('web_region_backend_service'),
    },
    iap_web_type_app_engine_iam_binding(name, block): {
      local resource = blockType.resource('google_iap_web_type_app_engine_iam_binding', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      app_id: resource.field('app_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    iap_web_type_app_engine_iam_member(name, block): {
      local resource = blockType.resource('google_iap_web_type_app_engine_iam_member', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      app_id: resource.field('app_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    iap_web_type_app_engine_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_web_type_app_engine_iam_policy', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      app_id: resource.field('app_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    iap_web_type_compute_iam_binding(name, block): {
      local resource = blockType.resource('google_iap_web_type_compute_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    iap_web_type_compute_iam_member(name, block): {
      local resource = blockType.resource('google_iap_web_type_compute_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    iap_web_type_compute_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_web_type_compute_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    identity_platform_config(name, block): {
      local resource = blockType.resource('google_identity_platform_config', name),
      _: resource._(block, {
        authorized_domains: build.template(std.get(block, 'authorized_domains', null)),
        autodelete_anonymous_users: build.template(std.get(block, 'autodelete_anonymous_users', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      authorized_domains: resource.field('authorized_domains'),
      autodelete_anonymous_users: resource.field('autodelete_anonymous_users'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    identity_platform_default_supported_idp_config(name, block): {
      local resource = blockType.resource('google_identity_platform_default_supported_idp_config', name),
      _: resource._(block, {
        client_id: build.template(block.client_id),
        client_secret: build.template(block.client_secret),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        idp_id: build.template(block.idp_id),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      client_id: resource.field('client_id'),
      client_secret: resource.field('client_secret'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      idp_id: resource.field('idp_id'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    identity_platform_inbound_saml_config(name, block): {
      local resource = blockType.resource('google_identity_platform_inbound_saml_config', name),
      _: resource._(block, {
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
      }),
      display_name: resource.field('display_name'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    identity_platform_oauth_idp_config(name, block): {
      local resource = blockType.resource('google_identity_platform_oauth_idp_config', name),
      _: resource._(block, {
        client_id: build.template(block.client_id),
        client_secret: build.template(std.get(block, 'client_secret', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        issuer: build.template(block.issuer),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
      }),
      client_id: resource.field('client_id'),
      client_secret: resource.field('client_secret'),
      display_name: resource.field('display_name'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      issuer: resource.field('issuer'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    identity_platform_tenant(name, block): {
      local resource = blockType.resource('google_identity_platform_tenant', name),
      _: resource._(block, {
        allow_password_signup: build.template(std.get(block, 'allow_password_signup', null)),
        disable_auth: build.template(std.get(block, 'disable_auth', null)),
        display_name: build.template(block.display_name),
        enable_email_link_signin: build.template(std.get(block, 'enable_email_link_signin', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      allow_password_signup: resource.field('allow_password_signup'),
      disable_auth: resource.field('disable_auth'),
      display_name: resource.field('display_name'),
      enable_email_link_signin: resource.field('enable_email_link_signin'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    identity_platform_tenant_default_supported_idp_config(name, block): {
      local resource = blockType.resource('google_identity_platform_tenant_default_supported_idp_config', name),
      _: resource._(block, {
        client_id: build.template(block.client_id),
        client_secret: build.template(block.client_secret),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        idp_id: build.template(block.idp_id),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        tenant: build.template(block.tenant),
      }),
      client_id: resource.field('client_id'),
      client_secret: resource.field('client_secret'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      idp_id: resource.field('idp_id'),
      name: resource.field('name'),
      project: resource.field('project'),
      tenant: resource.field('tenant'),
    },
    identity_platform_tenant_inbound_saml_config(name, block): {
      local resource = blockType.resource('google_identity_platform_tenant_inbound_saml_config', name),
      _: resource._(block, {
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        tenant: build.template(block.tenant),
      }),
      display_name: resource.field('display_name'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      tenant: resource.field('tenant'),
    },
    identity_platform_tenant_oauth_idp_config(name, block): {
      local resource = blockType.resource('google_identity_platform_tenant_oauth_idp_config', name),
      _: resource._(block, {
        client_id: build.template(block.client_id),
        client_secret: build.template(std.get(block, 'client_secret', null)),
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        issuer: build.template(block.issuer),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        tenant: build.template(block.tenant),
      }),
      client_id: resource.field('client_id'),
      client_secret: resource.field('client_secret'),
      display_name: resource.field('display_name'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      issuer: resource.field('issuer'),
      name: resource.field('name'),
      project: resource.field('project'),
      tenant: resource.field('tenant'),
    },
    integration_connectors_connection(name, block): {
      local resource = blockType.resource('google_integration_connectors_connection', name),
      _: resource._(block, {
        connection_revision: build.template(std.get(block, 'connection_revision', null)),
        connector_version: build.template(block.connector_version),
        connector_version_infra_config: build.template(std.get(block, 'connector_version_infra_config', null)),
        connector_version_launch_stage: build.template(std.get(block, 'connector_version_launch_stage', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        eventing_enablement_type: build.template(std.get(block, 'eventing_enablement_type', null)),
        eventing_runtime_data: build.template(std.get(block, 'eventing_runtime_data', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        service_directory: build.template(std.get(block, 'service_directory', null)),
        status: build.template(std.get(block, 'status', null)),
        subscription_type: build.template(std.get(block, 'subscription_type', null)),
        suspended: build.template(std.get(block, 'suspended', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      connection_revision: resource.field('connection_revision'),
      connector_version: resource.field('connector_version'),
      connector_version_infra_config: resource.field('connector_version_infra_config'),
      connector_version_launch_stage: resource.field('connector_version_launch_stage'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      eventing_enablement_type: resource.field('eventing_enablement_type'),
      eventing_runtime_data: resource.field('eventing_runtime_data'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_account: resource.field('service_account'),
      service_directory: resource.field('service_directory'),
      status: resource.field('status'),
      subscription_type: resource.field('subscription_type'),
      suspended: resource.field('suspended'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    integration_connectors_endpoint_attachment(name, block): {
      local resource = blockType.resource('google_integration_connectors_endpoint_attachment', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        endpoint_global_access: build.template(std.get(block, 'endpoint_global_access', null)),
        endpoint_ip: build.template(std.get(block, 'endpoint_ip', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        service_attachment: build.template(block.service_attachment),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      endpoint_global_access: resource.field('endpoint_global_access'),
      endpoint_ip: resource.field('endpoint_ip'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_attachment: resource.field('service_attachment'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    integration_connectors_managed_zone(name, block): {
      local resource = blockType.resource('google_integration_connectors_managed_zone', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        dns: build.template(block.dns),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        target_project: build.template(block.target_project),
        target_vpc: build.template(block.target_vpc),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      dns: resource.field('dns'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      target_project: resource.field('target_project'),
      target_vpc: resource.field('target_vpc'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    integrations_auth_config(name, block): {
      local resource = blockType.resource('google_integrations_auth_config', name),
      _: resource._(block, {
        certificate_id: build.template(std.get(block, 'certificate_id', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        creator_email: build.template(std.get(block, 'creator_email', null)),
        credential_type: build.template(std.get(block, 'credential_type', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        encrypted_credential: build.template(std.get(block, 'encrypted_credential', null)),
        expiry_notification_duration: build.template(std.get(block, 'expiry_notification_duration', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modifier_email: build.template(std.get(block, 'last_modifier_email', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        override_valid_time: build.template(std.get(block, 'override_valid_time', null)),
        project: build.template(std.get(block, 'project', null)),
        reason: build.template(std.get(block, 'reason', null)),
        state: build.template(std.get(block, 'state', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        valid_time: build.template(std.get(block, 'valid_time', null)),
        visibility: build.template(std.get(block, 'visibility', null)),
      }),
      certificate_id: resource.field('certificate_id'),
      create_time: resource.field('create_time'),
      creator_email: resource.field('creator_email'),
      credential_type: resource.field('credential_type'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      encrypted_credential: resource.field('encrypted_credential'),
      expiry_notification_duration: resource.field('expiry_notification_duration'),
      id: resource.field('id'),
      last_modifier_email: resource.field('last_modifier_email'),
      location: resource.field('location'),
      name: resource.field('name'),
      override_valid_time: resource.field('override_valid_time'),
      project: resource.field('project'),
      reason: resource.field('reason'),
      state: resource.field('state'),
      update_time: resource.field('update_time'),
      valid_time: resource.field('valid_time'),
      visibility: resource.field('visibility'),
    },
    integrations_client(name, block): {
      local resource = blockType.resource('google_integrations_client', name),
      _: resource._(block, {
        create_sample_integrations: build.template(std.get(block, 'create_sample_integrations', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        project: build.template(std.get(block, 'project', null)),
        run_as_service_account: build.template(std.get(block, 'run_as_service_account', null)),
      }),
      create_sample_integrations: resource.field('create_sample_integrations'),
      id: resource.field('id'),
      location: resource.field('location'),
      project: resource.field('project'),
      run_as_service_account: resource.field('run_as_service_account'),
    },
    kms_crypto_key(name, block): {
      local resource = blockType.resource('google_kms_crypto_key', name),
      _: resource._(block, {
        crypto_key_backend: build.template(std.get(block, 'crypto_key_backend', null)),
        destroy_scheduled_duration: build.template(std.get(block, 'destroy_scheduled_duration', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        import_only: build.template(std.get(block, 'import_only', null)),
        key_ring: build.template(block.key_ring),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        primary: build.template(std.get(block, 'primary', null)),
        purpose: build.template(std.get(block, 'purpose', null)),
        rotation_period: build.template(std.get(block, 'rotation_period', null)),
        skip_initial_version_creation: build.template(std.get(block, 'skip_initial_version_creation', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      crypto_key_backend: resource.field('crypto_key_backend'),
      destroy_scheduled_duration: resource.field('destroy_scheduled_duration'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      import_only: resource.field('import_only'),
      key_ring: resource.field('key_ring'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      primary: resource.field('primary'),
      purpose: resource.field('purpose'),
      rotation_period: resource.field('rotation_period'),
      skip_initial_version_creation: resource.field('skip_initial_version_creation'),
      terraform_labels: resource.field('terraform_labels'),
    },
    kms_crypto_key_iam_binding(name, block): {
      local resource = blockType.resource('google_kms_crypto_key_iam_binding', name),
      _: resource._(block, {
        crypto_key_id: build.template(block.crypto_key_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
      }),
      crypto_key_id: resource.field('crypto_key_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
    },
    kms_crypto_key_iam_member(name, block): {
      local resource = blockType.resource('google_kms_crypto_key_iam_member', name),
      _: resource._(block, {
        crypto_key_id: build.template(block.crypto_key_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
      }),
      crypto_key_id: resource.field('crypto_key_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
    },
    kms_crypto_key_iam_policy(name, block): {
      local resource = blockType.resource('google_kms_crypto_key_iam_policy', name),
      _: resource._(block, {
        crypto_key_id: build.template(block.crypto_key_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
      }),
      crypto_key_id: resource.field('crypto_key_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    kms_crypto_key_version(name, block): {
      local resource = blockType.resource('google_kms_crypto_key_version', name),
      _: resource._(block, {
        algorithm: build.template(std.get(block, 'algorithm', null)),
        attestation: build.template(std.get(block, 'attestation', null)),
        crypto_key: build.template(block.crypto_key),
        generate_time: build.template(std.get(block, 'generate_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        protection_level: build.template(std.get(block, 'protection_level', null)),
        state: build.template(std.get(block, 'state', null)),
      }),
      algorithm: resource.field('algorithm'),
      attestation: resource.field('attestation'),
      crypto_key: resource.field('crypto_key'),
      generate_time: resource.field('generate_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      protection_level: resource.field('protection_level'),
      state: resource.field('state'),
    },
    kms_ekm_connection(name, block): {
      local resource = blockType.resource('google_kms_ekm_connection', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        crypto_space_path: build.template(std.get(block, 'crypto_space_path', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key_management_mode: build.template(std.get(block, 'key_management_mode', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
      }),
      create_time: resource.field('create_time'),
      crypto_space_path: resource.field('crypto_space_path'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      key_management_mode: resource.field('key_management_mode'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    kms_ekm_connection_iam_binding(name, block): {
      local resource = blockType.resource('google_kms_ekm_connection_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    kms_ekm_connection_iam_member(name, block): {
      local resource = blockType.resource('google_kms_ekm_connection_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    kms_ekm_connection_iam_policy(name, block): {
      local resource = blockType.resource('google_kms_ekm_connection_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    kms_key_ring(name, block): {
      local resource = blockType.resource('google_kms_key_ring', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    kms_key_ring_iam_binding(name, block): {
      local resource = blockType.resource('google_kms_key_ring_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key_ring_id: build.template(block.key_ring_id),
        members: build.template(block.members),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      key_ring_id: resource.field('key_ring_id'),
      members: resource.field('members'),
      role: resource.field('role'),
    },
    kms_key_ring_iam_member(name, block): {
      local resource = blockType.resource('google_kms_key_ring_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key_ring_id: build.template(block.key_ring_id),
        member: build.template(block.member),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      key_ring_id: resource.field('key_ring_id'),
      member: resource.field('member'),
      role: resource.field('role'),
    },
    kms_key_ring_iam_policy(name, block): {
      local resource = blockType.resource('google_kms_key_ring_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key_ring_id: build.template(block.key_ring_id),
        policy_data: build.template(block.policy_data),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      key_ring_id: resource.field('key_ring_id'),
      policy_data: resource.field('policy_data'),
    },
    kms_key_ring_import_job(name, block): {
      local resource = blockType.resource('google_kms_key_ring_import_job', name),
      _: resource._(block, {
        attestation: build.template(std.get(block, 'attestation', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        import_job_id: build.template(block.import_job_id),
        import_method: build.template(block.import_method),
        key_ring: build.template(block.key_ring),
        name: build.template(std.get(block, 'name', null)),
        protection_level: build.template(block.protection_level),
        public_key: build.template(std.get(block, 'public_key', null)),
        state: build.template(std.get(block, 'state', null)),
      }),
      attestation: resource.field('attestation'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      import_job_id: resource.field('import_job_id'),
      import_method: resource.field('import_method'),
      key_ring: resource.field('key_ring'),
      name: resource.field('name'),
      protection_level: resource.field('protection_level'),
      public_key: resource.field('public_key'),
      state: resource.field('state'),
    },
    kms_secret_ciphertext(name, block): {
      local resource = blockType.resource('google_kms_secret_ciphertext', name),
      _: resource._(block, {
        additional_authenticated_data: build.template(std.get(block, 'additional_authenticated_data', null)),
        ciphertext: build.template(std.get(block, 'ciphertext', null)),
        crypto_key: build.template(block.crypto_key),
        id: build.template(std.get(block, 'id', null)),
        plaintext: build.template(block.plaintext),
      }),
      additional_authenticated_data: resource.field('additional_authenticated_data'),
      ciphertext: resource.field('ciphertext'),
      crypto_key: resource.field('crypto_key'),
      id: resource.field('id'),
      plaintext: resource.field('plaintext'),
    },
    logging_billing_account_bucket_config(name, block): {
      local resource = blockType.resource('google_logging_billing_account_bucket_config', name),
      _: resource._(block, {
        billing_account: build.template(block.billing_account),
        bucket_id: build.template(block.bucket_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        lifecycle_state: build.template(std.get(block, 'lifecycle_state', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        retention_days: build.template(std.get(block, 'retention_days', null)),
      }),
      billing_account: resource.field('billing_account'),
      bucket_id: resource.field('bucket_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      lifecycle_state: resource.field('lifecycle_state'),
      location: resource.field('location'),
      name: resource.field('name'),
      retention_days: resource.field('retention_days'),
    },
    logging_billing_account_exclusion(name, block): {
      local resource = blockType.resource('google_logging_billing_account_exclusion', name),
      _: resource._(block, {
        billing_account: build.template(block.billing_account),
        description: build.template(std.get(block, 'description', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      billing_account: resource.field('billing_account'),
      description: resource.field('description'),
      disabled: resource.field('disabled'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    logging_billing_account_sink(name, block): {
      local resource = blockType.resource('google_logging_billing_account_sink', name),
      _: resource._(block, {
        billing_account: build.template(block.billing_account),
        description: build.template(std.get(block, 'description', null)),
        destination: build.template(block.destination),
        disabled: build.template(std.get(block, 'disabled', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        writer_identity: build.template(std.get(block, 'writer_identity', null)),
      }),
      billing_account: resource.field('billing_account'),
      description: resource.field('description'),
      destination: resource.field('destination'),
      disabled: resource.field('disabled'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      name: resource.field('name'),
      writer_identity: resource.field('writer_identity'),
    },
    logging_folder_bucket_config(name, block): {
      local resource = blockType.resource('google_logging_folder_bucket_config', name),
      _: resource._(block, {
        bucket_id: build.template(block.bucket_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        lifecycle_state: build.template(std.get(block, 'lifecycle_state', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        retention_days: build.template(std.get(block, 'retention_days', null)),
      }),
      bucket_id: resource.field('bucket_id'),
      description: resource.field('description'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      lifecycle_state: resource.field('lifecycle_state'),
      location: resource.field('location'),
      name: resource.field('name'),
      retention_days: resource.field('retention_days'),
    },
    logging_folder_exclusion(name, block): {
      local resource = blockType.resource('google_logging_folder_exclusion', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        filter: build.template(block.filter),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      description: resource.field('description'),
      disabled: resource.field('disabled'),
      filter: resource.field('filter'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    logging_folder_settings(name, block): {
      local resource = blockType.resource('google_logging_folder_settings', name),
      _: resource._(block, {
        disable_default_sink: build.template(std.get(block, 'disable_default_sink', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        kms_service_account_id: build.template(std.get(block, 'kms_service_account_id', null)),
        logging_service_account_id: build.template(std.get(block, 'logging_service_account_id', null)),
        name: build.template(std.get(block, 'name', null)),
        storage_location: build.template(std.get(block, 'storage_location', null)),
      }),
      disable_default_sink: resource.field('disable_default_sink'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      kms_service_account_id: resource.field('kms_service_account_id'),
      logging_service_account_id: resource.field('logging_service_account_id'),
      name: resource.field('name'),
      storage_location: resource.field('storage_location'),
    },
    logging_folder_sink(name, block): {
      local resource = blockType.resource('google_logging_folder_sink', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        destination: build.template(block.destination),
        disabled: build.template(std.get(block, 'disabled', null)),
        filter: build.template(std.get(block, 'filter', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        include_children: build.template(std.get(block, 'include_children', null)),
        intercept_children: build.template(std.get(block, 'intercept_children', null)),
        name: build.template(block.name),
        writer_identity: build.template(std.get(block, 'writer_identity', null)),
      }),
      description: resource.field('description'),
      destination: resource.field('destination'),
      disabled: resource.field('disabled'),
      filter: resource.field('filter'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      include_children: resource.field('include_children'),
      intercept_children: resource.field('intercept_children'),
      name: resource.field('name'),
      writer_identity: resource.field('writer_identity'),
    },
    logging_linked_dataset(name, block): {
      local resource = blockType.resource('google_logging_linked_dataset', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        lifecycle_state: build.template(std.get(block, 'lifecycle_state', null)),
        link_id: build.template(block.link_id),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(std.get(block, 'parent', null)),
      }),
      bucket: resource.field('bucket'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      lifecycle_state: resource.field('lifecycle_state'),
      link_id: resource.field('link_id'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
    },
    logging_log_scope(name, block): {
      local resource = blockType.resource('google_logging_log_scope', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        parent: build.template(std.get(block, 'parent', null)),
        resource_names: build.template(block.resource_names),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      resource_names: resource.field('resource_names'),
      update_time: resource.field('update_time'),
    },
    logging_log_view(name, block): {
      local resource = blockType.resource('google_logging_log_view', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        parent: build.template(std.get(block, 'parent', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      bucket: resource.field('bucket'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      update_time: resource.field('update_time'),
    },
    logging_log_view_iam_binding(name, block): {
      local resource = blockType.resource('google_logging_log_view_iam_binding', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        parent: build.template(block.parent),
        role: build.template(block.role),
      }),
      bucket: resource.field('bucket'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      role: resource.field('role'),
    },
    logging_log_view_iam_member(name, block): {
      local resource = blockType.resource('google_logging_log_view_iam_member', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        parent: build.template(block.parent),
        role: build.template(block.role),
      }),
      bucket: resource.field('bucket'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      role: resource.field('role'),
    },
    logging_log_view_iam_policy(name, block): {
      local resource = blockType.resource('google_logging_log_view_iam_policy', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        parent: build.template(block.parent),
        policy_data: build.template(block.policy_data),
      }),
      bucket: resource.field('bucket'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      policy_data: resource.field('policy_data'),
    },
    logging_metric(name, block): {
      local resource = blockType.resource('google_logging_metric', name),
      _: resource._(block, {
        bucket_name: build.template(std.get(block, 'bucket_name', null)),
        description: build.template(std.get(block, 'description', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        label_extractors: build.template(std.get(block, 'label_extractors', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        value_extractor: build.template(std.get(block, 'value_extractor', null)),
      }),
      bucket_name: resource.field('bucket_name'),
      description: resource.field('description'),
      disabled: resource.field('disabled'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      label_extractors: resource.field('label_extractors'),
      name: resource.field('name'),
      project: resource.field('project'),
      value_extractor: resource.field('value_extractor'),
    },
    logging_organization_bucket_config(name, block): {
      local resource = blockType.resource('google_logging_organization_bucket_config', name),
      _: resource._(block, {
        bucket_id: build.template(block.bucket_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        lifecycle_state: build.template(std.get(block, 'lifecycle_state', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        retention_days: build.template(std.get(block, 'retention_days', null)),
      }),
      bucket_id: resource.field('bucket_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      lifecycle_state: resource.field('lifecycle_state'),
      location: resource.field('location'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      retention_days: resource.field('retention_days'),
    },
    logging_organization_exclusion(name, block): {
      local resource = blockType.resource('google_logging_organization_exclusion', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        org_id: build.template(block.org_id),
      }),
      description: resource.field('description'),
      disabled: resource.field('disabled'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
    },
    logging_organization_settings(name, block): {
      local resource = blockType.resource('google_logging_organization_settings', name),
      _: resource._(block, {
        disable_default_sink: build.template(std.get(block, 'disable_default_sink', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        kms_service_account_id: build.template(std.get(block, 'kms_service_account_id', null)),
        logging_service_account_id: build.template(std.get(block, 'logging_service_account_id', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        storage_location: build.template(std.get(block, 'storage_location', null)),
      }),
      disable_default_sink: resource.field('disable_default_sink'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      kms_service_account_id: resource.field('kms_service_account_id'),
      logging_service_account_id: resource.field('logging_service_account_id'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      storage_location: resource.field('storage_location'),
    },
    logging_organization_sink(name, block): {
      local resource = blockType.resource('google_logging_organization_sink', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        destination: build.template(block.destination),
        disabled: build.template(std.get(block, 'disabled', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        include_children: build.template(std.get(block, 'include_children', null)),
        intercept_children: build.template(std.get(block, 'intercept_children', null)),
        name: build.template(block.name),
        org_id: build.template(block.org_id),
        writer_identity: build.template(std.get(block, 'writer_identity', null)),
      }),
      description: resource.field('description'),
      destination: resource.field('destination'),
      disabled: resource.field('disabled'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      include_children: resource.field('include_children'),
      intercept_children: resource.field('intercept_children'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      writer_identity: resource.field('writer_identity'),
    },
    logging_project_bucket_config(name, block): {
      local resource = blockType.resource('google_logging_project_bucket_config', name),
      _: resource._(block, {
        bucket_id: build.template(block.bucket_id),
        description: build.template(std.get(block, 'description', null)),
        enable_analytics: build.template(std.get(block, 'enable_analytics', null)),
        id: build.template(std.get(block, 'id', null)),
        lifecycle_state: build.template(std.get(block, 'lifecycle_state', null)),
        location: build.template(block.location),
        locked: build.template(std.get(block, 'locked', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(block.project),
        retention_days: build.template(std.get(block, 'retention_days', null)),
      }),
      bucket_id: resource.field('bucket_id'),
      description: resource.field('description'),
      enable_analytics: resource.field('enable_analytics'),
      id: resource.field('id'),
      lifecycle_state: resource.field('lifecycle_state'),
      location: resource.field('location'),
      locked: resource.field('locked'),
      name: resource.field('name'),
      project: resource.field('project'),
      retention_days: resource.field('retention_days'),
    },
    logging_project_exclusion(name, block): {
      local resource = blockType.resource('google_logging_project_exclusion', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
      }),
      description: resource.field('description'),
      disabled: resource.field('disabled'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    logging_project_sink(name, block): {
      local resource = blockType.resource('google_logging_project_sink', name),
      _: resource._(block, {
        custom_writer_identity: build.template(std.get(block, 'custom_writer_identity', null)),
        description: build.template(std.get(block, 'description', null)),
        destination: build.template(block.destination),
        disabled: build.template(std.get(block, 'disabled', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        unique_writer_identity: build.template(std.get(block, 'unique_writer_identity', null)),
        writer_identity: build.template(std.get(block, 'writer_identity', null)),
      }),
      custom_writer_identity: resource.field('custom_writer_identity'),
      description: resource.field('description'),
      destination: resource.field('destination'),
      disabled: resource.field('disabled'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      unique_writer_identity: resource.field('unique_writer_identity'),
      writer_identity: resource.field('writer_identity'),
    },
    looker_instance(name, block): {
      local resource = blockType.resource('google_looker_instance', name),
      _: resource._(block, {
        consumer_network: build.template(std.get(block, 'consumer_network', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        egress_public_ip: build.template(std.get(block, 'egress_public_ip', null)),
        fips_enabled: build.template(std.get(block, 'fips_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        ingress_private_ip: build.template(std.get(block, 'ingress_private_ip', null)),
        ingress_public_ip: build.template(std.get(block, 'ingress_public_ip', null)),
        looker_uri: build.template(std.get(block, 'looker_uri', null)),
        looker_version: build.template(std.get(block, 'looker_version', null)),
        name: build.template(block.name),
        platform_edition: build.template(std.get(block, 'platform_edition', null)),
        private_ip_enabled: build.template(std.get(block, 'private_ip_enabled', null)),
        project: build.template(std.get(block, 'project', null)),
        psc_enabled: build.template(std.get(block, 'psc_enabled', null)),
        public_ip_enabled: build.template(std.get(block, 'public_ip_enabled', null)),
        region: build.template(std.get(block, 'region', null)),
        reserved_range: build.template(std.get(block, 'reserved_range', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      consumer_network: resource.field('consumer_network'),
      create_time: resource.field('create_time'),
      deletion_policy: resource.field('deletion_policy'),
      egress_public_ip: resource.field('egress_public_ip'),
      fips_enabled: resource.field('fips_enabled'),
      id: resource.field('id'),
      ingress_private_ip: resource.field('ingress_private_ip'),
      ingress_public_ip: resource.field('ingress_public_ip'),
      looker_uri: resource.field('looker_uri'),
      looker_version: resource.field('looker_version'),
      name: resource.field('name'),
      platform_edition: resource.field('platform_edition'),
      private_ip_enabled: resource.field('private_ip_enabled'),
      project: resource.field('project'),
      psc_enabled: resource.field('psc_enabled'),
      public_ip_enabled: resource.field('public_ip_enabled'),
      region: resource.field('region'),
      reserved_range: resource.field('reserved_range'),
      update_time: resource.field('update_time'),
    },
    managed_kafka_cluster(name, block): {
      local resource = blockType.resource('google_managed_kafka_cluster', name),
      _: resource._(block, {
        cluster_id: build.template(block.cluster_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      cluster_id: resource.field('cluster_id'),
      create_time: resource.field('create_time'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    managed_kafka_topic(name, block): {
      local resource = blockType.resource('google_managed_kafka_topic', name),
      _: resource._(block, {
        cluster: build.template(block.cluster),
        configs: build.template(std.get(block, 'configs', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        partition_count: build.template(std.get(block, 'partition_count', null)),
        project: build.template(std.get(block, 'project', null)),
        replication_factor: build.template(block.replication_factor),
        topic_id: build.template(block.topic_id),
      }),
      cluster: resource.field('cluster'),
      configs: resource.field('configs'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      partition_count: resource.field('partition_count'),
      project: resource.field('project'),
      replication_factor: resource.field('replication_factor'),
      topic_id: resource.field('topic_id'),
    },
    memcache_instance(name, block): {
      local resource = blockType.resource('google_memcache_instance', name),
      _: resource._(block, {
        authorized_network: build.template(std.get(block, 'authorized_network', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        discovery_endpoint: build.template(std.get(block, 'discovery_endpoint', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        maintenance_schedule: build.template(std.get(block, 'maintenance_schedule', null)),
        memcache_full_version: build.template(std.get(block, 'memcache_full_version', null)),
        memcache_nodes: build.template(std.get(block, 'memcache_nodes', null)),
        memcache_version: build.template(std.get(block, 'memcache_version', null)),
        name: build.template(block.name),
        node_count: build.template(block.node_count),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        reserved_ip_range_id: build.template(std.get(block, 'reserved_ip_range_id', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      authorized_network: resource.field('authorized_network'),
      create_time: resource.field('create_time'),
      discovery_endpoint: resource.field('discovery_endpoint'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      maintenance_schedule: resource.field('maintenance_schedule'),
      memcache_full_version: resource.field('memcache_full_version'),
      memcache_nodes: resource.field('memcache_nodes'),
      memcache_version: resource.field('memcache_version'),
      name: resource.field('name'),
      node_count: resource.field('node_count'),
      project: resource.field('project'),
      region: resource.field('region'),
      reserved_ip_range_id: resource.field('reserved_ip_range_id'),
      terraform_labels: resource.field('terraform_labels'),
      zones: resource.field('zones'),
    },
    memorystore_instance(name, block): {
      local resource = blockType.resource('google_memorystore_instance', name),
      _: resource._(block, {
        authorization_mode: build.template(std.get(block, 'authorization_mode', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        deletion_protection_enabled: build.template(std.get(block, 'deletion_protection_enabled', null)),
        discovery_endpoints: build.template(std.get(block, 'discovery_endpoints', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        endpoints: build.template(std.get(block, 'endpoints', null)),
        engine_configs: build.template(std.get(block, 'engine_configs', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(std.get(block, 'name', null)),
        node_config: build.template(std.get(block, 'node_config', null)),
        node_type: build.template(std.get(block, 'node_type', null)),
        project: build.template(std.get(block, 'project', null)),
        psc_auto_connections: build.template(std.get(block, 'psc_auto_connections', null)),
        replica_count: build.template(std.get(block, 'replica_count', null)),
        shard_count: build.template(block.shard_count),
        state: build.template(std.get(block, 'state', null)),
        state_info: build.template(std.get(block, 'state_info', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        transit_encryption_mode: build.template(std.get(block, 'transit_encryption_mode', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      authorization_mode: resource.field('authorization_mode'),
      create_time: resource.field('create_time'),
      deletion_protection_enabled: resource.field('deletion_protection_enabled'),
      discovery_endpoints: resource.field('discovery_endpoints'),
      effective_labels: resource.field('effective_labels'),
      endpoints: resource.field('endpoints'),
      engine_configs: resource.field('engine_configs'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      mode: resource.field('mode'),
      name: resource.field('name'),
      node_config: resource.field('node_config'),
      node_type: resource.field('node_type'),
      project: resource.field('project'),
      psc_auto_connections: resource.field('psc_auto_connections'),
      replica_count: resource.field('replica_count'),
      shard_count: resource.field('shard_count'),
      state: resource.field('state'),
      state_info: resource.field('state_info'),
      terraform_labels: resource.field('terraform_labels'),
      transit_encryption_mode: resource.field('transit_encryption_mode'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    migration_center_group(name, block): {
      local resource = blockType.resource('google_migration_center_group', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        group_id: build.template(block.group_id),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      group_id: resource.field('group_id'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    migration_center_preference_set(name, block): {
      local resource = blockType.resource('google_migration_center_preference_set', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        preference_set_id: build.template(block.preference_set_id),
        project: build.template(std.get(block, 'project', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      preference_set_id: resource.field('preference_set_id'),
      project: resource.field('project'),
      update_time: resource.field('update_time'),
    },
    ml_engine_model(name, block): {
      local resource = blockType.resource('google_ml_engine_model', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        online_prediction_console_logging: build.template(std.get(block, 'online_prediction_console_logging', null)),
        online_prediction_logging: build.template(std.get(block, 'online_prediction_logging', null)),
        project: build.template(std.get(block, 'project', null)),
        regions: build.template(std.get(block, 'regions', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      online_prediction_console_logging: resource.field('online_prediction_console_logging'),
      online_prediction_logging: resource.field('online_prediction_logging'),
      project: resource.field('project'),
      regions: resource.field('regions'),
      terraform_labels: resource.field('terraform_labels'),
    },
    monitoring_alert_policy(name, block): {
      local resource = blockType.resource('google_monitoring_alert_policy', name),
      _: resource._(block, {
        combiner: build.template(block.combiner),
        creation_record: build.template(std.get(block, 'creation_record', null)),
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        notification_channels: build.template(std.get(block, 'notification_channels', null)),
        project: build.template(std.get(block, 'project', null)),
        severity: build.template(std.get(block, 'severity', null)),
        user_labels: build.template(std.get(block, 'user_labels', null)),
      }),
      combiner: resource.field('combiner'),
      creation_record: resource.field('creation_record'),
      display_name: resource.field('display_name'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      name: resource.field('name'),
      notification_channels: resource.field('notification_channels'),
      project: resource.field('project'),
      severity: resource.field('severity'),
      user_labels: resource.field('user_labels'),
    },
    monitoring_custom_service(name, block): {
      local resource = blockType.resource('google_monitoring_custom_service', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        service_id: build.template(std.get(block, 'service_id', null)),
        user_labels: build.template(std.get(block, 'user_labels', null)),
      }),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_id: resource.field('service_id'),
      user_labels: resource.field('user_labels'),
    },
    monitoring_dashboard(name, block): {
      local resource = blockType.resource('google_monitoring_dashboard', name),
      _: resource._(block, {
        dashboard_json: build.template(block.dashboard_json),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      dashboard_json: resource.field('dashboard_json'),
      id: resource.field('id'),
      project: resource.field('project'),
    },
    monitoring_group(name, block): {
      local resource = blockType.resource('google_monitoring_group', name),
      _: resource._(block, {
        display_name: build.template(block.display_name),
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        is_cluster: build.template(std.get(block, 'is_cluster', null)),
        name: build.template(std.get(block, 'name', null)),
        parent_name: build.template(std.get(block, 'parent_name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      display_name: resource.field('display_name'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      is_cluster: resource.field('is_cluster'),
      name: resource.field('name'),
      parent_name: resource.field('parent_name'),
      project: resource.field('project'),
    },
    monitoring_metric_descriptor(name, block): {
      local resource = blockType.resource('google_monitoring_metric_descriptor', name),
      _: resource._(block, {
        description: build.template(block.description),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        launch_stage: build.template(std.get(block, 'launch_stage', null)),
        metric_kind: build.template(block.metric_kind),
        monitored_resource_types: build.template(std.get(block, 'monitored_resource_types', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        type: build.template(block.type),
        unit: build.template(std.get(block, 'unit', null)),
        value_type: build.template(block.value_type),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      launch_stage: resource.field('launch_stage'),
      metric_kind: resource.field('metric_kind'),
      monitored_resource_types: resource.field('monitored_resource_types'),
      name: resource.field('name'),
      project: resource.field('project'),
      type: resource.field('type'),
      unit: resource.field('unit'),
      value_type: resource.field('value_type'),
    },
    monitoring_monitored_project(name, block): {
      local resource = blockType.resource('google_monitoring_monitored_project', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        id: build.template(std.get(block, 'id', null)),
        metrics_scope: build.template(block.metrics_scope),
        name: build.template(block.name),
      }),
      create_time: resource.field('create_time'),
      id: resource.field('id'),
      metrics_scope: resource.field('metrics_scope'),
      name: resource.field('name'),
    },
    monitoring_notification_channel(name, block): {
      local resource = blockType.resource('google_monitoring_notification_channel', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        type: build.template(block.type),
        user_labels: build.template(std.get(block, 'user_labels', null)),
        verification_status: build.template(std.get(block, 'verification_status', null)),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      enabled: resource.field('enabled'),
      force_delete: resource.field('force_delete'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      type: resource.field('type'),
      user_labels: resource.field('user_labels'),
      verification_status: resource.field('verification_status'),
    },
    monitoring_service(name, block): {
      local resource = blockType.resource('google_monitoring_service', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        service_id: build.template(block.service_id),
        telemetry: build.template(std.get(block, 'telemetry', null)),
        user_labels: build.template(std.get(block, 'user_labels', null)),
      }),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_id: resource.field('service_id'),
      telemetry: resource.field('telemetry'),
      user_labels: resource.field('user_labels'),
    },
    monitoring_slo(name, block): {
      local resource = blockType.resource('google_monitoring_slo', name),
      _: resource._(block, {
        calendar_period: build.template(std.get(block, 'calendar_period', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        goal: build.template(block.goal),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        rolling_period_days: build.template(std.get(block, 'rolling_period_days', null)),
        service: build.template(block.service),
        slo_id: build.template(std.get(block, 'slo_id', null)),
        user_labels: build.template(std.get(block, 'user_labels', null)),
      }),
      calendar_period: resource.field('calendar_period'),
      display_name: resource.field('display_name'),
      goal: resource.field('goal'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      rolling_period_days: resource.field('rolling_period_days'),
      service: resource.field('service'),
      slo_id: resource.field('slo_id'),
      user_labels: resource.field('user_labels'),
    },
    monitoring_uptime_check_config(name, block): {
      local resource = blockType.resource('google_monitoring_uptime_check_config', name),
      _: resource._(block, {
        checker_type: build.template(std.get(block, 'checker_type', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        period: build.template(std.get(block, 'period', null)),
        project: build.template(std.get(block, 'project', null)),
        selected_regions: build.template(std.get(block, 'selected_regions', null)),
        timeout: build.template(block.timeout),
        uptime_check_id: build.template(std.get(block, 'uptime_check_id', null)),
        user_labels: build.template(std.get(block, 'user_labels', null)),
      }),
      checker_type: resource.field('checker_type'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      period: resource.field('period'),
      project: resource.field('project'),
      selected_regions: resource.field('selected_regions'),
      timeout: resource.field('timeout'),
      uptime_check_id: resource.field('uptime_check_id'),
      user_labels: resource.field('user_labels'),
    },
    netapp_active_directory(name, block): {
      local resource = blockType.resource('google_netapp_active_directory', name),
      _: resource._(block, {
        administrators: build.template(std.get(block, 'administrators', null)),
        aes_encryption: build.template(std.get(block, 'aes_encryption', null)),
        backup_operators: build.template(std.get(block, 'backup_operators', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        dns: build.template(block.dns),
        domain: build.template(block.domain),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        encrypt_dc_connections: build.template(std.get(block, 'encrypt_dc_connections', null)),
        id: build.template(std.get(block, 'id', null)),
        kdc_hostname: build.template(std.get(block, 'kdc_hostname', null)),
        kdc_ip: build.template(std.get(block, 'kdc_ip', null)),
        labels: build.template(std.get(block, 'labels', null)),
        ldap_signing: build.template(std.get(block, 'ldap_signing', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        net_bios_prefix: build.template(block.net_bios_prefix),
        nfs_users_with_ldap: build.template(std.get(block, 'nfs_users_with_ldap', null)),
        organizational_unit: build.template(std.get(block, 'organizational_unit', null)),
        password: build.template(block.password),
        project: build.template(std.get(block, 'project', null)),
        security_operators: build.template(std.get(block, 'security_operators', null)),
        site: build.template(std.get(block, 'site', null)),
        state: build.template(std.get(block, 'state', null)),
        state_details: build.template(std.get(block, 'state_details', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        username: build.template(block.username),
      }),
      administrators: resource.field('administrators'),
      aes_encryption: resource.field('aes_encryption'),
      backup_operators: resource.field('backup_operators'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      dns: resource.field('dns'),
      domain: resource.field('domain'),
      effective_labels: resource.field('effective_labels'),
      encrypt_dc_connections: resource.field('encrypt_dc_connections'),
      id: resource.field('id'),
      kdc_hostname: resource.field('kdc_hostname'),
      kdc_ip: resource.field('kdc_ip'),
      labels: resource.field('labels'),
      ldap_signing: resource.field('ldap_signing'),
      location: resource.field('location'),
      name: resource.field('name'),
      net_bios_prefix: resource.field('net_bios_prefix'),
      nfs_users_with_ldap: resource.field('nfs_users_with_ldap'),
      organizational_unit: resource.field('organizational_unit'),
      password: resource.field('password'),
      project: resource.field('project'),
      security_operators: resource.field('security_operators'),
      site: resource.field('site'),
      state: resource.field('state'),
      state_details: resource.field('state_details'),
      terraform_labels: resource.field('terraform_labels'),
      username: resource.field('username'),
    },
    netapp_backup(name, block): {
      local resource = blockType.resource('google_netapp_backup', name),
      _: resource._(block, {
        backup_type: build.template(std.get(block, 'backup_type', null)),
        chain_storage_bytes: build.template(std.get(block, 'chain_storage_bytes', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        source_snapshot: build.template(std.get(block, 'source_snapshot', null)),
        source_volume: build.template(std.get(block, 'source_volume', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        vault_name: build.template(block.vault_name),
        volume_usage_bytes: build.template(std.get(block, 'volume_usage_bytes', null)),
      }),
      backup_type: resource.field('backup_type'),
      chain_storage_bytes: resource.field('chain_storage_bytes'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      source_snapshot: resource.field('source_snapshot'),
      source_volume: resource.field('source_volume'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      vault_name: resource.field('vault_name'),
      volume_usage_bytes: resource.field('volume_usage_bytes'),
    },
    netapp_backup_policy(name, block): {
      local resource = blockType.resource('google_netapp_backup_policy', name),
      _: resource._(block, {
        assigned_volume_count: build.template(std.get(block, 'assigned_volume_count', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        daily_backup_limit: build.template(block.daily_backup_limit),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        monthly_backup_limit: build.template(block.monthly_backup_limit),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        weekly_backup_limit: build.template(block.weekly_backup_limit),
      }),
      assigned_volume_count: resource.field('assigned_volume_count'),
      create_time: resource.field('create_time'),
      daily_backup_limit: resource.field('daily_backup_limit'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      monthly_backup_limit: resource.field('monthly_backup_limit'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      weekly_backup_limit: resource.field('weekly_backup_limit'),
    },
    netapp_backup_vault(name, block): {
      local resource = blockType.resource('google_netapp_backup_vault', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
    },
    netapp_kmsconfig(name, block): {
      local resource = blockType.resource('google_netapp_kmsconfig', name),
      _: resource._(block, {
        crypto_key_name: build.template(block.crypto_key_name),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        instructions: build.template(std.get(block, 'instructions', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      crypto_key_name: resource.field('crypto_key_name'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      instructions: resource.field('instructions'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_account: resource.field('service_account'),
      terraform_labels: resource.field('terraform_labels'),
    },
    netapp_storage_pool(name, block): {
      local resource = blockType.resource('google_netapp_storage_pool', name),
      _: resource._(block, {
        active_directory: build.template(std.get(block, 'active_directory', null)),
        allow_auto_tiering: build.template(std.get(block, 'allow_auto_tiering', null)),
        capacity_gib: build.template(block.capacity_gib),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        encryption_type: build.template(std.get(block, 'encryption_type', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_config: build.template(std.get(block, 'kms_config', null)),
        labels: build.template(std.get(block, 'labels', null)),
        ldap_enabled: build.template(std.get(block, 'ldap_enabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        network: build.template(block.network),
        project: build.template(std.get(block, 'project', null)),
        replica_zone: build.template(std.get(block, 'replica_zone', null)),
        service_level: build.template(block.service_level),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        volume_capacity_gib: build.template(std.get(block, 'volume_capacity_gib', null)),
        volume_count: build.template(std.get(block, 'volume_count', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      active_directory: resource.field('active_directory'),
      allow_auto_tiering: resource.field('allow_auto_tiering'),
      capacity_gib: resource.field('capacity_gib'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      encryption_type: resource.field('encryption_type'),
      id: resource.field('id'),
      kms_config: resource.field('kms_config'),
      labels: resource.field('labels'),
      ldap_enabled: resource.field('ldap_enabled'),
      location: resource.field('location'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      replica_zone: resource.field('replica_zone'),
      service_level: resource.field('service_level'),
      terraform_labels: resource.field('terraform_labels'),
      volume_capacity_gib: resource.field('volume_capacity_gib'),
      volume_count: resource.field('volume_count'),
      zone: resource.field('zone'),
    },
    netapp_volume(name, block): {
      local resource = blockType.resource('google_netapp_volume', name),
      _: resource._(block, {
        active_directory: build.template(std.get(block, 'active_directory', null)),
        capacity_gib: build.template(block.capacity_gib),
        cold_tier_size_gib: build.template(std.get(block, 'cold_tier_size_gib', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        encryption_type: build.template(std.get(block, 'encryption_type', null)),
        has_replication: build.template(std.get(block, 'has_replication', null)),
        id: build.template(std.get(block, 'id', null)),
        kerberos_enabled: build.template(std.get(block, 'kerberos_enabled', null)),
        kms_config: build.template(std.get(block, 'kms_config', null)),
        labels: build.template(std.get(block, 'labels', null)),
        large_capacity: build.template(std.get(block, 'large_capacity', null)),
        ldap_enabled: build.template(std.get(block, 'ldap_enabled', null)),
        location: build.template(block.location),
        mount_options: build.template(std.get(block, 'mount_options', null)),
        multiple_endpoints: build.template(std.get(block, 'multiple_endpoints', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        project: build.template(std.get(block, 'project', null)),
        protocols: build.template(block.protocols),
        psa_range: build.template(std.get(block, 'psa_range', null)),
        replica_zone: build.template(std.get(block, 'replica_zone', null)),
        restricted_actions: build.template(std.get(block, 'restricted_actions', null)),
        security_style: build.template(std.get(block, 'security_style', null)),
        service_level: build.template(std.get(block, 'service_level', null)),
        share_name: build.template(block.share_name),
        smb_settings: build.template(std.get(block, 'smb_settings', null)),
        snapshot_directory: build.template(std.get(block, 'snapshot_directory', null)),
        state: build.template(std.get(block, 'state', null)),
        state_details: build.template(std.get(block, 'state_details', null)),
        storage_pool: build.template(block.storage_pool),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        unix_permissions: build.template(std.get(block, 'unix_permissions', null)),
        used_gib: build.template(std.get(block, 'used_gib', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      active_directory: resource.field('active_directory'),
      capacity_gib: resource.field('capacity_gib'),
      cold_tier_size_gib: resource.field('cold_tier_size_gib'),
      create_time: resource.field('create_time'),
      deletion_policy: resource.field('deletion_policy'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      encryption_type: resource.field('encryption_type'),
      has_replication: resource.field('has_replication'),
      id: resource.field('id'),
      kerberos_enabled: resource.field('kerberos_enabled'),
      kms_config: resource.field('kms_config'),
      labels: resource.field('labels'),
      large_capacity: resource.field('large_capacity'),
      ldap_enabled: resource.field('ldap_enabled'),
      location: resource.field('location'),
      mount_options: resource.field('mount_options'),
      multiple_endpoints: resource.field('multiple_endpoints'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      protocols: resource.field('protocols'),
      psa_range: resource.field('psa_range'),
      replica_zone: resource.field('replica_zone'),
      restricted_actions: resource.field('restricted_actions'),
      security_style: resource.field('security_style'),
      service_level: resource.field('service_level'),
      share_name: resource.field('share_name'),
      smb_settings: resource.field('smb_settings'),
      snapshot_directory: resource.field('snapshot_directory'),
      state: resource.field('state'),
      state_details: resource.field('state_details'),
      storage_pool: resource.field('storage_pool'),
      terraform_labels: resource.field('terraform_labels'),
      unix_permissions: resource.field('unix_permissions'),
      used_gib: resource.field('used_gib'),
      zone: resource.field('zone'),
    },
    netapp_volume_replication(name, block): {
      local resource = blockType.resource('google_netapp_volume_replication', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_destination_volume: build.template(std.get(block, 'delete_destination_volume', null)),
        description: build.template(std.get(block, 'description', null)),
        destination_volume: build.template(std.get(block, 'destination_volume', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        force_stopping: build.template(std.get(block, 'force_stopping', null)),
        healthy: build.template(std.get(block, 'healthy', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        mirror_state: build.template(std.get(block, 'mirror_state', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        replication_enabled: build.template(std.get(block, 'replication_enabled', null)),
        replication_schedule: build.template(block.replication_schedule),
        role: build.template(std.get(block, 'role', null)),
        source_volume: build.template(std.get(block, 'source_volume', null)),
        state: build.template(std.get(block, 'state', null)),
        state_details: build.template(std.get(block, 'state_details', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        transfer_stats: build.template(std.get(block, 'transfer_stats', null)),
        volume_name: build.template(block.volume_name),
        wait_for_mirror: build.template(std.get(block, 'wait_for_mirror', null)),
      }),
      create_time: resource.field('create_time'),
      delete_destination_volume: resource.field('delete_destination_volume'),
      description: resource.field('description'),
      destination_volume: resource.field('destination_volume'),
      effective_labels: resource.field('effective_labels'),
      force_stopping: resource.field('force_stopping'),
      healthy: resource.field('healthy'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      mirror_state: resource.field('mirror_state'),
      name: resource.field('name'),
      project: resource.field('project'),
      replication_enabled: resource.field('replication_enabled'),
      replication_schedule: resource.field('replication_schedule'),
      role: resource.field('role'),
      source_volume: resource.field('source_volume'),
      state: resource.field('state'),
      state_details: resource.field('state_details'),
      terraform_labels: resource.field('terraform_labels'),
      transfer_stats: resource.field('transfer_stats'),
      volume_name: resource.field('volume_name'),
      wait_for_mirror: resource.field('wait_for_mirror'),
    },
    netapp_volume_snapshot(name, block): {
      local resource = blockType.resource('google_netapp_volume_snapshot', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        used_bytes: build.template(std.get(block, 'used_bytes', null)),
        volume_name: build.template(block.volume_name),
      }),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      used_bytes: resource.field('used_bytes'),
      volume_name: resource.field('volume_name'),
    },
    network_connectivity_group(name, block): {
      local resource = blockType.resource('google_network_connectivity_group', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        hub: build.template(block.hub),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        route_table: build.template(std.get(block, 'route_table', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      hub: resource.field('hub'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      route_table: resource.field('route_table'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    network_connectivity_hub(name, block): {
      local resource = blockType.resource('google_network_connectivity_hub', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        export_psc: build.template(std.get(block, 'export_psc', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        routing_vpcs: build.template(std.get(block, 'routing_vpcs', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      export_psc: resource.field('export_psc'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      routing_vpcs: resource.field('routing_vpcs'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      unique_id: resource.field('unique_id'),
      update_time: resource.field('update_time'),
    },
    network_connectivity_internal_range(name, block): {
      local resource = blockType.resource('google_network_connectivity_internal_range', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_cidr_range: build.template(std.get(block, 'ip_cidr_range', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        overlaps: build.template(std.get(block, 'overlaps', null)),
        peering: build.template(block.peering),
        prefix_length: build.template(std.get(block, 'prefix_length', null)),
        project: build.template(std.get(block, 'project', null)),
        target_cidr_range: build.template(std.get(block, 'target_cidr_range', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        usage: build.template(block.usage),
        users: build.template(std.get(block, 'users', null)),
      }),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      ip_cidr_range: resource.field('ip_cidr_range'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      network: resource.field('network'),
      overlaps: resource.field('overlaps'),
      peering: resource.field('peering'),
      prefix_length: resource.field('prefix_length'),
      project: resource.field('project'),
      target_cidr_range: resource.field('target_cidr_range'),
      terraform_labels: resource.field('terraform_labels'),
      usage: resource.field('usage'),
      users: resource.field('users'),
    },
    network_connectivity_policy_based_route(name, block): {
      local resource = blockType.resource('google_network_connectivity_policy_based_route', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        next_hop_ilb_ip: build.template(std.get(block, 'next_hop_ilb_ip', null)),
        next_hop_other_routes: build.template(std.get(block, 'next_hop_other_routes', null)),
        priority: build.template(std.get(block, 'priority', null)),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        warnings: build.template(std.get(block, 'warnings', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      kind: resource.field('kind'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      network: resource.field('network'),
      next_hop_ilb_ip: resource.field('next_hop_ilb_ip'),
      next_hop_other_routes: resource.field('next_hop_other_routes'),
      priority: resource.field('priority'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
      warnings: resource.field('warnings'),
    },
    network_connectivity_regional_endpoint(name, block): {
      local resource = blockType.resource('google_network_connectivity_regional_endpoint', name),
      _: resource._(block, {
        access_type: build.template(block.access_type),
        address: build.template(std.get(block, 'address', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        project: build.template(std.get(block, 'project', null)),
        psc_forwarding_rule: build.template(std.get(block, 'psc_forwarding_rule', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        target_google_api: build.template(block.target_google_api),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      access_type: resource.field('access_type'),
      address: resource.field('address'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      psc_forwarding_rule: resource.field('psc_forwarding_rule'),
      subnetwork: resource.field('subnetwork'),
      target_google_api: resource.field('target_google_api'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    network_connectivity_service_connection_policy(name, block): {
      local resource = blockType.resource('google_network_connectivity_service_connection_policy', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        infrastructure: build.template(std.get(block, 'infrastructure', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        network: build.template(block.network),
        project: build.template(std.get(block, 'project', null)),
        psc_connections: build.template(std.get(block, 'psc_connections', null)),
        service_class: build.template(block.service_class),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      infrastructure: resource.field('infrastructure'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      psc_connections: resource.field('psc_connections'),
      service_class: resource.field('service_class'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    network_connectivity_spoke(name, block): {
      local resource = blockType.resource('google_network_connectivity_spoke', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        hub: build.template(block.hub),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      hub: resource.field('hub'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      unique_id: resource.field('unique_id'),
      update_time: resource.field('update_time'),
    },
    network_management_connectivity_test(name, block): {
      local resource = blockType.resource('google_network_management_connectivity_test', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        related_projects: build.template(std.get(block, 'related_projects', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      protocol: resource.field('protocol'),
      related_projects: resource.field('related_projects'),
      terraform_labels: resource.field('terraform_labels'),
    },
    network_security_address_group(name, block): {
      local resource = blockType.resource('google_network_security_address_group', name),
      _: resource._(block, {
        capacity: build.template(block.capacity),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        items: build.template(std.get(block, 'items', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        parent: build.template(std.get(block, 'parent', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(block.type),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      capacity: resource.field('capacity'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      items: resource.field('items'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    network_security_address_group_iam_binding(name, block): {
      local resource = blockType.resource('google_network_security_address_group_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    network_security_address_group_iam_member(name, block): {
      local resource = blockType.resource('google_network_security_address_group_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    network_security_address_group_iam_policy(name, block): {
      local resource = blockType.resource('google_network_security_address_group_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    network_security_client_tls_policy(name, block): {
      local resource = blockType.resource('google_network_security_client_tls_policy', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        sni: build.template(std.get(block, 'sni', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      sni: resource.field('sni'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    network_security_firewall_endpoint(name, block): {
      local resource = blockType.resource('google_network_security_firewall_endpoint', name),
      _: resource._(block, {
        associated_networks: build.template(std.get(block, 'associated_networks', null)),
        billing_project_id: build.template(block.billing_project_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        parent: build.template(block.parent),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      associated_networks: resource.field('associated_networks'),
      billing_project_id: resource.field('billing_project_id'),
      create_time: resource.field('create_time'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      reconciling: resource.field('reconciling'),
      self_link: resource.field('self_link'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    network_security_firewall_endpoint_association(name, block): {
      local resource = blockType.resource('google_network_security_firewall_endpoint_association', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        firewall_endpoint: build.template(block.firewall_endpoint),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        network: build.template(block.network),
        parent: build.template(std.get(block, 'parent', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        tls_inspection_policy: build.template(std.get(block, 'tls_inspection_policy', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      disabled: resource.field('disabled'),
      effective_labels: resource.field('effective_labels'),
      firewall_endpoint: resource.field('firewall_endpoint'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      network: resource.field('network'),
      parent: resource.field('parent'),
      reconciling: resource.field('reconciling'),
      self_link: resource.field('self_link'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      tls_inspection_policy: resource.field('tls_inspection_policy'),
      update_time: resource.field('update_time'),
    },
    network_security_gateway_security_policy(name, block): {
      local resource = blockType.resource('google_network_security_gateway_security_policy', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        tls_inspection_policy: build.template(std.get(block, 'tls_inspection_policy', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      tls_inspection_policy: resource.field('tls_inspection_policy'),
      update_time: resource.field('update_time'),
    },
    network_security_gateway_security_policy_rule(name, block): {
      local resource = blockType.resource('google_network_security_gateway_security_policy_rule', name),
      _: resource._(block, {
        application_matcher: build.template(std.get(block, 'application_matcher', null)),
        basic_profile: build.template(block.basic_profile),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(block.enabled),
        gateway_security_policy: build.template(block.gateway_security_policy),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        priority: build.template(block.priority),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        session_matcher: build.template(block.session_matcher),
        tls_inspection_enabled: build.template(std.get(block, 'tls_inspection_enabled', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      application_matcher: resource.field('application_matcher'),
      basic_profile: resource.field('basic_profile'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      enabled: resource.field('enabled'),
      gateway_security_policy: resource.field('gateway_security_policy'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      priority: resource.field('priority'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      session_matcher: resource.field('session_matcher'),
      tls_inspection_enabled: resource.field('tls_inspection_enabled'),
      update_time: resource.field('update_time'),
    },
    network_security_security_profile(name, block): {
      local resource = blockType.resource('google_network_security_security_profile', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        parent: build.template(std.get(block, 'parent', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(block.type),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      self_link: resource.field('self_link'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    network_security_security_profile_group(name, block): {
      local resource = blockType.resource('google_network_security_security_profile_group', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        parent: build.template(std.get(block, 'parent', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        threat_prevention_profile: build.template(std.get(block, 'threat_prevention_profile', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      terraform_labels: resource.field('terraform_labels'),
      threat_prevention_profile: resource.field('threat_prevention_profile'),
      update_time: resource.field('update_time'),
    },
    network_security_server_tls_policy(name, block): {
      local resource = blockType.resource('google_network_security_server_tls_policy', name),
      _: resource._(block, {
        allow_open: build.template(std.get(block, 'allow_open', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      allow_open: resource.field('allow_open'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    network_security_tls_inspection_policy(name, block): {
      local resource = blockType.resource('google_network_security_tls_inspection_policy', name),
      _: resource._(block, {
        ca_pool: build.template(block.ca_pool),
        create_time: build.template(std.get(block, 'create_time', null)),
        custom_tls_features: build.template(std.get(block, 'custom_tls_features', null)),
        description: build.template(std.get(block, 'description', null)),
        exclude_public_ca_set: build.template(std.get(block, 'exclude_public_ca_set', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        min_tls_version: build.template(std.get(block, 'min_tls_version', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        tls_feature_profile: build.template(std.get(block, 'tls_feature_profile', null)),
        trust_config: build.template(std.get(block, 'trust_config', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      ca_pool: resource.field('ca_pool'),
      create_time: resource.field('create_time'),
      custom_tls_features: resource.field('custom_tls_features'),
      description: resource.field('description'),
      exclude_public_ca_set: resource.field('exclude_public_ca_set'),
      id: resource.field('id'),
      location: resource.field('location'),
      min_tls_version: resource.field('min_tls_version'),
      name: resource.field('name'),
      project: resource.field('project'),
      tls_feature_profile: resource.field('tls_feature_profile'),
      trust_config: resource.field('trust_config'),
      update_time: resource.field('update_time'),
    },
    network_security_url_lists(name, block): {
      local resource = blockType.resource('google_network_security_url_lists', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        values: build.template(block.values),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      update_time: resource.field('update_time'),
      values: resource.field('values'),
    },
    network_services_edge_cache_keyset(name, block): {
      local resource = blockType.resource('google_network_services_edge_cache_keyset', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
    },
    network_services_edge_cache_origin(name, block): {
      local resource = blockType.resource('google_network_services_edge_cache_origin', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        failover_origin: build.template(std.get(block, 'failover_origin', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        max_attempts: build.template(std.get(block, 'max_attempts', null)),
        name: build.template(block.name),
        origin_address: build.template(block.origin_address),
        port: build.template(std.get(block, 'port', null)),
        project: build.template(std.get(block, 'project', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        retry_conditions: build.template(std.get(block, 'retry_conditions', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      failover_origin: resource.field('failover_origin'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      max_attempts: resource.field('max_attempts'),
      name: resource.field('name'),
      origin_address: resource.field('origin_address'),
      port: resource.field('port'),
      project: resource.field('project'),
      protocol: resource.field('protocol'),
      retry_conditions: resource.field('retry_conditions'),
      terraform_labels: resource.field('terraform_labels'),
    },
    network_services_edge_cache_service(name, block): {
      local resource = blockType.resource('google_network_services_edge_cache_service', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        disable_http2: build.template(std.get(block, 'disable_http2', null)),
        disable_quic: build.template(std.get(block, 'disable_quic', null)),
        edge_security_policy: build.template(std.get(block, 'edge_security_policy', null)),
        edge_ssl_certificates: build.template(std.get(block, 'edge_ssl_certificates', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv4_addresses: build.template(std.get(block, 'ipv4_addresses', null)),
        ipv6_addresses: build.template(std.get(block, 'ipv6_addresses', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        require_tls: build.template(std.get(block, 'require_tls', null)),
        ssl_policy: build.template(std.get(block, 'ssl_policy', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      description: resource.field('description'),
      disable_http2: resource.field('disable_http2'),
      disable_quic: resource.field('disable_quic'),
      edge_security_policy: resource.field('edge_security_policy'),
      edge_ssl_certificates: resource.field('edge_ssl_certificates'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      ipv4_addresses: resource.field('ipv4_addresses'),
      ipv6_addresses: resource.field('ipv6_addresses'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      require_tls: resource.field('require_tls'),
      ssl_policy: resource.field('ssl_policy'),
      terraform_labels: resource.field('terraform_labels'),
    },
    network_services_gateway(name, block): {
      local resource = blockType.resource('google_network_services_gateway', name),
      _: resource._(block, {
        addresses: build.template(std.get(block, 'addresses', null)),
        certificate_urls: build.template(std.get(block, 'certificate_urls', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_swg_autogen_router_on_destroy: build.template(std.get(block, 'delete_swg_autogen_router_on_destroy', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        gateway_security_policy: build.template(std.get(block, 'gateway_security_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        ports: build.template(block.ports),
        project: build.template(std.get(block, 'project', null)),
        routing_mode: build.template(std.get(block, 'routing_mode', null)),
        scope: build.template(std.get(block, 'scope', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        server_tls_policy: build.template(std.get(block, 'server_tls_policy', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(block.type),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      addresses: resource.field('addresses'),
      certificate_urls: resource.field('certificate_urls'),
      create_time: resource.field('create_time'),
      delete_swg_autogen_router_on_destroy: resource.field('delete_swg_autogen_router_on_destroy'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      gateway_security_policy: resource.field('gateway_security_policy'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      network: resource.field('network'),
      ports: resource.field('ports'),
      project: resource.field('project'),
      routing_mode: resource.field('routing_mode'),
      scope: resource.field('scope'),
      self_link: resource.field('self_link'),
      server_tls_policy: resource.field('server_tls_policy'),
      subnetwork: resource.field('subnetwork'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    network_services_lb_route_extension(name, block): {
      local resource = blockType.resource('google_network_services_lb_route_extension', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        forwarding_rules: build.template(block.forwarding_rules),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        load_balancing_scheme: build.template(block.load_balancing_scheme),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      forwarding_rules: resource.field('forwarding_rules'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      load_balancing_scheme: resource.field('load_balancing_scheme'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
    },
    network_services_lb_traffic_extension(name, block): {
      local resource = blockType.resource('google_network_services_lb_traffic_extension', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        forwarding_rules: build.template(block.forwarding_rules),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        load_balancing_scheme: build.template(std.get(block, 'load_balancing_scheme', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      forwarding_rules: resource.field('forwarding_rules'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      load_balancing_scheme: resource.field('load_balancing_scheme'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
    },
    notebooks_environment(name, block): {
      local resource = blockType.resource('google_notebooks_environment', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        post_startup_script: build.template(std.get(block, 'post_startup_script', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      post_startup_script: resource.field('post_startup_script'),
      project: resource.field('project'),
    },
    notebooks_instance(name, block): {
      local resource = blockType.resource('google_notebooks_instance', name),
      _: resource._(block, {
        boot_disk_size_gb: build.template(std.get(block, 'boot_disk_size_gb', null)),
        boot_disk_type: build.template(std.get(block, 'boot_disk_type', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        custom_gpu_driver_path: build.template(std.get(block, 'custom_gpu_driver_path', null)),
        data_disk_size_gb: build.template(std.get(block, 'data_disk_size_gb', null)),
        data_disk_type: build.template(std.get(block, 'data_disk_type', null)),
        desired_state: build.template(std.get(block, 'desired_state', null)),
        disk_encryption: build.template(std.get(block, 'disk_encryption', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        install_gpu_driver: build.template(std.get(block, 'install_gpu_driver', null)),
        instance_owners: build.template(std.get(block, 'instance_owners', null)),
        kms_key: build.template(std.get(block, 'kms_key', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        machine_type: build.template(block.machine_type),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        nic_type: build.template(std.get(block, 'nic_type', null)),
        no_proxy_access: build.template(std.get(block, 'no_proxy_access', null)),
        no_public_ip: build.template(std.get(block, 'no_public_ip', null)),
        no_remove_data_disk: build.template(std.get(block, 'no_remove_data_disk', null)),
        post_startup_script: build.template(std.get(block, 'post_startup_script', null)),
        project: build.template(std.get(block, 'project', null)),
        proxy_uri: build.template(std.get(block, 'proxy_uri', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        service_account_scopes: build.template(std.get(block, 'service_account_scopes', null)),
        state: build.template(std.get(block, 'state', null)),
        subnet: build.template(std.get(block, 'subnet', null)),
        tags: build.template(std.get(block, 'tags', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      boot_disk_size_gb: resource.field('boot_disk_size_gb'),
      boot_disk_type: resource.field('boot_disk_type'),
      create_time: resource.field('create_time'),
      custom_gpu_driver_path: resource.field('custom_gpu_driver_path'),
      data_disk_size_gb: resource.field('data_disk_size_gb'),
      data_disk_type: resource.field('data_disk_type'),
      desired_state: resource.field('desired_state'),
      disk_encryption: resource.field('disk_encryption'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      install_gpu_driver: resource.field('install_gpu_driver'),
      instance_owners: resource.field('instance_owners'),
      kms_key: resource.field('kms_key'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      machine_type: resource.field('machine_type'),
      metadata: resource.field('metadata'),
      name: resource.field('name'),
      network: resource.field('network'),
      nic_type: resource.field('nic_type'),
      no_proxy_access: resource.field('no_proxy_access'),
      no_public_ip: resource.field('no_public_ip'),
      no_remove_data_disk: resource.field('no_remove_data_disk'),
      post_startup_script: resource.field('post_startup_script'),
      project: resource.field('project'),
      proxy_uri: resource.field('proxy_uri'),
      service_account: resource.field('service_account'),
      service_account_scopes: resource.field('service_account_scopes'),
      state: resource.field('state'),
      subnet: resource.field('subnet'),
      tags: resource.field('tags'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    notebooks_instance_iam_binding(name, block): {
      local resource = blockType.resource('google_notebooks_instance_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    notebooks_instance_iam_member(name, block): {
      local resource = blockType.resource('google_notebooks_instance_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    notebooks_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_notebooks_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    notebooks_location(name, block): {
      local resource = blockType.resource('google_notebooks_location', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
    },
    notebooks_runtime(name, block): {
      local resource = blockType.resource('google_notebooks_runtime', name),
      _: resource._(block, {
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        health_state: build.template(std.get(block, 'health_state', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        metrics: build.template(std.get(block, 'metrics', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      effective_labels: resource.field('effective_labels'),
      health_state: resource.field('health_state'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      metrics: resource.field('metrics'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
    },
    notebooks_runtime_iam_binding(name, block): {
      local resource = blockType.resource('google_notebooks_runtime_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        runtime_name: build.template(block.runtime_name),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      runtime_name: resource.field('runtime_name'),
    },
    notebooks_runtime_iam_member(name, block): {
      local resource = blockType.resource('google_notebooks_runtime_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        runtime_name: build.template(block.runtime_name),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      runtime_name: resource.field('runtime_name'),
    },
    notebooks_runtime_iam_policy(name, block): {
      local resource = blockType.resource('google_notebooks_runtime_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        runtime_name: build.template(block.runtime_name),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      runtime_name: resource.field('runtime_name'),
    },
    oracle_database_autonomous_database(name, block): {
      local resource = blockType.resource('google_oracle_database_autonomous_database', name),
      _: resource._(block, {
        admin_password: build.template(std.get(block, 'admin_password', null)),
        autonomous_database_id: build.template(block.autonomous_database_id),
        cidr: build.template(block.cidr),
        create_time: build.template(std.get(block, 'create_time', null)),
        database: build.template(block.database),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        entitlement_id: build.template(std.get(block, 'entitlement_id', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        network: build.template(block.network),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      admin_password: resource.field('admin_password'),
      autonomous_database_id: resource.field('autonomous_database_id'),
      cidr: resource.field('cidr'),
      create_time: resource.field('create_time'),
      database: resource.field('database'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      entitlement_id: resource.field('entitlement_id'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
    },
    oracle_database_cloud_exadata_infrastructure(name, block): {
      local resource = blockType.resource('google_oracle_database_cloud_exadata_infrastructure', name),
      _: resource._(block, {
        cloud_exadata_infrastructure_id: build.template(block.cloud_exadata_infrastructure_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        entitlement_id: build.template(std.get(block, 'entitlement_id', null)),
        gcp_oracle_zone: build.template(std.get(block, 'gcp_oracle_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      cloud_exadata_infrastructure_id: resource.field('cloud_exadata_infrastructure_id'),
      create_time: resource.field('create_time'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      entitlement_id: resource.field('entitlement_id'),
      gcp_oracle_zone: resource.field('gcp_oracle_zone'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
    },
    oracle_database_cloud_vm_cluster(name, block): {
      local resource = blockType.resource('google_oracle_database_cloud_vm_cluster', name),
      _: resource._(block, {
        backup_subnet_cidr: build.template(block.backup_subnet_cidr),
        cidr: build.template(block.cidr),
        cloud_vm_cluster_id: build.template(block.cloud_vm_cluster_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        exadata_infrastructure: build.template(block.exadata_infrastructure),
        gcp_oracle_zone: build.template(std.get(block, 'gcp_oracle_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        network: build.template(block.network),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      backup_subnet_cidr: resource.field('backup_subnet_cidr'),
      cidr: resource.field('cidr'),
      cloud_vm_cluster_id: resource.field('cloud_vm_cluster_id'),
      create_time: resource.field('create_time'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      exadata_infrastructure: resource.field('exadata_infrastructure'),
      gcp_oracle_zone: resource.field('gcp_oracle_zone'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
    },
    org_policy_custom_constraint(name, block): {
      local resource = blockType.resource('google_org_policy_custom_constraint', name),
      _: resource._(block, {
        action_type: build.template(block.action_type),
        condition: build.template(block.condition),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        method_types: build.template(block.method_types),
        name: build.template(block.name),
        parent: build.template(block.parent),
        resource_types: build.template(block.resource_types),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      action_type: resource.field('action_type'),
      condition: resource.field('condition'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      method_types: resource.field('method_types'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      resource_types: resource.field('resource_types'),
      update_time: resource.field('update_time'),
    },
    org_policy_policy(name, block): {
      local resource = blockType.resource('google_org_policy_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parent: build.template(block.parent),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
    },
    organization_access_approval_settings(name, block): {
      local resource = blockType.resource('google_organization_access_approval_settings', name),
      _: resource._(block, {
        active_key_version: build.template(std.get(block, 'active_key_version', null)),
        ancestor_has_active_key_version: build.template(std.get(block, 'ancestor_has_active_key_version', null)),
        enrolled_ancestor: build.template(std.get(block, 'enrolled_ancestor', null)),
        id: build.template(std.get(block, 'id', null)),
        invalid_key_version: build.template(std.get(block, 'invalid_key_version', null)),
        name: build.template(std.get(block, 'name', null)),
        notification_emails: build.template(std.get(block, 'notification_emails', null)),
        organization_id: build.template(block.organization_id),
      }),
      active_key_version: resource.field('active_key_version'),
      ancestor_has_active_key_version: resource.field('ancestor_has_active_key_version'),
      enrolled_ancestor: resource.field('enrolled_ancestor'),
      id: resource.field('id'),
      invalid_key_version: resource.field('invalid_key_version'),
      name: resource.field('name'),
      notification_emails: resource.field('notification_emails'),
      organization_id: resource.field('organization_id'),
    },
    organization_iam_audit_config(name, block): {
      local resource = blockType.resource('google_organization_iam_audit_config', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(block.org_id),
        service: build.template(block.service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      service: resource.field('service'),
    },
    organization_iam_binding(name, block): {
      local resource = blockType.resource('google_organization_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        org_id: build.template(block.org_id),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      org_id: resource.field('org_id'),
      role: resource.field('role'),
    },
    organization_iam_custom_role(name, block): {
      local resource = blockType.resource('google_organization_iam_custom_role', name),
      _: resource._(block, {
        deleted: build.template(std.get(block, 'deleted', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        org_id: build.template(block.org_id),
        permissions: build.template(block.permissions),
        role_id: build.template(block.role_id),
        stage: build.template(std.get(block, 'stage', null)),
        title: build.template(block.title),
      }),
      deleted: resource.field('deleted'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      permissions: resource.field('permissions'),
      role_id: resource.field('role_id'),
      stage: resource.field('stage'),
      title: resource.field('title'),
    },
    organization_iam_member(name, block): {
      local resource = blockType.resource('google_organization_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        org_id: build.template(block.org_id),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      org_id: resource.field('org_id'),
      role: resource.field('role'),
    },
    organization_iam_policy(name, block): {
      local resource = blockType.resource('google_organization_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(block.org_id),
        policy_data: build.template(block.policy_data),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      policy_data: resource.field('policy_data'),
    },
    organization_policy(name, block): {
      local resource = blockType.resource('google_organization_policy', name),
      _: resource._(block, {
        constraint: build.template(block.constraint),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(block.org_id),
        update_time: build.template(std.get(block, 'update_time', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      constraint: resource.field('constraint'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      update_time: resource.field('update_time'),
      version: resource.field('version'),
    },
    os_config_os_policy_assignment(name, block): {
      local resource = blockType.resource('google_os_config_os_policy_assignment', name),
      _: resource._(block, {
        baseline: build.template(std.get(block, 'baseline', null)),
        deleted: build.template(std.get(block, 'deleted', null)),
        description: build.template(std.get(block, 'description', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        revision_create_time: build.template(std.get(block, 'revision_create_time', null)),
        revision_id: build.template(std.get(block, 'revision_id', null)),
        rollout_state: build.template(std.get(block, 'rollout_state', null)),
        skip_await_rollout: build.template(std.get(block, 'skip_await_rollout', null)),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      baseline: resource.field('baseline'),
      deleted: resource.field('deleted'),
      description: resource.field('description'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      revision_create_time: resource.field('revision_create_time'),
      revision_id: resource.field('revision_id'),
      rollout_state: resource.field('rollout_state'),
      skip_await_rollout: resource.field('skip_await_rollout'),
      uid: resource.field('uid'),
    },
    os_config_patch_deployment(name, block): {
      local resource = blockType.resource('google_os_config_patch_deployment', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        duration: build.template(std.get(block, 'duration', null)),
        id: build.template(std.get(block, 'id', null)),
        last_execute_time: build.template(std.get(block, 'last_execute_time', null)),
        name: build.template(std.get(block, 'name', null)),
        patch_deployment_id: build.template(block.patch_deployment_id),
        project: build.template(std.get(block, 'project', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      duration: resource.field('duration'),
      id: resource.field('id'),
      last_execute_time: resource.field('last_execute_time'),
      name: resource.field('name'),
      patch_deployment_id: resource.field('patch_deployment_id'),
      project: resource.field('project'),
      update_time: resource.field('update_time'),
    },
    os_login_ssh_public_key(name, block): {
      local resource = blockType.resource('google_os_login_ssh_public_key', name),
      _: resource._(block, {
        expiration_time_usec: build.template(std.get(block, 'expiration_time_usec', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        project: build.template(std.get(block, 'project', null)),
        user: build.template(block.user),
      }),
      expiration_time_usec: resource.field('expiration_time_usec'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      key: resource.field('key'),
      project: resource.field('project'),
      user: resource.field('user'),
    },
    privateca_ca_pool(name, block): {
      local resource = blockType.resource('google_privateca_ca_pool', name),
      _: resource._(block, {
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        tier: build.template(block.tier),
      }),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      tier: resource.field('tier'),
    },
    privateca_ca_pool_iam_binding(name, block): {
      local resource = blockType.resource('google_privateca_ca_pool_iam_binding', name),
      _: resource._(block, {
        ca_pool: build.template(block.ca_pool),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      ca_pool: resource.field('ca_pool'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    privateca_ca_pool_iam_member(name, block): {
      local resource = blockType.resource('google_privateca_ca_pool_iam_member', name),
      _: resource._(block, {
        ca_pool: build.template(block.ca_pool),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      ca_pool: resource.field('ca_pool'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    privateca_ca_pool_iam_policy(name, block): {
      local resource = blockType.resource('google_privateca_ca_pool_iam_policy', name),
      _: resource._(block, {
        ca_pool: build.template(block.ca_pool),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      ca_pool: resource.field('ca_pool'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    privateca_certificate(name, block): {
      local resource = blockType.resource('google_privateca_certificate', name),
      _: resource._(block, {
        certificate_authority: build.template(std.get(block, 'certificate_authority', null)),
        certificate_description: build.template(std.get(block, 'certificate_description', null)),
        certificate_template: build.template(std.get(block, 'certificate_template', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        issuer_certificate_authority: build.template(std.get(block, 'issuer_certificate_authority', null)),
        labels: build.template(std.get(block, 'labels', null)),
        lifetime: build.template(std.get(block, 'lifetime', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        pem_certificate: build.template(std.get(block, 'pem_certificate', null)),
        pem_certificate_chain: build.template(std.get(block, 'pem_certificate_chain', null)),
        pem_csr: build.template(std.get(block, 'pem_csr', null)),
        pool: build.template(block.pool),
        project: build.template(std.get(block, 'project', null)),
        revocation_details: build.template(std.get(block, 'revocation_details', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      certificate_authority: resource.field('certificate_authority'),
      certificate_description: resource.field('certificate_description'),
      certificate_template: resource.field('certificate_template'),
      create_time: resource.field('create_time'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      issuer_certificate_authority: resource.field('issuer_certificate_authority'),
      labels: resource.field('labels'),
      lifetime: resource.field('lifetime'),
      location: resource.field('location'),
      name: resource.field('name'),
      pem_certificate: resource.field('pem_certificate'),
      pem_certificate_chain: resource.field('pem_certificate_chain'),
      pem_csr: resource.field('pem_csr'),
      pool: resource.field('pool'),
      project: resource.field('project'),
      revocation_details: resource.field('revocation_details'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    privateca_certificate_authority(name, block): {
      local resource = blockType.resource('google_privateca_certificate_authority', name),
      _: resource._(block, {
        access_urls: build.template(std.get(block, 'access_urls', null)),
        certificate_authority_id: build.template(block.certificate_authority_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        desired_state: build.template(std.get(block, 'desired_state', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        gcs_bucket: build.template(std.get(block, 'gcs_bucket', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_active_certificates_on_deletion: build.template(std.get(block, 'ignore_active_certificates_on_deletion', null)),
        labels: build.template(std.get(block, 'labels', null)),
        lifetime: build.template(std.get(block, 'lifetime', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        pem_ca_certificate: build.template(std.get(block, 'pem_ca_certificate', null)),
        pem_ca_certificates: build.template(std.get(block, 'pem_ca_certificates', null)),
        pool: build.template(block.pool),
        project: build.template(std.get(block, 'project', null)),
        skip_grace_period: build.template(std.get(block, 'skip_grace_period', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      access_urls: resource.field('access_urls'),
      certificate_authority_id: resource.field('certificate_authority_id'),
      create_time: resource.field('create_time'),
      deletion_protection: resource.field('deletion_protection'),
      desired_state: resource.field('desired_state'),
      effective_labels: resource.field('effective_labels'),
      gcs_bucket: resource.field('gcs_bucket'),
      id: resource.field('id'),
      ignore_active_certificates_on_deletion: resource.field('ignore_active_certificates_on_deletion'),
      labels: resource.field('labels'),
      lifetime: resource.field('lifetime'),
      location: resource.field('location'),
      name: resource.field('name'),
      pem_ca_certificate: resource.field('pem_ca_certificate'),
      pem_ca_certificates: resource.field('pem_ca_certificates'),
      pool: resource.field('pool'),
      project: resource.field('project'),
      skip_grace_period: resource.field('skip_grace_period'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    privateca_certificate_template(name, block): {
      local resource = blockType.resource('google_privateca_certificate_template', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        maximum_lifetime: build.template(std.get(block, 'maximum_lifetime', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      maximum_lifetime: resource.field('maximum_lifetime'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    privateca_certificate_template_iam_binding(name, block): {
      local resource = blockType.resource('google_privateca_certificate_template_iam_binding', name),
      _: resource._(block, {
        certificate_template: build.template(block.certificate_template),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      certificate_template: resource.field('certificate_template'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    privateca_certificate_template_iam_member(name, block): {
      local resource = blockType.resource('google_privateca_certificate_template_iam_member', name),
      _: resource._(block, {
        certificate_template: build.template(block.certificate_template),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      certificate_template: resource.field('certificate_template'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    privateca_certificate_template_iam_policy(name, block): {
      local resource = blockType.resource('google_privateca_certificate_template_iam_policy', name),
      _: resource._(block, {
        certificate_template: build.template(block.certificate_template),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      certificate_template: resource.field('certificate_template'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    privileged_access_manager_entitlement(name, block): {
      local resource = blockType.resource('google_privileged_access_manager_entitlement', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        entitlement_id: build.template(block.entitlement_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        max_request_duration: build.template(block.max_request_duration),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        state: build.template(std.get(block, 'state', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      entitlement_id: resource.field('entitlement_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      max_request_duration: resource.field('max_request_duration'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      state: resource.field('state'),
      update_time: resource.field('update_time'),
    },
    project(name, block): {
      local resource = blockType.resource('google_project', name),
      _: resource._(block, {
        auto_create_network: build.template(std.get(block, 'auto_create_network', null)),
        billing_account: build.template(std.get(block, 'billing_account', null)),
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        folder_id: build.template(std.get(block, 'folder_id', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        number: build.template(std.get(block, 'number', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        project_id: build.template(block.project_id),
        tags: build.template(std.get(block, 'tags', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      auto_create_network: resource.field('auto_create_network'),
      billing_account: resource.field('billing_account'),
      deletion_policy: resource.field('deletion_policy'),
      effective_labels: resource.field('effective_labels'),
      folder_id: resource.field('folder_id'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      number: resource.field('number'),
      org_id: resource.field('org_id'),
      project_id: resource.field('project_id'),
      tags: resource.field('tags'),
      terraform_labels: resource.field('terraform_labels'),
    },
    project_access_approval_settings(name, block): {
      local resource = blockType.resource('google_project_access_approval_settings', name),
      _: resource._(block, {
        active_key_version: build.template(std.get(block, 'active_key_version', null)),
        ancestor_has_active_key_version: build.template(std.get(block, 'ancestor_has_active_key_version', null)),
        enrolled_ancestor: build.template(std.get(block, 'enrolled_ancestor', null)),
        id: build.template(std.get(block, 'id', null)),
        invalid_key_version: build.template(std.get(block, 'invalid_key_version', null)),
        name: build.template(std.get(block, 'name', null)),
        notification_emails: build.template(std.get(block, 'notification_emails', null)),
        project: build.template(std.get(block, 'project', null)),
        project_id: build.template(block.project_id),
      }),
      active_key_version: resource.field('active_key_version'),
      ancestor_has_active_key_version: resource.field('ancestor_has_active_key_version'),
      enrolled_ancestor: resource.field('enrolled_ancestor'),
      id: resource.field('id'),
      invalid_key_version: resource.field('invalid_key_version'),
      name: resource.field('name'),
      notification_emails: resource.field('notification_emails'),
      project: resource.field('project'),
      project_id: resource.field('project_id'),
    },
    project_default_service_accounts(name, block): {
      local resource = blockType.resource('google_project_default_service_accounts', name),
      _: resource._(block, {
        action: build.template(block.action),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(block.project),
        restore_policy: build.template(std.get(block, 'restore_policy', null)),
        service_accounts: build.template(std.get(block, 'service_accounts', null)),
      }),
      action: resource.field('action'),
      id: resource.field('id'),
      project: resource.field('project'),
      restore_policy: resource.field('restore_policy'),
      service_accounts: resource.field('service_accounts'),
    },
    project_iam_audit_config(name, block): {
      local resource = blockType.resource('google_project_iam_audit_config', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(block.project),
        service: build.template(block.service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      project: resource.field('project'),
      service: resource.field('service'),
    },
    project_iam_binding(name, block): {
      local resource = blockType.resource('google_project_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(block.project),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    project_iam_custom_role(name, block): {
      local resource = blockType.resource('google_project_iam_custom_role', name),
      _: resource._(block, {
        deleted: build.template(std.get(block, 'deleted', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        permissions: build.template(block.permissions),
        project: build.template(std.get(block, 'project', null)),
        role_id: build.template(block.role_id),
        stage: build.template(std.get(block, 'stage', null)),
        title: build.template(block.title),
      }),
      deleted: resource.field('deleted'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      permissions: resource.field('permissions'),
      project: resource.field('project'),
      role_id: resource.field('role_id'),
      stage: resource.field('stage'),
      title: resource.field('title'),
    },
    project_iam_member(name, block): {
      local resource = blockType.resource('google_project_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(block.project),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    project_iam_member_remove(name, block): {
      local resource = blockType.resource('google_project_iam_member_remove', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(block.project),
        role: build.template(block.role),
      }),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    project_iam_policy(name, block): {
      local resource = blockType.resource('google_project_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(block.project),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    project_organization_policy(name, block): {
      local resource = blockType.resource('google_project_organization_policy', name),
      _: resource._(block, {
        constraint: build.template(block.constraint),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(block.project),
        update_time: build.template(std.get(block, 'update_time', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      constraint: resource.field('constraint'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      project: resource.field('project'),
      update_time: resource.field('update_time'),
      version: resource.field('version'),
    },
    project_service(name, block): {
      local resource = blockType.resource('google_project_service', name),
      _: resource._(block, {
        disable_dependent_services: build.template(std.get(block, 'disable_dependent_services', null)),
        disable_on_destroy: build.template(std.get(block, 'disable_on_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        service: build.template(block.service),
      }),
      disable_dependent_services: resource.field('disable_dependent_services'),
      disable_on_destroy: resource.field('disable_on_destroy'),
      id: resource.field('id'),
      project: resource.field('project'),
      service: resource.field('service'),
    },
    project_usage_export_bucket(name, block): {
      local resource = blockType.resource('google_project_usage_export_bucket', name),
      _: resource._(block, {
        bucket_name: build.template(block.bucket_name),
        id: build.template(std.get(block, 'id', null)),
        prefix: build.template(std.get(block, 'prefix', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      bucket_name: resource.field('bucket_name'),
      id: resource.field('id'),
      prefix: resource.field('prefix'),
      project: resource.field('project'),
    },
    public_ca_external_account_key(name, block): {
      local resource = blockType.resource('google_public_ca_external_account_key', name),
      _: resource._(block, {
        b64_mac_key: build.template(std.get(block, 'b64_mac_key', null)),
        id: build.template(std.get(block, 'id', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      b64_mac_key: resource.field('b64_mac_key'),
      id: resource.field('id'),
      key_id: resource.field('key_id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    pubsub_lite_reservation(name, block): {
      local resource = blockType.resource('google_pubsub_lite_reservation', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        throughput_capacity: build.template(block.throughput_capacity),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      throughput_capacity: resource.field('throughput_capacity'),
    },
    pubsub_lite_subscription(name, block): {
      local resource = blockType.resource('google_pubsub_lite_subscription', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        topic: build.template(block.topic),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      topic: resource.field('topic'),
      zone: resource.field('zone'),
    },
    pubsub_lite_topic(name, block): {
      local resource = blockType.resource('google_pubsub_lite_topic', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      zone: resource.field('zone'),
    },
    pubsub_schema(name, block): {
      local resource = blockType.resource('google_pubsub_schema', name),
      _: resource._(block, {
        definition: build.template(std.get(block, 'definition', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      definition: resource.field('definition'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      type: resource.field('type'),
    },
    pubsub_schema_iam_binding(name, block): {
      local resource = blockType.resource('google_pubsub_schema_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        schema: build.template(block.schema),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      schema: resource.field('schema'),
    },
    pubsub_schema_iam_member(name, block): {
      local resource = blockType.resource('google_pubsub_schema_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        schema: build.template(block.schema),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      schema: resource.field('schema'),
    },
    pubsub_schema_iam_policy(name, block): {
      local resource = blockType.resource('google_pubsub_schema_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        schema: build.template(block.schema),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      schema: resource.field('schema'),
    },
    pubsub_subscription(name, block): {
      local resource = blockType.resource('google_pubsub_subscription', name),
      _: resource._(block, {
        ack_deadline_seconds: build.template(std.get(block, 'ack_deadline_seconds', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_exactly_once_delivery: build.template(std.get(block, 'enable_exactly_once_delivery', null)),
        enable_message_ordering: build.template(std.get(block, 'enable_message_ordering', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        message_retention_duration: build.template(std.get(block, 'message_retention_duration', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        retain_acked_messages: build.template(std.get(block, 'retain_acked_messages', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        topic: build.template(block.topic),
      }),
      ack_deadline_seconds: resource.field('ack_deadline_seconds'),
      effective_labels: resource.field('effective_labels'),
      enable_exactly_once_delivery: resource.field('enable_exactly_once_delivery'),
      enable_message_ordering: resource.field('enable_message_ordering'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      message_retention_duration: resource.field('message_retention_duration'),
      name: resource.field('name'),
      project: resource.field('project'),
      retain_acked_messages: resource.field('retain_acked_messages'),
      terraform_labels: resource.field('terraform_labels'),
      topic: resource.field('topic'),
    },
    pubsub_subscription_iam_binding(name, block): {
      local resource = blockType.resource('google_pubsub_subscription_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        subscription: build.template(block.subscription),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      subscription: resource.field('subscription'),
    },
    pubsub_subscription_iam_member(name, block): {
      local resource = blockType.resource('google_pubsub_subscription_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        subscription: build.template(block.subscription),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      subscription: resource.field('subscription'),
    },
    pubsub_subscription_iam_policy(name, block): {
      local resource = blockType.resource('google_pubsub_subscription_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        subscription: build.template(block.subscription),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      subscription: resource.field('subscription'),
    },
    pubsub_topic(name, block): {
      local resource = blockType.resource('google_pubsub_topic', name),
      _: resource._(block, {
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        labels: build.template(std.get(block, 'labels', null)),
        message_retention_duration: build.template(std.get(block, 'message_retention_duration', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      labels: resource.field('labels'),
      message_retention_duration: resource.field('message_retention_duration'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
    },
    pubsub_topic_iam_binding(name, block): {
      local resource = blockType.resource('google_pubsub_topic_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        topic: build.template(block.topic),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      topic: resource.field('topic'),
    },
    pubsub_topic_iam_member(name, block): {
      local resource = blockType.resource('google_pubsub_topic_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        topic: build.template(block.topic),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      topic: resource.field('topic'),
    },
    pubsub_topic_iam_policy(name, block): {
      local resource = blockType.resource('google_pubsub_topic_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        topic: build.template(block.topic),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      topic: resource.field('topic'),
    },
    recaptcha_enterprise_key(name, block): {
      local resource = blockType.resource('google_recaptcha_enterprise_key', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        display_name: build.template(block.display_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      create_time: resource.field('create_time'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
    },
    redis_cluster(name, block): {
      local resource = blockType.resource('google_redis_cluster', name),
      _: resource._(block, {
        authorization_mode: build.template(std.get(block, 'authorization_mode', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        deletion_protection_enabled: build.template(std.get(block, 'deletion_protection_enabled', null)),
        discovery_endpoints: build.template(std.get(block, 'discovery_endpoints', null)),
        id: build.template(std.get(block, 'id', null)),
        maintenance_schedule: build.template(std.get(block, 'maintenance_schedule', null)),
        name: build.template(std.get(block, 'name', null)),
        node_type: build.template(std.get(block, 'node_type', null)),
        precise_size_gb: build.template(std.get(block, 'precise_size_gb', null)),
        project: build.template(std.get(block, 'project', null)),
        psc_connections: build.template(std.get(block, 'psc_connections', null)),
        redis_configs: build.template(std.get(block, 'redis_configs', null)),
        region: build.template(std.get(block, 'region', null)),
        replica_count: build.template(std.get(block, 'replica_count', null)),
        shard_count: build.template(block.shard_count),
        size_gb: build.template(std.get(block, 'size_gb', null)),
        state: build.template(std.get(block, 'state', null)),
        state_info: build.template(std.get(block, 'state_info', null)),
        transit_encryption_mode: build.template(std.get(block, 'transit_encryption_mode', null)),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      authorization_mode: resource.field('authorization_mode'),
      create_time: resource.field('create_time'),
      deletion_protection_enabled: resource.field('deletion_protection_enabled'),
      discovery_endpoints: resource.field('discovery_endpoints'),
      id: resource.field('id'),
      maintenance_schedule: resource.field('maintenance_schedule'),
      name: resource.field('name'),
      node_type: resource.field('node_type'),
      precise_size_gb: resource.field('precise_size_gb'),
      project: resource.field('project'),
      psc_connections: resource.field('psc_connections'),
      redis_configs: resource.field('redis_configs'),
      region: resource.field('region'),
      replica_count: resource.field('replica_count'),
      shard_count: resource.field('shard_count'),
      size_gb: resource.field('size_gb'),
      state: resource.field('state'),
      state_info: resource.field('state_info'),
      transit_encryption_mode: resource.field('transit_encryption_mode'),
      uid: resource.field('uid'),
    },
    redis_instance(name, block): {
      local resource = blockType.resource('google_redis_instance', name),
      _: resource._(block, {
        alternative_location_id: build.template(std.get(block, 'alternative_location_id', null)),
        auth_enabled: build.template(std.get(block, 'auth_enabled', null)),
        auth_string: build.template(std.get(block, 'auth_string', null)),
        authorized_network: build.template(std.get(block, 'authorized_network', null)),
        connect_mode: build.template(std.get(block, 'connect_mode', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        current_location_id: build.template(std.get(block, 'current_location_id', null)),
        customer_managed_key: build.template(std.get(block, 'customer_managed_key', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        host: build.template(std.get(block, 'host', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location_id: build.template(std.get(block, 'location_id', null)),
        maintenance_schedule: build.template(std.get(block, 'maintenance_schedule', null)),
        maintenance_version: build.template(std.get(block, 'maintenance_version', null)),
        memory_size_gb: build.template(block.memory_size_gb),
        name: build.template(block.name),
        nodes: build.template(std.get(block, 'nodes', null)),
        persistence_iam_identity: build.template(std.get(block, 'persistence_iam_identity', null)),
        port: build.template(std.get(block, 'port', null)),
        project: build.template(std.get(block, 'project', null)),
        read_endpoint: build.template(std.get(block, 'read_endpoint', null)),
        read_endpoint_port: build.template(std.get(block, 'read_endpoint_port', null)),
        read_replicas_mode: build.template(std.get(block, 'read_replicas_mode', null)),
        redis_configs: build.template(std.get(block, 'redis_configs', null)),
        redis_version: build.template(std.get(block, 'redis_version', null)),
        region: build.template(std.get(block, 'region', null)),
        replica_count: build.template(std.get(block, 'replica_count', null)),
        reserved_ip_range: build.template(std.get(block, 'reserved_ip_range', null)),
        secondary_ip_range: build.template(std.get(block, 'secondary_ip_range', null)),
        server_ca_certs: build.template(std.get(block, 'server_ca_certs', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        tier: build.template(std.get(block, 'tier', null)),
        transit_encryption_mode: build.template(std.get(block, 'transit_encryption_mode', null)),
      }),
      alternative_location_id: resource.field('alternative_location_id'),
      auth_enabled: resource.field('auth_enabled'),
      auth_string: resource.field('auth_string'),
      authorized_network: resource.field('authorized_network'),
      connect_mode: resource.field('connect_mode'),
      create_time: resource.field('create_time'),
      current_location_id: resource.field('current_location_id'),
      customer_managed_key: resource.field('customer_managed_key'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      host: resource.field('host'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location_id: resource.field('location_id'),
      maintenance_schedule: resource.field('maintenance_schedule'),
      maintenance_version: resource.field('maintenance_version'),
      memory_size_gb: resource.field('memory_size_gb'),
      name: resource.field('name'),
      nodes: resource.field('nodes'),
      persistence_iam_identity: resource.field('persistence_iam_identity'),
      port: resource.field('port'),
      project: resource.field('project'),
      read_endpoint: resource.field('read_endpoint'),
      read_endpoint_port: resource.field('read_endpoint_port'),
      read_replicas_mode: resource.field('read_replicas_mode'),
      redis_configs: resource.field('redis_configs'),
      redis_version: resource.field('redis_version'),
      region: resource.field('region'),
      replica_count: resource.field('replica_count'),
      reserved_ip_range: resource.field('reserved_ip_range'),
      secondary_ip_range: resource.field('secondary_ip_range'),
      server_ca_certs: resource.field('server_ca_certs'),
      terraform_labels: resource.field('terraform_labels'),
      tier: resource.field('tier'),
      transit_encryption_mode: resource.field('transit_encryption_mode'),
    },
    resource_manager_lien(name, block): {
      local resource = blockType.resource('google_resource_manager_lien', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        origin: build.template(block.origin),
        parent: build.template(block.parent),
        reason: build.template(block.reason),
        restrictions: build.template(block.restrictions),
      }),
      create_time: resource.field('create_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      origin: resource.field('origin'),
      parent: resource.field('parent'),
      reason: resource.field('reason'),
      restrictions: resource.field('restrictions'),
    },
    scc_event_threat_detection_custom_module(name, block): {
      local resource = blockType.resource('google_scc_event_threat_detection_custom_module', name),
      _: resource._(block, {
        config: build.template(block.config),
        display_name: build.template(std.get(block, 'display_name', null)),
        enablement_state: build.template(block.enablement_state),
        id: build.template(std.get(block, 'id', null)),
        last_editor: build.template(std.get(block, 'last_editor', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        type: build.template(block.type),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      config: resource.field('config'),
      display_name: resource.field('display_name'),
      enablement_state: resource.field('enablement_state'),
      id: resource.field('id'),
      last_editor: resource.field('last_editor'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    scc_folder_custom_module(name, block): {
      local resource = blockType.resource('google_scc_folder_custom_module', name),
      _: resource._(block, {
        ancestor_module: build.template(std.get(block, 'ancestor_module', null)),
        display_name: build.template(block.display_name),
        enablement_state: build.template(block.enablement_state),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        last_editor: build.template(std.get(block, 'last_editor', null)),
        name: build.template(std.get(block, 'name', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      ancestor_module: resource.field('ancestor_module'),
      display_name: resource.field('display_name'),
      enablement_state: resource.field('enablement_state'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      last_editor: resource.field('last_editor'),
      name: resource.field('name'),
      update_time: resource.field('update_time'),
    },
    scc_folder_notification_config(name, block): {
      local resource = blockType.resource('google_scc_folder_notification_config', name),
      _: resource._(block, {
        config_id: build.template(block.config_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        pubsub_topic: build.template(block.pubsub_topic),
        service_account: build.template(std.get(block, 'service_account', null)),
      }),
      config_id: resource.field('config_id'),
      description: resource.field('description'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      name: resource.field('name'),
      pubsub_topic: resource.field('pubsub_topic'),
      service_account: resource.field('service_account'),
    },
    scc_folder_scc_big_query_export(name, block): {
      local resource = blockType.resource('google_scc_folder_scc_big_query_export', name),
      _: resource._(block, {
        big_query_export_id: build.template(block.big_query_export_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        dataset: build.template(block.dataset),
        description: build.template(block.description),
        filter: build.template(block.filter),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        most_recent_editor: build.template(std.get(block, 'most_recent_editor', null)),
        name: build.template(std.get(block, 'name', null)),
        principal: build.template(std.get(block, 'principal', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      big_query_export_id: resource.field('big_query_export_id'),
      create_time: resource.field('create_time'),
      dataset: resource.field('dataset'),
      description: resource.field('description'),
      filter: resource.field('filter'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      most_recent_editor: resource.field('most_recent_editor'),
      name: resource.field('name'),
      principal: resource.field('principal'),
      update_time: resource.field('update_time'),
    },
    scc_management_folder_security_health_analytics_custom_module(name, block): {
      local resource = blockType.resource('google_scc_management_folder_security_health_analytics_custom_module', name),
      _: resource._(block, {
        ancestor_module: build.template(std.get(block, 'ancestor_module', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enablement_state: build.template(std.get(block, 'enablement_state', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        last_editor: build.template(std.get(block, 'last_editor', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      ancestor_module: resource.field('ancestor_module'),
      display_name: resource.field('display_name'),
      enablement_state: resource.field('enablement_state'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      last_editor: resource.field('last_editor'),
      location: resource.field('location'),
      name: resource.field('name'),
      update_time: resource.field('update_time'),
    },
    scc_management_organization_event_threat_detection_custom_module(name, block): {
      local resource = blockType.resource('google_scc_management_organization_event_threat_detection_custom_module', name),
      _: resource._(block, {
        config: build.template(std.get(block, 'config', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enablement_state: build.template(std.get(block, 'enablement_state', null)),
        id: build.template(std.get(block, 'id', null)),
        last_editor: build.template(std.get(block, 'last_editor', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        type: build.template(std.get(block, 'type', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      config: resource.field('config'),
      display_name: resource.field('display_name'),
      enablement_state: resource.field('enablement_state'),
      id: resource.field('id'),
      last_editor: resource.field('last_editor'),
      location: resource.field('location'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    scc_management_organization_security_health_analytics_custom_module(name, block): {
      local resource = blockType.resource('google_scc_management_organization_security_health_analytics_custom_module', name),
      _: resource._(block, {
        ancestor_module: build.template(std.get(block, 'ancestor_module', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enablement_state: build.template(std.get(block, 'enablement_state', null)),
        id: build.template(std.get(block, 'id', null)),
        last_editor: build.template(std.get(block, 'last_editor', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      ancestor_module: resource.field('ancestor_module'),
      display_name: resource.field('display_name'),
      enablement_state: resource.field('enablement_state'),
      id: resource.field('id'),
      last_editor: resource.field('last_editor'),
      location: resource.field('location'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      update_time: resource.field('update_time'),
    },
    scc_management_project_security_health_analytics_custom_module(name, block): {
      local resource = blockType.resource('google_scc_management_project_security_health_analytics_custom_module', name),
      _: resource._(block, {
        ancestor_module: build.template(std.get(block, 'ancestor_module', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enablement_state: build.template(std.get(block, 'enablement_state', null)),
        id: build.template(std.get(block, 'id', null)),
        last_editor: build.template(std.get(block, 'last_editor', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      ancestor_module: resource.field('ancestor_module'),
      display_name: resource.field('display_name'),
      enablement_state: resource.field('enablement_state'),
      id: resource.field('id'),
      last_editor: resource.field('last_editor'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      update_time: resource.field('update_time'),
    },
    scc_mute_config(name, block): {
      local resource = blockType.resource('google_scc_mute_config', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        most_recent_editor: build.template(std.get(block, 'most_recent_editor', null)),
        mute_config_id: build.template(block.mute_config_id),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      most_recent_editor: resource.field('most_recent_editor'),
      mute_config_id: resource.field('mute_config_id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      update_time: resource.field('update_time'),
    },
    scc_notification_config(name, block): {
      local resource = blockType.resource('google_scc_notification_config', name),
      _: resource._(block, {
        config_id: build.template(block.config_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        pubsub_topic: build.template(block.pubsub_topic),
        service_account: build.template(std.get(block, 'service_account', null)),
      }),
      config_id: resource.field('config_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      pubsub_topic: resource.field('pubsub_topic'),
      service_account: resource.field('service_account'),
    },
    scc_organization_custom_module(name, block): {
      local resource = blockType.resource('google_scc_organization_custom_module', name),
      _: resource._(block, {
        ancestor_module: build.template(std.get(block, 'ancestor_module', null)),
        display_name: build.template(block.display_name),
        enablement_state: build.template(block.enablement_state),
        id: build.template(std.get(block, 'id', null)),
        last_editor: build.template(std.get(block, 'last_editor', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      ancestor_module: resource.field('ancestor_module'),
      display_name: resource.field('display_name'),
      enablement_state: resource.field('enablement_state'),
      id: resource.field('id'),
      last_editor: resource.field('last_editor'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      update_time: resource.field('update_time'),
    },
    scc_organization_scc_big_query_export(name, block): {
      local resource = blockType.resource('google_scc_organization_scc_big_query_export', name),
      _: resource._(block, {
        big_query_export_id: build.template(block.big_query_export_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        dataset: build.template(std.get(block, 'dataset', null)),
        description: build.template(std.get(block, 'description', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        most_recent_editor: build.template(std.get(block, 'most_recent_editor', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        principal: build.template(std.get(block, 'principal', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      big_query_export_id: resource.field('big_query_export_id'),
      create_time: resource.field('create_time'),
      dataset: resource.field('dataset'),
      description: resource.field('description'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      most_recent_editor: resource.field('most_recent_editor'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      principal: resource.field('principal'),
      update_time: resource.field('update_time'),
    },
    scc_project_custom_module(name, block): {
      local resource = blockType.resource('google_scc_project_custom_module', name),
      _: resource._(block, {
        ancestor_module: build.template(std.get(block, 'ancestor_module', null)),
        display_name: build.template(block.display_name),
        enablement_state: build.template(block.enablement_state),
        id: build.template(std.get(block, 'id', null)),
        last_editor: build.template(std.get(block, 'last_editor', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      ancestor_module: resource.field('ancestor_module'),
      display_name: resource.field('display_name'),
      enablement_state: resource.field('enablement_state'),
      id: resource.field('id'),
      last_editor: resource.field('last_editor'),
      name: resource.field('name'),
      project: resource.field('project'),
      update_time: resource.field('update_time'),
    },
    scc_project_notification_config(name, block): {
      local resource = blockType.resource('google_scc_project_notification_config', name),
      _: resource._(block, {
        config_id: build.template(block.config_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        pubsub_topic: build.template(block.pubsub_topic),
        service_account: build.template(std.get(block, 'service_account', null)),
      }),
      config_id: resource.field('config_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      pubsub_topic: resource.field('pubsub_topic'),
      service_account: resource.field('service_account'),
    },
    scc_project_scc_big_query_export(name, block): {
      local resource = blockType.resource('google_scc_project_scc_big_query_export', name),
      _: resource._(block, {
        big_query_export_id: build.template(block.big_query_export_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        dataset: build.template(std.get(block, 'dataset', null)),
        description: build.template(std.get(block, 'description', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        most_recent_editor: build.template(std.get(block, 'most_recent_editor', null)),
        name: build.template(std.get(block, 'name', null)),
        principal: build.template(std.get(block, 'principal', null)),
        project: build.template(std.get(block, 'project', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      big_query_export_id: resource.field('big_query_export_id'),
      create_time: resource.field('create_time'),
      dataset: resource.field('dataset'),
      description: resource.field('description'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      most_recent_editor: resource.field('most_recent_editor'),
      name: resource.field('name'),
      principal: resource.field('principal'),
      project: resource.field('project'),
      update_time: resource.field('update_time'),
    },
    scc_source(name, block): {
      local resource = blockType.resource('google_scc_source', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      organization: resource.field('organization'),
    },
    scc_source_iam_binding(name, block): {
      local resource = blockType.resource('google_scc_source_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        organization: build.template(block.organization),
        role: build.template(block.role),
        source: build.template(block.source),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      organization: resource.field('organization'),
      role: resource.field('role'),
      source: resource.field('source'),
    },
    scc_source_iam_member(name, block): {
      local resource = blockType.resource('google_scc_source_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        organization: build.template(block.organization),
        role: build.template(block.role),
        source: build.template(block.source),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      organization: resource.field('organization'),
      role: resource.field('role'),
      source: resource.field('source'),
    },
    scc_source_iam_policy(name, block): {
      local resource = blockType.resource('google_scc_source_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(block.organization),
        policy_data: build.template(block.policy_data),
        source: build.template(block.source),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      organization: resource.field('organization'),
      policy_data: resource.field('policy_data'),
      source: resource.field('source'),
    },
    scc_v2_folder_mute_config(name, block): {
      local resource = blockType.resource('google_scc_v2_folder_mute_config', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        filter: build.template(block.filter),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        most_recent_editor: build.template(std.get(block, 'most_recent_editor', null)),
        mute_config_id: build.template(block.mute_config_id),
        name: build.template(std.get(block, 'name', null)),
        type: build.template(block.type),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      filter: resource.field('filter'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      location: resource.field('location'),
      most_recent_editor: resource.field('most_recent_editor'),
      mute_config_id: resource.field('mute_config_id'),
      name: resource.field('name'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    scc_v2_folder_notification_config(name, block): {
      local resource = blockType.resource('google_scc_v2_folder_notification_config', name),
      _: resource._(block, {
        config_id: build.template(block.config_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        pubsub_topic: build.template(block.pubsub_topic),
        service_account: build.template(std.get(block, 'service_account', null)),
      }),
      config_id: resource.field('config_id'),
      description: resource.field('description'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      pubsub_topic: resource.field('pubsub_topic'),
      service_account: resource.field('service_account'),
    },
    scc_v2_folder_scc_big_query_export(name, block): {
      local resource = blockType.resource('google_scc_v2_folder_scc_big_query_export', name),
      _: resource._(block, {
        big_query_export_id: build.template(block.big_query_export_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        dataset: build.template(std.get(block, 'dataset', null)),
        description: build.template(std.get(block, 'description', null)),
        filter: build.template(std.get(block, 'filter', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        most_recent_editor: build.template(std.get(block, 'most_recent_editor', null)),
        name: build.template(std.get(block, 'name', null)),
        principal: build.template(std.get(block, 'principal', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      big_query_export_id: resource.field('big_query_export_id'),
      create_time: resource.field('create_time'),
      dataset: resource.field('dataset'),
      description: resource.field('description'),
      filter: resource.field('filter'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      location: resource.field('location'),
      most_recent_editor: resource.field('most_recent_editor'),
      name: resource.field('name'),
      principal: resource.field('principal'),
      update_time: resource.field('update_time'),
    },
    scc_v2_organization_mute_config(name, block): {
      local resource = blockType.resource('google_scc_v2_organization_mute_config', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        most_recent_editor: build.template(std.get(block, 'most_recent_editor', null)),
        mute_config_id: build.template(block.mute_config_id),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        type: build.template(block.type),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      location: resource.field('location'),
      most_recent_editor: resource.field('most_recent_editor'),
      mute_config_id: resource.field('mute_config_id'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    scc_v2_organization_notification_config(name, block): {
      local resource = blockType.resource('google_scc_v2_organization_notification_config', name),
      _: resource._(block, {
        config_id: build.template(block.config_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        pubsub_topic: build.template(block.pubsub_topic),
        service_account: build.template(std.get(block, 'service_account', null)),
      }),
      config_id: resource.field('config_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      pubsub_topic: resource.field('pubsub_topic'),
      service_account: resource.field('service_account'),
    },
    scc_v2_organization_scc_big_query_export(name, block): {
      local resource = blockType.resource('google_scc_v2_organization_scc_big_query_export', name),
      _: resource._(block, {
        big_query_export_id: build.template(block.big_query_export_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        dataset: build.template(std.get(block, 'dataset', null)),
        description: build.template(std.get(block, 'description', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        most_recent_editor: build.template(std.get(block, 'most_recent_editor', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        principal: build.template(std.get(block, 'principal', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      big_query_export_id: resource.field('big_query_export_id'),
      create_time: resource.field('create_time'),
      dataset: resource.field('dataset'),
      description: resource.field('description'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      location: resource.field('location'),
      most_recent_editor: resource.field('most_recent_editor'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      principal: resource.field('principal'),
      update_time: resource.field('update_time'),
    },
    scc_v2_organization_scc_big_query_exports(name, block): {
      local resource = blockType.resource('google_scc_v2_organization_scc_big_query_exports', name),
      _: resource._(block, {
        big_query_export_id: build.template(block.big_query_export_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        dataset: build.template(std.get(block, 'dataset', null)),
        description: build.template(std.get(block, 'description', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        most_recent_editor: build.template(std.get(block, 'most_recent_editor', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        principal: build.template(std.get(block, 'principal', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      big_query_export_id: resource.field('big_query_export_id'),
      create_time: resource.field('create_time'),
      dataset: resource.field('dataset'),
      description: resource.field('description'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      location: resource.field('location'),
      most_recent_editor: resource.field('most_recent_editor'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      principal: resource.field('principal'),
      update_time: resource.field('update_time'),
    },
    scc_v2_organization_source(name, block): {
      local resource = blockType.resource('google_scc_v2_organization_source', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      organization: resource.field('organization'),
    },
    scc_v2_organization_source_iam_binding(name, block): {
      local resource = blockType.resource('google_scc_v2_organization_source_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        organization: build.template(block.organization),
        role: build.template(block.role),
        source: build.template(block.source),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      organization: resource.field('organization'),
      role: resource.field('role'),
      source: resource.field('source'),
    },
    scc_v2_organization_source_iam_member(name, block): {
      local resource = blockType.resource('google_scc_v2_organization_source_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        organization: build.template(block.organization),
        role: build.template(block.role),
        source: build.template(block.source),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      organization: resource.field('organization'),
      role: resource.field('role'),
      source: resource.field('source'),
    },
    scc_v2_organization_source_iam_policy(name, block): {
      local resource = blockType.resource('google_scc_v2_organization_source_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(block.organization),
        policy_data: build.template(block.policy_data),
        source: build.template(block.source),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      organization: resource.field('organization'),
      policy_data: resource.field('policy_data'),
      source: resource.field('source'),
    },
    scc_v2_project_mute_config(name, block): {
      local resource = blockType.resource('google_scc_v2_project_mute_config', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        most_recent_editor: build.template(std.get(block, 'most_recent_editor', null)),
        mute_config_id: build.template(block.mute_config_id),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        type: build.template(block.type),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      location: resource.field('location'),
      most_recent_editor: resource.field('most_recent_editor'),
      mute_config_id: resource.field('mute_config_id'),
      name: resource.field('name'),
      project: resource.field('project'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    scc_v2_project_notification_config(name, block): {
      local resource = blockType.resource('google_scc_v2_project_notification_config', name),
      _: resource._(block, {
        config_id: build.template(block.config_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        pubsub_topic: build.template(std.get(block, 'pubsub_topic', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
      }),
      config_id: resource.field('config_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      pubsub_topic: resource.field('pubsub_topic'),
      service_account: resource.field('service_account'),
    },
    scc_v2_project_scc_big_query_export(name, block): {
      local resource = blockType.resource('google_scc_v2_project_scc_big_query_export', name),
      _: resource._(block, {
        big_query_export_id: build.template(block.big_query_export_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        dataset: build.template(std.get(block, 'dataset', null)),
        description: build.template(std.get(block, 'description', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        most_recent_editor: build.template(std.get(block, 'most_recent_editor', null)),
        name: build.template(std.get(block, 'name', null)),
        principal: build.template(std.get(block, 'principal', null)),
        project: build.template(std.get(block, 'project', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      big_query_export_id: resource.field('big_query_export_id'),
      create_time: resource.field('create_time'),
      dataset: resource.field('dataset'),
      description: resource.field('description'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      location: resource.field('location'),
      most_recent_editor: resource.field('most_recent_editor'),
      name: resource.field('name'),
      principal: resource.field('principal'),
      project: resource.field('project'),
      update_time: resource.field('update_time'),
    },
    secret_manager_regional_secret(name, block): {
      local resource = blockType.resource('google_secret_manager_regional_secret', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        secret_id: build.template(block.secret_id),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        version_aliases: build.template(std.get(block, 'version_aliases', null)),
        version_destroy_ttl: build.template(std.get(block, 'version_destroy_ttl', null)),
      }),
      annotations: resource.field('annotations'),
      create_time: resource.field('create_time'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      secret_id: resource.field('secret_id'),
      terraform_labels: resource.field('terraform_labels'),
      ttl: resource.field('ttl'),
      version_aliases: resource.field('version_aliases'),
      version_destroy_ttl: resource.field('version_destroy_ttl'),
    },
    secret_manager_regional_secret_iam_binding(name, block): {
      local resource = blockType.resource('google_secret_manager_regional_secret_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        secret_id: build.template(block.secret_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      secret_id: resource.field('secret_id'),
    },
    secret_manager_regional_secret_iam_member(name, block): {
      local resource = blockType.resource('google_secret_manager_regional_secret_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        secret_id: build.template(block.secret_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      secret_id: resource.field('secret_id'),
    },
    secret_manager_regional_secret_iam_policy(name, block): {
      local resource = blockType.resource('google_secret_manager_regional_secret_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        secret_id: build.template(block.secret_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      secret_id: resource.field('secret_id'),
    },
    secret_manager_regional_secret_version(name, block): {
      local resource = blockType.resource('google_secret_manager_regional_secret_version', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        customer_managed_encryption: build.template(std.get(block, 'customer_managed_encryption', null)),
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        destroy_time: build.template(std.get(block, 'destroy_time', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        is_secret_data_base64: build.template(std.get(block, 'is_secret_data_base64', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        secret: build.template(block.secret),
        secret_data: build.template(block.secret_data),
        version: build.template(std.get(block, 'version', null)),
      }),
      create_time: resource.field('create_time'),
      customer_managed_encryption: resource.field('customer_managed_encryption'),
      deletion_policy: resource.field('deletion_policy'),
      destroy_time: resource.field('destroy_time'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      is_secret_data_base64: resource.field('is_secret_data_base64'),
      location: resource.field('location'),
      name: resource.field('name'),
      secret: resource.field('secret'),
      secret_data: resource.field('secret_data'),
      version: resource.field('version'),
    },
    secret_manager_secret(name, block): {
      local resource = blockType.resource('google_secret_manager_secret', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        secret_id: build.template(block.secret_id),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        version_aliases: build.template(std.get(block, 'version_aliases', null)),
        version_destroy_ttl: build.template(std.get(block, 'version_destroy_ttl', null)),
      }),
      annotations: resource.field('annotations'),
      create_time: resource.field('create_time'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      secret_id: resource.field('secret_id'),
      terraform_labels: resource.field('terraform_labels'),
      ttl: resource.field('ttl'),
      version_aliases: resource.field('version_aliases'),
      version_destroy_ttl: resource.field('version_destroy_ttl'),
    },
    secret_manager_secret_iam_binding(name, block): {
      local resource = blockType.resource('google_secret_manager_secret_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        secret_id: build.template(block.secret_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
      secret_id: resource.field('secret_id'),
    },
    secret_manager_secret_iam_member(name, block): {
      local resource = blockType.resource('google_secret_manager_secret_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
        secret_id: build.template(block.secret_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
      secret_id: resource.field('secret_id'),
    },
    secret_manager_secret_iam_policy(name, block): {
      local resource = blockType.resource('google_secret_manager_secret_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        secret_id: build.template(block.secret_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      secret_id: resource.field('secret_id'),
    },
    secret_manager_secret_version(name, block): {
      local resource = blockType.resource('google_secret_manager_secret_version', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        destroy_time: build.template(std.get(block, 'destroy_time', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        is_secret_data_base64: build.template(std.get(block, 'is_secret_data_base64', null)),
        name: build.template(std.get(block, 'name', null)),
        secret: build.template(block.secret),
        secret_data: build.template(block.secret_data),
        version: build.template(std.get(block, 'version', null)),
      }),
      create_time: resource.field('create_time'),
      deletion_policy: resource.field('deletion_policy'),
      destroy_time: resource.field('destroy_time'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      is_secret_data_base64: resource.field('is_secret_data_base64'),
      name: resource.field('name'),
      secret: resource.field('secret'),
      secret_data: resource.field('secret_data'),
      version: resource.field('version'),
    },
    secure_source_manager_branch_rule(name, block): {
      local resource = blockType.resource('google_secure_source_manager_branch_rule', name),
      _: resource._(block, {
        allow_stale_reviews: build.template(std.get(block, 'allow_stale_reviews', null)),
        branch_rule_id: build.template(block.branch_rule_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        id: build.template(std.get(block, 'id', null)),
        include_pattern: build.template(block.include_pattern),
        location: build.template(block.location),
        minimum_approvals_count: build.template(std.get(block, 'minimum_approvals_count', null)),
        minimum_reviews_count: build.template(std.get(block, 'minimum_reviews_count', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        repository_id: build.template(block.repository_id),
        require_comments_resolved: build.template(std.get(block, 'require_comments_resolved', null)),
        require_linear_history: build.template(std.get(block, 'require_linear_history', null)),
        require_pull_request: build.template(std.get(block, 'require_pull_request', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      allow_stale_reviews: resource.field('allow_stale_reviews'),
      branch_rule_id: resource.field('branch_rule_id'),
      create_time: resource.field('create_time'),
      disabled: resource.field('disabled'),
      id: resource.field('id'),
      include_pattern: resource.field('include_pattern'),
      location: resource.field('location'),
      minimum_approvals_count: resource.field('minimum_approvals_count'),
      minimum_reviews_count: resource.field('minimum_reviews_count'),
      name: resource.field('name'),
      project: resource.field('project'),
      repository_id: resource.field('repository_id'),
      require_comments_resolved: resource.field('require_comments_resolved'),
      require_linear_history: resource.field('require_linear_history'),
      require_pull_request: resource.field('require_pull_request'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    secure_source_manager_instance(name, block): {
      local resource = blockType.resource('google_secure_source_manager_instance', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        host_config: build.template(std.get(block, 'host_config', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        kms_key: build.template(std.get(block, 'kms_key', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        state_note: build.template(std.get(block, 'state_note', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      effective_labels: resource.field('effective_labels'),
      host_config: resource.field('host_config'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      kms_key: resource.field('kms_key'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      state_note: resource.field('state_note'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    secure_source_manager_instance_iam_binding(name, block): {
      local resource = blockType.resource('google_secure_source_manager_instance_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    secure_source_manager_instance_iam_member(name, block): {
      local resource = blockType.resource('google_secure_source_manager_instance_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    secure_source_manager_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_secure_source_manager_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    secure_source_manager_repository(name, block): {
      local resource = blockType.resource('google_secure_source_manager_repository', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        repository_id: build.template(block.repository_id),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        uris: build.template(std.get(block, 'uris', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      repository_id: resource.field('repository_id'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      uris: resource.field('uris'),
    },
    secure_source_manager_repository_iam_binding(name, block): {
      local resource = blockType.resource('google_secure_source_manager_repository_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        repository_id: build.template(block.repository_id),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      project: resource.field('project'),
      repository_id: resource.field('repository_id'),
      role: resource.field('role'),
    },
    secure_source_manager_repository_iam_member(name, block): {
      local resource = blockType.resource('google_secure_source_manager_repository_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        repository_id: build.template(block.repository_id),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      project: resource.field('project'),
      repository_id: resource.field('repository_id'),
      role: resource.field('role'),
    },
    secure_source_manager_repository_iam_policy(name, block): {
      local resource = blockType.resource('google_secure_source_manager_repository_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        repository_id: build.template(block.repository_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      repository_id: resource.field('repository_id'),
    },
    securityposture_posture(name, block): {
      local resource = blockType.resource('google_securityposture_posture', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        posture_id: build.template(block.posture_id),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        revision_id: build.template(std.get(block, 'revision_id', null)),
        state: build.template(block.state),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      posture_id: resource.field('posture_id'),
      reconciling: resource.field('reconciling'),
      revision_id: resource.field('revision_id'),
      state: resource.field('state'),
      update_time: resource.field('update_time'),
    },
    securityposture_posture_deployment(name, block): {
      local resource = blockType.resource('google_securityposture_posture_deployment', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        desired_posture_id: build.template(std.get(block, 'desired_posture_id', null)),
        desired_posture_revision_id: build.template(std.get(block, 'desired_posture_revision_id', null)),
        etag: build.template(std.get(block, 'etag', null)),
        failure_message: build.template(std.get(block, 'failure_message', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        posture_deployment_id: build.template(block.posture_deployment_id),
        posture_id: build.template(block.posture_id),
        posture_revision_id: build.template(block.posture_revision_id),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        state: build.template(std.get(block, 'state', null)),
        target_resource: build.template(block.target_resource),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      desired_posture_id: resource.field('desired_posture_id'),
      desired_posture_revision_id: resource.field('desired_posture_revision_id'),
      etag: resource.field('etag'),
      failure_message: resource.field('failure_message'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      posture_deployment_id: resource.field('posture_deployment_id'),
      posture_id: resource.field('posture_id'),
      posture_revision_id: resource.field('posture_revision_id'),
      reconciling: resource.field('reconciling'),
      state: resource.field('state'),
      target_resource: resource.field('target_resource'),
      update_time: resource.field('update_time'),
    },
    service_account(name, block): {
      local resource = blockType.resource('google_service_account', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        create_ignore_already_exists: build.template(std.get(block, 'create_ignore_already_exists', null)),
        description: build.template(std.get(block, 'description', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(std.get(block, 'member', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
      }),
      account_id: resource.field('account_id'),
      create_ignore_already_exists: resource.field('create_ignore_already_exists'),
      description: resource.field('description'),
      disabled: resource.field('disabled'),
      display_name: resource.field('display_name'),
      email: resource.field('email'),
      id: resource.field('id'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      unique_id: resource.field('unique_id'),
    },
    service_account_iam_binding(name, block): {
      local resource = blockType.resource('google_service_account_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
        service_account_id: build.template(block.service_account_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
      service_account_id: resource.field('service_account_id'),
    },
    service_account_iam_member(name, block): {
      local resource = blockType.resource('google_service_account_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
        service_account_id: build.template(block.service_account_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
      service_account_id: resource.field('service_account_id'),
    },
    service_account_iam_policy(name, block): {
      local resource = blockType.resource('google_service_account_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        service_account_id: build.template(block.service_account_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      service_account_id: resource.field('service_account_id'),
    },
    service_account_key(name, block): {
      local resource = blockType.resource('google_service_account_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        keepers: build.template(std.get(block, 'keepers', null)),
        key_algorithm: build.template(std.get(block, 'key_algorithm', null)),
        name: build.template(std.get(block, 'name', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        private_key_type: build.template(std.get(block, 'private_key_type', null)),
        public_key: build.template(std.get(block, 'public_key', null)),
        public_key_data: build.template(std.get(block, 'public_key_data', null)),
        public_key_type: build.template(std.get(block, 'public_key_type', null)),
        service_account_id: build.template(block.service_account_id),
        valid_after: build.template(std.get(block, 'valid_after', null)),
        valid_before: build.template(std.get(block, 'valid_before', null)),
      }),
      id: resource.field('id'),
      keepers: resource.field('keepers'),
      key_algorithm: resource.field('key_algorithm'),
      name: resource.field('name'),
      private_key: resource.field('private_key'),
      private_key_type: resource.field('private_key_type'),
      public_key: resource.field('public_key'),
      public_key_data: resource.field('public_key_data'),
      public_key_type: resource.field('public_key_type'),
      service_account_id: resource.field('service_account_id'),
      valid_after: resource.field('valid_after'),
      valid_before: resource.field('valid_before'),
    },
    service_networking_connection(name, block): {
      local resource = blockType.resource('google_service_networking_connection', name),
      _: resource._(block, {
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        network: build.template(block.network),
        peering: build.template(std.get(block, 'peering', null)),
        reserved_peering_ranges: build.template(block.reserved_peering_ranges),
        service: build.template(block.service),
        update_on_creation_fail: build.template(std.get(block, 'update_on_creation_fail', null)),
      }),
      deletion_policy: resource.field('deletion_policy'),
      id: resource.field('id'),
      network: resource.field('network'),
      peering: resource.field('peering'),
      reserved_peering_ranges: resource.field('reserved_peering_ranges'),
      service: resource.field('service'),
      update_on_creation_fail: resource.field('update_on_creation_fail'),
    },
    service_networking_peered_dns_domain(name, block): {
      local resource = blockType.resource('google_service_networking_peered_dns_domain', name),
      _: resource._(block, {
        dns_suffix: build.template(block.dns_suffix),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        parent: build.template(std.get(block, 'parent', null)),
        project: build.template(std.get(block, 'project', null)),
        service: build.template(std.get(block, 'service', null)),
      }),
      dns_suffix: resource.field('dns_suffix'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      parent: resource.field('parent'),
      project: resource.field('project'),
      service: resource.field('service'),
    },
    service_networking_vpc_service_controls(name, block): {
      local resource = blockType.resource('google_service_networking_vpc_service_controls', name),
      _: resource._(block, {
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
        network: build.template(block.network),
        project: build.template(std.get(block, 'project', null)),
        service: build.template(block.service),
      }),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      network: resource.field('network'),
      project: resource.field('project'),
      service: resource.field('service'),
    },
    site_verification_owner(name, block): {
      local resource = blockType.resource('google_site_verification_owner', name),
      _: resource._(block, {
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
        web_resource_id: build.template(block.web_resource_id),
      }),
      email: resource.field('email'),
      id: resource.field('id'),
      web_resource_id: resource.field('web_resource_id'),
    },
    site_verification_web_resource(name, block): {
      local resource = blockType.resource('google_site_verification_web_resource', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        owners: build.template(std.get(block, 'owners', null)),
        verification_method: build.template(block.verification_method),
        web_resource_id: build.template(std.get(block, 'web_resource_id', null)),
      }),
      id: resource.field('id'),
      owners: resource.field('owners'),
      verification_method: resource.field('verification_method'),
      web_resource_id: resource.field('web_resource_id'),
    },
    sourcerepo_repository(name, block): {
      local resource = blockType.resource('google_sourcerepo_repository', name),
      _: resource._(block, {
        create_ignore_already_exists: build.template(std.get(block, 'create_ignore_already_exists', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        size: build.template(std.get(block, 'size', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      create_ignore_already_exists: resource.field('create_ignore_already_exists'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      size: resource.field('size'),
      url: resource.field('url'),
    },
    sourcerepo_repository_iam_binding(name, block): {
      local resource = blockType.resource('google_sourcerepo_repository_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        repository: build.template(block.repository),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      project: resource.field('project'),
      repository: resource.field('repository'),
      role: resource.field('role'),
    },
    sourcerepo_repository_iam_member(name, block): {
      local resource = blockType.resource('google_sourcerepo_repository_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        repository: build.template(block.repository),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      repository: resource.field('repository'),
      role: resource.field('role'),
    },
    sourcerepo_repository_iam_policy(name, block): {
      local resource = blockType.resource('google_sourcerepo_repository_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
        repository: build.template(block.repository),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      repository: resource.field('repository'),
    },
    spanner_backup_schedule(name, block): {
      local resource = blockType.resource('google_spanner_backup_schedule', name),
      _: resource._(block, {
        database: build.template(block.database),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        retention_duration: build.template(block.retention_duration),
      }),
      database: resource.field('database'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      name: resource.field('name'),
      project: resource.field('project'),
      retention_duration: resource.field('retention_duration'),
    },
    spanner_database(name, block): {
      local resource = blockType.resource('google_spanner_database', name),
      _: resource._(block, {
        database_dialect: build.template(std.get(block, 'database_dialect', null)),
        ddl: build.template(std.get(block, 'ddl', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        enable_drop_protection: build.template(std.get(block, 'enable_drop_protection', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        version_retention_period: build.template(std.get(block, 'version_retention_period', null)),
      }),
      database_dialect: resource.field('database_dialect'),
      ddl: resource.field('ddl'),
      deletion_protection: resource.field('deletion_protection'),
      enable_drop_protection: resource.field('enable_drop_protection'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      version_retention_period: resource.field('version_retention_period'),
    },
    spanner_database_iam_binding(name, block): {
      local resource = blockType.resource('google_spanner_database_iam_binding', name),
      _: resource._(block, {
        database: build.template(block.database),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      database: resource.field('database'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    spanner_database_iam_member(name, block): {
      local resource = blockType.resource('google_spanner_database_iam_member', name),
      _: resource._(block, {
        database: build.template(block.database),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      database: resource.field('database'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    spanner_database_iam_policy(name, block): {
      local resource = blockType.resource('google_spanner_database_iam_policy', name),
      _: resource._(block, {
        database: build.template(block.database),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      database: resource.field('database'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    spanner_instance(name, block): {
      local resource = blockType.resource('google_spanner_instance', name),
      _: resource._(block, {
        config: build.template(block.config),
        default_backup_schedule_type: build.template(std.get(block, 'default_backup_schedule_type', null)),
        display_name: build.template(block.display_name),
        edition: build.template(std.get(block, 'edition', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        num_nodes: build.template(std.get(block, 'num_nodes', null)),
        processing_units: build.template(std.get(block, 'processing_units', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      config: resource.field('config'),
      default_backup_schedule_type: resource.field('default_backup_schedule_type'),
      display_name: resource.field('display_name'),
      edition: resource.field('edition'),
      effective_labels: resource.field('effective_labels'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      num_nodes: resource.field('num_nodes'),
      processing_units: resource.field('processing_units'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
    },
    spanner_instance_config(name, block): {
      local resource = blockType.resource('google_spanner_instance_config', name),
      _: resource._(block, {
        base_config: build.template(std.get(block, 'base_config', null)),
        config_type: build.template(std.get(block, 'config_type', null)),
        display_name: build.template(block.display_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      base_config: resource.field('base_config'),
      config_type: resource.field('config_type'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
    },
    spanner_instance_iam_binding(name, block): {
      local resource = blockType.resource('google_spanner_instance_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        members: build.template(block.members),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      members: resource.field('members'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    spanner_instance_iam_member(name, block): {
      local resource = blockType.resource('google_spanner_instance_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        member: build.template(block.member),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      member: resource.field('member'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    spanner_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_spanner_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    sql_database(name, block): {
      local resource = blockType.resource('google_sql_database', name),
      _: resource._(block, {
        charset: build.template(std.get(block, 'charset', null)),
        collation: build.template(std.get(block, 'collation', null)),
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      charset: resource.field('charset'),
      collation: resource.field('collation'),
      deletion_policy: resource.field('deletion_policy'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
    },
    sql_database_instance(name, block): {
      local resource = blockType.resource('google_sql_database_instance', name),
      _: resource._(block, {
        available_maintenance_versions: build.template(std.get(block, 'available_maintenance_versions', null)),
        connection_name: build.template(std.get(block, 'connection_name', null)),
        database_version: build.template(block.database_version),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        encryption_key_name: build.template(std.get(block, 'encryption_key_name', null)),
        first_ip_address: build.template(std.get(block, 'first_ip_address', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        maintenance_version: build.template(std.get(block, 'maintenance_version', null)),
        master_instance_name: build.template(std.get(block, 'master_instance_name', null)),
        name: build.template(std.get(block, 'name', null)),
        private_ip_address: build.template(std.get(block, 'private_ip_address', null)),
        project: build.template(std.get(block, 'project', null)),
        psc_service_attachment_link: build.template(std.get(block, 'psc_service_attachment_link', null)),
        public_ip_address: build.template(std.get(block, 'public_ip_address', null)),
        region: build.template(std.get(block, 'region', null)),
        replica_names: build.template(std.get(block, 'replica_names', null)),
        root_password: build.template(std.get(block, 'root_password', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        server_ca_cert: build.template(std.get(block, 'server_ca_cert', null)),
        service_account_email_address: build.template(std.get(block, 'service_account_email_address', null)),
      }),
      available_maintenance_versions: resource.field('available_maintenance_versions'),
      connection_name: resource.field('connection_name'),
      database_version: resource.field('database_version'),
      deletion_protection: resource.field('deletion_protection'),
      dns_name: resource.field('dns_name'),
      encryption_key_name: resource.field('encryption_key_name'),
      first_ip_address: resource.field('first_ip_address'),
      id: resource.field('id'),
      instance_type: resource.field('instance_type'),
      ip_address: resource.field('ip_address'),
      maintenance_version: resource.field('maintenance_version'),
      master_instance_name: resource.field('master_instance_name'),
      name: resource.field('name'),
      private_ip_address: resource.field('private_ip_address'),
      project: resource.field('project'),
      psc_service_attachment_link: resource.field('psc_service_attachment_link'),
      public_ip_address: resource.field('public_ip_address'),
      region: resource.field('region'),
      replica_names: resource.field('replica_names'),
      root_password: resource.field('root_password'),
      self_link: resource.field('self_link'),
      server_ca_cert: resource.field('server_ca_cert'),
      service_account_email_address: resource.field('service_account_email_address'),
    },
    sql_source_representation_instance(name, block): {
      local resource = blockType.resource('google_sql_source_representation_instance', name),
      _: resource._(block, {
        ca_certificate: build.template(std.get(block, 'ca_certificate', null)),
        client_certificate: build.template(std.get(block, 'client_certificate', null)),
        client_key: build.template(std.get(block, 'client_key', null)),
        database_version: build.template(block.database_version),
        dump_file_path: build.template(std.get(block, 'dump_file_path', null)),
        host: build.template(block.host),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        password: build.template(std.get(block, 'password', null)),
        port: build.template(std.get(block, 'port', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      ca_certificate: resource.field('ca_certificate'),
      client_certificate: resource.field('client_certificate'),
      client_key: resource.field('client_key'),
      database_version: resource.field('database_version'),
      dump_file_path: resource.field('dump_file_path'),
      host: resource.field('host'),
      id: resource.field('id'),
      name: resource.field('name'),
      password: resource.field('password'),
      port: resource.field('port'),
      project: resource.field('project'),
      region: resource.field('region'),
      username: resource.field('username'),
    },
    sql_ssl_cert(name, block): {
      local resource = blockType.resource('google_sql_ssl_cert', name),
      _: resource._(block, {
        cert: build.template(std.get(block, 'cert', null)),
        cert_serial_number: build.template(std.get(block, 'cert_serial_number', null)),
        common_name: build.template(block.common_name),
        create_time: build.template(std.get(block, 'create_time', null)),
        expiration_time: build.template(std.get(block, 'expiration_time', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        private_key: build.template(std.get(block, 'private_key', null)),
        project: build.template(std.get(block, 'project', null)),
        server_ca_cert: build.template(std.get(block, 'server_ca_cert', null)),
        sha1_fingerprint: build.template(std.get(block, 'sha1_fingerprint', null)),
      }),
      cert: resource.field('cert'),
      cert_serial_number: resource.field('cert_serial_number'),
      common_name: resource.field('common_name'),
      create_time: resource.field('create_time'),
      expiration_time: resource.field('expiration_time'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      private_key: resource.field('private_key'),
      project: resource.field('project'),
      server_ca_cert: resource.field('server_ca_cert'),
      sha1_fingerprint: resource.field('sha1_fingerprint'),
    },
    sql_user(name, block): {
      local resource = blockType.resource('google_sql_user', name),
      _: resource._(block, {
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        host: build.template(std.get(block, 'host', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        name: build.template(block.name),
        password: build.template(std.get(block, 'password', null)),
        project: build.template(std.get(block, 'project', null)),
        sql_server_user_details: build.template(std.get(block, 'sql_server_user_details', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      deletion_policy: resource.field('deletion_policy'),
      host: resource.field('host'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      name: resource.field('name'),
      password: resource.field('password'),
      project: resource.field('project'),
      sql_server_user_details: resource.field('sql_server_user_details'),
      type: resource.field('type'),
    },
    storage_bucket(name, block): {
      local resource = blockType.resource('google_storage_bucket', name),
      _: resource._(block, {
        default_event_based_hold: build.template(std.get(block, 'default_event_based_hold', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_object_retention: build.template(std.get(block, 'enable_object_retention', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        project_number: build.template(std.get(block, 'project_number', null)),
        public_access_prevention: build.template(std.get(block, 'public_access_prevention', null)),
        requester_pays: build.template(std.get(block, 'requester_pays', null)),
        rpo: build.template(std.get(block, 'rpo', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        storage_class: build.template(std.get(block, 'storage_class', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uniform_bucket_level_access: build.template(std.get(block, 'uniform_bucket_level_access', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      default_event_based_hold: resource.field('default_event_based_hold'),
      effective_labels: resource.field('effective_labels'),
      enable_object_retention: resource.field('enable_object_retention'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      project_number: resource.field('project_number'),
      public_access_prevention: resource.field('public_access_prevention'),
      requester_pays: resource.field('requester_pays'),
      rpo: resource.field('rpo'),
      self_link: resource.field('self_link'),
      storage_class: resource.field('storage_class'),
      terraform_labels: resource.field('terraform_labels'),
      uniform_bucket_level_access: resource.field('uniform_bucket_level_access'),
      url: resource.field('url'),
    },
    storage_bucket_access_control(name, block): {
      local resource = blockType.resource('google_storage_bucket_access_control', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        domain: build.template(std.get(block, 'domain', null)),
        email: build.template(std.get(block, 'email', null)),
        entity: build.template(block.entity),
        id: build.template(std.get(block, 'id', null)),
        role: build.template(std.get(block, 'role', null)),
      }),
      bucket: resource.field('bucket'),
      domain: resource.field('domain'),
      email: resource.field('email'),
      entity: resource.field('entity'),
      id: resource.field('id'),
      role: resource.field('role'),
    },
    storage_bucket_acl(name, block): {
      local resource = blockType.resource('google_storage_bucket_acl', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        default_acl: build.template(std.get(block, 'default_acl', null)),
        id: build.template(std.get(block, 'id', null)),
        predefined_acl: build.template(std.get(block, 'predefined_acl', null)),
        role_entity: build.template(std.get(block, 'role_entity', null)),
      }),
      bucket: resource.field('bucket'),
      default_acl: resource.field('default_acl'),
      id: resource.field('id'),
      predefined_acl: resource.field('predefined_acl'),
      role_entity: resource.field('role_entity'),
    },
    storage_bucket_iam_binding(name, block): {
      local resource = blockType.resource('google_storage_bucket_iam_binding', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
      }),
      bucket: resource.field('bucket'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
    },
    storage_bucket_iam_member(name, block): {
      local resource = blockType.resource('google_storage_bucket_iam_member', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
      }),
      bucket: resource.field('bucket'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
    },
    storage_bucket_iam_policy(name, block): {
      local resource = blockType.resource('google_storage_bucket_iam_policy', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
      }),
      bucket: resource.field('bucket'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    storage_bucket_object(name, block): {
      local resource = blockType.resource('google_storage_bucket_object', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        cache_control: build.template(std.get(block, 'cache_control', null)),
        content: build.template(std.get(block, 'content', null)),
        content_disposition: build.template(std.get(block, 'content_disposition', null)),
        content_encoding: build.template(std.get(block, 'content_encoding', null)),
        content_language: build.template(std.get(block, 'content_language', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        crc32c: build.template(std.get(block, 'crc32c', null)),
        detect_md5hash: build.template(std.get(block, 'detect_md5hash', null)),
        event_based_hold: build.template(std.get(block, 'event_based_hold', null)),
        generation: build.template(std.get(block, 'generation', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        md5hash: build.template(std.get(block, 'md5hash', null)),
        media_link: build.template(std.get(block, 'media_link', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        output_name: build.template(std.get(block, 'output_name', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        source: build.template(std.get(block, 'source', null)),
        storage_class: build.template(std.get(block, 'storage_class', null)),
        temporary_hold: build.template(std.get(block, 'temporary_hold', null)),
      }),
      bucket: resource.field('bucket'),
      cache_control: resource.field('cache_control'),
      content: resource.field('content'),
      content_disposition: resource.field('content_disposition'),
      content_encoding: resource.field('content_encoding'),
      content_language: resource.field('content_language'),
      content_type: resource.field('content_type'),
      crc32c: resource.field('crc32c'),
      detect_md5hash: resource.field('detect_md5hash'),
      event_based_hold: resource.field('event_based_hold'),
      generation: resource.field('generation'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      md5hash: resource.field('md5hash'),
      media_link: resource.field('media_link'),
      metadata: resource.field('metadata'),
      name: resource.field('name'),
      output_name: resource.field('output_name'),
      self_link: resource.field('self_link'),
      source: resource.field('source'),
      storage_class: resource.field('storage_class'),
      temporary_hold: resource.field('temporary_hold'),
    },
    storage_default_object_access_control(name, block): {
      local resource = blockType.resource('google_storage_default_object_access_control', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        domain: build.template(std.get(block, 'domain', null)),
        email: build.template(std.get(block, 'email', null)),
        entity: build.template(block.entity),
        entity_id: build.template(std.get(block, 'entity_id', null)),
        generation: build.template(std.get(block, 'generation', null)),
        id: build.template(std.get(block, 'id', null)),
        object: build.template(std.get(block, 'object', null)),
        project_team: build.template(std.get(block, 'project_team', null)),
        role: build.template(block.role),
      }),
      bucket: resource.field('bucket'),
      domain: resource.field('domain'),
      email: resource.field('email'),
      entity: resource.field('entity'),
      entity_id: resource.field('entity_id'),
      generation: resource.field('generation'),
      id: resource.field('id'),
      object: resource.field('object'),
      project_team: resource.field('project_team'),
      role: resource.field('role'),
    },
    storage_default_object_acl(name, block): {
      local resource = blockType.resource('google_storage_default_object_acl', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        id: build.template(std.get(block, 'id', null)),
        role_entity: build.template(std.get(block, 'role_entity', null)),
      }),
      bucket: resource.field('bucket'),
      id: resource.field('id'),
      role_entity: resource.field('role_entity'),
    },
    storage_hmac_key(name, block): {
      local resource = blockType.resource('google_storage_hmac_key', name),
      _: resource._(block, {
        access_id: build.template(std.get(block, 'access_id', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        secret: build.template(std.get(block, 'secret', null)),
        service_account_email: build.template(block.service_account_email),
        state: build.template(std.get(block, 'state', null)),
        time_created: build.template(std.get(block, 'time_created', null)),
        updated: build.template(std.get(block, 'updated', null)),
      }),
      access_id: resource.field('access_id'),
      id: resource.field('id'),
      project: resource.field('project'),
      secret: resource.field('secret'),
      service_account_email: resource.field('service_account_email'),
      state: resource.field('state'),
      time_created: resource.field('time_created'),
      updated: resource.field('updated'),
    },
    storage_insights_report_config(name, block): {
      local resource = blockType.resource('google_storage_insights_report_config', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    storage_managed_folder(name, block): {
      local resource = blockType.resource('google_storage_managed_folder', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        create_time: build.template(std.get(block, 'create_time', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        metageneration: build.template(std.get(block, 'metageneration', null)),
        name: build.template(block.name),
        self_link: build.template(std.get(block, 'self_link', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      bucket: resource.field('bucket'),
      create_time: resource.field('create_time'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      metageneration: resource.field('metageneration'),
      name: resource.field('name'),
      self_link: resource.field('self_link'),
      update_time: resource.field('update_time'),
    },
    storage_managed_folder_iam_binding(name, block): {
      local resource = blockType.resource('google_storage_managed_folder_iam_binding', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_folder: build.template(block.managed_folder),
        members: build.template(block.members),
        role: build.template(block.role),
      }),
      bucket: resource.field('bucket'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      managed_folder: resource.field('managed_folder'),
      members: resource.field('members'),
      role: resource.field('role'),
    },
    storage_managed_folder_iam_member(name, block): {
      local resource = blockType.resource('google_storage_managed_folder_iam_member', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_folder: build.template(block.managed_folder),
        member: build.template(block.member),
        role: build.template(block.role),
      }),
      bucket: resource.field('bucket'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      managed_folder: resource.field('managed_folder'),
      member: resource.field('member'),
      role: resource.field('role'),
    },
    storage_managed_folder_iam_policy(name, block): {
      local resource = blockType.resource('google_storage_managed_folder_iam_policy', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_folder: build.template(block.managed_folder),
        policy_data: build.template(block.policy_data),
      }),
      bucket: resource.field('bucket'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      managed_folder: resource.field('managed_folder'),
      policy_data: resource.field('policy_data'),
    },
    storage_notification(name, block): {
      local resource = blockType.resource('google_storage_notification', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        custom_attributes: build.template(std.get(block, 'custom_attributes', null)),
        event_types: build.template(std.get(block, 'event_types', null)),
        id: build.template(std.get(block, 'id', null)),
        notification_id: build.template(std.get(block, 'notification_id', null)),
        object_name_prefix: build.template(std.get(block, 'object_name_prefix', null)),
        payload_format: build.template(block.payload_format),
        self_link: build.template(std.get(block, 'self_link', null)),
        topic: build.template(block.topic),
      }),
      bucket: resource.field('bucket'),
      custom_attributes: resource.field('custom_attributes'),
      event_types: resource.field('event_types'),
      id: resource.field('id'),
      notification_id: resource.field('notification_id'),
      object_name_prefix: resource.field('object_name_prefix'),
      payload_format: resource.field('payload_format'),
      self_link: resource.field('self_link'),
      topic: resource.field('topic'),
    },
    storage_object_access_control(name, block): {
      local resource = blockType.resource('google_storage_object_access_control', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        domain: build.template(std.get(block, 'domain', null)),
        email: build.template(std.get(block, 'email', null)),
        entity: build.template(block.entity),
        entity_id: build.template(std.get(block, 'entity_id', null)),
        generation: build.template(std.get(block, 'generation', null)),
        id: build.template(std.get(block, 'id', null)),
        object: build.template(block.object),
        project_team: build.template(std.get(block, 'project_team', null)),
        role: build.template(block.role),
      }),
      bucket: resource.field('bucket'),
      domain: resource.field('domain'),
      email: resource.field('email'),
      entity: resource.field('entity'),
      entity_id: resource.field('entity_id'),
      generation: resource.field('generation'),
      id: resource.field('id'),
      object: resource.field('object'),
      project_team: resource.field('project_team'),
      role: resource.field('role'),
    },
    storage_object_acl(name, block): {
      local resource = blockType.resource('google_storage_object_acl', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        id: build.template(std.get(block, 'id', null)),
        object: build.template(block.object),
        predefined_acl: build.template(std.get(block, 'predefined_acl', null)),
        role_entity: build.template(std.get(block, 'role_entity', null)),
      }),
      bucket: resource.field('bucket'),
      id: resource.field('id'),
      object: resource.field('object'),
      predefined_acl: resource.field('predefined_acl'),
      role_entity: resource.field('role_entity'),
    },
    storage_transfer_agent_pool(name, block): {
      local resource = blockType.resource('google_storage_transfer_agent_pool', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
      }),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
    },
    storage_transfer_job(name, block): {
      local resource = blockType.resource('google_storage_transfer_job', name),
      _: resource._(block, {
        creation_time: build.template(std.get(block, 'creation_time', null)),
        deletion_time: build.template(std.get(block, 'deletion_time', null)),
        description: build.template(block.description),
        id: build.template(std.get(block, 'id', null)),
        last_modification_time: build.template(std.get(block, 'last_modification_time', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      creation_time: resource.field('creation_time'),
      deletion_time: resource.field('deletion_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_modification_time: resource.field('last_modification_time'),
      name: resource.field('name'),
      project: resource.field('project'),
      status: resource.field('status'),
    },
    tags_location_tag_binding(name, block): {
      local resource = blockType.resource('google_tags_location_tag_binding', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        tag_value: build.template(block.tag_value),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      tag_value: resource.field('tag_value'),
    },
    tags_tag_binding(name, block): {
      local resource = blockType.resource('google_tags_tag_binding', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        tag_value: build.template(block.tag_value),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      tag_value: resource.field('tag_value'),
    },
    tags_tag_key(name, block): {
      local resource = blockType.resource('google_tags_tag_key', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        namespaced_name: build.template(std.get(block, 'namespaced_name', null)),
        parent: build.template(block.parent),
        purpose: build.template(std.get(block, 'purpose', null)),
        purpose_data: build.template(std.get(block, 'purpose_data', null)),
        short_name: build.template(block.short_name),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      namespaced_name: resource.field('namespaced_name'),
      parent: resource.field('parent'),
      purpose: resource.field('purpose'),
      purpose_data: resource.field('purpose_data'),
      short_name: resource.field('short_name'),
      update_time: resource.field('update_time'),
    },
    tags_tag_key_iam_binding(name, block): {
      local resource = blockType.resource('google_tags_tag_key_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
        tag_key: build.template(block.tag_key),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
      tag_key: resource.field('tag_key'),
    },
    tags_tag_key_iam_member(name, block): {
      local resource = blockType.resource('google_tags_tag_key_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
        tag_key: build.template(block.tag_key),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
      tag_key: resource.field('tag_key'),
    },
    tags_tag_key_iam_policy(name, block): {
      local resource = blockType.resource('google_tags_tag_key_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        tag_key: build.template(block.tag_key),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      tag_key: resource.field('tag_key'),
    },
    tags_tag_value(name, block): {
      local resource = blockType.resource('google_tags_tag_value', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        namespaced_name: build.template(std.get(block, 'namespaced_name', null)),
        parent: build.template(block.parent),
        short_name: build.template(block.short_name),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      namespaced_name: resource.field('namespaced_name'),
      parent: resource.field('parent'),
      short_name: resource.field('short_name'),
      update_time: resource.field('update_time'),
    },
    tags_tag_value_iam_binding(name, block): {
      local resource = blockType.resource('google_tags_tag_value_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(block.members),
        role: build.template(block.role),
        tag_value: build.template(block.tag_value),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      members: resource.field('members'),
      role: resource.field('role'),
      tag_value: resource.field('tag_value'),
    },
    tags_tag_value_iam_member(name, block): {
      local resource = blockType.resource('google_tags_tag_value_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(block.member),
        role: build.template(block.role),
        tag_value: build.template(block.tag_value),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      member: resource.field('member'),
      role: resource.field('role'),
      tag_value: resource.field('tag_value'),
    },
    tags_tag_value_iam_policy(name, block): {
      local resource = blockType.resource('google_tags_tag_value_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(block.policy_data),
        tag_value: build.template(block.tag_value),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      tag_value: resource.field('tag_value'),
    },
    tpu_node(name, block): {
      local resource = blockType.resource('google_tpu_node', name),
      _: resource._(block, {
        accelerator_type: build.template(block.accelerator_type),
        cidr_block: build.template(std.get(block, 'cidr_block', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        network_endpoints: build.template(std.get(block, 'network_endpoints', null)),
        project: build.template(std.get(block, 'project', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        tensorflow_version: build.template(block.tensorflow_version),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        use_service_networking: build.template(std.get(block, 'use_service_networking', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      accelerator_type: resource.field('accelerator_type'),
      cidr_block: resource.field('cidr_block'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      network: resource.field('network'),
      network_endpoints: resource.field('network_endpoints'),
      project: resource.field('project'),
      service_account: resource.field('service_account'),
      tensorflow_version: resource.field('tensorflow_version'),
      terraform_labels: resource.field('terraform_labels'),
      use_service_networking: resource.field('use_service_networking'),
      zone: resource.field('zone'),
    },
    transcoder_job(name, block): {
      local resource = blockType.resource('google_transcoder_job', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        end_time: build.template(std.get(block, 'end_time', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        start_time: build.template(std.get(block, 'start_time', null)),
        state: build.template(std.get(block, 'state', null)),
        template_id: build.template(std.get(block, 'template_id', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      create_time: resource.field('create_time'),
      effective_labels: resource.field('effective_labels'),
      end_time: resource.field('end_time'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      start_time: resource.field('start_time'),
      state: resource.field('state'),
      template_id: resource.field('template_id'),
      terraform_labels: resource.field('terraform_labels'),
    },
    transcoder_job_template(name, block): {
      local resource = blockType.resource('google_transcoder_job_template', name),
      _: resource._(block, {
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        job_template_id: build.template(block.job_template_id),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      job_template_id: resource.field('job_template_id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
    },
    vertex_ai_dataset(name, block): {
      local resource = blockType.resource('google_vertex_ai_dataset', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        display_name: build.template(block.display_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        metadata_schema_uri: build.template(block.metadata_schema_uri),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      metadata_schema_uri: resource.field('metadata_schema_uri'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    vertex_ai_deployment_resource_pool(name, block): {
      local resource = blockType.resource('google_vertex_ai_deployment_resource_pool', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      create_time: resource.field('create_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    vertex_ai_endpoint(name, block): {
      local resource = blockType.resource('google_vertex_ai_endpoint', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        dedicated_endpoint_dns: build.template(std.get(block, 'dedicated_endpoint_dns', null)),
        dedicated_endpoint_enabled: build.template(std.get(block, 'dedicated_endpoint_enabled', null)),
        deployed_models: build.template(std.get(block, 'deployed_models', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        model_deployment_monitoring_job: build.template(std.get(block, 'model_deployment_monitoring_job', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        traffic_split: build.template(std.get(block, 'traffic_split', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      dedicated_endpoint_dns: resource.field('dedicated_endpoint_dns'),
      dedicated_endpoint_enabled: resource.field('dedicated_endpoint_enabled'),
      deployed_models: resource.field('deployed_models'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      model_deployment_monitoring_job: resource.field('model_deployment_monitoring_job'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
      traffic_split: resource.field('traffic_split'),
      update_time: resource.field('update_time'),
    },
    vertex_ai_feature_group(name, block): {
      local resource = blockType.resource('google_vertex_ai_feature_group', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    vertex_ai_feature_group_feature(name, block): {
      local resource = blockType.resource('google_vertex_ai_feature_group_feature', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        feature_group: build.template(block.feature_group),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(block.region),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        version_column_name: build.template(std.get(block, 'version_column_name', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      feature_group: resource.field('feature_group'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
      version_column_name: resource.field('version_column_name'),
    },
    vertex_ai_feature_online_store(name, block): {
      local resource = blockType.resource('google_vertex_ai_feature_online_store', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    vertex_ai_feature_online_store_featureview(name, block): {
      local resource = blockType.resource('google_vertex_ai_feature_online_store_featureview', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        feature_online_store: build.template(block.feature_online_store),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(block.region),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      effective_labels: resource.field('effective_labels'),
      feature_online_store: resource.field('feature_online_store'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    vertex_ai_featurestore(name, block): {
      local resource = blockType.resource('google_vertex_ai_featurestore', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    vertex_ai_featurestore_entitytype(name, block): {
      local resource = blockType.resource('google_vertex_ai_featurestore_entitytype', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        featurestore: build.template(block.featurestore),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        region: build.template(std.get(block, 'region', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      featurestore: resource.field('featurestore'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    vertex_ai_featurestore_entitytype_feature(name, block): {
      local resource = blockType.resource('google_vertex_ai_featurestore_entitytype_feature', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        entitytype: build.template(block.entitytype),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        region: build.template(std.get(block, 'region', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        value_type: build.template(block.value_type),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      entitytype: resource.field('entitytype'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
      value_type: resource.field('value_type'),
    },
    vertex_ai_index(name, block): {
      local resource = blockType.resource('google_vertex_ai_index', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        deployed_indexes: build.template(std.get(block, 'deployed_indexes', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        index_stats: build.template(std.get(block, 'index_stats', null)),
        index_update_method: build.template(std.get(block, 'index_update_method', null)),
        labels: build.template(std.get(block, 'labels', null)),
        metadata_schema_uri: build.template(std.get(block, 'metadata_schema_uri', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      deployed_indexes: resource.field('deployed_indexes'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      index_stats: resource.field('index_stats'),
      index_update_method: resource.field('index_update_method'),
      labels: resource.field('labels'),
      metadata_schema_uri: resource.field('metadata_schema_uri'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    vertex_ai_index_endpoint(name, block): {
      local resource = blockType.resource('google_vertex_ai_index_endpoint', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        network: build.template(std.get(block, 'network', null)),
        project: build.template(std.get(block, 'project', null)),
        public_endpoint_domain_name: build.template(std.get(block, 'public_endpoint_domain_name', null)),
        public_endpoint_enabled: build.template(std.get(block, 'public_endpoint_enabled', null)),
        region: build.template(std.get(block, 'region', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      public_endpoint_domain_name: resource.field('public_endpoint_domain_name'),
      public_endpoint_enabled: resource.field('public_endpoint_enabled'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    vertex_ai_index_endpoint_deployed_index(name, block): {
      local resource = blockType.resource('google_vertex_ai_index_endpoint_deployed_index', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        deployed_index_id: build.template(block.deployed_index_id),
        deployment_group: build.template(std.get(block, 'deployment_group', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enable_access_logging: build.template(std.get(block, 'enable_access_logging', null)),
        id: build.template(std.get(block, 'id', null)),
        index: build.template(block.index),
        index_endpoint: build.template(block.index_endpoint),
        index_sync_time: build.template(std.get(block, 'index_sync_time', null)),
        name: build.template(std.get(block, 'name', null)),
        private_endpoints: build.template(std.get(block, 'private_endpoints', null)),
        reserved_ip_ranges: build.template(std.get(block, 'reserved_ip_ranges', null)),
      }),
      create_time: resource.field('create_time'),
      deployed_index_id: resource.field('deployed_index_id'),
      deployment_group: resource.field('deployment_group'),
      display_name: resource.field('display_name'),
      enable_access_logging: resource.field('enable_access_logging'),
      id: resource.field('id'),
      index: resource.field('index'),
      index_endpoint: resource.field('index_endpoint'),
      index_sync_time: resource.field('index_sync_time'),
      name: resource.field('name'),
      private_endpoints: resource.field('private_endpoints'),
      reserved_ip_ranges: resource.field('reserved_ip_ranges'),
    },
    vertex_ai_tensorboard(name, block): {
      local resource = blockType.resource('google_vertex_ai_tensorboard', name),
      _: resource._(block, {
        blob_storage_path_prefix: build.template(std.get(block, 'blob_storage_path_prefix', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        run_count: build.template(std.get(block, 'run_count', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      blob_storage_path_prefix: resource.field('blob_storage_path_prefix'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      run_count: resource.field('run_count'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    vmwareengine_cluster(name, block): {
      local resource = blockType.resource('google_vmwareengine_cluster', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        management: build.template(std.get(block, 'management', null)),
        name: build.template(block.name),
        parent: build.template(block.parent),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      id: resource.field('id'),
      management: resource.field('management'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      state: resource.field('state'),
      uid: resource.field('uid'),
    },
    vmwareengine_external_access_rule(name, block): {
      local resource = blockType.resource('google_vmwareengine_external_access_rule', name),
      _: resource._(block, {
        action: build.template(block.action),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        destination_ports: build.template(block.destination_ports),
        id: build.template(std.get(block, 'id', null)),
        ip_protocol: build.template(block.ip_protocol),
        name: build.template(block.name),
        parent: build.template(block.parent),
        priority: build.template(block.priority),
        source_ports: build.template(block.source_ports),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      action: resource.field('action'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      destination_ports: resource.field('destination_ports'),
      id: resource.field('id'),
      ip_protocol: resource.field('ip_protocol'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      priority: resource.field('priority'),
      source_ports: resource.field('source_ports'),
      state: resource.field('state'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    vmwareengine_external_address(name, block): {
      local resource = blockType.resource('google_vmwareengine_external_address', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        external_ip: build.template(std.get(block, 'external_ip', null)),
        id: build.template(std.get(block, 'id', null)),
        internal_ip: build.template(block.internal_ip),
        name: build.template(block.name),
        parent: build.template(block.parent),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      external_ip: resource.field('external_ip'),
      id: resource.field('id'),
      internal_ip: resource.field('internal_ip'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      state: resource.field('state'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    vmwareengine_network(name, block): {
      local resource = blockType.resource('google_vmwareengine_network', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        type: build.template(block.type),
        uid: build.template(std.get(block, 'uid', null)),
        vpc_networks: build.template(std.get(block, 'vpc_networks', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      vpc_networks: resource.field('vpc_networks'),
    },
    vmwareengine_network_peering(name, block): {
      local resource = blockType.resource('google_vmwareengine_network_peering', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        export_custom_routes: build.template(std.get(block, 'export_custom_routes', null)),
        export_custom_routes_with_public_ip: build.template(std.get(block, 'export_custom_routes_with_public_ip', null)),
        id: build.template(std.get(block, 'id', null)),
        import_custom_routes: build.template(std.get(block, 'import_custom_routes', null)),
        import_custom_routes_with_public_ip: build.template(std.get(block, 'import_custom_routes_with_public_ip', null)),
        name: build.template(block.name),
        peer_network: build.template(block.peer_network),
        peer_network_type: build.template(block.peer_network_type),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        state_details: build.template(std.get(block, 'state_details', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        vmware_engine_network: build.template(block.vmware_engine_network),
        vmware_engine_network_canonical: build.template(std.get(block, 'vmware_engine_network_canonical', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      export_custom_routes: resource.field('export_custom_routes'),
      export_custom_routes_with_public_ip: resource.field('export_custom_routes_with_public_ip'),
      id: resource.field('id'),
      import_custom_routes: resource.field('import_custom_routes'),
      import_custom_routes_with_public_ip: resource.field('import_custom_routes_with_public_ip'),
      name: resource.field('name'),
      peer_network: resource.field('peer_network'),
      peer_network_type: resource.field('peer_network_type'),
      project: resource.field('project'),
      state: resource.field('state'),
      state_details: resource.field('state_details'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      vmware_engine_network: resource.field('vmware_engine_network'),
      vmware_engine_network_canonical: resource.field('vmware_engine_network_canonical'),
    },
    vmwareengine_network_policy(name, block): {
      local resource = blockType.resource('google_vmwareengine_network_policy', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        edge_services_cidr: build.template(block.edge_services_cidr),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        vmware_engine_network: build.template(block.vmware_engine_network),
        vmware_engine_network_canonical: build.template(std.get(block, 'vmware_engine_network_canonical', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      edge_services_cidr: resource.field('edge_services_cidr'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      vmware_engine_network: resource.field('vmware_engine_network'),
      vmware_engine_network_canonical: resource.field('vmware_engine_network_canonical'),
    },
    vmwareengine_private_cloud(name, block): {
      local resource = blockType.resource('google_vmwareengine_private_cloud', name),
      _: resource._(block, {
        deletion_delay_hours: build.template(std.get(block, 'deletion_delay_hours', null)),
        description: build.template(std.get(block, 'description', null)),
        hcx: build.template(std.get(block, 'hcx', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        nsx: build.template(std.get(block, 'nsx', null)),
        project: build.template(std.get(block, 'project', null)),
        send_deletion_delay_hours_if_zero: build.template(std.get(block, 'send_deletion_delay_hours_if_zero', null)),
        state: build.template(std.get(block, 'state', null)),
        type: build.template(std.get(block, 'type', null)),
        uid: build.template(std.get(block, 'uid', null)),
        vcenter: build.template(std.get(block, 'vcenter', null)),
      }),
      deletion_delay_hours: resource.field('deletion_delay_hours'),
      description: resource.field('description'),
      hcx: resource.field('hcx'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      nsx: resource.field('nsx'),
      project: resource.field('project'),
      send_deletion_delay_hours_if_zero: resource.field('send_deletion_delay_hours_if_zero'),
      state: resource.field('state'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      vcenter: resource.field('vcenter'),
    },
    vmwareengine_subnet(name, block): {
      local resource = blockType.resource('google_vmwareengine_subnet', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        dhcp_address_ranges: build.template(std.get(block, 'dhcp_address_ranges', null)),
        gateway_id: build.template(std.get(block, 'gateway_id', null)),
        gateway_ip: build.template(std.get(block, 'gateway_ip', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_cidr_range: build.template(block.ip_cidr_range),
        name: build.template(block.name),
        parent: build.template(block.parent),
        standard_config: build.template(std.get(block, 'standard_config', null)),
        state: build.template(std.get(block, 'state', null)),
        type: build.template(std.get(block, 'type', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        vlan_id: build.template(std.get(block, 'vlan_id', null)),
      }),
      create_time: resource.field('create_time'),
      dhcp_address_ranges: resource.field('dhcp_address_ranges'),
      gateway_id: resource.field('gateway_id'),
      gateway_ip: resource.field('gateway_ip'),
      id: resource.field('id'),
      ip_cidr_range: resource.field('ip_cidr_range'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      standard_config: resource.field('standard_config'),
      state: resource.field('state'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      vlan_id: resource.field('vlan_id'),
    },
    vpc_access_connector(name, block): {
      local resource = blockType.resource('google_vpc_access_connector', name),
      _: resource._(block, {
        connected_projects: build.template(std.get(block, 'connected_projects', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_cidr_range: build.template(std.get(block, 'ip_cidr_range', null)),
        machine_type: build.template(std.get(block, 'machine_type', null)),
        max_instances: build.template(std.get(block, 'max_instances', null)),
        max_throughput: build.template(std.get(block, 'max_throughput', null)),
        min_instances: build.template(std.get(block, 'min_instances', null)),
        min_throughput: build.template(std.get(block, 'min_throughput', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        state: build.template(std.get(block, 'state', null)),
      }),
      connected_projects: resource.field('connected_projects'),
      id: resource.field('id'),
      ip_cidr_range: resource.field('ip_cidr_range'),
      machine_type: resource.field('machine_type'),
      max_instances: resource.field('max_instances'),
      max_throughput: resource.field('max_throughput'),
      min_instances: resource.field('min_instances'),
      min_throughput: resource.field('min_throughput'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      state: resource.field('state'),
    },
    workbench_instance(name, block): {
      local resource = blockType.resource('google_workbench_instance', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        creator: build.template(std.get(block, 'creator', null)),
        desired_state: build.template(std.get(block, 'desired_state', null)),
        disable_proxy_access: build.template(std.get(block, 'disable_proxy_access', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        health_info: build.template(std.get(block, 'health_info', null)),
        health_state: build.template(std.get(block, 'health_state', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(std.get(block, 'instance_id', null)),
        instance_owners: build.template(std.get(block, 'instance_owners', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        proxy_uri: build.template(std.get(block, 'proxy_uri', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        upgrade_history: build.template(std.get(block, 'upgrade_history', null)),
      }),
      create_time: resource.field('create_time'),
      creator: resource.field('creator'),
      desired_state: resource.field('desired_state'),
      disable_proxy_access: resource.field('disable_proxy_access'),
      effective_labels: resource.field('effective_labels'),
      health_info: resource.field('health_info'),
      health_state: resource.field('health_state'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      instance_owners: resource.field('instance_owners'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      proxy_uri: resource.field('proxy_uri'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
      upgrade_history: resource.field('upgrade_history'),
    },
    workbench_instance_iam_binding(name, block): {
      local resource = blockType.resource('google_workbench_instance_iam_binding', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        members: build.template(block.members),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      members: resource.field('members'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    workbench_instance_iam_member(name, block): {
      local resource = blockType.resource('google_workbench_instance_iam_member', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        member: build.template(block.member),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        role: build.template(block.role),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      role: resource.field('role'),
    },
    workbench_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_workbench_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(block.policy_data),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    workflows_workflow(name, block): {
      local resource = blockType.resource('google_workflows_workflow', name),
      _: resource._(block, {
        call_log_level: build.template(std.get(block, 'call_log_level', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        crypto_key_name: build.template(std.get(block, 'crypto_key_name', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        revision_id: build.template(std.get(block, 'revision_id', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        source_contents: build.template(std.get(block, 'source_contents', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        user_env_vars: build.template(std.get(block, 'user_env_vars', null)),
      }),
      call_log_level: resource.field('call_log_level'),
      create_time: resource.field('create_time'),
      crypto_key_name: resource.field('crypto_key_name'),
      deletion_protection: resource.field('deletion_protection'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      project: resource.field('project'),
      region: resource.field('region'),
      revision_id: resource.field('revision_id'),
      service_account: resource.field('service_account'),
      source_contents: resource.field('source_contents'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
      user_env_vars: resource.field('user_env_vars'),
    },
  },
  data: {
    local blockType = provider.blockType('data'),
    access_approval_folder_service_account(name, block): {
      local resource = blockType.resource('google_access_approval_folder_service_account', name),
      _: resource._(block, {
        account_email: build.template(std.get(block, 'account_email', null)),
        folder_id: build.template(block.folder_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      account_email: resource.field('account_email'),
      folder_id: resource.field('folder_id'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    access_approval_organization_service_account(name, block): {
      local resource = blockType.resource('google_access_approval_organization_service_account', name),
      _: resource._(block, {
        account_email: build.template(std.get(block, 'account_email', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        organization_id: build.template(block.organization_id),
      }),
      account_email: resource.field('account_email'),
      id: resource.field('id'),
      name: resource.field('name'),
      organization_id: resource.field('organization_id'),
    },
    access_approval_project_service_account(name, block): {
      local resource = blockType.resource('google_access_approval_project_service_account', name),
      _: resource._(block, {
        account_email: build.template(std.get(block, 'account_email', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project_id: build.template(block.project_id),
      }),
      account_email: resource.field('account_email'),
      id: resource.field('id'),
      name: resource.field('name'),
      project_id: resource.field('project_id'),
    },
    access_context_manager_access_policy(name, block): {
      local resource = blockType.resource('google_access_context_manager_access_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        scopes: build.template(std.get(block, 'scopes', null)),
        title: build.template(std.get(block, 'title', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      scopes: resource.field('scopes'),
      title: resource.field('title'),
    },
    access_context_manager_access_policy_iam_policy(name, block): {
      local resource = blockType.resource('google_access_context_manager_access_policy_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
    },
    active_folder(name, block): {
      local resource = blockType.resource('google_active_folder', name),
      _: resource._(block, {
        api_method: build.template(std.get(block, 'api_method', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
      }),
      api_method: resource.field('api_method'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent: resource.field('parent'),
    },
    alloydb_locations(name, block): {
      local resource = blockType.resource('google_alloydb_locations', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        locations: build.template(std.get(block, 'locations', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      id: resource.field('id'),
      locations: resource.field('locations'),
      project: resource.field('project'),
    },
    alloydb_supported_database_flags(name, block): {
      local resource = blockType.resource('google_alloydb_supported_database_flags', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        project: build.template(std.get(block, 'project', null)),
        supported_database_flags: build.template(std.get(block, 'supported_database_flags', null)),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      project: resource.field('project'),
      supported_database_flags: resource.field('supported_database_flags'),
    },
    apigee_environment_iam_policy(name, block): {
      local resource = blockType.resource('google_apigee_environment_iam_policy', name),
      _: resource._(block, {
        env_id: build.template(block.env_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(block.org_id),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      env_id: resource.field('env_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      policy_data: resource.field('policy_data'),
    },
    app_engine_default_service_account(name, block): {
      local resource = blockType.resource('google_app_engine_default_service_account', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(std.get(block, 'member', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
      }),
      display_name: resource.field('display_name'),
      email: resource.field('email'),
      id: resource.field('id'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      unique_id: resource.field('unique_id'),
    },
    apphub_application(name, block): {
      local resource = blockType.resource('google_apphub_application', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        attributes: build.template(std.get(block, 'attributes', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(block.project),
        scope: build.template(std.get(block, 'scope', null)),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      application_id: resource.field('application_id'),
      attributes: resource.field('attributes'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      scope: resource.field('scope'),
      state: resource.field('state'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    apphub_discovered_service(name, block): {
      local resource = blockType.resource('google_apphub_discovered_service', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        service_properties: build.template(std.get(block, 'service_properties', null)),
        service_reference: build.template(std.get(block, 'service_reference', null)),
        service_uri: build.template(block.service_uri),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_properties: resource.field('service_properties'),
      service_reference: resource.field('service_reference'),
      service_uri: resource.field('service_uri'),
    },
    apphub_discovered_workload(name, block): {
      local resource = blockType.resource('google_apphub_discovered_workload', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        workload_properties: build.template(std.get(block, 'workload_properties', null)),
        workload_reference: build.template(std.get(block, 'workload_reference', null)),
        workload_uri: build.template(block.workload_uri),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      workload_properties: resource.field('workload_properties'),
      workload_reference: resource.field('workload_reference'),
      workload_uri: resource.field('workload_uri'),
    },
    artifact_registry_docker_image(name, block): {
      local resource = blockType.resource('google_artifact_registry_docker_image', name),
      _: resource._(block, {
        build_time: build.template(std.get(block, 'build_time', null)),
        id: build.template(std.get(block, 'id', null)),
        image_name: build.template(block.image_name),
        image_size_bytes: build.template(std.get(block, 'image_size_bytes', null)),
        location: build.template(block.location),
        media_type: build.template(std.get(block, 'media_type', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        repository_id: build.template(block.repository_id),
        self_link: build.template(std.get(block, 'self_link', null)),
        tags: build.template(std.get(block, 'tags', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        upload_time: build.template(std.get(block, 'upload_time', null)),
      }),
      build_time: resource.field('build_time'),
      id: resource.field('id'),
      image_name: resource.field('image_name'),
      image_size_bytes: resource.field('image_size_bytes'),
      location: resource.field('location'),
      media_type: resource.field('media_type'),
      name: resource.field('name'),
      project: resource.field('project'),
      repository_id: resource.field('repository_id'),
      self_link: resource.field('self_link'),
      tags: resource.field('tags'),
      update_time: resource.field('update_time'),
      upload_time: resource.field('upload_time'),
    },
    artifact_registry_locations(name, block): {
      local resource = blockType.resource('google_artifact_registry_locations', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        locations: build.template(std.get(block, 'locations', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      id: resource.field('id'),
      locations: resource.field('locations'),
      project: resource.field('project'),
    },
    artifact_registry_repository(name, block): {
      local resource = blockType.resource('google_artifact_registry_repository', name),
      _: resource._(block, {
        cleanup_policies: build.template(std.get(block, 'cleanup_policies', null)),
        cleanup_policy_dry_run: build.template(std.get(block, 'cleanup_policy_dry_run', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        docker_config: build.template(std.get(block, 'docker_config', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        format: build.template(std.get(block, 'format', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        maven_config: build.template(std.get(block, 'maven_config', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        remote_repository_config: build.template(std.get(block, 'remote_repository_config', null)),
        repository_id: build.template(block.repository_id),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        virtual_repository_config: build.template(std.get(block, 'virtual_repository_config', null)),
      }),
      cleanup_policies: resource.field('cleanup_policies'),
      cleanup_policy_dry_run: resource.field('cleanup_policy_dry_run'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      docker_config: resource.field('docker_config'),
      effective_labels: resource.field('effective_labels'),
      format: resource.field('format'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      maven_config: resource.field('maven_config'),
      mode: resource.field('mode'),
      name: resource.field('name'),
      project: resource.field('project'),
      remote_repository_config: resource.field('remote_repository_config'),
      repository_id: resource.field('repository_id'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
      virtual_repository_config: resource.field('virtual_repository_config'),
    },
    artifact_registry_repository_iam_policy(name, block): {
      local resource = blockType.resource('google_artifact_registry_repository_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        repository: build.template(block.repository),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      repository: resource.field('repository'),
    },
    beyondcorp_app_connection(name, block): {
      local resource = blockType.resource('google_beyondcorp_app_connection', name),
      _: resource._(block, {
        application_endpoint: build.template(std.get(block, 'application_endpoint', null)),
        connectors: build.template(std.get(block, 'connectors', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        gateway: build.template(std.get(block, 'gateway', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      application_endpoint: resource.field('application_endpoint'),
      connectors: resource.field('connectors'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      gateway: resource.field('gateway'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
    },
    beyondcorp_app_connector(name, block): {
      local resource = blockType.resource('google_beyondcorp_app_connector', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        principal_info: build.template(std.get(block, 'principal_info', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      principal_info: resource.field('principal_info'),
      project: resource.field('project'),
      region: resource.field('region'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
    },
    beyondcorp_app_gateway(name, block): {
      local resource = blockType.resource('google_beyondcorp_app_gateway', name),
      _: resource._(block, {
        allocated_connections: build.template(std.get(block, 'allocated_connections', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        host_type: build.template(std.get(block, 'host_type', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      allocated_connections: resource.field('allocated_connections'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      host_type: resource.field('host_type'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      uri: resource.field('uri'),
    },
    bigquery_analytics_hub_data_exchange_iam_policy(name, block): {
      local resource = blockType.resource('google_bigquery_analytics_hub_data_exchange_iam_policy', name),
      _: resource._(block, {
        data_exchange_id: build.template(block.data_exchange_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      data_exchange_id: resource.field('data_exchange_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    bigquery_analytics_hub_listing_iam_policy(name, block): {
      local resource = blockType.resource('google_bigquery_analytics_hub_listing_iam_policy', name),
      _: resource._(block, {
        data_exchange_id: build.template(block.data_exchange_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        listing_id: build.template(block.listing_id),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      data_exchange_id: resource.field('data_exchange_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      listing_id: resource.field('listing_id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    bigquery_connection_iam_policy(name, block): {
      local resource = blockType.resource('google_bigquery_connection_iam_policy', name),
      _: resource._(block, {
        connection_id: build.template(block.connection_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      connection_id: resource.field('connection_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    bigquery_datapolicy_data_policy_iam_policy(name, block): {
      local resource = blockType.resource('google_bigquery_datapolicy_data_policy_iam_policy', name),
      _: resource._(block, {
        data_policy_id: build.template(block.data_policy_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      data_policy_id: resource.field('data_policy_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    bigquery_dataset(name, block): {
      local resource = blockType.resource('google_bigquery_dataset', name),
      _: resource._(block, {
        access: build.template(std.get(block, 'access', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        dataset_id: build.template(block.dataset_id),
        default_collation: build.template(std.get(block, 'default_collation', null)),
        default_encryption_configuration: build.template(std.get(block, 'default_encryption_configuration', null)),
        default_partition_expiration_ms: build.template(std.get(block, 'default_partition_expiration_ms', null)),
        default_table_expiration_ms: build.template(std.get(block, 'default_table_expiration_ms', null)),
        delete_contents_on_destroy: build.template(std.get(block, 'delete_contents_on_destroy', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        external_dataset_reference: build.template(std.get(block, 'external_dataset_reference', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        is_case_insensitive: build.template(std.get(block, 'is_case_insensitive', null)),
        labels: build.template(std.get(block, 'labels', null)),
        last_modified_time: build.template(std.get(block, 'last_modified_time', null)),
        location: build.template(std.get(block, 'location', null)),
        max_time_travel_hours: build.template(std.get(block, 'max_time_travel_hours', null)),
        project: build.template(std.get(block, 'project', null)),
        resource_tags: build.template(std.get(block, 'resource_tags', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        storage_billing_model: build.template(std.get(block, 'storage_billing_model', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      access: resource.field('access'),
      creation_time: resource.field('creation_time'),
      dataset_id: resource.field('dataset_id'),
      default_collation: resource.field('default_collation'),
      default_encryption_configuration: resource.field('default_encryption_configuration'),
      default_partition_expiration_ms: resource.field('default_partition_expiration_ms'),
      default_table_expiration_ms: resource.field('default_table_expiration_ms'),
      delete_contents_on_destroy: resource.field('delete_contents_on_destroy'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      external_dataset_reference: resource.field('external_dataset_reference'),
      friendly_name: resource.field('friendly_name'),
      id: resource.field('id'),
      is_case_insensitive: resource.field('is_case_insensitive'),
      labels: resource.field('labels'),
      last_modified_time: resource.field('last_modified_time'),
      location: resource.field('location'),
      max_time_travel_hours: resource.field('max_time_travel_hours'),
      project: resource.field('project'),
      resource_tags: resource.field('resource_tags'),
      self_link: resource.field('self_link'),
      storage_billing_model: resource.field('storage_billing_model'),
      terraform_labels: resource.field('terraform_labels'),
    },
    bigquery_dataset_iam_policy(name, block): {
      local resource = blockType.resource('google_bigquery_dataset_iam_policy', name),
      _: resource._(block, {
        dataset_id: build.template(block.dataset_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      dataset_id: resource.field('dataset_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    bigquery_default_service_account(name, block): {
      local resource = blockType.resource('google_bigquery_default_service_account', name),
      _: resource._(block, {
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(std.get(block, 'member', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      email: resource.field('email'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
    },
    bigquery_table_iam_policy(name, block): {
      local resource = blockType.resource('google_bigquery_table_iam_policy', name),
      _: resource._(block, {
        dataset_id: build.template(block.dataset_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        table_id: build.template(block.table_id),
      }),
      dataset_id: resource.field('dataset_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      table_id: resource.field('table_id'),
    },
    bigquery_tables(name, block): {
      local resource = blockType.resource('google_bigquery_tables', name),
      _: resource._(block, {
        dataset_id: build.template(block.dataset_id),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        tables: build.template(std.get(block, 'tables', null)),
      }),
      dataset_id: resource.field('dataset_id'),
      id: resource.field('id'),
      project: resource.field('project'),
      tables: resource.field('tables'),
    },
    bigtable_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_bigtable_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    bigtable_table_iam_policy(name, block): {
      local resource = blockType.resource('google_bigtable_table_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        table: build.template(block.table),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      table: resource.field('table'),
    },
    billing_account(name, block): {
      local resource = blockType.resource('google_billing_account', name),
      _: resource._(block, {
        billing_account: build.template(std.get(block, 'billing_account', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        lookup_projects: build.template(std.get(block, 'lookup_projects', null)),
        name: build.template(std.get(block, 'name', null)),
        open: build.template(std.get(block, 'open', null)),
        project_ids: build.template(std.get(block, 'project_ids', null)),
      }),
      billing_account: resource.field('billing_account'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      lookup_projects: resource.field('lookup_projects'),
      name: resource.field('name'),
      open: resource.field('open'),
      project_ids: resource.field('project_ids'),
    },
    billing_account_iam_policy(name, block): {
      local resource = blockType.resource('google_billing_account_iam_policy', name),
      _: resource._(block, {
        billing_account_id: build.template(block.billing_account_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      billing_account_id: resource.field('billing_account_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    binary_authorization_attestor_iam_policy(name, block): {
      local resource = blockType.resource('google_binary_authorization_attestor_iam_policy', name),
      _: resource._(block, {
        attestor: build.template(block.attestor),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      attestor: resource.field('attestor'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    certificate_manager_certificate_map(name, block): {
      local resource = blockType.resource('google_certificate_manager_certificate_map', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        gclb_targets: build.template(std.get(block, 'gclb_targets', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      gclb_targets: resource.field('gclb_targets'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    certificate_manager_certificates(name, block): {
      local resource = blockType.resource('google_certificate_manager_certificates', name),
      _: resource._(block, {
        certificates: build.template(std.get(block, 'certificates', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      certificates: resource.field('certificates'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      region: resource.field('region'),
    },
    client_config(name, block): {
      local resource = blockType.resource('google_client_config', name),
      _: resource._(block, {
        access_token: build.template(std.get(block, 'access_token', null)),
        default_labels: build.template(std.get(block, 'default_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      access_token: resource.field('access_token'),
      default_labels: resource.field('default_labels'),
      id: resource.field('id'),
      project: resource.field('project'),
      region: resource.field('region'),
      zone: resource.field('zone'),
    },
    client_openid_userinfo(name, block): {
      local resource = blockType.resource('google_client_openid_userinfo', name),
      _: resource._(block, {
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      email: resource.field('email'),
      id: resource.field('id'),
    },
    cloud_asset_search_all_resources(name, block): {
      local resource = blockType.resource('google_cloud_asset_search_all_resources', name),
      _: resource._(block, {
        asset_types: build.template(std.get(block, 'asset_types', null)),
        id: build.template(std.get(block, 'id', null)),
        query: build.template(std.get(block, 'query', null)),
        results: build.template(std.get(block, 'results', null)),
        scope: build.template(block.scope),
      }),
      asset_types: resource.field('asset_types'),
      id: resource.field('id'),
      query: resource.field('query'),
      results: resource.field('results'),
      scope: resource.field('scope'),
    },
    cloud_identity_group_lookup(name, block): {
      local resource = blockType.resource('google_cloud_identity_group_lookup', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    cloud_identity_group_memberships(name, block): {
      local resource = blockType.resource('google_cloud_identity_group_memberships', name),
      _: resource._(block, {
        group: build.template(block.group),
        id: build.template(std.get(block, 'id', null)),
        memberships: build.template(std.get(block, 'memberships', null)),
      }),
      group: resource.field('group'),
      id: resource.field('id'),
      memberships: resource.field('memberships'),
    },
    cloud_identity_group_transitive_memberships(name, block): {
      local resource = blockType.resource('google_cloud_identity_group_transitive_memberships', name),
      _: resource._(block, {
        group: build.template(block.group),
        id: build.template(std.get(block, 'id', null)),
        memberships: build.template(std.get(block, 'memberships', null)),
      }),
      group: resource.field('group'),
      id: resource.field('id'),
      memberships: resource.field('memberships'),
    },
    cloud_identity_groups(name, block): {
      local resource = blockType.resource('google_cloud_identity_groups', name),
      _: resource._(block, {
        groups: build.template(std.get(block, 'groups', null)),
        id: build.template(std.get(block, 'id', null)),
        parent: build.template(block.parent),
      }),
      groups: resource.field('groups'),
      id: resource.field('id'),
      parent: resource.field('parent'),
    },
    cloud_quotas_quota_info(name, block): {
      local resource = blockType.resource('google_cloud_quotas_quota_info', name),
      _: resource._(block, {
        container_type: build.template(std.get(block, 'container_type', null)),
        dimensions: build.template(std.get(block, 'dimensions', null)),
        dimensions_infos: build.template(std.get(block, 'dimensions_infos', null)),
        id: build.template(std.get(block, 'id', null)),
        is_concurrent: build.template(std.get(block, 'is_concurrent', null)),
        is_fixed: build.template(std.get(block, 'is_fixed', null)),
        is_precise: build.template(std.get(block, 'is_precise', null)),
        metric: build.template(std.get(block, 'metric', null)),
        metric_display_name: build.template(std.get(block, 'metric_display_name', null)),
        metric_unit: build.template(std.get(block, 'metric_unit', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(block.parent),
        quota_display_name: build.template(std.get(block, 'quota_display_name', null)),
        quota_id: build.template(block.quota_id),
        quota_increase_eligibility: build.template(std.get(block, 'quota_increase_eligibility', null)),
        refresh_interval: build.template(std.get(block, 'refresh_interval', null)),
        service: build.template(block.service),
        service_request_quota_uri: build.template(std.get(block, 'service_request_quota_uri', null)),
      }),
      container_type: resource.field('container_type'),
      dimensions: resource.field('dimensions'),
      dimensions_infos: resource.field('dimensions_infos'),
      id: resource.field('id'),
      is_concurrent: resource.field('is_concurrent'),
      is_fixed: resource.field('is_fixed'),
      is_precise: resource.field('is_precise'),
      metric: resource.field('metric'),
      metric_display_name: resource.field('metric_display_name'),
      metric_unit: resource.field('metric_unit'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      quota_display_name: resource.field('quota_display_name'),
      quota_id: resource.field('quota_id'),
      quota_increase_eligibility: resource.field('quota_increase_eligibility'),
      refresh_interval: resource.field('refresh_interval'),
      service: resource.field('service'),
      service_request_quota_uri: resource.field('service_request_quota_uri'),
    },
    cloud_quotas_quota_infos(name, block): {
      local resource = blockType.resource('google_cloud_quotas_quota_infos', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        parent: build.template(block.parent),
        quota_infos: build.template(std.get(block, 'quota_infos', null)),
        service: build.template(block.service),
      }),
      id: resource.field('id'),
      parent: resource.field('parent'),
      quota_infos: resource.field('quota_infos'),
      service: resource.field('service'),
    },
    cloud_run_locations(name, block): {
      local resource = blockType.resource('google_cloud_run_locations', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        locations: build.template(std.get(block, 'locations', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      id: resource.field('id'),
      locations: resource.field('locations'),
      project: resource.field('project'),
    },
    cloud_run_service(name, block): {
      local resource = blockType.resource('google_cloud_run_service', name),
      _: resource._(block, {
        autogenerate_revision_name: build.template(std.get(block, 'autogenerate_revision_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        status: build.template(std.get(block, 'status', null)),
        template: build.template(std.get(block, 'template', null)),
        traffic: build.template(std.get(block, 'traffic', null)),
      }),
      autogenerate_revision_name: resource.field('autogenerate_revision_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      metadata: resource.field('metadata'),
      name: resource.field('name'),
      project: resource.field('project'),
      status: resource.field('status'),
      template: resource.field('template'),
      traffic: resource.field('traffic'),
    },
    cloud_run_service_iam_policy(name, block): {
      local resource = blockType.resource('google_cloud_run_service_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        service: build.template(block.service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      service: resource.field('service'),
    },
    cloud_run_v2_job(name, block): {
      local resource = blockType.resource('google_cloud_run_v2_job', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        binary_authorization: build.template(std.get(block, 'binary_authorization', null)),
        client: build.template(std.get(block, 'client', null)),
        client_version: build.template(std.get(block, 'client_version', null)),
        conditions: build.template(std.get(block, 'conditions', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        creator: build.template(std.get(block, 'creator', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        execution_count: build.template(std.get(block, 'execution_count', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        generation: build.template(std.get(block, 'generation', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        last_modifier: build.template(std.get(block, 'last_modifier', null)),
        latest_created_execution: build.template(std.get(block, 'latest_created_execution', null)),
        launch_stage: build.template(std.get(block, 'launch_stage', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        observed_generation: build.template(std.get(block, 'observed_generation', null)),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        template: build.template(std.get(block, 'template', null)),
        terminal_condition: build.template(std.get(block, 'terminal_condition', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      annotations: resource.field('annotations'),
      binary_authorization: resource.field('binary_authorization'),
      client: resource.field('client'),
      client_version: resource.field('client_version'),
      conditions: resource.field('conditions'),
      create_time: resource.field('create_time'),
      creator: resource.field('creator'),
      delete_time: resource.field('delete_time'),
      deletion_protection: resource.field('deletion_protection'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      execution_count: resource.field('execution_count'),
      expire_time: resource.field('expire_time'),
      generation: resource.field('generation'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      last_modifier: resource.field('last_modifier'),
      latest_created_execution: resource.field('latest_created_execution'),
      launch_stage: resource.field('launch_stage'),
      location: resource.field('location'),
      name: resource.field('name'),
      observed_generation: resource.field('observed_generation'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      template: resource.field('template'),
      terminal_condition: resource.field('terminal_condition'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    cloud_run_v2_job_iam_policy(name, block): {
      local resource = blockType.resource('google_cloud_run_v2_job_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    cloud_run_v2_service(name, block): {
      local resource = blockType.resource('google_cloud_run_v2_service', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        binary_authorization: build.template(std.get(block, 'binary_authorization', null)),
        client: build.template(std.get(block, 'client', null)),
        client_version: build.template(std.get(block, 'client_version', null)),
        conditions: build.template(std.get(block, 'conditions', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        creator: build.template(std.get(block, 'creator', null)),
        custom_audiences: build.template(std.get(block, 'custom_audiences', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        generation: build.template(std.get(block, 'generation', null)),
        id: build.template(std.get(block, 'id', null)),
        ingress: build.template(std.get(block, 'ingress', null)),
        invoker_iam_disabled: build.template(std.get(block, 'invoker_iam_disabled', null)),
        labels: build.template(std.get(block, 'labels', null)),
        last_modifier: build.template(std.get(block, 'last_modifier', null)),
        latest_created_revision: build.template(std.get(block, 'latest_created_revision', null)),
        latest_ready_revision: build.template(std.get(block, 'latest_ready_revision', null)),
        launch_stage: build.template(std.get(block, 'launch_stage', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        observed_generation: build.template(std.get(block, 'observed_generation', null)),
        project: build.template(std.get(block, 'project', null)),
        reconciling: build.template(std.get(block, 'reconciling', null)),
        scaling: build.template(std.get(block, 'scaling', null)),
        template: build.template(std.get(block, 'template', null)),
        terminal_condition: build.template(std.get(block, 'terminal_condition', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        traffic: build.template(std.get(block, 'traffic', null)),
        traffic_statuses: build.template(std.get(block, 'traffic_statuses', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        uri: build.template(std.get(block, 'uri', null)),
        urls: build.template(std.get(block, 'urls', null)),
      }),
      annotations: resource.field('annotations'),
      binary_authorization: resource.field('binary_authorization'),
      client: resource.field('client'),
      client_version: resource.field('client_version'),
      conditions: resource.field('conditions'),
      create_time: resource.field('create_time'),
      creator: resource.field('creator'),
      custom_audiences: resource.field('custom_audiences'),
      delete_time: resource.field('delete_time'),
      deletion_protection: resource.field('deletion_protection'),
      description: resource.field('description'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      expire_time: resource.field('expire_time'),
      generation: resource.field('generation'),
      id: resource.field('id'),
      ingress: resource.field('ingress'),
      invoker_iam_disabled: resource.field('invoker_iam_disabled'),
      labels: resource.field('labels'),
      last_modifier: resource.field('last_modifier'),
      latest_created_revision: resource.field('latest_created_revision'),
      latest_ready_revision: resource.field('latest_ready_revision'),
      launch_stage: resource.field('launch_stage'),
      location: resource.field('location'),
      name: resource.field('name'),
      observed_generation: resource.field('observed_generation'),
      project: resource.field('project'),
      reconciling: resource.field('reconciling'),
      scaling: resource.field('scaling'),
      template: resource.field('template'),
      terminal_condition: resource.field('terminal_condition'),
      terraform_labels: resource.field('terraform_labels'),
      traffic: resource.field('traffic'),
      traffic_statuses: resource.field('traffic_statuses'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      uri: resource.field('uri'),
      urls: resource.field('urls'),
    },
    cloud_run_v2_service_iam_policy(name, block): {
      local resource = blockType.resource('google_cloud_run_v2_service_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    cloud_tasks_queue_iam_policy(name, block): {
      local resource = blockType.resource('google_cloud_tasks_queue_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    cloudbuild_trigger(name, block): {
      local resource = blockType.resource('google_cloudbuild_trigger', name),
      _: resource._(block, {
        approval_config: build.template(std.get(block, 'approval_config', null)),
        bitbucket_server_trigger_config: build.template(std.get(block, 'bitbucket_server_trigger_config', null)),
        build: build.template(std.get(block, 'build', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        filename: build.template(std.get(block, 'filename', null)),
        filter: build.template(std.get(block, 'filter', null)),
        git_file_source: build.template(std.get(block, 'git_file_source', null)),
        github: build.template(std.get(block, 'github', null)),
        id: build.template(std.get(block, 'id', null)),
        ignored_files: build.template(std.get(block, 'ignored_files', null)),
        include_build_logs: build.template(std.get(block, 'include_build_logs', null)),
        included_files: build.template(std.get(block, 'included_files', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        pubsub_config: build.template(std.get(block, 'pubsub_config', null)),
        repository_event_config: build.template(std.get(block, 'repository_event_config', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        source_to_build: build.template(std.get(block, 'source_to_build', null)),
        substitutions: build.template(std.get(block, 'substitutions', null)),
        tags: build.template(std.get(block, 'tags', null)),
        trigger_id: build.template(block.trigger_id),
        trigger_template: build.template(std.get(block, 'trigger_template', null)),
        webhook_config: build.template(std.get(block, 'webhook_config', null)),
      }),
      approval_config: resource.field('approval_config'),
      bitbucket_server_trigger_config: resource.field('bitbucket_server_trigger_config'),
      build: resource.field('build'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      disabled: resource.field('disabled'),
      filename: resource.field('filename'),
      filter: resource.field('filter'),
      git_file_source: resource.field('git_file_source'),
      github: resource.field('github'),
      id: resource.field('id'),
      ignored_files: resource.field('ignored_files'),
      include_build_logs: resource.field('include_build_logs'),
      included_files: resource.field('included_files'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      pubsub_config: resource.field('pubsub_config'),
      repository_event_config: resource.field('repository_event_config'),
      service_account: resource.field('service_account'),
      source_to_build: resource.field('source_to_build'),
      substitutions: resource.field('substitutions'),
      tags: resource.field('tags'),
      trigger_id: resource.field('trigger_id'),
      trigger_template: resource.field('trigger_template'),
      webhook_config: resource.field('webhook_config'),
    },
    cloudbuildv2_connection_iam_policy(name, block): {
      local resource = blockType.resource('google_cloudbuildv2_connection_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    clouddeploy_custom_target_type_iam_policy(name, block): {
      local resource = blockType.resource('google_clouddeploy_custom_target_type_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    clouddeploy_delivery_pipeline_iam_policy(name, block): {
      local resource = blockType.resource('google_clouddeploy_delivery_pipeline_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    clouddeploy_target_iam_policy(name, block): {
      local resource = blockType.resource('google_clouddeploy_target_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    cloudfunctions2_function(name, block): {
      local resource = blockType.resource('google_cloudfunctions2_function', name),
      _: resource._(block, {
        build_config: build.template(std.get(block, 'build_config', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        environment: build.template(std.get(block, 'environment', null)),
        event_trigger: build.template(std.get(block, 'event_trigger', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        service_config: build.template(std.get(block, 'service_config', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      build_config: resource.field('build_config'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      environment: resource.field('environment'),
      event_trigger: resource.field('event_trigger'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_config: resource.field('service_config'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
      url: resource.field('url'),
    },
    cloudfunctions2_function_iam_policy(name, block): {
      local resource = blockType.resource('google_cloudfunctions2_function_iam_policy', name),
      _: resource._(block, {
        cloud_function: build.template(block.cloud_function),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      cloud_function: resource.field('cloud_function'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    cloudfunctions_function(name, block): {
      local resource = blockType.resource('google_cloudfunctions_function', name),
      _: resource._(block, {
        available_memory_mb: build.template(std.get(block, 'available_memory_mb', null)),
        build_environment_variables: build.template(std.get(block, 'build_environment_variables', null)),
        build_service_account: build.template(std.get(block, 'build_service_account', null)),
        build_worker_pool: build.template(std.get(block, 'build_worker_pool', null)),
        description: build.template(std.get(block, 'description', null)),
        docker_registry: build.template(std.get(block, 'docker_registry', null)),
        docker_repository: build.template(std.get(block, 'docker_repository', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        entry_point: build.template(std.get(block, 'entry_point', null)),
        environment_variables: build.template(std.get(block, 'environment_variables', null)),
        event_trigger: build.template(std.get(block, 'event_trigger', null)),
        https_trigger_security_level: build.template(std.get(block, 'https_trigger_security_level', null)),
        https_trigger_url: build.template(std.get(block, 'https_trigger_url', null)),
        id: build.template(std.get(block, 'id', null)),
        ingress_settings: build.template(std.get(block, 'ingress_settings', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        labels: build.template(std.get(block, 'labels', null)),
        max_instances: build.template(std.get(block, 'max_instances', null)),
        min_instances: build.template(std.get(block, 'min_instances', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        runtime: build.template(std.get(block, 'runtime', null)),
        secret_environment_variables: build.template(std.get(block, 'secret_environment_variables', null)),
        secret_volumes: build.template(std.get(block, 'secret_volumes', null)),
        service_account_email: build.template(std.get(block, 'service_account_email', null)),
        source_archive_bucket: build.template(std.get(block, 'source_archive_bucket', null)),
        source_archive_object: build.template(std.get(block, 'source_archive_object', null)),
        source_repository: build.template(std.get(block, 'source_repository', null)),
        status: build.template(std.get(block, 'status', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
        trigger_http: build.template(std.get(block, 'trigger_http', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
        vpc_connector: build.template(std.get(block, 'vpc_connector', null)),
        vpc_connector_egress_settings: build.template(std.get(block, 'vpc_connector_egress_settings', null)),
      }),
      available_memory_mb: resource.field('available_memory_mb'),
      build_environment_variables: resource.field('build_environment_variables'),
      build_service_account: resource.field('build_service_account'),
      build_worker_pool: resource.field('build_worker_pool'),
      description: resource.field('description'),
      docker_registry: resource.field('docker_registry'),
      docker_repository: resource.field('docker_repository'),
      effective_labels: resource.field('effective_labels'),
      entry_point: resource.field('entry_point'),
      environment_variables: resource.field('environment_variables'),
      event_trigger: resource.field('event_trigger'),
      https_trigger_security_level: resource.field('https_trigger_security_level'),
      https_trigger_url: resource.field('https_trigger_url'),
      id: resource.field('id'),
      ingress_settings: resource.field('ingress_settings'),
      kms_key_name: resource.field('kms_key_name'),
      labels: resource.field('labels'),
      max_instances: resource.field('max_instances'),
      min_instances: resource.field('min_instances'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      runtime: resource.field('runtime'),
      secret_environment_variables: resource.field('secret_environment_variables'),
      secret_volumes: resource.field('secret_volumes'),
      service_account_email: resource.field('service_account_email'),
      source_archive_bucket: resource.field('source_archive_bucket'),
      source_archive_object: resource.field('source_archive_object'),
      source_repository: resource.field('source_repository'),
      status: resource.field('status'),
      terraform_labels: resource.field('terraform_labels'),
      timeout: resource.field('timeout'),
      trigger_http: resource.field('trigger_http'),
      version_id: resource.field('version_id'),
      vpc_connector: resource.field('vpc_connector'),
      vpc_connector_egress_settings: resource.field('vpc_connector_egress_settings'),
    },
    cloudfunctions_function_iam_policy(name, block): {
      local resource = blockType.resource('google_cloudfunctions_function_iam_policy', name),
      _: resource._(block, {
        cloud_function: build.template(block.cloud_function),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      cloud_function: resource.field('cloud_function'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    composer_environment(name, block): {
      local resource = blockType.resource('google_composer_environment', name),
      _: resource._(block, {
        config: build.template(std.get(block, 'config', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        storage_config: build.template(std.get(block, 'storage_config', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      config: resource.field('config'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      storage_config: resource.field('storage_config'),
      terraform_labels: resource.field('terraform_labels'),
    },
    composer_image_versions(name, block): {
      local resource = blockType.resource('google_composer_image_versions', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        image_versions: build.template(std.get(block, 'image_versions', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      id: resource.field('id'),
      image_versions: resource.field('image_versions'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    compute_address(name, block): {
      local resource = blockType.resource('google_compute_address', name),
      _: resource._(block, {
        address: build.template(std.get(block, 'address', null)),
        address_type: build.template(std.get(block, 'address_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        network_tier: build.template(std.get(block, 'network_tier', null)),
        prefix_length: build.template(std.get(block, 'prefix_length', null)),
        project: build.template(std.get(block, 'project', null)),
        purpose: build.template(std.get(block, 'purpose', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        status: build.template(std.get(block, 'status', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        users: build.template(std.get(block, 'users', null)),
      }),
      address: resource.field('address'),
      address_type: resource.field('address_type'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      network_tier: resource.field('network_tier'),
      prefix_length: resource.field('prefix_length'),
      project: resource.field('project'),
      purpose: resource.field('purpose'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      status: resource.field('status'),
      subnetwork: resource.field('subnetwork'),
      users: resource.field('users'),
    },
    compute_addresses(name, block): {
      local resource = blockType.resource('google_compute_addresses', name),
      _: resource._(block, {
        addresses: build.template(std.get(block, 'addresses', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      addresses: resource.field('addresses'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    compute_backend_bucket(name, block): {
      local resource = blockType.resource('google_compute_backend_bucket', name),
      _: resource._(block, {
        bucket_name: build.template(std.get(block, 'bucket_name', null)),
        cdn_policy: build.template(std.get(block, 'cdn_policy', null)),
        compression_mode: build.template(std.get(block, 'compression_mode', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        custom_response_headers: build.template(std.get(block, 'custom_response_headers', null)),
        description: build.template(std.get(block, 'description', null)),
        edge_security_policy: build.template(std.get(block, 'edge_security_policy', null)),
        enable_cdn: build.template(std.get(block, 'enable_cdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      bucket_name: resource.field('bucket_name'),
      cdn_policy: resource.field('cdn_policy'),
      compression_mode: resource.field('compression_mode'),
      creation_timestamp: resource.field('creation_timestamp'),
      custom_response_headers: resource.field('custom_response_headers'),
      description: resource.field('description'),
      edge_security_policy: resource.field('edge_security_policy'),
      enable_cdn: resource.field('enable_cdn'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
    },
    compute_backend_service(name, block): {
      local resource = blockType.resource('google_compute_backend_service', name),
      _: resource._(block, {
        affinity_cookie_ttl_sec: build.template(std.get(block, 'affinity_cookie_ttl_sec', null)),
        backend: build.template(std.get(block, 'backend', null)),
        cdn_policy: build.template(std.get(block, 'cdn_policy', null)),
        circuit_breakers: build.template(std.get(block, 'circuit_breakers', null)),
        compression_mode: build.template(std.get(block, 'compression_mode', null)),
        connection_draining_timeout_sec: build.template(std.get(block, 'connection_draining_timeout_sec', null)),
        consistent_hash: build.template(std.get(block, 'consistent_hash', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        custom_request_headers: build.template(std.get(block, 'custom_request_headers', null)),
        custom_response_headers: build.template(std.get(block, 'custom_response_headers', null)),
        description: build.template(std.get(block, 'description', null)),
        edge_security_policy: build.template(std.get(block, 'edge_security_policy', null)),
        enable_cdn: build.template(std.get(block, 'enable_cdn', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        generated_id: build.template(std.get(block, 'generated_id', null)),
        health_checks: build.template(std.get(block, 'health_checks', null)),
        iap: build.template(std.get(block, 'iap', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_selection_policy: build.template(std.get(block, 'ip_address_selection_policy', null)),
        load_balancing_scheme: build.template(std.get(block, 'load_balancing_scheme', null)),
        locality_lb_policies: build.template(std.get(block, 'locality_lb_policies', null)),
        locality_lb_policy: build.template(std.get(block, 'locality_lb_policy', null)),
        log_config: build.template(std.get(block, 'log_config', null)),
        name: build.template(block.name),
        outlier_detection: build.template(std.get(block, 'outlier_detection', null)),
        port_name: build.template(std.get(block, 'port_name', null)),
        project: build.template(std.get(block, 'project', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        security_policy: build.template(std.get(block, 'security_policy', null)),
        security_settings: build.template(std.get(block, 'security_settings', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        service_lb_policy: build.template(std.get(block, 'service_lb_policy', null)),
        session_affinity: build.template(std.get(block, 'session_affinity', null)),
        strong_session_affinity_cookie: build.template(std.get(block, 'strong_session_affinity_cookie', null)),
        timeout_sec: build.template(std.get(block, 'timeout_sec', null)),
      }),
      affinity_cookie_ttl_sec: resource.field('affinity_cookie_ttl_sec'),
      backend: resource.field('backend'),
      cdn_policy: resource.field('cdn_policy'),
      circuit_breakers: resource.field('circuit_breakers'),
      compression_mode: resource.field('compression_mode'),
      connection_draining_timeout_sec: resource.field('connection_draining_timeout_sec'),
      consistent_hash: resource.field('consistent_hash'),
      creation_timestamp: resource.field('creation_timestamp'),
      custom_request_headers: resource.field('custom_request_headers'),
      custom_response_headers: resource.field('custom_response_headers'),
      description: resource.field('description'),
      edge_security_policy: resource.field('edge_security_policy'),
      enable_cdn: resource.field('enable_cdn'),
      fingerprint: resource.field('fingerprint'),
      generated_id: resource.field('generated_id'),
      health_checks: resource.field('health_checks'),
      iap: resource.field('iap'),
      id: resource.field('id'),
      ip_address_selection_policy: resource.field('ip_address_selection_policy'),
      load_balancing_scheme: resource.field('load_balancing_scheme'),
      locality_lb_policies: resource.field('locality_lb_policies'),
      locality_lb_policy: resource.field('locality_lb_policy'),
      log_config: resource.field('log_config'),
      name: resource.field('name'),
      outlier_detection: resource.field('outlier_detection'),
      port_name: resource.field('port_name'),
      project: resource.field('project'),
      protocol: resource.field('protocol'),
      security_policy: resource.field('security_policy'),
      security_settings: resource.field('security_settings'),
      self_link: resource.field('self_link'),
      service_lb_policy: resource.field('service_lb_policy'),
      session_affinity: resource.field('session_affinity'),
      strong_session_affinity_cookie: resource.field('strong_session_affinity_cookie'),
      timeout_sec: resource.field('timeout_sec'),
    },
    compute_default_service_account(name, block): {
      local resource = blockType.resource('google_compute_default_service_account', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(std.get(block, 'member', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
      }),
      display_name: resource.field('display_name'),
      email: resource.field('email'),
      id: resource.field('id'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      unique_id: resource.field('unique_id'),
    },
    compute_disk(name, block): {
      local resource = blockType.resource('google_compute_disk', name),
      _: resource._(block, {
        access_mode: build.template(std.get(block, 'access_mode', null)),
        async_primary_disk: build.template(std.get(block, 'async_primary_disk', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        disk_encryption_key: build.template(std.get(block, 'disk_encryption_key', null)),
        disk_id: build.template(std.get(block, 'disk_id', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_confidential_compute: build.template(std.get(block, 'enable_confidential_compute', null)),
        guest_os_features: build.template(std.get(block, 'guest_os_features', null)),
        id: build.template(std.get(block, 'id', null)),
        image: build.template(std.get(block, 'image', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        last_attach_timestamp: build.template(std.get(block, 'last_attach_timestamp', null)),
        last_detach_timestamp: build.template(std.get(block, 'last_detach_timestamp', null)),
        licenses: build.template(std.get(block, 'licenses', null)),
        name: build.template(block.name),
        physical_block_size_bytes: build.template(std.get(block, 'physical_block_size_bytes', null)),
        project: build.template(std.get(block, 'project', null)),
        provisioned_iops: build.template(std.get(block, 'provisioned_iops', null)),
        provisioned_throughput: build.template(std.get(block, 'provisioned_throughput', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        size: build.template(std.get(block, 'size', null)),
        snapshot: build.template(std.get(block, 'snapshot', null)),
        source_disk: build.template(std.get(block, 'source_disk', null)),
        source_disk_id: build.template(std.get(block, 'source_disk_id', null)),
        source_image_encryption_key: build.template(std.get(block, 'source_image_encryption_key', null)),
        source_image_id: build.template(std.get(block, 'source_image_id', null)),
        source_snapshot_encryption_key: build.template(std.get(block, 'source_snapshot_encryption_key', null)),
        source_snapshot_id: build.template(std.get(block, 'source_snapshot_id', null)),
        storage_pool: build.template(std.get(block, 'storage_pool', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
        users: build.template(std.get(block, 'users', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      access_mode: resource.field('access_mode'),
      async_primary_disk: resource.field('async_primary_disk'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      disk_encryption_key: resource.field('disk_encryption_key'),
      disk_id: resource.field('disk_id'),
      effective_labels: resource.field('effective_labels'),
      enable_confidential_compute: resource.field('enable_confidential_compute'),
      guest_os_features: resource.field('guest_os_features'),
      id: resource.field('id'),
      image: resource.field('image'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      last_attach_timestamp: resource.field('last_attach_timestamp'),
      last_detach_timestamp: resource.field('last_detach_timestamp'),
      licenses: resource.field('licenses'),
      name: resource.field('name'),
      physical_block_size_bytes: resource.field('physical_block_size_bytes'),
      project: resource.field('project'),
      provisioned_iops: resource.field('provisioned_iops'),
      provisioned_throughput: resource.field('provisioned_throughput'),
      self_link: resource.field('self_link'),
      size: resource.field('size'),
      snapshot: resource.field('snapshot'),
      source_disk: resource.field('source_disk'),
      source_disk_id: resource.field('source_disk_id'),
      source_image_encryption_key: resource.field('source_image_encryption_key'),
      source_image_id: resource.field('source_image_id'),
      source_snapshot_encryption_key: resource.field('source_snapshot_encryption_key'),
      source_snapshot_id: resource.field('source_snapshot_id'),
      storage_pool: resource.field('storage_pool'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      users: resource.field('users'),
      zone: resource.field('zone'),
    },
    compute_disk_iam_policy(name, block): {
      local resource = blockType.resource('google_compute_disk_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_forwarding_rule(name, block): {
      local resource = blockType.resource('google_compute_forwarding_rule', name),
      _: resource._(block, {
        all_ports: build.template(std.get(block, 'all_ports', null)),
        allow_global_access: build.template(std.get(block, 'allow_global_access', null)),
        allow_psc_global_access: build.template(std.get(block, 'allow_psc_global_access', null)),
        backend_service: build.template(std.get(block, 'backend_service', null)),
        base_forwarding_rule: build.template(std.get(block, 'base_forwarding_rule', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        forwarding_rule_id: build.template(std.get(block, 'forwarding_rule_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        ip_protocol: build.template(std.get(block, 'ip_protocol', null)),
        ip_version: build.template(std.get(block, 'ip_version', null)),
        is_mirroring_collector: build.template(std.get(block, 'is_mirroring_collector', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        load_balancing_scheme: build.template(std.get(block, 'load_balancing_scheme', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        network_tier: build.template(std.get(block, 'network_tier', null)),
        no_automate_dns_zone: build.template(std.get(block, 'no_automate_dns_zone', null)),
        port_range: build.template(std.get(block, 'port_range', null)),
        ports: build.template(std.get(block, 'ports', null)),
        project: build.template(std.get(block, 'project', null)),
        psc_connection_id: build.template(std.get(block, 'psc_connection_id', null)),
        psc_connection_status: build.template(std.get(block, 'psc_connection_status', null)),
        recreate_closed_psc: build.template(std.get(block, 'recreate_closed_psc', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        service_directory_registrations: build.template(std.get(block, 'service_directory_registrations', null)),
        service_label: build.template(std.get(block, 'service_label', null)),
        service_name: build.template(std.get(block, 'service_name', null)),
        source_ip_ranges: build.template(std.get(block, 'source_ip_ranges', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        target: build.template(std.get(block, 'target', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      all_ports: resource.field('all_ports'),
      allow_global_access: resource.field('allow_global_access'),
      allow_psc_global_access: resource.field('allow_psc_global_access'),
      backend_service: resource.field('backend_service'),
      base_forwarding_rule: resource.field('base_forwarding_rule'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      forwarding_rule_id: resource.field('forwarding_rule_id'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      ip_protocol: resource.field('ip_protocol'),
      ip_version: resource.field('ip_version'),
      is_mirroring_collector: resource.field('is_mirroring_collector'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      load_balancing_scheme: resource.field('load_balancing_scheme'),
      name: resource.field('name'),
      network: resource.field('network'),
      network_tier: resource.field('network_tier'),
      no_automate_dns_zone: resource.field('no_automate_dns_zone'),
      port_range: resource.field('port_range'),
      ports: resource.field('ports'),
      project: resource.field('project'),
      psc_connection_id: resource.field('psc_connection_id'),
      psc_connection_status: resource.field('psc_connection_status'),
      recreate_closed_psc: resource.field('recreate_closed_psc'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      service_directory_registrations: resource.field('service_directory_registrations'),
      service_label: resource.field('service_label'),
      service_name: resource.field('service_name'),
      source_ip_ranges: resource.field('source_ip_ranges'),
      subnetwork: resource.field('subnetwork'),
      target: resource.field('target'),
      terraform_labels: resource.field('terraform_labels'),
    },
    compute_forwarding_rules(name, block): {
      local resource = blockType.resource('google_compute_forwarding_rules', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        rules: build.template(std.get(block, 'rules', null)),
      }),
      id: resource.field('id'),
      project: resource.field('project'),
      region: resource.field('region'),
      rules: resource.field('rules'),
    },
    compute_global_address(name, block): {
      local resource = blockType.resource('google_compute_global_address', name),
      _: resource._(block, {
        address: build.template(std.get(block, 'address', null)),
        address_type: build.template(std.get(block, 'address_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        network_tier: build.template(std.get(block, 'network_tier', null)),
        prefix_length: build.template(std.get(block, 'prefix_length', null)),
        project: build.template(std.get(block, 'project', null)),
        purpose: build.template(std.get(block, 'purpose', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        status: build.template(std.get(block, 'status', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        users: build.template(std.get(block, 'users', null)),
      }),
      address: resource.field('address'),
      address_type: resource.field('address_type'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      network_tier: resource.field('network_tier'),
      prefix_length: resource.field('prefix_length'),
      project: resource.field('project'),
      purpose: resource.field('purpose'),
      self_link: resource.field('self_link'),
      status: resource.field('status'),
      subnetwork: resource.field('subnetwork'),
      users: resource.field('users'),
    },
    compute_global_forwarding_rule(name, block): {
      local resource = blockType.resource('google_compute_global_forwarding_rule', name),
      _: resource._(block, {
        base_forwarding_rule: build.template(std.get(block, 'base_forwarding_rule', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        ip_protocol: build.template(std.get(block, 'ip_protocol', null)),
        ip_version: build.template(std.get(block, 'ip_version', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        load_balancing_scheme: build.template(std.get(block, 'load_balancing_scheme', null)),
        metadata_filters: build.template(std.get(block, 'metadata_filters', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        no_automate_dns_zone: build.template(std.get(block, 'no_automate_dns_zone', null)),
        port_range: build.template(std.get(block, 'port_range', null)),
        project: build.template(std.get(block, 'project', null)),
        psc_connection_id: build.template(std.get(block, 'psc_connection_id', null)),
        psc_connection_status: build.template(std.get(block, 'psc_connection_status', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        service_directory_registrations: build.template(std.get(block, 'service_directory_registrations', null)),
        source_ip_ranges: build.template(std.get(block, 'source_ip_ranges', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        target: build.template(std.get(block, 'target', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      base_forwarding_rule: resource.field('base_forwarding_rule'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      ip_protocol: resource.field('ip_protocol'),
      ip_version: resource.field('ip_version'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      load_balancing_scheme: resource.field('load_balancing_scheme'),
      metadata_filters: resource.field('metadata_filters'),
      name: resource.field('name'),
      network: resource.field('network'),
      no_automate_dns_zone: resource.field('no_automate_dns_zone'),
      port_range: resource.field('port_range'),
      project: resource.field('project'),
      psc_connection_id: resource.field('psc_connection_id'),
      psc_connection_status: resource.field('psc_connection_status'),
      self_link: resource.field('self_link'),
      service_directory_registrations: resource.field('service_directory_registrations'),
      source_ip_ranges: resource.field('source_ip_ranges'),
      subnetwork: resource.field('subnetwork'),
      target: resource.field('target'),
      terraform_labels: resource.field('terraform_labels'),
    },
    compute_ha_vpn_gateway(name, block): {
      local resource = blockType.resource('google_compute_ha_vpn_gateway', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        gateway_ip_version: build.template(std.get(block, 'gateway_ip_version', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        stack_type: build.template(std.get(block, 'stack_type', null)),
        vpn_interfaces: build.template(std.get(block, 'vpn_interfaces', null)),
      }),
      description: resource.field('description'),
      gateway_ip_version: resource.field('gateway_ip_version'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      stack_type: resource.field('stack_type'),
      vpn_interfaces: resource.field('vpn_interfaces'),
    },
    compute_health_check(name, block): {
      local resource = blockType.resource('google_compute_health_check', name),
      _: resource._(block, {
        check_interval_sec: build.template(std.get(block, 'check_interval_sec', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        grpc_health_check: build.template(std.get(block, 'grpc_health_check', null)),
        healthy_threshold: build.template(std.get(block, 'healthy_threshold', null)),
        http2_health_check: build.template(std.get(block, 'http2_health_check', null)),
        http_health_check: build.template(std.get(block, 'http_health_check', null)),
        https_health_check: build.template(std.get(block, 'https_health_check', null)),
        id: build.template(std.get(block, 'id', null)),
        log_config: build.template(std.get(block, 'log_config', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        source_regions: build.template(std.get(block, 'source_regions', null)),
        ssl_health_check: build.template(std.get(block, 'ssl_health_check', null)),
        tcp_health_check: build.template(std.get(block, 'tcp_health_check', null)),
        timeout_sec: build.template(std.get(block, 'timeout_sec', null)),
        type: build.template(std.get(block, 'type', null)),
        unhealthy_threshold: build.template(std.get(block, 'unhealthy_threshold', null)),
      }),
      check_interval_sec: resource.field('check_interval_sec'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      grpc_health_check: resource.field('grpc_health_check'),
      healthy_threshold: resource.field('healthy_threshold'),
      http2_health_check: resource.field('http2_health_check'),
      http_health_check: resource.field('http_health_check'),
      https_health_check: resource.field('https_health_check'),
      id: resource.field('id'),
      log_config: resource.field('log_config'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      source_regions: resource.field('source_regions'),
      ssl_health_check: resource.field('ssl_health_check'),
      tcp_health_check: resource.field('tcp_health_check'),
      timeout_sec: resource.field('timeout_sec'),
      type: resource.field('type'),
      unhealthy_threshold: resource.field('unhealthy_threshold'),
    },
    compute_image(name, block): {
      local resource = blockType.resource('google_compute_image', name),
      _: resource._(block, {
        archive_size_bytes: build.template(std.get(block, 'archive_size_bytes', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        disk_size_gb: build.template(std.get(block, 'disk_size_gb', null)),
        family: build.template(std.get(block, 'family', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        image_encryption_key_sha256: build.template(std.get(block, 'image_encryption_key_sha256', null)),
        image_id: build.template(std.get(block, 'image_id', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        licenses: build.template(std.get(block, 'licenses', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        source_disk: build.template(std.get(block, 'source_disk', null)),
        source_disk_encryption_key_sha256: build.template(std.get(block, 'source_disk_encryption_key_sha256', null)),
        source_disk_id: build.template(std.get(block, 'source_disk_id', null)),
        source_image_id: build.template(std.get(block, 'source_image_id', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      archive_size_bytes: resource.field('archive_size_bytes'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      disk_size_gb: resource.field('disk_size_gb'),
      family: resource.field('family'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      image_encryption_key_sha256: resource.field('image_encryption_key_sha256'),
      image_id: resource.field('image_id'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      licenses: resource.field('licenses'),
      most_recent: resource.field('most_recent'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      source_disk: resource.field('source_disk'),
      source_disk_encryption_key_sha256: resource.field('source_disk_encryption_key_sha256'),
      source_disk_id: resource.field('source_disk_id'),
      source_image_id: resource.field('source_image_id'),
      status: resource.field('status'),
    },
    compute_image_iam_policy(name, block): {
      local resource = blockType.resource('google_compute_image_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        image: build.template(block.image),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      image: resource.field('image'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    compute_instance(name, block): {
      local resource = blockType.resource('google_compute_instance', name),
      _: resource._(block, {
        advanced_machine_features: build.template(std.get(block, 'advanced_machine_features', null)),
        allow_stopping_for_update: build.template(std.get(block, 'allow_stopping_for_update', null)),
        attached_disk: build.template(std.get(block, 'attached_disk', null)),
        boot_disk: build.template(std.get(block, 'boot_disk', null)),
        can_ip_forward: build.template(std.get(block, 'can_ip_forward', null)),
        confidential_instance_config: build.template(std.get(block, 'confidential_instance_config', null)),
        cpu_platform: build.template(std.get(block, 'cpu_platform', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        current_status: build.template(std.get(block, 'current_status', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        description: build.template(std.get(block, 'description', null)),
        desired_status: build.template(std.get(block, 'desired_status', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_display: build.template(std.get(block, 'enable_display', null)),
        guest_accelerator: build.template(std.get(block, 'guest_accelerator', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(std.get(block, 'instance_id', null)),
        key_revocation_action_type: build.template(std.get(block, 'key_revocation_action_type', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        machine_type: build.template(std.get(block, 'machine_type', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        metadata_fingerprint: build.template(std.get(block, 'metadata_fingerprint', null)),
        metadata_startup_script: build.template(std.get(block, 'metadata_startup_script', null)),
        min_cpu_platform: build.template(std.get(block, 'min_cpu_platform', null)),
        name: build.template(std.get(block, 'name', null)),
        network_interface: build.template(std.get(block, 'network_interface', null)),
        network_performance_config: build.template(std.get(block, 'network_performance_config', null)),
        params: build.template(std.get(block, 'params', null)),
        project: build.template(std.get(block, 'project', null)),
        reservation_affinity: build.template(std.get(block, 'reservation_affinity', null)),
        resource_policies: build.template(std.get(block, 'resource_policies', null)),
        scheduling: build.template(std.get(block, 'scheduling', null)),
        scratch_disk: build.template(std.get(block, 'scratch_disk', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        shielded_instance_config: build.template(std.get(block, 'shielded_instance_config', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_fingerprint: build.template(std.get(block, 'tags_fingerprint', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      advanced_machine_features: resource.field('advanced_machine_features'),
      allow_stopping_for_update: resource.field('allow_stopping_for_update'),
      attached_disk: resource.field('attached_disk'),
      boot_disk: resource.field('boot_disk'),
      can_ip_forward: resource.field('can_ip_forward'),
      confidential_instance_config: resource.field('confidential_instance_config'),
      cpu_platform: resource.field('cpu_platform'),
      creation_timestamp: resource.field('creation_timestamp'),
      current_status: resource.field('current_status'),
      deletion_protection: resource.field('deletion_protection'),
      description: resource.field('description'),
      desired_status: resource.field('desired_status'),
      effective_labels: resource.field('effective_labels'),
      enable_display: resource.field('enable_display'),
      guest_accelerator: resource.field('guest_accelerator'),
      hostname: resource.field('hostname'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      key_revocation_action_type: resource.field('key_revocation_action_type'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      machine_type: resource.field('machine_type'),
      metadata: resource.field('metadata'),
      metadata_fingerprint: resource.field('metadata_fingerprint'),
      metadata_startup_script: resource.field('metadata_startup_script'),
      min_cpu_platform: resource.field('min_cpu_platform'),
      name: resource.field('name'),
      network_interface: resource.field('network_interface'),
      network_performance_config: resource.field('network_performance_config'),
      params: resource.field('params'),
      project: resource.field('project'),
      reservation_affinity: resource.field('reservation_affinity'),
      resource_policies: resource.field('resource_policies'),
      scheduling: resource.field('scheduling'),
      scratch_disk: resource.field('scratch_disk'),
      self_link: resource.field('self_link'),
      service_account: resource.field('service_account'),
      shielded_instance_config: resource.field('shielded_instance_config'),
      tags: resource.field('tags'),
      tags_fingerprint: resource.field('tags_fingerprint'),
      terraform_labels: resource.field('terraform_labels'),
      zone: resource.field('zone'),
    },
    compute_instance_group(name, block): {
      local resource = blockType.resource('google_compute_instance_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instances: build.template(std.get(block, 'instances', null)),
        name: build.template(std.get(block, 'name', null)),
        named_port: build.template(std.get(block, 'named_port', null)),
        network: build.template(std.get(block, 'network', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        size: build.template(std.get(block, 'size', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      instances: resource.field('instances'),
      name: resource.field('name'),
      named_port: resource.field('named_port'),
      network: resource.field('network'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      size: resource.field('size'),
      zone: resource.field('zone'),
    },
    compute_instance_group_manager(name, block): {
      local resource = blockType.resource('google_compute_instance_group_manager', name),
      _: resource._(block, {
        all_instances_config: build.template(std.get(block, 'all_instances_config', null)),
        auto_healing_policies: build.template(std.get(block, 'auto_healing_policies', null)),
        base_instance_name: build.template(std.get(block, 'base_instance_name', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_group: build.template(std.get(block, 'instance_group', null)),
        instance_lifecycle_policy: build.template(std.get(block, 'instance_lifecycle_policy', null)),
        list_managed_instances_results: build.template(std.get(block, 'list_managed_instances_results', null)),
        name: build.template(std.get(block, 'name', null)),
        named_port: build.template(std.get(block, 'named_port', null)),
        operation: build.template(std.get(block, 'operation', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        stateful_disk: build.template(std.get(block, 'stateful_disk', null)),
        stateful_external_ip: build.template(std.get(block, 'stateful_external_ip', null)),
        stateful_internal_ip: build.template(std.get(block, 'stateful_internal_ip', null)),
        status: build.template(std.get(block, 'status', null)),
        target_pools: build.template(std.get(block, 'target_pools', null)),
        target_size: build.template(std.get(block, 'target_size', null)),
        update_policy: build.template(std.get(block, 'update_policy', null)),
        version: build.template(std.get(block, 'version', null)),
        wait_for_instances: build.template(std.get(block, 'wait_for_instances', null)),
        wait_for_instances_status: build.template(std.get(block, 'wait_for_instances_status', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      all_instances_config: resource.field('all_instances_config'),
      auto_healing_policies: resource.field('auto_healing_policies'),
      base_instance_name: resource.field('base_instance_name'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      instance_group: resource.field('instance_group'),
      instance_lifecycle_policy: resource.field('instance_lifecycle_policy'),
      list_managed_instances_results: resource.field('list_managed_instances_results'),
      name: resource.field('name'),
      named_port: resource.field('named_port'),
      operation: resource.field('operation'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      stateful_disk: resource.field('stateful_disk'),
      stateful_external_ip: resource.field('stateful_external_ip'),
      stateful_internal_ip: resource.field('stateful_internal_ip'),
      status: resource.field('status'),
      target_pools: resource.field('target_pools'),
      target_size: resource.field('target_size'),
      update_policy: resource.field('update_policy'),
      version: resource.field('version'),
      wait_for_instances: resource.field('wait_for_instances'),
      wait_for_instances_status: resource.field('wait_for_instances_status'),
      zone: resource.field('zone'),
    },
    compute_instance_guest_attributes(name, block): {
      local resource = blockType.resource('google_compute_instance_guest_attributes', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        query_path: build.template(std.get(block, 'query_path', null)),
        query_value: build.template(std.get(block, 'query_value', null)),
        region: build.template(std.get(block, 'region', null)),
        variable_key: build.template(std.get(block, 'variable_key', null)),
        variable_value: build.template(std.get(block, 'variable_value', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      query_path: resource.field('query_path'),
      query_value: resource.field('query_value'),
      region: resource.field('region'),
      variable_key: resource.field('variable_key'),
      variable_value: resource.field('variable_value'),
      zone: resource.field('zone'),
    },
    compute_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_compute_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_instance_serial_port(name, block): {
      local resource = blockType.resource('google_compute_instance_serial_port', name),
      _: resource._(block, {
        contents: build.template(std.get(block, 'contents', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        port: build.template(block.port),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      contents: resource.field('contents'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      port: resource.field('port'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_instance_template(name, block): {
      local resource = blockType.resource('google_compute_instance_template', name),
      _: resource._(block, {
        advanced_machine_features: build.template(std.get(block, 'advanced_machine_features', null)),
        can_ip_forward: build.template(std.get(block, 'can_ip_forward', null)),
        confidential_instance_config: build.template(std.get(block, 'confidential_instance_config', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        disk: build.template(std.get(block, 'disk', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        filter: build.template(std.get(block, 'filter', null)),
        guest_accelerator: build.template(std.get(block, 'guest_accelerator', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_description: build.template(std.get(block, 'instance_description', null)),
        key_revocation_action_type: build.template(std.get(block, 'key_revocation_action_type', null)),
        labels: build.template(std.get(block, 'labels', null)),
        machine_type: build.template(std.get(block, 'machine_type', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        metadata_fingerprint: build.template(std.get(block, 'metadata_fingerprint', null)),
        metadata_startup_script: build.template(std.get(block, 'metadata_startup_script', null)),
        min_cpu_platform: build.template(std.get(block, 'min_cpu_platform', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        network_interface: build.template(std.get(block, 'network_interface', null)),
        network_performance_config: build.template(std.get(block, 'network_performance_config', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        reservation_affinity: build.template(std.get(block, 'reservation_affinity', null)),
        resource_manager_tags: build.template(std.get(block, 'resource_manager_tags', null)),
        resource_policies: build.template(std.get(block, 'resource_policies', null)),
        scheduling: build.template(std.get(block, 'scheduling', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        self_link_unique: build.template(std.get(block, 'self_link_unique', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        shielded_instance_config: build.template(std.get(block, 'shielded_instance_config', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_fingerprint: build.template(std.get(block, 'tags_fingerprint', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      advanced_machine_features: resource.field('advanced_machine_features'),
      can_ip_forward: resource.field('can_ip_forward'),
      confidential_instance_config: resource.field('confidential_instance_config'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      disk: resource.field('disk'),
      effective_labels: resource.field('effective_labels'),
      filter: resource.field('filter'),
      guest_accelerator: resource.field('guest_accelerator'),
      id: resource.field('id'),
      instance_description: resource.field('instance_description'),
      key_revocation_action_type: resource.field('key_revocation_action_type'),
      labels: resource.field('labels'),
      machine_type: resource.field('machine_type'),
      metadata: resource.field('metadata'),
      metadata_fingerprint: resource.field('metadata_fingerprint'),
      metadata_startup_script: resource.field('metadata_startup_script'),
      min_cpu_platform: resource.field('min_cpu_platform'),
      most_recent: resource.field('most_recent'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      network_interface: resource.field('network_interface'),
      network_performance_config: resource.field('network_performance_config'),
      project: resource.field('project'),
      region: resource.field('region'),
      reservation_affinity: resource.field('reservation_affinity'),
      resource_manager_tags: resource.field('resource_manager_tags'),
      resource_policies: resource.field('resource_policies'),
      scheduling: resource.field('scheduling'),
      self_link: resource.field('self_link'),
      self_link_unique: resource.field('self_link_unique'),
      service_account: resource.field('service_account'),
      shielded_instance_config: resource.field('shielded_instance_config'),
      tags: resource.field('tags'),
      tags_fingerprint: resource.field('tags_fingerprint'),
      terraform_labels: resource.field('terraform_labels'),
    },
    compute_lb_ip_ranges(name, block): {
      local resource = blockType.resource('google_compute_lb_ip_ranges', name),
      _: resource._(block, {
        http_ssl_tcp_internal: build.template(std.get(block, 'http_ssl_tcp_internal', null)),
        id: build.template(std.get(block, 'id', null)),
        network: build.template(std.get(block, 'network', null)),
      }),
      http_ssl_tcp_internal: resource.field('http_ssl_tcp_internal'),
      id: resource.field('id'),
      network: resource.field('network'),
    },
    compute_machine_types(name, block): {
      local resource = blockType.resource('google_compute_machine_types', name),
      _: resource._(block, {
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        machine_types: build.template(std.get(block, 'machine_types', null)),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      filter: resource.field('filter'),
      id: resource.field('id'),
      machine_types: resource.field('machine_types'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_network(name, block): {
      local resource = blockType.resource('google_compute_network', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        gateway_ipv4: build.template(std.get(block, 'gateway_ipv4', null)),
        id: build.template(std.get(block, 'id', null)),
        internal_ipv6_range: build.template(std.get(block, 'internal_ipv6_range', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        subnetworks_self_links: build.template(std.get(block, 'subnetworks_self_links', null)),
      }),
      description: resource.field('description'),
      gateway_ipv4: resource.field('gateway_ipv4'),
      id: resource.field('id'),
      internal_ipv6_range: resource.field('internal_ipv6_range'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      subnetworks_self_links: resource.field('subnetworks_self_links'),
    },
    compute_network_endpoint_group(name, block): {
      local resource = blockType.resource('google_compute_network_endpoint_group', name),
      _: resource._(block, {
        default_port: build.template(std.get(block, 'default_port', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        network: build.template(std.get(block, 'network', null)),
        network_endpoint_type: build.template(std.get(block, 'network_endpoint_type', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        size: build.template(std.get(block, 'size', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      default_port: resource.field('default_port'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      network_endpoint_type: resource.field('network_endpoint_type'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      size: resource.field('size'),
      subnetwork: resource.field('subnetwork'),
      zone: resource.field('zone'),
    },
    compute_network_peering(name, block): {
      local resource = blockType.resource('google_compute_network_peering', name),
      _: resource._(block, {
        export_custom_routes: build.template(std.get(block, 'export_custom_routes', null)),
        export_subnet_routes_with_public_ip: build.template(std.get(block, 'export_subnet_routes_with_public_ip', null)),
        id: build.template(std.get(block, 'id', null)),
        import_custom_routes: build.template(std.get(block, 'import_custom_routes', null)),
        import_subnet_routes_with_public_ip: build.template(std.get(block, 'import_subnet_routes_with_public_ip', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        peer_network: build.template(std.get(block, 'peer_network', null)),
        stack_type: build.template(std.get(block, 'stack_type', null)),
        state: build.template(std.get(block, 'state', null)),
        state_details: build.template(std.get(block, 'state_details', null)),
      }),
      export_custom_routes: resource.field('export_custom_routes'),
      export_subnet_routes_with_public_ip: resource.field('export_subnet_routes_with_public_ip'),
      id: resource.field('id'),
      import_custom_routes: resource.field('import_custom_routes'),
      import_subnet_routes_with_public_ip: resource.field('import_subnet_routes_with_public_ip'),
      name: resource.field('name'),
      network: resource.field('network'),
      peer_network: resource.field('peer_network'),
      stack_type: resource.field('stack_type'),
      state: resource.field('state'),
      state_details: resource.field('state_details'),
    },
    compute_networks(name, block): {
      local resource = blockType.resource('google_compute_networks', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        networks: build.template(std.get(block, 'networks', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      id: resource.field('id'),
      networks: resource.field('networks'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
    },
    compute_node_types(name, block): {
      local resource = blockType.resource('google_compute_node_types', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      id: resource.field('id'),
      names: resource.field('names'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    compute_region_disk(name, block): {
      local resource = blockType.resource('google_compute_region_disk', name),
      _: resource._(block, {
        async_primary_disk: build.template(std.get(block, 'async_primary_disk', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        disk_encryption_key: build.template(std.get(block, 'disk_encryption_key', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        guest_os_features: build.template(std.get(block, 'guest_os_features', null)),
        id: build.template(std.get(block, 'id', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        last_attach_timestamp: build.template(std.get(block, 'last_attach_timestamp', null)),
        last_detach_timestamp: build.template(std.get(block, 'last_detach_timestamp', null)),
        licenses: build.template(std.get(block, 'licenses', null)),
        name: build.template(block.name),
        physical_block_size_bytes: build.template(std.get(block, 'physical_block_size_bytes', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        replica_zones: build.template(std.get(block, 'replica_zones', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        size: build.template(std.get(block, 'size', null)),
        snapshot: build.template(std.get(block, 'snapshot', null)),
        source_disk: build.template(std.get(block, 'source_disk', null)),
        source_disk_id: build.template(std.get(block, 'source_disk_id', null)),
        source_snapshot_encryption_key: build.template(std.get(block, 'source_snapshot_encryption_key', null)),
        source_snapshot_id: build.template(std.get(block, 'source_snapshot_id', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
        users: build.template(std.get(block, 'users', null)),
      }),
      async_primary_disk: resource.field('async_primary_disk'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      disk_encryption_key: resource.field('disk_encryption_key'),
      effective_labels: resource.field('effective_labels'),
      guest_os_features: resource.field('guest_os_features'),
      id: resource.field('id'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      last_attach_timestamp: resource.field('last_attach_timestamp'),
      last_detach_timestamp: resource.field('last_detach_timestamp'),
      licenses: resource.field('licenses'),
      name: resource.field('name'),
      physical_block_size_bytes: resource.field('physical_block_size_bytes'),
      project: resource.field('project'),
      region: resource.field('region'),
      replica_zones: resource.field('replica_zones'),
      self_link: resource.field('self_link'),
      size: resource.field('size'),
      snapshot: resource.field('snapshot'),
      source_disk: resource.field('source_disk'),
      source_disk_id: resource.field('source_disk_id'),
      source_snapshot_encryption_key: resource.field('source_snapshot_encryption_key'),
      source_snapshot_id: resource.field('source_snapshot_id'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      users: resource.field('users'),
    },
    compute_region_disk_iam_policy(name, block): {
      local resource = blockType.resource('google_compute_region_disk_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    compute_region_instance_group(name, block): {
      local resource = blockType.resource('google_compute_region_instance_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instances: build.template(std.get(block, 'instances', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        size: build.template(std.get(block, 'size', null)),
      }),
      id: resource.field('id'),
      instances: resource.field('instances'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      size: resource.field('size'),
    },
    compute_region_instance_group_manager(name, block): {
      local resource = blockType.resource('google_compute_region_instance_group_manager', name),
      _: resource._(block, {
        all_instances_config: build.template(std.get(block, 'all_instances_config', null)),
        auto_healing_policies: build.template(std.get(block, 'auto_healing_policies', null)),
        base_instance_name: build.template(std.get(block, 'base_instance_name', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        distribution_policy_target_shape: build.template(std.get(block, 'distribution_policy_target_shape', null)),
        distribution_policy_zones: build.template(std.get(block, 'distribution_policy_zones', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_group: build.template(std.get(block, 'instance_group', null)),
        instance_lifecycle_policy: build.template(std.get(block, 'instance_lifecycle_policy', null)),
        list_managed_instances_results: build.template(std.get(block, 'list_managed_instances_results', null)),
        name: build.template(std.get(block, 'name', null)),
        named_port: build.template(std.get(block, 'named_port', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        stateful_disk: build.template(std.get(block, 'stateful_disk', null)),
        stateful_external_ip: build.template(std.get(block, 'stateful_external_ip', null)),
        stateful_internal_ip: build.template(std.get(block, 'stateful_internal_ip', null)),
        status: build.template(std.get(block, 'status', null)),
        target_pools: build.template(std.get(block, 'target_pools', null)),
        target_size: build.template(std.get(block, 'target_size', null)),
        update_policy: build.template(std.get(block, 'update_policy', null)),
        version: build.template(std.get(block, 'version', null)),
        wait_for_instances: build.template(std.get(block, 'wait_for_instances', null)),
        wait_for_instances_status: build.template(std.get(block, 'wait_for_instances_status', null)),
      }),
      all_instances_config: resource.field('all_instances_config'),
      auto_healing_policies: resource.field('auto_healing_policies'),
      base_instance_name: resource.field('base_instance_name'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      distribution_policy_target_shape: resource.field('distribution_policy_target_shape'),
      distribution_policy_zones: resource.field('distribution_policy_zones'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      instance_group: resource.field('instance_group'),
      instance_lifecycle_policy: resource.field('instance_lifecycle_policy'),
      list_managed_instances_results: resource.field('list_managed_instances_results'),
      name: resource.field('name'),
      named_port: resource.field('named_port'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      stateful_disk: resource.field('stateful_disk'),
      stateful_external_ip: resource.field('stateful_external_ip'),
      stateful_internal_ip: resource.field('stateful_internal_ip'),
      status: resource.field('status'),
      target_pools: resource.field('target_pools'),
      target_size: resource.field('target_size'),
      update_policy: resource.field('update_policy'),
      version: resource.field('version'),
      wait_for_instances: resource.field('wait_for_instances'),
      wait_for_instances_status: resource.field('wait_for_instances_status'),
    },
    compute_region_instance_template(name, block): {
      local resource = blockType.resource('google_compute_region_instance_template', name),
      _: resource._(block, {
        advanced_machine_features: build.template(std.get(block, 'advanced_machine_features', null)),
        can_ip_forward: build.template(std.get(block, 'can_ip_forward', null)),
        confidential_instance_config: build.template(std.get(block, 'confidential_instance_config', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        disk: build.template(std.get(block, 'disk', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        filter: build.template(std.get(block, 'filter', null)),
        guest_accelerator: build.template(std.get(block, 'guest_accelerator', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_description: build.template(std.get(block, 'instance_description', null)),
        key_revocation_action_type: build.template(std.get(block, 'key_revocation_action_type', null)),
        labels: build.template(std.get(block, 'labels', null)),
        machine_type: build.template(std.get(block, 'machine_type', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        metadata_fingerprint: build.template(std.get(block, 'metadata_fingerprint', null)),
        metadata_startup_script: build.template(std.get(block, 'metadata_startup_script', null)),
        min_cpu_platform: build.template(std.get(block, 'min_cpu_platform', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        network_interface: build.template(std.get(block, 'network_interface', null)),
        network_performance_config: build.template(std.get(block, 'network_performance_config', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        reservation_affinity: build.template(std.get(block, 'reservation_affinity', null)),
        resource_manager_tags: build.template(std.get(block, 'resource_manager_tags', null)),
        resource_policies: build.template(std.get(block, 'resource_policies', null)),
        scheduling: build.template(std.get(block, 'scheduling', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        shielded_instance_config: build.template(std.get(block, 'shielded_instance_config', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_fingerprint: build.template(std.get(block, 'tags_fingerprint', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      advanced_machine_features: resource.field('advanced_machine_features'),
      can_ip_forward: resource.field('can_ip_forward'),
      confidential_instance_config: resource.field('confidential_instance_config'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      disk: resource.field('disk'),
      effective_labels: resource.field('effective_labels'),
      filter: resource.field('filter'),
      guest_accelerator: resource.field('guest_accelerator'),
      id: resource.field('id'),
      instance_description: resource.field('instance_description'),
      key_revocation_action_type: resource.field('key_revocation_action_type'),
      labels: resource.field('labels'),
      machine_type: resource.field('machine_type'),
      metadata: resource.field('metadata'),
      metadata_fingerprint: resource.field('metadata_fingerprint'),
      metadata_startup_script: resource.field('metadata_startup_script'),
      min_cpu_platform: resource.field('min_cpu_platform'),
      most_recent: resource.field('most_recent'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      network_interface: resource.field('network_interface'),
      network_performance_config: resource.field('network_performance_config'),
      project: resource.field('project'),
      region: resource.field('region'),
      reservation_affinity: resource.field('reservation_affinity'),
      resource_manager_tags: resource.field('resource_manager_tags'),
      resource_policies: resource.field('resource_policies'),
      scheduling: resource.field('scheduling'),
      self_link: resource.field('self_link'),
      service_account: resource.field('service_account'),
      shielded_instance_config: resource.field('shielded_instance_config'),
      tags: resource.field('tags'),
      tags_fingerprint: resource.field('tags_fingerprint'),
      terraform_labels: resource.field('terraform_labels'),
    },
    compute_region_network_endpoint_group(name, block): {
      local resource = blockType.resource('google_compute_region_network_endpoint_group', name),
      _: resource._(block, {
        app_engine: build.template(std.get(block, 'app_engine', null)),
        cloud_function: build.template(std.get(block, 'cloud_function', null)),
        cloud_run: build.template(std.get(block, 'cloud_run', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        network: build.template(std.get(block, 'network', null)),
        network_endpoint_type: build.template(std.get(block, 'network_endpoint_type', null)),
        project: build.template(std.get(block, 'project', null)),
        psc_target_service: build.template(std.get(block, 'psc_target_service', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
      }),
      app_engine: resource.field('app_engine'),
      cloud_function: resource.field('cloud_function'),
      cloud_run: resource.field('cloud_run'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      network_endpoint_type: resource.field('network_endpoint_type'),
      project: resource.field('project'),
      psc_target_service: resource.field('psc_target_service'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      subnetwork: resource.field('subnetwork'),
    },
    compute_region_ssl_certificate(name, block): {
      local resource = blockType.resource('google_compute_region_ssl_certificate', name),
      _: resource._(block, {
        certificate: build.template(std.get(block, 'certificate', null)),
        certificate_id: build.template(std.get(block, 'certificate_id', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      certificate: resource.field('certificate'),
      certificate_id: resource.field('certificate_id'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      private_key: resource.field('private_key'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
    },
    compute_regions(name, block): {
      local resource = blockType.resource('google_compute_regions', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
        project: build.template(std.get(block, 'project', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      id: resource.field('id'),
      names: resource.field('names'),
      project: resource.field('project'),
      status: resource.field('status'),
    },
    compute_reservation(name, block): {
      local resource = blockType.resource('google_compute_reservation', name),
      _: resource._(block, {
        commitment: build.template(std.get(block, 'commitment', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        share_settings: build.template(std.get(block, 'share_settings', null)),
        specific_reservation: build.template(std.get(block, 'specific_reservation', null)),
        specific_reservation_required: build.template(std.get(block, 'specific_reservation_required', null)),
        status: build.template(std.get(block, 'status', null)),
        zone: build.template(block.zone),
      }),
      commitment: resource.field('commitment'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      share_settings: resource.field('share_settings'),
      specific_reservation: resource.field('specific_reservation'),
      specific_reservation_required: resource.field('specific_reservation_required'),
      status: resource.field('status'),
      zone: resource.field('zone'),
    },
    compute_resource_policy(name, block): {
      local resource = blockType.resource('google_compute_resource_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        disk_consistency_group_policy: build.template(std.get(block, 'disk_consistency_group_policy', null)),
        group_placement_policy: build.template(std.get(block, 'group_placement_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_schedule_policy: build.template(std.get(block, 'instance_schedule_policy', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        snapshot_schedule_policy: build.template(std.get(block, 'snapshot_schedule_policy', null)),
      }),
      description: resource.field('description'),
      disk_consistency_group_policy: resource.field('disk_consistency_group_policy'),
      group_placement_policy: resource.field('group_placement_policy'),
      id: resource.field('id'),
      instance_schedule_policy: resource.field('instance_schedule_policy'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      snapshot_schedule_policy: resource.field('snapshot_schedule_policy'),
    },
    compute_router(name, block): {
      local resource = blockType.resource('google_compute_router', name),
      _: resource._(block, {
        bgp: build.template(std.get(block, 'bgp', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        encrypted_interconnect_router: build.template(std.get(block, 'encrypted_interconnect_router', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      bgp: resource.field('bgp'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      encrypted_interconnect_router: resource.field('encrypted_interconnect_router'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
    },
    compute_router_nat(name, block): {
      local resource = blockType.resource('google_compute_router_nat', name),
      _: resource._(block, {
        auto_network_tier: build.template(std.get(block, 'auto_network_tier', null)),
        drain_nat_ips: build.template(std.get(block, 'drain_nat_ips', null)),
        enable_dynamic_port_allocation: build.template(std.get(block, 'enable_dynamic_port_allocation', null)),
        enable_endpoint_independent_mapping: build.template(std.get(block, 'enable_endpoint_independent_mapping', null)),
        endpoint_types: build.template(std.get(block, 'endpoint_types', null)),
        icmp_idle_timeout_sec: build.template(std.get(block, 'icmp_idle_timeout_sec', null)),
        id: build.template(std.get(block, 'id', null)),
        initial_nat_ips: build.template(std.get(block, 'initial_nat_ips', null)),
        log_config: build.template(std.get(block, 'log_config', null)),
        max_ports_per_vm: build.template(std.get(block, 'max_ports_per_vm', null)),
        min_ports_per_vm: build.template(std.get(block, 'min_ports_per_vm', null)),
        name: build.template(block.name),
        nat_ip_allocate_option: build.template(std.get(block, 'nat_ip_allocate_option', null)),
        nat_ips: build.template(std.get(block, 'nat_ips', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        router: build.template(block.router),
        rules: build.template(std.get(block, 'rules', null)),
        source_subnetwork_ip_ranges_to_nat: build.template(std.get(block, 'source_subnetwork_ip_ranges_to_nat', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        tcp_established_idle_timeout_sec: build.template(std.get(block, 'tcp_established_idle_timeout_sec', null)),
        tcp_time_wait_timeout_sec: build.template(std.get(block, 'tcp_time_wait_timeout_sec', null)),
        tcp_transitory_idle_timeout_sec: build.template(std.get(block, 'tcp_transitory_idle_timeout_sec', null)),
        udp_idle_timeout_sec: build.template(std.get(block, 'udp_idle_timeout_sec', null)),
      }),
      auto_network_tier: resource.field('auto_network_tier'),
      drain_nat_ips: resource.field('drain_nat_ips'),
      enable_dynamic_port_allocation: resource.field('enable_dynamic_port_allocation'),
      enable_endpoint_independent_mapping: resource.field('enable_endpoint_independent_mapping'),
      endpoint_types: resource.field('endpoint_types'),
      icmp_idle_timeout_sec: resource.field('icmp_idle_timeout_sec'),
      id: resource.field('id'),
      initial_nat_ips: resource.field('initial_nat_ips'),
      log_config: resource.field('log_config'),
      max_ports_per_vm: resource.field('max_ports_per_vm'),
      min_ports_per_vm: resource.field('min_ports_per_vm'),
      name: resource.field('name'),
      nat_ip_allocate_option: resource.field('nat_ip_allocate_option'),
      nat_ips: resource.field('nat_ips'),
      project: resource.field('project'),
      region: resource.field('region'),
      router: resource.field('router'),
      rules: resource.field('rules'),
      source_subnetwork_ip_ranges_to_nat: resource.field('source_subnetwork_ip_ranges_to_nat'),
      subnetwork: resource.field('subnetwork'),
      tcp_established_idle_timeout_sec: resource.field('tcp_established_idle_timeout_sec'),
      tcp_time_wait_timeout_sec: resource.field('tcp_time_wait_timeout_sec'),
      tcp_transitory_idle_timeout_sec: resource.field('tcp_transitory_idle_timeout_sec'),
      udp_idle_timeout_sec: resource.field('udp_idle_timeout_sec'),
    },
    compute_router_status(name, block): {
      local resource = blockType.resource('google_compute_router_status', name),
      _: resource._(block, {
        best_routes: build.template(std.get(block, 'best_routes', null)),
        best_routes_for_router: build.template(std.get(block, 'best_routes_for_router', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      best_routes: resource.field('best_routes'),
      best_routes_for_router: resource.field('best_routes_for_router'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    compute_security_policy(name, block): {
      local resource = blockType.resource('google_compute_security_policy', name),
      _: resource._(block, {
        adaptive_protection_config: build.template(std.get(block, 'adaptive_protection_config', null)),
        advanced_options_config: build.template(std.get(block, 'advanced_options_config', null)),
        description: build.template(std.get(block, 'description', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        recaptcha_options_config: build.template(std.get(block, 'recaptcha_options_config', null)),
        rule: build.template(std.get(block, 'rule', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      adaptive_protection_config: resource.field('adaptive_protection_config'),
      advanced_options_config: resource.field('advanced_options_config'),
      description: resource.field('description'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      recaptcha_options_config: resource.field('recaptcha_options_config'),
      rule: resource.field('rule'),
      self_link: resource.field('self_link'),
      type: resource.field('type'),
    },
    compute_snapshot(name, block): {
      local resource = blockType.resource('google_compute_snapshot', name),
      _: resource._(block, {
        chain_name: build.template(std.get(block, 'chain_name', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        disk_size_gb: build.template(std.get(block, 'disk_size_gb', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        labels: build.template(std.get(block, 'labels', null)),
        licenses: build.template(std.get(block, 'licenses', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        snapshot_encryption_key: build.template(std.get(block, 'snapshot_encryption_key', null)),
        snapshot_id: build.template(std.get(block, 'snapshot_id', null)),
        source_disk: build.template(std.get(block, 'source_disk', null)),
        source_disk_encryption_key: build.template(std.get(block, 'source_disk_encryption_key', null)),
        storage_bytes: build.template(std.get(block, 'storage_bytes', null)),
        storage_locations: build.template(std.get(block, 'storage_locations', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      chain_name: resource.field('chain_name'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      disk_size_gb: resource.field('disk_size_gb'),
      effective_labels: resource.field('effective_labels'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      label_fingerprint: resource.field('label_fingerprint'),
      labels: resource.field('labels'),
      licenses: resource.field('licenses'),
      most_recent: resource.field('most_recent'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
      snapshot_encryption_key: resource.field('snapshot_encryption_key'),
      snapshot_id: resource.field('snapshot_id'),
      source_disk: resource.field('source_disk'),
      source_disk_encryption_key: resource.field('source_disk_encryption_key'),
      storage_bytes: resource.field('storage_bytes'),
      storage_locations: resource.field('storage_locations'),
      terraform_labels: resource.field('terraform_labels'),
      zone: resource.field('zone'),
    },
    compute_snapshot_iam_policy(name, block): {
      local resource = blockType.resource('google_compute_snapshot_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    compute_ssl_certificate(name, block): {
      local resource = blockType.resource('google_compute_ssl_certificate', name),
      _: resource._(block, {
        certificate: build.template(std.get(block, 'certificate', null)),
        certificate_id: build.template(std.get(block, 'certificate_id', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      certificate: resource.field('certificate'),
      certificate_id: resource.field('certificate_id'),
      creation_timestamp: resource.field('creation_timestamp'),
      description: resource.field('description'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      private_key: resource.field('private_key'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
    },
    compute_ssl_policy(name, block): {
      local resource = blockType.resource('google_compute_ssl_policy', name),
      _: resource._(block, {
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        custom_features: build.template(std.get(block, 'custom_features', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled_features: build.template(std.get(block, 'enabled_features', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        min_tls_version: build.template(std.get(block, 'min_tls_version', null)),
        name: build.template(block.name),
        profile: build.template(std.get(block, 'profile', null)),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      creation_timestamp: resource.field('creation_timestamp'),
      custom_features: resource.field('custom_features'),
      description: resource.field('description'),
      enabled_features: resource.field('enabled_features'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      min_tls_version: resource.field('min_tls_version'),
      name: resource.field('name'),
      profile: resource.field('profile'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
    },
    compute_subnetwork(name, block): {
      local resource = blockType.resource('google_compute_subnetwork', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        gateway_address: build.template(std.get(block, 'gateway_address', null)),
        id: build.template(std.get(block, 'id', null)),
        internal_ipv6_prefix: build.template(std.get(block, 'internal_ipv6_prefix', null)),
        ip_cidr_range: build.template(std.get(block, 'ip_cidr_range', null)),
        name: build.template(std.get(block, 'name', null)),
        network: build.template(std.get(block, 'network', null)),
        private_ip_google_access: build.template(std.get(block, 'private_ip_google_access', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        secondary_ip_range: build.template(std.get(block, 'secondary_ip_range', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      description: resource.field('description'),
      gateway_address: resource.field('gateway_address'),
      id: resource.field('id'),
      internal_ipv6_prefix: resource.field('internal_ipv6_prefix'),
      ip_cidr_range: resource.field('ip_cidr_range'),
      name: resource.field('name'),
      network: resource.field('network'),
      private_ip_google_access: resource.field('private_ip_google_access'),
      project: resource.field('project'),
      region: resource.field('region'),
      secondary_ip_range: resource.field('secondary_ip_range'),
      self_link: resource.field('self_link'),
    },
    compute_subnetwork_iam_policy(name, block): {
      local resource = blockType.resource('google_compute_subnetwork_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        subnetwork: build.template(block.subnetwork),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
      subnetwork: resource.field('subnetwork'),
    },
    compute_subnetworks(name, block): {
      local resource = blockType.resource('google_compute_subnetworks', name),
      _: resource._(block, {
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        subnetworks: build.template(std.get(block, 'subnetworks', null)),
      }),
      filter: resource.field('filter'),
      id: resource.field('id'),
      project: resource.field('project'),
      region: resource.field('region'),
      subnetworks: resource.field('subnetworks'),
    },
    compute_vpn_gateway(name, block): {
      local resource = blockType.resource('google_compute_vpn_gateway', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
    },
    compute_zones(name, block): {
      local resource = blockType.resource('google_compute_zones', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      id: resource.field('id'),
      names: resource.field('names'),
      project: resource.field('project'),
      region: resource.field('region'),
      status: resource.field('status'),
    },
    container_analysis_note_iam_policy(name, block): {
      local resource = blockType.resource('google_container_analysis_note_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        note: build.template(block.note),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      note: resource.field('note'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    container_attached_install_manifest(name, block): {
      local resource = blockType.resource('google_container_attached_install_manifest', name),
      _: resource._(block, {
        cluster_id: build.template(block.cluster_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        manifest: build.template(std.get(block, 'manifest', null)),
        platform_version: build.template(block.platform_version),
        project: build.template(block.project),
      }),
      cluster_id: resource.field('cluster_id'),
      id: resource.field('id'),
      location: resource.field('location'),
      manifest: resource.field('manifest'),
      platform_version: resource.field('platform_version'),
      project: resource.field('project'),
    },
    container_attached_versions(name, block): {
      local resource = blockType.resource('google_container_attached_versions', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        project: build.template(block.project),
        valid_versions: build.template(std.get(block, 'valid_versions', null)),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      project: resource.field('project'),
      valid_versions: resource.field('valid_versions'),
    },
    container_aws_versions(name, block): {
      local resource = blockType.resource('google_container_aws_versions', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        project: build.template(std.get(block, 'project', null)),
        supported_regions: build.template(std.get(block, 'supported_regions', null)),
        valid_versions: build.template(std.get(block, 'valid_versions', null)),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      project: resource.field('project'),
      supported_regions: resource.field('supported_regions'),
      valid_versions: resource.field('valid_versions'),
    },
    container_azure_versions(name, block): {
      local resource = blockType.resource('google_container_azure_versions', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        project: build.template(std.get(block, 'project', null)),
        supported_regions: build.template(std.get(block, 'supported_regions', null)),
        valid_versions: build.template(std.get(block, 'valid_versions', null)),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      project: resource.field('project'),
      supported_regions: resource.field('supported_regions'),
      valid_versions: resource.field('valid_versions'),
    },
    container_cluster(name, block): {
      local resource = blockType.resource('google_container_cluster', name),
      _: resource._(block, {
        addons_config: build.template(std.get(block, 'addons_config', null)),
        allow_net_admin: build.template(std.get(block, 'allow_net_admin', null)),
        authenticator_groups_config: build.template(std.get(block, 'authenticator_groups_config', null)),
        binary_authorization: build.template(std.get(block, 'binary_authorization', null)),
        cluster_autoscaling: build.template(std.get(block, 'cluster_autoscaling', null)),
        cluster_ipv4_cidr: build.template(std.get(block, 'cluster_ipv4_cidr', null)),
        confidential_nodes: build.template(std.get(block, 'confidential_nodes', null)),
        control_plane_endpoints_config: build.template(std.get(block, 'control_plane_endpoints_config', null)),
        cost_management_config: build.template(std.get(block, 'cost_management_config', null)),
        database_encryption: build.template(std.get(block, 'database_encryption', null)),
        datapath_provider: build.template(std.get(block, 'datapath_provider', null)),
        default_max_pods_per_node: build.template(std.get(block, 'default_max_pods_per_node', null)),
        default_snat_status: build.template(std.get(block, 'default_snat_status', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        description: build.template(std.get(block, 'description', null)),
        dns_config: build.template(std.get(block, 'dns_config', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_autopilot: build.template(std.get(block, 'enable_autopilot', null)),
        enable_cilium_clusterwide_network_policy: build.template(std.get(block, 'enable_cilium_clusterwide_network_policy', null)),
        enable_intranode_visibility: build.template(std.get(block, 'enable_intranode_visibility', null)),
        enable_k8s_beta_apis: build.template(std.get(block, 'enable_k8s_beta_apis', null)),
        enable_kubernetes_alpha: build.template(std.get(block, 'enable_kubernetes_alpha', null)),
        enable_l4_ilb_subsetting: build.template(std.get(block, 'enable_l4_ilb_subsetting', null)),
        enable_legacy_abac: build.template(std.get(block, 'enable_legacy_abac', null)),
        enable_multi_networking: build.template(std.get(block, 'enable_multi_networking', null)),
        enable_shielded_nodes: build.template(std.get(block, 'enable_shielded_nodes', null)),
        enable_tpu: build.template(std.get(block, 'enable_tpu', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        fleet: build.template(std.get(block, 'fleet', null)),
        gateway_api_config: build.template(std.get(block, 'gateway_api_config', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_service_config: build.template(std.get(block, 'identity_service_config', null)),
        initial_node_count: build.template(std.get(block, 'initial_node_count', null)),
        ip_allocation_policy: build.template(std.get(block, 'ip_allocation_policy', null)),
        label_fingerprint: build.template(std.get(block, 'label_fingerprint', null)),
        location: build.template(std.get(block, 'location', null)),
        logging_config: build.template(std.get(block, 'logging_config', null)),
        logging_service: build.template(std.get(block, 'logging_service', null)),
        maintenance_policy: build.template(std.get(block, 'maintenance_policy', null)),
        master_auth: build.template(std.get(block, 'master_auth', null)),
        master_authorized_networks_config: build.template(std.get(block, 'master_authorized_networks_config', null)),
        master_version: build.template(std.get(block, 'master_version', null)),
        mesh_certificates: build.template(std.get(block, 'mesh_certificates', null)),
        min_master_version: build.template(std.get(block, 'min_master_version', null)),
        monitoring_config: build.template(std.get(block, 'monitoring_config', null)),
        monitoring_service: build.template(std.get(block, 'monitoring_service', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        network_policy: build.template(std.get(block, 'network_policy', null)),
        networking_mode: build.template(std.get(block, 'networking_mode', null)),
        node_config: build.template(std.get(block, 'node_config', null)),
        node_locations: build.template(std.get(block, 'node_locations', null)),
        node_pool: build.template(std.get(block, 'node_pool', null)),
        node_pool_auto_config: build.template(std.get(block, 'node_pool_auto_config', null)),
        node_pool_defaults: build.template(std.get(block, 'node_pool_defaults', null)),
        node_version: build.template(std.get(block, 'node_version', null)),
        notification_config: build.template(std.get(block, 'notification_config', null)),
        operation: build.template(std.get(block, 'operation', null)),
        private_cluster_config: build.template(std.get(block, 'private_cluster_config', null)),
        private_ipv6_google_access: build.template(std.get(block, 'private_ipv6_google_access', null)),
        project: build.template(std.get(block, 'project', null)),
        release_channel: build.template(std.get(block, 'release_channel', null)),
        remove_default_node_pool: build.template(std.get(block, 'remove_default_node_pool', null)),
        resource_labels: build.template(std.get(block, 'resource_labels', null)),
        resource_usage_export_config: build.template(std.get(block, 'resource_usage_export_config', null)),
        secret_manager_config: build.template(std.get(block, 'secret_manager_config', null)),
        security_posture_config: build.template(std.get(block, 'security_posture_config', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        service_external_ips_config: build.template(std.get(block, 'service_external_ips_config', null)),
        services_ipv4_cidr: build.template(std.get(block, 'services_ipv4_cidr', null)),
        subnetwork: build.template(std.get(block, 'subnetwork', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        tpu_ipv4_cidr_block: build.template(std.get(block, 'tpu_ipv4_cidr_block', null)),
        user_managed_keys_config: build.template(std.get(block, 'user_managed_keys_config', null)),
        vertical_pod_autoscaling: build.template(std.get(block, 'vertical_pod_autoscaling', null)),
        workload_identity_config: build.template(std.get(block, 'workload_identity_config', null)),
      }),
      addons_config: resource.field('addons_config'),
      allow_net_admin: resource.field('allow_net_admin'),
      authenticator_groups_config: resource.field('authenticator_groups_config'),
      binary_authorization: resource.field('binary_authorization'),
      cluster_autoscaling: resource.field('cluster_autoscaling'),
      cluster_ipv4_cidr: resource.field('cluster_ipv4_cidr'),
      confidential_nodes: resource.field('confidential_nodes'),
      control_plane_endpoints_config: resource.field('control_plane_endpoints_config'),
      cost_management_config: resource.field('cost_management_config'),
      database_encryption: resource.field('database_encryption'),
      datapath_provider: resource.field('datapath_provider'),
      default_max_pods_per_node: resource.field('default_max_pods_per_node'),
      default_snat_status: resource.field('default_snat_status'),
      deletion_protection: resource.field('deletion_protection'),
      description: resource.field('description'),
      dns_config: resource.field('dns_config'),
      effective_labels: resource.field('effective_labels'),
      enable_autopilot: resource.field('enable_autopilot'),
      enable_cilium_clusterwide_network_policy: resource.field('enable_cilium_clusterwide_network_policy'),
      enable_intranode_visibility: resource.field('enable_intranode_visibility'),
      enable_k8s_beta_apis: resource.field('enable_k8s_beta_apis'),
      enable_kubernetes_alpha: resource.field('enable_kubernetes_alpha'),
      enable_l4_ilb_subsetting: resource.field('enable_l4_ilb_subsetting'),
      enable_legacy_abac: resource.field('enable_legacy_abac'),
      enable_multi_networking: resource.field('enable_multi_networking'),
      enable_shielded_nodes: resource.field('enable_shielded_nodes'),
      enable_tpu: resource.field('enable_tpu'),
      endpoint: resource.field('endpoint'),
      fleet: resource.field('fleet'),
      gateway_api_config: resource.field('gateway_api_config'),
      id: resource.field('id'),
      identity_service_config: resource.field('identity_service_config'),
      initial_node_count: resource.field('initial_node_count'),
      ip_allocation_policy: resource.field('ip_allocation_policy'),
      label_fingerprint: resource.field('label_fingerprint'),
      location: resource.field('location'),
      logging_config: resource.field('logging_config'),
      logging_service: resource.field('logging_service'),
      maintenance_policy: resource.field('maintenance_policy'),
      master_auth: resource.field('master_auth'),
      master_authorized_networks_config: resource.field('master_authorized_networks_config'),
      master_version: resource.field('master_version'),
      mesh_certificates: resource.field('mesh_certificates'),
      min_master_version: resource.field('min_master_version'),
      monitoring_config: resource.field('monitoring_config'),
      monitoring_service: resource.field('monitoring_service'),
      name: resource.field('name'),
      network: resource.field('network'),
      network_policy: resource.field('network_policy'),
      networking_mode: resource.field('networking_mode'),
      node_config: resource.field('node_config'),
      node_locations: resource.field('node_locations'),
      node_pool: resource.field('node_pool'),
      node_pool_auto_config: resource.field('node_pool_auto_config'),
      node_pool_defaults: resource.field('node_pool_defaults'),
      node_version: resource.field('node_version'),
      notification_config: resource.field('notification_config'),
      operation: resource.field('operation'),
      private_cluster_config: resource.field('private_cluster_config'),
      private_ipv6_google_access: resource.field('private_ipv6_google_access'),
      project: resource.field('project'),
      release_channel: resource.field('release_channel'),
      remove_default_node_pool: resource.field('remove_default_node_pool'),
      resource_labels: resource.field('resource_labels'),
      resource_usage_export_config: resource.field('resource_usage_export_config'),
      secret_manager_config: resource.field('secret_manager_config'),
      security_posture_config: resource.field('security_posture_config'),
      self_link: resource.field('self_link'),
      service_external_ips_config: resource.field('service_external_ips_config'),
      services_ipv4_cidr: resource.field('services_ipv4_cidr'),
      subnetwork: resource.field('subnetwork'),
      terraform_labels: resource.field('terraform_labels'),
      tpu_ipv4_cidr_block: resource.field('tpu_ipv4_cidr_block'),
      user_managed_keys_config: resource.field('user_managed_keys_config'),
      vertical_pod_autoscaling: resource.field('vertical_pod_autoscaling'),
      workload_identity_config: resource.field('workload_identity_config'),
    },
    container_engine_versions(name, block): {
      local resource = blockType.resource('google_container_engine_versions', name),
      _: resource._(block, {
        default_cluster_version: build.template(std.get(block, 'default_cluster_version', null)),
        id: build.template(std.get(block, 'id', null)),
        latest_master_version: build.template(std.get(block, 'latest_master_version', null)),
        latest_node_version: build.template(std.get(block, 'latest_node_version', null)),
        location: build.template(std.get(block, 'location', null)),
        project: build.template(std.get(block, 'project', null)),
        release_channel_default_version: build.template(std.get(block, 'release_channel_default_version', null)),
        release_channel_latest_version: build.template(std.get(block, 'release_channel_latest_version', null)),
        valid_master_versions: build.template(std.get(block, 'valid_master_versions', null)),
        valid_node_versions: build.template(std.get(block, 'valid_node_versions', null)),
        version_prefix: build.template(std.get(block, 'version_prefix', null)),
      }),
      default_cluster_version: resource.field('default_cluster_version'),
      id: resource.field('id'),
      latest_master_version: resource.field('latest_master_version'),
      latest_node_version: resource.field('latest_node_version'),
      location: resource.field('location'),
      project: resource.field('project'),
      release_channel_default_version: resource.field('release_channel_default_version'),
      release_channel_latest_version: resource.field('release_channel_latest_version'),
      valid_master_versions: resource.field('valid_master_versions'),
      valid_node_versions: resource.field('valid_node_versions'),
      version_prefix: resource.field('version_prefix'),
    },
    container_registry_image(name, block): {
      local resource = blockType.resource('google_container_registry_image', name),
      _: resource._(block, {
        digest: build.template(std.get(block, 'digest', null)),
        id: build.template(std.get(block, 'id', null)),
        image_url: build.template(std.get(block, 'image_url', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        tag: build.template(std.get(block, 'tag', null)),
      }),
      digest: resource.field('digest'),
      id: resource.field('id'),
      image_url: resource.field('image_url'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      tag: resource.field('tag'),
    },
    container_registry_repository(name, block): {
      local resource = blockType.resource('google_container_registry_repository', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        repository_url: build.template(std.get(block, 'repository_url', null)),
      }),
      id: resource.field('id'),
      project: resource.field('project'),
      region: resource.field('region'),
      repository_url: resource.field('repository_url'),
    },
    data_catalog_entry_group_iam_policy(name, block): {
      local resource = blockType.resource('google_data_catalog_entry_group_iam_policy', name),
      _: resource._(block, {
        entry_group: build.template(block.entry_group),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      entry_group: resource.field('entry_group'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    data_catalog_policy_tag_iam_policy(name, block): {
      local resource = blockType.resource('google_data_catalog_policy_tag_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        policy_tag: build.template(block.policy_tag),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      policy_tag: resource.field('policy_tag'),
    },
    data_catalog_tag_template_iam_policy(name, block): {
      local resource = blockType.resource('google_data_catalog_tag_template_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        tag_template: build.template(block.tag_template),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
      tag_template: resource.field('tag_template'),
    },
    data_catalog_taxonomy_iam_policy(name, block): {
      local resource = blockType.resource('google_data_catalog_taxonomy_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        taxonomy: build.template(block.taxonomy),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
      taxonomy: resource.field('taxonomy'),
    },
    data_fusion_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_data_fusion_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    dataplex_aspect_type_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_aspect_type_iam_policy', name),
      _: resource._(block, {
        aspect_type_id: build.template(block.aspect_type_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      aspect_type_id: resource.field('aspect_type_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataplex_asset_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_asset_iam_policy', name),
      _: resource._(block, {
        asset: build.template(block.asset),
        dataplex_zone: build.template(block.dataplex_zone),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      asset: resource.field('asset'),
      dataplex_zone: resource.field('dataplex_zone'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataplex_datascan_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_datascan_iam_policy', name),
      _: resource._(block, {
        data_scan_id: build.template(block.data_scan_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      data_scan_id: resource.field('data_scan_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataplex_entry_group_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_entry_group_iam_policy', name),
      _: resource._(block, {
        entry_group_id: build.template(block.entry_group_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      entry_group_id: resource.field('entry_group_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataplex_entry_type_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_entry_type_iam_policy', name),
      _: resource._(block, {
        entry_type_id: build.template(block.entry_type_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      entry_type_id: resource.field('entry_type_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataplex_lake_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_lake_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataplex_task_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_task_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        task_id: build.template(block.task_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      task_id: resource.field('task_id'),
    },
    dataplex_zone_iam_policy(name, block): {
      local resource = blockType.resource('google_dataplex_zone_iam_policy', name),
      _: resource._(block, {
        dataplex_zone: build.template(block.dataplex_zone),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        lake: build.template(block.lake),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      dataplex_zone: resource.field('dataplex_zone'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      lake: resource.field('lake'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataproc_autoscaling_policy_iam_policy(name, block): {
      local resource = blockType.resource('google_dataproc_autoscaling_policy_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        policy_id: build.template(block.policy_id),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      policy_id: resource.field('policy_id'),
      project: resource.field('project'),
    },
    dataproc_cluster_iam_policy(name, block): {
      local resource = blockType.resource('google_dataproc_cluster_iam_policy', name),
      _: resource._(block, {
        cluster: build.template(block.cluster),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      cluster: resource.field('cluster'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    dataproc_job_iam_policy(name, block): {
      local resource = blockType.resource('google_dataproc_job_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        job_id: build.template(block.job_id),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      job_id: resource.field('job_id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    dataproc_metastore_federation_iam_policy(name, block): {
      local resource = blockType.resource('google_dataproc_metastore_federation_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        federation_id: build.template(block.federation_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      federation_id: resource.field('federation_id'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dataproc_metastore_service(name, block): {
      local resource = blockType.resource('google_dataproc_metastore_service', name),
      _: resource._(block, {
        artifact_gcs_uri: build.template(std.get(block, 'artifact_gcs_uri', null)),
        database_type: build.template(std.get(block, 'database_type', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        encryption_config: build.template(std.get(block, 'encryption_config', null)),
        endpoint_uri: build.template(std.get(block, 'endpoint_uri', null)),
        hive_metastore_config: build.template(std.get(block, 'hive_metastore_config', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        maintenance_window: build.template(std.get(block, 'maintenance_window', null)),
        metadata_integration: build.template(std.get(block, 'metadata_integration', null)),
        name: build.template(std.get(block, 'name', null)),
        network: build.template(std.get(block, 'network', null)),
        network_config: build.template(std.get(block, 'network_config', null)),
        port: build.template(std.get(block, 'port', null)),
        project: build.template(std.get(block, 'project', null)),
        release_channel: build.template(std.get(block, 'release_channel', null)),
        scaling_config: build.template(std.get(block, 'scaling_config', null)),
        scheduled_backup: build.template(std.get(block, 'scheduled_backup', null)),
        service_id: build.template(block.service_id),
        state: build.template(std.get(block, 'state', null)),
        state_message: build.template(std.get(block, 'state_message', null)),
        telemetry_config: build.template(std.get(block, 'telemetry_config', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        tier: build.template(std.get(block, 'tier', null)),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      artifact_gcs_uri: resource.field('artifact_gcs_uri'),
      database_type: resource.field('database_type'),
      deletion_protection: resource.field('deletion_protection'),
      effective_labels: resource.field('effective_labels'),
      encryption_config: resource.field('encryption_config'),
      endpoint_uri: resource.field('endpoint_uri'),
      hive_metastore_config: resource.field('hive_metastore_config'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      maintenance_window: resource.field('maintenance_window'),
      metadata_integration: resource.field('metadata_integration'),
      name: resource.field('name'),
      network: resource.field('network'),
      network_config: resource.field('network_config'),
      port: resource.field('port'),
      project: resource.field('project'),
      release_channel: resource.field('release_channel'),
      scaling_config: resource.field('scaling_config'),
      scheduled_backup: resource.field('scheduled_backup'),
      service_id: resource.field('service_id'),
      state: resource.field('state'),
      state_message: resource.field('state_message'),
      telemetry_config: resource.field('telemetry_config'),
      terraform_labels: resource.field('terraform_labels'),
      tier: resource.field('tier'),
      uid: resource.field('uid'),
    },
    dataproc_metastore_service_iam_policy(name, block): {
      local resource = blockType.resource('google_dataproc_metastore_service_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        service_id: build.template(block.service_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      service_id: resource.field('service_id'),
    },
    datastream_static_ips(name, block): {
      local resource = blockType.resource('google_datastream_static_ips', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        project: build.template(std.get(block, 'project', null)),
        static_ips: build.template(std.get(block, 'static_ips', null)),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      project: resource.field('project'),
      static_ips: resource.field('static_ips'),
    },
    dns_keys(name, block): {
      local resource = blockType.resource('google_dns_keys', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_signing_keys: build.template(std.get(block, 'key_signing_keys', null)),
        managed_zone: build.template(block.managed_zone),
        project: build.template(std.get(block, 'project', null)),
        zone_signing_keys: build.template(std.get(block, 'zone_signing_keys', null)),
      }),
      id: resource.field('id'),
      key_signing_keys: resource.field('key_signing_keys'),
      managed_zone: resource.field('managed_zone'),
      project: resource.field('project'),
      zone_signing_keys: resource.field('zone_signing_keys'),
    },
    dns_managed_zone(name, block): {
      local resource = blockType.resource('google_dns_managed_zone', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_zone_id: build.template(std.get(block, 'managed_zone_id', null)),
        name: build.template(block.name),
        name_servers: build.template(std.get(block, 'name_servers', null)),
        project: build.template(std.get(block, 'project', null)),
        visibility: build.template(std.get(block, 'visibility', null)),
      }),
      description: resource.field('description'),
      dns_name: resource.field('dns_name'),
      id: resource.field('id'),
      managed_zone_id: resource.field('managed_zone_id'),
      name: resource.field('name'),
      name_servers: resource.field('name_servers'),
      project: resource.field('project'),
      visibility: resource.field('visibility'),
    },
    dns_managed_zone_iam_policy(name, block): {
      local resource = blockType.resource('google_dns_managed_zone_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_zone: build.template(block.managed_zone),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      managed_zone: resource.field('managed_zone'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    dns_managed_zones(name, block): {
      local resource = blockType.resource('google_dns_managed_zones', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        managed_zones: build.template(std.get(block, 'managed_zones', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      id: resource.field('id'),
      managed_zones: resource.field('managed_zones'),
      project: resource.field('project'),
    },
    dns_record_set(name, block): {
      local resource = blockType.resource('google_dns_record_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        managed_zone: build.template(block.managed_zone),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        rrdatas: build.template(std.get(block, 'rrdatas', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        type: build.template(block.type),
      }),
      id: resource.field('id'),
      managed_zone: resource.field('managed_zone'),
      name: resource.field('name'),
      project: resource.field('project'),
      rrdatas: resource.field('rrdatas'),
      ttl: resource.field('ttl'),
      type: resource.field('type'),
    },
    endpoints_service_consumers_iam_policy(name, block): {
      local resource = blockType.resource('google_endpoints_service_consumers_iam_policy', name),
      _: resource._(block, {
        consumer_project: build.template(block.consumer_project),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        service_name: build.template(block.service_name),
      }),
      consumer_project: resource.field('consumer_project'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      service_name: resource.field('service_name'),
    },
    endpoints_service_iam_policy(name, block): {
      local resource = blockType.resource('google_endpoints_service_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        service_name: build.template(block.service_name),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      service_name: resource.field('service_name'),
    },
    filestore_instance(name, block): {
      local resource = blockType.resource('google_filestore_instance', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        deletion_protection_enabled: build.template(std.get(block, 'deletion_protection_enabled', null)),
        deletion_protection_reason: build.template(std.get(block, 'deletion_protection_reason', null)),
        description: build.template(std.get(block, 'description', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        file_shares: build.template(std.get(block, 'file_shares', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        networks: build.template(std.get(block, 'networks', null)),
        performance_config: build.template(std.get(block, 'performance_config', null)),
        project: build.template(std.get(block, 'project', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        tier: build.template(std.get(block, 'tier', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      create_time: resource.field('create_time'),
      deletion_protection_enabled: resource.field('deletion_protection_enabled'),
      deletion_protection_reason: resource.field('deletion_protection_reason'),
      description: resource.field('description'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      file_shares: resource.field('file_shares'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      networks: resource.field('networks'),
      performance_config: resource.field('performance_config'),
      project: resource.field('project'),
      protocol: resource.field('protocol'),
      terraform_labels: resource.field('terraform_labels'),
      tier: resource.field('tier'),
      zone: resource.field('zone'),
    },
    folder(name, block): {
      local resource = blockType.resource('google_folder', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        folder: build.template(block.folder),
        folder_id: build.template(std.get(block, 'folder_id', null)),
        id: build.template(std.get(block, 'id', null)),
        lifecycle_state: build.template(std.get(block, 'lifecycle_state', null)),
        lookup_organization: build.template(std.get(block, 'lookup_organization', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(std.get(block, 'organization', null)),
        parent: build.template(std.get(block, 'parent', null)),
      }),
      create_time: resource.field('create_time'),
      deletion_protection: resource.field('deletion_protection'),
      display_name: resource.field('display_name'),
      folder: resource.field('folder'),
      folder_id: resource.field('folder_id'),
      id: resource.field('id'),
      lifecycle_state: resource.field('lifecycle_state'),
      lookup_organization: resource.field('lookup_organization'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      parent: resource.field('parent'),
    },
    folder_iam_policy(name, block): {
      local resource = blockType.resource('google_folder_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      etag: resource.field('etag'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    folder_organization_policy(name, block): {
      local resource = blockType.resource('google_folder_organization_policy', name),
      _: resource._(block, {
        boolean_policy: build.template(std.get(block, 'boolean_policy', null)),
        constraint: build.template(block.constraint),
        etag: build.template(std.get(block, 'etag', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        list_policy: build.template(std.get(block, 'list_policy', null)),
        restore_policy: build.template(std.get(block, 'restore_policy', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      boolean_policy: resource.field('boolean_policy'),
      constraint: resource.field('constraint'),
      etag: resource.field('etag'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      list_policy: resource.field('list_policy'),
      restore_policy: resource.field('restore_policy'),
      update_time: resource.field('update_time'),
      version: resource.field('version'),
    },
    folders(name, block): {
      local resource = blockType.resource('google_folders', name),
      _: resource._(block, {
        folders: build.template(std.get(block, 'folders', null)),
        id: build.template(std.get(block, 'id', null)),
        parent_id: build.template(block.parent_id),
      }),
      folders: resource.field('folders'),
      id: resource.field('id'),
      parent_id: resource.field('parent_id'),
    },
    gke_backup_backup_plan_iam_policy(name, block): {
      local resource = blockType.resource('google_gke_backup_backup_plan_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    gke_backup_restore_plan_iam_policy(name, block): {
      local resource = blockType.resource('google_gke_backup_restore_plan_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    gke_hub_feature_iam_policy(name, block): {
      local resource = blockType.resource('google_gke_hub_feature_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    gke_hub_membership_binding(name, block): {
      local resource = blockType.resource('google_gke_hub_membership_binding', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        delete_time: build.template(std.get(block, 'delete_time', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        membership_binding_id: build.template(block.membership_binding_id),
        membership_id: build.template(block.membership_id),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        scope: build.template(std.get(block, 'scope', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      delete_time: resource.field('delete_time'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      membership_binding_id: resource.field('membership_binding_id'),
      membership_id: resource.field('membership_id'),
      name: resource.field('name'),
      project: resource.field('project'),
      scope: resource.field('scope'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    gke_hub_membership_iam_policy(name, block): {
      local resource = blockType.resource('google_gke_hub_membership_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        membership_id: build.template(block.membership_id),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      membership_id: resource.field('membership_id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    gke_hub_scope_iam_policy(name, block): {
      local resource = blockType.resource('google_gke_hub_scope_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        scope_id: build.template(block.scope_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      scope_id: resource.field('scope_id'),
    },
    healthcare_consent_store_iam_policy(name, block): {
      local resource = blockType.resource('google_healthcare_consent_store_iam_policy', name),
      _: resource._(block, {
        consent_store_id: build.template(block.consent_store_id),
        dataset: build.template(block.dataset),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      consent_store_id: resource.field('consent_store_id'),
      dataset: resource.field('dataset'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    healthcare_dataset_iam_policy(name, block): {
      local resource = blockType.resource('google_healthcare_dataset_iam_policy', name),
      _: resource._(block, {
        dataset_id: build.template(block.dataset_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      dataset_id: resource.field('dataset_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    healthcare_dicom_store_iam_policy(name, block): {
      local resource = blockType.resource('google_healthcare_dicom_store_iam_policy', name),
      _: resource._(block, {
        dicom_store_id: build.template(block.dicom_store_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      dicom_store_id: resource.field('dicom_store_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    healthcare_fhir_store_iam_policy(name, block): {
      local resource = blockType.resource('google_healthcare_fhir_store_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        fhir_store_id: build.template(block.fhir_store_id),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      etag: resource.field('etag'),
      fhir_store_id: resource.field('fhir_store_id'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    healthcare_hl7_v2_store_iam_policy(name, block): {
      local resource = blockType.resource('google_healthcare_hl7_v2_store_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        hl7_v2_store_id: build.template(block.hl7_v2_store_id),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      etag: resource.field('etag'),
      hl7_v2_store_id: resource.field('hl7_v2_store_id'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    iam_policy(name, block): {
      local resource = blockType.resource('google_iam_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    iam_role(name, block): {
      local resource = blockType.resource('google_iam_role', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        included_permissions: build.template(std.get(block, 'included_permissions', null)),
        name: build.template(block.name),
        stage: build.template(std.get(block, 'stage', null)),
        title: build.template(std.get(block, 'title', null)),
      }),
      id: resource.field('id'),
      included_permissions: resource.field('included_permissions'),
      name: resource.field('name'),
      stage: resource.field('stage'),
      title: resource.field('title'),
    },
    iam_testable_permissions(name, block): {
      local resource = blockType.resource('google_iam_testable_permissions', name),
      _: resource._(block, {
        custom_support_level: build.template(std.get(block, 'custom_support_level', null)),
        full_resource_name: build.template(block.full_resource_name),
        id: build.template(std.get(block, 'id', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
        stages: build.template(std.get(block, 'stages', null)),
      }),
      custom_support_level: resource.field('custom_support_level'),
      full_resource_name: resource.field('full_resource_name'),
      id: resource.field('id'),
      permissions: resource.field('permissions'),
      stages: resource.field('stages'),
    },
    iap_app_engine_service_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_app_engine_service_iam_policy', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        service: build.template(block.service),
      }),
      app_id: resource.field('app_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      service: resource.field('service'),
    },
    iap_app_engine_version_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_app_engine_version_iam_policy', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        service: build.template(block.service),
        version_id: build.template(block.version_id),
      }),
      app_id: resource.field('app_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      service: resource.field('service'),
      version_id: resource.field('version_id'),
    },
    iap_client(name, block): {
      local resource = blockType.resource('google_iap_client', name),
      _: resource._(block, {
        brand: build.template(block.brand),
        client_id: build.template(block.client_id),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        secret: build.template(std.get(block, 'secret', null)),
      }),
      brand: resource.field('brand'),
      client_id: resource.field('client_id'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      secret: resource.field('secret'),
    },
    iap_tunnel_dest_group_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_tunnel_dest_group_iam_policy', name),
      _: resource._(block, {
        dest_group: build.template(block.dest_group),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      dest_group: resource.field('dest_group'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
    },
    iap_tunnel_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_tunnel_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    iap_tunnel_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_tunnel_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      zone: resource.field('zone'),
    },
    iap_web_backend_service_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_web_backend_service_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        web_backend_service: build.template(block.web_backend_service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      web_backend_service: resource.field('web_backend_service'),
    },
    iap_web_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_web_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    iap_web_region_backend_service_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_web_region_backend_service_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        web_region_backend_service: build.template(block.web_region_backend_service),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      region: resource.field('region'),
      web_region_backend_service: resource.field('web_region_backend_service'),
    },
    iap_web_type_app_engine_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_web_type_app_engine_iam_policy', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      app_id: resource.field('app_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    iap_web_type_compute_iam_policy(name, block): {
      local resource = blockType.resource('google_iap_web_type_compute_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    kms_crypto_key(name, block): {
      local resource = blockType.resource('google_kms_crypto_key', name),
      _: resource._(block, {
        crypto_key_backend: build.template(std.get(block, 'crypto_key_backend', null)),
        destroy_scheduled_duration: build.template(std.get(block, 'destroy_scheduled_duration', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        import_only: build.template(std.get(block, 'import_only', null)),
        key_ring: build.template(block.key_ring),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        primary: build.template(std.get(block, 'primary', null)),
        purpose: build.template(std.get(block, 'purpose', null)),
        rotation_period: build.template(std.get(block, 'rotation_period', null)),
        skip_initial_version_creation: build.template(std.get(block, 'skip_initial_version_creation', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        version_template: build.template(std.get(block, 'version_template', null)),
      }),
      crypto_key_backend: resource.field('crypto_key_backend'),
      destroy_scheduled_duration: resource.field('destroy_scheduled_duration'),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      import_only: resource.field('import_only'),
      key_ring: resource.field('key_ring'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      primary: resource.field('primary'),
      purpose: resource.field('purpose'),
      rotation_period: resource.field('rotation_period'),
      skip_initial_version_creation: resource.field('skip_initial_version_creation'),
      terraform_labels: resource.field('terraform_labels'),
      version_template: resource.field('version_template'),
    },
    kms_crypto_key_iam_policy(name, block): {
      local resource = blockType.resource('google_kms_crypto_key_iam_policy', name),
      _: resource._(block, {
        crypto_key_id: build.template(block.crypto_key_id),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      crypto_key_id: resource.field('crypto_key_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    kms_crypto_key_latest_version(name, block): {
      local resource = blockType.resource('google_kms_crypto_key_latest_version', name),
      _: resource._(block, {
        algorithm: build.template(std.get(block, 'algorithm', null)),
        crypto_key: build.template(block.crypto_key),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        protection_level: build.template(std.get(block, 'protection_level', null)),
        public_key: build.template(std.get(block, 'public_key', null)),
        state: build.template(std.get(block, 'state', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      algorithm: resource.field('algorithm'),
      crypto_key: resource.field('crypto_key'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      name: resource.field('name'),
      protection_level: resource.field('protection_level'),
      public_key: resource.field('public_key'),
      state: resource.field('state'),
      version: resource.field('version'),
    },
    kms_crypto_key_version(name, block): {
      local resource = blockType.resource('google_kms_crypto_key_version', name),
      _: resource._(block, {
        algorithm: build.template(std.get(block, 'algorithm', null)),
        crypto_key: build.template(block.crypto_key),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        protection_level: build.template(std.get(block, 'protection_level', null)),
        public_key: build.template(std.get(block, 'public_key', null)),
        state: build.template(std.get(block, 'state', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      algorithm: resource.field('algorithm'),
      crypto_key: resource.field('crypto_key'),
      id: resource.field('id'),
      name: resource.field('name'),
      protection_level: resource.field('protection_level'),
      public_key: resource.field('public_key'),
      state: resource.field('state'),
      version: resource.field('version'),
    },
    kms_crypto_key_versions(name, block): {
      local resource = blockType.resource('google_kms_crypto_key_versions', name),
      _: resource._(block, {
        crypto_key: build.template(block.crypto_key),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        public_key: build.template(std.get(block, 'public_key', null)),
        versions: build.template(std.get(block, 'versions', null)),
      }),
      crypto_key: resource.field('crypto_key'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      public_key: resource.field('public_key'),
      versions: resource.field('versions'),
    },
    kms_crypto_keys(name, block): {
      local resource = blockType.resource('google_kms_crypto_keys', name),
      _: resource._(block, {
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        key_ring: build.template(block.key_ring),
        keys: build.template(std.get(block, 'keys', null)),
      }),
      filter: resource.field('filter'),
      id: resource.field('id'),
      key_ring: resource.field('key_ring'),
      keys: resource.field('keys'),
    },
    kms_ekm_connection_iam_policy(name, block): {
      local resource = blockType.resource('google_kms_ekm_connection_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    kms_key_ring(name, block): {
      local resource = blockType.resource('google_kms_key_ring', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
      }),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
    },
    kms_key_ring_iam_policy(name, block): {
      local resource = blockType.resource('google_kms_key_ring_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key_ring_id: build.template(block.key_ring_id),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      key_ring_id: resource.field('key_ring_id'),
      policy_data: resource.field('policy_data'),
    },
    kms_key_rings(name, block): {
      local resource = blockType.resource('google_kms_key_rings', name),
      _: resource._(block, {
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        key_rings: build.template(std.get(block, 'key_rings', null)),
        location: build.template(block.location),
        project: build.template(std.get(block, 'project', null)),
      }),
      filter: resource.field('filter'),
      id: resource.field('id'),
      key_rings: resource.field('key_rings'),
      location: resource.field('location'),
      project: resource.field('project'),
    },
    kms_secret(name, block): {
      local resource = blockType.resource('google_kms_secret', name),
      _: resource._(block, {
        additional_authenticated_data: build.template(std.get(block, 'additional_authenticated_data', null)),
        ciphertext: build.template(block.ciphertext),
        crypto_key: build.template(block.crypto_key),
        id: build.template(std.get(block, 'id', null)),
        plaintext: build.template(std.get(block, 'plaintext', null)),
      }),
      additional_authenticated_data: resource.field('additional_authenticated_data'),
      ciphertext: resource.field('ciphertext'),
      crypto_key: resource.field('crypto_key'),
      id: resource.field('id'),
      plaintext: resource.field('plaintext'),
    },
    kms_secret_ciphertext(name, block): {
      local resource = blockType.resource('google_kms_secret_ciphertext', name),
      _: resource._(block, {
        ciphertext: build.template(std.get(block, 'ciphertext', null)),
        crypto_key: build.template(block.crypto_key),
        id: build.template(std.get(block, 'id', null)),
        plaintext: build.template(block.plaintext),
      }),
      ciphertext: resource.field('ciphertext'),
      crypto_key: resource.field('crypto_key'),
      id: resource.field('id'),
      plaintext: resource.field('plaintext'),
    },
    logging_folder_settings(name, block): {
      local resource = blockType.resource('google_logging_folder_settings', name),
      _: resource._(block, {
        disable_default_sink: build.template(std.get(block, 'disable_default_sink', null)),
        folder: build.template(block.folder),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        kms_service_account_id: build.template(std.get(block, 'kms_service_account_id', null)),
        logging_service_account_id: build.template(std.get(block, 'logging_service_account_id', null)),
        name: build.template(std.get(block, 'name', null)),
        storage_location: build.template(std.get(block, 'storage_location', null)),
      }),
      disable_default_sink: resource.field('disable_default_sink'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      kms_service_account_id: resource.field('kms_service_account_id'),
      logging_service_account_id: resource.field('logging_service_account_id'),
      name: resource.field('name'),
      storage_location: resource.field('storage_location'),
    },
    logging_log_view_iam_policy(name, block): {
      local resource = blockType.resource('google_logging_log_view_iam_policy', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        parent: build.template(block.parent),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      bucket: resource.field('bucket'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      policy_data: resource.field('policy_data'),
    },
    logging_organization_settings(name, block): {
      local resource = blockType.resource('google_logging_organization_settings', name),
      _: resource._(block, {
        disable_default_sink: build.template(std.get(block, 'disable_default_sink', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        kms_service_account_id: build.template(std.get(block, 'kms_service_account_id', null)),
        logging_service_account_id: build.template(std.get(block, 'logging_service_account_id', null)),
        name: build.template(std.get(block, 'name', null)),
        organization: build.template(block.organization),
        storage_location: build.template(std.get(block, 'storage_location', null)),
      }),
      disable_default_sink: resource.field('disable_default_sink'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      kms_service_account_id: resource.field('kms_service_account_id'),
      logging_service_account_id: resource.field('logging_service_account_id'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      storage_location: resource.field('storage_location'),
    },
    logging_project_cmek_settings(name, block): {
      local resource = blockType.resource('google_logging_project_cmek_settings', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        kms_key_version_name: build.template(std.get(block, 'kms_key_version_name', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(block.project),
        service_account_id: build.template(std.get(block, 'service_account_id', null)),
      }),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      kms_key_version_name: resource.field('kms_key_version_name'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_account_id: resource.field('service_account_id'),
    },
    logging_project_settings(name, block): {
      local resource = blockType.resource('google_logging_project_settings', name),
      _: resource._(block, {
        disable_default_sink: build.template(std.get(block, 'disable_default_sink', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        kms_service_account_id: build.template(std.get(block, 'kms_service_account_id', null)),
        logging_service_account_id: build.template(std.get(block, 'logging_service_account_id', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(block.project),
        storage_location: build.template(std.get(block, 'storage_location', null)),
      }),
      disable_default_sink: resource.field('disable_default_sink'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      kms_service_account_id: resource.field('kms_service_account_id'),
      logging_service_account_id: resource.field('logging_service_account_id'),
      name: resource.field('name'),
      project: resource.field('project'),
      storage_location: resource.field('storage_location'),
    },
    logging_sink(name, block): {
      local resource = blockType.resource('google_logging_sink', name),
      _: resource._(block, {
        bigquery_options: build.template(std.get(block, 'bigquery_options', null)),
        description: build.template(std.get(block, 'description', null)),
        destination: build.template(std.get(block, 'destination', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        exclusions: build.template(std.get(block, 'exclusions', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(block.id),
        name: build.template(std.get(block, 'name', null)),
        writer_identity: build.template(std.get(block, 'writer_identity', null)),
      }),
      bigquery_options: resource.field('bigquery_options'),
      description: resource.field('description'),
      destination: resource.field('destination'),
      disabled: resource.field('disabled'),
      exclusions: resource.field('exclusions'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      name: resource.field('name'),
      writer_identity: resource.field('writer_identity'),
    },
    monitoring_app_engine_service(name, block): {
      local resource = blockType.resource('google_monitoring_app_engine_service', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        module_id: build.template(block.module_id),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        service_id: build.template(std.get(block, 'service_id', null)),
        telemetry: build.template(std.get(block, 'telemetry', null)),
        user_labels: build.template(std.get(block, 'user_labels', null)),
      }),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      module_id: resource.field('module_id'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_id: resource.field('service_id'),
      telemetry: resource.field('telemetry'),
      user_labels: resource.field('user_labels'),
    },
    monitoring_cluster_istio_service(name, block): {
      local resource = blockType.resource('google_monitoring_cluster_istio_service', name),
      _: resource._(block, {
        cluster_name: build.template(block.cluster_name),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        service_id: build.template(std.get(block, 'service_id', null)),
        service_name: build.template(block.service_name),
        service_namespace: build.template(block.service_namespace),
        telemetry: build.template(std.get(block, 'telemetry', null)),
        user_labels: build.template(std.get(block, 'user_labels', null)),
      }),
      cluster_name: resource.field('cluster_name'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_id: resource.field('service_id'),
      service_name: resource.field('service_name'),
      service_namespace: resource.field('service_namespace'),
      telemetry: resource.field('telemetry'),
      user_labels: resource.field('user_labels'),
    },
    monitoring_istio_canonical_service(name, block): {
      local resource = blockType.resource('google_monitoring_istio_canonical_service', name),
      _: resource._(block, {
        canonical_service: build.template(block.canonical_service),
        canonical_service_namespace: build.template(block.canonical_service_namespace),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        mesh_uid: build.template(block.mesh_uid),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        service_id: build.template(std.get(block, 'service_id', null)),
        telemetry: build.template(std.get(block, 'telemetry', null)),
        user_labels: build.template(std.get(block, 'user_labels', null)),
      }),
      canonical_service: resource.field('canonical_service'),
      canonical_service_namespace: resource.field('canonical_service_namespace'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      mesh_uid: resource.field('mesh_uid'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_id: resource.field('service_id'),
      telemetry: resource.field('telemetry'),
      user_labels: resource.field('user_labels'),
    },
    monitoring_mesh_istio_service(name, block): {
      local resource = blockType.resource('google_monitoring_mesh_istio_service', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        mesh_uid: build.template(block.mesh_uid),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        service_id: build.template(std.get(block, 'service_id', null)),
        service_name: build.template(block.service_name),
        service_namespace: build.template(block.service_namespace),
        telemetry: build.template(std.get(block, 'telemetry', null)),
        user_labels: build.template(std.get(block, 'user_labels', null)),
      }),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      mesh_uid: resource.field('mesh_uid'),
      name: resource.field('name'),
      project: resource.field('project'),
      service_id: resource.field('service_id'),
      service_name: resource.field('service_name'),
      service_namespace: resource.field('service_namespace'),
      telemetry: resource.field('telemetry'),
      user_labels: resource.field('user_labels'),
    },
    monitoring_notification_channel(name, block): {
      local resource = blockType.resource('google_monitoring_notification_channel', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        sensitive_labels: build.template(std.get(block, 'sensitive_labels', null)),
        type: build.template(std.get(block, 'type', null)),
        user_labels: build.template(std.get(block, 'user_labels', null)),
        verification_status: build.template(std.get(block, 'verification_status', null)),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      enabled: resource.field('enabled'),
      force_delete: resource.field('force_delete'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      sensitive_labels: resource.field('sensitive_labels'),
      type: resource.field('type'),
      user_labels: resource.field('user_labels'),
      verification_status: resource.field('verification_status'),
    },
    monitoring_uptime_check_ips(name, block): {
      local resource = blockType.resource('google_monitoring_uptime_check_ips', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        uptime_check_ips: build.template(std.get(block, 'uptime_check_ips', null)),
      }),
      id: resource.field('id'),
      uptime_check_ips: resource.field('uptime_check_ips'),
    },
    netblock_ip_ranges(name, block): {
      local resource = blockType.resource('google_netblock_ip_ranges', name),
      _: resource._(block, {
        cidr_blocks: build.template(std.get(block, 'cidr_blocks', null)),
        cidr_blocks_ipv4: build.template(std.get(block, 'cidr_blocks_ipv4', null)),
        cidr_blocks_ipv6: build.template(std.get(block, 'cidr_blocks_ipv6', null)),
        id: build.template(std.get(block, 'id', null)),
        range_type: build.template(std.get(block, 'range_type', null)),
      }),
      cidr_blocks: resource.field('cidr_blocks'),
      cidr_blocks_ipv4: resource.field('cidr_blocks_ipv4'),
      cidr_blocks_ipv6: resource.field('cidr_blocks_ipv6'),
      id: resource.field('id'),
      range_type: resource.field('range_type'),
    },
    network_security_address_group_iam_policy(name, block): {
      local resource = blockType.resource('google_network_security_address_group_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    notebooks_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_notebooks_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    notebooks_runtime_iam_policy(name, block): {
      local resource = blockType.resource('google_notebooks_runtime_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        runtime_name: build.template(block.runtime_name),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      runtime_name: resource.field('runtime_name'),
    },
    oracle_database_autonomous_database(name, block): {
      local resource = blockType.resource('google_oracle_database_autonomous_database', name),
      _: resource._(block, {
        admin_password: build.template(std.get(block, 'admin_password', null)),
        autonomous_database_id: build.template(block.autonomous_database_id),
        cidr: build.template(std.get(block, 'cidr', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        database: build.template(std.get(block, 'database', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        entitlement_id: build.template(std.get(block, 'entitlement_id', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        network: build.template(std.get(block, 'network', null)),
        project: build.template(std.get(block, 'project', null)),
        properties: build.template(std.get(block, 'properties', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      admin_password: resource.field('admin_password'),
      autonomous_database_id: resource.field('autonomous_database_id'),
      cidr: resource.field('cidr'),
      create_time: resource.field('create_time'),
      database: resource.field('database'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      entitlement_id: resource.field('entitlement_id'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      properties: resource.field('properties'),
      terraform_labels: resource.field('terraform_labels'),
    },
    oracle_database_autonomous_databases(name, block): {
      local resource = blockType.resource('google_oracle_database_autonomous_databases', name),
      _: resource._(block, {
        autonomous_databases: build.template(std.get(block, 'autonomous_databases', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        project: build.template(std.get(block, 'project', null)),
      }),
      autonomous_databases: resource.field('autonomous_databases'),
      id: resource.field('id'),
      location: resource.field('location'),
      project: resource.field('project'),
    },
    oracle_database_cloud_exadata_infrastructure(name, block): {
      local resource = blockType.resource('google_oracle_database_cloud_exadata_infrastructure', name),
      _: resource._(block, {
        cloud_exadata_infrastructure_id: build.template(block.cloud_exadata_infrastructure_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        entitlement_id: build.template(std.get(block, 'entitlement_id', null)),
        gcp_oracle_zone: build.template(std.get(block, 'gcp_oracle_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        properties: build.template(std.get(block, 'properties', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      cloud_exadata_infrastructure_id: resource.field('cloud_exadata_infrastructure_id'),
      create_time: resource.field('create_time'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      entitlement_id: resource.field('entitlement_id'),
      gcp_oracle_zone: resource.field('gcp_oracle_zone'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      properties: resource.field('properties'),
      terraform_labels: resource.field('terraform_labels'),
    },
    oracle_database_cloud_exadata_infrastructures(name, block): {
      local resource = blockType.resource('google_oracle_database_cloud_exadata_infrastructures', name),
      _: resource._(block, {
        cloud_exadata_infrastructures: build.template(std.get(block, 'cloud_exadata_infrastructures', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        project: build.template(std.get(block, 'project', null)),
      }),
      cloud_exadata_infrastructures: resource.field('cloud_exadata_infrastructures'),
      id: resource.field('id'),
      location: resource.field('location'),
      project: resource.field('project'),
    },
    oracle_database_cloud_vm_cluster(name, block): {
      local resource = blockType.resource('google_oracle_database_cloud_vm_cluster', name),
      _: resource._(block, {
        backup_subnet_cidr: build.template(std.get(block, 'backup_subnet_cidr', null)),
        cidr: build.template(std.get(block, 'cidr', null)),
        cloud_vm_cluster_id: build.template(block.cloud_vm_cluster_id),
        create_time: build.template(std.get(block, 'create_time', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        exadata_infrastructure: build.template(std.get(block, 'exadata_infrastructure', null)),
        gcp_oracle_zone: build.template(std.get(block, 'gcp_oracle_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        network: build.template(std.get(block, 'network', null)),
        project: build.template(std.get(block, 'project', null)),
        properties: build.template(std.get(block, 'properties', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      backup_subnet_cidr: resource.field('backup_subnet_cidr'),
      cidr: resource.field('cidr'),
      cloud_vm_cluster_id: resource.field('cloud_vm_cluster_id'),
      create_time: resource.field('create_time'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      exadata_infrastructure: resource.field('exadata_infrastructure'),
      gcp_oracle_zone: resource.field('gcp_oracle_zone'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      properties: resource.field('properties'),
      terraform_labels: resource.field('terraform_labels'),
    },
    oracle_database_cloud_vm_clusters(name, block): {
      local resource = blockType.resource('google_oracle_database_cloud_vm_clusters', name),
      _: resource._(block, {
        cloud_vm_clusters: build.template(std.get(block, 'cloud_vm_clusters', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        project: build.template(std.get(block, 'project', null)),
      }),
      cloud_vm_clusters: resource.field('cloud_vm_clusters'),
      id: resource.field('id'),
      location: resource.field('location'),
      project: resource.field('project'),
    },
    oracle_database_db_nodes(name, block): {
      local resource = blockType.resource('google_oracle_database_db_nodes', name),
      _: resource._(block, {
        cloud_vm_cluster: build.template(block.cloud_vm_cluster),
        db_nodes: build.template(std.get(block, 'db_nodes', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        project: build.template(std.get(block, 'project', null)),
      }),
      cloud_vm_cluster: resource.field('cloud_vm_cluster'),
      db_nodes: resource.field('db_nodes'),
      id: resource.field('id'),
      location: resource.field('location'),
      project: resource.field('project'),
    },
    oracle_database_db_servers(name, block): {
      local resource = blockType.resource('google_oracle_database_db_servers', name),
      _: resource._(block, {
        cloud_exadata_infrastructure: build.template(block.cloud_exadata_infrastructure),
        db_servers: build.template(std.get(block, 'db_servers', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        project: build.template(std.get(block, 'project', null)),
      }),
      cloud_exadata_infrastructure: resource.field('cloud_exadata_infrastructure'),
      db_servers: resource.field('db_servers'),
      id: resource.field('id'),
      location: resource.field('location'),
      project: resource.field('project'),
    },
    organization(name, block): {
      local resource = blockType.resource('google_organization', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        directory_customer_id: build.template(std.get(block, 'directory_customer_id', null)),
        domain: build.template(std.get(block, 'domain', null)),
        id: build.template(std.get(block, 'id', null)),
        lifecycle_state: build.template(std.get(block, 'lifecycle_state', null)),
        name: build.template(std.get(block, 'name', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        organization: build.template(std.get(block, 'organization', null)),
      }),
      create_time: resource.field('create_time'),
      directory_customer_id: resource.field('directory_customer_id'),
      domain: resource.field('domain'),
      id: resource.field('id'),
      lifecycle_state: resource.field('lifecycle_state'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      organization: resource.field('organization'),
    },
    organization_iam_policy(name, block): {
      local resource = blockType.resource('google_organization_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(block.org_id),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      policy_data: resource.field('policy_data'),
    },
    privateca_ca_pool_iam_policy(name, block): {
      local resource = blockType.resource('google_privateca_ca_pool_iam_policy', name),
      _: resource._(block, {
        ca_pool: build.template(block.ca_pool),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      ca_pool: resource.field('ca_pool'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    privateca_certificate_authority(name, block): {
      local resource = blockType.resource('google_privateca_certificate_authority', name),
      _: resource._(block, {
        access_urls: build.template(std.get(block, 'access_urls', null)),
        certificate_authority_id: build.template(std.get(block, 'certificate_authority_id', null)),
        config: build.template(std.get(block, 'config', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        desired_state: build.template(std.get(block, 'desired_state', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        gcs_bucket: build.template(std.get(block, 'gcs_bucket', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_active_certificates_on_deletion: build.template(std.get(block, 'ignore_active_certificates_on_deletion', null)),
        key_spec: build.template(std.get(block, 'key_spec', null)),
        labels: build.template(std.get(block, 'labels', null)),
        lifetime: build.template(std.get(block, 'lifetime', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        pem_ca_certificate: build.template(std.get(block, 'pem_ca_certificate', null)),
        pem_ca_certificates: build.template(std.get(block, 'pem_ca_certificates', null)),
        pem_csr: build.template(std.get(block, 'pem_csr', null)),
        pool: build.template(std.get(block, 'pool', null)),
        project: build.template(std.get(block, 'project', null)),
        skip_grace_period: build.template(std.get(block, 'skip_grace_period', null)),
        state: build.template(std.get(block, 'state', null)),
        subordinate_config: build.template(std.get(block, 'subordinate_config', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        type: build.template(std.get(block, 'type', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      access_urls: resource.field('access_urls'),
      certificate_authority_id: resource.field('certificate_authority_id'),
      config: resource.field('config'),
      create_time: resource.field('create_time'),
      deletion_protection: resource.field('deletion_protection'),
      desired_state: resource.field('desired_state'),
      effective_labels: resource.field('effective_labels'),
      gcs_bucket: resource.field('gcs_bucket'),
      id: resource.field('id'),
      ignore_active_certificates_on_deletion: resource.field('ignore_active_certificates_on_deletion'),
      key_spec: resource.field('key_spec'),
      labels: resource.field('labels'),
      lifetime: resource.field('lifetime'),
      location: resource.field('location'),
      name: resource.field('name'),
      pem_ca_certificate: resource.field('pem_ca_certificate'),
      pem_ca_certificates: resource.field('pem_ca_certificates'),
      pem_csr: resource.field('pem_csr'),
      pool: resource.field('pool'),
      project: resource.field('project'),
      skip_grace_period: resource.field('skip_grace_period'),
      state: resource.field('state'),
      subordinate_config: resource.field('subordinate_config'),
      terraform_labels: resource.field('terraform_labels'),
      type: resource.field('type'),
      update_time: resource.field('update_time'),
    },
    privateca_certificate_template_iam_policy(name, block): {
      local resource = blockType.resource('google_privateca_certificate_template_iam_policy', name),
      _: resource._(block, {
        certificate_template: build.template(block.certificate_template),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      certificate_template: resource.field('certificate_template'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    privileged_access_manager_entitlement(name, block): {
      local resource = blockType.resource('google_privileged_access_manager_entitlement', name),
      _: resource._(block, {
        additional_notification_targets: build.template(std.get(block, 'additional_notification_targets', null)),
        approval_workflow: build.template(std.get(block, 'approval_workflow', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        eligible_users: build.template(std.get(block, 'eligible_users', null)),
        entitlement_id: build.template(std.get(block, 'entitlement_id', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        max_request_duration: build.template(std.get(block, 'max_request_duration', null)),
        name: build.template(std.get(block, 'name', null)),
        parent: build.template(std.get(block, 'parent', null)),
        privileged_access: build.template(std.get(block, 'privileged_access', null)),
        requester_justification_config: build.template(std.get(block, 'requester_justification_config', null)),
        state: build.template(std.get(block, 'state', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      additional_notification_targets: resource.field('additional_notification_targets'),
      approval_workflow: resource.field('approval_workflow'),
      create_time: resource.field('create_time'),
      eligible_users: resource.field('eligible_users'),
      entitlement_id: resource.field('entitlement_id'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      max_request_duration: resource.field('max_request_duration'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      privileged_access: resource.field('privileged_access'),
      requester_justification_config: resource.field('requester_justification_config'),
      state: resource.field('state'),
      update_time: resource.field('update_time'),
    },
    project(name, block): {
      local resource = blockType.resource('google_project', name),
      _: resource._(block, {
        auto_create_network: build.template(std.get(block, 'auto_create_network', null)),
        billing_account: build.template(std.get(block, 'billing_account', null)),
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        folder_id: build.template(std.get(block, 'folder_id', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        number: build.template(std.get(block, 'number', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        project_id: build.template(std.get(block, 'project_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      auto_create_network: resource.field('auto_create_network'),
      billing_account: resource.field('billing_account'),
      deletion_policy: resource.field('deletion_policy'),
      effective_labels: resource.field('effective_labels'),
      folder_id: resource.field('folder_id'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      number: resource.field('number'),
      org_id: resource.field('org_id'),
      project_id: resource.field('project_id'),
      tags: resource.field('tags'),
      terraform_labels: resource.field('terraform_labels'),
    },
    project_iam_policy(name, block): {
      local resource = blockType.resource('google_project_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(block.project),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    project_organization_policy(name, block): {
      local resource = blockType.resource('google_project_organization_policy', name),
      _: resource._(block, {
        boolean_policy: build.template(std.get(block, 'boolean_policy', null)),
        constraint: build.template(block.constraint),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        list_policy: build.template(std.get(block, 'list_policy', null)),
        project: build.template(block.project),
        restore_policy: build.template(std.get(block, 'restore_policy', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      boolean_policy: resource.field('boolean_policy'),
      constraint: resource.field('constraint'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      list_policy: resource.field('list_policy'),
      project: resource.field('project'),
      restore_policy: resource.field('restore_policy'),
      update_time: resource.field('update_time'),
      version: resource.field('version'),
    },
    project_service(name, block): {
      local resource = blockType.resource('google_project_service', name),
      _: resource._(block, {
        disable_dependent_services: build.template(std.get(block, 'disable_dependent_services', null)),
        disable_on_destroy: build.template(std.get(block, 'disable_on_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        service: build.template(block.service),
      }),
      disable_dependent_services: resource.field('disable_dependent_services'),
      disable_on_destroy: resource.field('disable_on_destroy'),
      id: resource.field('id'),
      project: resource.field('project'),
      service: resource.field('service'),
    },
    projects(name, block): {
      local resource = blockType.resource('google_projects', name),
      _: resource._(block, {
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        projects: build.template(std.get(block, 'projects', null)),
      }),
      filter: resource.field('filter'),
      id: resource.field('id'),
      projects: resource.field('projects'),
    },
    pubsub_schema_iam_policy(name, block): {
      local resource = blockType.resource('google_pubsub_schema_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        schema: build.template(block.schema),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      schema: resource.field('schema'),
    },
    pubsub_subscription(name, block): {
      local resource = blockType.resource('google_pubsub_subscription', name),
      _: resource._(block, {
        ack_deadline_seconds: build.template(std.get(block, 'ack_deadline_seconds', null)),
        bigquery_config: build.template(std.get(block, 'bigquery_config', null)),
        cloud_storage_config: build.template(std.get(block, 'cloud_storage_config', null)),
        dead_letter_policy: build.template(std.get(block, 'dead_letter_policy', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_exactly_once_delivery: build.template(std.get(block, 'enable_exactly_once_delivery', null)),
        enable_message_ordering: build.template(std.get(block, 'enable_message_ordering', null)),
        expiration_policy: build.template(std.get(block, 'expiration_policy', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        message_retention_duration: build.template(std.get(block, 'message_retention_duration', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        push_config: build.template(std.get(block, 'push_config', null)),
        retain_acked_messages: build.template(std.get(block, 'retain_acked_messages', null)),
        retry_policy: build.template(std.get(block, 'retry_policy', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        topic: build.template(std.get(block, 'topic', null)),
      }),
      ack_deadline_seconds: resource.field('ack_deadline_seconds'),
      bigquery_config: resource.field('bigquery_config'),
      cloud_storage_config: resource.field('cloud_storage_config'),
      dead_letter_policy: resource.field('dead_letter_policy'),
      effective_labels: resource.field('effective_labels'),
      enable_exactly_once_delivery: resource.field('enable_exactly_once_delivery'),
      enable_message_ordering: resource.field('enable_message_ordering'),
      expiration_policy: resource.field('expiration_policy'),
      filter: resource.field('filter'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      message_retention_duration: resource.field('message_retention_duration'),
      name: resource.field('name'),
      project: resource.field('project'),
      push_config: resource.field('push_config'),
      retain_acked_messages: resource.field('retain_acked_messages'),
      retry_policy: resource.field('retry_policy'),
      terraform_labels: resource.field('terraform_labels'),
      topic: resource.field('topic'),
    },
    pubsub_subscription_iam_policy(name, block): {
      local resource = blockType.resource('google_pubsub_subscription_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        subscription: build.template(block.subscription),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      subscription: resource.field('subscription'),
    },
    pubsub_topic(name, block): {
      local resource = blockType.resource('google_pubsub_topic', name),
      _: resource._(block, {
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        id: build.template(std.get(block, 'id', null)),
        ingestion_data_source_settings: build.template(std.get(block, 'ingestion_data_source_settings', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        labels: build.template(std.get(block, 'labels', null)),
        message_retention_duration: build.template(std.get(block, 'message_retention_duration', null)),
        message_storage_policy: build.template(std.get(block, 'message_storage_policy', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        schema_settings: build.template(std.get(block, 'schema_settings', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      effective_labels: resource.field('effective_labels'),
      id: resource.field('id'),
      ingestion_data_source_settings: resource.field('ingestion_data_source_settings'),
      kms_key_name: resource.field('kms_key_name'),
      labels: resource.field('labels'),
      message_retention_duration: resource.field('message_retention_duration'),
      message_storage_policy: resource.field('message_storage_policy'),
      name: resource.field('name'),
      project: resource.field('project'),
      schema_settings: resource.field('schema_settings'),
      terraform_labels: resource.field('terraform_labels'),
    },
    pubsub_topic_iam_policy(name, block): {
      local resource = blockType.resource('google_pubsub_topic_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        topic: build.template(block.topic),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      topic: resource.field('topic'),
    },
    redis_instance(name, block): {
      local resource = blockType.resource('google_redis_instance', name),
      _: resource._(block, {
        alternative_location_id: build.template(std.get(block, 'alternative_location_id', null)),
        auth_enabled: build.template(std.get(block, 'auth_enabled', null)),
        auth_string: build.template(std.get(block, 'auth_string', null)),
        authorized_network: build.template(std.get(block, 'authorized_network', null)),
        connect_mode: build.template(std.get(block, 'connect_mode', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        current_location_id: build.template(std.get(block, 'current_location_id', null)),
        customer_managed_key: build.template(std.get(block, 'customer_managed_key', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        host: build.template(std.get(block, 'host', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location_id: build.template(std.get(block, 'location_id', null)),
        maintenance_policy: build.template(std.get(block, 'maintenance_policy', null)),
        maintenance_schedule: build.template(std.get(block, 'maintenance_schedule', null)),
        maintenance_version: build.template(std.get(block, 'maintenance_version', null)),
        memory_size_gb: build.template(std.get(block, 'memory_size_gb', null)),
        name: build.template(block.name),
        nodes: build.template(std.get(block, 'nodes', null)),
        persistence_config: build.template(std.get(block, 'persistence_config', null)),
        persistence_iam_identity: build.template(std.get(block, 'persistence_iam_identity', null)),
        port: build.template(std.get(block, 'port', null)),
        project: build.template(std.get(block, 'project', null)),
        read_endpoint: build.template(std.get(block, 'read_endpoint', null)),
        read_endpoint_port: build.template(std.get(block, 'read_endpoint_port', null)),
        read_replicas_mode: build.template(std.get(block, 'read_replicas_mode', null)),
        redis_configs: build.template(std.get(block, 'redis_configs', null)),
        redis_version: build.template(std.get(block, 'redis_version', null)),
        region: build.template(std.get(block, 'region', null)),
        replica_count: build.template(std.get(block, 'replica_count', null)),
        reserved_ip_range: build.template(std.get(block, 'reserved_ip_range', null)),
        secondary_ip_range: build.template(std.get(block, 'secondary_ip_range', null)),
        server_ca_certs: build.template(std.get(block, 'server_ca_certs', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        tier: build.template(std.get(block, 'tier', null)),
        transit_encryption_mode: build.template(std.get(block, 'transit_encryption_mode', null)),
      }),
      alternative_location_id: resource.field('alternative_location_id'),
      auth_enabled: resource.field('auth_enabled'),
      auth_string: resource.field('auth_string'),
      authorized_network: resource.field('authorized_network'),
      connect_mode: resource.field('connect_mode'),
      create_time: resource.field('create_time'),
      current_location_id: resource.field('current_location_id'),
      customer_managed_key: resource.field('customer_managed_key'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      host: resource.field('host'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location_id: resource.field('location_id'),
      maintenance_policy: resource.field('maintenance_policy'),
      maintenance_schedule: resource.field('maintenance_schedule'),
      maintenance_version: resource.field('maintenance_version'),
      memory_size_gb: resource.field('memory_size_gb'),
      name: resource.field('name'),
      nodes: resource.field('nodes'),
      persistence_config: resource.field('persistence_config'),
      persistence_iam_identity: resource.field('persistence_iam_identity'),
      port: resource.field('port'),
      project: resource.field('project'),
      read_endpoint: resource.field('read_endpoint'),
      read_endpoint_port: resource.field('read_endpoint_port'),
      read_replicas_mode: resource.field('read_replicas_mode'),
      redis_configs: resource.field('redis_configs'),
      redis_version: resource.field('redis_version'),
      region: resource.field('region'),
      replica_count: resource.field('replica_count'),
      reserved_ip_range: resource.field('reserved_ip_range'),
      secondary_ip_range: resource.field('secondary_ip_range'),
      server_ca_certs: resource.field('server_ca_certs'),
      terraform_labels: resource.field('terraform_labels'),
      tier: resource.field('tier'),
      transit_encryption_mode: resource.field('transit_encryption_mode'),
    },
    scc_source_iam_policy(name, block): {
      local resource = blockType.resource('google_scc_source_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(block.organization),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        source: build.template(block.source),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      organization: resource.field('organization'),
      policy_data: resource.field('policy_data'),
      source: resource.field('source'),
    },
    scc_v2_organization_source_iam_policy(name, block): {
      local resource = blockType.resource('google_scc_v2_organization_source_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(block.organization),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        source: build.template(block.source),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      organization: resource.field('organization'),
      policy_data: resource.field('policy_data'),
      source: resource.field('source'),
    },
    secret_manager_regional_secret(name, block): {
      local resource = blockType.resource('google_secret_manager_regional_secret', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        customer_managed_encryption: build.template(std.get(block, 'customer_managed_encryption', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        location: build.template(block.location),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        rotation: build.template(std.get(block, 'rotation', null)),
        secret_id: build.template(block.secret_id),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        topics: build.template(std.get(block, 'topics', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        version_aliases: build.template(std.get(block, 'version_aliases', null)),
        version_destroy_ttl: build.template(std.get(block, 'version_destroy_ttl', null)),
      }),
      annotations: resource.field('annotations'),
      create_time: resource.field('create_time'),
      customer_managed_encryption: resource.field('customer_managed_encryption'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      rotation: resource.field('rotation'),
      secret_id: resource.field('secret_id'),
      terraform_labels: resource.field('terraform_labels'),
      topics: resource.field('topics'),
      ttl: resource.field('ttl'),
      version_aliases: resource.field('version_aliases'),
      version_destroy_ttl: resource.field('version_destroy_ttl'),
    },
    secret_manager_regional_secret_iam_policy(name, block): {
      local resource = blockType.resource('google_secret_manager_regional_secret_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        secret_id: build.template(block.secret_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      secret_id: resource.field('secret_id'),
    },
    secret_manager_regional_secret_version(name, block): {
      local resource = blockType.resource('google_secret_manager_regional_secret_version', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        customer_managed_encryption: build.template(std.get(block, 'customer_managed_encryption', null)),
        destroy_time: build.template(std.get(block, 'destroy_time', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        is_secret_data_base64: build.template(std.get(block, 'is_secret_data_base64', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        secret: build.template(block.secret),
        secret_data: build.template(std.get(block, 'secret_data', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      create_time: resource.field('create_time'),
      customer_managed_encryption: resource.field('customer_managed_encryption'),
      destroy_time: resource.field('destroy_time'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      is_secret_data_base64: resource.field('is_secret_data_base64'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      secret: resource.field('secret'),
      secret_data: resource.field('secret_data'),
      version: resource.field('version'),
    },
    secret_manager_regional_secret_version_access(name, block): {
      local resource = blockType.resource('google_secret_manager_regional_secret_version_access', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        is_secret_data_base64: build.template(std.get(block, 'is_secret_data_base64', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        secret: build.template(block.secret),
        secret_data: build.template(std.get(block, 'secret_data', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      id: resource.field('id'),
      is_secret_data_base64: resource.field('is_secret_data_base64'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      secret: resource.field('secret'),
      secret_data: resource.field('secret_data'),
      version: resource.field('version'),
    },
    secret_manager_regional_secrets(name, block): {
      local resource = blockType.resource('google_secret_manager_regional_secrets', name),
      _: resource._(block, {
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        project: build.template(std.get(block, 'project', null)),
        secrets: build.template(std.get(block, 'secrets', null)),
      }),
      filter: resource.field('filter'),
      id: resource.field('id'),
      location: resource.field('location'),
      project: resource.field('project'),
      secrets: resource.field('secrets'),
    },
    secret_manager_secret(name, block): {
      local resource = blockType.resource('google_secret_manager_secret', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        effective_annotations: build.template(std.get(block, 'effective_annotations', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        replication: build.template(std.get(block, 'replication', null)),
        rotation: build.template(std.get(block, 'rotation', null)),
        secret_id: build.template(block.secret_id),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        topics: build.template(std.get(block, 'topics', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        version_aliases: build.template(std.get(block, 'version_aliases', null)),
        version_destroy_ttl: build.template(std.get(block, 'version_destroy_ttl', null)),
      }),
      annotations: resource.field('annotations'),
      create_time: resource.field('create_time'),
      effective_annotations: resource.field('effective_annotations'),
      effective_labels: resource.field('effective_labels'),
      expire_time: resource.field('expire_time'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      project: resource.field('project'),
      replication: resource.field('replication'),
      rotation: resource.field('rotation'),
      secret_id: resource.field('secret_id'),
      terraform_labels: resource.field('terraform_labels'),
      topics: resource.field('topics'),
      ttl: resource.field('ttl'),
      version_aliases: resource.field('version_aliases'),
      version_destroy_ttl: resource.field('version_destroy_ttl'),
    },
    secret_manager_secret_iam_policy(name, block): {
      local resource = blockType.resource('google_secret_manager_secret_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        secret_id: build.template(block.secret_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      secret_id: resource.field('secret_id'),
    },
    secret_manager_secret_version(name, block): {
      local resource = blockType.resource('google_secret_manager_secret_version', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        destroy_time: build.template(std.get(block, 'destroy_time', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        is_secret_data_base64: build.template(std.get(block, 'is_secret_data_base64', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        secret: build.template(block.secret),
        secret_data: build.template(std.get(block, 'secret_data', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      create_time: resource.field('create_time'),
      destroy_time: resource.field('destroy_time'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      is_secret_data_base64: resource.field('is_secret_data_base64'),
      name: resource.field('name'),
      project: resource.field('project'),
      secret: resource.field('secret'),
      secret_data: resource.field('secret_data'),
      version: resource.field('version'),
    },
    secret_manager_secret_version_access(name, block): {
      local resource = blockType.resource('google_secret_manager_secret_version_access', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        is_secret_data_base64: build.template(std.get(block, 'is_secret_data_base64', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        secret: build.template(block.secret),
        secret_data: build.template(std.get(block, 'secret_data', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      id: resource.field('id'),
      is_secret_data_base64: resource.field('is_secret_data_base64'),
      name: resource.field('name'),
      project: resource.field('project'),
      secret: resource.field('secret'),
      secret_data: resource.field('secret_data'),
      version: resource.field('version'),
    },
    secret_manager_secrets(name, block): {
      local resource = blockType.resource('google_secret_manager_secrets', name),
      _: resource._(block, {
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        secrets: build.template(std.get(block, 'secrets', null)),
      }),
      filter: resource.field('filter'),
      id: resource.field('id'),
      project: resource.field('project'),
      secrets: resource.field('secrets'),
    },
    secure_source_manager_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_secure_source_manager_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    secure_source_manager_repository_iam_policy(name, block): {
      local resource = blockType.resource('google_secure_source_manager_repository_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        repository_id: build.template(block.repository_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      repository_id: resource.field('repository_id'),
    },
    service_account(name, block): {
      local resource = blockType.resource('google_service_account', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        disabled: build.template(std.get(block, 'disabled', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(std.get(block, 'member', null)),
        name: build.template(std.get(block, 'name', null)),
        project: build.template(std.get(block, 'project', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
      }),
      account_id: resource.field('account_id'),
      disabled: resource.field('disabled'),
      display_name: resource.field('display_name'),
      email: resource.field('email'),
      id: resource.field('id'),
      member: resource.field('member'),
      name: resource.field('name'),
      project: resource.field('project'),
      unique_id: resource.field('unique_id'),
    },
    service_account_access_token(name, block): {
      local resource = blockType.resource('google_service_account_access_token', name),
      _: resource._(block, {
        access_token: build.template(std.get(block, 'access_token', null)),
        delegates: build.template(std.get(block, 'delegates', null)),
        id: build.template(std.get(block, 'id', null)),
        lifetime: build.template(std.get(block, 'lifetime', null)),
        scopes: build.template(block.scopes),
        target_service_account: build.template(block.target_service_account),
      }),
      access_token: resource.field('access_token'),
      delegates: resource.field('delegates'),
      id: resource.field('id'),
      lifetime: resource.field('lifetime'),
      scopes: resource.field('scopes'),
      target_service_account: resource.field('target_service_account'),
    },
    service_account_iam_policy(name, block): {
      local resource = blockType.resource('google_service_account_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        service_account_id: build.template(block.service_account_id),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      service_account_id: resource.field('service_account_id'),
    },
    service_account_id_token(name, block): {
      local resource = blockType.resource('google_service_account_id_token', name),
      _: resource._(block, {
        delegates: build.template(std.get(block, 'delegates', null)),
        id: build.template(std.get(block, 'id', null)),
        id_token: build.template(std.get(block, 'id_token', null)),
        include_email: build.template(std.get(block, 'include_email', null)),
        target_audience: build.template(block.target_audience),
        target_service_account: build.template(std.get(block, 'target_service_account', null)),
      }),
      delegates: resource.field('delegates'),
      id: resource.field('id'),
      id_token: resource.field('id_token'),
      include_email: resource.field('include_email'),
      target_audience: resource.field('target_audience'),
      target_service_account: resource.field('target_service_account'),
    },
    service_account_jwt(name, block): {
      local resource = blockType.resource('google_service_account_jwt', name),
      _: resource._(block, {
        delegates: build.template(std.get(block, 'delegates', null)),
        expires_in: build.template(std.get(block, 'expires_in', null)),
        id: build.template(std.get(block, 'id', null)),
        jwt: build.template(std.get(block, 'jwt', null)),
        payload: build.template(block.payload),
        target_service_account: build.template(block.target_service_account),
      }),
      delegates: resource.field('delegates'),
      expires_in: resource.field('expires_in'),
      id: resource.field('id'),
      jwt: resource.field('jwt'),
      payload: resource.field('payload'),
      target_service_account: resource.field('target_service_account'),
    },
    service_account_key(name, block): {
      local resource = blockType.resource('google_service_account_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_algorithm: build.template(std.get(block, 'key_algorithm', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        public_key: build.template(std.get(block, 'public_key', null)),
        public_key_type: build.template(std.get(block, 'public_key_type', null)),
      }),
      id: resource.field('id'),
      key_algorithm: resource.field('key_algorithm'),
      name: resource.field('name'),
      project: resource.field('project'),
      public_key: resource.field('public_key'),
      public_key_type: resource.field('public_key_type'),
    },
    service_accounts(name, block): {
      local resource = blockType.resource('google_service_accounts', name),
      _: resource._(block, {
        accounts: build.template(std.get(block, 'accounts', null)),
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      accounts: resource.field('accounts'),
      id: resource.field('id'),
      project: resource.field('project'),
    },
    service_networking_peered_dns_domain(name, block): {
      local resource = blockType.resource('google_service_networking_peered_dns_domain', name),
      _: resource._(block, {
        dns_suffix: build.template(std.get(block, 'dns_suffix', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network: build.template(block.network),
        parent: build.template(std.get(block, 'parent', null)),
        project: build.template(block.project),
        service: build.template(block.service),
      }),
      dns_suffix: resource.field('dns_suffix'),
      id: resource.field('id'),
      name: resource.field('name'),
      network: resource.field('network'),
      parent: resource.field('parent'),
      project: resource.field('project'),
      service: resource.field('service'),
    },
    site_verification_token(name, block): {
      local resource = blockType.resource('google_site_verification_token', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identifier: build.template(block.identifier),
        token: build.template(std.get(block, 'token', null)),
        type: build.template(block.type),
        verification_method: build.template(block.verification_method),
      }),
      id: resource.field('id'),
      identifier: resource.field('identifier'),
      token: resource.field('token'),
      type: resource.field('type'),
      verification_method: resource.field('verification_method'),
    },
    sourcerepo_repository(name, block): {
      local resource = blockType.resource('google_sourcerepo_repository', name),
      _: resource._(block, {
        create_ignore_already_exists: build.template(std.get(block, 'create_ignore_already_exists', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        pubsub_configs: build.template(std.get(block, 'pubsub_configs', null)),
        size: build.template(std.get(block, 'size', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      create_ignore_already_exists: resource.field('create_ignore_already_exists'),
      id: resource.field('id'),
      name: resource.field('name'),
      project: resource.field('project'),
      pubsub_configs: resource.field('pubsub_configs'),
      size: resource.field('size'),
      url: resource.field('url'),
    },
    sourcerepo_repository_iam_policy(name, block): {
      local resource = blockType.resource('google_sourcerepo_repository_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
        repository: build.template(block.repository),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
      repository: resource.field('repository'),
    },
    spanner_database(name, block): {
      local resource = blockType.resource('google_spanner_database', name),
      _: resource._(block, {
        database_dialect: build.template(std.get(block, 'database_dialect', null)),
        ddl: build.template(std.get(block, 'ddl', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        enable_drop_protection: build.template(std.get(block, 'enable_drop_protection', null)),
        encryption_config: build.template(std.get(block, 'encryption_config', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        version_retention_period: build.template(std.get(block, 'version_retention_period', null)),
      }),
      database_dialect: resource.field('database_dialect'),
      ddl: resource.field('ddl'),
      deletion_protection: resource.field('deletion_protection'),
      enable_drop_protection: resource.field('enable_drop_protection'),
      encryption_config: resource.field('encryption_config'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      version_retention_period: resource.field('version_retention_period'),
    },
    spanner_database_iam_policy(name, block): {
      local resource = blockType.resource('google_spanner_database_iam_policy', name),
      _: resource._(block, {
        database: build.template(block.database),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      database: resource.field('database'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    spanner_instance(name, block): {
      local resource = blockType.resource('google_spanner_instance', name),
      _: resource._(block, {
        autoscaling_config: build.template(std.get(block, 'autoscaling_config', null)),
        config: build.template(std.get(block, 'config', null)),
        default_backup_schedule_type: build.template(std.get(block, 'default_backup_schedule_type', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        edition: build.template(std.get(block, 'edition', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        num_nodes: build.template(std.get(block, 'num_nodes', null)),
        processing_units: build.template(std.get(block, 'processing_units', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
      }),
      autoscaling_config: resource.field('autoscaling_config'),
      config: resource.field('config'),
      default_backup_schedule_type: resource.field('default_backup_schedule_type'),
      display_name: resource.field('display_name'),
      edition: resource.field('edition'),
      effective_labels: resource.field('effective_labels'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      name: resource.field('name'),
      num_nodes: resource.field('num_nodes'),
      processing_units: resource.field('processing_units'),
      project: resource.field('project'),
      state: resource.field('state'),
      terraform_labels: resource.field('terraform_labels'),
    },
    spanner_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_spanner_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
    sql_backup_run(name, block): {
      local resource = blockType.resource('google_sql_backup_run', name),
      _: resource._(block, {
        backup_id: build.template(std.get(block, 'backup_id', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        location: build.template(std.get(block, 'location', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        project: build.template(std.get(block, 'project', null)),
        start_time: build.template(std.get(block, 'start_time', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      backup_id: resource.field('backup_id'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      location: resource.field('location'),
      most_recent: resource.field('most_recent'),
      project: resource.field('project'),
      start_time: resource.field('start_time'),
      status: resource.field('status'),
    },
    sql_ca_certs(name, block): {
      local resource = blockType.resource('google_sql_ca_certs', name),
      _: resource._(block, {
        active_version: build.template(std.get(block, 'active_version', null)),
        certs: build.template(std.get(block, 'certs', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        project: build.template(std.get(block, 'project', null)),
      }),
      active_version: resource.field('active_version'),
      certs: resource.field('certs'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      project: resource.field('project'),
    },
    sql_database(name, block): {
      local resource = blockType.resource('google_sql_database', name),
      _: resource._(block, {
        charset: build.template(std.get(block, 'charset', null)),
        collation: build.template(std.get(block, 'collation', null)),
        deletion_policy: build.template(std.get(block, 'deletion_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
      }),
      charset: resource.field('charset'),
      collation: resource.field('collation'),
      deletion_policy: resource.field('deletion_policy'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      name: resource.field('name'),
      project: resource.field('project'),
      self_link: resource.field('self_link'),
    },
    sql_database_instance(name, block): {
      local resource = blockType.resource('google_sql_database_instance', name),
      _: resource._(block, {
        available_maintenance_versions: build.template(std.get(block, 'available_maintenance_versions', null)),
        clone: build.template(std.get(block, 'clone', null)),
        connection_name: build.template(std.get(block, 'connection_name', null)),
        database_version: build.template(std.get(block, 'database_version', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        encryption_key_name: build.template(std.get(block, 'encryption_key_name', null)),
        first_ip_address: build.template(std.get(block, 'first_ip_address', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        maintenance_version: build.template(std.get(block, 'maintenance_version', null)),
        master_instance_name: build.template(std.get(block, 'master_instance_name', null)),
        name: build.template(block.name),
        private_ip_address: build.template(std.get(block, 'private_ip_address', null)),
        project: build.template(std.get(block, 'project', null)),
        psc_service_attachment_link: build.template(std.get(block, 'psc_service_attachment_link', null)),
        public_ip_address: build.template(std.get(block, 'public_ip_address', null)),
        region: build.template(std.get(block, 'region', null)),
        replica_configuration: build.template(std.get(block, 'replica_configuration', null)),
        replica_names: build.template(std.get(block, 'replica_names', null)),
        restore_backup_context: build.template(std.get(block, 'restore_backup_context', null)),
        root_password: build.template(std.get(block, 'root_password', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        server_ca_cert: build.template(std.get(block, 'server_ca_cert', null)),
        service_account_email_address: build.template(std.get(block, 'service_account_email_address', null)),
        settings: build.template(std.get(block, 'settings', null)),
      }),
      available_maintenance_versions: resource.field('available_maintenance_versions'),
      clone: resource.field('clone'),
      connection_name: resource.field('connection_name'),
      database_version: resource.field('database_version'),
      deletion_protection: resource.field('deletion_protection'),
      dns_name: resource.field('dns_name'),
      encryption_key_name: resource.field('encryption_key_name'),
      first_ip_address: resource.field('first_ip_address'),
      id: resource.field('id'),
      instance_type: resource.field('instance_type'),
      ip_address: resource.field('ip_address'),
      maintenance_version: resource.field('maintenance_version'),
      master_instance_name: resource.field('master_instance_name'),
      name: resource.field('name'),
      private_ip_address: resource.field('private_ip_address'),
      project: resource.field('project'),
      psc_service_attachment_link: resource.field('psc_service_attachment_link'),
      public_ip_address: resource.field('public_ip_address'),
      region: resource.field('region'),
      replica_configuration: resource.field('replica_configuration'),
      replica_names: resource.field('replica_names'),
      restore_backup_context: resource.field('restore_backup_context'),
      root_password: resource.field('root_password'),
      self_link: resource.field('self_link'),
      server_ca_cert: resource.field('server_ca_cert'),
      service_account_email_address: resource.field('service_account_email_address'),
      settings: resource.field('settings'),
    },
    sql_database_instance_latest_recovery_time(name, block): {
      local resource = blockType.resource('google_sql_database_instance_latest_recovery_time', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        latest_recovery_time: build.template(std.get(block, 'latest_recovery_time', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      id: resource.field('id'),
      instance: resource.field('instance'),
      latest_recovery_time: resource.field('latest_recovery_time'),
      project: resource.field('project'),
    },
    sql_database_instances(name, block): {
      local resource = blockType.resource('google_sql_database_instances', name),
      _: resource._(block, {
        database_version: build.template(std.get(block, 'database_version', null)),
        id: build.template(std.get(block, 'id', null)),
        instances: build.template(std.get(block, 'instances', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        state: build.template(std.get(block, 'state', null)),
        tier: build.template(std.get(block, 'tier', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      database_version: resource.field('database_version'),
      id: resource.field('id'),
      instances: resource.field('instances'),
      project: resource.field('project'),
      region: resource.field('region'),
      state: resource.field('state'),
      tier: resource.field('tier'),
      zone: resource.field('zone'),
    },
    sql_databases(name, block): {
      local resource = blockType.resource('google_sql_databases', name),
      _: resource._(block, {
        databases: build.template(std.get(block, 'databases', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
        project: build.template(std.get(block, 'project', null)),
      }),
      databases: resource.field('databases'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      project: resource.field('project'),
    },
    sql_tiers(name, block): {
      local resource = blockType.resource('google_sql_tiers', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        tiers: build.template(std.get(block, 'tiers', null)),
      }),
      id: resource.field('id'),
      project: resource.field('project'),
      tiers: resource.field('tiers'),
    },
    storage_bucket(name, block): {
      local resource = blockType.resource('google_storage_bucket', name),
      _: resource._(block, {
        autoclass: build.template(std.get(block, 'autoclass', null)),
        cors: build.template(std.get(block, 'cors', null)),
        custom_placement_config: build.template(std.get(block, 'custom_placement_config', null)),
        default_event_based_hold: build.template(std.get(block, 'default_event_based_hold', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        enable_object_retention: build.template(std.get(block, 'enable_object_retention', null)),
        encryption: build.template(std.get(block, 'encryption', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        hierarchical_namespace: build.template(std.get(block, 'hierarchical_namespace', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        lifecycle_rule: build.template(std.get(block, 'lifecycle_rule', null)),
        location: build.template(std.get(block, 'location', null)),
        logging: build.template(std.get(block, 'logging', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        project_number: build.template(std.get(block, 'project_number', null)),
        public_access_prevention: build.template(std.get(block, 'public_access_prevention', null)),
        requester_pays: build.template(std.get(block, 'requester_pays', null)),
        retention_policy: build.template(std.get(block, 'retention_policy', null)),
        rpo: build.template(std.get(block, 'rpo', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        soft_delete_policy: build.template(std.get(block, 'soft_delete_policy', null)),
        storage_class: build.template(std.get(block, 'storage_class', null)),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        uniform_bucket_level_access: build.template(std.get(block, 'uniform_bucket_level_access', null)),
        url: build.template(std.get(block, 'url', null)),
        versioning: build.template(std.get(block, 'versioning', null)),
        website: build.template(std.get(block, 'website', null)),
      }),
      autoclass: resource.field('autoclass'),
      cors: resource.field('cors'),
      custom_placement_config: resource.field('custom_placement_config'),
      default_event_based_hold: resource.field('default_event_based_hold'),
      effective_labels: resource.field('effective_labels'),
      enable_object_retention: resource.field('enable_object_retention'),
      encryption: resource.field('encryption'),
      force_destroy: resource.field('force_destroy'),
      hierarchical_namespace: resource.field('hierarchical_namespace'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      lifecycle_rule: resource.field('lifecycle_rule'),
      location: resource.field('location'),
      logging: resource.field('logging'),
      name: resource.field('name'),
      project: resource.field('project'),
      project_number: resource.field('project_number'),
      public_access_prevention: resource.field('public_access_prevention'),
      requester_pays: resource.field('requester_pays'),
      retention_policy: resource.field('retention_policy'),
      rpo: resource.field('rpo'),
      self_link: resource.field('self_link'),
      soft_delete_policy: resource.field('soft_delete_policy'),
      storage_class: resource.field('storage_class'),
      terraform_labels: resource.field('terraform_labels'),
      uniform_bucket_level_access: resource.field('uniform_bucket_level_access'),
      url: resource.field('url'),
      versioning: resource.field('versioning'),
      website: resource.field('website'),
    },
    storage_bucket_iam_policy(name, block): {
      local resource = blockType.resource('google_storage_bucket_iam_policy', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      bucket: resource.field('bucket'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
    },
    storage_bucket_object(name, block): {
      local resource = blockType.resource('google_storage_bucket_object', name),
      _: resource._(block, {
        bucket: build.template(std.get(block, 'bucket', null)),
        cache_control: build.template(std.get(block, 'cache_control', null)),
        content: build.template(std.get(block, 'content', null)),
        content_disposition: build.template(std.get(block, 'content_disposition', null)),
        content_encoding: build.template(std.get(block, 'content_encoding', null)),
        content_language: build.template(std.get(block, 'content_language', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        crc32c: build.template(std.get(block, 'crc32c', null)),
        customer_encryption: build.template(std.get(block, 'customer_encryption', null)),
        detect_md5hash: build.template(std.get(block, 'detect_md5hash', null)),
        event_based_hold: build.template(std.get(block, 'event_based_hold', null)),
        generation: build.template(std.get(block, 'generation', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        md5hash: build.template(std.get(block, 'md5hash', null)),
        media_link: build.template(std.get(block, 'media_link', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(std.get(block, 'name', null)),
        output_name: build.template(std.get(block, 'output_name', null)),
        retention: build.template(std.get(block, 'retention', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        source: build.template(std.get(block, 'source', null)),
        storage_class: build.template(std.get(block, 'storage_class', null)),
        temporary_hold: build.template(std.get(block, 'temporary_hold', null)),
      }),
      bucket: resource.field('bucket'),
      cache_control: resource.field('cache_control'),
      content: resource.field('content'),
      content_disposition: resource.field('content_disposition'),
      content_encoding: resource.field('content_encoding'),
      content_language: resource.field('content_language'),
      content_type: resource.field('content_type'),
      crc32c: resource.field('crc32c'),
      customer_encryption: resource.field('customer_encryption'),
      detect_md5hash: resource.field('detect_md5hash'),
      event_based_hold: resource.field('event_based_hold'),
      generation: resource.field('generation'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      md5hash: resource.field('md5hash'),
      media_link: resource.field('media_link'),
      metadata: resource.field('metadata'),
      name: resource.field('name'),
      output_name: resource.field('output_name'),
      retention: resource.field('retention'),
      self_link: resource.field('self_link'),
      source: resource.field('source'),
      storage_class: resource.field('storage_class'),
      temporary_hold: resource.field('temporary_hold'),
    },
    storage_bucket_object_content(name, block): {
      local resource = blockType.resource('google_storage_bucket_object_content', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        cache_control: build.template(std.get(block, 'cache_control', null)),
        content: build.template(std.get(block, 'content', null)),
        content_disposition: build.template(std.get(block, 'content_disposition', null)),
        content_encoding: build.template(std.get(block, 'content_encoding', null)),
        content_language: build.template(std.get(block, 'content_language', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        crc32c: build.template(std.get(block, 'crc32c', null)),
        customer_encryption: build.template(std.get(block, 'customer_encryption', null)),
        detect_md5hash: build.template(std.get(block, 'detect_md5hash', null)),
        event_based_hold: build.template(std.get(block, 'event_based_hold', null)),
        generation: build.template(std.get(block, 'generation', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_name: build.template(std.get(block, 'kms_key_name', null)),
        md5hash: build.template(std.get(block, 'md5hash', null)),
        media_link: build.template(std.get(block, 'media_link', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        output_name: build.template(std.get(block, 'output_name', null)),
        retention: build.template(std.get(block, 'retention', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        source: build.template(std.get(block, 'source', null)),
        storage_class: build.template(std.get(block, 'storage_class', null)),
        temporary_hold: build.template(std.get(block, 'temporary_hold', null)),
      }),
      bucket: resource.field('bucket'),
      cache_control: resource.field('cache_control'),
      content: resource.field('content'),
      content_disposition: resource.field('content_disposition'),
      content_encoding: resource.field('content_encoding'),
      content_language: resource.field('content_language'),
      content_type: resource.field('content_type'),
      crc32c: resource.field('crc32c'),
      customer_encryption: resource.field('customer_encryption'),
      detect_md5hash: resource.field('detect_md5hash'),
      event_based_hold: resource.field('event_based_hold'),
      generation: resource.field('generation'),
      id: resource.field('id'),
      kms_key_name: resource.field('kms_key_name'),
      md5hash: resource.field('md5hash'),
      media_link: resource.field('media_link'),
      metadata: resource.field('metadata'),
      name: resource.field('name'),
      output_name: resource.field('output_name'),
      retention: resource.field('retention'),
      self_link: resource.field('self_link'),
      source: resource.field('source'),
      storage_class: resource.field('storage_class'),
      temporary_hold: resource.field('temporary_hold'),
    },
    storage_bucket_objects(name, block): {
      local resource = blockType.resource('google_storage_bucket_objects', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        bucket_objects: build.template(std.get(block, 'bucket_objects', null)),
        id: build.template(std.get(block, 'id', null)),
        match_glob: build.template(std.get(block, 'match_glob', null)),
        prefix: build.template(std.get(block, 'prefix', null)),
      }),
      bucket: resource.field('bucket'),
      bucket_objects: resource.field('bucket_objects'),
      id: resource.field('id'),
      match_glob: resource.field('match_glob'),
      prefix: resource.field('prefix'),
    },
    storage_buckets(name, block): {
      local resource = blockType.resource('google_storage_buckets', name),
      _: resource._(block, {
        buckets: build.template(std.get(block, 'buckets', null)),
        id: build.template(std.get(block, 'id', null)),
        prefix: build.template(std.get(block, 'prefix', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      buckets: resource.field('buckets'),
      id: resource.field('id'),
      prefix: resource.field('prefix'),
      project: resource.field('project'),
    },
    storage_managed_folder_iam_policy(name, block): {
      local resource = blockType.resource('google_storage_managed_folder_iam_policy', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_folder: build.template(block.managed_folder),
        policy_data: build.template(std.get(block, 'policy_data', null)),
      }),
      bucket: resource.field('bucket'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      managed_folder: resource.field('managed_folder'),
      policy_data: resource.field('policy_data'),
    },
    storage_object_signed_url(name, block): {
      local resource = blockType.resource('google_storage_object_signed_url', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        content_md5: build.template(std.get(block, 'content_md5', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        credentials: build.template(std.get(block, 'credentials', null)),
        duration: build.template(std.get(block, 'duration', null)),
        extension_headers: build.template(std.get(block, 'extension_headers', null)),
        http_method: build.template(std.get(block, 'http_method', null)),
        id: build.template(std.get(block, 'id', null)),
        path: build.template(block.path),
        signed_url: build.template(std.get(block, 'signed_url', null)),
      }),
      bucket: resource.field('bucket'),
      content_md5: resource.field('content_md5'),
      content_type: resource.field('content_type'),
      credentials: resource.field('credentials'),
      duration: resource.field('duration'),
      extension_headers: resource.field('extension_headers'),
      http_method: resource.field('http_method'),
      id: resource.field('id'),
      path: resource.field('path'),
      signed_url: resource.field('signed_url'),
    },
    storage_project_service_account(name, block): {
      local resource = blockType.resource('google_storage_project_service_account', name),
      _: resource._(block, {
        email_address: build.template(std.get(block, 'email_address', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(std.get(block, 'member', null)),
        project: build.template(std.get(block, 'project', null)),
        user_project: build.template(std.get(block, 'user_project', null)),
      }),
      email_address: resource.field('email_address'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      user_project: resource.field('user_project'),
    },
    storage_transfer_project_service_account(name, block): {
      local resource = blockType.resource('google_storage_transfer_project_service_account', name),
      _: resource._(block, {
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        member: build.template(std.get(block, 'member', null)),
        project: build.template(std.get(block, 'project', null)),
        subject_id: build.template(std.get(block, 'subject_id', null)),
      }),
      email: resource.field('email'),
      id: resource.field('id'),
      member: resource.field('member'),
      project: resource.field('project'),
      subject_id: resource.field('subject_id'),
    },
    tags_tag_key(name, block): {
      local resource = blockType.resource('google_tags_tag_key', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        namespaced_name: build.template(std.get(block, 'namespaced_name', null)),
        parent: build.template(block.parent),
        short_name: build.template(block.short_name),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      namespaced_name: resource.field('namespaced_name'),
      parent: resource.field('parent'),
      short_name: resource.field('short_name'),
      update_time: resource.field('update_time'),
    },
    tags_tag_key_iam_policy(name, block): {
      local resource = blockType.resource('google_tags_tag_key_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        tag_key: build.template(block.tag_key),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      tag_key: resource.field('tag_key'),
    },
    tags_tag_keys(name, block): {
      local resource = blockType.resource('google_tags_tag_keys', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        keys: build.template(std.get(block, 'keys', null)),
        parent: build.template(block.parent),
      }),
      id: resource.field('id'),
      keys: resource.field('keys'),
      parent: resource.field('parent'),
    },
    tags_tag_value(name, block): {
      local resource = blockType.resource('google_tags_tag_value', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        namespaced_name: build.template(std.get(block, 'namespaced_name', null)),
        parent: build.template(block.parent),
        short_name: build.template(block.short_name),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      namespaced_name: resource.field('namespaced_name'),
      parent: resource.field('parent'),
      short_name: resource.field('short_name'),
      update_time: resource.field('update_time'),
    },
    tags_tag_value_iam_policy(name, block): {
      local resource = blockType.resource('google_tags_tag_value_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        tag_value: build.template(block.tag_value),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      policy_data: resource.field('policy_data'),
      tag_value: resource.field('tag_value'),
    },
    tags_tag_values(name, block): {
      local resource = blockType.resource('google_tags_tag_values', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        parent: build.template(block.parent),
        values: build.template(std.get(block, 'values', null)),
      }),
      id: resource.field('id'),
      parent: resource.field('parent'),
      values: resource.field('values'),
    },
    tpu_tensorflow_versions(name, block): {
      local resource = blockType.resource('google_tpu_tensorflow_versions', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        project: build.template(std.get(block, 'project', null)),
        versions: build.template(std.get(block, 'versions', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      id: resource.field('id'),
      project: resource.field('project'),
      versions: resource.field('versions'),
      zone: resource.field('zone'),
    },
    vertex_ai_index(name, block): {
      local resource = blockType.resource('google_vertex_ai_index', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        deployed_indexes: build.template(std.get(block, 'deployed_indexes', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        effective_labels: build.template(std.get(block, 'effective_labels', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        index_stats: build.template(std.get(block, 'index_stats', null)),
        index_update_method: build.template(std.get(block, 'index_update_method', null)),
        labels: build.template(std.get(block, 'labels', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        metadata_schema_uri: build.template(std.get(block, 'metadata_schema_uri', null)),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(block.region),
        terraform_labels: build.template(std.get(block, 'terraform_labels', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      deployed_indexes: resource.field('deployed_indexes'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      effective_labels: resource.field('effective_labels'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      index_stats: resource.field('index_stats'),
      index_update_method: resource.field('index_update_method'),
      labels: resource.field('labels'),
      metadata: resource.field('metadata'),
      metadata_schema_uri: resource.field('metadata_schema_uri'),
      name: resource.field('name'),
      project: resource.field('project'),
      region: resource.field('region'),
      terraform_labels: resource.field('terraform_labels'),
      update_time: resource.field('update_time'),
    },
    vmwareengine_cluster(name, block): {
      local resource = blockType.resource('google_vmwareengine_cluster', name),
      _: resource._(block, {
        autoscaling_settings: build.template(std.get(block, 'autoscaling_settings', null)),
        id: build.template(std.get(block, 'id', null)),
        management: build.template(std.get(block, 'management', null)),
        name: build.template(block.name),
        node_type_configs: build.template(std.get(block, 'node_type_configs', null)),
        parent: build.template(block.parent),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      autoscaling_settings: resource.field('autoscaling_settings'),
      id: resource.field('id'),
      management: resource.field('management'),
      name: resource.field('name'),
      node_type_configs: resource.field('node_type_configs'),
      parent: resource.field('parent'),
      state: resource.field('state'),
      uid: resource.field('uid'),
    },
    vmwareengine_external_access_rule(name, block): {
      local resource = blockType.resource('google_vmwareengine_external_access_rule', name),
      _: resource._(block, {
        action: build.template(std.get(block, 'action', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        destination_ip_ranges: build.template(std.get(block, 'destination_ip_ranges', null)),
        destination_ports: build.template(std.get(block, 'destination_ports', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_protocol: build.template(std.get(block, 'ip_protocol', null)),
        name: build.template(block.name),
        parent: build.template(block.parent),
        priority: build.template(std.get(block, 'priority', null)),
        source_ip_ranges: build.template(std.get(block, 'source_ip_ranges', null)),
        source_ports: build.template(std.get(block, 'source_ports', null)),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      action: resource.field('action'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      destination_ip_ranges: resource.field('destination_ip_ranges'),
      destination_ports: resource.field('destination_ports'),
      id: resource.field('id'),
      ip_protocol: resource.field('ip_protocol'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      priority: resource.field('priority'),
      source_ip_ranges: resource.field('source_ip_ranges'),
      source_ports: resource.field('source_ports'),
      state: resource.field('state'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    vmwareengine_external_address(name, block): {
      local resource = blockType.resource('google_vmwareengine_external_address', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        external_ip: build.template(std.get(block, 'external_ip', null)),
        id: build.template(std.get(block, 'id', null)),
        internal_ip: build.template(std.get(block, 'internal_ip', null)),
        name: build.template(block.name),
        parent: build.template(block.parent),
        state: build.template(std.get(block, 'state', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      external_ip: resource.field('external_ip'),
      id: resource.field('id'),
      internal_ip: resource.field('internal_ip'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      state: resource.field('state'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
    },
    vmwareengine_network(name, block): {
      local resource = blockType.resource('google_vmwareengine_network', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        type: build.template(std.get(block, 'type', null)),
        uid: build.template(std.get(block, 'uid', null)),
        vpc_networks: build.template(std.get(block, 'vpc_networks', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      state: resource.field('state'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      vpc_networks: resource.field('vpc_networks'),
    },
    vmwareengine_network_peering(name, block): {
      local resource = blockType.resource('google_vmwareengine_network_peering', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        export_custom_routes: build.template(std.get(block, 'export_custom_routes', null)),
        export_custom_routes_with_public_ip: build.template(std.get(block, 'export_custom_routes_with_public_ip', null)),
        id: build.template(std.get(block, 'id', null)),
        import_custom_routes: build.template(std.get(block, 'import_custom_routes', null)),
        import_custom_routes_with_public_ip: build.template(std.get(block, 'import_custom_routes_with_public_ip', null)),
        name: build.template(block.name),
        peer_network: build.template(std.get(block, 'peer_network', null)),
        peer_network_type: build.template(std.get(block, 'peer_network_type', null)),
        project: build.template(std.get(block, 'project', null)),
        state: build.template(std.get(block, 'state', null)),
        state_details: build.template(std.get(block, 'state_details', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        vmware_engine_network: build.template(std.get(block, 'vmware_engine_network', null)),
        vmware_engine_network_canonical: build.template(std.get(block, 'vmware_engine_network_canonical', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      export_custom_routes: resource.field('export_custom_routes'),
      export_custom_routes_with_public_ip: resource.field('export_custom_routes_with_public_ip'),
      id: resource.field('id'),
      import_custom_routes: resource.field('import_custom_routes'),
      import_custom_routes_with_public_ip: resource.field('import_custom_routes_with_public_ip'),
      name: resource.field('name'),
      peer_network: resource.field('peer_network'),
      peer_network_type: resource.field('peer_network_type'),
      project: resource.field('project'),
      state: resource.field('state'),
      state_details: resource.field('state_details'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      vmware_engine_network: resource.field('vmware_engine_network'),
      vmware_engine_network_canonical: resource.field('vmware_engine_network_canonical'),
    },
    vmwareengine_network_policy(name, block): {
      local resource = blockType.resource('google_vmwareengine_network_policy', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        edge_services_cidr: build.template(std.get(block, 'edge_services_cidr', null)),
        external_ip: build.template(std.get(block, 'external_ip', null)),
        id: build.template(std.get(block, 'id', null)),
        internet_access: build.template(std.get(block, 'internet_access', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project: build.template(std.get(block, 'project', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        vmware_engine_network: build.template(std.get(block, 'vmware_engine_network', null)),
        vmware_engine_network_canonical: build.template(std.get(block, 'vmware_engine_network_canonical', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      edge_services_cidr: resource.field('edge_services_cidr'),
      external_ip: resource.field('external_ip'),
      id: resource.field('id'),
      internet_access: resource.field('internet_access'),
      location: resource.field('location'),
      name: resource.field('name'),
      project: resource.field('project'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      vmware_engine_network: resource.field('vmware_engine_network'),
      vmware_engine_network_canonical: resource.field('vmware_engine_network_canonical'),
    },
    vmwareengine_nsx_credentials(name, block): {
      local resource = blockType.resource('google_vmwareengine_nsx_credentials', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        parent: build.template(block.parent),
        password: build.template(std.get(block, 'password', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      id: resource.field('id'),
      parent: resource.field('parent'),
      password: resource.field('password'),
      username: resource.field('username'),
    },
    vmwareengine_private_cloud(name, block): {
      local resource = blockType.resource('google_vmwareengine_private_cloud', name),
      _: resource._(block, {
        deletion_delay_hours: build.template(std.get(block, 'deletion_delay_hours', null)),
        description: build.template(std.get(block, 'description', null)),
        hcx: build.template(std.get(block, 'hcx', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        management_cluster: build.template(std.get(block, 'management_cluster', null)),
        name: build.template(block.name),
        network_config: build.template(std.get(block, 'network_config', null)),
        nsx: build.template(std.get(block, 'nsx', null)),
        project: build.template(std.get(block, 'project', null)),
        send_deletion_delay_hours_if_zero: build.template(std.get(block, 'send_deletion_delay_hours_if_zero', null)),
        state: build.template(std.get(block, 'state', null)),
        type: build.template(std.get(block, 'type', null)),
        uid: build.template(std.get(block, 'uid', null)),
        vcenter: build.template(std.get(block, 'vcenter', null)),
      }),
      deletion_delay_hours: resource.field('deletion_delay_hours'),
      description: resource.field('description'),
      hcx: resource.field('hcx'),
      id: resource.field('id'),
      location: resource.field('location'),
      management_cluster: resource.field('management_cluster'),
      name: resource.field('name'),
      network_config: resource.field('network_config'),
      nsx: resource.field('nsx'),
      project: resource.field('project'),
      send_deletion_delay_hours_if_zero: resource.field('send_deletion_delay_hours_if_zero'),
      state: resource.field('state'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      vcenter: resource.field('vcenter'),
    },
    vmwareengine_subnet(name, block): {
      local resource = blockType.resource('google_vmwareengine_subnet', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        dhcp_address_ranges: build.template(std.get(block, 'dhcp_address_ranges', null)),
        gateway_id: build.template(std.get(block, 'gateway_id', null)),
        gateway_ip: build.template(std.get(block, 'gateway_ip', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_cidr_range: build.template(std.get(block, 'ip_cidr_range', null)),
        name: build.template(block.name),
        parent: build.template(block.parent),
        standard_config: build.template(std.get(block, 'standard_config', null)),
        state: build.template(std.get(block, 'state', null)),
        type: build.template(std.get(block, 'type', null)),
        uid: build.template(std.get(block, 'uid', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
        vlan_id: build.template(std.get(block, 'vlan_id', null)),
      }),
      create_time: resource.field('create_time'),
      dhcp_address_ranges: resource.field('dhcp_address_ranges'),
      gateway_id: resource.field('gateway_id'),
      gateway_ip: resource.field('gateway_ip'),
      id: resource.field('id'),
      ip_cidr_range: resource.field('ip_cidr_range'),
      name: resource.field('name'),
      parent: resource.field('parent'),
      standard_config: resource.field('standard_config'),
      state: resource.field('state'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      update_time: resource.field('update_time'),
      vlan_id: resource.field('vlan_id'),
    },
    vmwareengine_vcenter_credentials(name, block): {
      local resource = blockType.resource('google_vmwareengine_vcenter_credentials', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        parent: build.template(block.parent),
        password: build.template(std.get(block, 'password', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      id: resource.field('id'),
      parent: resource.field('parent'),
      password: resource.field('password'),
      username: resource.field('username'),
    },
    vpc_access_connector(name, block): {
      local resource = blockType.resource('google_vpc_access_connector', name),
      _: resource._(block, {
        connected_projects: build.template(std.get(block, 'connected_projects', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_cidr_range: build.template(std.get(block, 'ip_cidr_range', null)),
        machine_type: build.template(std.get(block, 'machine_type', null)),
        max_instances: build.template(std.get(block, 'max_instances', null)),
        max_throughput: build.template(std.get(block, 'max_throughput', null)),
        min_instances: build.template(std.get(block, 'min_instances', null)),
        min_throughput: build.template(std.get(block, 'min_throughput', null)),
        name: build.template(block.name),
        network: build.template(std.get(block, 'network', null)),
        project: build.template(std.get(block, 'project', null)),
        region: build.template(std.get(block, 'region', null)),
        self_link: build.template(std.get(block, 'self_link', null)),
        state: build.template(std.get(block, 'state', null)),
        subnet: build.template(std.get(block, 'subnet', null)),
      }),
      connected_projects: resource.field('connected_projects'),
      id: resource.field('id'),
      ip_cidr_range: resource.field('ip_cidr_range'),
      machine_type: resource.field('machine_type'),
      max_instances: resource.field('max_instances'),
      max_throughput: resource.field('max_throughput'),
      min_instances: resource.field('min_instances'),
      min_throughput: resource.field('min_throughput'),
      name: resource.field('name'),
      network: resource.field('network'),
      project: resource.field('project'),
      region: resource.field('region'),
      self_link: resource.field('self_link'),
      state: resource.field('state'),
      subnet: resource.field('subnet'),
    },
    workbench_instance_iam_policy(name, block): {
      local resource = blockType.resource('google_workbench_instance_iam_policy', name),
      _: resource._(block, {
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        policy_data: build.template(std.get(block, 'policy_data', null)),
        project: build.template(std.get(block, 'project', null)),
      }),
      etag: resource.field('etag'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      policy_data: resource.field('policy_data'),
      project: resource.field('project'),
    },
  },
  func: {
    location_from_id(id): provider.func('location_from_id', [id]),
    name_from_id(id): provider.func('name_from_id', [id]),
    project_from_id(id): provider.func('project_from_id', [id]),
    region_from_id(id): provider.func('region_from_id', [id]),
    region_from_zone(zone): provider.func('region_from_zone', [zone]),
    zone_from_id(id): provider.func('zone_from_id', [id]),
  },
};

local providerWithConfiguration = provider(null) + {
  withConfiguration(alias, block): provider(std.prune({
    alias: alias,
    access_approval_custom_endpoint: build.template(std.get(block, 'access_approval_custom_endpoint', null)),
    access_context_manager_custom_endpoint: build.template(std.get(block, 'access_context_manager_custom_endpoint', null)),
    access_token: build.template(std.get(block, 'access_token', null)),
    active_directory_custom_endpoint: build.template(std.get(block, 'active_directory_custom_endpoint', null)),
    add_terraform_attribution_label: build.template(std.get(block, 'add_terraform_attribution_label', null)),
    alloydb_custom_endpoint: build.template(std.get(block, 'alloydb_custom_endpoint', null)),
    apigee_custom_endpoint: build.template(std.get(block, 'apigee_custom_endpoint', null)),
    apikeys_custom_endpoint: build.template(std.get(block, 'apikeys_custom_endpoint', null)),
    app_engine_custom_endpoint: build.template(std.get(block, 'app_engine_custom_endpoint', null)),
    apphub_custom_endpoint: build.template(std.get(block, 'apphub_custom_endpoint', null)),
    artifact_registry_custom_endpoint: build.template(std.get(block, 'artifact_registry_custom_endpoint', null)),
    assured_workloads_custom_endpoint: build.template(std.get(block, 'assured_workloads_custom_endpoint', null)),
    beyondcorp_custom_endpoint: build.template(std.get(block, 'beyondcorp_custom_endpoint', null)),
    big_query_custom_endpoint: build.template(std.get(block, 'big_query_custom_endpoint', null)),
    biglake_custom_endpoint: build.template(std.get(block, 'biglake_custom_endpoint', null)),
    bigquery_analytics_hub_custom_endpoint: build.template(std.get(block, 'bigquery_analytics_hub_custom_endpoint', null)),
    bigquery_connection_custom_endpoint: build.template(std.get(block, 'bigquery_connection_custom_endpoint', null)),
    bigquery_data_transfer_custom_endpoint: build.template(std.get(block, 'bigquery_data_transfer_custom_endpoint', null)),
    bigquery_datapolicy_custom_endpoint: build.template(std.get(block, 'bigquery_datapolicy_custom_endpoint', null)),
    bigquery_reservation_custom_endpoint: build.template(std.get(block, 'bigquery_reservation_custom_endpoint', null)),
    bigtable_custom_endpoint: build.template(std.get(block, 'bigtable_custom_endpoint', null)),
    billing_custom_endpoint: build.template(std.get(block, 'billing_custom_endpoint', null)),
    billing_project: build.template(std.get(block, 'billing_project', null)),
    binary_authorization_custom_endpoint: build.template(std.get(block, 'binary_authorization_custom_endpoint', null)),
    blockchain_node_engine_custom_endpoint: build.template(std.get(block, 'blockchain_node_engine_custom_endpoint', null)),
    certificate_manager_custom_endpoint: build.template(std.get(block, 'certificate_manager_custom_endpoint', null)),
    cloud_asset_custom_endpoint: build.template(std.get(block, 'cloud_asset_custom_endpoint', null)),
    cloud_billing_custom_endpoint: build.template(std.get(block, 'cloud_billing_custom_endpoint', null)),
    cloud_build_custom_endpoint: build.template(std.get(block, 'cloud_build_custom_endpoint', null)),
    cloud_build_worker_pool_custom_endpoint: build.template(std.get(block, 'cloud_build_worker_pool_custom_endpoint', null)),
    cloud_functions_custom_endpoint: build.template(std.get(block, 'cloud_functions_custom_endpoint', null)),
    cloud_identity_custom_endpoint: build.template(std.get(block, 'cloud_identity_custom_endpoint', null)),
    cloud_ids_custom_endpoint: build.template(std.get(block, 'cloud_ids_custom_endpoint', null)),
    cloud_quotas_custom_endpoint: build.template(std.get(block, 'cloud_quotas_custom_endpoint', null)),
    cloud_resource_manager_custom_endpoint: build.template(std.get(block, 'cloud_resource_manager_custom_endpoint', null)),
    cloud_run_custom_endpoint: build.template(std.get(block, 'cloud_run_custom_endpoint', null)),
    cloud_run_v2_custom_endpoint: build.template(std.get(block, 'cloud_run_v2_custom_endpoint', null)),
    cloud_scheduler_custom_endpoint: build.template(std.get(block, 'cloud_scheduler_custom_endpoint', null)),
    cloud_tasks_custom_endpoint: build.template(std.get(block, 'cloud_tasks_custom_endpoint', null)),
    cloudbuildv2_custom_endpoint: build.template(std.get(block, 'cloudbuildv2_custom_endpoint', null)),
    clouddeploy_custom_endpoint: build.template(std.get(block, 'clouddeploy_custom_endpoint', null)),
    clouddomains_custom_endpoint: build.template(std.get(block, 'clouddomains_custom_endpoint', null)),
    cloudfunctions2_custom_endpoint: build.template(std.get(block, 'cloudfunctions2_custom_endpoint', null)),
    composer_custom_endpoint: build.template(std.get(block, 'composer_custom_endpoint', null)),
    compute_custom_endpoint: build.template(std.get(block, 'compute_custom_endpoint', null)),
    container_analysis_custom_endpoint: build.template(std.get(block, 'container_analysis_custom_endpoint', null)),
    container_attached_custom_endpoint: build.template(std.get(block, 'container_attached_custom_endpoint', null)),
    container_aws_custom_endpoint: build.template(std.get(block, 'container_aws_custom_endpoint', null)),
    container_azure_custom_endpoint: build.template(std.get(block, 'container_azure_custom_endpoint', null)),
    container_custom_endpoint: build.template(std.get(block, 'container_custom_endpoint', null)),
    core_billing_custom_endpoint: build.template(std.get(block, 'core_billing_custom_endpoint', null)),
    credentials: build.template(std.get(block, 'credentials', null)),
    data_catalog_custom_endpoint: build.template(std.get(block, 'data_catalog_custom_endpoint', null)),
    data_fusion_custom_endpoint: build.template(std.get(block, 'data_fusion_custom_endpoint', null)),
    data_loss_prevention_custom_endpoint: build.template(std.get(block, 'data_loss_prevention_custom_endpoint', null)),
    data_pipeline_custom_endpoint: build.template(std.get(block, 'data_pipeline_custom_endpoint', null)),
    database_migration_service_custom_endpoint: build.template(std.get(block, 'database_migration_service_custom_endpoint', null)),
    dataflow_custom_endpoint: build.template(std.get(block, 'dataflow_custom_endpoint', null)),
    dataplex_custom_endpoint: build.template(std.get(block, 'dataplex_custom_endpoint', null)),
    dataproc_custom_endpoint: build.template(std.get(block, 'dataproc_custom_endpoint', null)),
    dataproc_gdc_custom_endpoint: build.template(std.get(block, 'dataproc_gdc_custom_endpoint', null)),
    dataproc_metastore_custom_endpoint: build.template(std.get(block, 'dataproc_metastore_custom_endpoint', null)),
    datastream_custom_endpoint: build.template(std.get(block, 'datastream_custom_endpoint', null)),
    default_labels: build.template(std.get(block, 'default_labels', null)),
    deployment_manager_custom_endpoint: build.template(std.get(block, 'deployment_manager_custom_endpoint', null)),
    dialogflow_custom_endpoint: build.template(std.get(block, 'dialogflow_custom_endpoint', null)),
    dialogflow_cx_custom_endpoint: build.template(std.get(block, 'dialogflow_cx_custom_endpoint', null)),
    discovery_engine_custom_endpoint: build.template(std.get(block, 'discovery_engine_custom_endpoint', null)),
    dns_custom_endpoint: build.template(std.get(block, 'dns_custom_endpoint', null)),
    document_ai_custom_endpoint: build.template(std.get(block, 'document_ai_custom_endpoint', null)),
    document_ai_warehouse_custom_endpoint: build.template(std.get(block, 'document_ai_warehouse_custom_endpoint', null)),
    edgecontainer_custom_endpoint: build.template(std.get(block, 'edgecontainer_custom_endpoint', null)),
    edgenetwork_custom_endpoint: build.template(std.get(block, 'edgenetwork_custom_endpoint', null)),
    essential_contacts_custom_endpoint: build.template(std.get(block, 'essential_contacts_custom_endpoint', null)),
    eventarc_custom_endpoint: build.template(std.get(block, 'eventarc_custom_endpoint', null)),
    filestore_custom_endpoint: build.template(std.get(block, 'filestore_custom_endpoint', null)),
    firebase_app_check_custom_endpoint: build.template(std.get(block, 'firebase_app_check_custom_endpoint', null)),
    firebaserules_custom_endpoint: build.template(std.get(block, 'firebaserules_custom_endpoint', null)),
    firestore_custom_endpoint: build.template(std.get(block, 'firestore_custom_endpoint', null)),
    gke_backup_custom_endpoint: build.template(std.get(block, 'gke_backup_custom_endpoint', null)),
    gke_hub2_custom_endpoint: build.template(std.get(block, 'gke_hub2_custom_endpoint', null)),
    gke_hub_custom_endpoint: build.template(std.get(block, 'gke_hub_custom_endpoint', null)),
    gkehub_feature_custom_endpoint: build.template(std.get(block, 'gkehub_feature_custom_endpoint', null)),
    gkeonprem_custom_endpoint: build.template(std.get(block, 'gkeonprem_custom_endpoint', null)),
    healthcare_custom_endpoint: build.template(std.get(block, 'healthcare_custom_endpoint', null)),
    iam2_custom_endpoint: build.template(std.get(block, 'iam2_custom_endpoint', null)),
    iam_beta_custom_endpoint: build.template(std.get(block, 'iam_beta_custom_endpoint', null)),
    iam_credentials_custom_endpoint: build.template(std.get(block, 'iam_credentials_custom_endpoint', null)),
    iam_custom_endpoint: build.template(std.get(block, 'iam_custom_endpoint', null)),
    iam_workforce_pool_custom_endpoint: build.template(std.get(block, 'iam_workforce_pool_custom_endpoint', null)),
    iap_custom_endpoint: build.template(std.get(block, 'iap_custom_endpoint', null)),
    identity_platform_custom_endpoint: build.template(std.get(block, 'identity_platform_custom_endpoint', null)),
    impersonate_service_account: build.template(std.get(block, 'impersonate_service_account', null)),
    impersonate_service_account_delegates: build.template(std.get(block, 'impersonate_service_account_delegates', null)),
    integration_connectors_custom_endpoint: build.template(std.get(block, 'integration_connectors_custom_endpoint', null)),
    integrations_custom_endpoint: build.template(std.get(block, 'integrations_custom_endpoint', null)),
    kms_custom_endpoint: build.template(std.get(block, 'kms_custom_endpoint', null)),
    logging_custom_endpoint: build.template(std.get(block, 'logging_custom_endpoint', null)),
    looker_custom_endpoint: build.template(std.get(block, 'looker_custom_endpoint', null)),
    managed_kafka_custom_endpoint: build.template(std.get(block, 'managed_kafka_custom_endpoint', null)),
    memcache_custom_endpoint: build.template(std.get(block, 'memcache_custom_endpoint', null)),
    memorystore_custom_endpoint: build.template(std.get(block, 'memorystore_custom_endpoint', null)),
    migration_center_custom_endpoint: build.template(std.get(block, 'migration_center_custom_endpoint', null)),
    ml_engine_custom_endpoint: build.template(std.get(block, 'ml_engine_custom_endpoint', null)),
    monitoring_custom_endpoint: build.template(std.get(block, 'monitoring_custom_endpoint', null)),
    netapp_custom_endpoint: build.template(std.get(block, 'netapp_custom_endpoint', null)),
    network_connectivity_custom_endpoint: build.template(std.get(block, 'network_connectivity_custom_endpoint', null)),
    network_management_custom_endpoint: build.template(std.get(block, 'network_management_custom_endpoint', null)),
    network_security_custom_endpoint: build.template(std.get(block, 'network_security_custom_endpoint', null)),
    network_services_custom_endpoint: build.template(std.get(block, 'network_services_custom_endpoint', null)),
    notebooks_custom_endpoint: build.template(std.get(block, 'notebooks_custom_endpoint', null)),
    oracle_database_custom_endpoint: build.template(std.get(block, 'oracle_database_custom_endpoint', null)),
    org_policy_custom_endpoint: build.template(std.get(block, 'org_policy_custom_endpoint', null)),
    os_config_custom_endpoint: build.template(std.get(block, 'os_config_custom_endpoint', null)),
    os_login_custom_endpoint: build.template(std.get(block, 'os_login_custom_endpoint', null)),
    privateca_custom_endpoint: build.template(std.get(block, 'privateca_custom_endpoint', null)),
    privileged_access_manager_custom_endpoint: build.template(std.get(block, 'privileged_access_manager_custom_endpoint', null)),
    project: build.template(std.get(block, 'project', null)),
    public_ca_custom_endpoint: build.template(std.get(block, 'public_ca_custom_endpoint', null)),
    pubsub_custom_endpoint: build.template(std.get(block, 'pubsub_custom_endpoint', null)),
    pubsub_lite_custom_endpoint: build.template(std.get(block, 'pubsub_lite_custom_endpoint', null)),
    recaptcha_enterprise_custom_endpoint: build.template(std.get(block, 'recaptcha_enterprise_custom_endpoint', null)),
    redis_custom_endpoint: build.template(std.get(block, 'redis_custom_endpoint', null)),
    region: build.template(std.get(block, 'region', null)),
    request_reason: build.template(std.get(block, 'request_reason', null)),
    request_timeout: build.template(std.get(block, 'request_timeout', null)),
    resource_manager_custom_endpoint: build.template(std.get(block, 'resource_manager_custom_endpoint', null)),
    resource_manager_v3_custom_endpoint: build.template(std.get(block, 'resource_manager_v3_custom_endpoint', null)),
    scopes: build.template(std.get(block, 'scopes', null)),
    secret_manager_custom_endpoint: build.template(std.get(block, 'secret_manager_custom_endpoint', null)),
    secret_manager_regional_custom_endpoint: build.template(std.get(block, 'secret_manager_regional_custom_endpoint', null)),
    secure_source_manager_custom_endpoint: build.template(std.get(block, 'secure_source_manager_custom_endpoint', null)),
    security_center_custom_endpoint: build.template(std.get(block, 'security_center_custom_endpoint', null)),
    security_center_management_custom_endpoint: build.template(std.get(block, 'security_center_management_custom_endpoint', null)),
    security_center_v2_custom_endpoint: build.template(std.get(block, 'security_center_v2_custom_endpoint', null)),
    securityposture_custom_endpoint: build.template(std.get(block, 'securityposture_custom_endpoint', null)),
    service_management_custom_endpoint: build.template(std.get(block, 'service_management_custom_endpoint', null)),
    service_networking_custom_endpoint: build.template(std.get(block, 'service_networking_custom_endpoint', null)),
    service_usage_custom_endpoint: build.template(std.get(block, 'service_usage_custom_endpoint', null)),
    site_verification_custom_endpoint: build.template(std.get(block, 'site_verification_custom_endpoint', null)),
    source_repo_custom_endpoint: build.template(std.get(block, 'source_repo_custom_endpoint', null)),
    spanner_custom_endpoint: build.template(std.get(block, 'spanner_custom_endpoint', null)),
    sql_custom_endpoint: build.template(std.get(block, 'sql_custom_endpoint', null)),
    storage_custom_endpoint: build.template(std.get(block, 'storage_custom_endpoint', null)),
    storage_insights_custom_endpoint: build.template(std.get(block, 'storage_insights_custom_endpoint', null)),
    storage_transfer_custom_endpoint: build.template(std.get(block, 'storage_transfer_custom_endpoint', null)),
    tags_custom_endpoint: build.template(std.get(block, 'tags_custom_endpoint', null)),
    tags_location_custom_endpoint: build.template(std.get(block, 'tags_location_custom_endpoint', null)),
    terraform_attribution_label_addition_strategy: build.template(std.get(block, 'terraform_attribution_label_addition_strategy', null)),
    tpu_custom_endpoint: build.template(std.get(block, 'tpu_custom_endpoint', null)),
    transcoder_custom_endpoint: build.template(std.get(block, 'transcoder_custom_endpoint', null)),
    universe_domain: build.template(std.get(block, 'universe_domain', null)),
    user_project_override: build.template(std.get(block, 'user_project_override', null)),
    vertex_ai_custom_endpoint: build.template(std.get(block, 'vertex_ai_custom_endpoint', null)),
    vmwareengine_custom_endpoint: build.template(std.get(block, 'vmwareengine_custom_endpoint', null)),
    vpc_access_custom_endpoint: build.template(std.get(block, 'vpc_access_custom_endpoint', null)),
    workbench_custom_endpoint: build.template(std.get(block, 'workbench_custom_endpoint', null)),
    workflows_custom_endpoint: build.template(std.get(block, 'workflows_custom_endpoint', null)),
    zone: build.template(std.get(block, 'zone', null)),
  })),
};

providerWithConfiguration
