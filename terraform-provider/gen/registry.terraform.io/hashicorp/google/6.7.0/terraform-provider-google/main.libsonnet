local build = {
  expression(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then val._.ref else std.mapWithKey(function(key, value) self.expression(value), val) else if std.type(val) == 'array' then std.map(function(element) self.expression(element), val) else if std.type(val) == 'string' then '"%s"' % [val] else val,
  template(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then '${%s}' % [val._.ref] else std.mapWithKey(function(key, value) self.template(value), val) else if std.type(val) == 'array' then std.map(function(element) self.template(element), val) else if std.type(val) == 'string' then val else val,
};

local path(segments) = {
  ref: { _: { ref: std.join('.', segments) } },
  child(segment): path(segments + [segment]),
};

local func(name, parameters=[]) = {
  local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]),
  _: { ref: '%s(%s)' % [name, parameterString] },
};

local provider = {
  local name = 'google',
  provider(block): {
    _: {
      block: {
        provider: {
          [name]: std.prune({
            alias: std.get(block, 'alias', null, true),
          }),
        },
      },
    },
  },
  resource: {
    access_context_manager_access_level(name, block): {
      local p = path(['google_access_context_manager_access_level', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_access_level: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                parent: build.template(block.parent),
                title: build.template(block.title),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      title: p.child('title').ref,
    },
    access_context_manager_access_level_condition(name, block): {
      local p = path(['google_access_context_manager_access_level_condition', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_access_level_condition: {
              [name]: std.prune({
                access_level: build.template(block.access_level),
                ip_subnetworks: build.template(std.get(block, 'ip_subnetworks', null, true)),
                members: build.template(std.get(block, 'members', null, true)),
                negate: build.template(std.get(block, 'negate', null, true)),
                regions: build.template(std.get(block, 'regions', null, true)),
                required_access_levels: build.template(std.get(block, 'required_access_levels', null, true)),
              }),
            },
          },
        },
      },
      access_level: p.child('access_level').ref,
      id: p.child('id').ref,
      ip_subnetworks: p.child('ip_subnetworks').ref,
      members: p.child('members').ref,
      negate: p.child('negate').ref,
      regions: p.child('regions').ref,
      required_access_levels: p.child('required_access_levels').ref,
    },
    access_context_manager_access_levels(name, block): {
      local p = path(['google_access_context_manager_access_levels', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_access_levels: {
              [name]: std.prune({
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      parent: p.child('parent').ref,
    },
    access_context_manager_access_policy(name, block): {
      local p = path(['google_access_context_manager_access_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_access_policy: {
              [name]: std.prune({
                parent: build.template(block.parent),
                scopes: build.template(std.get(block, 'scopes', null, true)),
                title: build.template(block.title),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      scopes: p.child('scopes').ref,
      title: p.child('title').ref,
      update_time: p.child('update_time').ref,
    },
    access_context_manager_access_policy_iam_binding(name, block): {
      local p = path(['google_access_context_manager_access_policy_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_access_policy_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      role: p.child('role').ref,
    },
    access_context_manager_access_policy_iam_member(name, block): {
      local p = path(['google_access_context_manager_access_policy_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_access_policy_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      role: p.child('role').ref,
    },
    access_context_manager_access_policy_iam_policy(name, block): {
      local p = path(['google_access_context_manager_access_policy_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_access_policy_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
    },
    access_context_manager_authorized_orgs_desc(name, block): {
      local p = path(['google_access_context_manager_authorized_orgs_desc', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_authorized_orgs_desc: {
              [name]: std.prune({
                asset_type: build.template(std.get(block, 'asset_type', null, true)),
                authorization_direction: build.template(std.get(block, 'authorization_direction', null, true)),
                authorization_type: build.template(std.get(block, 'authorization_type', null, true)),
                name: build.template(block.name),
                orgs: build.template(std.get(block, 'orgs', null, true)),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      asset_type: p.child('asset_type').ref,
      authorization_direction: p.child('authorization_direction').ref,
      authorization_type: p.child('authorization_type').ref,
      create_time: p.child('create_time').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      orgs: p.child('orgs').ref,
      parent: p.child('parent').ref,
      update_time: p.child('update_time').ref,
    },
    access_context_manager_egress_policy(name, block): {
      local p = path(['google_access_context_manager_egress_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_egress_policy: {
              [name]: std.prune({
                egress_policy_name: build.template(block.egress_policy_name),
                resource: build.template(block.resource),
              }),
            },
          },
        },
      },
      egress_policy_name: p.child('egress_policy_name').ref,
      id: p.child('id').ref,
      resource: p.child('resource').ref,
    },
    access_context_manager_gcp_user_access_binding(name, block): {
      local p = path(['google_access_context_manager_gcp_user_access_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_gcp_user_access_binding: {
              [name]: std.prune({
                access_levels: build.template(block.access_levels),
                group_key: build.template(block.group_key),
                organization_id: build.template(block.organization_id),
              }),
            },
          },
        },
      },
      access_levels: p.child('access_levels').ref,
      group_key: p.child('group_key').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      organization_id: p.child('organization_id').ref,
    },
    access_context_manager_ingress_policy(name, block): {
      local p = path(['google_access_context_manager_ingress_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_ingress_policy: {
              [name]: std.prune({
                ingress_policy_name: build.template(block.ingress_policy_name),
                resource: build.template(block.resource),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      ingress_policy_name: p.child('ingress_policy_name').ref,
      resource: p.child('resource').ref,
    },
    access_context_manager_service_perimeter(name, block): {
      local p = path(['google_access_context_manager_service_perimeter', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_service_perimeter: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                parent: build.template(block.parent),
                perimeter_type: build.template(std.get(block, 'perimeter_type', null, true)),
                title: build.template(block.title),
                use_explicit_dry_run_spec: build.template(std.get(block, 'use_explicit_dry_run_spec', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      perimeter_type: p.child('perimeter_type').ref,
      title: p.child('title').ref,
      update_time: p.child('update_time').ref,
      use_explicit_dry_run_spec: p.child('use_explicit_dry_run_spec').ref,
    },
    access_context_manager_service_perimeter_dry_run_egress_policy(name, block): {
      local p = path(['google_access_context_manager_service_perimeter_dry_run_egress_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_service_perimeter_dry_run_egress_policy: {
              [name]: std.prune({
                perimeter: build.template(block.perimeter),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      perimeter: p.child('perimeter').ref,
    },
    access_context_manager_service_perimeter_dry_run_ingress_policy(name, block): {
      local p = path(['google_access_context_manager_service_perimeter_dry_run_ingress_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_service_perimeter_dry_run_ingress_policy: {
              [name]: std.prune({
                perimeter: build.template(block.perimeter),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      perimeter: p.child('perimeter').ref,
    },
    access_context_manager_service_perimeter_dry_run_resource(name, block): {
      local p = path(['google_access_context_manager_service_perimeter_dry_run_resource', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_service_perimeter_dry_run_resource: {
              [name]: std.prune({
                perimeter_name: build.template(block.perimeter_name),
                resource: build.template(block.resource),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      perimeter_name: p.child('perimeter_name').ref,
      resource: p.child('resource').ref,
    },
    access_context_manager_service_perimeter_egress_policy(name, block): {
      local p = path(['google_access_context_manager_service_perimeter_egress_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_service_perimeter_egress_policy: {
              [name]: std.prune({
                perimeter: build.template(block.perimeter),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      perimeter: p.child('perimeter').ref,
    },
    access_context_manager_service_perimeter_ingress_policy(name, block): {
      local p = path(['google_access_context_manager_service_perimeter_ingress_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_service_perimeter_ingress_policy: {
              [name]: std.prune({
                perimeter: build.template(block.perimeter),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      perimeter: p.child('perimeter').ref,
    },
    access_context_manager_service_perimeter_resource(name, block): {
      local p = path(['google_access_context_manager_service_perimeter_resource', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_service_perimeter_resource: {
              [name]: std.prune({
                perimeter_name: build.template(block.perimeter_name),
                resource: build.template(block.resource),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      perimeter_name: p.child('perimeter_name').ref,
      resource: p.child('resource').ref,
    },
    access_context_manager_service_perimeters(name, block): {
      local p = path(['google_access_context_manager_service_perimeters', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_access_context_manager_service_perimeters: {
              [name]: std.prune({
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      parent: p.child('parent').ref,
    },
    active_directory_domain(name, block): {
      local p = path(['google_active_directory_domain', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_active_directory_domain: {
              [name]: std.prune({
                admin: build.template(std.get(block, 'admin', null, true)),
                authorized_networks: build.template(std.get(block, 'authorized_networks', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                domain_name: build.template(block.domain_name),
                labels: build.template(std.get(block, 'labels', null, true)),
                locations: build.template(block.locations),
                reserved_ip_range: build.template(block.reserved_ip_range),
              }),
            },
          },
        },
      },
      admin: p.child('admin').ref,
      authorized_networks: p.child('authorized_networks').ref,
      deletion_protection: p.child('deletion_protection').ref,
      domain_name: p.child('domain_name').ref,
      effective_labels: p.child('effective_labels').ref,
      fqdn: p.child('fqdn').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      locations: p.child('locations').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      reserved_ip_range: p.child('reserved_ip_range').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    active_directory_domain_trust(name, block): {
      local p = path(['google_active_directory_domain_trust', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_active_directory_domain_trust: {
              [name]: std.prune({
                domain: build.template(block.domain),
                selective_authentication: build.template(std.get(block, 'selective_authentication', null, true)),
                target_dns_ip_addresses: build.template(block.target_dns_ip_addresses),
                target_domain_name: build.template(block.target_domain_name),
                trust_direction: build.template(block.trust_direction),
                trust_handshake_secret: build.template(block.trust_handshake_secret),
                trust_type: build.template(block.trust_type),
              }),
            },
          },
        },
      },
      domain: p.child('domain').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      selective_authentication: p.child('selective_authentication').ref,
      target_dns_ip_addresses: p.child('target_dns_ip_addresses').ref,
      target_domain_name: p.child('target_domain_name').ref,
      trust_direction: p.child('trust_direction').ref,
      trust_handshake_secret: p.child('trust_handshake_secret').ref,
      trust_type: p.child('trust_type').ref,
    },
    alloydb_backup(name, block): {
      local p = path(['google_alloydb_backup', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_alloydb_backup: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                backup_id: build.template(block.backup_id),
                cluster_name: build.template(block.cluster_name),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      backup_id: p.child('backup_id').ref,
      cluster_name: p.child('cluster_name').ref,
      cluster_uid: p.child('cluster_uid').ref,
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      encryption_info: p.child('encryption_info').ref,
      etag: p.child('etag').ref,
      expiry_quantity: p.child('expiry_quantity').ref,
      expiry_time: p.child('expiry_time').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      size_bytes: p.child('size_bytes').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    alloydb_cluster(name, block): {
      local p = path(['google_alloydb_cluster', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_alloydb_cluster: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                cluster_id: build.template(block.cluster_id),
                cluster_type: build.template(std.get(block, 'cluster_type', null, true)),
                deletion_policy: build.template(std.get(block, 'deletion_policy', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                etag: build.template(std.get(block, 'etag', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      backup_source: p.child('backup_source').ref,
      cluster_id: p.child('cluster_id').ref,
      cluster_type: p.child('cluster_type').ref,
      continuous_backup_info: p.child('continuous_backup_info').ref,
      database_version: p.child('database_version').ref,
      deletion_policy: p.child('deletion_policy').ref,
      display_name: p.child('display_name').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      encryption_info: p.child('encryption_info').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      migration_source: p.child('migration_source').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      state: p.child('state').ref,
      subscription_type: p.child('subscription_type').ref,
      terraform_labels: p.child('terraform_labels').ref,
      trial_metadata: p.child('trial_metadata').ref,
      uid: p.child('uid').ref,
    },
    alloydb_instance(name, block): {
      local p = path(['google_alloydb_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_alloydb_instance: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                cluster: build.template(block.cluster),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                gce_zone: build.template(std.get(block, 'gce_zone', null, true)),
                instance_id: build.template(block.instance_id),
                instance_type: build.template(block.instance_type),
                labels: build.template(std.get(block, 'labels', null, true)),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      availability_type: p.child('availability_type').ref,
      cluster: p.child('cluster').ref,
      create_time: p.child('create_time').ref,
      database_flags: p.child('database_flags').ref,
      display_name: p.child('display_name').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      gce_zone: p.child('gce_zone').ref,
      id: p.child('id').ref,
      instance_id: p.child('instance_id').ref,
      instance_type: p.child('instance_type').ref,
      ip_address: p.child('ip_address').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      outbound_public_ip_addresses: p.child('outbound_public_ip_addresses').ref,
      public_ip_address: p.child('public_ip_address').ref,
      reconciling: p.child('reconciling').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    alloydb_user(name, block): {
      local p = path(['google_alloydb_user', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_alloydb_user: {
              [name]: std.prune({
                cluster: build.template(block.cluster),
                database_roles: build.template(std.get(block, 'database_roles', null, true)),
                password: build.template(std.get(block, 'password', null, true)),
                user_id: build.template(block.user_id),
                user_type: build.template(block.user_type),
              }),
            },
          },
        },
      },
      cluster: p.child('cluster').ref,
      database_roles: p.child('database_roles').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      password: p.child('password').ref,
      user_id: p.child('user_id').ref,
      user_type: p.child('user_type').ref,
    },
    apigee_addons_config(name, block): {
      local p = path(['google_apigee_addons_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_addons_config: {
              [name]: std.prune({
                org: build.template(block.org),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      org: p.child('org').ref,
    },
    apigee_endpoint_attachment(name, block): {
      local p = path(['google_apigee_endpoint_attachment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_endpoint_attachment: {
              [name]: std.prune({
                endpoint_attachment_id: build.template(block.endpoint_attachment_id),
                location: build.template(block.location),
                org_id: build.template(block.org_id),
                service_attachment: build.template(block.service_attachment),
              }),
            },
          },
        },
      },
      connection_state: p.child('connection_state').ref,
      endpoint_attachment_id: p.child('endpoint_attachment_id').ref,
      host: p.child('host').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      org_id: p.child('org_id').ref,
      service_attachment: p.child('service_attachment').ref,
    },
    apigee_env_keystore(name, block): {
      local p = path(['google_apigee_env_keystore', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_env_keystore: {
              [name]: std.prune({
                env_id: build.template(block.env_id),
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      aliases: p.child('aliases').ref,
      env_id: p.child('env_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
    },
    apigee_env_references(name, block): {
      local p = path(['google_apigee_env_references', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_env_references: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                env_id: build.template(block.env_id),
                name: build.template(block.name),
                refers: build.template(block.refers),
                resource_type: build.template(block.resource_type),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      env_id: p.child('env_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      refers: p.child('refers').ref,
      resource_type: p.child('resource_type').ref,
    },
    apigee_envgroup(name, block): {
      local p = path(['google_apigee_envgroup', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_envgroup: {
              [name]: std.prune({
                hostnames: build.template(std.get(block, 'hostnames', null, true)),
                name: build.template(block.name),
                org_id: build.template(block.org_id),
              }),
            },
          },
        },
      },
      hostnames: p.child('hostnames').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      org_id: p.child('org_id').ref,
    },
    apigee_envgroup_attachment(name, block): {
      local p = path(['google_apigee_envgroup_attachment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_envgroup_attachment: {
              [name]: std.prune({
                envgroup_id: build.template(block.envgroup_id),
                environment: build.template(block.environment),
              }),
            },
          },
        },
      },
      envgroup_id: p.child('envgroup_id').ref,
      environment: p.child('environment').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
    },
    apigee_environment(name, block): {
      local p = path(['google_apigee_environment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_environment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                forward_proxy_uri: build.template(std.get(block, 'forward_proxy_uri', null, true)),
                name: build.template(block.name),
                org_id: build.template(block.org_id),
              }),
            },
          },
        },
      },
      api_proxy_type: p.child('api_proxy_type').ref,
      deployment_type: p.child('deployment_type').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      forward_proxy_uri: p.child('forward_proxy_uri').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      org_id: p.child('org_id').ref,
      type: p.child('type').ref,
    },
    apigee_environment_iam_binding(name, block): {
      local p = path(['google_apigee_environment_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_environment_iam_binding: {
              [name]: std.prune({
                env_id: build.template(block.env_id),
                members: build.template(block.members),
                org_id: build.template(block.org_id),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      env_id: p.child('env_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      org_id: p.child('org_id').ref,
      role: p.child('role').ref,
    },
    apigee_environment_iam_member(name, block): {
      local p = path(['google_apigee_environment_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_environment_iam_member: {
              [name]: std.prune({
                env_id: build.template(block.env_id),
                member: build.template(block.member),
                org_id: build.template(block.org_id),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      env_id: p.child('env_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      org_id: p.child('org_id').ref,
      role: p.child('role').ref,
    },
    apigee_environment_iam_policy(name, block): {
      local p = path(['google_apigee_environment_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_environment_iam_policy: {
              [name]: std.prune({
                env_id: build.template(block.env_id),
                org_id: build.template(block.org_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      env_id: p.child('env_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      org_id: p.child('org_id').ref,
      policy_data: p.child('policy_data').ref,
    },
    apigee_environment_keyvaluemaps(name, block): {
      local p = path(['google_apigee_environment_keyvaluemaps', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_environment_keyvaluemaps: {
              [name]: std.prune({
                env_id: build.template(block.env_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      env_id: p.child('env_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
    },
    apigee_environment_keyvaluemaps_entries(name, block): {
      local p = path(['google_apigee_environment_keyvaluemaps_entries', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_environment_keyvaluemaps_entries: {
              [name]: std.prune({
                env_keyvaluemap_id: build.template(block.env_keyvaluemap_id),
                name: build.template(block.name),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      env_keyvaluemap_id: p.child('env_keyvaluemap_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      value: p.child('value').ref,
    },
    apigee_flowhook(name, block): {
      local p = path(['google_apigee_flowhook', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_flowhook: {
              [name]: std.prune({
                continue_on_error: build.template(std.get(block, 'continue_on_error', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                environment: build.template(block.environment),
                flow_hook_point: build.template(block.flow_hook_point),
                org_id: build.template(block.org_id),
                sharedflow: build.template(block.sharedflow),
              }),
            },
          },
        },
      },
      continue_on_error: p.child('continue_on_error').ref,
      description: p.child('description').ref,
      environment: p.child('environment').ref,
      flow_hook_point: p.child('flow_hook_point').ref,
      id: p.child('id').ref,
      org_id: p.child('org_id').ref,
      sharedflow: p.child('sharedflow').ref,
    },
    apigee_instance(name, block): {
      local p = path(['google_apigee_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_instance: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                disk_encryption_key_name: build.template(std.get(block, 'disk_encryption_key_name', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                ip_range: build.template(std.get(block, 'ip_range', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                org_id: build.template(block.org_id),
              }),
            },
          },
        },
      },
      consumer_accept_list: p.child('consumer_accept_list').ref,
      description: p.child('description').ref,
      disk_encryption_key_name: p.child('disk_encryption_key_name').ref,
      display_name: p.child('display_name').ref,
      host: p.child('host').ref,
      id: p.child('id').ref,
      ip_range: p.child('ip_range').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      org_id: p.child('org_id').ref,
      peering_cidr_range: p.child('peering_cidr_range').ref,
      port: p.child('port').ref,
      service_attachment: p.child('service_attachment').ref,
    },
    apigee_instance_attachment(name, block): {
      local p = path(['google_apigee_instance_attachment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_instance_attachment: {
              [name]: std.prune({
                environment: build.template(block.environment),
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      environment: p.child('environment').ref,
      id: p.child('id').ref,
      instance_id: p.child('instance_id').ref,
      name: p.child('name').ref,
    },
    apigee_keystores_aliases_key_cert_file(name, block): {
      local p = path(['google_apigee_keystores_aliases_key_cert_file', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_keystores_aliases_key_cert_file: {
              [name]: std.prune({
                alias: build.template(block.alias),
                cert: build.template(block.cert),
                environment: build.template(block.environment),
                key: build.template(std.get(block, 'key', null, true)),
                keystore: build.template(block.keystore),
                org_id: build.template(block.org_id),
                password: build.template(std.get(block, 'password', null, true)),
              }),
            },
          },
        },
      },
      alias: p.child('alias').ref,
      cert: p.child('cert').ref,
      environment: p.child('environment').ref,
      id: p.child('id').ref,
      key: p.child('key').ref,
      keystore: p.child('keystore').ref,
      org_id: p.child('org_id').ref,
      password: p.child('password').ref,
      type: p.child('type').ref,
    },
    apigee_keystores_aliases_pkcs12(name, block): {
      local p = path(['google_apigee_keystores_aliases_pkcs12', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_keystores_aliases_pkcs12: {
              [name]: std.prune({
                alias: build.template(block.alias),
                environment: build.template(block.environment),
                file: build.template(block.file),
                filehash: build.template(block.filehash),
                keystore: build.template(block.keystore),
                org_id: build.template(block.org_id),
              }),
            },
          },
        },
      },
      alias: p.child('alias').ref,
      certs_info: p.child('certs_info').ref,
      environment: p.child('environment').ref,
      file: p.child('file').ref,
      filehash: p.child('filehash').ref,
      id: p.child('id').ref,
      keystore: p.child('keystore').ref,
      org_id: p.child('org_id').ref,
      password: p.child('password').ref,
      type: p.child('type').ref,
    },
    apigee_keystores_aliases_self_signed_cert(name, block): {
      local p = path(['google_apigee_keystores_aliases_self_signed_cert', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_keystores_aliases_self_signed_cert: {
              [name]: std.prune({
                alias: build.template(block.alias),
                cert_validity_in_days: build.template(std.get(block, 'cert_validity_in_days', null, true)),
                environment: build.template(block.environment),
                key_size: build.template(std.get(block, 'key_size', null, true)),
                keystore: build.template(block.keystore),
                org_id: build.template(block.org_id),
                sig_alg: build.template(block.sig_alg),
              }),
            },
          },
        },
      },
      alias: p.child('alias').ref,
      cert_validity_in_days: p.child('cert_validity_in_days').ref,
      certs_info: p.child('certs_info').ref,
      environment: p.child('environment').ref,
      id: p.child('id').ref,
      key_size: p.child('key_size').ref,
      keystore: p.child('keystore').ref,
      org_id: p.child('org_id').ref,
      sig_alg: p.child('sig_alg').ref,
      type: p.child('type').ref,
    },
    apigee_nat_address(name, block): {
      local p = path(['google_apigee_nat_address', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_nat_address: {
              [name]: std.prune({
                activate: build.template(std.get(block, 'activate', null, true)),
                instance_id: build.template(block.instance_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      activate: p.child('activate').ref,
      id: p.child('id').ref,
      instance_id: p.child('instance_id').ref,
      ip_address: p.child('ip_address').ref,
      name: p.child('name').ref,
      state: p.child('state').ref,
    },
    apigee_organization(name, block): {
      local p = path(['google_apigee_organization', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_organization: {
              [name]: std.prune({
                analytics_region: build.template(std.get(block, 'analytics_region', null, true)),
                api_consumer_data_encryption_key_name: build.template(std.get(block, 'api_consumer_data_encryption_key_name', null, true)),
                api_consumer_data_location: build.template(std.get(block, 'api_consumer_data_location', null, true)),
                authorized_network: build.template(std.get(block, 'authorized_network', null, true)),
                control_plane_encryption_key_name: build.template(std.get(block, 'control_plane_encryption_key_name', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                disable_vpc_peering: build.template(std.get(block, 'disable_vpc_peering', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                project_id: build.template(block.project_id),
                retention: build.template(std.get(block, 'retention', null, true)),
                runtime_database_encryption_key_name: build.template(std.get(block, 'runtime_database_encryption_key_name', null, true)),
                runtime_type: build.template(std.get(block, 'runtime_type', null, true)),
              }),
            },
          },
        },
      },
      analytics_region: p.child('analytics_region').ref,
      api_consumer_data_encryption_key_name: p.child('api_consumer_data_encryption_key_name').ref,
      api_consumer_data_location: p.child('api_consumer_data_location').ref,
      apigee_project_id: p.child('apigee_project_id').ref,
      authorized_network: p.child('authorized_network').ref,
      billing_type: p.child('billing_type').ref,
      ca_certificate: p.child('ca_certificate').ref,
      control_plane_encryption_key_name: p.child('control_plane_encryption_key_name').ref,
      description: p.child('description').ref,
      disable_vpc_peering: p.child('disable_vpc_peering').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project_id: p.child('project_id').ref,
      retention: p.child('retention').ref,
      runtime_database_encryption_key_name: p.child('runtime_database_encryption_key_name').ref,
      runtime_type: p.child('runtime_type').ref,
      subscription_type: p.child('subscription_type').ref,
    },
    apigee_sharedflow(name, block): {
      local p = path(['google_apigee_sharedflow', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_sharedflow: {
              [name]: std.prune({
                config_bundle: build.template(block.config_bundle),
                detect_md5hash: build.template(std.get(block, 'detect_md5hash', null, true)),
                name: build.template(block.name),
                org_id: build.template(block.org_id),
              }),
            },
          },
        },
      },
      config_bundle: p.child('config_bundle').ref,
      detect_md5hash: p.child('detect_md5hash').ref,
      id: p.child('id').ref,
      latest_revision_id: p.child('latest_revision_id').ref,
      md5hash: p.child('md5hash').ref,
      meta_data: p.child('meta_data').ref,
      name: p.child('name').ref,
      org_id: p.child('org_id').ref,
      revision: p.child('revision').ref,
    },
    apigee_sharedflow_deployment(name, block): {
      local p = path(['google_apigee_sharedflow_deployment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_sharedflow_deployment: {
              [name]: std.prune({
                environment: build.template(block.environment),
                org_id: build.template(block.org_id),
                revision: build.template(block.revision),
                service_account: build.template(std.get(block, 'service_account', null, true)),
                sharedflow_id: build.template(block.sharedflow_id),
              }),
            },
          },
        },
      },
      environment: p.child('environment').ref,
      id: p.child('id').ref,
      org_id: p.child('org_id').ref,
      revision: p.child('revision').ref,
      service_account: p.child('service_account').ref,
      sharedflow_id: p.child('sharedflow_id').ref,
    },
    apigee_sync_authorization(name, block): {
      local p = path(['google_apigee_sync_authorization', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_sync_authorization: {
              [name]: std.prune({
                identities: build.template(block.identities),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      identities: p.child('identities').ref,
      name: p.child('name').ref,
    },
    apigee_target_server(name, block): {
      local p = path(['google_apigee_target_server', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apigee_target_server: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                env_id: build.template(block.env_id),
                host: build.template(block.host),
                is_enabled: build.template(std.get(block, 'is_enabled', null, true)),
                name: build.template(block.name),
                port: build.template(block.port),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      env_id: p.child('env_id').ref,
      host: p.child('host').ref,
      id: p.child('id').ref,
      is_enabled: p.child('is_enabled').ref,
      name: p.child('name').ref,
      port: p.child('port').ref,
      protocol: p.child('protocol').ref,
    },
    apikeys_key(name, block): {
      local p = path(['google_apikeys_key', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apikeys_key: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      key_string: p.child('key_string').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      uid: p.child('uid').ref,
    },
    app_engine_application(name, block): {
      local p = path(['google_app_engine_application', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_app_engine_application: {
              [name]: std.prune({
                location_id: build.template(block.location_id),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      auth_domain: p.child('auth_domain').ref,
      code_bucket: p.child('code_bucket').ref,
      database_type: p.child('database_type').ref,
      default_bucket: p.child('default_bucket').ref,
      default_hostname: p.child('default_hostname').ref,
      gcr_domain: p.child('gcr_domain').ref,
      id: p.child('id').ref,
      location_id: p.child('location_id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      serving_status: p.child('serving_status').ref,
      url_dispatch_rule: p.child('url_dispatch_rule').ref,
    },
    app_engine_application_url_dispatch_rules(name, block): {
      local p = path(['google_app_engine_application_url_dispatch_rules', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_app_engine_application_url_dispatch_rules: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      project: p.child('project').ref,
    },
    app_engine_domain_mapping(name, block): {
      local p = path(['google_app_engine_domain_mapping', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_app_engine_domain_mapping: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                override_strategy: build.template(std.get(block, 'override_strategy', null, true)),
              }),
            },
          },
        },
      },
      domain_name: p.child('domain_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      override_strategy: p.child('override_strategy').ref,
      project: p.child('project').ref,
      resource_records: p.child('resource_records').ref,
    },
    app_engine_firewall_rule(name, block): {
      local p = path(['google_app_engine_firewall_rule', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_app_engine_firewall_rule: {
              [name]: std.prune({
                action: build.template(block.action),
                description: build.template(std.get(block, 'description', null, true)),
                priority: build.template(std.get(block, 'priority', null, true)),
                source_range: build.template(block.source_range),
              }),
            },
          },
        },
      },
      action: p.child('action').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      priority: p.child('priority').ref,
      project: p.child('project').ref,
      source_range: p.child('source_range').ref,
    },
    app_engine_flexible_app_version(name, block): {
      local p = path(['google_app_engine_flexible_app_version', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_app_engine_flexible_app_version: {
              [name]: std.prune({
                beta_settings: build.template(std.get(block, 'beta_settings', null, true)),
                default_expiration: build.template(std.get(block, 'default_expiration', null, true)),
                delete_service_on_destroy: build.template(std.get(block, 'delete_service_on_destroy', null, true)),
                env_variables: build.template(std.get(block, 'env_variables', null, true)),
                inbound_services: build.template(std.get(block, 'inbound_services', null, true)),
                instance_class: build.template(std.get(block, 'instance_class', null, true)),
                nobuild_files_regex: build.template(std.get(block, 'nobuild_files_regex', null, true)),
                noop_on_destroy: build.template(std.get(block, 'noop_on_destroy', null, true)),
                runtime: build.template(block.runtime),
                runtime_channel: build.template(std.get(block, 'runtime_channel', null, true)),
                runtime_main_executable_path: build.template(std.get(block, 'runtime_main_executable_path', null, true)),
                service: build.template(block.service),
                serving_status: build.template(std.get(block, 'serving_status', null, true)),
                version_id: build.template(std.get(block, 'version_id', null, true)),
              }),
            },
          },
        },
      },
      beta_settings: p.child('beta_settings').ref,
      default_expiration: p.child('default_expiration').ref,
      delete_service_on_destroy: p.child('delete_service_on_destroy').ref,
      env_variables: p.child('env_variables').ref,
      id: p.child('id').ref,
      inbound_services: p.child('inbound_services').ref,
      instance_class: p.child('instance_class').ref,
      name: p.child('name').ref,
      nobuild_files_regex: p.child('nobuild_files_regex').ref,
      noop_on_destroy: p.child('noop_on_destroy').ref,
      project: p.child('project').ref,
      runtime: p.child('runtime').ref,
      runtime_api_version: p.child('runtime_api_version').ref,
      runtime_channel: p.child('runtime_channel').ref,
      runtime_main_executable_path: p.child('runtime_main_executable_path').ref,
      service: p.child('service').ref,
      service_account: p.child('service_account').ref,
      serving_status: p.child('serving_status').ref,
      version_id: p.child('version_id').ref,
    },
    app_engine_service_network_settings(name, block): {
      local p = path(['google_app_engine_service_network_settings', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_app_engine_service_network_settings: {
              [name]: std.prune({
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
    },
    app_engine_service_split_traffic(name, block): {
      local p = path(['google_app_engine_service_split_traffic', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_app_engine_service_split_traffic: {
              [name]: std.prune({
                migrate_traffic: build.template(std.get(block, 'migrate_traffic', null, true)),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      migrate_traffic: p.child('migrate_traffic').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
    },
    app_engine_standard_app_version(name, block): {
      local p = path(['google_app_engine_standard_app_version', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_app_engine_standard_app_version: {
              [name]: std.prune({
                app_engine_apis: build.template(std.get(block, 'app_engine_apis', null, true)),
                delete_service_on_destroy: build.template(std.get(block, 'delete_service_on_destroy', null, true)),
                env_variables: build.template(std.get(block, 'env_variables', null, true)),
                inbound_services: build.template(std.get(block, 'inbound_services', null, true)),
                noop_on_destroy: build.template(std.get(block, 'noop_on_destroy', null, true)),
                runtime: build.template(block.runtime),
                runtime_api_version: build.template(std.get(block, 'runtime_api_version', null, true)),
                service: build.template(block.service),
                threadsafe: build.template(std.get(block, 'threadsafe', null, true)),
                version_id: build.template(std.get(block, 'version_id', null, true)),
              }),
            },
          },
        },
      },
      app_engine_apis: p.child('app_engine_apis').ref,
      delete_service_on_destroy: p.child('delete_service_on_destroy').ref,
      env_variables: p.child('env_variables').ref,
      id: p.child('id').ref,
      inbound_services: p.child('inbound_services').ref,
      instance_class: p.child('instance_class').ref,
      name: p.child('name').ref,
      noop_on_destroy: p.child('noop_on_destroy').ref,
      project: p.child('project').ref,
      runtime: p.child('runtime').ref,
      runtime_api_version: p.child('runtime_api_version').ref,
      service: p.child('service').ref,
      service_account: p.child('service_account').ref,
      threadsafe: p.child('threadsafe').ref,
      version_id: p.child('version_id').ref,
    },
    apphub_application(name, block): {
      local p = path(['google_apphub_application', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apphub_application: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    apphub_service(name, block): {
      local p = path(['google_apphub_service', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apphub_service: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                description: build.template(std.get(block, 'description', null, true)),
                discovered_service: build.template(block.discovered_service),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                location: build.template(block.location),
                service_id: build.template(block.service_id),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      discovered_service: p.child('discovered_service').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_id: p.child('service_id').ref,
      service_properties: p.child('service_properties').ref,
      service_reference: p.child('service_reference').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    apphub_service_project_attachment(name, block): {
      local p = path(['google_apphub_service_project_attachment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apphub_service_project_attachment: {
              [name]: std.prune({
                service_project: build.template(std.get(block, 'service_project', null, true)),
                service_project_attachment_id: build.template(block.service_project_attachment_id),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_project: p.child('service_project').ref,
      service_project_attachment_id: p.child('service_project_attachment_id').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
    },
    apphub_workload(name, block): {
      local p = path(['google_apphub_workload', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_apphub_workload: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                description: build.template(std.get(block, 'description', null, true)),
                discovered_workload: build.template(block.discovered_workload),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                location: build.template(block.location),
                workload_id: build.template(block.workload_id),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      discovered_workload: p.child('discovered_workload').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      workload_id: p.child('workload_id').ref,
      workload_properties: p.child('workload_properties').ref,
      workload_reference: p.child('workload_reference').ref,
    },
    artifact_registry_repository(name, block): {
      local p = path(['google_artifact_registry_repository', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_artifact_registry_repository: {
              [name]: std.prune({
                cleanup_policy_dry_run: build.template(std.get(block, 'cleanup_policy_dry_run', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                format: build.template(block.format),
                kms_key_name: build.template(std.get(block, 'kms_key_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                mode: build.template(std.get(block, 'mode', null, true)),
                repository_id: build.template(block.repository_id),
              }),
            },
          },
        },
      },
      cleanup_policy_dry_run: p.child('cleanup_policy_dry_run').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      format: p.child('format').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      mode: p.child('mode').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      repository_id: p.child('repository_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    artifact_registry_repository_iam_binding(name, block): {
      local p = path(['google_artifact_registry_repository_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_artifact_registry_repository_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                repository: build.template(block.repository),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      repository: p.child('repository').ref,
      role: p.child('role').ref,
    },
    artifact_registry_repository_iam_member(name, block): {
      local p = path(['google_artifact_registry_repository_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_artifact_registry_repository_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                repository: build.template(block.repository),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      repository: p.child('repository').ref,
      role: p.child('role').ref,
    },
    artifact_registry_repository_iam_policy(name, block): {
      local p = path(['google_artifact_registry_repository_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_artifact_registry_repository_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                repository: build.template(block.repository),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      repository: p.child('repository').ref,
    },
    assured_workloads_workload(name, block): {
      local p = path(['google_assured_workloads_workload', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_assured_workloads_workload: {
              [name]: std.prune({
                billing_account: build.template(std.get(block, 'billing_account', null, true)),
                compliance_regime: build.template(block.compliance_regime),
                display_name: build.template(block.display_name),
                enable_sovereign_controls: build.template(std.get(block, 'enable_sovereign_controls', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                organization: build.template(block.organization),
                partner: build.template(std.get(block, 'partner', null, true)),
                partner_services_billing_account: build.template(std.get(block, 'partner_services_billing_account', null, true)),
                provisioned_resources_parent: build.template(std.get(block, 'provisioned_resources_parent', null, true)),
              }),
            },
          },
        },
      },
      billing_account: p.child('billing_account').ref,
      compliance_regime: p.child('compliance_regime').ref,
      compliance_status: p.child('compliance_status').ref,
      compliant_but_disallowed_services: p.child('compliant_but_disallowed_services').ref,
      create_time: p.child('create_time').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      ekm_provisioning_response: p.child('ekm_provisioning_response').ref,
      enable_sovereign_controls: p.child('enable_sovereign_controls').ref,
      id: p.child('id').ref,
      kaj_enrollment_state: p.child('kaj_enrollment_state').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      partner: p.child('partner').ref,
      partner_services_billing_account: p.child('partner_services_billing_account').ref,
      provisioned_resources_parent: p.child('provisioned_resources_parent').ref,
      resources: p.child('resources').ref,
      saa_enrollment_response: p.child('saa_enrollment_response').ref,
      terraform_labels: p.child('terraform_labels').ref,
      violation_notifications_enabled: p.child('violation_notifications_enabled').ref,
    },
    beyondcorp_app_connection(name, block): {
      local p = path(['google_beyondcorp_app_connection', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_beyondcorp_app_connection: {
              [name]: std.prune({
                connectors: build.template(std.get(block, 'connectors', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                region: build.template(std.get(block, 'region', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      connectors: p.child('connectors').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
    },
    beyondcorp_app_connector(name, block): {
      local p = path(['google_beyondcorp_app_connector', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_beyondcorp_app_connector: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    beyondcorp_app_gateway(name, block): {
      local p = path(['google_beyondcorp_app_gateway', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_beyondcorp_app_gateway: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                host_type: build.template(std.get(block, 'host_type', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                region: build.template(std.get(block, 'region', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      allocated_connections: p.child('allocated_connections').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      host_type: p.child('host_type').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      uri: p.child('uri').ref,
    },
    biglake_catalog(name, block): {
      local p = path(['google_biglake_catalog', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_biglake_catalog: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      update_time: p.child('update_time').ref,
    },
    biglake_database(name, block): {
      local p = path(['google_biglake_database', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_biglake_database: {
              [name]: std.prune({
                catalog: build.template(block.catalog),
                name: build.template(block.name),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      catalog: p.child('catalog').ref,
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    biglake_table(name, block): {
      local p = path(['google_biglake_table', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_biglake_table: {
              [name]: std.prune({
                database: build.template(std.get(block, 'database', null, true)),
                name: build.template(block.name),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      database: p.child('database').ref,
      delete_time: p.child('delete_time').ref,
      etag: p.child('etag').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    bigquery_analytics_hub_data_exchange(name, block): {
      local p = path(['google_bigquery_analytics_hub_data_exchange', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_analytics_hub_data_exchange: {
              [name]: std.prune({
                data_exchange_id: build.template(block.data_exchange_id),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                documentation: build.template(std.get(block, 'documentation', null, true)),
                icon: build.template(std.get(block, 'icon', null, true)),
                location: build.template(block.location),
                primary_contact: build.template(std.get(block, 'primary_contact', null, true)),
              }),
            },
          },
        },
      },
      data_exchange_id: p.child('data_exchange_id').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      documentation: p.child('documentation').ref,
      icon: p.child('icon').ref,
      id: p.child('id').ref,
      listing_count: p.child('listing_count').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      primary_contact: p.child('primary_contact').ref,
      project: p.child('project').ref,
    },
    bigquery_analytics_hub_data_exchange_iam_binding(name, block): {
      local p = path(['google_bigquery_analytics_hub_data_exchange_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_analytics_hub_data_exchange_iam_binding: {
              [name]: std.prune({
                data_exchange_id: build.template(block.data_exchange_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      data_exchange_id: p.child('data_exchange_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    bigquery_analytics_hub_data_exchange_iam_member(name, block): {
      local p = path(['google_bigquery_analytics_hub_data_exchange_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_analytics_hub_data_exchange_iam_member: {
              [name]: std.prune({
                data_exchange_id: build.template(block.data_exchange_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      data_exchange_id: p.child('data_exchange_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    bigquery_analytics_hub_data_exchange_iam_policy(name, block): {
      local p = path(['google_bigquery_analytics_hub_data_exchange_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_analytics_hub_data_exchange_iam_policy: {
              [name]: std.prune({
                data_exchange_id: build.template(block.data_exchange_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      data_exchange_id: p.child('data_exchange_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    bigquery_analytics_hub_listing(name, block): {
      local p = path(['google_bigquery_analytics_hub_listing', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_analytics_hub_listing: {
              [name]: std.prune({
                categories: build.template(std.get(block, 'categories', null, true)),
                data_exchange_id: build.template(block.data_exchange_id),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                documentation: build.template(std.get(block, 'documentation', null, true)),
                icon: build.template(std.get(block, 'icon', null, true)),
                listing_id: build.template(block.listing_id),
                location: build.template(block.location),
                primary_contact: build.template(std.get(block, 'primary_contact', null, true)),
                request_access: build.template(std.get(block, 'request_access', null, true)),
              }),
            },
          },
        },
      },
      categories: p.child('categories').ref,
      data_exchange_id: p.child('data_exchange_id').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      documentation: p.child('documentation').ref,
      icon: p.child('icon').ref,
      id: p.child('id').ref,
      listing_id: p.child('listing_id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      primary_contact: p.child('primary_contact').ref,
      project: p.child('project').ref,
      request_access: p.child('request_access').ref,
    },
    bigquery_analytics_hub_listing_iam_binding(name, block): {
      local p = path(['google_bigquery_analytics_hub_listing_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_analytics_hub_listing_iam_binding: {
              [name]: std.prune({
                data_exchange_id: build.template(block.data_exchange_id),
                listing_id: build.template(block.listing_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      data_exchange_id: p.child('data_exchange_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      listing_id: p.child('listing_id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    bigquery_analytics_hub_listing_iam_member(name, block): {
      local p = path(['google_bigquery_analytics_hub_listing_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_analytics_hub_listing_iam_member: {
              [name]: std.prune({
                data_exchange_id: build.template(block.data_exchange_id),
                listing_id: build.template(block.listing_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      data_exchange_id: p.child('data_exchange_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      listing_id: p.child('listing_id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    bigquery_analytics_hub_listing_iam_policy(name, block): {
      local p = path(['google_bigquery_analytics_hub_listing_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_analytics_hub_listing_iam_policy: {
              [name]: std.prune({
                data_exchange_id: build.template(block.data_exchange_id),
                listing_id: build.template(block.listing_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      data_exchange_id: p.child('data_exchange_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      listing_id: p.child('listing_id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    bigquery_bi_reservation(name, block): {
      local p = path(['google_bigquery_bi_reservation', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_bi_reservation: {
              [name]: std.prune({
                location: build.template(block.location),
                size: build.template(std.get(block, 'size', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      size: p.child('size').ref,
      update_time: p.child('update_time').ref,
    },
    bigquery_capacity_commitment(name, block): {
      local p = path(['google_bigquery_capacity_commitment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_capacity_commitment: {
              [name]: std.prune({
                capacity_commitment_id: build.template(std.get(block, 'capacity_commitment_id', null, true)),
                edition: build.template(std.get(block, 'edition', null, true)),
                enforce_single_admin_project_per_org: build.template(std.get(block, 'enforce_single_admin_project_per_org', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                plan: build.template(block.plan),
                renewal_plan: build.template(std.get(block, 'renewal_plan', null, true)),
                slot_count: build.template(block.slot_count),
              }),
            },
          },
        },
      },
      capacity_commitment_id: p.child('capacity_commitment_id').ref,
      commitment_end_time: p.child('commitment_end_time').ref,
      commitment_start_time: p.child('commitment_start_time').ref,
      edition: p.child('edition').ref,
      enforce_single_admin_project_per_org: p.child('enforce_single_admin_project_per_org').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      plan: p.child('plan').ref,
      project: p.child('project').ref,
      renewal_plan: p.child('renewal_plan').ref,
      slot_count: p.child('slot_count').ref,
      state: p.child('state').ref,
    },
    bigquery_connection(name, block): {
      local p = path(['google_bigquery_connection', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_connection: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                friendly_name: build.template(std.get(block, 'friendly_name', null, true)),
                kms_key_name: build.template(std.get(block, 'kms_key_name', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
              }),
            },
          },
        },
      },
      connection_id: p.child('connection_id').ref,
      description: p.child('description').ref,
      friendly_name: p.child('friendly_name').ref,
      has_credential: p.child('has_credential').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    bigquery_connection_iam_binding(name, block): {
      local p = path(['google_bigquery_connection_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_connection_iam_binding: {
              [name]: std.prune({
                connection_id: build.template(block.connection_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      connection_id: p.child('connection_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    bigquery_connection_iam_member(name, block): {
      local p = path(['google_bigquery_connection_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_connection_iam_member: {
              [name]: std.prune({
                connection_id: build.template(block.connection_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      connection_id: p.child('connection_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    bigquery_connection_iam_policy(name, block): {
      local p = path(['google_bigquery_connection_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_connection_iam_policy: {
              [name]: std.prune({
                connection_id: build.template(block.connection_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      connection_id: p.child('connection_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    bigquery_data_transfer_config(name, block): {
      local p = path(['google_bigquery_data_transfer_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_data_transfer_config: {
              [name]: std.prune({
                data_refresh_window_days: build.template(std.get(block, 'data_refresh_window_days', null, true)),
                data_source_id: build.template(block.data_source_id),
                destination_dataset_id: build.template(std.get(block, 'destination_dataset_id', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                display_name: build.template(block.display_name),
                location: build.template(std.get(block, 'location', null, true)),
                notification_pubsub_topic: build.template(std.get(block, 'notification_pubsub_topic', null, true)),
                params: build.template(block.params),
                schedule: build.template(std.get(block, 'schedule', null, true)),
                service_account_name: build.template(std.get(block, 'service_account_name', null, true)),
              }),
            },
          },
        },
      },
      data_refresh_window_days: p.child('data_refresh_window_days').ref,
      data_source_id: p.child('data_source_id').ref,
      destination_dataset_id: p.child('destination_dataset_id').ref,
      disabled: p.child('disabled').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      notification_pubsub_topic: p.child('notification_pubsub_topic').ref,
      params: p.child('params').ref,
      project: p.child('project').ref,
      schedule: p.child('schedule').ref,
      service_account_name: p.child('service_account_name').ref,
    },
    bigquery_datapolicy_data_policy(name, block): {
      local p = path(['google_bigquery_datapolicy_data_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_datapolicy_data_policy: {
              [name]: std.prune({
                data_policy_id: build.template(block.data_policy_id),
                data_policy_type: build.template(block.data_policy_type),
                location: build.template(block.location),
                policy_tag: build.template(block.policy_tag),
              }),
            },
          },
        },
      },
      data_policy_id: p.child('data_policy_id').ref,
      data_policy_type: p.child('data_policy_type').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_tag: p.child('policy_tag').ref,
      project: p.child('project').ref,
    },
    bigquery_datapolicy_data_policy_iam_binding(name, block): {
      local p = path(['google_bigquery_datapolicy_data_policy_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_datapolicy_data_policy_iam_binding: {
              [name]: std.prune({
                data_policy_id: build.template(block.data_policy_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      data_policy_id: p.child('data_policy_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    bigquery_datapolicy_data_policy_iam_member(name, block): {
      local p = path(['google_bigquery_datapolicy_data_policy_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_datapolicy_data_policy_iam_member: {
              [name]: std.prune({
                data_policy_id: build.template(block.data_policy_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      data_policy_id: p.child('data_policy_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    bigquery_datapolicy_data_policy_iam_policy(name, block): {
      local p = path(['google_bigquery_datapolicy_data_policy_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_datapolicy_data_policy_iam_policy: {
              [name]: std.prune({
                data_policy_id: build.template(block.data_policy_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      data_policy_id: p.child('data_policy_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    bigquery_dataset(name, block): {
      local p = path(['google_bigquery_dataset', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_dataset: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                default_partition_expiration_ms: build.template(std.get(block, 'default_partition_expiration_ms', null, true)),
                default_table_expiration_ms: build.template(std.get(block, 'default_table_expiration_ms', null, true)),
                delete_contents_on_destroy: build.template(std.get(block, 'delete_contents_on_destroy', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                friendly_name: build.template(std.get(block, 'friendly_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                resource_tags: build.template(std.get(block, 'resource_tags', null, true)),
              }),
            },
          },
        },
      },
      creation_time: p.child('creation_time').ref,
      dataset_id: p.child('dataset_id').ref,
      default_collation: p.child('default_collation').ref,
      default_partition_expiration_ms: p.child('default_partition_expiration_ms').ref,
      default_table_expiration_ms: p.child('default_table_expiration_ms').ref,
      delete_contents_on_destroy: p.child('delete_contents_on_destroy').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      friendly_name: p.child('friendly_name').ref,
      id: p.child('id').ref,
      is_case_insensitive: p.child('is_case_insensitive').ref,
      labels: p.child('labels').ref,
      last_modified_time: p.child('last_modified_time').ref,
      location: p.child('location').ref,
      max_time_travel_hours: p.child('max_time_travel_hours').ref,
      project: p.child('project').ref,
      resource_tags: p.child('resource_tags').ref,
      self_link: p.child('self_link').ref,
      storage_billing_model: p.child('storage_billing_model').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    bigquery_dataset_access(name, block): {
      local p = path(['google_bigquery_dataset_access', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_dataset_access: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                domain: build.template(std.get(block, 'domain', null, true)),
                group_by_email: build.template(std.get(block, 'group_by_email', null, true)),
                iam_member: build.template(std.get(block, 'iam_member', null, true)),
                role: build.template(std.get(block, 'role', null, true)),
                special_group: build.template(std.get(block, 'special_group', null, true)),
                user_by_email: build.template(std.get(block, 'user_by_email', null, true)),
              }),
            },
          },
        },
      },
      api_updated_member: p.child('api_updated_member').ref,
      dataset_id: p.child('dataset_id').ref,
      domain: p.child('domain').ref,
      group_by_email: p.child('group_by_email').ref,
      iam_member: p.child('iam_member').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      special_group: p.child('special_group').ref,
      user_by_email: p.child('user_by_email').ref,
    },
    bigquery_dataset_iam_binding(name, block): {
      local p = path(['google_bigquery_dataset_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_dataset_iam_binding: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      dataset_id: p.child('dataset_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    bigquery_dataset_iam_member(name, block): {
      local p = path(['google_bigquery_dataset_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_dataset_iam_member: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      dataset_id: p.child('dataset_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    bigquery_dataset_iam_policy(name, block): {
      local p = path(['google_bigquery_dataset_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_dataset_iam_policy: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      dataset_id: p.child('dataset_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    bigquery_job(name, block): {
      local p = path(['google_bigquery_job', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_job: {
              [name]: std.prune({
                job_id: build.template(block.job_id),
                job_timeout_ms: build.template(std.get(block, 'job_timeout_ms', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
              }),
            },
          },
        },
      },
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      job_id: p.child('job_id').ref,
      job_timeout_ms: p.child('job_timeout_ms').ref,
      job_type: p.child('job_type').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      project: p.child('project').ref,
      status: p.child('status').ref,
      terraform_labels: p.child('terraform_labels').ref,
      user_email: p.child('user_email').ref,
    },
    bigquery_reservation(name, block): {
      local p = path(['google_bigquery_reservation', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_reservation: {
              [name]: std.prune({
                concurrency: build.template(std.get(block, 'concurrency', null, true)),
                ignore_idle_slots: build.template(std.get(block, 'ignore_idle_slots', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                slot_capacity: build.template(block.slot_capacity),
              }),
            },
          },
        },
      },
      concurrency: p.child('concurrency').ref,
      edition: p.child('edition').ref,
      id: p.child('id').ref,
      ignore_idle_slots: p.child('ignore_idle_slots').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      slot_capacity: p.child('slot_capacity').ref,
    },
    bigquery_reservation_assignment(name, block): {
      local p = path(['google_bigquery_reservation_assignment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_reservation_assignment: {
              [name]: std.prune({
                assignee: build.template(block.assignee),
                job_type: build.template(block.job_type),
                reservation: build.template(block.reservation),
              }),
            },
          },
        },
      },
      assignee: p.child('assignee').ref,
      id: p.child('id').ref,
      job_type: p.child('job_type').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      reservation: p.child('reservation').ref,
      state: p.child('state').ref,
    },
    bigquery_routine(name, block): {
      local p = path(['google_bigquery_routine', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_routine: {
              [name]: std.prune({
                data_governance_type: build.template(std.get(block, 'data_governance_type', null, true)),
                dataset_id: build.template(block.dataset_id),
                definition_body: build.template(block.definition_body),
                description: build.template(std.get(block, 'description', null, true)),
                determinism_level: build.template(std.get(block, 'determinism_level', null, true)),
                imported_libraries: build.template(std.get(block, 'imported_libraries', null, true)),
                language: build.template(std.get(block, 'language', null, true)),
                return_table_type: build.template(std.get(block, 'return_table_type', null, true)),
                return_type: build.template(std.get(block, 'return_type', null, true)),
                routine_id: build.template(block.routine_id),
                routine_type: build.template(block.routine_type),
              }),
            },
          },
        },
      },
      creation_time: p.child('creation_time').ref,
      data_governance_type: p.child('data_governance_type').ref,
      dataset_id: p.child('dataset_id').ref,
      definition_body: p.child('definition_body').ref,
      description: p.child('description').ref,
      determinism_level: p.child('determinism_level').ref,
      id: p.child('id').ref,
      imported_libraries: p.child('imported_libraries').ref,
      language: p.child('language').ref,
      last_modified_time: p.child('last_modified_time').ref,
      project: p.child('project').ref,
      return_table_type: p.child('return_table_type').ref,
      return_type: p.child('return_type').ref,
      routine_id: p.child('routine_id').ref,
      routine_type: p.child('routine_type').ref,
    },
    bigquery_table(name, block): {
      local p = path(['google_bigquery_table', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_table: {
              [name]: std.prune({
                clustering: build.template(std.get(block, 'clustering', null, true)),
                dataset_id: build.template(block.dataset_id),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                friendly_name: build.template(std.get(block, 'friendly_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                max_staleness: build.template(std.get(block, 'max_staleness', null, true)),
                require_partition_filter: build.template(std.get(block, 'require_partition_filter', null, true)),
                resource_tags: build.template(std.get(block, 'resource_tags', null, true)),
                table_id: build.template(block.table_id),
              }),
            },
          },
        },
      },
      clustering: p.child('clustering').ref,
      creation_time: p.child('creation_time').ref,
      dataset_id: p.child('dataset_id').ref,
      deletion_protection: p.child('deletion_protection').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      expiration_time: p.child('expiration_time').ref,
      friendly_name: p.child('friendly_name').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      last_modified_time: p.child('last_modified_time').ref,
      location: p.child('location').ref,
      max_staleness: p.child('max_staleness').ref,
      num_bytes: p.child('num_bytes').ref,
      num_long_term_bytes: p.child('num_long_term_bytes').ref,
      num_rows: p.child('num_rows').ref,
      project: p.child('project').ref,
      require_partition_filter: p.child('require_partition_filter').ref,
      resource_tags: p.child('resource_tags').ref,
      schema: p.child('schema').ref,
      self_link: p.child('self_link').ref,
      table_id: p.child('table_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
    },
    bigquery_table_iam_binding(name, block): {
      local p = path(['google_bigquery_table_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_table_iam_binding: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                members: build.template(block.members),
                role: build.template(block.role),
                table_id: build.template(block.table_id),
              }),
            },
          },
        },
      },
      dataset_id: p.child('dataset_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      table_id: p.child('table_id').ref,
    },
    bigquery_table_iam_member(name, block): {
      local p = path(['google_bigquery_table_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_table_iam_member: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                member: build.template(block.member),
                role: build.template(block.role),
                table_id: build.template(block.table_id),
              }),
            },
          },
        },
      },
      dataset_id: p.child('dataset_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      table_id: p.child('table_id').ref,
    },
    bigquery_table_iam_policy(name, block): {
      local p = path(['google_bigquery_table_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigquery_table_iam_policy: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                policy_data: build.template(block.policy_data),
                table_id: build.template(block.table_id),
              }),
            },
          },
        },
      },
      dataset_id: p.child('dataset_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      table_id: p.child('table_id').ref,
    },
    bigtable_app_profile(name, block): {
      local p = path(['google_bigtable_app_profile', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigtable_app_profile: {
              [name]: std.prune({
                app_profile_id: build.template(block.app_profile_id),
                description: build.template(std.get(block, 'description', null, true)),
                ignore_warnings: build.template(std.get(block, 'ignore_warnings', null, true)),
                instance: build.template(std.get(block, 'instance', null, true)),
                multi_cluster_routing_cluster_ids: build.template(std.get(block, 'multi_cluster_routing_cluster_ids', null, true)),
                multi_cluster_routing_use_any: build.template(std.get(block, 'multi_cluster_routing_use_any', null, true)),
              }),
            },
          },
        },
      },
      app_profile_id: p.child('app_profile_id').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      ignore_warnings: p.child('ignore_warnings').ref,
      instance: p.child('instance').ref,
      multi_cluster_routing_cluster_ids: p.child('multi_cluster_routing_cluster_ids').ref,
      multi_cluster_routing_use_any: p.child('multi_cluster_routing_use_any').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    bigtable_authorized_view(name, block): {
      local p = path(['google_bigtable_authorized_view', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigtable_authorized_view: {
              [name]: std.prune({
                instance_name: build.template(block.instance_name),
                name: build.template(block.name),
                table_name: build.template(block.table_name),
              }),
            },
          },
        },
      },
      deletion_protection: p.child('deletion_protection').ref,
      id: p.child('id').ref,
      instance_name: p.child('instance_name').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      table_name: p.child('table_name').ref,
    },
    bigtable_gc_policy(name, block): {
      local p = path(['google_bigtable_gc_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigtable_gc_policy: {
              [name]: std.prune({
                column_family: build.template(block.column_family),
                deletion_policy: build.template(std.get(block, 'deletion_policy', null, true)),
                gc_rules: build.template(std.get(block, 'gc_rules', null, true)),
                ignore_warnings: build.template(std.get(block, 'ignore_warnings', null, true)),
                instance_name: build.template(block.instance_name),
                mode: build.template(std.get(block, 'mode', null, true)),
                table: build.template(block.table),
              }),
            },
          },
        },
      },
      column_family: p.child('column_family').ref,
      deletion_policy: p.child('deletion_policy').ref,
      gc_rules: p.child('gc_rules').ref,
      id: p.child('id').ref,
      ignore_warnings: p.child('ignore_warnings').ref,
      instance_name: p.child('instance_name').ref,
      mode: p.child('mode').ref,
      project: p.child('project').ref,
      table: p.child('table').ref,
    },
    bigtable_instance(name, block): {
      local p = path(['google_bigtable_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigtable_instance: {
              [name]: std.prune({
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                instance_type: build.template(std.get(block, 'instance_type', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      deletion_protection: p.child('deletion_protection').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      force_destroy: p.child('force_destroy').ref,
      id: p.child('id').ref,
      instance_type: p.child('instance_type').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    bigtable_instance_iam_binding(name, block): {
      local p = path(['google_bigtable_instance_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigtable_instance_iam_binding: {
              [name]: std.prune({
                instance: build.template(block.instance),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    bigtable_instance_iam_member(name, block): {
      local p = path(['google_bigtable_instance_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigtable_instance_iam_member: {
              [name]: std.prune({
                instance: build.template(block.instance),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    bigtable_instance_iam_policy(name, block): {
      local p = path(['google_bigtable_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigtable_instance_iam_policy: {
              [name]: std.prune({
                instance: build.template(block.instance),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    bigtable_table(name, block): {
      local p = path(['google_bigtable_table', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigtable_table: {
              [name]: std.prune({
                instance_name: build.template(block.instance_name),
                name: build.template(block.name),
                split_keys: build.template(std.get(block, 'split_keys', null, true)),
              }),
            },
          },
        },
      },
      change_stream_retention: p.child('change_stream_retention').ref,
      deletion_protection: p.child('deletion_protection').ref,
      id: p.child('id').ref,
      instance_name: p.child('instance_name').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      split_keys: p.child('split_keys').ref,
    },
    bigtable_table_iam_binding(name, block): {
      local p = path(['google_bigtable_table_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigtable_table_iam_binding: {
              [name]: std.prune({
                instance: build.template(block.instance),
                members: build.template(block.members),
                role: build.template(block.role),
                table: build.template(block.table),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      table: p.child('table').ref,
    },
    bigtable_table_iam_member(name, block): {
      local p = path(['google_bigtable_table_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigtable_table_iam_member: {
              [name]: std.prune({
                instance: build.template(block.instance),
                member: build.template(block.member),
                role: build.template(block.role),
                table: build.template(block.table),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      table: p.child('table').ref,
    },
    bigtable_table_iam_policy(name, block): {
      local p = path(['google_bigtable_table_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_bigtable_table_iam_policy: {
              [name]: std.prune({
                instance: build.template(block.instance),
                policy_data: build.template(block.policy_data),
                table: build.template(block.table),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      table: p.child('table').ref,
    },
    billing_account_iam_binding(name, block): {
      local p = path(['google_billing_account_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_billing_account_iam_binding: {
              [name]: std.prune({
                billing_account_id: build.template(block.billing_account_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      billing_account_id: p.child('billing_account_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
    },
    billing_account_iam_member(name, block): {
      local p = path(['google_billing_account_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_billing_account_iam_member: {
              [name]: std.prune({
                billing_account_id: build.template(block.billing_account_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      billing_account_id: p.child('billing_account_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
    },
    billing_account_iam_policy(name, block): {
      local p = path(['google_billing_account_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_billing_account_iam_policy: {
              [name]: std.prune({
                billing_account_id: build.template(block.billing_account_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      billing_account_id: p.child('billing_account_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    billing_budget(name, block): {
      local p = path(['google_billing_budget', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_billing_budget: {
              [name]: std.prune({
                billing_account: build.template(block.billing_account),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                ownership_scope: build.template(std.get(block, 'ownership_scope', null, true)),
              }),
            },
          },
        },
      },
      billing_account: p.child('billing_account').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      ownership_scope: p.child('ownership_scope').ref,
    },
    billing_project_info(name, block): {
      local p = path(['google_billing_project_info', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_billing_project_info: {
              [name]: std.prune({
                billing_account: build.template(block.billing_account),
              }),
            },
          },
        },
      },
      billing_account: p.child('billing_account').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
    },
    billing_subaccount(name, block): {
      local p = path(['google_billing_subaccount', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_billing_subaccount: {
              [name]: std.prune({
                deletion_policy: build.template(std.get(block, 'deletion_policy', null, true)),
                display_name: build.template(block.display_name),
                master_billing_account: build.template(block.master_billing_account),
              }),
            },
          },
        },
      },
      billing_account_id: p.child('billing_account_id').ref,
      deletion_policy: p.child('deletion_policy').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      master_billing_account: p.child('master_billing_account').ref,
      name: p.child('name').ref,
      open: p.child('open').ref,
    },
    binary_authorization_attestor(name, block): {
      local p = path(['google_binary_authorization_attestor', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_binary_authorization_attestor: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    binary_authorization_attestor_iam_binding(name, block): {
      local p = path(['google_binary_authorization_attestor_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_binary_authorization_attestor_iam_binding: {
              [name]: std.prune({
                attestor: build.template(block.attestor),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      attestor: p.child('attestor').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    binary_authorization_attestor_iam_member(name, block): {
      local p = path(['google_binary_authorization_attestor_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_binary_authorization_attestor_iam_member: {
              [name]: std.prune({
                attestor: build.template(block.attestor),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      attestor: p.child('attestor').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    binary_authorization_attestor_iam_policy(name, block): {
      local p = path(['google_binary_authorization_attestor_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_binary_authorization_attestor_iam_policy: {
              [name]: std.prune({
                attestor: build.template(block.attestor),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      attestor: p.child('attestor').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    binary_authorization_policy(name, block): {
      local p = path(['google_binary_authorization_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_binary_authorization_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      global_policy_evaluation_mode: p.child('global_policy_evaluation_mode').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
    },
    blockchain_node_engine_blockchain_nodes(name, block): {
      local p = path(['google_blockchain_node_engine_blockchain_nodes', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_blockchain_node_engine_blockchain_nodes: {
              [name]: std.prune({
                blockchain_node_id: build.template(block.blockchain_node_id),
                blockchain_type: build.template(std.get(block, 'blockchain_type', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      blockchain_node_id: p.child('blockchain_node_id').ref,
      blockchain_type: p.child('blockchain_type').ref,
      connection_info: p.child('connection_info').ref,
      create_time: p.child('create_time').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    certificate_manager_certificate(name, block): {
      local p = path(['google_certificate_manager_certificate', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_certificate_manager_certificate: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                scope: build.template(std.get(block, 'scope', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      san_dnsnames: p.child('san_dnsnames').ref,
      scope: p.child('scope').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    certificate_manager_certificate_issuance_config(name, block): {
      local p = path(['google_certificate_manager_certificate_issuance_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_certificate_manager_certificate_issuance_config: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                key_algorithm: build.template(block.key_algorithm),
                labels: build.template(std.get(block, 'labels', null, true)),
                lifetime: build.template(block.lifetime),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                rotation_window_percentage: build.template(block.rotation_window_percentage),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      key_algorithm: p.child('key_algorithm').ref,
      labels: p.child('labels').ref,
      lifetime: p.child('lifetime').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      rotation_window_percentage: p.child('rotation_window_percentage').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    certificate_manager_certificate_map(name, block): {
      local p = path(['google_certificate_manager_certificate_map', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_certificate_manager_certificate_map: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      gclb_targets: p.child('gclb_targets').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    certificate_manager_certificate_map_entry(name, block): {
      local p = path(['google_certificate_manager_certificate_map_entry', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_certificate_manager_certificate_map_entry: {
              [name]: std.prune({
                certificates: build.template(block.certificates),
                description: build.template(std.get(block, 'description', null, true)),
                hostname: build.template(std.get(block, 'hostname', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                map: build.template(block.map),
                matcher: build.template(std.get(block, 'matcher', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      certificates: p.child('certificates').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      hostname: p.child('hostname').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      map: p.child('map').ref,
      matcher: p.child('matcher').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    certificate_manager_dns_authorization(name, block): {
      local p = path(['google_certificate_manager_dns_authorization', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_certificate_manager_dns_authorization: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                domain: build.template(block.domain),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      dns_resource_record: p.child('dns_resource_record').ref,
      domain: p.child('domain').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
    },
    certificate_manager_trust_config(name, block): {
      local p = path(['google_certificate_manager_trust_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_certificate_manager_trust_config: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    cloud_asset_folder_feed(name, block): {
      local p = path(['google_cloud_asset_folder_feed', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_asset_folder_feed: {
              [name]: std.prune({
                asset_names: build.template(std.get(block, 'asset_names', null, true)),
                asset_types: build.template(std.get(block, 'asset_types', null, true)),
                billing_project: build.template(block.billing_project),
                content_type: build.template(std.get(block, 'content_type', null, true)),
                feed_id: build.template(block.feed_id),
                folder: build.template(block.folder),
              }),
            },
          },
        },
      },
      asset_names: p.child('asset_names').ref,
      asset_types: p.child('asset_types').ref,
      billing_project: p.child('billing_project').ref,
      content_type: p.child('content_type').ref,
      feed_id: p.child('feed_id').ref,
      folder: p.child('folder').ref,
      folder_id: p.child('folder_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
    },
    cloud_asset_organization_feed(name, block): {
      local p = path(['google_cloud_asset_organization_feed', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_asset_organization_feed: {
              [name]: std.prune({
                asset_names: build.template(std.get(block, 'asset_names', null, true)),
                asset_types: build.template(std.get(block, 'asset_types', null, true)),
                billing_project: build.template(block.billing_project),
                content_type: build.template(std.get(block, 'content_type', null, true)),
                feed_id: build.template(block.feed_id),
                org_id: build.template(block.org_id),
              }),
            },
          },
        },
      },
      asset_names: p.child('asset_names').ref,
      asset_types: p.child('asset_types').ref,
      billing_project: p.child('billing_project').ref,
      content_type: p.child('content_type').ref,
      feed_id: p.child('feed_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      org_id: p.child('org_id').ref,
    },
    cloud_asset_project_feed(name, block): {
      local p = path(['google_cloud_asset_project_feed', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_asset_project_feed: {
              [name]: std.prune({
                asset_names: build.template(std.get(block, 'asset_names', null, true)),
                asset_types: build.template(std.get(block, 'asset_types', null, true)),
                billing_project: build.template(std.get(block, 'billing_project', null, true)),
                content_type: build.template(std.get(block, 'content_type', null, true)),
                feed_id: build.template(block.feed_id),
              }),
            },
          },
        },
      },
      asset_names: p.child('asset_names').ref,
      asset_types: p.child('asset_types').ref,
      billing_project: p.child('billing_project').ref,
      content_type: p.child('content_type').ref,
      feed_id: p.child('feed_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    cloud_identity_group(name, block): {
      local p = path(['google_cloud_identity_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_identity_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                initial_group_config: build.template(std.get(block, 'initial_group_config', null, true)),
                labels: build.template(block.labels),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      additional_group_keys: p.child('additional_group_keys').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      initial_group_config: p.child('initial_group_config').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      update_time: p.child('update_time').ref,
    },
    cloud_identity_group_membership(name, block): {
      local p = path(['google_cloud_identity_group_membership', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_identity_group_membership: {
              [name]: std.prune({
                group: build.template(block.group),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      group: p.child('group').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    cloud_ids_endpoint(name, block): {
      local p = path(['google_cloud_ids_endpoint', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_ids_endpoint: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                network: build.template(block.network),
                severity: build.template(block.severity),
                threat_exceptions: build.template(std.get(block, 'threat_exceptions', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      endpoint_forwarding_rule: p.child('endpoint_forwarding_rule').ref,
      endpoint_ip: p.child('endpoint_ip').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      severity: p.child('severity').ref,
      threat_exceptions: p.child('threat_exceptions').ref,
      update_time: p.child('update_time').ref,
    },
    cloud_quotas_quota_preference(name, block): {
      local p = path(['google_cloud_quotas_quota_preference', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_quotas_quota_preference: {
              [name]: std.prune({
                contact_email: build.template(std.get(block, 'contact_email', null, true)),
                ignore_safety_checks: build.template(std.get(block, 'ignore_safety_checks', null, true)),
                justification: build.template(std.get(block, 'justification', null, true)),
              }),
            },
          },
        },
      },
      contact_email: p.child('contact_email').ref,
      create_time: p.child('create_time').ref,
      dimensions: p.child('dimensions').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      ignore_safety_checks: p.child('ignore_safety_checks').ref,
      justification: p.child('justification').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      quota_id: p.child('quota_id').ref,
      reconciling: p.child('reconciling').ref,
      service: p.child('service').ref,
      update_time: p.child('update_time').ref,
    },
    cloud_run_domain_mapping(name, block): {
      local p = path(['google_cloud_run_domain_mapping', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_run_domain_mapping: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      status: p.child('status').ref,
    },
    cloud_run_service(name, block): {
      local p = path(['google_cloud_run_service', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_run_service: {
              [name]: std.prune({
                autogenerate_revision_name: build.template(std.get(block, 'autogenerate_revision_name', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      autogenerate_revision_name: p.child('autogenerate_revision_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      status: p.child('status').ref,
    },
    cloud_run_service_iam_binding(name, block): {
      local p = path(['google_cloud_run_service_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_run_service_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      service: p.child('service').ref,
    },
    cloud_run_service_iam_member(name, block): {
      local p = path(['google_cloud_run_service_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_run_service_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      service: p.child('service').ref,
    },
    cloud_run_service_iam_policy(name, block): {
      local p = path(['google_cloud_run_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_run_service_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
    },
    cloud_run_v2_job(name, block): {
      local p = path(['google_cloud_run_v2_job', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_run_v2_job: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                client: build.template(std.get(block, 'client', null, true)),
                client_version: build.template(std.get(block, 'client_version', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      client: p.child('client').ref,
      client_version: p.child('client_version').ref,
      conditions: p.child('conditions').ref,
      create_time: p.child('create_time').ref,
      creator: p.child('creator').ref,
      delete_time: p.child('delete_time').ref,
      deletion_protection: p.child('deletion_protection').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      execution_count: p.child('execution_count').ref,
      expire_time: p.child('expire_time').ref,
      generation: p.child('generation').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      last_modifier: p.child('last_modifier').ref,
      latest_created_execution: p.child('latest_created_execution').ref,
      launch_stage: p.child('launch_stage').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      observed_generation: p.child('observed_generation').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      terminal_condition: p.child('terminal_condition').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    cloud_run_v2_job_iam_binding(name, block): {
      local p = path(['google_cloud_run_v2_job_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_run_v2_job_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    cloud_run_v2_job_iam_member(name, block): {
      local p = path(['google_cloud_run_v2_job_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_run_v2_job_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    cloud_run_v2_job_iam_policy(name, block): {
      local p = path(['google_cloud_run_v2_job_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_run_v2_job_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    cloud_run_v2_service(name, block): {
      local p = path(['google_cloud_run_v2_service', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_run_v2_service: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                client: build.template(std.get(block, 'client', null, true)),
                client_version: build.template(std.get(block, 'client_version', null, true)),
                custom_audiences: build.template(std.get(block, 'custom_audiences', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      client: p.child('client').ref,
      client_version: p.child('client_version').ref,
      conditions: p.child('conditions').ref,
      create_time: p.child('create_time').ref,
      creator: p.child('creator').ref,
      custom_audiences: p.child('custom_audiences').ref,
      delete_time: p.child('delete_time').ref,
      deletion_protection: p.child('deletion_protection').ref,
      description: p.child('description').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      expire_time: p.child('expire_time').ref,
      generation: p.child('generation').ref,
      id: p.child('id').ref,
      ingress: p.child('ingress').ref,
      labels: p.child('labels').ref,
      last_modifier: p.child('last_modifier').ref,
      latest_created_revision: p.child('latest_created_revision').ref,
      latest_ready_revision: p.child('latest_ready_revision').ref,
      launch_stage: p.child('launch_stage').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      observed_generation: p.child('observed_generation').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      terminal_condition: p.child('terminal_condition').ref,
      terraform_labels: p.child('terraform_labels').ref,
      traffic_statuses: p.child('traffic_statuses').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      uri: p.child('uri').ref,
    },
    cloud_run_v2_service_iam_binding(name, block): {
      local p = path(['google_cloud_run_v2_service_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_run_v2_service_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    cloud_run_v2_service_iam_member(name, block): {
      local p = path(['google_cloud_run_v2_service_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_run_v2_service_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    cloud_run_v2_service_iam_policy(name, block): {
      local p = path(['google_cloud_run_v2_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_run_v2_service_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    cloud_scheduler_job(name, block): {
      local p = path(['google_cloud_scheduler_job', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_scheduler_job: {
              [name]: std.prune({
                attempt_deadline: build.template(std.get(block, 'attempt_deadline', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                schedule: build.template(std.get(block, 'schedule', null, true)),
                time_zone: build.template(std.get(block, 'time_zone', null, true)),
              }),
            },
          },
        },
      },
      attempt_deadline: p.child('attempt_deadline').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      paused: p.child('paused').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      schedule: p.child('schedule').ref,
      state: p.child('state').ref,
      time_zone: p.child('time_zone').ref,
    },
    cloud_tasks_queue(name, block): {
      local p = path(['google_cloud_tasks_queue', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_tasks_queue: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    cloud_tasks_queue_iam_binding(name, block): {
      local p = path(['google_cloud_tasks_queue_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_tasks_queue_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    cloud_tasks_queue_iam_member(name, block): {
      local p = path(['google_cloud_tasks_queue_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_tasks_queue_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    cloud_tasks_queue_iam_policy(name, block): {
      local p = path(['google_cloud_tasks_queue_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloud_tasks_queue_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    cloudbuild_bitbucket_server_config(name, block): {
      local p = path(['google_cloudbuild_bitbucket_server_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudbuild_bitbucket_server_config: {
              [name]: std.prune({
                api_key: build.template(block.api_key),
                config_id: build.template(block.config_id),
                host_uri: build.template(block.host_uri),
                location: build.template(block.location),
                peered_network: build.template(std.get(block, 'peered_network', null, true)),
                ssl_ca: build.template(std.get(block, 'ssl_ca', null, true)),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      api_key: p.child('api_key').ref,
      config_id: p.child('config_id').ref,
      host_uri: p.child('host_uri').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      peered_network: p.child('peered_network').ref,
      project: p.child('project').ref,
      ssl_ca: p.child('ssl_ca').ref,
      username: p.child('username').ref,
      webhook_key: p.child('webhook_key').ref,
    },
    cloudbuild_trigger(name, block): {
      local p = path(['google_cloudbuild_trigger', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudbuild_trigger: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                filename: build.template(std.get(block, 'filename', null, true)),
                filter: build.template(std.get(block, 'filter', null, true)),
                ignored_files: build.template(std.get(block, 'ignored_files', null, true)),
                include_build_logs: build.template(std.get(block, 'include_build_logs', null, true)),
                included_files: build.template(std.get(block, 'included_files', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                service_account: build.template(std.get(block, 'service_account', null, true)),
                substitutions: build.template(std.get(block, 'substitutions', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      disabled: p.child('disabled').ref,
      filename: p.child('filename').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      ignored_files: p.child('ignored_files').ref,
      include_build_logs: p.child('include_build_logs').ref,
      included_files: p.child('included_files').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_account: p.child('service_account').ref,
      substitutions: p.child('substitutions').ref,
      tags: p.child('tags').ref,
      trigger_id: p.child('trigger_id').ref,
    },
    cloudbuild_worker_pool(name, block): {
      local p = path(['google_cloudbuild_worker_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudbuild_worker_pool: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      display_name: p.child('display_name').ref,
      effective_annotations: p.child('effective_annotations').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    cloudbuildv2_connection(name, block): {
      local p = path(['google_cloudbuildv2_connection', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudbuildv2_connection: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      create_time: p.child('create_time').ref,
      disabled: p.child('disabled').ref,
      effective_annotations: p.child('effective_annotations').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      installation_state: p.child('installation_state').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      update_time: p.child('update_time').ref,
    },
    cloudbuildv2_connection_iam_binding(name, block): {
      local p = path(['google_cloudbuildv2_connection_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudbuildv2_connection_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    cloudbuildv2_connection_iam_member(name, block): {
      local p = path(['google_cloudbuildv2_connection_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudbuildv2_connection_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    cloudbuildv2_connection_iam_policy(name, block): {
      local p = path(['google_cloudbuildv2_connection_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudbuildv2_connection_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    cloudbuildv2_repository(name, block): {
      local p = path(['google_cloudbuildv2_repository', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudbuildv2_repository: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                name: build.template(block.name),
                parent_connection: build.template(block.parent_connection),
                remote_uri: build.template(block.remote_uri),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      create_time: p.child('create_time').ref,
      effective_annotations: p.child('effective_annotations').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent_connection: p.child('parent_connection').ref,
      project: p.child('project').ref,
      remote_uri: p.child('remote_uri').ref,
      update_time: p.child('update_time').ref,
    },
    clouddeploy_automation(name, block): {
      local p = path(['google_clouddeploy_automation', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddeploy_automation: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                delivery_pipeline: build.template(block.delivery_pipeline),
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                service_account: build.template(block.service_account),
                suspended: build.template(std.get(block, 'suspended', null, true)),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      create_time: p.child('create_time').ref,
      delivery_pipeline: p.child('delivery_pipeline').ref,
      description: p.child('description').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_account: p.child('service_account').ref,
      suspended: p.child('suspended').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    clouddeploy_custom_target_type(name, block): {
      local p = path(['google_clouddeploy_custom_target_type', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddeploy_custom_target_type: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      create_time: p.child('create_time').ref,
      custom_target_type_id: p.child('custom_target_type_id').ref,
      description: p.child('description').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    clouddeploy_custom_target_type_iam_binding(name, block): {
      local p = path(['google_clouddeploy_custom_target_type_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddeploy_custom_target_type_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    clouddeploy_custom_target_type_iam_member(name, block): {
      local p = path(['google_clouddeploy_custom_target_type_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddeploy_custom_target_type_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    clouddeploy_custom_target_type_iam_policy(name, block): {
      local p = path(['google_clouddeploy_custom_target_type_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddeploy_custom_target_type_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    clouddeploy_delivery_pipeline(name, block): {
      local p = path(['google_clouddeploy_delivery_pipeline', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddeploy_delivery_pipeline: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                suspended: build.template(std.get(block, 'suspended', null, true)),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      condition: p.child('condition').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      suspended: p.child('suspended').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    clouddeploy_delivery_pipeline_iam_binding(name, block): {
      local p = path(['google_clouddeploy_delivery_pipeline_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddeploy_delivery_pipeline_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    clouddeploy_delivery_pipeline_iam_member(name, block): {
      local p = path(['google_clouddeploy_delivery_pipeline_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddeploy_delivery_pipeline_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    clouddeploy_delivery_pipeline_iam_policy(name, block): {
      local p = path(['google_clouddeploy_delivery_pipeline_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddeploy_delivery_pipeline_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    clouddeploy_target(name, block): {
      local p = path(['google_clouddeploy_target', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddeploy_target: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                deploy_parameters: build.template(std.get(block, 'deploy_parameters', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                require_approval: build.template(std.get(block, 'require_approval', null, true)),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      create_time: p.child('create_time').ref,
      deploy_parameters: p.child('deploy_parameters').ref,
      description: p.child('description').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      require_approval: p.child('require_approval').ref,
      target_id: p.child('target_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    clouddeploy_target_iam_binding(name, block): {
      local p = path(['google_clouddeploy_target_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddeploy_target_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    clouddeploy_target_iam_member(name, block): {
      local p = path(['google_clouddeploy_target_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddeploy_target_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    clouddeploy_target_iam_policy(name, block): {
      local p = path(['google_clouddeploy_target_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddeploy_target_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    clouddomains_registration(name, block): {
      local p = path(['google_clouddomains_registration', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_clouddomains_registration: {
              [name]: std.prune({
                contact_notices: build.template(std.get(block, 'contact_notices', null, true)),
                domain_name: build.template(block.domain_name),
                domain_notices: build.template(std.get(block, 'domain_notices', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      contact_notices: p.child('contact_notices').ref,
      create_time: p.child('create_time').ref,
      domain_name: p.child('domain_name').ref,
      domain_notices: p.child('domain_notices').ref,
      effective_labels: p.child('effective_labels').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      issues: p.child('issues').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      register_failure_reason: p.child('register_failure_reason').ref,
      state: p.child('state').ref,
      supported_privacy: p.child('supported_privacy').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    cloudfunctions2_function(name, block): {
      local p = path(['google_cloudfunctions2_function', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudfunctions2_function: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                kms_key_name: build.template(std.get(block, 'kms_key_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      environment: p.child('environment').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
      url: p.child('url').ref,
    },
    cloudfunctions2_function_iam_binding(name, block): {
      local p = path(['google_cloudfunctions2_function_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudfunctions2_function_iam_binding: {
              [name]: std.prune({
                cloud_function: build.template(block.cloud_function),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      cloud_function: p.child('cloud_function').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    cloudfunctions2_function_iam_member(name, block): {
      local p = path(['google_cloudfunctions2_function_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudfunctions2_function_iam_member: {
              [name]: std.prune({
                cloud_function: build.template(block.cloud_function),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      cloud_function: p.child('cloud_function').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    cloudfunctions2_function_iam_policy(name, block): {
      local p = path(['google_cloudfunctions2_function_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudfunctions2_function_iam_policy: {
              [name]: std.prune({
                cloud_function: build.template(block.cloud_function),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      cloud_function: p.child('cloud_function').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    cloudfunctions_function(name, block): {
      local p = path(['google_cloudfunctions_function', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudfunctions_function: {
              [name]: std.prune({
                available_memory_mb: build.template(std.get(block, 'available_memory_mb', null, true)),
                build_environment_variables: build.template(std.get(block, 'build_environment_variables', null, true)),
                build_worker_pool: build.template(std.get(block, 'build_worker_pool', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                docker_repository: build.template(std.get(block, 'docker_repository', null, true)),
                entry_point: build.template(std.get(block, 'entry_point', null, true)),
                environment_variables: build.template(std.get(block, 'environment_variables', null, true)),
                ingress_settings: build.template(std.get(block, 'ingress_settings', null, true)),
                kms_key_name: build.template(std.get(block, 'kms_key_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                min_instances: build.template(std.get(block, 'min_instances', null, true)),
                name: build.template(block.name),
                runtime: build.template(block.runtime),
                source_archive_bucket: build.template(std.get(block, 'source_archive_bucket', null, true)),
                source_archive_object: build.template(std.get(block, 'source_archive_object', null, true)),
                timeout: build.template(std.get(block, 'timeout', null, true)),
                trigger_http: build.template(std.get(block, 'trigger_http', null, true)),
                vpc_connector: build.template(std.get(block, 'vpc_connector', null, true)),
              }),
            },
          },
        },
      },
      available_memory_mb: p.child('available_memory_mb').ref,
      build_environment_variables: p.child('build_environment_variables').ref,
      build_service_account: p.child('build_service_account').ref,
      build_worker_pool: p.child('build_worker_pool').ref,
      description: p.child('description').ref,
      docker_registry: p.child('docker_registry').ref,
      docker_repository: p.child('docker_repository').ref,
      effective_labels: p.child('effective_labels').ref,
      entry_point: p.child('entry_point').ref,
      environment_variables: p.child('environment_variables').ref,
      https_trigger_security_level: p.child('https_trigger_security_level').ref,
      https_trigger_url: p.child('https_trigger_url').ref,
      id: p.child('id').ref,
      ingress_settings: p.child('ingress_settings').ref,
      kms_key_name: p.child('kms_key_name').ref,
      labels: p.child('labels').ref,
      max_instances: p.child('max_instances').ref,
      min_instances: p.child('min_instances').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      runtime: p.child('runtime').ref,
      service_account_email: p.child('service_account_email').ref,
      source_archive_bucket: p.child('source_archive_bucket').ref,
      source_archive_object: p.child('source_archive_object').ref,
      status: p.child('status').ref,
      terraform_labels: p.child('terraform_labels').ref,
      timeout: p.child('timeout').ref,
      trigger_http: p.child('trigger_http').ref,
      version_id: p.child('version_id').ref,
      vpc_connector: p.child('vpc_connector').ref,
      vpc_connector_egress_settings: p.child('vpc_connector_egress_settings').ref,
    },
    cloudfunctions_function_iam_binding(name, block): {
      local p = path(['google_cloudfunctions_function_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudfunctions_function_iam_binding: {
              [name]: std.prune({
                cloud_function: build.template(block.cloud_function),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      cloud_function: p.child('cloud_function').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    cloudfunctions_function_iam_member(name, block): {
      local p = path(['google_cloudfunctions_function_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudfunctions_function_iam_member: {
              [name]: std.prune({
                cloud_function: build.template(block.cloud_function),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      cloud_function: p.child('cloud_function').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    cloudfunctions_function_iam_policy(name, block): {
      local p = path(['google_cloudfunctions_function_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_cloudfunctions_function_iam_policy: {
              [name]: std.prune({
                cloud_function: build.template(block.cloud_function),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      cloud_function: p.child('cloud_function').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    composer_environment(name, block): {
      local p = path(['google_composer_environment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_composer_environment: {
              [name]: std.prune({
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    compute_address(name, block): {
      local p = path(['google_compute_address', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_address: {
              [name]: std.prune({
                address_type: build.template(std.get(block, 'address_type', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                ip_version: build.template(std.get(block, 'ip_version', null, true)),
                ipv6_endpoint_type: build.template(std.get(block, 'ipv6_endpoint_type', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                network: build.template(std.get(block, 'network', null, true)),
              }),
            },
          },
        },
      },
      address: p.child('address').ref,
      address_type: p.child('address_type').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      ip_version: p.child('ip_version').ref,
      ipv6_endpoint_type: p.child('ipv6_endpoint_type').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      network_tier: p.child('network_tier').ref,
      prefix_length: p.child('prefix_length').ref,
      project: p.child('project').ref,
      purpose: p.child('purpose').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      subnetwork: p.child('subnetwork').ref,
      terraform_labels: p.child('terraform_labels').ref,
      users: p.child('users').ref,
    },
    compute_attached_disk(name, block): {
      local p = path(['google_compute_attached_disk', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_attached_disk: {
              [name]: std.prune({
                disk: build.template(block.disk),
                instance: build.template(block.instance),
                interface: build.template(std.get(block, 'interface', null, true)),
                mode: build.template(std.get(block, 'mode', null, true)),
              }),
            },
          },
        },
      },
      device_name: p.child('device_name').ref,
      disk: p.child('disk').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      interface: p.child('interface').ref,
      mode: p.child('mode').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_autoscaler(name, block): {
      local p = path(['google_compute_autoscaler', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_autoscaler: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                target: build.template(block.target),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      target: p.child('target').ref,
      zone: p.child('zone').ref,
    },
    compute_backend_bucket(name, block): {
      local p = path(['google_compute_backend_bucket', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_backend_bucket: {
              [name]: std.prune({
                bucket_name: build.template(block.bucket_name),
                compression_mode: build.template(std.get(block, 'compression_mode', null, true)),
                custom_response_headers: build.template(std.get(block, 'custom_response_headers', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                edge_security_policy: build.template(std.get(block, 'edge_security_policy', null, true)),
                enable_cdn: build.template(std.get(block, 'enable_cdn', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      bucket_name: p.child('bucket_name').ref,
      compression_mode: p.child('compression_mode').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      custom_response_headers: p.child('custom_response_headers').ref,
      description: p.child('description').ref,
      edge_security_policy: p.child('edge_security_policy').ref,
      enable_cdn: p.child('enable_cdn').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
    },
    compute_backend_bucket_signed_url_key(name, block): {
      local p = path(['google_compute_backend_bucket_signed_url_key', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_backend_bucket_signed_url_key: {
              [name]: std.prune({
                backend_bucket: build.template(block.backend_bucket),
                key_value: build.template(block.key_value),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      backend_bucket: p.child('backend_bucket').ref,
      id: p.child('id').ref,
      key_value: p.child('key_value').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    compute_backend_service(name, block): {
      local p = path(['google_compute_backend_service', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_backend_service: {
              [name]: std.prune({
                affinity_cookie_ttl_sec: build.template(std.get(block, 'affinity_cookie_ttl_sec', null, true)),
                compression_mode: build.template(std.get(block, 'compression_mode', null, true)),
                connection_draining_timeout_sec: build.template(std.get(block, 'connection_draining_timeout_sec', null, true)),
                custom_request_headers: build.template(std.get(block, 'custom_request_headers', null, true)),
                custom_response_headers: build.template(std.get(block, 'custom_response_headers', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                edge_security_policy: build.template(std.get(block, 'edge_security_policy', null, true)),
                enable_cdn: build.template(std.get(block, 'enable_cdn', null, true)),
                health_checks: build.template(std.get(block, 'health_checks', null, true)),
                load_balancing_scheme: build.template(std.get(block, 'load_balancing_scheme', null, true)),
                locality_lb_policy: build.template(std.get(block, 'locality_lb_policy', null, true)),
                name: build.template(block.name),
                security_policy: build.template(std.get(block, 'security_policy', null, true)),
                service_lb_policy: build.template(std.get(block, 'service_lb_policy', null, true)),
              }),
            },
          },
        },
      },
      affinity_cookie_ttl_sec: p.child('affinity_cookie_ttl_sec').ref,
      compression_mode: p.child('compression_mode').ref,
      connection_draining_timeout_sec: p.child('connection_draining_timeout_sec').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      custom_request_headers: p.child('custom_request_headers').ref,
      custom_response_headers: p.child('custom_response_headers').ref,
      description: p.child('description').ref,
      edge_security_policy: p.child('edge_security_policy').ref,
      enable_cdn: p.child('enable_cdn').ref,
      fingerprint: p.child('fingerprint').ref,
      generated_id: p.child('generated_id').ref,
      health_checks: p.child('health_checks').ref,
      id: p.child('id').ref,
      load_balancing_scheme: p.child('load_balancing_scheme').ref,
      locality_lb_policy: p.child('locality_lb_policy').ref,
      name: p.child('name').ref,
      port_name: p.child('port_name').ref,
      project: p.child('project').ref,
      protocol: p.child('protocol').ref,
      security_policy: p.child('security_policy').ref,
      self_link: p.child('self_link').ref,
      service_lb_policy: p.child('service_lb_policy').ref,
      session_affinity: p.child('session_affinity').ref,
      timeout_sec: p.child('timeout_sec').ref,
    },
    compute_backend_service_signed_url_key(name, block): {
      local p = path(['google_compute_backend_service_signed_url_key', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_backend_service_signed_url_key: {
              [name]: std.prune({
                backend_service: build.template(block.backend_service),
                key_value: build.template(block.key_value),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      backend_service: p.child('backend_service').ref,
      id: p.child('id').ref,
      key_value: p.child('key_value').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    compute_disk(name, block): {
      local p = path(['google_compute_disk', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_disk: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                image: build.template(std.get(block, 'image', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                snapshot: build.template(std.get(block, 'snapshot', null, true)),
                source_disk: build.template(std.get(block, 'source_disk', null, true)),
                storage_pool: build.template(std.get(block, 'storage_pool', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      access_mode: p.child('access_mode').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      disk_id: p.child('disk_id').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_confidential_compute: p.child('enable_confidential_compute').ref,
      id: p.child('id').ref,
      image: p.child('image').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      last_attach_timestamp: p.child('last_attach_timestamp').ref,
      last_detach_timestamp: p.child('last_detach_timestamp').ref,
      licenses: p.child('licenses').ref,
      name: p.child('name').ref,
      physical_block_size_bytes: p.child('physical_block_size_bytes').ref,
      project: p.child('project').ref,
      provisioned_iops: p.child('provisioned_iops').ref,
      provisioned_throughput: p.child('provisioned_throughput').ref,
      self_link: p.child('self_link').ref,
      size: p.child('size').ref,
      snapshot: p.child('snapshot').ref,
      source_disk: p.child('source_disk').ref,
      source_disk_id: p.child('source_disk_id').ref,
      source_image_id: p.child('source_image_id').ref,
      source_snapshot_id: p.child('source_snapshot_id').ref,
      storage_pool: p.child('storage_pool').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      users: p.child('users').ref,
      zone: p.child('zone').ref,
    },
    compute_disk_async_replication(name, block): {
      local p = path(['google_compute_disk_async_replication', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_disk_async_replication: {
              [name]: std.prune({
                primary_disk: build.template(block.primary_disk),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      primary_disk: p.child('primary_disk').ref,
    },
    compute_disk_iam_binding(name, block): {
      local p = path(['google_compute_disk_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_disk_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      zone: p.child('zone').ref,
    },
    compute_disk_iam_member(name, block): {
      local p = path(['google_compute_disk_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_disk_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      zone: p.child('zone').ref,
    },
    compute_disk_iam_policy(name, block): {
      local p = path(['google_compute_disk_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_disk_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_disk_resource_policy_attachment(name, block): {
      local p = path(['google_compute_disk_resource_policy_attachment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_disk_resource_policy_attachment: {
              [name]: std.prune({
                disk: build.template(block.disk),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      disk: p.child('disk').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_external_vpn_gateway(name, block): {
      local p = path(['google_compute_external_vpn_gateway', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_external_vpn_gateway: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                redundancy_type: build.template(std.get(block, 'redundancy_type', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      redundancy_type: p.child('redundancy_type').ref,
      self_link: p.child('self_link').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    compute_firewall(name, block): {
      local p = path(['google_compute_firewall', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_firewall: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                name: build.template(block.name),
                network: build.template(block.network),
                priority: build.template(std.get(block, 'priority', null, true)),
                source_ranges: build.template(std.get(block, 'source_ranges', null, true)),
                source_service_accounts: build.template(std.get(block, 'source_service_accounts', null, true)),
                source_tags: build.template(std.get(block, 'source_tags', null, true)),
                target_service_accounts: build.template(std.get(block, 'target_service_accounts', null, true)),
                target_tags: build.template(std.get(block, 'target_tags', null, true)),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      destination_ranges: p.child('destination_ranges').ref,
      direction: p.child('direction').ref,
      disabled: p.child('disabled').ref,
      enable_logging: p.child('enable_logging').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      priority: p.child('priority').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      source_ranges: p.child('source_ranges').ref,
      source_service_accounts: p.child('source_service_accounts').ref,
      source_tags: p.child('source_tags').ref,
      target_service_accounts: p.child('target_service_accounts').ref,
      target_tags: p.child('target_tags').ref,
    },
    compute_firewall_policy(name, block): {
      local p = path(['google_compute_firewall_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_firewall_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                parent: build.template(block.parent),
                short_name: build.template(block.short_name),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      fingerprint: p.child('fingerprint').ref,
      firewall_policy_id: p.child('firewall_policy_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      rule_tuple_count: p.child('rule_tuple_count').ref,
      self_link: p.child('self_link').ref,
      self_link_with_id: p.child('self_link_with_id').ref,
      short_name: p.child('short_name').ref,
    },
    compute_firewall_policy_association(name, block): {
      local p = path(['google_compute_firewall_policy_association', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_firewall_policy_association: {
              [name]: std.prune({
                attachment_target: build.template(block.attachment_target),
                firewall_policy: build.template(block.firewall_policy),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      attachment_target: p.child('attachment_target').ref,
      firewall_policy: p.child('firewall_policy').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      short_name: p.child('short_name').ref,
    },
    compute_firewall_policy_rule(name, block): {
      local p = path(['google_compute_firewall_policy_rule', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_firewall_policy_rule: {
              [name]: std.prune({
                action: build.template(block.action),
                description: build.template(std.get(block, 'description', null, true)),
                direction: build.template(block.direction),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                enable_logging: build.template(std.get(block, 'enable_logging', null, true)),
                firewall_policy: build.template(block.firewall_policy),
                priority: build.template(block.priority),
                security_profile_group: build.template(std.get(block, 'security_profile_group', null, true)),
                target_resources: build.template(std.get(block, 'target_resources', null, true)),
                target_service_accounts: build.template(std.get(block, 'target_service_accounts', null, true)),
                tls_inspect: build.template(std.get(block, 'tls_inspect', null, true)),
              }),
            },
          },
        },
      },
      action: p.child('action').ref,
      description: p.child('description').ref,
      direction: p.child('direction').ref,
      disabled: p.child('disabled').ref,
      enable_logging: p.child('enable_logging').ref,
      firewall_policy: p.child('firewall_policy').ref,
      id: p.child('id').ref,
      kind: p.child('kind').ref,
      priority: p.child('priority').ref,
      rule_tuple_count: p.child('rule_tuple_count').ref,
      security_profile_group: p.child('security_profile_group').ref,
      target_resources: p.child('target_resources').ref,
      target_service_accounts: p.child('target_service_accounts').ref,
      tls_inspect: p.child('tls_inspect').ref,
    },
    compute_forwarding_rule(name, block): {
      local p = path(['google_compute_forwarding_rule', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_forwarding_rule: {
              [name]: std.prune({
                all_ports: build.template(std.get(block, 'all_ports', null, true)),
                allow_global_access: build.template(std.get(block, 'allow_global_access', null, true)),
                allow_psc_global_access: build.template(std.get(block, 'allow_psc_global_access', null, true)),
                backend_service: build.template(std.get(block, 'backend_service', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                is_mirroring_collector: build.template(std.get(block, 'is_mirroring_collector', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                load_balancing_scheme: build.template(std.get(block, 'load_balancing_scheme', null, true)),
                name: build.template(block.name),
                no_automate_dns_zone: build.template(std.get(block, 'no_automate_dns_zone', null, true)),
                ports: build.template(std.get(block, 'ports', null, true)),
                recreate_closed_psc: build.template(std.get(block, 'recreate_closed_psc', null, true)),
                service_label: build.template(std.get(block, 'service_label', null, true)),
                source_ip_ranges: build.template(std.get(block, 'source_ip_ranges', null, true)),
                target: build.template(std.get(block, 'target', null, true)),
              }),
            },
          },
        },
      },
      all_ports: p.child('all_ports').ref,
      allow_global_access: p.child('allow_global_access').ref,
      allow_psc_global_access: p.child('allow_psc_global_access').ref,
      backend_service: p.child('backend_service').ref,
      base_forwarding_rule: p.child('base_forwarding_rule').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      forwarding_rule_id: p.child('forwarding_rule_id').ref,
      id: p.child('id').ref,
      ip_address: p.child('ip_address').ref,
      ip_protocol: p.child('ip_protocol').ref,
      ip_version: p.child('ip_version').ref,
      is_mirroring_collector: p.child('is_mirroring_collector').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      load_balancing_scheme: p.child('load_balancing_scheme').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      network_tier: p.child('network_tier').ref,
      no_automate_dns_zone: p.child('no_automate_dns_zone').ref,
      port_range: p.child('port_range').ref,
      ports: p.child('ports').ref,
      project: p.child('project').ref,
      psc_connection_id: p.child('psc_connection_id').ref,
      psc_connection_status: p.child('psc_connection_status').ref,
      recreate_closed_psc: p.child('recreate_closed_psc').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      service_label: p.child('service_label').ref,
      service_name: p.child('service_name').ref,
      source_ip_ranges: p.child('source_ip_ranges').ref,
      subnetwork: p.child('subnetwork').ref,
      target: p.child('target').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    compute_global_address(name, block): {
      local p = path(['google_compute_global_address', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_global_address: {
              [name]: std.prune({
                address_type: build.template(std.get(block, 'address_type', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                ip_version: build.template(std.get(block, 'ip_version', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                network: build.template(std.get(block, 'network', null, true)),
                purpose: build.template(std.get(block, 'purpose', null, true)),
              }),
            },
          },
        },
      },
      address: p.child('address').ref,
      address_type: p.child('address_type').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      ip_version: p.child('ip_version').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      prefix_length: p.child('prefix_length').ref,
      project: p.child('project').ref,
      purpose: p.child('purpose').ref,
      self_link: p.child('self_link').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    compute_global_forwarding_rule(name, block): {
      local p = path(['google_compute_global_forwarding_rule', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_global_forwarding_rule: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                ip_version: build.template(std.get(block, 'ip_version', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                load_balancing_scheme: build.template(std.get(block, 'load_balancing_scheme', null, true)),
                name: build.template(block.name),
                no_automate_dns_zone: build.template(std.get(block, 'no_automate_dns_zone', null, true)),
                port_range: build.template(std.get(block, 'port_range', null, true)),
                source_ip_ranges: build.template(std.get(block, 'source_ip_ranges', null, true)),
                target: build.template(block.target),
              }),
            },
          },
        },
      },
      base_forwarding_rule: p.child('base_forwarding_rule').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      ip_address: p.child('ip_address').ref,
      ip_protocol: p.child('ip_protocol').ref,
      ip_version: p.child('ip_version').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      load_balancing_scheme: p.child('load_balancing_scheme').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      no_automate_dns_zone: p.child('no_automate_dns_zone').ref,
      port_range: p.child('port_range').ref,
      project: p.child('project').ref,
      psc_connection_id: p.child('psc_connection_id').ref,
      psc_connection_status: p.child('psc_connection_status').ref,
      self_link: p.child('self_link').ref,
      source_ip_ranges: p.child('source_ip_ranges').ref,
      subnetwork: p.child('subnetwork').ref,
      target: p.child('target').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    compute_global_network_endpoint(name, block): {
      local p = path(['google_compute_global_network_endpoint', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_global_network_endpoint: {
              [name]: std.prune({
                fqdn: build.template(std.get(block, 'fqdn', null, true)),
                global_network_endpoint_group: build.template(block.global_network_endpoint_group),
                ip_address: build.template(std.get(block, 'ip_address', null, true)),
                port: build.template(block.port),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').ref,
      global_network_endpoint_group: p.child('global_network_endpoint_group').ref,
      id: p.child('id').ref,
      ip_address: p.child('ip_address').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
    },
    compute_global_network_endpoint_group(name, block): {
      local p = path(['google_compute_global_network_endpoint_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_global_network_endpoint_group: {
              [name]: std.prune({
                default_port: build.template(std.get(block, 'default_port', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                network_endpoint_type: build.template(block.network_endpoint_type),
              }),
            },
          },
        },
      },
      default_port: p.child('default_port').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network_endpoint_type: p.child('network_endpoint_type').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
    },
    compute_ha_vpn_gateway(name, block): {
      local p = path(['google_compute_ha_vpn_gateway', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_ha_vpn_gateway: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                gateway_ip_version: build.template(std.get(block, 'gateway_ip_version', null, true)),
                name: build.template(block.name),
                network: build.template(block.network),
                stack_type: build.template(std.get(block, 'stack_type', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      gateway_ip_version: p.child('gateway_ip_version').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      stack_type: p.child('stack_type').ref,
    },
    compute_health_check(name, block): {
      local p = path(['google_compute_health_check', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_health_check: {
              [name]: std.prune({
                check_interval_sec: build.template(std.get(block, 'check_interval_sec', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                healthy_threshold: build.template(std.get(block, 'healthy_threshold', null, true)),
                name: build.template(block.name),
                source_regions: build.template(std.get(block, 'source_regions', null, true)),
                timeout_sec: build.template(std.get(block, 'timeout_sec', null, true)),
                unhealthy_threshold: build.template(std.get(block, 'unhealthy_threshold', null, true)),
              }),
            },
          },
        },
      },
      check_interval_sec: p.child('check_interval_sec').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      healthy_threshold: p.child('healthy_threshold').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      source_regions: p.child('source_regions').ref,
      timeout_sec: p.child('timeout_sec').ref,
      type: p.child('type').ref,
      unhealthy_threshold: p.child('unhealthy_threshold').ref,
    },
    compute_http_health_check(name, block): {
      local p = path(['google_compute_http_health_check', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_http_health_check: {
              [name]: std.prune({
                check_interval_sec: build.template(std.get(block, 'check_interval_sec', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                healthy_threshold: build.template(std.get(block, 'healthy_threshold', null, true)),
                host: build.template(std.get(block, 'host', null, true)),
                name: build.template(block.name),
                port: build.template(std.get(block, 'port', null, true)),
                request_path: build.template(std.get(block, 'request_path', null, true)),
                timeout_sec: build.template(std.get(block, 'timeout_sec', null, true)),
                unhealthy_threshold: build.template(std.get(block, 'unhealthy_threshold', null, true)),
              }),
            },
          },
        },
      },
      check_interval_sec: p.child('check_interval_sec').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      healthy_threshold: p.child('healthy_threshold').ref,
      host: p.child('host').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
      request_path: p.child('request_path').ref,
      self_link: p.child('self_link').ref,
      timeout_sec: p.child('timeout_sec').ref,
      unhealthy_threshold: p.child('unhealthy_threshold').ref,
    },
    compute_https_health_check(name, block): {
      local p = path(['google_compute_https_health_check', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_https_health_check: {
              [name]: std.prune({
                check_interval_sec: build.template(std.get(block, 'check_interval_sec', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                healthy_threshold: build.template(std.get(block, 'healthy_threshold', null, true)),
                host: build.template(std.get(block, 'host', null, true)),
                name: build.template(block.name),
                port: build.template(std.get(block, 'port', null, true)),
                request_path: build.template(std.get(block, 'request_path', null, true)),
                timeout_sec: build.template(std.get(block, 'timeout_sec', null, true)),
                unhealthy_threshold: build.template(std.get(block, 'unhealthy_threshold', null, true)),
              }),
            },
          },
        },
      },
      check_interval_sec: p.child('check_interval_sec').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      healthy_threshold: p.child('healthy_threshold').ref,
      host: p.child('host').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
      request_path: p.child('request_path').ref,
      self_link: p.child('self_link').ref,
      timeout_sec: p.child('timeout_sec').ref,
      unhealthy_threshold: p.child('unhealthy_threshold').ref,
    },
    compute_image(name, block): {
      local p = path(['google_compute_image', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_image: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                family: build.template(std.get(block, 'family', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                source_disk: build.template(std.get(block, 'source_disk', null, true)),
                source_image: build.template(std.get(block, 'source_image', null, true)),
                source_snapshot: build.template(std.get(block, 'source_snapshot', null, true)),
              }),
            },
          },
        },
      },
      archive_size_bytes: p.child('archive_size_bytes').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      disk_size_gb: p.child('disk_size_gb').ref,
      effective_labels: p.child('effective_labels').ref,
      family: p.child('family').ref,
      id: p.child('id').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      licenses: p.child('licenses').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      source_disk: p.child('source_disk').ref,
      source_image: p.child('source_image').ref,
      source_snapshot: p.child('source_snapshot').ref,
      storage_locations: p.child('storage_locations').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    compute_image_iam_binding(name, block): {
      local p = path(['google_compute_image_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_image_iam_binding: {
              [name]: std.prune({
                image: build.template(block.image),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      image: p.child('image').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    compute_image_iam_member(name, block): {
      local p = path(['google_compute_image_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_image_iam_member: {
              [name]: std.prune({
                image: build.template(block.image),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      image: p.child('image').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    compute_image_iam_policy(name, block): {
      local p = path(['google_compute_image_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_image_iam_policy: {
              [name]: std.prune({
                image: build.template(block.image),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      image: p.child('image').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    compute_instance(name, block): {
      local p = path(['google_compute_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_instance: {
              [name]: std.prune({
                allow_stopping_for_update: build.template(std.get(block, 'allow_stopping_for_update', null, true)),
                can_ip_forward: build.template(std.get(block, 'can_ip_forward', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                desired_status: build.template(std.get(block, 'desired_status', null, true)),
                enable_display: build.template(std.get(block, 'enable_display', null, true)),
                hostname: build.template(std.get(block, 'hostname', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                machine_type: build.template(block.machine_type),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                metadata_startup_script: build.template(std.get(block, 'metadata_startup_script', null, true)),
                name: build.template(block.name),
                resource_policies: build.template(std.get(block, 'resource_policies', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allow_stopping_for_update: p.child('allow_stopping_for_update').ref,
      can_ip_forward: p.child('can_ip_forward').ref,
      cpu_platform: p.child('cpu_platform').ref,
      current_status: p.child('current_status').ref,
      deletion_protection: p.child('deletion_protection').ref,
      description: p.child('description').ref,
      desired_status: p.child('desired_status').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_display: p.child('enable_display').ref,
      hostname: p.child('hostname').ref,
      id: p.child('id').ref,
      instance_id: p.child('instance_id').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      machine_type: p.child('machine_type').ref,
      metadata: p.child('metadata').ref,
      metadata_fingerprint: p.child('metadata_fingerprint').ref,
      metadata_startup_script: p.child('metadata_startup_script').ref,
      min_cpu_platform: p.child('min_cpu_platform').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      resource_policies: p.child('resource_policies').ref,
      self_link: p.child('self_link').ref,
      tags: p.child('tags').ref,
      tags_fingerprint: p.child('tags_fingerprint').ref,
      terraform_labels: p.child('terraform_labels').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_from_template(name, block): {
      local p = path(['google_compute_instance_from_template', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_instance_from_template: {
              [name]: std.prune({
                name: build.template(block.name),
                source_instance_template: build.template(block.source_instance_template),
              }),
            },
          },
        },
      },
      allow_stopping_for_update: p.child('allow_stopping_for_update').ref,
      can_ip_forward: p.child('can_ip_forward').ref,
      cpu_platform: p.child('cpu_platform').ref,
      current_status: p.child('current_status').ref,
      deletion_protection: p.child('deletion_protection').ref,
      description: p.child('description').ref,
      desired_status: p.child('desired_status').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_display: p.child('enable_display').ref,
      hostname: p.child('hostname').ref,
      id: p.child('id').ref,
      instance_id: p.child('instance_id').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      machine_type: p.child('machine_type').ref,
      metadata: p.child('metadata').ref,
      metadata_fingerprint: p.child('metadata_fingerprint').ref,
      metadata_startup_script: p.child('metadata_startup_script').ref,
      min_cpu_platform: p.child('min_cpu_platform').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      resource_policies: p.child('resource_policies').ref,
      self_link: p.child('self_link').ref,
      source_instance_template: p.child('source_instance_template').ref,
      tags: p.child('tags').ref,
      tags_fingerprint: p.child('tags_fingerprint').ref,
      terraform_labels: p.child('terraform_labels').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_group(name, block): {
      local p = path(['google_compute_instance_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_instance_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      id: p.child('id').ref,
      instances: p.child('instances').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      size: p.child('size').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_group_manager(name, block): {
      local p = path(['google_compute_instance_group_manager', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_instance_group_manager: {
              [name]: std.prune({
                base_instance_name: build.template(block.base_instance_name),
                description: build.template(std.get(block, 'description', null, true)),
                list_managed_instances_results: build.template(std.get(block, 'list_managed_instances_results', null, true)),
                name: build.template(block.name),
                target_pools: build.template(std.get(block, 'target_pools', null, true)),
                wait_for_instances: build.template(std.get(block, 'wait_for_instances', null, true)),
                wait_for_instances_status: build.template(std.get(block, 'wait_for_instances_status', null, true)),
              }),
            },
          },
        },
      },
      base_instance_name: p.child('base_instance_name').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      instance_group: p.child('instance_group').ref,
      list_managed_instances_results: p.child('list_managed_instances_results').ref,
      name: p.child('name').ref,
      operation: p.child('operation').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      status: p.child('status').ref,
      target_pools: p.child('target_pools').ref,
      target_size: p.child('target_size').ref,
      wait_for_instances: p.child('wait_for_instances').ref,
      wait_for_instances_status: p.child('wait_for_instances_status').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_group_membership(name, block): {
      local p = path(['google_compute_instance_group_membership', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_instance_group_membership: {
              [name]: std.prune({
                instance: build.template(block.instance),
                instance_group: build.template(block.instance_group),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      instance_group: p.child('instance_group').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_group_named_port(name, block): {
      local p = path(['google_compute_instance_group_named_port', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_instance_group_named_port: {
              [name]: std.prune({
                group: build.template(block.group),
                name: build.template(block.name),
                port: build.template(block.port),
              }),
            },
          },
        },
      },
      group: p.child('group').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_iam_binding(name, block): {
      local p = path(['google_compute_instance_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_instance_iam_binding: {
              [name]: std.prune({
                instance_name: build.template(block.instance_name),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance_name: p.child('instance_name').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_iam_member(name, block): {
      local p = path(['google_compute_instance_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_instance_iam_member: {
              [name]: std.prune({
                instance_name: build.template(block.instance_name),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance_name: p.child('instance_name').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_iam_policy(name, block): {
      local p = path(['google_compute_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_instance_iam_policy: {
              [name]: std.prune({
                instance_name: build.template(block.instance_name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance_name: p.child('instance_name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_settings(name, block): {
      local p = path(['google_compute_instance_settings', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_instance_settings: {
              [name]: std.prune({
                zone: build.template(block.zone),
              }),
            },
          },
        },
      },
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_template(name, block): {
      local p = path(['google_compute_instance_template', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_instance_template: {
              [name]: std.prune({
                can_ip_forward: build.template(std.get(block, 'can_ip_forward', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                instance_description: build.template(std.get(block, 'instance_description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                machine_type: build.template(block.machine_type),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                metadata_startup_script: build.template(std.get(block, 'metadata_startup_script', null, true)),
                min_cpu_platform: build.template(std.get(block, 'min_cpu_platform', null, true)),
                resource_manager_tags: build.template(std.get(block, 'resource_manager_tags', null, true)),
                resource_policies: build.template(std.get(block, 'resource_policies', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      can_ip_forward: p.child('can_ip_forward').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      instance_description: p.child('instance_description').ref,
      labels: p.child('labels').ref,
      machine_type: p.child('machine_type').ref,
      metadata: p.child('metadata').ref,
      metadata_fingerprint: p.child('metadata_fingerprint').ref,
      metadata_startup_script: p.child('metadata_startup_script').ref,
      min_cpu_platform: p.child('min_cpu_platform').ref,
      name: p.child('name').ref,
      name_prefix: p.child('name_prefix').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      resource_manager_tags: p.child('resource_manager_tags').ref,
      resource_policies: p.child('resource_policies').ref,
      self_link: p.child('self_link').ref,
      self_link_unique: p.child('self_link_unique').ref,
      tags: p.child('tags').ref,
      tags_fingerprint: p.child('tags_fingerprint').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    compute_interconnect(name, block): {
      local p = path(['google_compute_interconnect', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_interconnect: {
              [name]: std.prune({
                admin_enabled: build.template(std.get(block, 'admin_enabled', null, true)),
                customer_name: build.template(std.get(block, 'customer_name', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                interconnect_type: build.template(block.interconnect_type),
                labels: build.template(std.get(block, 'labels', null, true)),
                link_type: build.template(block.link_type),
                location: build.template(std.get(block, 'location', null, true)),
                macsec_enabled: build.template(std.get(block, 'macsec_enabled', null, true)),
                name: build.template(block.name),
                noc_contact_email: build.template(std.get(block, 'noc_contact_email', null, true)),
                remote_location: build.template(std.get(block, 'remote_location', null, true)),
                requested_features: build.template(std.get(block, 'requested_features', null, true)),
                requested_link_count: build.template(block.requested_link_count),
              }),
            },
          },
        },
      },
      admin_enabled: p.child('admin_enabled').ref,
      available_features: p.child('available_features').ref,
      circuit_infos: p.child('circuit_infos').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      customer_name: p.child('customer_name').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      expected_outages: p.child('expected_outages').ref,
      google_ip_address: p.child('google_ip_address').ref,
      google_reference_id: p.child('google_reference_id').ref,
      id: p.child('id').ref,
      interconnect_attachments: p.child('interconnect_attachments').ref,
      interconnect_type: p.child('interconnect_type').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      link_type: p.child('link_type').ref,
      location: p.child('location').ref,
      macsec_enabled: p.child('macsec_enabled').ref,
      name: p.child('name').ref,
      noc_contact_email: p.child('noc_contact_email').ref,
      operational_status: p.child('operational_status').ref,
      peer_ip_address: p.child('peer_ip_address').ref,
      project: p.child('project').ref,
      provisioned_link_count: p.child('provisioned_link_count').ref,
      remote_location: p.child('remote_location').ref,
      requested_features: p.child('requested_features').ref,
      requested_link_count: p.child('requested_link_count').ref,
      satisfies_pzs: p.child('satisfies_pzs').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    compute_interconnect_attachment(name, block): {
      local p = path(['google_compute_interconnect_attachment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_interconnect_attachment: {
              [name]: std.prune({
                admin_enabled: build.template(std.get(block, 'admin_enabled', null, true)),
                candidate_subnets: build.template(std.get(block, 'candidate_subnets', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                encryption: build.template(std.get(block, 'encryption', null, true)),
                interconnect: build.template(std.get(block, 'interconnect', null, true)),
                ipsec_internal_addresses: build.template(std.get(block, 'ipsec_internal_addresses', null, true)),
                name: build.template(block.name),
                router: build.template(block.router),
                subnet_length: build.template(std.get(block, 'subnet_length', null, true)),
              }),
            },
          },
        },
      },
      admin_enabled: p.child('admin_enabled').ref,
      bandwidth: p.child('bandwidth').ref,
      candidate_subnets: p.child('candidate_subnets').ref,
      cloud_router_ip_address: p.child('cloud_router_ip_address').ref,
      cloud_router_ipv6_address: p.child('cloud_router_ipv6_address').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      customer_router_ip_address: p.child('customer_router_ip_address').ref,
      customer_router_ipv6_address: p.child('customer_router_ipv6_address').ref,
      description: p.child('description').ref,
      edge_availability_domain: p.child('edge_availability_domain').ref,
      encryption: p.child('encryption').ref,
      google_reference_id: p.child('google_reference_id').ref,
      id: p.child('id').ref,
      interconnect: p.child('interconnect').ref,
      ipsec_internal_addresses: p.child('ipsec_internal_addresses').ref,
      mtu: p.child('mtu').ref,
      name: p.child('name').ref,
      pairing_key: p.child('pairing_key').ref,
      partner_asn: p.child('partner_asn').ref,
      private_interconnect_info: p.child('private_interconnect_info').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      router: p.child('router').ref,
      self_link: p.child('self_link').ref,
      stack_type: p.child('stack_type').ref,
      state: p.child('state').ref,
      subnet_length: p.child('subnet_length').ref,
      type: p.child('type').ref,
      vlan_tag8021q: p.child('vlan_tag8021q').ref,
    },
    compute_managed_ssl_certificate(name, block): {
      local p = path(['google_compute_managed_ssl_certificate', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_managed_ssl_certificate: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      certificate_id: p.child('certificate_id').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      subject_alternative_names: p.child('subject_alternative_names').ref,
      type: p.child('type').ref,
    },
    compute_network(name, block): {
      local p = path(['google_compute_network', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_network: {
              [name]: std.prune({
                auto_create_subnetworks: build.template(std.get(block, 'auto_create_subnetworks', null, true)),
                delete_default_routes_on_create: build.template(std.get(block, 'delete_default_routes_on_create', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                enable_ula_internal_ipv6: build.template(std.get(block, 'enable_ula_internal_ipv6', null, true)),
                name: build.template(block.name),
                network_firewall_policy_enforcement_order: build.template(std.get(block, 'network_firewall_policy_enforcement_order', null, true)),
              }),
            },
          },
        },
      },
      auto_create_subnetworks: p.child('auto_create_subnetworks').ref,
      delete_default_routes_on_create: p.child('delete_default_routes_on_create').ref,
      description: p.child('description').ref,
      enable_ula_internal_ipv6: p.child('enable_ula_internal_ipv6').ref,
      gateway_ipv4: p.child('gateway_ipv4').ref,
      id: p.child('id').ref,
      internal_ipv6_range: p.child('internal_ipv6_range').ref,
      mtu: p.child('mtu').ref,
      name: p.child('name').ref,
      network_firewall_policy_enforcement_order: p.child('network_firewall_policy_enforcement_order').ref,
      numeric_id: p.child('numeric_id').ref,
      project: p.child('project').ref,
      routing_mode: p.child('routing_mode').ref,
      self_link: p.child('self_link').ref,
    },
    compute_network_attachment(name, block): {
      local p = path(['google_compute_network_attachment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_network_attachment: {
              [name]: std.prune({
                connection_preference: build.template(block.connection_preference),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                producer_accept_lists: build.template(std.get(block, 'producer_accept_lists', null, true)),
                producer_reject_lists: build.template(std.get(block, 'producer_reject_lists', null, true)),
                subnetworks: build.template(block.subnetworks),
              }),
            },
          },
        },
      },
      connection_endpoints: p.child('connection_endpoints').ref,
      connection_preference: p.child('connection_preference').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      kind: p.child('kind').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      producer_accept_lists: p.child('producer_accept_lists').ref,
      producer_reject_lists: p.child('producer_reject_lists').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      self_link_with_id: p.child('self_link_with_id').ref,
      subnetworks: p.child('subnetworks').ref,
    },
    compute_network_endpoint(name, block): {
      local p = path(['google_compute_network_endpoint', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_network_endpoint: {
              [name]: std.prune({
                instance: build.template(std.get(block, 'instance', null, true)),
                ip_address: build.template(block.ip_address),
                network_endpoint_group: build.template(block.network_endpoint_group),
                port: build.template(std.get(block, 'port', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      ip_address: p.child('ip_address').ref,
      network_endpoint_group: p.child('network_endpoint_group').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_network_endpoint_group(name, block): {
      local p = path(['google_compute_network_endpoint_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_network_endpoint_group: {
              [name]: std.prune({
                default_port: build.template(std.get(block, 'default_port', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                network: build.template(block.network),
                network_endpoint_type: build.template(std.get(block, 'network_endpoint_type', null, true)),
                subnetwork: build.template(std.get(block, 'subnetwork', null, true)),
              }),
            },
          },
        },
      },
      default_port: p.child('default_port').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      network_endpoint_type: p.child('network_endpoint_type').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      size: p.child('size').ref,
      subnetwork: p.child('subnetwork').ref,
      zone: p.child('zone').ref,
    },
    compute_network_endpoints(name, block): {
      local p = path(['google_compute_network_endpoints', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_network_endpoints: {
              [name]: std.prune({
                network_endpoint_group: build.template(block.network_endpoint_group),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      network_endpoint_group: p.child('network_endpoint_group').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_network_firewall_policy(name, block): {
      local p = path(['google_compute_network_firewall_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_network_firewall_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network_firewall_policy_id: p.child('network_firewall_policy_id').ref,
      project: p.child('project').ref,
      rule_tuple_count: p.child('rule_tuple_count').ref,
      self_link: p.child('self_link').ref,
      self_link_with_id: p.child('self_link_with_id').ref,
    },
    compute_network_firewall_policy_association(name, block): {
      local p = path(['google_compute_network_firewall_policy_association', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_network_firewall_policy_association: {
              [name]: std.prune({
                attachment_target: build.template(block.attachment_target),
                firewall_policy: build.template(block.firewall_policy),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      attachment_target: p.child('attachment_target').ref,
      firewall_policy: p.child('firewall_policy').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      short_name: p.child('short_name').ref,
    },
    compute_network_firewall_policy_rule(name, block): {
      local p = path(['google_compute_network_firewall_policy_rule', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_network_firewall_policy_rule: {
              [name]: std.prune({
                action: build.template(block.action),
                description: build.template(std.get(block, 'description', null, true)),
                direction: build.template(block.direction),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                enable_logging: build.template(std.get(block, 'enable_logging', null, true)),
                firewall_policy: build.template(block.firewall_policy),
                priority: build.template(block.priority),
                rule_name: build.template(std.get(block, 'rule_name', null, true)),
                security_profile_group: build.template(std.get(block, 'security_profile_group', null, true)),
                target_service_accounts: build.template(std.get(block, 'target_service_accounts', null, true)),
                tls_inspect: build.template(std.get(block, 'tls_inspect', null, true)),
              }),
            },
          },
        },
      },
      action: p.child('action').ref,
      description: p.child('description').ref,
      direction: p.child('direction').ref,
      disabled: p.child('disabled').ref,
      enable_logging: p.child('enable_logging').ref,
      firewall_policy: p.child('firewall_policy').ref,
      id: p.child('id').ref,
      kind: p.child('kind').ref,
      priority: p.child('priority').ref,
      project: p.child('project').ref,
      rule_name: p.child('rule_name').ref,
      rule_tuple_count: p.child('rule_tuple_count').ref,
      security_profile_group: p.child('security_profile_group').ref,
      target_service_accounts: p.child('target_service_accounts').ref,
      tls_inspect: p.child('tls_inspect').ref,
    },
    compute_network_peering(name, block): {
      local p = path(['google_compute_network_peering', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_network_peering: {
              [name]: std.prune({
                export_custom_routes: build.template(std.get(block, 'export_custom_routes', null, true)),
                export_subnet_routes_with_public_ip: build.template(std.get(block, 'export_subnet_routes_with_public_ip', null, true)),
                import_custom_routes: build.template(std.get(block, 'import_custom_routes', null, true)),
                import_subnet_routes_with_public_ip: build.template(std.get(block, 'import_subnet_routes_with_public_ip', null, true)),
                name: build.template(block.name),
                network: build.template(block.network),
                peer_network: build.template(block.peer_network),
                stack_type: build.template(std.get(block, 'stack_type', null, true)),
              }),
            },
          },
        },
      },
      export_custom_routes: p.child('export_custom_routes').ref,
      export_subnet_routes_with_public_ip: p.child('export_subnet_routes_with_public_ip').ref,
      id: p.child('id').ref,
      import_custom_routes: p.child('import_custom_routes').ref,
      import_subnet_routes_with_public_ip: p.child('import_subnet_routes_with_public_ip').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      peer_network: p.child('peer_network').ref,
      stack_type: p.child('stack_type').ref,
      state: p.child('state').ref,
      state_details: p.child('state_details').ref,
    },
    compute_network_peering_routes_config(name, block): {
      local p = path(['google_compute_network_peering_routes_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_network_peering_routes_config: {
              [name]: std.prune({
                export_custom_routes: build.template(block.export_custom_routes),
                import_custom_routes: build.template(block.import_custom_routes),
                network: build.template(block.network),
                peering: build.template(block.peering),
              }),
            },
          },
        },
      },
      export_custom_routes: p.child('export_custom_routes').ref,
      id: p.child('id').ref,
      import_custom_routes: p.child('import_custom_routes').ref,
      network: p.child('network').ref,
      peering: p.child('peering').ref,
      project: p.child('project').ref,
    },
    compute_node_group(name, block): {
      local p = path(['google_compute_node_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_node_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                initial_size: build.template(std.get(block, 'initial_size', null, true)),
                maintenance_policy: build.template(std.get(block, 'maintenance_policy', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                node_template: build.template(block.node_template),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      initial_size: p.child('initial_size').ref,
      maintenance_policy: p.child('maintenance_policy').ref,
      name: p.child('name').ref,
      node_template: p.child('node_template').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      size: p.child('size').ref,
      zone: p.child('zone').ref,
    },
    compute_node_template(name, block): {
      local p = path(['google_compute_node_template', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_node_template: {
              [name]: std.prune({
                cpu_overcommit_type: build.template(std.get(block, 'cpu_overcommit_type', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                node_affinity_labels: build.template(std.get(block, 'node_affinity_labels', null, true)),
                node_type: build.template(std.get(block, 'node_type', null, true)),
              }),
            },
          },
        },
      },
      cpu_overcommit_type: p.child('cpu_overcommit_type').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      node_affinity_labels: p.child('node_affinity_labels').ref,
      node_type: p.child('node_type').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
    },
    compute_packet_mirroring(name, block): {
      local p = path(['google_compute_packet_mirroring', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_packet_mirroring: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      priority: p.child('priority').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    compute_per_instance_config(name, block): {
      local p = path(['google_compute_per_instance_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_per_instance_config: {
              [name]: std.prune({
                instance_group_manager: build.template(block.instance_group_manager),
                minimal_action: build.template(std.get(block, 'minimal_action', null, true)),
                most_disruptive_allowed_action: build.template(std.get(block, 'most_disruptive_allowed_action', null, true)),
                name: build.template(block.name),
                remove_instance_on_destroy: build.template(std.get(block, 'remove_instance_on_destroy', null, true)),
                remove_instance_state_on_destroy: build.template(std.get(block, 'remove_instance_state_on_destroy', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      instance_group_manager: p.child('instance_group_manager').ref,
      minimal_action: p.child('minimal_action').ref,
      most_disruptive_allowed_action: p.child('most_disruptive_allowed_action').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      remove_instance_on_destroy: p.child('remove_instance_on_destroy').ref,
      remove_instance_state_on_destroy: p.child('remove_instance_state_on_destroy').ref,
      zone: p.child('zone').ref,
    },
    compute_project_cloud_armor_tier(name, block): {
      local p = path(['google_compute_project_cloud_armor_tier', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_project_cloud_armor_tier: {
              [name]: std.prune({
                cloud_armor_tier: build.template(block.cloud_armor_tier),
              }),
            },
          },
        },
      },
      cloud_armor_tier: p.child('cloud_armor_tier').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
    },
    compute_project_default_network_tier(name, block): {
      local p = path(['google_compute_project_default_network_tier', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_project_default_network_tier: {
              [name]: std.prune({
                network_tier: build.template(block.network_tier),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      network_tier: p.child('network_tier').ref,
      project: p.child('project').ref,
    },
    compute_project_metadata(name, block): {
      local p = path(['google_compute_project_metadata', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_project_metadata: {
              [name]: std.prune({
                metadata: build.template(block.metadata),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      metadata: p.child('metadata').ref,
      project: p.child('project').ref,
    },
    compute_project_metadata_item(name, block): {
      local p = path(['google_compute_project_metadata_item', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_project_metadata_item: {
              [name]: std.prune({
                key: build.template(block.key),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      key: p.child('key').ref,
      project: p.child('project').ref,
      value: p.child('value').ref,
    },
    compute_public_advertised_prefix(name, block): {
      local p = path(['google_compute_public_advertised_prefix', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_public_advertised_prefix: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                dns_verification_ip: build.template(block.dns_verification_ip),
                ip_cidr_range: build.template(block.ip_cidr_range),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      dns_verification_ip: p.child('dns_verification_ip').ref,
      id: p.child('id').ref,
      ip_cidr_range: p.child('ip_cidr_range').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      shared_secret: p.child('shared_secret').ref,
    },
    compute_public_delegated_prefix(name, block): {
      local p = path(['google_compute_public_delegated_prefix', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_public_delegated_prefix: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                ip_cidr_range: build.template(block.ip_cidr_range),
                is_live_migration: build.template(std.get(block, 'is_live_migration', null, true)),
                name: build.template(block.name),
                parent_prefix: build.template(block.parent_prefix),
                region: build.template(block.region),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      id: p.child('id').ref,
      ip_cidr_range: p.child('ip_cidr_range').ref,
      is_live_migration: p.child('is_live_migration').ref,
      name: p.child('name').ref,
      parent_prefix: p.child('parent_prefix').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
    },
    compute_region_autoscaler(name, block): {
      local p = path(['google_compute_region_autoscaler', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_autoscaler: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                target: build.template(block.target),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      target: p.child('target').ref,
    },
    compute_region_backend_service(name, block): {
      local p = path(['google_compute_region_backend_service', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_backend_service: {
              [name]: std.prune({
                affinity_cookie_ttl_sec: build.template(std.get(block, 'affinity_cookie_ttl_sec', null, true)),
                connection_draining_timeout_sec: build.template(std.get(block, 'connection_draining_timeout_sec', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                enable_cdn: build.template(std.get(block, 'enable_cdn', null, true)),
                health_checks: build.template(std.get(block, 'health_checks', null, true)),
                load_balancing_scheme: build.template(std.get(block, 'load_balancing_scheme', null, true)),
                locality_lb_policy: build.template(std.get(block, 'locality_lb_policy', null, true)),
                name: build.template(block.name),
                network: build.template(std.get(block, 'network', null, true)),
              }),
            },
          },
        },
      },
      affinity_cookie_ttl_sec: p.child('affinity_cookie_ttl_sec').ref,
      connection_draining_timeout_sec: p.child('connection_draining_timeout_sec').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      enable_cdn: p.child('enable_cdn').ref,
      fingerprint: p.child('fingerprint').ref,
      generated_id: p.child('generated_id').ref,
      health_checks: p.child('health_checks').ref,
      id: p.child('id').ref,
      load_balancing_scheme: p.child('load_balancing_scheme').ref,
      locality_lb_policy: p.child('locality_lb_policy').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      port_name: p.child('port_name').ref,
      project: p.child('project').ref,
      protocol: p.child('protocol').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      session_affinity: p.child('session_affinity').ref,
      timeout_sec: p.child('timeout_sec').ref,
    },
    compute_region_commitment(name, block): {
      local p = path(['google_compute_region_commitment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_commitment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                plan: build.template(block.plan),
              }),
            },
          },
        },
      },
      auto_renew: p.child('auto_renew').ref,
      category: p.child('category').ref,
      commitment_id: p.child('commitment_id').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      end_timestamp: p.child('end_timestamp').ref,
      existing_reservations: p.child('existing_reservations').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      plan: p.child('plan').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      start_timestamp: p.child('start_timestamp').ref,
      status: p.child('status').ref,
      status_message: p.child('status_message').ref,
      type: p.child('type').ref,
    },
    compute_region_disk(name, block): {
      local p = path(['google_compute_region_disk', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_disk: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                replica_zones: build.template(block.replica_zones),
                snapshot: build.template(std.get(block, 'snapshot', null, true)),
                source_disk: build.template(std.get(block, 'source_disk', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      last_attach_timestamp: p.child('last_attach_timestamp').ref,
      last_detach_timestamp: p.child('last_detach_timestamp').ref,
      licenses: p.child('licenses').ref,
      name: p.child('name').ref,
      physical_block_size_bytes: p.child('physical_block_size_bytes').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      replica_zones: p.child('replica_zones').ref,
      self_link: p.child('self_link').ref,
      size: p.child('size').ref,
      snapshot: p.child('snapshot').ref,
      source_disk: p.child('source_disk').ref,
      source_disk_id: p.child('source_disk_id').ref,
      source_snapshot_id: p.child('source_snapshot_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      users: p.child('users').ref,
    },
    compute_region_disk_iam_binding(name, block): {
      local p = path(['google_compute_region_disk_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_disk_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    compute_region_disk_iam_member(name, block): {
      local p = path(['google_compute_region_disk_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_disk_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    compute_region_disk_iam_policy(name, block): {
      local p = path(['google_compute_region_disk_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_disk_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    compute_region_disk_resource_policy_attachment(name, block): {
      local p = path(['google_compute_region_disk_resource_policy_attachment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_disk_resource_policy_attachment: {
              [name]: std.prune({
                disk: build.template(block.disk),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      disk: p.child('disk').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    compute_region_health_check(name, block): {
      local p = path(['google_compute_region_health_check', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_health_check: {
              [name]: std.prune({
                check_interval_sec: build.template(std.get(block, 'check_interval_sec', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                healthy_threshold: build.template(std.get(block, 'healthy_threshold', null, true)),
                name: build.template(block.name),
                timeout_sec: build.template(std.get(block, 'timeout_sec', null, true)),
                unhealthy_threshold: build.template(std.get(block, 'unhealthy_threshold', null, true)),
              }),
            },
          },
        },
      },
      check_interval_sec: p.child('check_interval_sec').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      healthy_threshold: p.child('healthy_threshold').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      timeout_sec: p.child('timeout_sec').ref,
      type: p.child('type').ref,
      unhealthy_threshold: p.child('unhealthy_threshold').ref,
    },
    compute_region_instance_group_manager(name, block): {
      local p = path(['google_compute_region_instance_group_manager', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_instance_group_manager: {
              [name]: std.prune({
                base_instance_name: build.template(block.base_instance_name),
                description: build.template(std.get(block, 'description', null, true)),
                list_managed_instances_results: build.template(std.get(block, 'list_managed_instances_results', null, true)),
                name: build.template(block.name),
                target_pools: build.template(std.get(block, 'target_pools', null, true)),
                wait_for_instances: build.template(std.get(block, 'wait_for_instances', null, true)),
                wait_for_instances_status: build.template(std.get(block, 'wait_for_instances_status', null, true)),
              }),
            },
          },
        },
      },
      base_instance_name: p.child('base_instance_name').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      distribution_policy_target_shape: p.child('distribution_policy_target_shape').ref,
      distribution_policy_zones: p.child('distribution_policy_zones').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      instance_group: p.child('instance_group').ref,
      list_managed_instances_results: p.child('list_managed_instances_results').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      status: p.child('status').ref,
      target_pools: p.child('target_pools').ref,
      target_size: p.child('target_size').ref,
      wait_for_instances: p.child('wait_for_instances').ref,
      wait_for_instances_status: p.child('wait_for_instances_status').ref,
    },
    compute_region_instance_template(name, block): {
      local p = path(['google_compute_region_instance_template', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_instance_template: {
              [name]: std.prune({
                can_ip_forward: build.template(std.get(block, 'can_ip_forward', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                instance_description: build.template(std.get(block, 'instance_description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                machine_type: build.template(block.machine_type),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                metadata_startup_script: build.template(std.get(block, 'metadata_startup_script', null, true)),
                min_cpu_platform: build.template(std.get(block, 'min_cpu_platform', null, true)),
                resource_manager_tags: build.template(std.get(block, 'resource_manager_tags', null, true)),
                resource_policies: build.template(std.get(block, 'resource_policies', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      can_ip_forward: p.child('can_ip_forward').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      instance_description: p.child('instance_description').ref,
      labels: p.child('labels').ref,
      machine_type: p.child('machine_type').ref,
      metadata: p.child('metadata').ref,
      metadata_fingerprint: p.child('metadata_fingerprint').ref,
      metadata_startup_script: p.child('metadata_startup_script').ref,
      min_cpu_platform: p.child('min_cpu_platform').ref,
      name: p.child('name').ref,
      name_prefix: p.child('name_prefix').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      resource_manager_tags: p.child('resource_manager_tags').ref,
      resource_policies: p.child('resource_policies').ref,
      self_link: p.child('self_link').ref,
      tags: p.child('tags').ref,
      tags_fingerprint: p.child('tags_fingerprint').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    compute_region_network_endpoint(name, block): {
      local p = path(['google_compute_region_network_endpoint', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_network_endpoint: {
              [name]: std.prune({
                fqdn: build.template(std.get(block, 'fqdn', null, true)),
                ip_address: build.template(std.get(block, 'ip_address', null, true)),
                port: build.template(block.port),
                region_network_endpoint_group: build.template(block.region_network_endpoint_group),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').ref,
      id: p.child('id').ref,
      ip_address: p.child('ip_address').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      region_network_endpoint_group: p.child('region_network_endpoint_group').ref,
    },
    compute_region_network_endpoint_group(name, block): {
      local p = path(['google_compute_region_network_endpoint_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_network_endpoint_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                network: build.template(std.get(block, 'network', null, true)),
                network_endpoint_type: build.template(std.get(block, 'network_endpoint_type', null, true)),
                psc_target_service: build.template(std.get(block, 'psc_target_service', null, true)),
                region: build.template(block.region),
                subnetwork: build.template(std.get(block, 'subnetwork', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      network_endpoint_type: p.child('network_endpoint_type').ref,
      project: p.child('project').ref,
      psc_target_service: p.child('psc_target_service').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      subnetwork: p.child('subnetwork').ref,
    },
    compute_region_network_firewall_policy(name, block): {
      local p = path(['google_compute_region_network_firewall_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_network_firewall_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      region_network_firewall_policy_id: p.child('region_network_firewall_policy_id').ref,
      rule_tuple_count: p.child('rule_tuple_count').ref,
      self_link: p.child('self_link').ref,
      self_link_with_id: p.child('self_link_with_id').ref,
    },
    compute_region_network_firewall_policy_association(name, block): {
      local p = path(['google_compute_region_network_firewall_policy_association', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_network_firewall_policy_association: {
              [name]: std.prune({
                attachment_target: build.template(block.attachment_target),
                firewall_policy: build.template(block.firewall_policy),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      attachment_target: p.child('attachment_target').ref,
      firewall_policy: p.child('firewall_policy').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      short_name: p.child('short_name').ref,
    },
    compute_region_network_firewall_policy_rule(name, block): {
      local p = path(['google_compute_region_network_firewall_policy_rule', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_network_firewall_policy_rule: {
              [name]: std.prune({
                action: build.template(block.action),
                description: build.template(std.get(block, 'description', null, true)),
                direction: build.template(block.direction),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                enable_logging: build.template(std.get(block, 'enable_logging', null, true)),
                firewall_policy: build.template(block.firewall_policy),
                priority: build.template(block.priority),
                rule_name: build.template(std.get(block, 'rule_name', null, true)),
                security_profile_group: build.template(std.get(block, 'security_profile_group', null, true)),
                target_service_accounts: build.template(std.get(block, 'target_service_accounts', null, true)),
                tls_inspect: build.template(std.get(block, 'tls_inspect', null, true)),
              }),
            },
          },
        },
      },
      action: p.child('action').ref,
      description: p.child('description').ref,
      direction: p.child('direction').ref,
      disabled: p.child('disabled').ref,
      enable_logging: p.child('enable_logging').ref,
      firewall_policy: p.child('firewall_policy').ref,
      id: p.child('id').ref,
      kind: p.child('kind').ref,
      priority: p.child('priority').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      rule_name: p.child('rule_name').ref,
      rule_tuple_count: p.child('rule_tuple_count').ref,
      security_profile_group: p.child('security_profile_group').ref,
      target_service_accounts: p.child('target_service_accounts').ref,
      tls_inspect: p.child('tls_inspect').ref,
    },
    compute_region_per_instance_config(name, block): {
      local p = path(['google_compute_region_per_instance_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_per_instance_config: {
              [name]: std.prune({
                minimal_action: build.template(std.get(block, 'minimal_action', null, true)),
                most_disruptive_allowed_action: build.template(std.get(block, 'most_disruptive_allowed_action', null, true)),
                name: build.template(block.name),
                region_instance_group_manager: build.template(block.region_instance_group_manager),
                remove_instance_on_destroy: build.template(std.get(block, 'remove_instance_on_destroy', null, true)),
                remove_instance_state_on_destroy: build.template(std.get(block, 'remove_instance_state_on_destroy', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      minimal_action: p.child('minimal_action').ref,
      most_disruptive_allowed_action: p.child('most_disruptive_allowed_action').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      region_instance_group_manager: p.child('region_instance_group_manager').ref,
      remove_instance_on_destroy: p.child('remove_instance_on_destroy').ref,
      remove_instance_state_on_destroy: p.child('remove_instance_state_on_destroy').ref,
    },
    compute_region_ssl_certificate(name, block): {
      local p = path(['google_compute_region_ssl_certificate', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_ssl_certificate: {
              [name]: std.prune({
                certificate: build.template(block.certificate),
                description: build.template(std.get(block, 'description', null, true)),
                private_key: build.template(block.private_key),
              }),
            },
          },
        },
      },
      certificate: p.child('certificate').ref,
      certificate_id: p.child('certificate_id').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      name_prefix: p.child('name_prefix').ref,
      private_key: p.child('private_key').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
    },
    compute_region_ssl_policy(name, block): {
      local p = path(['google_compute_region_ssl_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_ssl_policy: {
              [name]: std.prune({
                custom_features: build.template(std.get(block, 'custom_features', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                min_tls_version: build.template(std.get(block, 'min_tls_version', null, true)),
                name: build.template(block.name),
                profile: build.template(std.get(block, 'profile', null, true)),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      custom_features: p.child('custom_features').ref,
      description: p.child('description').ref,
      enabled_features: p.child('enabled_features').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      min_tls_version: p.child('min_tls_version').ref,
      name: p.child('name').ref,
      profile: p.child('profile').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
    },
    compute_region_target_http_proxy(name, block): {
      local p = path(['google_compute_region_target_http_proxy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_target_http_proxy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                http_keep_alive_timeout_sec: build.template(std.get(block, 'http_keep_alive_timeout_sec', null, true)),
                name: build.template(block.name),
                url_map: build.template(block.url_map),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      http_keep_alive_timeout_sec: p.child('http_keep_alive_timeout_sec').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      proxy_id: p.child('proxy_id').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      url_map: p.child('url_map').ref,
    },
    compute_region_target_https_proxy(name, block): {
      local p = path(['google_compute_region_target_https_proxy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_target_https_proxy: {
              [name]: std.prune({
                certificate_manager_certificates: build.template(std.get(block, 'certificate_manager_certificates', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                http_keep_alive_timeout_sec: build.template(std.get(block, 'http_keep_alive_timeout_sec', null, true)),
                name: build.template(block.name),
                server_tls_policy: build.template(std.get(block, 'server_tls_policy', null, true)),
                ssl_certificates: build.template(std.get(block, 'ssl_certificates', null, true)),
                ssl_policy: build.template(std.get(block, 'ssl_policy', null, true)),
                url_map: build.template(block.url_map),
              }),
            },
          },
        },
      },
      certificate_manager_certificates: p.child('certificate_manager_certificates').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      http_keep_alive_timeout_sec: p.child('http_keep_alive_timeout_sec').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      proxy_id: p.child('proxy_id').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      server_tls_policy: p.child('server_tls_policy').ref,
      ssl_certificates: p.child('ssl_certificates').ref,
      ssl_policy: p.child('ssl_policy').ref,
      url_map: p.child('url_map').ref,
    },
    compute_region_target_tcp_proxy(name, block): {
      local p = path(['google_compute_region_target_tcp_proxy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_target_tcp_proxy: {
              [name]: std.prune({
                backend_service: build.template(block.backend_service),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                proxy_header: build.template(std.get(block, 'proxy_header', null, true)),
              }),
            },
          },
        },
      },
      backend_service: p.child('backend_service').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      proxy_bind: p.child('proxy_bind').ref,
      proxy_header: p.child('proxy_header').ref,
      proxy_id: p.child('proxy_id').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
    },
    compute_region_url_map(name, block): {
      local p = path(['google_compute_region_url_map', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_region_url_map: {
              [name]: std.prune({
                default_service: build.template(std.get(block, 'default_service', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      default_service: p.child('default_service').ref,
      description: p.child('description').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      map_id: p.child('map_id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
    },
    compute_reservation(name, block): {
      local p = path(['google_compute_reservation', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_reservation: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                specific_reservation_required: build.template(std.get(block, 'specific_reservation_required', null, true)),
                zone: build.template(block.zone),
              }),
            },
          },
        },
      },
      commitment: p.child('commitment').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      specific_reservation_required: p.child('specific_reservation_required').ref,
      status: p.child('status').ref,
      zone: p.child('zone').ref,
    },
    compute_resize_request(name, block): {
      local p = path(['google_compute_resize_request', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_resize_request: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                instance_group_manager: build.template(block.instance_group_manager),
                name: build.template(block.name),
                resize_by: build.template(block.resize_by),
                zone: build.template(block.zone),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      instance_group_manager: p.child('instance_group_manager').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      resize_by: p.child('resize_by').ref,
      state: p.child('state').ref,
      status: p.child('status').ref,
      zone: p.child('zone').ref,
    },
    compute_resource_policy(name, block): {
      local p = path(['google_compute_resource_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_resource_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
    },
    compute_route(name, block): {
      local p = path(['google_compute_route', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_route: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                dest_range: build.template(block.dest_range),
                name: build.template(block.name),
                network: build.template(block.network),
                next_hop_gateway: build.template(std.get(block, 'next_hop_gateway', null, true)),
                next_hop_ilb: build.template(std.get(block, 'next_hop_ilb', null, true)),
                next_hop_instance: build.template(std.get(block, 'next_hop_instance', null, true)),
                next_hop_vpn_tunnel: build.template(std.get(block, 'next_hop_vpn_tunnel', null, true)),
                priority: build.template(std.get(block, 'priority', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      dest_range: p.child('dest_range').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      next_hop_gateway: p.child('next_hop_gateway').ref,
      next_hop_ilb: p.child('next_hop_ilb').ref,
      next_hop_instance: p.child('next_hop_instance').ref,
      next_hop_instance_zone: p.child('next_hop_instance_zone').ref,
      next_hop_ip: p.child('next_hop_ip').ref,
      next_hop_network: p.child('next_hop_network').ref,
      next_hop_vpn_tunnel: p.child('next_hop_vpn_tunnel').ref,
      priority: p.child('priority').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      tags: p.child('tags').ref,
    },
    compute_router(name, block): {
      local p = path(['google_compute_router', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_router: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                encrypted_interconnect_router: build.template(std.get(block, 'encrypted_interconnect_router', null, true)),
                name: build.template(block.name),
                network: build.template(block.network),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      encrypted_interconnect_router: p.child('encrypted_interconnect_router').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
    },
    compute_router_interface(name, block): {
      local p = path(['google_compute_router_interface', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_router_interface: {
              [name]: std.prune({
                interconnect_attachment: build.template(std.get(block, 'interconnect_attachment', null, true)),
                name: build.template(block.name),
                private_ip_address: build.template(std.get(block, 'private_ip_address', null, true)),
                router: build.template(block.router),
                subnetwork: build.template(std.get(block, 'subnetwork', null, true)),
                vpn_tunnel: build.template(std.get(block, 'vpn_tunnel', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      interconnect_attachment: p.child('interconnect_attachment').ref,
      ip_range: p.child('ip_range').ref,
      ip_version: p.child('ip_version').ref,
      name: p.child('name').ref,
      private_ip_address: p.child('private_ip_address').ref,
      project: p.child('project').ref,
      redundant_interface: p.child('redundant_interface').ref,
      region: p.child('region').ref,
      router: p.child('router').ref,
      subnetwork: p.child('subnetwork').ref,
      vpn_tunnel: p.child('vpn_tunnel').ref,
    },
    compute_router_nat(name, block): {
      local p = path(['google_compute_router_nat', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_router_nat: {
              [name]: std.prune({
                icmp_idle_timeout_sec: build.template(std.get(block, 'icmp_idle_timeout_sec', null, true)),
                initial_nat_ips: build.template(std.get(block, 'initial_nat_ips', null, true)),
                max_ports_per_vm: build.template(std.get(block, 'max_ports_per_vm', null, true)),
                name: build.template(block.name),
                nat_ip_allocate_option: build.template(std.get(block, 'nat_ip_allocate_option', null, true)),
                router: build.template(block.router),
                source_subnetwork_ip_ranges_to_nat: build.template(block.source_subnetwork_ip_ranges_to_nat),
                tcp_established_idle_timeout_sec: build.template(std.get(block, 'tcp_established_idle_timeout_sec', null, true)),
                tcp_time_wait_timeout_sec: build.template(std.get(block, 'tcp_time_wait_timeout_sec', null, true)),
                tcp_transitory_idle_timeout_sec: build.template(std.get(block, 'tcp_transitory_idle_timeout_sec', null, true)),
                udp_idle_timeout_sec: build.template(std.get(block, 'udp_idle_timeout_sec', null, true)),
              }),
            },
          },
        },
      },
      auto_network_tier: p.child('auto_network_tier').ref,
      drain_nat_ips: p.child('drain_nat_ips').ref,
      enable_dynamic_port_allocation: p.child('enable_dynamic_port_allocation').ref,
      enable_endpoint_independent_mapping: p.child('enable_endpoint_independent_mapping').ref,
      endpoint_types: p.child('endpoint_types').ref,
      icmp_idle_timeout_sec: p.child('icmp_idle_timeout_sec').ref,
      id: p.child('id').ref,
      initial_nat_ips: p.child('initial_nat_ips').ref,
      max_ports_per_vm: p.child('max_ports_per_vm').ref,
      min_ports_per_vm: p.child('min_ports_per_vm').ref,
      name: p.child('name').ref,
      nat_ip_allocate_option: p.child('nat_ip_allocate_option').ref,
      nat_ips: p.child('nat_ips').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      router: p.child('router').ref,
      source_subnetwork_ip_ranges_to_nat: p.child('source_subnetwork_ip_ranges_to_nat').ref,
      tcp_established_idle_timeout_sec: p.child('tcp_established_idle_timeout_sec').ref,
      tcp_time_wait_timeout_sec: p.child('tcp_time_wait_timeout_sec').ref,
      tcp_transitory_idle_timeout_sec: p.child('tcp_transitory_idle_timeout_sec').ref,
      udp_idle_timeout_sec: p.child('udp_idle_timeout_sec').ref,
    },
    compute_router_nat_address(name, block): {
      local p = path(['google_compute_router_nat_address', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_router_nat_address: {
              [name]: std.prune({
                drain_nat_ips: build.template(std.get(block, 'drain_nat_ips', null, true)),
                nat_ips: build.template(block.nat_ips),
                router: build.template(block.router),
                router_nat: build.template(block.router_nat),
              }),
            },
          },
        },
      },
      drain_nat_ips: p.child('drain_nat_ips').ref,
      id: p.child('id').ref,
      nat_ips: p.child('nat_ips').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      router: p.child('router').ref,
      router_nat: p.child('router_nat').ref,
    },
    compute_router_peer(name, block): {
      local p = path(['google_compute_router_peer', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_router_peer: {
              [name]: std.prune({
                advertise_mode: build.template(std.get(block, 'advertise_mode', null, true)),
                advertised_groups: build.template(std.get(block, 'advertised_groups', null, true)),
                advertised_route_priority: build.template(std.get(block, 'advertised_route_priority', null, true)),
                custom_learned_route_priority: build.template(std.get(block, 'custom_learned_route_priority', null, true)),
                enable: build.template(std.get(block, 'enable', null, true)),
                enable_ipv6: build.template(std.get(block, 'enable_ipv6', null, true)),
                interface: build.template(block.interface),
                name: build.template(block.name),
                peer_asn: build.template(block.peer_asn),
                router: build.template(block.router),
                router_appliance_instance: build.template(std.get(block, 'router_appliance_instance', null, true)),
              }),
            },
          },
        },
      },
      advertise_mode: p.child('advertise_mode').ref,
      advertised_groups: p.child('advertised_groups').ref,
      advertised_route_priority: p.child('advertised_route_priority').ref,
      custom_learned_route_priority: p.child('custom_learned_route_priority').ref,
      enable: p.child('enable').ref,
      enable_ipv4: p.child('enable_ipv4').ref,
      enable_ipv6: p.child('enable_ipv6').ref,
      id: p.child('id').ref,
      interface: p.child('interface').ref,
      ip_address: p.child('ip_address').ref,
      ipv4_nexthop_address: p.child('ipv4_nexthop_address').ref,
      ipv6_nexthop_address: p.child('ipv6_nexthop_address').ref,
      management_type: p.child('management_type').ref,
      name: p.child('name').ref,
      peer_asn: p.child('peer_asn').ref,
      peer_ip_address: p.child('peer_ip_address').ref,
      peer_ipv4_nexthop_address: p.child('peer_ipv4_nexthop_address').ref,
      peer_ipv6_nexthop_address: p.child('peer_ipv6_nexthop_address').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      router: p.child('router').ref,
      router_appliance_instance: p.child('router_appliance_instance').ref,
    },
    compute_security_policy(name, block): {
      local p = path(['google_compute_security_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_security_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      type: p.child('type').ref,
    },
    compute_security_policy_rule(name, block): {
      local p = path(['google_compute_security_policy_rule', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_security_policy_rule: {
              [name]: std.prune({
                action: build.template(block.action),
                description: build.template(std.get(block, 'description', null, true)),
                preview: build.template(std.get(block, 'preview', null, true)),
                priority: build.template(block.priority),
                security_policy: build.template(block.security_policy),
              }),
            },
          },
        },
      },
      action: p.child('action').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      preview: p.child('preview').ref,
      priority: p.child('priority').ref,
      project: p.child('project').ref,
      security_policy: p.child('security_policy').ref,
    },
    compute_service_attachment(name, block): {
      local p = path(['google_compute_service_attachment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_service_attachment: {
              [name]: std.prune({
                connection_preference: build.template(block.connection_preference),
                consumer_reject_lists: build.template(std.get(block, 'consumer_reject_lists', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                domain_names: build.template(std.get(block, 'domain_names', null, true)),
                enable_proxy_protocol: build.template(block.enable_proxy_protocol),
                name: build.template(block.name),
                nat_subnets: build.template(block.nat_subnets),
                target_service: build.template(block.target_service),
              }),
            },
          },
        },
      },
      connected_endpoints: p.child('connected_endpoints').ref,
      connection_preference: p.child('connection_preference').ref,
      consumer_reject_lists: p.child('consumer_reject_lists').ref,
      description: p.child('description').ref,
      domain_names: p.child('domain_names').ref,
      enable_proxy_protocol: p.child('enable_proxy_protocol').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      nat_subnets: p.child('nat_subnets').ref,
      project: p.child('project').ref,
      reconcile_connections: p.child('reconcile_connections').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      target_service: p.child('target_service').ref,
    },
    compute_shared_vpc_host_project(name, block): {
      local p = path(['google_compute_shared_vpc_host_project', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_shared_vpc_host_project: {
              [name]: std.prune({
                project: build.template(block.project),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      project: p.child('project').ref,
    },
    compute_shared_vpc_service_project(name, block): {
      local p = path(['google_compute_shared_vpc_service_project', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_shared_vpc_service_project: {
              [name]: std.prune({
                deletion_policy: build.template(std.get(block, 'deletion_policy', null, true)),
                host_project: build.template(block.host_project),
                service_project: build.template(block.service_project),
              }),
            },
          },
        },
      },
      deletion_policy: p.child('deletion_policy').ref,
      host_project: p.child('host_project').ref,
      id: p.child('id').ref,
      service_project: p.child('service_project').ref,
    },
    compute_snapshot(name, block): {
      local p = path(['google_compute_snapshot', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_snapshot: {
              [name]: std.prune({
                chain_name: build.template(std.get(block, 'chain_name', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                source_disk: build.template(block.source_disk),
              }),
            },
          },
        },
      },
      chain_name: p.child('chain_name').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      disk_size_gb: p.child('disk_size_gb').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      licenses: p.child('licenses').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      snapshot_id: p.child('snapshot_id').ref,
      source_disk: p.child('source_disk').ref,
      storage_bytes: p.child('storage_bytes').ref,
      storage_locations: p.child('storage_locations').ref,
      terraform_labels: p.child('terraform_labels').ref,
      zone: p.child('zone').ref,
    },
    compute_snapshot_iam_binding(name, block): {
      local p = path(['google_compute_snapshot_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_snapshot_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    compute_snapshot_iam_member(name, block): {
      local p = path(['google_compute_snapshot_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_snapshot_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    compute_snapshot_iam_policy(name, block): {
      local p = path(['google_compute_snapshot_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_snapshot_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    compute_ssl_certificate(name, block): {
      local p = path(['google_compute_ssl_certificate', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_ssl_certificate: {
              [name]: std.prune({
                certificate: build.template(block.certificate),
                description: build.template(std.get(block, 'description', null, true)),
                private_key: build.template(block.private_key),
              }),
            },
          },
        },
      },
      certificate: p.child('certificate').ref,
      certificate_id: p.child('certificate_id').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      name_prefix: p.child('name_prefix').ref,
      private_key: p.child('private_key').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
    },
    compute_ssl_policy(name, block): {
      local p = path(['google_compute_ssl_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_ssl_policy: {
              [name]: std.prune({
                custom_features: build.template(std.get(block, 'custom_features', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                min_tls_version: build.template(std.get(block, 'min_tls_version', null, true)),
                name: build.template(block.name),
                profile: build.template(std.get(block, 'profile', null, true)),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      custom_features: p.child('custom_features').ref,
      description: p.child('description').ref,
      enabled_features: p.child('enabled_features').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      min_tls_version: p.child('min_tls_version').ref,
      name: p.child('name').ref,
      profile: p.child('profile').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
    },
    compute_subnetwork(name, block): {
      local p = path(['google_compute_subnetwork', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_subnetwork: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                ipv6_access_type: build.template(std.get(block, 'ipv6_access_type', null, true)),
                name: build.template(block.name),
                network: build.template(block.network),
                reserved_internal_range: build.template(std.get(block, 'reserved_internal_range', null, true)),
                role: build.template(std.get(block, 'role', null, true)),
                send_secondary_ip_range_if_empty: build.template(std.get(block, 'send_secondary_ip_range_if_empty', null, true)),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      external_ipv6_prefix: p.child('external_ipv6_prefix').ref,
      fingerprint: p.child('fingerprint').ref,
      gateway_address: p.child('gateway_address').ref,
      id: p.child('id').ref,
      internal_ipv6_prefix: p.child('internal_ipv6_prefix').ref,
      ip_cidr_range: p.child('ip_cidr_range').ref,
      ipv6_access_type: p.child('ipv6_access_type').ref,
      ipv6_cidr_range: p.child('ipv6_cidr_range').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      private_ip_google_access: p.child('private_ip_google_access').ref,
      private_ipv6_google_access: p.child('private_ipv6_google_access').ref,
      project: p.child('project').ref,
      purpose: p.child('purpose').ref,
      region: p.child('region').ref,
      reserved_internal_range: p.child('reserved_internal_range').ref,
      role: p.child('role').ref,
      self_link: p.child('self_link').ref,
      send_secondary_ip_range_if_empty: p.child('send_secondary_ip_range_if_empty').ref,
      stack_type: p.child('stack_type').ref,
    },
    compute_subnetwork_iam_binding(name, block): {
      local p = path(['google_compute_subnetwork_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_subnetwork_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                subnetwork: build.template(block.subnetwork),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
      subnetwork: p.child('subnetwork').ref,
    },
    compute_subnetwork_iam_member(name, block): {
      local p = path(['google_compute_subnetwork_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_subnetwork_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                subnetwork: build.template(block.subnetwork),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
      subnetwork: p.child('subnetwork').ref,
    },
    compute_subnetwork_iam_policy(name, block): {
      local p = path(['google_compute_subnetwork_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_subnetwork_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                subnetwork: build.template(block.subnetwork),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      subnetwork: p.child('subnetwork').ref,
    },
    compute_target_grpc_proxy(name, block): {
      local p = path(['google_compute_target_grpc_proxy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_target_grpc_proxy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                url_map: build.template(std.get(block, 'url_map', null, true)),
                validate_for_proxyless: build.template(std.get(block, 'validate_for_proxyless', null, true)),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      self_link_with_id: p.child('self_link_with_id').ref,
      url_map: p.child('url_map').ref,
      validate_for_proxyless: p.child('validate_for_proxyless').ref,
    },
    compute_target_http_proxy(name, block): {
      local p = path(['google_compute_target_http_proxy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_target_http_proxy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                http_keep_alive_timeout_sec: build.template(std.get(block, 'http_keep_alive_timeout_sec', null, true)),
                name: build.template(block.name),
                url_map: build.template(block.url_map),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      http_keep_alive_timeout_sec: p.child('http_keep_alive_timeout_sec').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      proxy_bind: p.child('proxy_bind').ref,
      proxy_id: p.child('proxy_id').ref,
      self_link: p.child('self_link').ref,
      url_map: p.child('url_map').ref,
    },
    compute_target_https_proxy(name, block): {
      local p = path(['google_compute_target_https_proxy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_target_https_proxy: {
              [name]: std.prune({
                certificate_manager_certificates: build.template(std.get(block, 'certificate_manager_certificates', null, true)),
                certificate_map: build.template(std.get(block, 'certificate_map', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                http_keep_alive_timeout_sec: build.template(std.get(block, 'http_keep_alive_timeout_sec', null, true)),
                name: build.template(block.name),
                quic_override: build.template(std.get(block, 'quic_override', null, true)),
                server_tls_policy: build.template(std.get(block, 'server_tls_policy', null, true)),
                ssl_certificates: build.template(std.get(block, 'ssl_certificates', null, true)),
                ssl_policy: build.template(std.get(block, 'ssl_policy', null, true)),
                url_map: build.template(block.url_map),
              }),
            },
          },
        },
      },
      certificate_manager_certificates: p.child('certificate_manager_certificates').ref,
      certificate_map: p.child('certificate_map').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      http_keep_alive_timeout_sec: p.child('http_keep_alive_timeout_sec').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      proxy_bind: p.child('proxy_bind').ref,
      proxy_id: p.child('proxy_id').ref,
      quic_override: p.child('quic_override').ref,
      self_link: p.child('self_link').ref,
      server_tls_policy: p.child('server_tls_policy').ref,
      ssl_certificates: p.child('ssl_certificates').ref,
      ssl_policy: p.child('ssl_policy').ref,
      tls_early_data: p.child('tls_early_data').ref,
      url_map: p.child('url_map').ref,
    },
    compute_target_instance(name, block): {
      local p = path(['google_compute_target_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_target_instance: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                instance: build.template(block.instance),
                name: build.template(block.name),
                nat_policy: build.template(std.get(block, 'nat_policy', null, true)),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      name: p.child('name').ref,
      nat_policy: p.child('nat_policy').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      zone: p.child('zone').ref,
    },
    compute_target_pool(name, block): {
      local p = path(['google_compute_target_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_target_pool: {
              [name]: std.prune({
                backup_pool: build.template(std.get(block, 'backup_pool', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                failover_ratio: build.template(std.get(block, 'failover_ratio', null, true)),
                health_checks: build.template(std.get(block, 'health_checks', null, true)),
                name: build.template(block.name),
                session_affinity: build.template(std.get(block, 'session_affinity', null, true)),
              }),
            },
          },
        },
      },
      backup_pool: p.child('backup_pool').ref,
      description: p.child('description').ref,
      failover_ratio: p.child('failover_ratio').ref,
      health_checks: p.child('health_checks').ref,
      id: p.child('id').ref,
      instances: p.child('instances').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      session_affinity: p.child('session_affinity').ref,
    },
    compute_target_ssl_proxy(name, block): {
      local p = path(['google_compute_target_ssl_proxy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_target_ssl_proxy: {
              [name]: std.prune({
                backend_service: build.template(block.backend_service),
                certificate_map: build.template(std.get(block, 'certificate_map', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                proxy_header: build.template(std.get(block, 'proxy_header', null, true)),
                ssl_certificates: build.template(std.get(block, 'ssl_certificates', null, true)),
                ssl_policy: build.template(std.get(block, 'ssl_policy', null, true)),
              }),
            },
          },
        },
      },
      backend_service: p.child('backend_service').ref,
      certificate_map: p.child('certificate_map').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      proxy_header: p.child('proxy_header').ref,
      proxy_id: p.child('proxy_id').ref,
      self_link: p.child('self_link').ref,
      ssl_certificates: p.child('ssl_certificates').ref,
      ssl_policy: p.child('ssl_policy').ref,
    },
    compute_target_tcp_proxy(name, block): {
      local p = path(['google_compute_target_tcp_proxy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_target_tcp_proxy: {
              [name]: std.prune({
                backend_service: build.template(block.backend_service),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                proxy_header: build.template(std.get(block, 'proxy_header', null, true)),
              }),
            },
          },
        },
      },
      backend_service: p.child('backend_service').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      proxy_bind: p.child('proxy_bind').ref,
      proxy_header: p.child('proxy_header').ref,
      proxy_id: p.child('proxy_id').ref,
      self_link: p.child('self_link').ref,
    },
    compute_url_map(name, block): {
      local p = path(['google_compute_url_map', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_url_map: {
              [name]: std.prune({
                default_service: build.template(std.get(block, 'default_service', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      default_service: p.child('default_service').ref,
      description: p.child('description').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      map_id: p.child('map_id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
    },
    compute_vpn_gateway(name, block): {
      local p = path(['google_compute_vpn_gateway', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_vpn_gateway: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                network: build.template(block.network),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      gateway_id: p.child('gateway_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
    },
    compute_vpn_tunnel(name, block): {
      local p = path(['google_compute_vpn_tunnel', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_compute_vpn_tunnel: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                ike_version: build.template(std.get(block, 'ike_version', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                peer_external_gateway: build.template(std.get(block, 'peer_external_gateway', null, true)),
                peer_external_gateway_interface: build.template(std.get(block, 'peer_external_gateway_interface', null, true)),
                peer_gcp_gateway: build.template(std.get(block, 'peer_gcp_gateway', null, true)),
                router: build.template(std.get(block, 'router', null, true)),
                shared_secret: build.template(block.shared_secret),
                target_vpn_gateway: build.template(std.get(block, 'target_vpn_gateway', null, true)),
                vpn_gateway: build.template(std.get(block, 'vpn_gateway', null, true)),
                vpn_gateway_interface: build.template(std.get(block, 'vpn_gateway_interface', null, true)),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      detailed_status: p.child('detailed_status').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      ike_version: p.child('ike_version').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      local_traffic_selector: p.child('local_traffic_selector').ref,
      name: p.child('name').ref,
      peer_external_gateway: p.child('peer_external_gateway').ref,
      peer_external_gateway_interface: p.child('peer_external_gateway_interface').ref,
      peer_gcp_gateway: p.child('peer_gcp_gateway').ref,
      peer_ip: p.child('peer_ip').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      remote_traffic_selector: p.child('remote_traffic_selector').ref,
      router: p.child('router').ref,
      self_link: p.child('self_link').ref,
      shared_secret: p.child('shared_secret').ref,
      shared_secret_hash: p.child('shared_secret_hash').ref,
      target_vpn_gateway: p.child('target_vpn_gateway').ref,
      terraform_labels: p.child('terraform_labels').ref,
      tunnel_id: p.child('tunnel_id').ref,
      vpn_gateway: p.child('vpn_gateway').ref,
      vpn_gateway_interface: p.child('vpn_gateway_interface').ref,
    },
    container_analysis_note(name, block): {
      local p = path(['google_container_analysis_note', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_analysis_note: {
              [name]: std.prune({
                expiration_time: build.template(std.get(block, 'expiration_time', null, true)),
                long_description: build.template(std.get(block, 'long_description', null, true)),
                name: build.template(block.name),
                related_note_names: build.template(std.get(block, 'related_note_names', null, true)),
                short_description: build.template(std.get(block, 'short_description', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      expiration_time: p.child('expiration_time').ref,
      id: p.child('id').ref,
      kind: p.child('kind').ref,
      long_description: p.child('long_description').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      related_note_names: p.child('related_note_names').ref,
      short_description: p.child('short_description').ref,
      update_time: p.child('update_time').ref,
    },
    container_analysis_note_iam_binding(name, block): {
      local p = path(['google_container_analysis_note_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_analysis_note_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                note: build.template(block.note),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      note: p.child('note').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    container_analysis_note_iam_member(name, block): {
      local p = path(['google_container_analysis_note_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_analysis_note_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                note: build.template(block.note),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      note: p.child('note').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    container_analysis_note_iam_policy(name, block): {
      local p = path(['google_container_analysis_note_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_analysis_note_iam_policy: {
              [name]: std.prune({
                note: build.template(block.note),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      note: p.child('note').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    container_analysis_occurrence(name, block): {
      local p = path(['google_container_analysis_occurrence', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_analysis_occurrence: {
              [name]: std.prune({
                note_name: build.template(block.note_name),
                remediation: build.template(std.get(block, 'remediation', null, true)),
                resource_uri: build.template(block.resource_uri),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      id: p.child('id').ref,
      kind: p.child('kind').ref,
      name: p.child('name').ref,
      note_name: p.child('note_name').ref,
      project: p.child('project').ref,
      remediation: p.child('remediation').ref,
      resource_uri: p.child('resource_uri').ref,
      update_time: p.child('update_time').ref,
    },
    container_attached_cluster(name, block): {
      local p = path(['google_container_attached_cluster', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_attached_cluster: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                deletion_policy: build.template(std.get(block, 'deletion_policy', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                distribution: build.template(block.distribution),
                location: build.template(block.location),
                name: build.template(block.name),
                platform_version: build.template(block.platform_version),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      cluster_region: p.child('cluster_region').ref,
      create_time: p.child('create_time').ref,
      deletion_policy: p.child('deletion_policy').ref,
      description: p.child('description').ref,
      distribution: p.child('distribution').ref,
      effective_annotations: p.child('effective_annotations').ref,
      errors: p.child('errors').ref,
      id: p.child('id').ref,
      kubernetes_version: p.child('kubernetes_version').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      platform_version: p.child('platform_version').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      workload_identity_config: p.child('workload_identity_config').ref,
    },
    container_aws_cluster(name, block): {
      local p = path(['google_container_aws_cluster', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_aws_cluster: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                aws_region: build.template(block.aws_region),
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      aws_region: p.child('aws_region').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_annotations: p.child('effective_annotations').ref,
      endpoint: p.child('endpoint').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      workload_identity_config: p.child('workload_identity_config').ref,
    },
    container_aws_node_pool(name, block): {
      local p = path(['google_container_aws_node_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_aws_node_pool: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                cluster: build.template(block.cluster),
                location: build.template(block.location),
                name: build.template(block.name),
                subnet_id: build.template(block.subnet_id),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      cluster: p.child('cluster').ref,
      create_time: p.child('create_time').ref,
      effective_annotations: p.child('effective_annotations').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      state: p.child('state').ref,
      subnet_id: p.child('subnet_id').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      version: p.child('version').ref,
    },
    container_azure_client(name, block): {
      local p = path(['google_container_azure_client', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_azure_client: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                location: build.template(block.location),
                name: build.template(block.name),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').ref,
      certificate: p.child('certificate').ref,
      create_time: p.child('create_time').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      tenant_id: p.child('tenant_id').ref,
      uid: p.child('uid').ref,
    },
    container_azure_cluster(name, block): {
      local p = path(['google_container_azure_cluster', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_azure_cluster: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                azure_region: build.template(block.azure_region),
                client: build.template(std.get(block, 'client', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_id: build.template(block.resource_group_id),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      azure_region: p.child('azure_region').ref,
      client: p.child('client').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_annotations: p.child('effective_annotations').ref,
      endpoint: p.child('endpoint').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      resource_group_id: p.child('resource_group_id').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      workload_identity_config: p.child('workload_identity_config').ref,
    },
    container_azure_node_pool(name, block): {
      local p = path(['google_container_azure_node_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_azure_node_pool: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                cluster: build.template(block.cluster),
                location: build.template(block.location),
                name: build.template(block.name),
                subnet_id: build.template(block.subnet_id),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      azure_availability_zone: p.child('azure_availability_zone').ref,
      cluster: p.child('cluster').ref,
      create_time: p.child('create_time').ref,
      effective_annotations: p.child('effective_annotations').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      state: p.child('state').ref,
      subnet_id: p.child('subnet_id').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      version: p.child('version').ref,
    },
    container_cluster(name, block): {
      local p = path(['google_container_cluster', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_cluster: {
              [name]: std.prune({
                allow_net_admin: build.template(std.get(block, 'allow_net_admin', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                enable_autopilot: build.template(std.get(block, 'enable_autopilot', null, true)),
                enable_cilium_clusterwide_network_policy: build.template(std.get(block, 'enable_cilium_clusterwide_network_policy', null, true)),
                enable_kubernetes_alpha: build.template(std.get(block, 'enable_kubernetes_alpha', null, true)),
                enable_l4_ilb_subsetting: build.template(std.get(block, 'enable_l4_ilb_subsetting', null, true)),
                enable_legacy_abac: build.template(std.get(block, 'enable_legacy_abac', null, true)),
                enable_multi_networking: build.template(std.get(block, 'enable_multi_networking', null, true)),
                enable_shielded_nodes: build.template(std.get(block, 'enable_shielded_nodes', null, true)),
                enable_tpu: build.template(std.get(block, 'enable_tpu', null, true)),
                initial_node_count: build.template(std.get(block, 'initial_node_count', null, true)),
                min_master_version: build.template(std.get(block, 'min_master_version', null, true)),
                name: build.template(block.name),
                network: build.template(std.get(block, 'network', null, true)),
                remove_default_node_pool: build.template(std.get(block, 'remove_default_node_pool', null, true)),
                resource_labels: build.template(std.get(block, 'resource_labels', null, true)),
              }),
            },
          },
        },
      },
      allow_net_admin: p.child('allow_net_admin').ref,
      cluster_ipv4_cidr: p.child('cluster_ipv4_cidr').ref,
      datapath_provider: p.child('datapath_provider').ref,
      default_max_pods_per_node: p.child('default_max_pods_per_node').ref,
      deletion_protection: p.child('deletion_protection').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_autopilot: p.child('enable_autopilot').ref,
      enable_cilium_clusterwide_network_policy: p.child('enable_cilium_clusterwide_network_policy').ref,
      enable_intranode_visibility: p.child('enable_intranode_visibility').ref,
      enable_kubernetes_alpha: p.child('enable_kubernetes_alpha').ref,
      enable_l4_ilb_subsetting: p.child('enable_l4_ilb_subsetting').ref,
      enable_legacy_abac: p.child('enable_legacy_abac').ref,
      enable_multi_networking: p.child('enable_multi_networking').ref,
      enable_shielded_nodes: p.child('enable_shielded_nodes').ref,
      enable_tpu: p.child('enable_tpu').ref,
      endpoint: p.child('endpoint').ref,
      id: p.child('id').ref,
      initial_node_count: p.child('initial_node_count').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      location: p.child('location').ref,
      logging_service: p.child('logging_service').ref,
      master_version: p.child('master_version').ref,
      min_master_version: p.child('min_master_version').ref,
      monitoring_service: p.child('monitoring_service').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      networking_mode: p.child('networking_mode').ref,
      node_locations: p.child('node_locations').ref,
      node_version: p.child('node_version').ref,
      operation: p.child('operation').ref,
      private_ipv6_google_access: p.child('private_ipv6_google_access').ref,
      project: p.child('project').ref,
      remove_default_node_pool: p.child('remove_default_node_pool').ref,
      resource_labels: p.child('resource_labels').ref,
      self_link: p.child('self_link').ref,
      services_ipv4_cidr: p.child('services_ipv4_cidr').ref,
      subnetwork: p.child('subnetwork').ref,
      terraform_labels: p.child('terraform_labels').ref,
      tpu_ipv4_cidr_block: p.child('tpu_ipv4_cidr_block').ref,
    },
    container_node_pool(name, block): {
      local p = path(['google_container_node_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_node_pool: {
              [name]: std.prune({
                cluster: build.template(block.cluster),
              }),
            },
          },
        },
      },
      cluster: p.child('cluster').ref,
      id: p.child('id').ref,
      initial_node_count: p.child('initial_node_count').ref,
      instance_group_urls: p.child('instance_group_urls').ref,
      location: p.child('location').ref,
      managed_instance_group_urls: p.child('managed_instance_group_urls').ref,
      max_pods_per_node: p.child('max_pods_per_node').ref,
      name: p.child('name').ref,
      name_prefix: p.child('name_prefix').ref,
      node_count: p.child('node_count').ref,
      node_locations: p.child('node_locations').ref,
      operation: p.child('operation').ref,
      project: p.child('project').ref,
      version: p.child('version').ref,
    },
    container_registry(name, block): {
      local p = path(['google_container_registry', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_container_registry: {
              [name]: std.prune({
                location: build.template(std.get(block, 'location', null, true)),
              }),
            },
          },
        },
      },
      bucket_self_link: p.child('bucket_self_link').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      project: p.child('project').ref,
    },
    data_catalog_entry(name, block): {
      local p = path(['google_data_catalog_entry', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_entry: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                entry_group: build.template(block.entry_group),
                entry_id: build.template(block.entry_id),
                schema: build.template(std.get(block, 'schema', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
                user_specified_system: build.template(std.get(block, 'user_specified_system', null, true)),
                user_specified_type: build.template(std.get(block, 'user_specified_type', null, true)),
              }),
            },
          },
        },
      },
      bigquery_date_sharded_spec: p.child('bigquery_date_sharded_spec').ref,
      bigquery_table_spec: p.child('bigquery_table_spec').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      entry_group: p.child('entry_group').ref,
      entry_id: p.child('entry_id').ref,
      id: p.child('id').ref,
      integrated_system: p.child('integrated_system').ref,
      linked_resource: p.child('linked_resource').ref,
      name: p.child('name').ref,
      schema: p.child('schema').ref,
      type: p.child('type').ref,
      user_specified_system: p.child('user_specified_system').ref,
      user_specified_type: p.child('user_specified_type').ref,
    },
    data_catalog_entry_group(name, block): {
      local p = path(['google_data_catalog_entry_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_entry_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                entry_group_id: build.template(block.entry_group_id),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      entry_group_id: p.child('entry_group_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    data_catalog_entry_group_iam_binding(name, block): {
      local p = path(['google_data_catalog_entry_group_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_entry_group_iam_binding: {
              [name]: std.prune({
                entry_group: build.template(block.entry_group),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      entry_group: p.child('entry_group').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    data_catalog_entry_group_iam_member(name, block): {
      local p = path(['google_data_catalog_entry_group_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_entry_group_iam_member: {
              [name]: std.prune({
                entry_group: build.template(block.entry_group),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      entry_group: p.child('entry_group').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    data_catalog_entry_group_iam_policy(name, block): {
      local p = path(['google_data_catalog_entry_group_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_entry_group_iam_policy: {
              [name]: std.prune({
                entry_group: build.template(block.entry_group),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      entry_group: p.child('entry_group').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    data_catalog_policy_tag(name, block): {
      local p = path(['google_data_catalog_policy_tag', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_policy_tag: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                parent_policy_tag: build.template(std.get(block, 'parent_policy_tag', null, true)),
                taxonomy: build.template(block.taxonomy),
              }),
            },
          },
        },
      },
      child_policy_tags: p.child('child_policy_tags').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent_policy_tag: p.child('parent_policy_tag').ref,
      taxonomy: p.child('taxonomy').ref,
    },
    data_catalog_policy_tag_iam_binding(name, block): {
      local p = path(['google_data_catalog_policy_tag_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_policy_tag_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                policy_tag: build.template(block.policy_tag),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      policy_tag: p.child('policy_tag').ref,
      role: p.child('role').ref,
    },
    data_catalog_policy_tag_iam_member(name, block): {
      local p = path(['google_data_catalog_policy_tag_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_policy_tag_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                policy_tag: build.template(block.policy_tag),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      policy_tag: p.child('policy_tag').ref,
      role: p.child('role').ref,
    },
    data_catalog_policy_tag_iam_policy(name, block): {
      local p = path(['google_data_catalog_policy_tag_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_policy_tag_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                policy_tag: build.template(block.policy_tag),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      policy_tag: p.child('policy_tag').ref,
    },
    data_catalog_tag(name, block): {
      local p = path(['google_data_catalog_tag', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_tag: {
              [name]: std.prune({
                column: build.template(std.get(block, 'column', null, true)),
                parent: build.template(std.get(block, 'parent', null, true)),
                template: build.template(block.template),
              }),
            },
          },
        },
      },
      column: p.child('column').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      template: p.child('template').ref,
      template_displayname: p.child('template_displayname').ref,
    },
    data_catalog_tag_template(name, block): {
      local p = path(['google_data_catalog_tag_template', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_tag_template: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                force_delete: build.template(std.get(block, 'force_delete', null, true)),
                tag_template_id: build.template(block.tag_template_id),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      force_delete: p.child('force_delete').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      tag_template_id: p.child('tag_template_id').ref,
    },
    data_catalog_tag_template_iam_binding(name, block): {
      local p = path(['google_data_catalog_tag_template_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_tag_template_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                tag_template: build.template(block.tag_template),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
      tag_template: p.child('tag_template').ref,
    },
    data_catalog_tag_template_iam_member(name, block): {
      local p = path(['google_data_catalog_tag_template_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_tag_template_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                tag_template: build.template(block.tag_template),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
      tag_template: p.child('tag_template').ref,
    },
    data_catalog_tag_template_iam_policy(name, block): {
      local p = path(['google_data_catalog_tag_template_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_tag_template_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                tag_template: build.template(block.tag_template),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      tag_template: p.child('tag_template').ref,
    },
    data_catalog_taxonomy(name, block): {
      local p = path(['google_data_catalog_taxonomy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_taxonomy: {
              [name]: std.prune({
                activated_policy_types: build.template(std.get(block, 'activated_policy_types', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
              }),
            },
          },
        },
      },
      activated_policy_types: p.child('activated_policy_types').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    data_catalog_taxonomy_iam_binding(name, block): {
      local p = path(['google_data_catalog_taxonomy_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_taxonomy_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                taxonomy: build.template(block.taxonomy),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
      taxonomy: p.child('taxonomy').ref,
    },
    data_catalog_taxonomy_iam_member(name, block): {
      local p = path(['google_data_catalog_taxonomy_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_taxonomy_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                taxonomy: build.template(block.taxonomy),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
      taxonomy: p.child('taxonomy').ref,
    },
    data_catalog_taxonomy_iam_policy(name, block): {
      local p = path(['google_data_catalog_taxonomy_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_catalog_taxonomy_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                taxonomy: build.template(block.taxonomy),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      taxonomy: p.child('taxonomy').ref,
    },
    data_fusion_instance(name, block): {
      local p = path(['google_data_fusion_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_fusion_instance: {
              [name]: std.prune({
                dataproc_service_account: build.template(std.get(block, 'dataproc_service_account', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enable_rbac: build.template(std.get(block, 'enable_rbac', null, true)),
                enable_stackdriver_logging: build.template(std.get(block, 'enable_stackdriver_logging', null, true)),
                enable_stackdriver_monitoring: build.template(std.get(block, 'enable_stackdriver_monitoring', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                private_instance: build.template(std.get(block, 'private_instance', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      api_endpoint: p.child('api_endpoint').ref,
      create_time: p.child('create_time').ref,
      dataproc_service_account: p.child('dataproc_service_account').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_rbac: p.child('enable_rbac').ref,
      enable_stackdriver_logging: p.child('enable_stackdriver_logging').ref,
      enable_stackdriver_monitoring: p.child('enable_stackdriver_monitoring').ref,
      gcs_bucket: p.child('gcs_bucket').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      options: p.child('options').ref,
      p4_service_account: p.child('p4_service_account').ref,
      private_instance: p.child('private_instance').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      service_endpoint: p.child('service_endpoint').ref,
      state: p.child('state').ref,
      state_message: p.child('state_message').ref,
      tenant_project_id: p.child('tenant_project_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
      version: p.child('version').ref,
      zone: p.child('zone').ref,
    },
    data_fusion_instance_iam_binding(name, block): {
      local p = path(['google_data_fusion_instance_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_fusion_instance_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    data_fusion_instance_iam_member(name, block): {
      local p = path(['google_data_fusion_instance_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_fusion_instance_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    data_fusion_instance_iam_policy(name, block): {
      local p = path(['google_data_fusion_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_fusion_instance_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    data_loss_prevention_deidentify_template(name, block): {
      local p = path(['google_data_loss_prevention_deidentify_template', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_loss_prevention_deidentify_template: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      template_id: p.child('template_id').ref,
      update_time: p.child('update_time').ref,
    },
    data_loss_prevention_discovery_config(name, block): {
      local p = path(['google_data_loss_prevention_discovery_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_loss_prevention_discovery_config: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                inspect_templates: build.template(std.get(block, 'inspect_templates', null, true)),
                location: build.template(block.location),
                parent: build.template(block.parent),
                status: build.template(std.get(block, 'status', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      display_name: p.child('display_name').ref,
      errors: p.child('errors').ref,
      id: p.child('id').ref,
      inspect_templates: p.child('inspect_templates').ref,
      last_run_time: p.child('last_run_time').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      status: p.child('status').ref,
      update_time: p.child('update_time').ref,
    },
    data_loss_prevention_inspect_template(name, block): {
      local p = path(['google_data_loss_prevention_inspect_template', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_loss_prevention_inspect_template: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      template_id: p.child('template_id').ref,
    },
    data_loss_prevention_job_trigger(name, block): {
      local p = path(['google_data_loss_prevention_job_trigger', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_loss_prevention_job_trigger: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                parent: build.template(block.parent),
                status: build.template(std.get(block, 'status', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      last_run_time: p.child('last_run_time').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      status: p.child('status').ref,
      trigger_id: p.child('trigger_id').ref,
      update_time: p.child('update_time').ref,
    },
    data_loss_prevention_stored_info_type(name, block): {
      local p = path(['google_data_loss_prevention_stored_info_type', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_loss_prevention_stored_info_type: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      stored_info_type_id: p.child('stored_info_type_id').ref,
    },
    data_pipeline_pipeline(name, block): {
      local p = path(['google_data_pipeline_pipeline', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_data_pipeline_pipeline: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                name: build.template(block.name),
                pipeline_sources: build.template(std.get(block, 'pipeline_sources', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
                state: build.template(block.state),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      job_count: p.child('job_count').ref,
      last_update_time: p.child('last_update_time').ref,
      name: p.child('name').ref,
      pipeline_sources: p.child('pipeline_sources').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      scheduler_service_account_email: p.child('scheduler_service_account_email').ref,
      state: p.child('state').ref,
      type: p.child('type').ref,
    },
    database_migration_service_connection_profile(name, block): {
      local p = path(['google_database_migration_service_connection_profile', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_database_migration_service_connection_profile: {
              [name]: std.prune({
                connection_profile_id: build.template(block.connection_profile_id),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
              }),
            },
          },
        },
      },
      connection_profile_id: p.child('connection_profile_id').ref,
      create_time: p.child('create_time').ref,
      dbprovider: p.child('dbprovider').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      'error': p.child('error').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    database_migration_service_migration_job(name, block): {
      local p = path(['google_database_migration_service_migration_job', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_database_migration_service_migration_job: {
              [name]: std.prune({
                destination: build.template(block.destination),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                dump_path: build.template(std.get(block, 'dump_path', null, true)),
                dump_type: build.template(std.get(block, 'dump_type', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                migration_job_id: build.template(block.migration_job_id),
                source: build.template(block.source),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      destination: p.child('destination').ref,
      display_name: p.child('display_name').ref,
      dump_path: p.child('dump_path').ref,
      dump_type: p.child('dump_type').ref,
      effective_labels: p.child('effective_labels').ref,
      'error': p.child('error').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      migration_job_id: p.child('migration_job_id').ref,
      name: p.child('name').ref,
      phase: p.child('phase').ref,
      project: p.child('project').ref,
      source: p.child('source').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
    },
    database_migration_service_private_connection(name, block): {
      local p = path(['google_database_migration_service_private_connection', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_database_migration_service_private_connection: {
              [name]: std.prune({
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                private_connection_id: build.template(block.private_connection_id),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      'error': p.child('error').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      private_connection_id: p.child('private_connection_id').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    dataflow_job(name, block): {
      local p = path(['google_dataflow_job', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataflow_job: {
              [name]: std.prune({
                enable_streaming_engine: build.template(std.get(block, 'enable_streaming_engine', null, true)),
                ip_configuration: build.template(std.get(block, 'ip_configuration', null, true)),
                kms_key_name: build.template(std.get(block, 'kms_key_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                machine_type: build.template(std.get(block, 'machine_type', null, true)),
                max_workers: build.template(std.get(block, 'max_workers', null, true)),
                name: build.template(block.name),
                network: build.template(std.get(block, 'network', null, true)),
                on_delete: build.template(std.get(block, 'on_delete', null, true)),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
                service_account_email: build.template(std.get(block, 'service_account_email', null, true)),
                skip_wait_on_job_termination: build.template(std.get(block, 'skip_wait_on_job_termination', null, true)),
                subnetwork: build.template(std.get(block, 'subnetwork', null, true)),
                temp_gcs_location: build.template(block.temp_gcs_location),
                template_gcs_path: build.template(block.template_gcs_path),
                transform_name_mapping: build.template(std.get(block, 'transform_name_mapping', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      additional_experiments: p.child('additional_experiments').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_streaming_engine: p.child('enable_streaming_engine').ref,
      id: p.child('id').ref,
      ip_configuration: p.child('ip_configuration').ref,
      job_id: p.child('job_id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      labels: p.child('labels').ref,
      machine_type: p.child('machine_type').ref,
      max_workers: p.child('max_workers').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      on_delete: p.child('on_delete').ref,
      parameters: p.child('parameters').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      service_account_email: p.child('service_account_email').ref,
      skip_wait_on_job_termination: p.child('skip_wait_on_job_termination').ref,
      state: p.child('state').ref,
      subnetwork: p.child('subnetwork').ref,
      temp_gcs_location: p.child('temp_gcs_location').ref,
      template_gcs_path: p.child('template_gcs_path').ref,
      terraform_labels: p.child('terraform_labels').ref,
      transform_name_mapping: p.child('transform_name_mapping').ref,
      type: p.child('type').ref,
      zone: p.child('zone').ref,
    },
    dataplex_aspect_type(name, block): {
      local p = path(['google_dataplex_aspect_type', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_aspect_type: {
              [name]: std.prune({
                aspect_type_id: build.template(std.get(block, 'aspect_type_id', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                metadata_template: build.template(std.get(block, 'metadata_template', null, true)),
              }),
            },
          },
        },
      },
      aspect_type_id: p.child('aspect_type_id').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      metadata_template: p.child('metadata_template').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      transfer_status: p.child('transfer_status').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    dataplex_aspect_type_iam_binding(name, block): {
      local p = path(['google_dataplex_aspect_type_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_aspect_type_iam_binding: {
              [name]: std.prune({
                aspect_type_id: build.template(block.aspect_type_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      aspect_type_id: p.child('aspect_type_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_aspect_type_iam_member(name, block): {
      local p = path(['google_dataplex_aspect_type_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_aspect_type_iam_member: {
              [name]: std.prune({
                aspect_type_id: build.template(block.aspect_type_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      aspect_type_id: p.child('aspect_type_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_aspect_type_iam_policy(name, block): {
      local p = path(['google_dataplex_aspect_type_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_aspect_type_iam_policy: {
              [name]: std.prune({
                aspect_type_id: build.template(block.aspect_type_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      aspect_type_id: p.child('aspect_type_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataplex_asset(name, block): {
      local p = path(['google_dataplex_asset', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_asset: {
              [name]: std.prune({
                dataplex_zone: build.template(block.dataplex_zone),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                lake: build.template(block.lake),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      dataplex_zone: p.child('dataplex_zone').ref,
      description: p.child('description').ref,
      discovery_status: p.child('discovery_status').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      resource_status: p.child('resource_status').ref,
      security_status: p.child('security_status').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    dataplex_asset_iam_binding(name, block): {
      local p = path(['google_dataplex_asset_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_asset_iam_binding: {
              [name]: std.prune({
                asset: build.template(block.asset),
                dataplex_zone: build.template(block.dataplex_zone),
                lake: build.template(block.lake),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      asset: p.child('asset').ref,
      dataplex_zone: p.child('dataplex_zone').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_asset_iam_member(name, block): {
      local p = path(['google_dataplex_asset_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_asset_iam_member: {
              [name]: std.prune({
                asset: build.template(block.asset),
                dataplex_zone: build.template(block.dataplex_zone),
                lake: build.template(block.lake),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      asset: p.child('asset').ref,
      dataplex_zone: p.child('dataplex_zone').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_asset_iam_policy(name, block): {
      local p = path(['google_dataplex_asset_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_asset_iam_policy: {
              [name]: std.prune({
                asset: build.template(block.asset),
                dataplex_zone: build.template(block.dataplex_zone),
                lake: build.template(block.lake),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      asset: p.child('asset').ref,
      dataplex_zone: p.child('dataplex_zone').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataplex_datascan(name, block): {
      local p = path(['google_dataplex_datascan', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_datascan: {
              [name]: std.prune({
                data_scan_id: build.template(block.data_scan_id),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      data_scan_id: p.child('data_scan_id').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      execution_status: p.child('execution_status').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    dataplex_datascan_iam_binding(name, block): {
      local p = path(['google_dataplex_datascan_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_datascan_iam_binding: {
              [name]: std.prune({
                data_scan_id: build.template(block.data_scan_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      data_scan_id: p.child('data_scan_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_datascan_iam_member(name, block): {
      local p = path(['google_dataplex_datascan_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_datascan_iam_member: {
              [name]: std.prune({
                data_scan_id: build.template(block.data_scan_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      data_scan_id: p.child('data_scan_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_datascan_iam_policy(name, block): {
      local p = path(['google_dataplex_datascan_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_datascan_iam_policy: {
              [name]: std.prune({
                data_scan_id: build.template(block.data_scan_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      data_scan_id: p.child('data_scan_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataplex_entry_group(name, block): {
      local p = path(['google_dataplex_entry_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_entry_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                entry_group_id: build.template(std.get(block, 'entry_group_id', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      entry_group_id: p.child('entry_group_id').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      transfer_status: p.child('transfer_status').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    dataplex_entry_group_iam_binding(name, block): {
      local p = path(['google_dataplex_entry_group_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_entry_group_iam_binding: {
              [name]: std.prune({
                entry_group_id: build.template(block.entry_group_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      entry_group_id: p.child('entry_group_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_entry_group_iam_member(name, block): {
      local p = path(['google_dataplex_entry_group_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_entry_group_iam_member: {
              [name]: std.prune({
                entry_group_id: build.template(block.entry_group_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      entry_group_id: p.child('entry_group_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_entry_group_iam_policy(name, block): {
      local p = path(['google_dataplex_entry_group_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_entry_group_iam_policy: {
              [name]: std.prune({
                entry_group_id: build.template(block.entry_group_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      entry_group_id: p.child('entry_group_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataplex_entry_type(name, block): {
      local p = path(['google_dataplex_entry_type', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_entry_type: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                entry_type_id: build.template(std.get(block, 'entry_type_id', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                platform: build.template(std.get(block, 'platform', null, true)),
                system: build.template(std.get(block, 'system', null, true)),
                type_aliases: build.template(std.get(block, 'type_aliases', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      entry_type_id: p.child('entry_type_id').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      platform: p.child('platform').ref,
      project: p.child('project').ref,
      system: p.child('system').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type_aliases: p.child('type_aliases').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    dataplex_entry_type_iam_binding(name, block): {
      local p = path(['google_dataplex_entry_type_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_entry_type_iam_binding: {
              [name]: std.prune({
                entry_type_id: build.template(block.entry_type_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      entry_type_id: p.child('entry_type_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_entry_type_iam_member(name, block): {
      local p = path(['google_dataplex_entry_type_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_entry_type_iam_member: {
              [name]: std.prune({
                entry_type_id: build.template(block.entry_type_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      entry_type_id: p.child('entry_type_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_entry_type_iam_policy(name, block): {
      local p = path(['google_dataplex_entry_type_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_entry_type_iam_policy: {
              [name]: std.prune({
                entry_type_id: build.template(block.entry_type_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      entry_type_id: p.child('entry_type_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataplex_lake(name, block): {
      local p = path(['google_dataplex_lake', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_lake: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      asset_status: p.child('asset_status').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      metastore_status: p.child('metastore_status').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_account: p.child('service_account').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    dataplex_lake_iam_binding(name, block): {
      local p = path(['google_dataplex_lake_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_lake_iam_binding: {
              [name]: std.prune({
                lake: build.template(block.lake),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_lake_iam_member(name, block): {
      local p = path(['google_dataplex_lake_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_lake_iam_member: {
              [name]: std.prune({
                lake: build.template(block.lake),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_lake_iam_policy(name, block): {
      local p = path(['google_dataplex_lake_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_lake_iam_policy: {
              [name]: std.prune({
                lake: build.template(block.lake),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataplex_task(name, block): {
      local p = path(['google_dataplex_task', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_task: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                lake: build.template(std.get(block, 'lake', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                task_id: build.template(std.get(block, 'task_id', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      execution_status: p.child('execution_status').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      task_id: p.child('task_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    dataplex_task_iam_binding(name, block): {
      local p = path(['google_dataplex_task_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_task_iam_binding: {
              [name]: std.prune({
                lake: build.template(block.lake),
                members: build.template(block.members),
                role: build.template(block.role),
                task_id: build.template(block.task_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      task_id: p.child('task_id').ref,
    },
    dataplex_task_iam_member(name, block): {
      local p = path(['google_dataplex_task_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_task_iam_member: {
              [name]: std.prune({
                lake: build.template(block.lake),
                member: build.template(block.member),
                role: build.template(block.role),
                task_id: build.template(block.task_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      task_id: p.child('task_id').ref,
    },
    dataplex_task_iam_policy(name, block): {
      local p = path(['google_dataplex_task_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_task_iam_policy: {
              [name]: std.prune({
                lake: build.template(block.lake),
                policy_data: build.template(block.policy_data),
                task_id: build.template(block.task_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      task_id: p.child('task_id').ref,
    },
    dataplex_zone(name, block): {
      local p = path(['google_dataplex_zone', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_zone: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                lake: build.template(block.lake),
                location: build.template(block.location),
                name: build.template(block.name),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      asset_status: p.child('asset_status').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    dataplex_zone_iam_binding(name, block): {
      local p = path(['google_dataplex_zone_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_zone_iam_binding: {
              [name]: std.prune({
                dataplex_zone: build.template(block.dataplex_zone),
                lake: build.template(block.lake),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      dataplex_zone: p.child('dataplex_zone').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_zone_iam_member(name, block): {
      local p = path(['google_dataplex_zone_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_zone_iam_member: {
              [name]: std.prune({
                dataplex_zone: build.template(block.dataplex_zone),
                lake: build.template(block.lake),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      dataplex_zone: p.child('dataplex_zone').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataplex_zone_iam_policy(name, block): {
      local p = path(['google_dataplex_zone_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataplex_zone_iam_policy: {
              [name]: std.prune({
                dataplex_zone: build.template(block.dataplex_zone),
                lake: build.template(block.lake),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      dataplex_zone: p.child('dataplex_zone').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataproc_autoscaling_policy(name, block): {
      local p = path(['google_dataproc_autoscaling_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_autoscaling_policy: {
              [name]: std.prune({
                location: build.template(std.get(block, 'location', null, true)),
                policy_id: build.template(block.policy_id),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_id: p.child('policy_id').ref,
      project: p.child('project').ref,
    },
    dataproc_autoscaling_policy_iam_binding(name, block): {
      local p = path(['google_dataproc_autoscaling_policy_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_autoscaling_policy_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                policy_id: build.template(block.policy_id),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      policy_id: p.child('policy_id').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataproc_autoscaling_policy_iam_member(name, block): {
      local p = path(['google_dataproc_autoscaling_policy_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_autoscaling_policy_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                policy_id: build.template(block.policy_id),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      policy_id: p.child('policy_id').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataproc_autoscaling_policy_iam_policy(name, block): {
      local p = path(['google_dataproc_autoscaling_policy_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_autoscaling_policy_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                policy_id: build.template(block.policy_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      policy_id: p.child('policy_id').ref,
      project: p.child('project').ref,
    },
    dataproc_batch(name, block): {
      local p = path(['google_dataproc_batch', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_batch: {
              [name]: std.prune({
                batch_id: build.template(std.get(block, 'batch_id', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
              }),
            },
          },
        },
      },
      batch_id: p.child('batch_id').ref,
      create_time: p.child('create_time').ref,
      creator: p.child('creator').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      operation: p.child('operation').ref,
      project: p.child('project').ref,
      runtime_info: p.child('runtime_info').ref,
      state: p.child('state').ref,
      state_history: p.child('state_history').ref,
      state_message: p.child('state_message').ref,
      state_time: p.child('state_time').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uuid: p.child('uuid').ref,
    },
    dataproc_cluster(name, block): {
      local p = path(['google_dataproc_cluster', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_cluster: {
              [name]: std.prune({
                graceful_decommission_timeout: build.template(std.get(block, 'graceful_decommission_timeout', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      effective_labels: p.child('effective_labels').ref,
      graceful_decommission_timeout: p.child('graceful_decommission_timeout').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    dataproc_cluster_iam_binding(name, block): {
      local p = path(['google_dataproc_cluster_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_cluster_iam_binding: {
              [name]: std.prune({
                cluster: build.template(block.cluster),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      cluster: p.child('cluster').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    dataproc_cluster_iam_member(name, block): {
      local p = path(['google_dataproc_cluster_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_cluster_iam_member: {
              [name]: std.prune({
                cluster: build.template(block.cluster),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      cluster: p.child('cluster').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    dataproc_cluster_iam_policy(name, block): {
      local p = path(['google_dataproc_cluster_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_cluster_iam_policy: {
              [name]: std.prune({
                cluster: build.template(block.cluster),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      cluster: p.child('cluster').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    dataproc_job(name, block): {
      local p = path(['google_dataproc_job', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_job: {
              [name]: std.prune({
                force_delete: build.template(std.get(block, 'force_delete', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      driver_controls_files_uri: p.child('driver_controls_files_uri').ref,
      driver_output_resource_uri: p.child('driver_output_resource_uri').ref,
      effective_labels: p.child('effective_labels').ref,
      force_delete: p.child('force_delete').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      status: p.child('status').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    dataproc_job_iam_binding(name, block): {
      local p = path(['google_dataproc_job_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_job_iam_binding: {
              [name]: std.prune({
                job_id: build.template(block.job_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      job_id: p.child('job_id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    dataproc_job_iam_member(name, block): {
      local p = path(['google_dataproc_job_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_job_iam_member: {
              [name]: std.prune({
                job_id: build.template(block.job_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      job_id: p.child('job_id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    dataproc_job_iam_policy(name, block): {
      local p = path(['google_dataproc_job_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_job_iam_policy: {
              [name]: std.prune({
                job_id: build.template(block.job_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      job_id: p.child('job_id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    dataproc_metastore_federation(name, block): {
      local p = path(['google_dataproc_metastore_federation', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_metastore_federation: {
              [name]: std.prune({
                federation_id: build.template(block.federation_id),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      effective_labels: p.child('effective_labels').ref,
      endpoint_uri: p.child('endpoint_uri').ref,
      federation_id: p.child('federation_id').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      state_message: p.child('state_message').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      version: p.child('version').ref,
    },
    dataproc_metastore_federation_iam_binding(name, block): {
      local p = path(['google_dataproc_metastore_federation_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_metastore_federation_iam_binding: {
              [name]: std.prune({
                federation_id: build.template(block.federation_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      federation_id: p.child('federation_id').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataproc_metastore_federation_iam_member(name, block): {
      local p = path(['google_dataproc_metastore_federation_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_metastore_federation_iam_member: {
              [name]: std.prune({
                federation_id: build.template(block.federation_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      federation_id: p.child('federation_id').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dataproc_metastore_federation_iam_policy(name, block): {
      local p = path(['google_dataproc_metastore_federation_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_metastore_federation_iam_policy: {
              [name]: std.prune({
                federation_id: build.template(block.federation_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      federation_id: p.child('federation_id').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataproc_metastore_service(name, block): {
      local p = path(['google_dataproc_metastore_service', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_metastore_service: {
              [name]: std.prune({
                database_type: build.template(std.get(block, 'database_type', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                release_channel: build.template(std.get(block, 'release_channel', null, true)),
                service_id: build.template(block.service_id),
              }),
            },
          },
        },
      },
      artifact_gcs_uri: p.child('artifact_gcs_uri').ref,
      database_type: p.child('database_type').ref,
      deletion_protection: p.child('deletion_protection').ref,
      effective_labels: p.child('effective_labels').ref,
      endpoint_uri: p.child('endpoint_uri').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
      release_channel: p.child('release_channel').ref,
      service_id: p.child('service_id').ref,
      state: p.child('state').ref,
      state_message: p.child('state_message').ref,
      terraform_labels: p.child('terraform_labels').ref,
      tier: p.child('tier').ref,
      uid: p.child('uid').ref,
    },
    dataproc_metastore_service_iam_binding(name, block): {
      local p = path(['google_dataproc_metastore_service_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_metastore_service_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                service_id: build.template(block.service_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      service_id: p.child('service_id').ref,
    },
    dataproc_metastore_service_iam_member(name, block): {
      local p = path(['google_dataproc_metastore_service_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_metastore_service_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                service_id: build.template(block.service_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      service_id: p.child('service_id').ref,
    },
    dataproc_metastore_service_iam_policy(name, block): {
      local p = path(['google_dataproc_metastore_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_metastore_service_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                service_id: build.template(block.service_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      service_id: p.child('service_id').ref,
    },
    dataproc_workflow_template(name, block): {
      local p = path(['google_dataproc_workflow_template', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dataproc_workflow_template: {
              [name]: std.prune({
                dag_timeout: build.template(std.get(block, 'dag_timeout', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      dag_timeout: p.child('dag_timeout').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
      version: p.child('version').ref,
    },
    datastream_connection_profile(name, block): {
      local p = path(['google_datastream_connection_profile', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_datastream_connection_profile: {
              [name]: std.prune({
                connection_profile_id: build.template(block.connection_profile_id),
                create_without_validation: build.template(std.get(block, 'create_without_validation', null, true)),
                display_name: build.template(block.display_name),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      connection_profile_id: p.child('connection_profile_id').ref,
      create_without_validation: p.child('create_without_validation').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    datastream_private_connection(name, block): {
      local p = path(['google_datastream_private_connection', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_datastream_private_connection: {
              [name]: std.prune({
                create_without_validation: build.template(std.get(block, 'create_without_validation', null, true)),
                display_name: build.template(block.display_name),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                private_connection_id: build.template(block.private_connection_id),
              }),
            },
          },
        },
      },
      create_without_validation: p.child('create_without_validation').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      'error': p.child('error').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      private_connection_id: p.child('private_connection_id').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    datastream_stream(name, block): {
      local p = path(['google_datastream_stream', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_datastream_stream: {
              [name]: std.prune({
                create_without_validation: build.template(std.get(block, 'create_without_validation', null, true)),
                customer_managed_encryption_key: build.template(std.get(block, 'customer_managed_encryption_key', null, true)),
                desired_state: build.template(std.get(block, 'desired_state', null, true)),
                display_name: build.template(block.display_name),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                stream_id: build.template(block.stream_id),
              }),
            },
          },
        },
      },
      create_without_validation: p.child('create_without_validation').ref,
      customer_managed_encryption_key: p.child('customer_managed_encryption_key').ref,
      desired_state: p.child('desired_state').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      stream_id: p.child('stream_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    deployment_manager_deployment(name, block): {
      local p = path(['google_deployment_manager_deployment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_deployment_manager_deployment: {
              [name]: std.prune({
                create_policy: build.template(std.get(block, 'create_policy', null, true)),
                delete_policy: build.template(std.get(block, 'delete_policy', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                preview: build.template(std.get(block, 'preview', null, true)),
              }),
            },
          },
        },
      },
      create_policy: p.child('create_policy').ref,
      delete_policy: p.child('delete_policy').ref,
      deployment_id: p.child('deployment_id').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      manifest: p.child('manifest').ref,
      name: p.child('name').ref,
      preview: p.child('preview').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
    },
    dialogflow_agent(name, block): {
      local p = path(['google_dialogflow_agent', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_agent: {
              [name]: std.prune({
                avatar_uri: build.template(std.get(block, 'avatar_uri', null, true)),
                classification_threshold: build.template(std.get(block, 'classification_threshold', null, true)),
                default_language_code: build.template(block.default_language_code),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                enable_logging: build.template(std.get(block, 'enable_logging', null, true)),
                supported_language_codes: build.template(std.get(block, 'supported_language_codes', null, true)),
                tier: build.template(std.get(block, 'tier', null, true)),
                time_zone: build.template(block.time_zone),
              }),
            },
          },
        },
      },
      api_version: p.child('api_version').ref,
      avatar_uri: p.child('avatar_uri').ref,
      avatar_uri_backend: p.child('avatar_uri_backend').ref,
      classification_threshold: p.child('classification_threshold').ref,
      default_language_code: p.child('default_language_code').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      enable_logging: p.child('enable_logging').ref,
      id: p.child('id').ref,
      match_mode: p.child('match_mode').ref,
      project: p.child('project').ref,
      supported_language_codes: p.child('supported_language_codes').ref,
      tier: p.child('tier').ref,
      time_zone: p.child('time_zone').ref,
    },
    dialogflow_cx_agent(name, block): {
      local p = path(['google_dialogflow_cx_agent', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_cx_agent: {
              [name]: std.prune({
                avatar_uri: build.template(std.get(block, 'avatar_uri', null, true)),
                default_language_code: build.template(block.default_language_code),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                enable_spell_correction: build.template(std.get(block, 'enable_spell_correction', null, true)),
                enable_stackdriver_logging: build.template(std.get(block, 'enable_stackdriver_logging', null, true)),
                location: build.template(block.location),
                security_settings: build.template(std.get(block, 'security_settings', null, true)),
                supported_language_codes: build.template(std.get(block, 'supported_language_codes', null, true)),
                time_zone: build.template(block.time_zone),
              }),
            },
          },
        },
      },
      avatar_uri: p.child('avatar_uri').ref,
      default_language_code: p.child('default_language_code').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      enable_spell_correction: p.child('enable_spell_correction').ref,
      enable_stackdriver_logging: p.child('enable_stackdriver_logging').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      security_settings: p.child('security_settings').ref,
      start_flow: p.child('start_flow').ref,
      supported_language_codes: p.child('supported_language_codes').ref,
      time_zone: p.child('time_zone').ref,
    },
    dialogflow_cx_entity_type(name, block): {
      local p = path(['google_dialogflow_cx_entity_type', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_cx_entity_type: {
              [name]: std.prune({
                auto_expansion_mode: build.template(std.get(block, 'auto_expansion_mode', null, true)),
                display_name: build.template(block.display_name),
                enable_fuzzy_extraction: build.template(std.get(block, 'enable_fuzzy_extraction', null, true)),
                kind: build.template(block.kind),
                language_code: build.template(std.get(block, 'language_code', null, true)),
                parent: build.template(std.get(block, 'parent', null, true)),
                redact: build.template(std.get(block, 'redact', null, true)),
              }),
            },
          },
        },
      },
      auto_expansion_mode: p.child('auto_expansion_mode').ref,
      display_name: p.child('display_name').ref,
      enable_fuzzy_extraction: p.child('enable_fuzzy_extraction').ref,
      id: p.child('id').ref,
      kind: p.child('kind').ref,
      language_code: p.child('language_code').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      redact: p.child('redact').ref,
    },
    dialogflow_cx_environment(name, block): {
      local p = path(['google_dialogflow_cx_environment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_cx_environment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                parent: build.template(std.get(block, 'parent', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      update_time: p.child('update_time').ref,
    },
    dialogflow_cx_flow(name, block): {
      local p = path(['google_dialogflow_cx_flow', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_cx_flow: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                is_default_start_flow: build.template(std.get(block, 'is_default_start_flow', null, true)),
                language_code: build.template(std.get(block, 'language_code', null, true)),
                parent: build.template(std.get(block, 'parent', null, true)),
                transition_route_groups: build.template(std.get(block, 'transition_route_groups', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      is_default_start_flow: p.child('is_default_start_flow').ref,
      language_code: p.child('language_code').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      transition_route_groups: p.child('transition_route_groups').ref,
    },
    dialogflow_cx_intent(name, block): {
      local p = path(['google_dialogflow_cx_intent', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_cx_intent: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                is_default_negative_intent: build.template(std.get(block, 'is_default_negative_intent', null, true)),
                is_default_welcome_intent: build.template(std.get(block, 'is_default_welcome_intent', null, true)),
                is_fallback: build.template(std.get(block, 'is_fallback', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                language_code: build.template(std.get(block, 'language_code', null, true)),
                parent: build.template(std.get(block, 'parent', null, true)),
                priority: build.template(std.get(block, 'priority', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      is_default_negative_intent: p.child('is_default_negative_intent').ref,
      is_default_welcome_intent: p.child('is_default_welcome_intent').ref,
      is_fallback: p.child('is_fallback').ref,
      labels: p.child('labels').ref,
      language_code: p.child('language_code').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      priority: p.child('priority').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    dialogflow_cx_page(name, block): {
      local p = path(['google_dialogflow_cx_page', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_cx_page: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                language_code: build.template(std.get(block, 'language_code', null, true)),
                parent: build.template(std.get(block, 'parent', null, true)),
                transition_route_groups: build.template(std.get(block, 'transition_route_groups', null, true)),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      language_code: p.child('language_code').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      transition_route_groups: p.child('transition_route_groups').ref,
    },
    dialogflow_cx_security_settings(name, block): {
      local p = path(['google_dialogflow_cx_security_settings', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_cx_security_settings: {
              [name]: std.prune({
                deidentify_template: build.template(std.get(block, 'deidentify_template', null, true)),
                display_name: build.template(block.display_name),
                inspect_template: build.template(std.get(block, 'inspect_template', null, true)),
                location: build.template(block.location),
                purge_data_types: build.template(std.get(block, 'purge_data_types', null, true)),
                redaction_scope: build.template(std.get(block, 'redaction_scope', null, true)),
                redaction_strategy: build.template(std.get(block, 'redaction_strategy', null, true)),
                retention_strategy: build.template(std.get(block, 'retention_strategy', null, true)),
                retention_window_days: build.template(std.get(block, 'retention_window_days', null, true)),
              }),
            },
          },
        },
      },
      deidentify_template: p.child('deidentify_template').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      inspect_template: p.child('inspect_template').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      purge_data_types: p.child('purge_data_types').ref,
      redaction_scope: p.child('redaction_scope').ref,
      redaction_strategy: p.child('redaction_strategy').ref,
      retention_strategy: p.child('retention_strategy').ref,
      retention_window_days: p.child('retention_window_days').ref,
    },
    dialogflow_cx_test_case(name, block): {
      local p = path(['google_dialogflow_cx_test_case', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_cx_test_case: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                notes: build.template(std.get(block, 'notes', null, true)),
                parent: build.template(std.get(block, 'parent', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      creation_time: p.child('creation_time').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      last_test_result: p.child('last_test_result').ref,
      name: p.child('name').ref,
      notes: p.child('notes').ref,
      parent: p.child('parent').ref,
      tags: p.child('tags').ref,
    },
    dialogflow_cx_version(name, block): {
      local p = path(['google_dialogflow_cx_version', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_cx_version: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                parent: build.template(std.get(block, 'parent', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      nlu_settings: p.child('nlu_settings').ref,
      parent: p.child('parent').ref,
      state: p.child('state').ref,
    },
    dialogflow_cx_webhook(name, block): {
      local p = path(['google_dialogflow_cx_webhook', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_cx_webhook: {
              [name]: std.prune({
                disabled: build.template(std.get(block, 'disabled', null, true)),
                display_name: build.template(block.display_name),
                enable_spell_correction: build.template(std.get(block, 'enable_spell_correction', null, true)),
                enable_stackdriver_logging: build.template(std.get(block, 'enable_stackdriver_logging', null, true)),
                parent: build.template(std.get(block, 'parent', null, true)),
                security_settings: build.template(std.get(block, 'security_settings', null, true)),
                timeout: build.template(std.get(block, 'timeout', null, true)),
              }),
            },
          },
        },
      },
      disabled: p.child('disabled').ref,
      display_name: p.child('display_name').ref,
      enable_spell_correction: p.child('enable_spell_correction').ref,
      enable_stackdriver_logging: p.child('enable_stackdriver_logging').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      security_settings: p.child('security_settings').ref,
      start_flow: p.child('start_flow').ref,
      timeout: p.child('timeout').ref,
    },
    dialogflow_entity_type(name, block): {
      local p = path(['google_dialogflow_entity_type', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_entity_type: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                enable_fuzzy_extraction: build.template(std.get(block, 'enable_fuzzy_extraction', null, true)),
                kind: build.template(block.kind),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      enable_fuzzy_extraction: p.child('enable_fuzzy_extraction').ref,
      id: p.child('id').ref,
      kind: p.child('kind').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    dialogflow_fulfillment(name, block): {
      local p = path(['google_dialogflow_fulfillment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_fulfillment: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                enabled: build.template(std.get(block, 'enabled', null, true)),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    dialogflow_intent(name, block): {
      local p = path(['google_dialogflow_intent', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dialogflow_intent: {
              [name]: std.prune({
                default_response_platforms: build.template(std.get(block, 'default_response_platforms', null, true)),
                display_name: build.template(block.display_name),
                events: build.template(std.get(block, 'events', null, true)),
                input_context_names: build.template(std.get(block, 'input_context_names', null, true)),
              }),
            },
          },
        },
      },
      action: p.child('action').ref,
      default_response_platforms: p.child('default_response_platforms').ref,
      display_name: p.child('display_name').ref,
      events: p.child('events').ref,
      followup_intent_info: p.child('followup_intent_info').ref,
      id: p.child('id').ref,
      input_context_names: p.child('input_context_names').ref,
      is_fallback: p.child('is_fallback').ref,
      ml_disabled: p.child('ml_disabled').ref,
      name: p.child('name').ref,
      parent_followup_intent_name: p.child('parent_followup_intent_name').ref,
      priority: p.child('priority').ref,
      project: p.child('project').ref,
      reset_contexts: p.child('reset_contexts').ref,
      root_followup_intent_name: p.child('root_followup_intent_name').ref,
      webhook_state: p.child('webhook_state').ref,
    },
    discovery_engine_chat_engine(name, block): {
      local p = path(['google_discovery_engine_chat_engine', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_discovery_engine_chat_engine: {
              [name]: std.prune({
                collection_id: build.template(block.collection_id),
                data_store_ids: build.template(block.data_store_ids),
                display_name: build.template(block.display_name),
                engine_id: build.template(block.engine_id),
                industry_vertical: build.template(std.get(block, 'industry_vertical', null, true)),
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      chat_engine_metadata: p.child('chat_engine_metadata').ref,
      collection_id: p.child('collection_id').ref,
      create_time: p.child('create_time').ref,
      data_store_ids: p.child('data_store_ids').ref,
      display_name: p.child('display_name').ref,
      engine_id: p.child('engine_id').ref,
      id: p.child('id').ref,
      industry_vertical: p.child('industry_vertical').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      update_time: p.child('update_time').ref,
    },
    discovery_engine_data_store(name, block): {
      local p = path(['google_discovery_engine_data_store', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_discovery_engine_data_store: {
              [name]: std.prune({
                content_config: build.template(block.content_config),
                create_advanced_site_search: build.template(std.get(block, 'create_advanced_site_search', null, true)),
                data_store_id: build.template(block.data_store_id),
                display_name: build.template(block.display_name),
                industry_vertical: build.template(block.industry_vertical),
                location: build.template(block.location),
                skip_default_schema_creation: build.template(std.get(block, 'skip_default_schema_creation', null, true)),
                solution_types: build.template(std.get(block, 'solution_types', null, true)),
              }),
            },
          },
        },
      },
      content_config: p.child('content_config').ref,
      create_advanced_site_search: p.child('create_advanced_site_search').ref,
      create_time: p.child('create_time').ref,
      data_store_id: p.child('data_store_id').ref,
      default_schema_id: p.child('default_schema_id').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      industry_vertical: p.child('industry_vertical').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      skip_default_schema_creation: p.child('skip_default_schema_creation').ref,
      solution_types: p.child('solution_types').ref,
    },
    discovery_engine_schema(name, block): {
      local p = path(['google_discovery_engine_schema', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_discovery_engine_schema: {
              [name]: std.prune({
                data_store_id: build.template(block.data_store_id),
                json_schema: build.template(std.get(block, 'json_schema', null, true)),
                location: build.template(block.location),
                schema_id: build.template(block.schema_id),
              }),
            },
          },
        },
      },
      data_store_id: p.child('data_store_id').ref,
      id: p.child('id').ref,
      json_schema: p.child('json_schema').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      schema_id: p.child('schema_id').ref,
    },
    discovery_engine_search_engine(name, block): {
      local p = path(['google_discovery_engine_search_engine', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_discovery_engine_search_engine: {
              [name]: std.prune({
                collection_id: build.template(block.collection_id),
                data_store_ids: build.template(block.data_store_ids),
                display_name: build.template(block.display_name),
                engine_id: build.template(block.engine_id),
                industry_vertical: build.template(std.get(block, 'industry_vertical', null, true)),
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      collection_id: p.child('collection_id').ref,
      create_time: p.child('create_time').ref,
      data_store_ids: p.child('data_store_ids').ref,
      display_name: p.child('display_name').ref,
      engine_id: p.child('engine_id').ref,
      id: p.child('id').ref,
      industry_vertical: p.child('industry_vertical').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      update_time: p.child('update_time').ref,
    },
    discovery_engine_target_site(name, block): {
      local p = path(['google_discovery_engine_target_site', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_discovery_engine_target_site: {
              [name]: std.prune({
                data_store_id: build.template(block.data_store_id),
                exact_match: build.template(std.get(block, 'exact_match', null, true)),
                location: build.template(block.location),
                provided_uri_pattern: build.template(block.provided_uri_pattern),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      data_store_id: p.child('data_store_id').ref,
      exact_match: p.child('exact_match').ref,
      failure_reason: p.child('failure_reason').ref,
      generated_uri_pattern: p.child('generated_uri_pattern').ref,
      id: p.child('id').ref,
      indexing_status: p.child('indexing_status').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      provided_uri_pattern: p.child('provided_uri_pattern').ref,
      root_domain_uri: p.child('root_domain_uri').ref,
      site_verification_info: p.child('site_verification_info').ref,
      target_site_id: p.child('target_site_id').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    dns_managed_zone(name, block): {
      local p = path(['google_dns_managed_zone', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dns_managed_zone: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                dns_name: build.template(block.dns_name),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                visibility: build.template(std.get(block, 'visibility', null, true)),
              }),
            },
          },
        },
      },
      creation_time: p.child('creation_time').ref,
      description: p.child('description').ref,
      dns_name: p.child('dns_name').ref,
      effective_labels: p.child('effective_labels').ref,
      force_destroy: p.child('force_destroy').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      managed_zone_id: p.child('managed_zone_id').ref,
      name: p.child('name').ref,
      name_servers: p.child('name_servers').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      visibility: p.child('visibility').ref,
    },
    dns_managed_zone_iam_binding(name, block): {
      local p = path(['google_dns_managed_zone_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dns_managed_zone_iam_binding: {
              [name]: std.prune({
                managed_zone: build.template(block.managed_zone),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      managed_zone: p.child('managed_zone').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dns_managed_zone_iam_member(name, block): {
      local p = path(['google_dns_managed_zone_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dns_managed_zone_iam_member: {
              [name]: std.prune({
                managed_zone: build.template(block.managed_zone),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      managed_zone: p.child('managed_zone').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    dns_managed_zone_iam_policy(name, block): {
      local p = path(['google_dns_managed_zone_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dns_managed_zone_iam_policy: {
              [name]: std.prune({
                managed_zone: build.template(block.managed_zone),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      managed_zone: p.child('managed_zone').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dns_policy(name, block): {
      local p = path(['google_dns_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dns_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                enable_inbound_forwarding: build.template(std.get(block, 'enable_inbound_forwarding', null, true)),
                enable_logging: build.template(std.get(block, 'enable_logging', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      enable_inbound_forwarding: p.child('enable_inbound_forwarding').ref,
      enable_logging: p.child('enable_logging').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    dns_record_set(name, block): {
      local p = path(['google_dns_record_set', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dns_record_set: {
              [name]: std.prune({
                managed_zone: build.template(block.managed_zone),
                name: build.template(block.name),
                rrdatas: build.template(std.get(block, 'rrdatas', null, true)),
                ttl: build.template(std.get(block, 'ttl', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      managed_zone: p.child('managed_zone').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      rrdatas: p.child('rrdatas').ref,
      ttl: p.child('ttl').ref,
      type: p.child('type').ref,
    },
    dns_response_policy(name, block): {
      local p = path(['google_dns_response_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dns_response_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                response_policy_name: build.template(block.response_policy_name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      response_policy_name: p.child('response_policy_name').ref,
    },
    dns_response_policy_rule(name, block): {
      local p = path(['google_dns_response_policy_rule', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_dns_response_policy_rule: {
              [name]: std.prune({
                dns_name: build.template(block.dns_name),
                response_policy: build.template(block.response_policy),
                rule_name: build.template(block.rule_name),
              }),
            },
          },
        },
      },
      dns_name: p.child('dns_name').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      response_policy: p.child('response_policy').ref,
      rule_name: p.child('rule_name').ref,
    },
    document_ai_processor(name, block): {
      local p = path(['google_document_ai_processor', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_document_ai_processor: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                kms_key_name: build.template(std.get(block, 'kms_key_name', null, true)),
                location: build.template(block.location),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      type: p.child('type').ref,
    },
    document_ai_processor_default_version(name, block): {
      local p = path(['google_document_ai_processor_default_version', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_document_ai_processor_default_version: {
              [name]: std.prune({
                processor: build.template(block.processor),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      processor: p.child('processor').ref,
      version: p.child('version').ref,
    },
    document_ai_warehouse_document_schema(name, block): {
      local p = path(['google_document_ai_warehouse_document_schema', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_document_ai_warehouse_document_schema: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                document_is_folder: build.template(std.get(block, 'document_is_folder', null, true)),
                location: build.template(block.location),
                project_number: build.template(block.project_number),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      document_is_folder: p.child('document_is_folder').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project_number: p.child('project_number').ref,
    },
    document_ai_warehouse_location(name, block): {
      local p = path(['google_document_ai_warehouse_location', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_document_ai_warehouse_location: {
              [name]: std.prune({
                access_control_mode: build.template(block.access_control_mode),
                database_type: build.template(block.database_type),
                document_creator_default_role: build.template(std.get(block, 'document_creator_default_role', null, true)),
                kms_key: build.template(std.get(block, 'kms_key', null, true)),
                location: build.template(block.location),
                project_number: build.template(block.project_number),
              }),
            },
          },
        },
      },
      access_control_mode: p.child('access_control_mode').ref,
      database_type: p.child('database_type').ref,
      document_creator_default_role: p.child('document_creator_default_role').ref,
      id: p.child('id').ref,
      kms_key: p.child('kms_key').ref,
      location: p.child('location').ref,
      project_number: p.child('project_number').ref,
    },
    edgecontainer_cluster(name, block): {
      local p = path(['google_edgecontainer_cluster', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_edgecontainer_cluster: {
              [name]: std.prune({
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      cluster_ca_certificate: p.child('cluster_ca_certificate').ref,
      control_plane_version: p.child('control_plane_version').ref,
      create_time: p.child('create_time').ref,
      default_max_pods_per_node: p.child('default_max_pods_per_node').ref,
      effective_labels: p.child('effective_labels').ref,
      endpoint: p.child('endpoint').ref,
      external_load_balancer_ipv4_address_pools: p.child('external_load_balancer_ipv4_address_pools').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      maintenance_events: p.child('maintenance_events').ref,
      name: p.child('name').ref,
      node_version: p.child('node_version').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
      release_channel: p.child('release_channel').ref,
      status: p.child('status').ref,
      target_version: p.child('target_version').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    edgecontainer_node_pool(name, block): {
      local p = path(['google_edgecontainer_node_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_edgecontainer_node_pool: {
              [name]: std.prune({
                cluster: build.template(block.cluster),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                node_count: build.template(block.node_count),
                node_location: build.template(block.node_location),
              }),
            },
          },
        },
      },
      cluster: p.child('cluster').ref,
      create_time: p.child('create_time').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      machine_filter: p.child('machine_filter').ref,
      name: p.child('name').ref,
      node_count: p.child('node_count').ref,
      node_location: p.child('node_location').ref,
      node_version: p.child('node_version').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    edgecontainer_vpn_connection(name, block): {
      local p = path(['google_edgecontainer_vpn_connection', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_edgecontainer_vpn_connection: {
              [name]: std.prune({
                cluster: build.template(block.cluster),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                nat_gateway_ip: build.template(std.get(block, 'nat_gateway_ip', null, true)),
                router: build.template(std.get(block, 'router', null, true)),
                vpc: build.template(std.get(block, 'vpc', null, true)),
              }),
            },
          },
        },
      },
      cluster: p.child('cluster').ref,
      create_time: p.child('create_time').ref,
      details: p.child('details').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_high_availability: p.child('enable_high_availability').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      nat_gateway_ip: p.child('nat_gateway_ip').ref,
      project: p.child('project').ref,
      router: p.child('router').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
      vpc: p.child('vpc').ref,
    },
    edgenetwork_network(name, block): {
      local p = path(['google_edgenetwork_network', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_edgenetwork_network: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                mtu: build.template(std.get(block, 'mtu', null, true)),
                network_id: build.template(block.network_id),
                zone: build.template(block.zone),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      mtu: p.child('mtu').ref,
      name: p.child('name').ref,
      network_id: p.child('network_id').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
      zone: p.child('zone').ref,
    },
    edgenetwork_subnet(name, block): {
      local p = path(['google_edgenetwork_subnet', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_edgenetwork_subnet: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                ipv4_cidr: build.template(std.get(block, 'ipv4_cidr', null, true)),
                ipv6_cidr: build.template(std.get(block, 'ipv6_cidr', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                network: build.template(block.network),
                subnet_id: build.template(block.subnet_id),
                zone: build.template(block.zone),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      ipv4_cidr: p.child('ipv4_cidr').ref,
      ipv6_cidr: p.child('ipv6_cidr').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      subnet_id: p.child('subnet_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
      vlan_id: p.child('vlan_id').ref,
      zone: p.child('zone').ref,
    },
    endpoints_service(name, block): {
      local p = path(['google_endpoints_service', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_endpoints_service: {
              [name]: std.prune({
                grpc_config: build.template(std.get(block, 'grpc_config', null, true)),
                openapi_config: build.template(std.get(block, 'openapi_config', null, true)),
                protoc_output_base64: build.template(std.get(block, 'protoc_output_base64', null, true)),
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      apis: p.child('apis').ref,
      config_id: p.child('config_id').ref,
      dns_address: p.child('dns_address').ref,
      endpoints: p.child('endpoints').ref,
      grpc_config: p.child('grpc_config').ref,
      id: p.child('id').ref,
      openapi_config: p.child('openapi_config').ref,
      project: p.child('project').ref,
      protoc_output_base64: p.child('protoc_output_base64').ref,
      service_name: p.child('service_name').ref,
    },
    endpoints_service_consumers_iam_binding(name, block): {
      local p = path(['google_endpoints_service_consumers_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_endpoints_service_consumers_iam_binding: {
              [name]: std.prune({
                consumer_project: build.template(block.consumer_project),
                members: build.template(block.members),
                role: build.template(block.role),
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      consumer_project: p.child('consumer_project').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
      service_name: p.child('service_name').ref,
    },
    endpoints_service_consumers_iam_member(name, block): {
      local p = path(['google_endpoints_service_consumers_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_endpoints_service_consumers_iam_member: {
              [name]: std.prune({
                consumer_project: build.template(block.consumer_project),
                member: build.template(block.member),
                role: build.template(block.role),
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      consumer_project: p.child('consumer_project').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
      service_name: p.child('service_name').ref,
    },
    endpoints_service_consumers_iam_policy(name, block): {
      local p = path(['google_endpoints_service_consumers_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_endpoints_service_consumers_iam_policy: {
              [name]: std.prune({
                consumer_project: build.template(block.consumer_project),
                policy_data: build.template(block.policy_data),
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      consumer_project: p.child('consumer_project').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      service_name: p.child('service_name').ref,
    },
    endpoints_service_iam_binding(name, block): {
      local p = path(['google_endpoints_service_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_endpoints_service_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
      service_name: p.child('service_name').ref,
    },
    endpoints_service_iam_member(name, block): {
      local p = path(['google_endpoints_service_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_endpoints_service_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
      service_name: p.child('service_name').ref,
    },
    endpoints_service_iam_policy(name, block): {
      local p = path(['google_endpoints_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_endpoints_service_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      service_name: p.child('service_name').ref,
    },
    essential_contacts_contact(name, block): {
      local p = path(['google_essential_contacts_contact', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_essential_contacts_contact: {
              [name]: std.prune({
                email: build.template(block.email),
                language_tag: build.template(block.language_tag),
                notification_category_subscriptions: build.template(block.notification_category_subscriptions),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      email: p.child('email').ref,
      id: p.child('id').ref,
      language_tag: p.child('language_tag').ref,
      name: p.child('name').ref,
      notification_category_subscriptions: p.child('notification_category_subscriptions').ref,
      parent: p.child('parent').ref,
    },
    eventarc_channel(name, block): {
      local p = path(['google_eventarc_channel', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_eventarc_channel: {
              [name]: std.prune({
                crypto_key_name: build.template(std.get(block, 'crypto_key_name', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                third_party_provider: build.template(std.get(block, 'third_party_provider', null, true)),
              }),
            },
          },
        },
      },
      activation_token: p.child('activation_token').ref,
      create_time: p.child('create_time').ref,
      crypto_key_name: p.child('crypto_key_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      pubsub_topic: p.child('pubsub_topic').ref,
      state: p.child('state').ref,
      third_party_provider: p.child('third_party_provider').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    eventarc_google_channel_config(name, block): {
      local p = path(['google_eventarc_google_channel_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_eventarc_google_channel_config: {
              [name]: std.prune({
                crypto_key_name: build.template(std.get(block, 'crypto_key_name', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      crypto_key_name: p.child('crypto_key_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      update_time: p.child('update_time').ref,
    },
    eventarc_trigger(name, block): {
      local p = path(['google_eventarc_trigger', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_eventarc_trigger: {
              [name]: std.prune({
                channel: build.template(std.get(block, 'channel', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                service_account: build.template(std.get(block, 'service_account', null, true)),
              }),
            },
          },
        },
      },
      channel: p.child('channel').ref,
      conditions: p.child('conditions').ref,
      create_time: p.child('create_time').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      event_data_content_type: p.child('event_data_content_type').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_account: p.child('service_account').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    filestore_backup(name, block): {
      local p = path(['google_filestore_backup', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_filestore_backup: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                source_file_share: build.template(block.source_file_share),
                source_instance: build.template(block.source_instance),
              }),
            },
          },
        },
      },
      capacity_gb: p.child('capacity_gb').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      download_bytes: p.child('download_bytes').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      source_file_share: p.child('source_file_share').ref,
      source_instance: p.child('source_instance').ref,
      source_instance_tier: p.child('source_instance_tier').ref,
      state: p.child('state').ref,
      storage_bytes: p.child('storage_bytes').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    filestore_instance(name, block): {
      local p = path(['google_filestore_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_filestore_instance: {
              [name]: std.prune({
                deletion_protection_enabled: build.template(std.get(block, 'deletion_protection_enabled', null, true)),
                deletion_protection_reason: build.template(std.get(block, 'deletion_protection_reason', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                kms_key_name: build.template(std.get(block, 'kms_key_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                tier: build.template(block.tier),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      deletion_protection_enabled: p.child('deletion_protection_enabled').ref,
      deletion_protection_reason: p.child('deletion_protection_reason').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      tier: p.child('tier').ref,
      zone: p.child('zone').ref,
    },
    filestore_snapshot(name, block): {
      local p = path(['google_filestore_snapshot', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_filestore_snapshot: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                instance: build.template(block.instance),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      filesystem_used_bytes: p.child('filesystem_used_bytes').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    firebase_app_check_app_attest_config(name, block): {
      local p = path(['google_firebase_app_check_app_attest_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firebase_app_check_app_attest_config: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      token_ttl: p.child('token_ttl').ref,
    },
    firebase_app_check_debug_token(name, block): {
      local p = path(['google_firebase_app_check_debug_token', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firebase_app_check_debug_token: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                display_name: build.template(block.display_name),
                token: build.template(block.token),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      debug_token_id: p.child('debug_token_id').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      token: p.child('token').ref,
    },
    firebase_app_check_device_check_config(name, block): {
      local p = path(['google_firebase_app_check_device_check_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firebase_app_check_device_check_config: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                key_id: build.template(block.key_id),
                private_key: build.template(block.private_key),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      id: p.child('id').ref,
      key_id: p.child('key_id').ref,
      name: p.child('name').ref,
      private_key: p.child('private_key').ref,
      private_key_set: p.child('private_key_set').ref,
      project: p.child('project').ref,
      token_ttl: p.child('token_ttl').ref,
    },
    firebase_app_check_play_integrity_config(name, block): {
      local p = path(['google_firebase_app_check_play_integrity_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firebase_app_check_play_integrity_config: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      token_ttl: p.child('token_ttl').ref,
    },
    firebase_app_check_recaptcha_enterprise_config(name, block): {
      local p = path(['google_firebase_app_check_recaptcha_enterprise_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firebase_app_check_recaptcha_enterprise_config: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                site_key: build.template(block.site_key),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      site_key: p.child('site_key').ref,
      token_ttl: p.child('token_ttl').ref,
    },
    firebase_app_check_recaptcha_v3_config(name, block): {
      local p = path(['google_firebase_app_check_recaptcha_v3_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firebase_app_check_recaptcha_v3_config: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                site_secret: build.template(block.site_secret),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      site_secret: p.child('site_secret').ref,
      site_secret_set: p.child('site_secret_set').ref,
      token_ttl: p.child('token_ttl').ref,
    },
    firebase_app_check_service_config(name, block): {
      local p = path(['google_firebase_app_check_service_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firebase_app_check_service_config: {
              [name]: std.prune({
                enforcement_mode: build.template(std.get(block, 'enforcement_mode', null, true)),
                service_id: build.template(block.service_id),
              }),
            },
          },
        },
      },
      enforcement_mode: p.child('enforcement_mode').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_id: p.child('service_id').ref,
    },
    firebaserules_release(name, block): {
      local p = path(['google_firebaserules_release', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firebaserules_release: {
              [name]: std.prune({
                name: build.template(block.name),
                ruleset_name: build.template(block.ruleset_name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      disabled: p.child('disabled').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      ruleset_name: p.child('ruleset_name').ref,
      update_time: p.child('update_time').ref,
    },
    firebaserules_ruleset(name, block): {
      local p = path(['google_firebaserules_ruleset', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firebaserules_ruleset: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      id: p.child('id').ref,
      metadata: p.child('metadata').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    firestore_backup_schedule(name, block): {
      local p = path(['google_firestore_backup_schedule', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firestore_backup_schedule: {
              [name]: std.prune({
                database: build.template(std.get(block, 'database', null, true)),
                retention: build.template(block.retention),
              }),
            },
          },
        },
      },
      database: p.child('database').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      retention: p.child('retention').ref,
    },
    firestore_database(name, block): {
      local p = path(['google_firestore_database', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firestore_database: {
              [name]: std.prune({
                deletion_policy: build.template(std.get(block, 'deletion_policy', null, true)),
                location_id: build.template(block.location_id),
                name: build.template(block.name),
                point_in_time_recovery_enablement: build.template(std.get(block, 'point_in_time_recovery_enablement', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      app_engine_integration_mode: p.child('app_engine_integration_mode').ref,
      concurrency_mode: p.child('concurrency_mode').ref,
      create_time: p.child('create_time').ref,
      delete_protection_state: p.child('delete_protection_state').ref,
      deletion_policy: p.child('deletion_policy').ref,
      earliest_version_time: p.child('earliest_version_time').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      key_prefix: p.child('key_prefix').ref,
      location_id: p.child('location_id').ref,
      name: p.child('name').ref,
      point_in_time_recovery_enablement: p.child('point_in_time_recovery_enablement').ref,
      project: p.child('project').ref,
      type: p.child('type').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      version_retention_period: p.child('version_retention_period').ref,
    },
    firestore_document(name, block): {
      local p = path(['google_firestore_document', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firestore_document: {
              [name]: std.prune({
                collection: build.template(block.collection),
                database: build.template(std.get(block, 'database', null, true)),
                document_id: build.template(block.document_id),
                fields: build.template(block.fields),
              }),
            },
          },
        },
      },
      collection: p.child('collection').ref,
      create_time: p.child('create_time').ref,
      database: p.child('database').ref,
      document_id: p.child('document_id').ref,
      fields: p.child('fields').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      path: p.child('path').ref,
      project: p.child('project').ref,
      update_time: p.child('update_time').ref,
    },
    firestore_field(name, block): {
      local p = path(['google_firestore_field', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firestore_field: {
              [name]: std.prune({
                collection: build.template(block.collection),
                database: build.template(std.get(block, 'database', null, true)),
                field: build.template(block.field),
              }),
            },
          },
        },
      },
      collection: p.child('collection').ref,
      database: p.child('database').ref,
      field: p.child('field').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    firestore_index(name, block): {
      local p = path(['google_firestore_index', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_firestore_index: {
              [name]: std.prune({
                api_scope: build.template(std.get(block, 'api_scope', null, true)),
                collection: build.template(block.collection),
                database: build.template(std.get(block, 'database', null, true)),
                query_scope: build.template(std.get(block, 'query_scope', null, true)),
              }),
            },
          },
        },
      },
      api_scope: p.child('api_scope').ref,
      collection: p.child('collection').ref,
      database: p.child('database').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      query_scope: p.child('query_scope').ref,
    },
    folder(name, block): {
      local p = path(['google_folder', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_folder: {
              [name]: std.prune({
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                display_name: build.template(block.display_name),
                parent: build.template(block.parent),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      deletion_protection: p.child('deletion_protection').ref,
      display_name: p.child('display_name').ref,
      folder_id: p.child('folder_id').ref,
      id: p.child('id').ref,
      lifecycle_state: p.child('lifecycle_state').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      tags: p.child('tags').ref,
    },
    folder_access_approval_settings(name, block): {
      local p = path(['google_folder_access_approval_settings', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_folder_access_approval_settings: {
              [name]: std.prune({
                active_key_version: build.template(std.get(block, 'active_key_version', null, true)),
                folder_id: build.template(block.folder_id),
              }),
            },
          },
        },
      },
      active_key_version: p.child('active_key_version').ref,
      ancestor_has_active_key_version: p.child('ancestor_has_active_key_version').ref,
      enrolled_ancestor: p.child('enrolled_ancestor').ref,
      folder_id: p.child('folder_id').ref,
      id: p.child('id').ref,
      invalid_key_version: p.child('invalid_key_version').ref,
      name: p.child('name').ref,
      notification_emails: p.child('notification_emails').ref,
    },
    folder_iam_audit_config(name, block): {
      local p = path(['google_folder_iam_audit_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_folder_iam_audit_config: {
              [name]: std.prune({
                folder: build.template(block.folder),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      service: p.child('service').ref,
    },
    folder_iam_binding(name, block): {
      local p = path(['google_folder_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_folder_iam_binding: {
              [name]: std.prune({
                folder: build.template(block.folder),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
    },
    folder_iam_member(name, block): {
      local p = path(['google_folder_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_folder_iam_member: {
              [name]: std.prune({
                folder: build.template(block.folder),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
    },
    folder_iam_policy(name, block): {
      local p = path(['google_folder_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_folder_iam_policy: {
              [name]: std.prune({
                folder: build.template(block.folder),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    folder_organization_policy(name, block): {
      local p = path(['google_folder_organization_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_folder_organization_policy: {
              [name]: std.prune({
                constraint: build.template(block.constraint),
                folder: build.template(block.folder),
              }),
            },
          },
        },
      },
      constraint: p.child('constraint').ref,
      etag: p.child('etag').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      update_time: p.child('update_time').ref,
      version: p.child('version').ref,
    },
    gke_backup_backup_plan(name, block): {
      local p = path(['google_gke_backup_backup_plan', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_backup_backup_plan: {
              [name]: std.prune({
                cluster: build.template(block.cluster),
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      cluster: p.child('cluster').ref,
      deactivated: p.child('deactivated').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      protected_pod_count: p.child('protected_pod_count').ref,
      state: p.child('state').ref,
      state_reason: p.child('state_reason').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
    },
    gke_backup_backup_plan_iam_binding(name, block): {
      local p = path(['google_gke_backup_backup_plan_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_backup_backup_plan_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    gke_backup_backup_plan_iam_member(name, block): {
      local p = path(['google_gke_backup_backup_plan_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_backup_backup_plan_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    gke_backup_backup_plan_iam_policy(name, block): {
      local p = path(['google_gke_backup_backup_plan_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_backup_backup_plan_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    gke_backup_restore_plan(name, block): {
      local p = path(['google_gke_backup_restore_plan', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_backup_restore_plan: {
              [name]: std.prune({
                backup_plan: build.template(block.backup_plan),
                cluster: build.template(block.cluster),
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      backup_plan: p.child('backup_plan').ref,
      cluster: p.child('cluster').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      state_reason: p.child('state_reason').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
    },
    gke_backup_restore_plan_iam_binding(name, block): {
      local p = path(['google_gke_backup_restore_plan_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_backup_restore_plan_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    gke_backup_restore_plan_iam_member(name, block): {
      local p = path(['google_gke_backup_restore_plan_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_backup_restore_plan_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    gke_backup_restore_plan_iam_policy(name, block): {
      local p = path(['google_gke_backup_restore_plan_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_backup_restore_plan_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    gke_hub_feature(name, block): {
      local p = path(['google_gke_hub_feature', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_feature: {
              [name]: std.prune({
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      resource_state: p.child('resource_state').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    gke_hub_feature_iam_binding(name, block): {
      local p = path(['google_gke_hub_feature_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_feature_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    gke_hub_feature_iam_member(name, block): {
      local p = path(['google_gke_hub_feature_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_feature_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    gke_hub_feature_iam_policy(name, block): {
      local p = path(['google_gke_hub_feature_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_feature_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    gke_hub_feature_membership(name, block): {
      local p = path(['google_gke_hub_feature_membership', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_feature_membership: {
              [name]: std.prune({
                feature: build.template(block.feature),
                location: build.template(block.location),
                membership: build.template(block.membership),
                membership_location: build.template(std.get(block, 'membership_location', null, true)),
              }),
            },
          },
        },
      },
      feature: p.child('feature').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      membership: p.child('membership').ref,
      membership_location: p.child('membership_location').ref,
      project: p.child('project').ref,
    },
    gke_hub_fleet(name, block): {
      local p = path(['google_gke_hub_fleet', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_fleet: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    gke_hub_membership(name, block): {
      local p = path(['google_gke_hub_membership', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_membership: {
              [name]: std.prune({
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                membership_id: build.template(block.membership_id),
              }),
            },
          },
        },
      },
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      membership_id: p.child('membership_id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    gke_hub_membership_binding(name, block): {
      local p = path(['google_gke_hub_membership_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_membership_binding: {
              [name]: std.prune({
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                membership_binding_id: build.template(block.membership_binding_id),
                membership_id: build.template(block.membership_id),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      membership_binding_id: p.child('membership_binding_id').ref,
      membership_id: p.child('membership_id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      scope: p.child('scope').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    gke_hub_membership_iam_binding(name, block): {
      local p = path(['google_gke_hub_membership_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_membership_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                membership_id: build.template(block.membership_id),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      membership_id: p.child('membership_id').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    gke_hub_membership_iam_member(name, block): {
      local p = path(['google_gke_hub_membership_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_membership_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                membership_id: build.template(block.membership_id),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      membership_id: p.child('membership_id').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    gke_hub_membership_iam_policy(name, block): {
      local p = path(['google_gke_hub_membership_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_membership_iam_policy: {
              [name]: std.prune({
                membership_id: build.template(block.membership_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      membership_id: p.child('membership_id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    gke_hub_namespace(name, block): {
      local p = path(['google_gke_hub_namespace', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_namespace: {
              [name]: std.prune({
                labels: build.template(std.get(block, 'labels', null, true)),
                namespace_labels: build.template(std.get(block, 'namespace_labels', null, true)),
                scope: build.template(block.scope),
                scope_id: build.template(block.scope_id),
                scope_namespace_id: build.template(block.scope_namespace_id),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      namespace_labels: p.child('namespace_labels').ref,
      project: p.child('project').ref,
      scope: p.child('scope').ref,
      scope_id: p.child('scope_id').ref,
      scope_namespace_id: p.child('scope_namespace_id').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    gke_hub_scope(name, block): {
      local p = path(['google_gke_hub_scope', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_scope: {
              [name]: std.prune({
                labels: build.template(std.get(block, 'labels', null, true)),
                namespace_labels: build.template(std.get(block, 'namespace_labels', null, true)),
                scope_id: build.template(block.scope_id),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      namespace_labels: p.child('namespace_labels').ref,
      project: p.child('project').ref,
      scope_id: p.child('scope_id').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    gke_hub_scope_iam_binding(name, block): {
      local p = path(['google_gke_hub_scope_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_scope_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                scope_id: build.template(block.scope_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      scope_id: p.child('scope_id').ref,
    },
    gke_hub_scope_iam_member(name, block): {
      local p = path(['google_gke_hub_scope_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_scope_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                scope_id: build.template(block.scope_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      scope_id: p.child('scope_id').ref,
    },
    gke_hub_scope_iam_policy(name, block): {
      local p = path(['google_gke_hub_scope_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_scope_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                scope_id: build.template(block.scope_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      scope_id: p.child('scope_id').ref,
    },
    gke_hub_scope_rbac_role_binding(name, block): {
      local p = path(['google_gke_hub_scope_rbac_role_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gke_hub_scope_rbac_role_binding: {
              [name]: std.prune({
                group: build.template(std.get(block, 'group', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                scope_id: build.template(block.scope_id),
                scope_rbac_role_binding_id: build.template(block.scope_rbac_role_binding_id),
                user: build.template(std.get(block, 'user', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      effective_labels: p.child('effective_labels').ref,
      group: p.child('group').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      scope_id: p.child('scope_id').ref,
      scope_rbac_role_binding_id: p.child('scope_rbac_role_binding_id').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      user: p.child('user').ref,
    },
    gkeonprem_bare_metal_admin_cluster(name, block): {
      local p = path(['google_gkeonprem_bare_metal_admin_cluster', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gkeonprem_bare_metal_admin_cluster: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                bare_metal_version: build.template(std.get(block, 'bare_metal_version', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      bare_metal_version: p.child('bare_metal_version').ref,
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      description: p.child('description').ref,
      effective_annotations: p.child('effective_annotations').ref,
      endpoint: p.child('endpoint').ref,
      etag: p.child('etag').ref,
      fleet: p.child('fleet').ref,
      id: p.child('id').ref,
      local_name: p.child('local_name').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      state: p.child('state').ref,
      status: p.child('status').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      validation_check: p.child('validation_check').ref,
    },
    gkeonprem_bare_metal_cluster(name, block): {
      local p = path(['google_gkeonprem_bare_metal_cluster', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gkeonprem_bare_metal_cluster: {
              [name]: std.prune({
                admin_cluster_membership: build.template(block.admin_cluster_membership),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                bare_metal_version: build.template(block.bare_metal_version),
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      admin_cluster_membership: p.child('admin_cluster_membership').ref,
      annotations: p.child('annotations').ref,
      bare_metal_version: p.child('bare_metal_version').ref,
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      description: p.child('description').ref,
      effective_annotations: p.child('effective_annotations').ref,
      endpoint: p.child('endpoint').ref,
      etag: p.child('etag').ref,
      fleet: p.child('fleet').ref,
      id: p.child('id').ref,
      local_name: p.child('local_name').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      state: p.child('state').ref,
      status: p.child('status').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      validation_check: p.child('validation_check').ref,
    },
    gkeonprem_bare_metal_node_pool(name, block): {
      local p = path(['google_gkeonprem_bare_metal_node_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gkeonprem_bare_metal_node_pool: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                bare_metal_cluster: build.template(block.bare_metal_cluster),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      bare_metal_cluster: p.child('bare_metal_cluster').ref,
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      display_name: p.child('display_name').ref,
      effective_annotations: p.child('effective_annotations').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      state: p.child('state').ref,
      status: p.child('status').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    gkeonprem_vmware_cluster(name, block): {
      local p = path(['google_gkeonprem_vmware_cluster', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gkeonprem_vmware_cluster: {
              [name]: std.prune({
                admin_cluster_membership: build.template(block.admin_cluster_membership),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                disable_bundled_ingress: build.template(std.get(block, 'disable_bundled_ingress', null, true)),
                enable_control_plane_v2: build.template(std.get(block, 'enable_control_plane_v2', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                on_prem_version: build.template(block.on_prem_version),
              }),
            },
          },
        },
      },
      admin_cluster_membership: p.child('admin_cluster_membership').ref,
      annotations: p.child('annotations').ref,
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      description: p.child('description').ref,
      disable_bundled_ingress: p.child('disable_bundled_ingress').ref,
      effective_annotations: p.child('effective_annotations').ref,
      enable_control_plane_v2: p.child('enable_control_plane_v2').ref,
      endpoint: p.child('endpoint').ref,
      etag: p.child('etag').ref,
      fleet: p.child('fleet').ref,
      id: p.child('id').ref,
      local_name: p.child('local_name').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      on_prem_version: p.child('on_prem_version').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      state: p.child('state').ref,
      status: p.child('status').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      validation_check: p.child('validation_check').ref,
      vm_tracking_enabled: p.child('vm_tracking_enabled').ref,
    },
    gkeonprem_vmware_node_pool(name, block): {
      local p = path(['google_gkeonprem_vmware_node_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_gkeonprem_vmware_node_pool: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                vmware_cluster: build.template(block.vmware_cluster),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      display_name: p.child('display_name').ref,
      effective_annotations: p.child('effective_annotations').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      on_prem_version: p.child('on_prem_version').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      state: p.child('state').ref,
      status: p.child('status').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      vmware_cluster: p.child('vmware_cluster').ref,
    },
    healthcare_consent_store(name, block): {
      local p = path(['google_healthcare_consent_store', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_consent_store: {
              [name]: std.prune({
                dataset: build.template(block.dataset),
                default_consent_ttl: build.template(std.get(block, 'default_consent_ttl', null, true)),
                enable_consent_create_on_update: build.template(std.get(block, 'enable_consent_create_on_update', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      dataset: p.child('dataset').ref,
      default_consent_ttl: p.child('default_consent_ttl').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_consent_create_on_update: p.child('enable_consent_create_on_update').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    healthcare_consent_store_iam_binding(name, block): {
      local p = path(['google_healthcare_consent_store_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_consent_store_iam_binding: {
              [name]: std.prune({
                consent_store_id: build.template(block.consent_store_id),
                dataset: build.template(block.dataset),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      consent_store_id: p.child('consent_store_id').ref,
      dataset: p.child('dataset').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
    },
    healthcare_consent_store_iam_member(name, block): {
      local p = path(['google_healthcare_consent_store_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_consent_store_iam_member: {
              [name]: std.prune({
                consent_store_id: build.template(block.consent_store_id),
                dataset: build.template(block.dataset),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      consent_store_id: p.child('consent_store_id').ref,
      dataset: p.child('dataset').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
    },
    healthcare_consent_store_iam_policy(name, block): {
      local p = path(['google_healthcare_consent_store_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_consent_store_iam_policy: {
              [name]: std.prune({
                consent_store_id: build.template(block.consent_store_id),
                dataset: build.template(block.dataset),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      consent_store_id: p.child('consent_store_id').ref,
      dataset: p.child('dataset').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    healthcare_dataset(name, block): {
      local p = path(['google_healthcare_dataset', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_dataset: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      time_zone: p.child('time_zone').ref,
    },
    healthcare_dataset_iam_binding(name, block): {
      local p = path(['google_healthcare_dataset_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_dataset_iam_binding: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      dataset_id: p.child('dataset_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
    },
    healthcare_dataset_iam_member(name, block): {
      local p = path(['google_healthcare_dataset_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_dataset_iam_member: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      dataset_id: p.child('dataset_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
    },
    healthcare_dataset_iam_policy(name, block): {
      local p = path(['google_healthcare_dataset_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_dataset_iam_policy: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      dataset_id: p.child('dataset_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    healthcare_dicom_store(name, block): {
      local p = path(['google_healthcare_dicom_store', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_dicom_store: {
              [name]: std.prune({
                dataset: build.template(block.dataset),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      dataset: p.child('dataset').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      self_link: p.child('self_link').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    healthcare_dicom_store_iam_binding(name, block): {
      local p = path(['google_healthcare_dicom_store_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_dicom_store_iam_binding: {
              [name]: std.prune({
                dicom_store_id: build.template(block.dicom_store_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      dicom_store_id: p.child('dicom_store_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
    },
    healthcare_dicom_store_iam_member(name, block): {
      local p = path(['google_healthcare_dicom_store_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_dicom_store_iam_member: {
              [name]: std.prune({
                dicom_store_id: build.template(block.dicom_store_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      dicom_store_id: p.child('dicom_store_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
    },
    healthcare_dicom_store_iam_policy(name, block): {
      local p = path(['google_healthcare_dicom_store_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_dicom_store_iam_policy: {
              [name]: std.prune({
                dicom_store_id: build.template(block.dicom_store_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      dicom_store_id: p.child('dicom_store_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    healthcare_fhir_store(name, block): {
      local p = path(['google_healthcare_fhir_store', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_fhir_store: {
              [name]: std.prune({
                dataset: build.template(block.dataset),
                default_search_handling_strict: build.template(std.get(block, 'default_search_handling_strict', null, true)),
                disable_referential_integrity: build.template(std.get(block, 'disable_referential_integrity', null, true)),
                disable_resource_versioning: build.template(std.get(block, 'disable_resource_versioning', null, true)),
                enable_history_import: build.template(std.get(block, 'enable_history_import', null, true)),
                enable_update_create: build.template(std.get(block, 'enable_update_create', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      complex_data_type_reference_parsing: p.child('complex_data_type_reference_parsing').ref,
      dataset: p.child('dataset').ref,
      default_search_handling_strict: p.child('default_search_handling_strict').ref,
      disable_referential_integrity: p.child('disable_referential_integrity').ref,
      disable_resource_versioning: p.child('disable_resource_versioning').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_history_import: p.child('enable_history_import').ref,
      enable_update_create: p.child('enable_update_create').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      self_link: p.child('self_link').ref,
      terraform_labels: p.child('terraform_labels').ref,
      version: p.child('version').ref,
    },
    healthcare_fhir_store_iam_binding(name, block): {
      local p = path(['google_healthcare_fhir_store_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_fhir_store_iam_binding: {
              [name]: std.prune({
                fhir_store_id: build.template(block.fhir_store_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      fhir_store_id: p.child('fhir_store_id').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
    },
    healthcare_fhir_store_iam_member(name, block): {
      local p = path(['google_healthcare_fhir_store_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_fhir_store_iam_member: {
              [name]: std.prune({
                fhir_store_id: build.template(block.fhir_store_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      fhir_store_id: p.child('fhir_store_id').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
    },
    healthcare_fhir_store_iam_policy(name, block): {
      local p = path(['google_healthcare_fhir_store_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_fhir_store_iam_policy: {
              [name]: std.prune({
                fhir_store_id: build.template(block.fhir_store_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      fhir_store_id: p.child('fhir_store_id').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    healthcare_hl7_v2_store(name, block): {
      local p = path(['google_healthcare_hl7_v2_store', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_hl7_v2_store: {
              [name]: std.prune({
                dataset: build.template(block.dataset),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                reject_duplicate_message: build.template(std.get(block, 'reject_duplicate_message', null, true)),
              }),
            },
          },
        },
      },
      dataset: p.child('dataset').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      reject_duplicate_message: p.child('reject_duplicate_message').ref,
      self_link: p.child('self_link').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    healthcare_hl7_v2_store_iam_binding(name, block): {
      local p = path(['google_healthcare_hl7_v2_store_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_hl7_v2_store_iam_binding: {
              [name]: std.prune({
                hl7_v2_store_id: build.template(block.hl7_v2_store_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      hl7_v2_store_id: p.child('hl7_v2_store_id').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
    },
    healthcare_hl7_v2_store_iam_member(name, block): {
      local p = path(['google_healthcare_hl7_v2_store_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_hl7_v2_store_iam_member: {
              [name]: std.prune({
                hl7_v2_store_id: build.template(block.hl7_v2_store_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      hl7_v2_store_id: p.child('hl7_v2_store_id').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
    },
    healthcare_hl7_v2_store_iam_policy(name, block): {
      local p = path(['google_healthcare_hl7_v2_store_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_hl7_v2_store_iam_policy: {
              [name]: std.prune({
                hl7_v2_store_id: build.template(block.hl7_v2_store_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      hl7_v2_store_id: p.child('hl7_v2_store_id').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    healthcare_pipeline_job(name, block): {
      local p = path(['google_healthcare_pipeline_job', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_pipeline_job: {
              [name]: std.prune({
                dataset: build.template(block.dataset),
                disable_lineage: build.template(std.get(block, 'disable_lineage', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      dataset: p.child('dataset').ref,
      disable_lineage: p.child('disable_lineage').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      self_link: p.child('self_link').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    healthcare_workspace(name, block): {
      local p = path(['google_healthcare_workspace', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_healthcare_workspace: {
              [name]: std.prune({
                dataset: build.template(block.dataset),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      dataset: p.child('dataset').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    iam_access_boundary_policy(name, block): {
      local p = path(['google_iam_access_boundary_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iam_access_boundary_policy: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                name: build.template(block.name),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
    },
    iam_deny_policy(name, block): {
      local p = path(['google_iam_deny_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iam_deny_policy: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                name: build.template(block.name),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
    },
    iam_workforce_pool(name, block): {
      local p = path(['google_iam_workforce_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iam_workforce_pool: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                location: build.template(block.location),
                parent: build.template(block.parent),
                session_duration: build.template(std.get(block, 'session_duration', null, true)),
                workforce_pool_id: build.template(block.workforce_pool_id),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      disabled: p.child('disabled').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      session_duration: p.child('session_duration').ref,
      state: p.child('state').ref,
      workforce_pool_id: p.child('workforce_pool_id').ref,
    },
    iam_workforce_pool_provider(name, block): {
      local p = path(['google_iam_workforce_pool_provider', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iam_workforce_pool_provider: {
              [name]: std.prune({
                attribute_condition: build.template(std.get(block, 'attribute_condition', null, true)),
                attribute_mapping: build.template(std.get(block, 'attribute_mapping', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                location: build.template(block.location),
                provider_id: build.template(block.provider_id),
                workforce_pool_id: build.template(block.workforce_pool_id),
              }),
            },
          },
        },
      },
      attribute_condition: p.child('attribute_condition').ref,
      attribute_mapping: p.child('attribute_mapping').ref,
      description: p.child('description').ref,
      disabled: p.child('disabled').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      provider_id: p.child('provider_id').ref,
      state: p.child('state').ref,
      workforce_pool_id: p.child('workforce_pool_id').ref,
    },
    iam_workload_identity_pool(name, block): {
      local p = path(['google_iam_workload_identity_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iam_workload_identity_pool: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                workload_identity_pool_id: build.template(block.workload_identity_pool_id),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      disabled: p.child('disabled').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      workload_identity_pool_id: p.child('workload_identity_pool_id').ref,
    },
    iam_workload_identity_pool_provider(name, block): {
      local p = path(['google_iam_workload_identity_pool_provider', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iam_workload_identity_pool_provider: {
              [name]: std.prune({
                attribute_condition: build.template(std.get(block, 'attribute_condition', null, true)),
                attribute_mapping: build.template(std.get(block, 'attribute_mapping', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                workload_identity_pool_id: build.template(block.workload_identity_pool_id),
                workload_identity_pool_provider_id: build.template(block.workload_identity_pool_provider_id),
              }),
            },
          },
        },
      },
      attribute_condition: p.child('attribute_condition').ref,
      attribute_mapping: p.child('attribute_mapping').ref,
      description: p.child('description').ref,
      disabled: p.child('disabled').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      workload_identity_pool_id: p.child('workload_identity_pool_id').ref,
      workload_identity_pool_provider_id: p.child('workload_identity_pool_provider_id').ref,
    },
    iap_app_engine_service_iam_binding(name, block): {
      local p = path(['google_iap_app_engine_service_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_app_engine_service_iam_binding: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                members: build.template(block.members),
                role: build.template(block.role),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      service: p.child('service').ref,
    },
    iap_app_engine_service_iam_member(name, block): {
      local p = path(['google_iap_app_engine_service_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_app_engine_service_iam_member: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                member: build.template(block.member),
                role: build.template(block.role),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      service: p.child('service').ref,
    },
    iap_app_engine_service_iam_policy(name, block): {
      local p = path(['google_iap_app_engine_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_app_engine_service_iam_policy: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                policy_data: build.template(block.policy_data),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
    },
    iap_app_engine_version_iam_binding(name, block): {
      local p = path(['google_iap_app_engine_version_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_app_engine_version_iam_binding: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                members: build.template(block.members),
                role: build.template(block.role),
                service: build.template(block.service),
                version_id: build.template(block.version_id),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      service: p.child('service').ref,
      version_id: p.child('version_id').ref,
    },
    iap_app_engine_version_iam_member(name, block): {
      local p = path(['google_iap_app_engine_version_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_app_engine_version_iam_member: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                member: build.template(block.member),
                role: build.template(block.role),
                service: build.template(block.service),
                version_id: build.template(block.version_id),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      service: p.child('service').ref,
      version_id: p.child('version_id').ref,
    },
    iap_app_engine_version_iam_policy(name, block): {
      local p = path(['google_iap_app_engine_version_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_app_engine_version_iam_policy: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                policy_data: build.template(block.policy_data),
                service: build.template(block.service),
                version_id: build.template(block.version_id),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
      version_id: p.child('version_id').ref,
    },
    iap_brand(name, block): {
      local p = path(['google_iap_brand', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_brand: {
              [name]: std.prune({
                application_title: build.template(block.application_title),
                support_email: build.template(block.support_email),
              }),
            },
          },
        },
      },
      application_title: p.child('application_title').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      org_internal_only: p.child('org_internal_only').ref,
      project: p.child('project').ref,
      support_email: p.child('support_email').ref,
    },
    iap_client(name, block): {
      local p = path(['google_iap_client', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_client: {
              [name]: std.prune({
                brand: build.template(block.brand),
                display_name: build.template(block.display_name),
              }),
            },
          },
        },
      },
      brand: p.child('brand').ref,
      client_id: p.child('client_id').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      secret: p.child('secret').ref,
    },
    iap_tunnel_dest_group(name, block): {
      local p = path(['google_iap_tunnel_dest_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_tunnel_dest_group: {
              [name]: std.prune({
                cidrs: build.template(std.get(block, 'cidrs', null, true)),
                fqdns: build.template(std.get(block, 'fqdns', null, true)),
                group_name: build.template(block.group_name),
              }),
            },
          },
        },
      },
      cidrs: p.child('cidrs').ref,
      fqdns: p.child('fqdns').ref,
      group_name: p.child('group_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    iap_tunnel_dest_group_iam_binding(name, block): {
      local p = path(['google_iap_tunnel_dest_group_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_tunnel_dest_group_iam_binding: {
              [name]: std.prune({
                dest_group: build.template(block.dest_group),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      dest_group: p.child('dest_group').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    iap_tunnel_dest_group_iam_member(name, block): {
      local p = path(['google_iap_tunnel_dest_group_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_tunnel_dest_group_iam_member: {
              [name]: std.prune({
                dest_group: build.template(block.dest_group),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      dest_group: p.child('dest_group').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
    },
    iap_tunnel_dest_group_iam_policy(name, block): {
      local p = path(['google_iap_tunnel_dest_group_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_tunnel_dest_group_iam_policy: {
              [name]: std.prune({
                dest_group: build.template(block.dest_group),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      dest_group: p.child('dest_group').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    iap_tunnel_iam_binding(name, block): {
      local p = path(['google_iap_tunnel_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_tunnel_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    iap_tunnel_iam_member(name, block): {
      local p = path(['google_iap_tunnel_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_tunnel_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    iap_tunnel_iam_policy(name, block): {
      local p = path(['google_iap_tunnel_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_tunnel_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    iap_tunnel_instance_iam_binding(name, block): {
      local p = path(['google_iap_tunnel_instance_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_tunnel_instance_iam_binding: {
              [name]: std.prune({
                instance: build.template(block.instance),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      zone: p.child('zone').ref,
    },
    iap_tunnel_instance_iam_member(name, block): {
      local p = path(['google_iap_tunnel_instance_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_tunnel_instance_iam_member: {
              [name]: std.prune({
                instance: build.template(block.instance),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      zone: p.child('zone').ref,
    },
    iap_tunnel_instance_iam_policy(name, block): {
      local p = path(['google_iap_tunnel_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_tunnel_instance_iam_policy: {
              [name]: std.prune({
                instance: build.template(block.instance),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    iap_web_backend_service_iam_binding(name, block): {
      local p = path(['google_iap_web_backend_service_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_backend_service_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                web_backend_service: build.template(block.web_backend_service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      web_backend_service: p.child('web_backend_service').ref,
    },
    iap_web_backend_service_iam_member(name, block): {
      local p = path(['google_iap_web_backend_service_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_backend_service_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                web_backend_service: build.template(block.web_backend_service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      web_backend_service: p.child('web_backend_service').ref,
    },
    iap_web_backend_service_iam_policy(name, block): {
      local p = path(['google_iap_web_backend_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_backend_service_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                web_backend_service: build.template(block.web_backend_service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      web_backend_service: p.child('web_backend_service').ref,
    },
    iap_web_iam_binding(name, block): {
      local p = path(['google_iap_web_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    iap_web_iam_member(name, block): {
      local p = path(['google_iap_web_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    iap_web_iam_policy(name, block): {
      local p = path(['google_iap_web_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    iap_web_region_backend_service_iam_binding(name, block): {
      local p = path(['google_iap_web_region_backend_service_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_region_backend_service_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                web_region_backend_service: build.template(block.web_region_backend_service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
      web_region_backend_service: p.child('web_region_backend_service').ref,
    },
    iap_web_region_backend_service_iam_member(name, block): {
      local p = path(['google_iap_web_region_backend_service_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_region_backend_service_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                web_region_backend_service: build.template(block.web_region_backend_service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      role: p.child('role').ref,
      web_region_backend_service: p.child('web_region_backend_service').ref,
    },
    iap_web_region_backend_service_iam_policy(name, block): {
      local p = path(['google_iap_web_region_backend_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_region_backend_service_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                web_region_backend_service: build.template(block.web_region_backend_service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      web_region_backend_service: p.child('web_region_backend_service').ref,
    },
    iap_web_type_app_engine_iam_binding(name, block): {
      local p = path(['google_iap_web_type_app_engine_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_type_app_engine_iam_binding: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    iap_web_type_app_engine_iam_member(name, block): {
      local p = path(['google_iap_web_type_app_engine_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_type_app_engine_iam_member: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    iap_web_type_app_engine_iam_policy(name, block): {
      local p = path(['google_iap_web_type_app_engine_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_type_app_engine_iam_policy: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    iap_web_type_compute_iam_binding(name, block): {
      local p = path(['google_iap_web_type_compute_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_type_compute_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    iap_web_type_compute_iam_member(name, block): {
      local p = path(['google_iap_web_type_compute_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_type_compute_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    iap_web_type_compute_iam_policy(name, block): {
      local p = path(['google_iap_web_type_compute_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_iap_web_type_compute_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    identity_platform_config(name, block): {
      local p = path(['google_identity_platform_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_identity_platform_config: {
              [name]: std.prune({
                autodelete_anonymous_users: build.template(std.get(block, 'autodelete_anonymous_users', null, true)),
              }),
            },
          },
        },
      },
      authorized_domains: p.child('authorized_domains').ref,
      autodelete_anonymous_users: p.child('autodelete_anonymous_users').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    identity_platform_default_supported_idp_config(name, block): {
      local p = path(['google_identity_platform_default_supported_idp_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_identity_platform_default_supported_idp_config: {
              [name]: std.prune({
                client_id: build.template(block.client_id),
                client_secret: build.template(block.client_secret),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                idp_id: build.template(block.idp_id),
              }),
            },
          },
        },
      },
      client_id: p.child('client_id').ref,
      client_secret: p.child('client_secret').ref,
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      idp_id: p.child('idp_id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    identity_platform_inbound_saml_config(name, block): {
      local p = path(['google_identity_platform_inbound_saml_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_identity_platform_inbound_saml_config: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    identity_platform_oauth_idp_config(name, block): {
      local p = path(['google_identity_platform_oauth_idp_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_identity_platform_oauth_idp_config: {
              [name]: std.prune({
                client_id: build.template(block.client_id),
                client_secret: build.template(std.get(block, 'client_secret', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                issuer: build.template(block.issuer),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      client_id: p.child('client_id').ref,
      client_secret: p.child('client_secret').ref,
      display_name: p.child('display_name').ref,
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      issuer: p.child('issuer').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    identity_platform_tenant(name, block): {
      local p = path(['google_identity_platform_tenant', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_identity_platform_tenant: {
              [name]: std.prune({
                allow_password_signup: build.template(std.get(block, 'allow_password_signup', null, true)),
                disable_auth: build.template(std.get(block, 'disable_auth', null, true)),
                display_name: build.template(block.display_name),
                enable_email_link_signin: build.template(std.get(block, 'enable_email_link_signin', null, true)),
              }),
            },
          },
        },
      },
      allow_password_signup: p.child('allow_password_signup').ref,
      disable_auth: p.child('disable_auth').ref,
      display_name: p.child('display_name').ref,
      enable_email_link_signin: p.child('enable_email_link_signin').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    identity_platform_tenant_default_supported_idp_config(name, block): {
      local p = path(['google_identity_platform_tenant_default_supported_idp_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_identity_platform_tenant_default_supported_idp_config: {
              [name]: std.prune({
                client_id: build.template(block.client_id),
                client_secret: build.template(block.client_secret),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                idp_id: build.template(block.idp_id),
                tenant: build.template(block.tenant),
              }),
            },
          },
        },
      },
      client_id: p.child('client_id').ref,
      client_secret: p.child('client_secret').ref,
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      idp_id: p.child('idp_id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      tenant: p.child('tenant').ref,
    },
    identity_platform_tenant_inbound_saml_config(name, block): {
      local p = path(['google_identity_platform_tenant_inbound_saml_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_identity_platform_tenant_inbound_saml_config: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                name: build.template(block.name),
                tenant: build.template(block.tenant),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      tenant: p.child('tenant').ref,
    },
    identity_platform_tenant_oauth_idp_config(name, block): {
      local p = path(['google_identity_platform_tenant_oauth_idp_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_identity_platform_tenant_oauth_idp_config: {
              [name]: std.prune({
                client_id: build.template(block.client_id),
                client_secret: build.template(std.get(block, 'client_secret', null, true)),
                display_name: build.template(block.display_name),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                issuer: build.template(block.issuer),
                name: build.template(block.name),
                tenant: build.template(block.tenant),
              }),
            },
          },
        },
      },
      client_id: p.child('client_id').ref,
      client_secret: p.child('client_secret').ref,
      display_name: p.child('display_name').ref,
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      issuer: p.child('issuer').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      tenant: p.child('tenant').ref,
    },
    integration_connectors_connection(name, block): {
      local p = path(['google_integration_connectors_connection', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_integration_connectors_connection: {
              [name]: std.prune({
                connector_version: build.template(block.connector_version),
                description: build.template(std.get(block, 'description', null, true)),
                eventing_enablement_type: build.template(std.get(block, 'eventing_enablement_type', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                suspended: build.template(std.get(block, 'suspended', null, true)),
              }),
            },
          },
        },
      },
      connection_revision: p.child('connection_revision').ref,
      connector_version: p.child('connector_version').ref,
      connector_version_infra_config: p.child('connector_version_infra_config').ref,
      connector_version_launch_stage: p.child('connector_version_launch_stage').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      eventing_enablement_type: p.child('eventing_enablement_type').ref,
      eventing_runtime_data: p.child('eventing_runtime_data').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_account: p.child('service_account').ref,
      service_directory: p.child('service_directory').ref,
      status: p.child('status').ref,
      subscription_type: p.child('subscription_type').ref,
      suspended: p.child('suspended').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    integration_connectors_endpoint_attachment(name, block): {
      local p = path(['google_integration_connectors_endpoint_attachment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_integration_connectors_endpoint_attachment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                endpoint_global_access: build.template(std.get(block, 'endpoint_global_access', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                service_attachment: build.template(block.service_attachment),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      endpoint_global_access: p.child('endpoint_global_access').ref,
      endpoint_ip: p.child('endpoint_ip').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_attachment: p.child('service_attachment').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    integration_connectors_managed_zone(name, block): {
      local p = path(['google_integration_connectors_managed_zone', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_integration_connectors_managed_zone: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                dns: build.template(block.dns),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                target_project: build.template(block.target_project),
                target_vpc: build.template(block.target_vpc),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      dns: p.child('dns').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      target_project: p.child('target_project').ref,
      target_vpc: p.child('target_vpc').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    integrations_auth_config(name, block): {
      local p = path(['google_integrations_auth_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_integrations_auth_config: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                expiry_notification_duration: build.template(std.get(block, 'expiry_notification_duration', null, true)),
                location: build.template(block.location),
                override_valid_time: build.template(std.get(block, 'override_valid_time', null, true)),
                visibility: build.template(std.get(block, 'visibility', null, true)),
              }),
            },
          },
        },
      },
      certificate_id: p.child('certificate_id').ref,
      create_time: p.child('create_time').ref,
      creator_email: p.child('creator_email').ref,
      credential_type: p.child('credential_type').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      encrypted_credential: p.child('encrypted_credential').ref,
      expiry_notification_duration: p.child('expiry_notification_duration').ref,
      id: p.child('id').ref,
      last_modifier_email: p.child('last_modifier_email').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      override_valid_time: p.child('override_valid_time').ref,
      project: p.child('project').ref,
      reason: p.child('reason').ref,
      state: p.child('state').ref,
      update_time: p.child('update_time').ref,
      valid_time: p.child('valid_time').ref,
      visibility: p.child('visibility').ref,
    },
    integrations_client(name, block): {
      local p = path(['google_integrations_client', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_integrations_client: {
              [name]: std.prune({
                create_sample_integrations: build.template(std.get(block, 'create_sample_integrations', null, true)),
                location: build.template(block.location),
                run_as_service_account: build.template(std.get(block, 'run_as_service_account', null, true)),
              }),
            },
          },
        },
      },
      create_sample_integrations: p.child('create_sample_integrations').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      project: p.child('project').ref,
      run_as_service_account: p.child('run_as_service_account').ref,
    },
    kms_crypto_key(name, block): {
      local p = path(['google_kms_crypto_key', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_crypto_key: {
              [name]: std.prune({
                key_ring: build.template(block.key_ring),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                purpose: build.template(std.get(block, 'purpose', null, true)),
                rotation_period: build.template(std.get(block, 'rotation_period', null, true)),
                skip_initial_version_creation: build.template(std.get(block, 'skip_initial_version_creation', null, true)),
              }),
            },
          },
        },
      },
      crypto_key_backend: p.child('crypto_key_backend').ref,
      destroy_scheduled_duration: p.child('destroy_scheduled_duration').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      import_only: p.child('import_only').ref,
      key_ring: p.child('key_ring').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      primary: p.child('primary').ref,
      purpose: p.child('purpose').ref,
      rotation_period: p.child('rotation_period').ref,
      skip_initial_version_creation: p.child('skip_initial_version_creation').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    kms_crypto_key_iam_binding(name, block): {
      local p = path(['google_kms_crypto_key_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_crypto_key_iam_binding: {
              [name]: std.prune({
                crypto_key_id: build.template(block.crypto_key_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      crypto_key_id: p.child('crypto_key_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
    },
    kms_crypto_key_iam_member(name, block): {
      local p = path(['google_kms_crypto_key_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_crypto_key_iam_member: {
              [name]: std.prune({
                crypto_key_id: build.template(block.crypto_key_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      crypto_key_id: p.child('crypto_key_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
    },
    kms_crypto_key_iam_policy(name, block): {
      local p = path(['google_kms_crypto_key_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_crypto_key_iam_policy: {
              [name]: std.prune({
                crypto_key_id: build.template(block.crypto_key_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      crypto_key_id: p.child('crypto_key_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    kms_crypto_key_version(name, block): {
      local p = path(['google_kms_crypto_key_version', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_crypto_key_version: {
              [name]: std.prune({
                crypto_key: build.template(block.crypto_key),
              }),
            },
          },
        },
      },
      algorithm: p.child('algorithm').ref,
      attestation: p.child('attestation').ref,
      crypto_key: p.child('crypto_key').ref,
      generate_time: p.child('generate_time').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      protection_level: p.child('protection_level').ref,
      state: p.child('state').ref,
    },
    kms_ekm_connection(name, block): {
      local p = path(['google_kms_ekm_connection', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_ekm_connection: {
              [name]: std.prune({
                key_management_mode: build.template(std.get(block, 'key_management_mode', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      crypto_space_path: p.child('crypto_space_path').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      key_management_mode: p.child('key_management_mode').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    kms_ekm_connection_iam_binding(name, block): {
      local p = path(['google_kms_ekm_connection_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_ekm_connection_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    kms_ekm_connection_iam_member(name, block): {
      local p = path(['google_kms_ekm_connection_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_ekm_connection_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    kms_ekm_connection_iam_policy(name, block): {
      local p = path(['google_kms_ekm_connection_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_ekm_connection_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    kms_key_ring(name, block): {
      local p = path(['google_kms_key_ring', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_key_ring: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    kms_key_ring_iam_binding(name, block): {
      local p = path(['google_kms_key_ring_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_key_ring_iam_binding: {
              [name]: std.prune({
                key_ring_id: build.template(block.key_ring_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      key_ring_id: p.child('key_ring_id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
    },
    kms_key_ring_iam_member(name, block): {
      local p = path(['google_kms_key_ring_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_key_ring_iam_member: {
              [name]: std.prune({
                key_ring_id: build.template(block.key_ring_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      key_ring_id: p.child('key_ring_id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
    },
    kms_key_ring_iam_policy(name, block): {
      local p = path(['google_kms_key_ring_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_key_ring_iam_policy: {
              [name]: std.prune({
                key_ring_id: build.template(block.key_ring_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      key_ring_id: p.child('key_ring_id').ref,
      policy_data: p.child('policy_data').ref,
    },
    kms_key_ring_import_job(name, block): {
      local p = path(['google_kms_key_ring_import_job', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_key_ring_import_job: {
              [name]: std.prune({
                import_job_id: build.template(block.import_job_id),
                import_method: build.template(block.import_method),
                key_ring: build.template(block.key_ring),
                protection_level: build.template(block.protection_level),
              }),
            },
          },
        },
      },
      attestation: p.child('attestation').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      import_job_id: p.child('import_job_id').ref,
      import_method: p.child('import_method').ref,
      key_ring: p.child('key_ring').ref,
      name: p.child('name').ref,
      protection_level: p.child('protection_level').ref,
      public_key: p.child('public_key').ref,
      state: p.child('state').ref,
    },
    kms_secret_ciphertext(name, block): {
      local p = path(['google_kms_secret_ciphertext', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_kms_secret_ciphertext: {
              [name]: std.prune({
                additional_authenticated_data: build.template(std.get(block, 'additional_authenticated_data', null, true)),
                crypto_key: build.template(block.crypto_key),
                plaintext: build.template(block.plaintext),
              }),
            },
          },
        },
      },
      additional_authenticated_data: p.child('additional_authenticated_data').ref,
      ciphertext: p.child('ciphertext').ref,
      crypto_key: p.child('crypto_key').ref,
      id: p.child('id').ref,
      plaintext: p.child('plaintext').ref,
    },
    logging_billing_account_bucket_config(name, block): {
      local p = path(['google_logging_billing_account_bucket_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_billing_account_bucket_config: {
              [name]: std.prune({
                billing_account: build.template(block.billing_account),
                bucket_id: build.template(block.bucket_id),
                location: build.template(block.location),
                retention_days: build.template(std.get(block, 'retention_days', null, true)),
              }),
            },
          },
        },
      },
      billing_account: p.child('billing_account').ref,
      bucket_id: p.child('bucket_id').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      lifecycle_state: p.child('lifecycle_state').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      retention_days: p.child('retention_days').ref,
    },
    logging_billing_account_exclusion(name, block): {
      local p = path(['google_logging_billing_account_exclusion', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_billing_account_exclusion: {
              [name]: std.prune({
                billing_account: build.template(block.billing_account),
                description: build.template(std.get(block, 'description', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                filter: build.template(block.filter),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      billing_account: p.child('billing_account').ref,
      description: p.child('description').ref,
      disabled: p.child('disabled').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
    },
    logging_billing_account_sink(name, block): {
      local p = path(['google_logging_billing_account_sink', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_billing_account_sink: {
              [name]: std.prune({
                billing_account: build.template(block.billing_account),
                description: build.template(std.get(block, 'description', null, true)),
                destination: build.template(block.destination),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                filter: build.template(std.get(block, 'filter', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      billing_account: p.child('billing_account').ref,
      description: p.child('description').ref,
      destination: p.child('destination').ref,
      disabled: p.child('disabled').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      writer_identity: p.child('writer_identity').ref,
    },
    logging_folder_bucket_config(name, block): {
      local p = path(['google_logging_folder_bucket_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_folder_bucket_config: {
              [name]: std.prune({
                bucket_id: build.template(block.bucket_id),
                folder: build.template(block.folder),
                location: build.template(block.location),
                retention_days: build.template(std.get(block, 'retention_days', null, true)),
              }),
            },
          },
        },
      },
      bucket_id: p.child('bucket_id').ref,
      description: p.child('description').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      lifecycle_state: p.child('lifecycle_state').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      retention_days: p.child('retention_days').ref,
    },
    logging_folder_exclusion(name, block): {
      local p = path(['google_logging_folder_exclusion', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_folder_exclusion: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                filter: build.template(block.filter),
                folder: build.template(block.folder),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      disabled: p.child('disabled').ref,
      filter: p.child('filter').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
    },
    logging_folder_settings(name, block): {
      local p = path(['google_logging_folder_settings', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_folder_settings: {
              [name]: std.prune({
                folder: build.template(block.folder),
              }),
            },
          },
        },
      },
      disable_default_sink: p.child('disable_default_sink').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      kms_service_account_id: p.child('kms_service_account_id').ref,
      logging_service_account_id: p.child('logging_service_account_id').ref,
      name: p.child('name').ref,
      storage_location: p.child('storage_location').ref,
    },
    logging_folder_sink(name, block): {
      local p = path(['google_logging_folder_sink', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_folder_sink: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                destination: build.template(block.destination),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                filter: build.template(std.get(block, 'filter', null, true)),
                folder: build.template(block.folder),
                include_children: build.template(std.get(block, 'include_children', null, true)),
                intercept_children: build.template(std.get(block, 'intercept_children', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      destination: p.child('destination').ref,
      disabled: p.child('disabled').ref,
      filter: p.child('filter').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      include_children: p.child('include_children').ref,
      intercept_children: p.child('intercept_children').ref,
      name: p.child('name').ref,
      writer_identity: p.child('writer_identity').ref,
    },
    logging_linked_dataset(name, block): {
      local p = path(['google_logging_linked_dataset', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_linked_dataset: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                description: build.template(std.get(block, 'description', null, true)),
                link_id: build.template(block.link_id),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      lifecycle_state: p.child('lifecycle_state').ref,
      link_id: p.child('link_id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
    },
    logging_log_scope(name, block): {
      local p = path(['google_logging_log_scope', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_log_scope: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                resource_names: build.template(block.resource_names),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      resource_names: p.child('resource_names').ref,
      update_time: p.child('update_time').ref,
    },
    logging_log_view(name, block): {
      local p = path(['google_logging_log_view', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_log_view: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                description: build.template(std.get(block, 'description', null, true)),
                filter: build.template(std.get(block, 'filter', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      update_time: p.child('update_time').ref,
    },
    logging_log_view_iam_binding(name, block): {
      local p = path(['google_logging_log_view_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_log_view_iam_binding: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                members: build.template(block.members),
                name: build.template(block.name),
                parent: build.template(block.parent),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      role: p.child('role').ref,
    },
    logging_log_view_iam_member(name, block): {
      local p = path(['google_logging_log_view_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_log_view_iam_member: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                member: build.template(block.member),
                name: build.template(block.name),
                parent: build.template(block.parent),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      role: p.child('role').ref,
    },
    logging_log_view_iam_policy(name, block): {
      local p = path(['google_logging_log_view_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_log_view_iam_policy: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                name: build.template(block.name),
                parent: build.template(block.parent),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      policy_data: p.child('policy_data').ref,
    },
    logging_metric(name, block): {
      local p = path(['google_logging_metric', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_metric: {
              [name]: std.prune({
                bucket_name: build.template(std.get(block, 'bucket_name', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                filter: build.template(block.filter),
                label_extractors: build.template(std.get(block, 'label_extractors', null, true)),
                name: build.template(block.name),
                value_extractor: build.template(std.get(block, 'value_extractor', null, true)),
              }),
            },
          },
        },
      },
      bucket_name: p.child('bucket_name').ref,
      description: p.child('description').ref,
      disabled: p.child('disabled').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      label_extractors: p.child('label_extractors').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      value_extractor: p.child('value_extractor').ref,
    },
    logging_organization_bucket_config(name, block): {
      local p = path(['google_logging_organization_bucket_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_organization_bucket_config: {
              [name]: std.prune({
                bucket_id: build.template(block.bucket_id),
                location: build.template(block.location),
                organization: build.template(block.organization),
                retention_days: build.template(std.get(block, 'retention_days', null, true)),
              }),
            },
          },
        },
      },
      bucket_id: p.child('bucket_id').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      lifecycle_state: p.child('lifecycle_state').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      retention_days: p.child('retention_days').ref,
    },
    logging_organization_exclusion(name, block): {
      local p = path(['google_logging_organization_exclusion', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_organization_exclusion: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                filter: build.template(block.filter),
                name: build.template(block.name),
                org_id: build.template(block.org_id),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      disabled: p.child('disabled').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      org_id: p.child('org_id').ref,
    },
    logging_organization_settings(name, block): {
      local p = path(['google_logging_organization_settings', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_organization_settings: {
              [name]: std.prune({
                organization: build.template(block.organization),
              }),
            },
          },
        },
      },
      disable_default_sink: p.child('disable_default_sink').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      kms_service_account_id: p.child('kms_service_account_id').ref,
      logging_service_account_id: p.child('logging_service_account_id').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      storage_location: p.child('storage_location').ref,
    },
    logging_organization_sink(name, block): {
      local p = path(['google_logging_organization_sink', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_organization_sink: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                destination: build.template(block.destination),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                filter: build.template(std.get(block, 'filter', null, true)),
                include_children: build.template(std.get(block, 'include_children', null, true)),
                intercept_children: build.template(std.get(block, 'intercept_children', null, true)),
                name: build.template(block.name),
                org_id: build.template(block.org_id),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      destination: p.child('destination').ref,
      disabled: p.child('disabled').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      include_children: p.child('include_children').ref,
      intercept_children: p.child('intercept_children').ref,
      name: p.child('name').ref,
      org_id: p.child('org_id').ref,
      writer_identity: p.child('writer_identity').ref,
    },
    logging_project_bucket_config(name, block): {
      local p = path(['google_logging_project_bucket_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_project_bucket_config: {
              [name]: std.prune({
                bucket_id: build.template(block.bucket_id),
                enable_analytics: build.template(std.get(block, 'enable_analytics', null, true)),
                location: build.template(block.location),
                locked: build.template(std.get(block, 'locked', null, true)),
                project: build.template(block.project),
                retention_days: build.template(std.get(block, 'retention_days', null, true)),
              }),
            },
          },
        },
      },
      bucket_id: p.child('bucket_id').ref,
      description: p.child('description').ref,
      enable_analytics: p.child('enable_analytics').ref,
      id: p.child('id').ref,
      lifecycle_state: p.child('lifecycle_state').ref,
      location: p.child('location').ref,
      locked: p.child('locked').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      retention_days: p.child('retention_days').ref,
    },
    logging_project_exclusion(name, block): {
      local p = path(['google_logging_project_exclusion', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_project_exclusion: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                filter: build.template(block.filter),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      disabled: p.child('disabled').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    logging_project_sink(name, block): {
      local p = path(['google_logging_project_sink', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_logging_project_sink: {
              [name]: std.prune({
                custom_writer_identity: build.template(std.get(block, 'custom_writer_identity', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                destination: build.template(block.destination),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                filter: build.template(std.get(block, 'filter', null, true)),
                name: build.template(block.name),
                unique_writer_identity: build.template(std.get(block, 'unique_writer_identity', null, true)),
              }),
            },
          },
        },
      },
      custom_writer_identity: p.child('custom_writer_identity').ref,
      description: p.child('description').ref,
      destination: p.child('destination').ref,
      disabled: p.child('disabled').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      unique_writer_identity: p.child('unique_writer_identity').ref,
      writer_identity: p.child('writer_identity').ref,
    },
    looker_instance(name, block): {
      local p = path(['google_looker_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_looker_instance: {
              [name]: std.prune({
                consumer_network: build.template(std.get(block, 'consumer_network', null, true)),
                fips_enabled: build.template(std.get(block, 'fips_enabled', null, true)),
                name: build.template(block.name),
                platform_edition: build.template(std.get(block, 'platform_edition', null, true)),
                private_ip_enabled: build.template(std.get(block, 'private_ip_enabled', null, true)),
                psc_enabled: build.template(std.get(block, 'psc_enabled', null, true)),
                public_ip_enabled: build.template(std.get(block, 'public_ip_enabled', null, true)),
                reserved_range: build.template(std.get(block, 'reserved_range', null, true)),
              }),
            },
          },
        },
      },
      consumer_network: p.child('consumer_network').ref,
      create_time: p.child('create_time').ref,
      egress_public_ip: p.child('egress_public_ip').ref,
      fips_enabled: p.child('fips_enabled').ref,
      id: p.child('id').ref,
      ingress_private_ip: p.child('ingress_private_ip').ref,
      ingress_public_ip: p.child('ingress_public_ip').ref,
      looker_uri: p.child('looker_uri').ref,
      looker_version: p.child('looker_version').ref,
      name: p.child('name').ref,
      platform_edition: p.child('platform_edition').ref,
      private_ip_enabled: p.child('private_ip_enabled').ref,
      project: p.child('project').ref,
      psc_enabled: p.child('psc_enabled').ref,
      public_ip_enabled: p.child('public_ip_enabled').ref,
      region: p.child('region').ref,
      reserved_range: p.child('reserved_range').ref,
      update_time: p.child('update_time').ref,
    },
    memcache_instance(name, block): {
      local p = path(['google_memcache_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_memcache_instance: {
              [name]: std.prune({
                labels: build.template(std.get(block, 'labels', null, true)),
                memcache_version: build.template(std.get(block, 'memcache_version', null, true)),
                name: build.template(block.name),
                node_count: build.template(block.node_count),
                reserved_ip_range_id: build.template(std.get(block, 'reserved_ip_range_id', null, true)),
              }),
            },
          },
        },
      },
      authorized_network: p.child('authorized_network').ref,
      create_time: p.child('create_time').ref,
      discovery_endpoint: p.child('discovery_endpoint').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      maintenance_schedule: p.child('maintenance_schedule').ref,
      memcache_full_version: p.child('memcache_full_version').ref,
      memcache_nodes: p.child('memcache_nodes').ref,
      memcache_version: p.child('memcache_version').ref,
      name: p.child('name').ref,
      node_count: p.child('node_count').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      reserved_ip_range_id: p.child('reserved_ip_range_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      zones: p.child('zones').ref,
    },
    migration_center_group(name, block): {
      local p = path(['google_migration_center_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_migration_center_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                group_id: build.template(block.group_id),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      group_id: p.child('group_id').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    migration_center_preference_set(name, block): {
      local p = path(['google_migration_center_preference_set', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_migration_center_preference_set: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                location: build.template(block.location),
                preference_set_id: build.template(block.preference_set_id),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      preference_set_id: p.child('preference_set_id').ref,
      project: p.child('project').ref,
      update_time: p.child('update_time').ref,
    },
    ml_engine_model(name, block): {
      local p = path(['google_ml_engine_model', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_ml_engine_model: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                online_prediction_console_logging: build.template(std.get(block, 'online_prediction_console_logging', null, true)),
                online_prediction_logging: build.template(std.get(block, 'online_prediction_logging', null, true)),
                regions: build.template(std.get(block, 'regions', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      online_prediction_console_logging: p.child('online_prediction_console_logging').ref,
      online_prediction_logging: p.child('online_prediction_logging').ref,
      project: p.child('project').ref,
      regions: p.child('regions').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    monitoring_alert_policy(name, block): {
      local p = path(['google_monitoring_alert_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_monitoring_alert_policy: {
              [name]: std.prune({
                combiner: build.template(block.combiner),
                display_name: build.template(block.display_name),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                notification_channels: build.template(std.get(block, 'notification_channels', null, true)),
                severity: build.template(std.get(block, 'severity', null, true)),
                user_labels: build.template(std.get(block, 'user_labels', null, true)),
              }),
            },
          },
        },
      },
      combiner: p.child('combiner').ref,
      creation_record: p.child('creation_record').ref,
      display_name: p.child('display_name').ref,
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      notification_channels: p.child('notification_channels').ref,
      project: p.child('project').ref,
      severity: p.child('severity').ref,
      user_labels: p.child('user_labels').ref,
    },
    monitoring_custom_service(name, block): {
      local p = path(['google_monitoring_custom_service', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_monitoring_custom_service: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                user_labels: build.template(std.get(block, 'user_labels', null, true)),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_id: p.child('service_id').ref,
      user_labels: p.child('user_labels').ref,
    },
    monitoring_dashboard(name, block): {
      local p = path(['google_monitoring_dashboard', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_monitoring_dashboard: {
              [name]: std.prune({
                dashboard_json: build.template(block.dashboard_json),
              }),
            },
          },
        },
      },
      dashboard_json: p.child('dashboard_json').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
    },
    monitoring_group(name, block): {
      local p = path(['google_monitoring_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_monitoring_group: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                filter: build.template(block.filter),
                is_cluster: build.template(std.get(block, 'is_cluster', null, true)),
                parent_name: build.template(std.get(block, 'parent_name', null, true)),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      is_cluster: p.child('is_cluster').ref,
      name: p.child('name').ref,
      parent_name: p.child('parent_name').ref,
      project: p.child('project').ref,
    },
    monitoring_metric_descriptor(name, block): {
      local p = path(['google_monitoring_metric_descriptor', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_monitoring_metric_descriptor: {
              [name]: std.prune({
                description: build.template(block.description),
                display_name: build.template(block.display_name),
                launch_stage: build.template(std.get(block, 'launch_stage', null, true)),
                metric_kind: build.template(block.metric_kind),
                type: build.template(block.type),
                unit: build.template(std.get(block, 'unit', null, true)),
                value_type: build.template(block.value_type),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      launch_stage: p.child('launch_stage').ref,
      metric_kind: p.child('metric_kind').ref,
      monitored_resource_types: p.child('monitored_resource_types').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      type: p.child('type').ref,
      unit: p.child('unit').ref,
      value_type: p.child('value_type').ref,
    },
    monitoring_monitored_project(name, block): {
      local p = path(['google_monitoring_monitored_project', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_monitoring_monitored_project: {
              [name]: std.prune({
                metrics_scope: build.template(block.metrics_scope),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      id: p.child('id').ref,
      metrics_scope: p.child('metrics_scope').ref,
      name: p.child('name').ref,
    },
    monitoring_notification_channel(name, block): {
      local p = path(['google_monitoring_notification_channel', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_monitoring_notification_channel: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                force_delete: build.template(std.get(block, 'force_delete', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                type: build.template(block.type),
                user_labels: build.template(std.get(block, 'user_labels', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      enabled: p.child('enabled').ref,
      force_delete: p.child('force_delete').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      type: p.child('type').ref,
      user_labels: p.child('user_labels').ref,
      verification_status: p.child('verification_status').ref,
    },
    monitoring_service(name, block): {
      local p = path(['google_monitoring_service', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_monitoring_service: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                service_id: build.template(block.service_id),
                user_labels: build.template(std.get(block, 'user_labels', null, true)),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_id: p.child('service_id').ref,
      telemetry: p.child('telemetry').ref,
      user_labels: p.child('user_labels').ref,
    },
    monitoring_slo(name, block): {
      local p = path(['google_monitoring_slo', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_monitoring_slo: {
              [name]: std.prune({
                calendar_period: build.template(std.get(block, 'calendar_period', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                goal: build.template(block.goal),
                rolling_period_days: build.template(std.get(block, 'rolling_period_days', null, true)),
                service: build.template(block.service),
                user_labels: build.template(std.get(block, 'user_labels', null, true)),
              }),
            },
          },
        },
      },
      calendar_period: p.child('calendar_period').ref,
      display_name: p.child('display_name').ref,
      goal: p.child('goal').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      rolling_period_days: p.child('rolling_period_days').ref,
      service: p.child('service').ref,
      slo_id: p.child('slo_id').ref,
      user_labels: p.child('user_labels').ref,
    },
    monitoring_uptime_check_config(name, block): {
      local p = path(['google_monitoring_uptime_check_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_monitoring_uptime_check_config: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                period: build.template(std.get(block, 'period', null, true)),
                selected_regions: build.template(std.get(block, 'selected_regions', null, true)),
                timeout: build.template(block.timeout),
                user_labels: build.template(std.get(block, 'user_labels', null, true)),
              }),
            },
          },
        },
      },
      checker_type: p.child('checker_type').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      period: p.child('period').ref,
      project: p.child('project').ref,
      selected_regions: p.child('selected_regions').ref,
      timeout: p.child('timeout').ref,
      uptime_check_id: p.child('uptime_check_id').ref,
      user_labels: p.child('user_labels').ref,
    },
    netapp_active_directory(name, block): {
      local p = path(['google_netapp_active_directory', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_netapp_active_directory: {
              [name]: std.prune({
                administrators: build.template(std.get(block, 'administrators', null, true)),
                aes_encryption: build.template(std.get(block, 'aes_encryption', null, true)),
                backup_operators: build.template(std.get(block, 'backup_operators', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                dns: build.template(block.dns),
                domain: build.template(block.domain),
                encrypt_dc_connections: build.template(std.get(block, 'encrypt_dc_connections', null, true)),
                kdc_hostname: build.template(std.get(block, 'kdc_hostname', null, true)),
                kdc_ip: build.template(std.get(block, 'kdc_ip', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                ldap_signing: build.template(std.get(block, 'ldap_signing', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                net_bios_prefix: build.template(block.net_bios_prefix),
                nfs_users_with_ldap: build.template(std.get(block, 'nfs_users_with_ldap', null, true)),
                password: build.template(block.password),
                security_operators: build.template(std.get(block, 'security_operators', null, true)),
                site: build.template(std.get(block, 'site', null, true)),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      administrators: p.child('administrators').ref,
      aes_encryption: p.child('aes_encryption').ref,
      backup_operators: p.child('backup_operators').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      dns: p.child('dns').ref,
      domain: p.child('domain').ref,
      effective_labels: p.child('effective_labels').ref,
      encrypt_dc_connections: p.child('encrypt_dc_connections').ref,
      id: p.child('id').ref,
      kdc_hostname: p.child('kdc_hostname').ref,
      kdc_ip: p.child('kdc_ip').ref,
      labels: p.child('labels').ref,
      ldap_signing: p.child('ldap_signing').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      net_bios_prefix: p.child('net_bios_prefix').ref,
      nfs_users_with_ldap: p.child('nfs_users_with_ldap').ref,
      organizational_unit: p.child('organizational_unit').ref,
      password: p.child('password').ref,
      project: p.child('project').ref,
      security_operators: p.child('security_operators').ref,
      site: p.child('site').ref,
      state: p.child('state').ref,
      state_details: p.child('state_details').ref,
      terraform_labels: p.child('terraform_labels').ref,
      username: p.child('username').ref,
    },
    netapp_backup(name, block): {
      local p = path(['google_netapp_backup', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_netapp_backup: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                source_snapshot: build.template(std.get(block, 'source_snapshot', null, true)),
                source_volume: build.template(std.get(block, 'source_volume', null, true)),
                vault_name: build.template(block.vault_name),
              }),
            },
          },
        },
      },
      backup_type: p.child('backup_type').ref,
      chain_storage_bytes: p.child('chain_storage_bytes').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      source_snapshot: p.child('source_snapshot').ref,
      source_volume: p.child('source_volume').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      vault_name: p.child('vault_name').ref,
      volume_usage_bytes: p.child('volume_usage_bytes').ref,
    },
    netapp_backup_policy(name, block): {
      local p = path(['google_netapp_backup_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_netapp_backup_policy: {
              [name]: std.prune({
                daily_backup_limit: build.template(block.daily_backup_limit),
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                monthly_backup_limit: build.template(block.monthly_backup_limit),
                name: build.template(block.name),
                weekly_backup_limit: build.template(block.weekly_backup_limit),
              }),
            },
          },
        },
      },
      assigned_volume_count: p.child('assigned_volume_count').ref,
      create_time: p.child('create_time').ref,
      daily_backup_limit: p.child('daily_backup_limit').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      monthly_backup_limit: p.child('monthly_backup_limit').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      weekly_backup_limit: p.child('weekly_backup_limit').ref,
    },
    netapp_backup_vault(name, block): {
      local p = path(['google_netapp_backup_vault', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_netapp_backup_vault: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    netapp_kmsconfig(name, block): {
      local p = path(['google_netapp_kmsconfig', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_netapp_kmsconfig: {
              [name]: std.prune({
                crypto_key_name: build.template(block.crypto_key_name),
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      crypto_key_name: p.child('crypto_key_name').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      instructions: p.child('instructions').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_account: p.child('service_account').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    netapp_storage_pool(name, block): {
      local p = path(['google_netapp_storage_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_netapp_storage_pool: {
              [name]: std.prune({
                active_directory: build.template(std.get(block, 'active_directory', null, true)),
                allow_auto_tiering: build.template(std.get(block, 'allow_auto_tiering', null, true)),
                capacity_gib: build.template(block.capacity_gib),
                description: build.template(std.get(block, 'description', null, true)),
                kms_config: build.template(std.get(block, 'kms_config', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                ldap_enabled: build.template(std.get(block, 'ldap_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                network: build.template(block.network),
                service_level: build.template(block.service_level),
              }),
            },
          },
        },
      },
      active_directory: p.child('active_directory').ref,
      allow_auto_tiering: p.child('allow_auto_tiering').ref,
      capacity_gib: p.child('capacity_gib').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      encryption_type: p.child('encryption_type').ref,
      id: p.child('id').ref,
      kms_config: p.child('kms_config').ref,
      labels: p.child('labels').ref,
      ldap_enabled: p.child('ldap_enabled').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      service_level: p.child('service_level').ref,
      terraform_labels: p.child('terraform_labels').ref,
      volume_capacity_gib: p.child('volume_capacity_gib').ref,
      volume_count: p.child('volume_count').ref,
    },
    netapp_volume(name, block): {
      local p = path(['google_netapp_volume', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_netapp_volume: {
              [name]: std.prune({
                capacity_gib: build.template(block.capacity_gib),
                deletion_policy: build.template(std.get(block, 'deletion_policy', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                kerberos_enabled: build.template(std.get(block, 'kerberos_enabled', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                large_capacity: build.template(std.get(block, 'large_capacity', null, true)),
                location: build.template(block.location),
                multiple_endpoints: build.template(std.get(block, 'multiple_endpoints', null, true)),
                name: build.template(block.name),
                protocols: build.template(block.protocols),
                restricted_actions: build.template(std.get(block, 'restricted_actions', null, true)),
                share_name: build.template(block.share_name),
                snapshot_directory: build.template(std.get(block, 'snapshot_directory', null, true)),
                storage_pool: build.template(block.storage_pool),
              }),
            },
          },
        },
      },
      active_directory: p.child('active_directory').ref,
      capacity_gib: p.child('capacity_gib').ref,
      cold_tier_size_gib: p.child('cold_tier_size_gib').ref,
      create_time: p.child('create_time').ref,
      deletion_policy: p.child('deletion_policy').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      encryption_type: p.child('encryption_type').ref,
      has_replication: p.child('has_replication').ref,
      id: p.child('id').ref,
      kerberos_enabled: p.child('kerberos_enabled').ref,
      kms_config: p.child('kms_config').ref,
      labels: p.child('labels').ref,
      large_capacity: p.child('large_capacity').ref,
      ldap_enabled: p.child('ldap_enabled').ref,
      location: p.child('location').ref,
      mount_options: p.child('mount_options').ref,
      multiple_endpoints: p.child('multiple_endpoints').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      protocols: p.child('protocols').ref,
      psa_range: p.child('psa_range').ref,
      restricted_actions: p.child('restricted_actions').ref,
      security_style: p.child('security_style').ref,
      service_level: p.child('service_level').ref,
      share_name: p.child('share_name').ref,
      smb_settings: p.child('smb_settings').ref,
      snapshot_directory: p.child('snapshot_directory').ref,
      state: p.child('state').ref,
      state_details: p.child('state_details').ref,
      storage_pool: p.child('storage_pool').ref,
      terraform_labels: p.child('terraform_labels').ref,
      unix_permissions: p.child('unix_permissions').ref,
      used_gib: p.child('used_gib').ref,
    },
    netapp_volume_replication(name, block): {
      local p = path(['google_netapp_volume_replication', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_netapp_volume_replication: {
              [name]: std.prune({
                delete_destination_volume: build.template(std.get(block, 'delete_destination_volume', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                force_stopping: build.template(std.get(block, 'force_stopping', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                replication_enabled: build.template(std.get(block, 'replication_enabled', null, true)),
                replication_schedule: build.template(block.replication_schedule),
                volume_name: build.template(block.volume_name),
                wait_for_mirror: build.template(std.get(block, 'wait_for_mirror', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      delete_destination_volume: p.child('delete_destination_volume').ref,
      description: p.child('description').ref,
      destination_volume: p.child('destination_volume').ref,
      effective_labels: p.child('effective_labels').ref,
      force_stopping: p.child('force_stopping').ref,
      healthy: p.child('healthy').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      mirror_state: p.child('mirror_state').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      replication_enabled: p.child('replication_enabled').ref,
      replication_schedule: p.child('replication_schedule').ref,
      role: p.child('role').ref,
      source_volume: p.child('source_volume').ref,
      state: p.child('state').ref,
      state_details: p.child('state_details').ref,
      terraform_labels: p.child('terraform_labels').ref,
      transfer_stats: p.child('transfer_stats').ref,
      volume_name: p.child('volume_name').ref,
      wait_for_mirror: p.child('wait_for_mirror').ref,
    },
    netapp_volume_snapshot(name, block): {
      local p = path(['google_netapp_volume_snapshot', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_netapp_volume_snapshot: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                volume_name: build.template(block.volume_name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      used_bytes: p.child('used_bytes').ref,
      volume_name: p.child('volume_name').ref,
    },
    network_connectivity_hub(name, block): {
      local p = path(['google_network_connectivity_hub', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_connectivity_hub: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      export_psc: p.child('export_psc').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      routing_vpcs: p.child('routing_vpcs').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      unique_id: p.child('unique_id').ref,
      update_time: p.child('update_time').ref,
    },
    network_connectivity_internal_range(name, block): {
      local p = path(['google_network_connectivity_internal_range', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_connectivity_internal_range: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                network: build.template(block.network),
                overlaps: build.template(std.get(block, 'overlaps', null, true)),
                peering: build.template(block.peering),
                prefix_length: build.template(std.get(block, 'prefix_length', null, true)),
                target_cidr_range: build.template(std.get(block, 'target_cidr_range', null, true)),
                usage: build.template(block.usage),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      ip_cidr_range: p.child('ip_cidr_range').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      overlaps: p.child('overlaps').ref,
      peering: p.child('peering').ref,
      prefix_length: p.child('prefix_length').ref,
      project: p.child('project').ref,
      target_cidr_range: p.child('target_cidr_range').ref,
      terraform_labels: p.child('terraform_labels').ref,
      usage: p.child('usage').ref,
      users: p.child('users').ref,
    },
    network_connectivity_policy_based_route(name, block): {
      local p = path(['google_network_connectivity_policy_based_route', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_connectivity_policy_based_route: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                network: build.template(block.network),
                next_hop_ilb_ip: build.template(std.get(block, 'next_hop_ilb_ip', null, true)),
                next_hop_other_routes: build.template(std.get(block, 'next_hop_other_routes', null, true)),
                priority: build.template(std.get(block, 'priority', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      kind: p.child('kind').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      next_hop_ilb_ip: p.child('next_hop_ilb_ip').ref,
      next_hop_other_routes: p.child('next_hop_other_routes').ref,
      priority: p.child('priority').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
      warnings: p.child('warnings').ref,
    },
    network_connectivity_regional_endpoint(name, block): {
      local p = path(['google_network_connectivity_regional_endpoint', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_connectivity_regional_endpoint: {
              [name]: std.prune({
                access_type: build.template(block.access_type),
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                target_google_api: build.template(block.target_google_api),
              }),
            },
          },
        },
      },
      access_type: p.child('access_type').ref,
      address: p.child('address').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      psc_forwarding_rule: p.child('psc_forwarding_rule').ref,
      subnetwork: p.child('subnetwork').ref,
      target_google_api: p.child('target_google_api').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    network_connectivity_service_connection_policy(name, block): {
      local p = path(['google_network_connectivity_service_connection_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_connectivity_service_connection_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                network: build.template(block.network),
                service_class: build.template(block.service_class),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      infrastructure: p.child('infrastructure').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      psc_connections: p.child('psc_connections').ref,
      service_class: p.child('service_class').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    network_connectivity_spoke(name, block): {
      local p = path(['google_network_connectivity_spoke', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_connectivity_spoke: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                hub: build.template(block.hub),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      hub: p.child('hub').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      unique_id: p.child('unique_id').ref,
      update_time: p.child('update_time').ref,
    },
    network_management_connectivity_test(name, block): {
      local p = path(['google_network_management_connectivity_test', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_management_connectivity_test: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                protocol: build.template(std.get(block, 'protocol', null, true)),
                related_projects: build.template(std.get(block, 'related_projects', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      protocol: p.child('protocol').ref,
      related_projects: p.child('related_projects').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    network_security_address_group(name, block): {
      local p = path(['google_network_security_address_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_address_group: {
              [name]: std.prune({
                capacity: build.template(block.capacity),
                description: build.template(std.get(block, 'description', null, true)),
                items: build.template(std.get(block, 'items', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                parent: build.template(std.get(block, 'parent', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      capacity: p.child('capacity').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      items: p.child('items').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    network_security_address_group_iam_binding(name, block): {
      local p = path(['google_network_security_address_group_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_address_group_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    network_security_address_group_iam_member(name, block): {
      local p = path(['google_network_security_address_group_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_address_group_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    network_security_address_group_iam_policy(name, block): {
      local p = path(['google_network_security_address_group_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_address_group_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    network_security_client_tls_policy(name, block): {
      local p = path(['google_network_security_client_tls_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_client_tls_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                sni: build.template(std.get(block, 'sni', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      sni: p.child('sni').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    network_security_firewall_endpoint(name, block): {
      local p = path(['google_network_security_firewall_endpoint', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_firewall_endpoint: {
              [name]: std.prune({
                billing_project_id: build.template(block.billing_project_id),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      associated_networks: p.child('associated_networks').ref,
      billing_project_id: p.child('billing_project_id').ref,
      create_time: p.child('create_time').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      reconciling: p.child('reconciling').ref,
      self_link: p.child('self_link').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    network_security_firewall_endpoint_association(name, block): {
      local p = path(['google_network_security_firewall_endpoint_association', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_firewall_endpoint_association: {
              [name]: std.prune({
                disabled: build.template(std.get(block, 'disabled', null, true)),
                firewall_endpoint: build.template(block.firewall_endpoint),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                network: build.template(block.network),
                parent: build.template(std.get(block, 'parent', null, true)),
                tls_inspection_policy: build.template(std.get(block, 'tls_inspection_policy', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      disabled: p.child('disabled').ref,
      effective_labels: p.child('effective_labels').ref,
      firewall_endpoint: p.child('firewall_endpoint').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      parent: p.child('parent').ref,
      reconciling: p.child('reconciling').ref,
      self_link: p.child('self_link').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      tls_inspection_policy: p.child('tls_inspection_policy').ref,
      update_time: p.child('update_time').ref,
    },
    network_security_gateway_security_policy(name, block): {
      local p = path(['google_network_security_gateway_security_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_gateway_security_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      update_time: p.child('update_time').ref,
    },
    network_security_gateway_security_policy_rule(name, block): {
      local p = path(['google_network_security_gateway_security_policy_rule', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_gateway_security_policy_rule: {
              [name]: std.prune({
                application_matcher: build.template(std.get(block, 'application_matcher', null, true)),
                basic_profile: build.template(block.basic_profile),
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(block.enabled),
                gateway_security_policy: build.template(block.gateway_security_policy),
                location: build.template(block.location),
                name: build.template(block.name),
                priority: build.template(block.priority),
                session_matcher: build.template(block.session_matcher),
                tls_inspection_enabled: build.template(std.get(block, 'tls_inspection_enabled', null, true)),
              }),
            },
          },
        },
      },
      application_matcher: p.child('application_matcher').ref,
      basic_profile: p.child('basic_profile').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      enabled: p.child('enabled').ref,
      gateway_security_policy: p.child('gateway_security_policy').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      priority: p.child('priority').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      session_matcher: p.child('session_matcher').ref,
      tls_inspection_enabled: p.child('tls_inspection_enabled').ref,
      update_time: p.child('update_time').ref,
    },
    network_security_security_profile(name, block): {
      local p = path(['google_network_security_security_profile', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_security_profile: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                parent: build.template(std.get(block, 'parent', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      self_link: p.child('self_link').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    network_security_security_profile_group(name, block): {
      local p = path(['google_network_security_security_profile_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_security_profile_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                parent: build.template(std.get(block, 'parent', null, true)),
                threat_prevention_profile: build.template(std.get(block, 'threat_prevention_profile', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      terraform_labels: p.child('terraform_labels').ref,
      threat_prevention_profile: p.child('threat_prevention_profile').ref,
      update_time: p.child('update_time').ref,
    },
    network_security_server_tls_policy(name, block): {
      local p = path(['google_network_security_server_tls_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_server_tls_policy: {
              [name]: std.prune({
                allow_open: build.template(std.get(block, 'allow_open', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      allow_open: p.child('allow_open').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    network_security_tls_inspection_policy(name, block): {
      local p = path(['google_network_security_tls_inspection_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_tls_inspection_policy: {
              [name]: std.prune({
                ca_pool: build.template(block.ca_pool),
                custom_tls_features: build.template(std.get(block, 'custom_tls_features', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                exclude_public_ca_set: build.template(std.get(block, 'exclude_public_ca_set', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                min_tls_version: build.template(std.get(block, 'min_tls_version', null, true)),
                name: build.template(block.name),
                tls_feature_profile: build.template(std.get(block, 'tls_feature_profile', null, true)),
                trust_config: build.template(std.get(block, 'trust_config', null, true)),
              }),
            },
          },
        },
      },
      ca_pool: p.child('ca_pool').ref,
      create_time: p.child('create_time').ref,
      custom_tls_features: p.child('custom_tls_features').ref,
      description: p.child('description').ref,
      exclude_public_ca_set: p.child('exclude_public_ca_set').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      min_tls_version: p.child('min_tls_version').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      tls_feature_profile: p.child('tls_feature_profile').ref,
      trust_config: p.child('trust_config').ref,
      update_time: p.child('update_time').ref,
    },
    network_security_url_lists(name, block): {
      local p = path(['google_network_security_url_lists', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_security_url_lists: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                values: build.template(block.values),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      update_time: p.child('update_time').ref,
      values: p.child('values').ref,
    },
    network_services_edge_cache_keyset(name, block): {
      local p = path(['google_network_services_edge_cache_keyset', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_services_edge_cache_keyset: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    network_services_edge_cache_origin(name, block): {
      local p = path(['google_network_services_edge_cache_origin', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_services_edge_cache_origin: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                failover_origin: build.template(std.get(block, 'failover_origin', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                max_attempts: build.template(std.get(block, 'max_attempts', null, true)),
                name: build.template(block.name),
                origin_address: build.template(block.origin_address),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      failover_origin: p.child('failover_origin').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      max_attempts: p.child('max_attempts').ref,
      name: p.child('name').ref,
      origin_address: p.child('origin_address').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
      protocol: p.child('protocol').ref,
      retry_conditions: p.child('retry_conditions').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    network_services_edge_cache_service(name, block): {
      local p = path(['google_network_services_edge_cache_service', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_services_edge_cache_service: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                disable_http2: build.template(std.get(block, 'disable_http2', null, true)),
                edge_security_policy: build.template(std.get(block, 'edge_security_policy', null, true)),
                edge_ssl_certificates: build.template(std.get(block, 'edge_ssl_certificates', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                ssl_policy: build.template(std.get(block, 'ssl_policy', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      disable_http2: p.child('disable_http2').ref,
      disable_quic: p.child('disable_quic').ref,
      edge_security_policy: p.child('edge_security_policy').ref,
      edge_ssl_certificates: p.child('edge_ssl_certificates').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      ipv4_addresses: p.child('ipv4_addresses').ref,
      ipv6_addresses: p.child('ipv6_addresses').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      require_tls: p.child('require_tls').ref,
      ssl_policy: p.child('ssl_policy').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    network_services_gateway(name, block): {
      local p = path(['google_network_services_gateway', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_services_gateway: {
              [name]: std.prune({
                certificate_urls: build.template(std.get(block, 'certificate_urls', null, true)),
                delete_swg_autogen_router_on_destroy: build.template(std.get(block, 'delete_swg_autogen_router_on_destroy', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                gateway_security_policy: build.template(std.get(block, 'gateway_security_policy', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                network: build.template(std.get(block, 'network', null, true)),
                ports: build.template(block.ports),
                routing_mode: build.template(std.get(block, 'routing_mode', null, true)),
                scope: build.template(std.get(block, 'scope', null, true)),
                server_tls_policy: build.template(std.get(block, 'server_tls_policy', null, true)),
                subnetwork: build.template(std.get(block, 'subnetwork', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      addresses: p.child('addresses').ref,
      certificate_urls: p.child('certificate_urls').ref,
      create_time: p.child('create_time').ref,
      delete_swg_autogen_router_on_destroy: p.child('delete_swg_autogen_router_on_destroy').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      gateway_security_policy: p.child('gateway_security_policy').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      ports: p.child('ports').ref,
      project: p.child('project').ref,
      routing_mode: p.child('routing_mode').ref,
      scope: p.child('scope').ref,
      self_link: p.child('self_link').ref,
      server_tls_policy: p.child('server_tls_policy').ref,
      subnetwork: p.child('subnetwork').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    network_services_lb_route_extension(name, block): {
      local p = path(['google_network_services_lb_route_extension', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_services_lb_route_extension: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                forwarding_rules: build.template(block.forwarding_rules),
                labels: build.template(std.get(block, 'labels', null, true)),
                load_balancing_scheme: build.template(block.load_balancing_scheme),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      forwarding_rules: p.child('forwarding_rules').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      load_balancing_scheme: p.child('load_balancing_scheme').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    network_services_lb_traffic_extension(name, block): {
      local p = path(['google_network_services_lb_traffic_extension', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_network_services_lb_traffic_extension: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                forwarding_rules: build.template(block.forwarding_rules),
                labels: build.template(std.get(block, 'labels', null, true)),
                load_balancing_scheme: build.template(std.get(block, 'load_balancing_scheme', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      forwarding_rules: p.child('forwarding_rules').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      load_balancing_scheme: p.child('load_balancing_scheme').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    notebooks_environment(name, block): {
      local p = path(['google_notebooks_environment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_notebooks_environment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                post_startup_script: build.template(std.get(block, 'post_startup_script', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      post_startup_script: p.child('post_startup_script').ref,
      project: p.child('project').ref,
    },
    notebooks_instance(name, block): {
      local p = path(['google_notebooks_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_notebooks_instance: {
              [name]: std.prune({
                boot_disk_size_gb: build.template(std.get(block, 'boot_disk_size_gb', null, true)),
                boot_disk_type: build.template(std.get(block, 'boot_disk_type', null, true)),
                custom_gpu_driver_path: build.template(std.get(block, 'custom_gpu_driver_path', null, true)),
                data_disk_size_gb: build.template(std.get(block, 'data_disk_size_gb', null, true)),
                data_disk_type: build.template(std.get(block, 'data_disk_type', null, true)),
                desired_state: build.template(std.get(block, 'desired_state', null, true)),
                install_gpu_driver: build.template(std.get(block, 'install_gpu_driver', null, true)),
                instance_owners: build.template(std.get(block, 'instance_owners', null, true)),
                kms_key: build.template(std.get(block, 'kms_key', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                machine_type: build.template(block.machine_type),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                nic_type: build.template(std.get(block, 'nic_type', null, true)),
                no_proxy_access: build.template(std.get(block, 'no_proxy_access', null, true)),
                no_public_ip: build.template(std.get(block, 'no_public_ip', null, true)),
                no_remove_data_disk: build.template(std.get(block, 'no_remove_data_disk', null, true)),
                post_startup_script: build.template(std.get(block, 'post_startup_script', null, true)),
              }),
            },
          },
        },
      },
      boot_disk_size_gb: p.child('boot_disk_size_gb').ref,
      boot_disk_type: p.child('boot_disk_type').ref,
      create_time: p.child('create_time').ref,
      custom_gpu_driver_path: p.child('custom_gpu_driver_path').ref,
      data_disk_size_gb: p.child('data_disk_size_gb').ref,
      data_disk_type: p.child('data_disk_type').ref,
      desired_state: p.child('desired_state').ref,
      disk_encryption: p.child('disk_encryption').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      install_gpu_driver: p.child('install_gpu_driver').ref,
      instance_owners: p.child('instance_owners').ref,
      kms_key: p.child('kms_key').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      machine_type: p.child('machine_type').ref,
      metadata: p.child('metadata').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      nic_type: p.child('nic_type').ref,
      no_proxy_access: p.child('no_proxy_access').ref,
      no_public_ip: p.child('no_public_ip').ref,
      no_remove_data_disk: p.child('no_remove_data_disk').ref,
      post_startup_script: p.child('post_startup_script').ref,
      project: p.child('project').ref,
      proxy_uri: p.child('proxy_uri').ref,
      service_account: p.child('service_account').ref,
      service_account_scopes: p.child('service_account_scopes').ref,
      state: p.child('state').ref,
      subnet: p.child('subnet').ref,
      tags: p.child('tags').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    notebooks_instance_iam_binding(name, block): {
      local p = path(['google_notebooks_instance_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_notebooks_instance_iam_binding: {
              [name]: std.prune({
                instance_name: build.template(block.instance_name),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance_name: p.child('instance_name').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    notebooks_instance_iam_member(name, block): {
      local p = path(['google_notebooks_instance_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_notebooks_instance_iam_member: {
              [name]: std.prune({
                instance_name: build.template(block.instance_name),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance_name: p.child('instance_name').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    notebooks_instance_iam_policy(name, block): {
      local p = path(['google_notebooks_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_notebooks_instance_iam_policy: {
              [name]: std.prune({
                instance_name: build.template(block.instance_name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance_name: p.child('instance_name').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    notebooks_location(name, block): {
      local p = path(['google_notebooks_location', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_notebooks_location: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
    },
    notebooks_runtime(name, block): {
      local p = path(['google_notebooks_runtime', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_notebooks_runtime: {
              [name]: std.prune({
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      effective_labels: p.child('effective_labels').ref,
      health_state: p.child('health_state').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      metrics: p.child('metrics').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    notebooks_runtime_iam_binding(name, block): {
      local p = path(['google_notebooks_runtime_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_notebooks_runtime_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                runtime_name: build.template(block.runtime_name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      runtime_name: p.child('runtime_name').ref,
    },
    notebooks_runtime_iam_member(name, block): {
      local p = path(['google_notebooks_runtime_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_notebooks_runtime_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                runtime_name: build.template(block.runtime_name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      runtime_name: p.child('runtime_name').ref,
    },
    notebooks_runtime_iam_policy(name, block): {
      local p = path(['google_notebooks_runtime_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_notebooks_runtime_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                runtime_name: build.template(block.runtime_name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      runtime_name: p.child('runtime_name').ref,
    },
    org_policy_custom_constraint(name, block): {
      local p = path(['google_org_policy_custom_constraint', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_org_policy_custom_constraint: {
              [name]: std.prune({
                action_type: build.template(block.action_type),
                condition: build.template(block.condition),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                method_types: build.template(block.method_types),
                name: build.template(block.name),
                parent: build.template(block.parent),
                resource_types: build.template(block.resource_types),
              }),
            },
          },
        },
      },
      action_type: p.child('action_type').ref,
      condition: p.child('condition').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      method_types: p.child('method_types').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      resource_types: p.child('resource_types').ref,
      update_time: p.child('update_time').ref,
    },
    org_policy_policy(name, block): {
      local p = path(['google_org_policy_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_org_policy_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
    },
    organization_access_approval_settings(name, block): {
      local p = path(['google_organization_access_approval_settings', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_organization_access_approval_settings: {
              [name]: std.prune({
                active_key_version: build.template(std.get(block, 'active_key_version', null, true)),
                organization_id: build.template(block.organization_id),
              }),
            },
          },
        },
      },
      active_key_version: p.child('active_key_version').ref,
      ancestor_has_active_key_version: p.child('ancestor_has_active_key_version').ref,
      enrolled_ancestor: p.child('enrolled_ancestor').ref,
      id: p.child('id').ref,
      invalid_key_version: p.child('invalid_key_version').ref,
      name: p.child('name').ref,
      notification_emails: p.child('notification_emails').ref,
      organization_id: p.child('organization_id').ref,
    },
    organization_iam_audit_config(name, block): {
      local p = path(['google_organization_iam_audit_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_organization_iam_audit_config: {
              [name]: std.prune({
                org_id: build.template(block.org_id),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      org_id: p.child('org_id').ref,
      service: p.child('service').ref,
    },
    organization_iam_binding(name, block): {
      local p = path(['google_organization_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_organization_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                org_id: build.template(block.org_id),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      org_id: p.child('org_id').ref,
      role: p.child('role').ref,
    },
    organization_iam_custom_role(name, block): {
      local p = path(['google_organization_iam_custom_role', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_organization_iam_custom_role: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                org_id: build.template(block.org_id),
                permissions: build.template(block.permissions),
                role_id: build.template(block.role_id),
                stage: build.template(std.get(block, 'stage', null, true)),
                title: build.template(block.title),
              }),
            },
          },
        },
      },
      deleted: p.child('deleted').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      org_id: p.child('org_id').ref,
      permissions: p.child('permissions').ref,
      role_id: p.child('role_id').ref,
      stage: p.child('stage').ref,
      title: p.child('title').ref,
    },
    organization_iam_member(name, block): {
      local p = path(['google_organization_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_organization_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                org_id: build.template(block.org_id),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      org_id: p.child('org_id').ref,
      role: p.child('role').ref,
    },
    organization_iam_policy(name, block): {
      local p = path(['google_organization_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_organization_iam_policy: {
              [name]: std.prune({
                org_id: build.template(block.org_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      org_id: p.child('org_id').ref,
      policy_data: p.child('policy_data').ref,
    },
    organization_policy(name, block): {
      local p = path(['google_organization_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_organization_policy: {
              [name]: std.prune({
                constraint: build.template(block.constraint),
                org_id: build.template(block.org_id),
              }),
            },
          },
        },
      },
      constraint: p.child('constraint').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      org_id: p.child('org_id').ref,
      update_time: p.child('update_time').ref,
      version: p.child('version').ref,
    },
    os_config_os_policy_assignment(name, block): {
      local p = path(['google_os_config_os_policy_assignment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_os_config_os_policy_assignment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                skip_await_rollout: build.template(std.get(block, 'skip_await_rollout', null, true)),
              }),
            },
          },
        },
      },
      baseline: p.child('baseline').ref,
      deleted: p.child('deleted').ref,
      description: p.child('description').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      revision_create_time: p.child('revision_create_time').ref,
      revision_id: p.child('revision_id').ref,
      rollout_state: p.child('rollout_state').ref,
      skip_await_rollout: p.child('skip_await_rollout').ref,
      uid: p.child('uid').ref,
    },
    os_config_patch_deployment(name, block): {
      local p = path(['google_os_config_patch_deployment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_os_config_patch_deployment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                duration: build.template(std.get(block, 'duration', null, true)),
                patch_deployment_id: build.template(block.patch_deployment_id),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      duration: p.child('duration').ref,
      id: p.child('id').ref,
      last_execute_time: p.child('last_execute_time').ref,
      name: p.child('name').ref,
      patch_deployment_id: p.child('patch_deployment_id').ref,
      project: p.child('project').ref,
      update_time: p.child('update_time').ref,
    },
    os_login_ssh_public_key(name, block): {
      local p = path(['google_os_login_ssh_public_key', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_os_login_ssh_public_key: {
              [name]: std.prune({
                expiration_time_usec: build.template(std.get(block, 'expiration_time_usec', null, true)),
                key: build.template(block.key),
                project: build.template(std.get(block, 'project', null, true)),
                user: build.template(block.user),
              }),
            },
          },
        },
      },
      expiration_time_usec: p.child('expiration_time_usec').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      key: p.child('key').ref,
      project: p.child('project').ref,
      user: p.child('user').ref,
    },
    privateca_ca_pool(name, block): {
      local p = path(['google_privateca_ca_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_privateca_ca_pool: {
              [name]: std.prune({
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                tier: build.template(block.tier),
              }),
            },
          },
        },
      },
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      tier: p.child('tier').ref,
    },
    privateca_ca_pool_iam_binding(name, block): {
      local p = path(['google_privateca_ca_pool_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_privateca_ca_pool_iam_binding: {
              [name]: std.prune({
                ca_pool: build.template(block.ca_pool),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      ca_pool: p.child('ca_pool').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    privateca_ca_pool_iam_member(name, block): {
      local p = path(['google_privateca_ca_pool_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_privateca_ca_pool_iam_member: {
              [name]: std.prune({
                ca_pool: build.template(block.ca_pool),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      ca_pool: p.child('ca_pool').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    privateca_ca_pool_iam_policy(name, block): {
      local p = path(['google_privateca_ca_pool_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_privateca_ca_pool_iam_policy: {
              [name]: std.prune({
                ca_pool: build.template(block.ca_pool),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      ca_pool: p.child('ca_pool').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    privateca_certificate(name, block): {
      local p = path(['google_privateca_certificate', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_privateca_certificate: {
              [name]: std.prune({
                certificate_authority: build.template(std.get(block, 'certificate_authority', null, true)),
                certificate_template: build.template(std.get(block, 'certificate_template', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                lifetime: build.template(std.get(block, 'lifetime', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                pem_csr: build.template(std.get(block, 'pem_csr', null, true)),
                pool: build.template(block.pool),
              }),
            },
          },
        },
      },
      certificate_authority: p.child('certificate_authority').ref,
      certificate_description: p.child('certificate_description').ref,
      certificate_template: p.child('certificate_template').ref,
      create_time: p.child('create_time').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      issuer_certificate_authority: p.child('issuer_certificate_authority').ref,
      labels: p.child('labels').ref,
      lifetime: p.child('lifetime').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      pem_certificate: p.child('pem_certificate').ref,
      pem_certificate_chain: p.child('pem_certificate_chain').ref,
      pem_csr: p.child('pem_csr').ref,
      pool: p.child('pool').ref,
      project: p.child('project').ref,
      revocation_details: p.child('revocation_details').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    privateca_certificate_authority(name, block): {
      local p = path(['google_privateca_certificate_authority', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_privateca_certificate_authority: {
              [name]: std.prune({
                certificate_authority_id: build.template(block.certificate_authority_id),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                desired_state: build.template(std.get(block, 'desired_state', null, true)),
                gcs_bucket: build.template(std.get(block, 'gcs_bucket', null, true)),
                ignore_active_certificates_on_deletion: build.template(std.get(block, 'ignore_active_certificates_on_deletion', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                lifetime: build.template(std.get(block, 'lifetime', null, true)),
                location: build.template(block.location),
                pem_ca_certificate: build.template(std.get(block, 'pem_ca_certificate', null, true)),
                pool: build.template(block.pool),
                skip_grace_period: build.template(std.get(block, 'skip_grace_period', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      access_urls: p.child('access_urls').ref,
      certificate_authority_id: p.child('certificate_authority_id').ref,
      create_time: p.child('create_time').ref,
      deletion_protection: p.child('deletion_protection').ref,
      desired_state: p.child('desired_state').ref,
      effective_labels: p.child('effective_labels').ref,
      gcs_bucket: p.child('gcs_bucket').ref,
      id: p.child('id').ref,
      ignore_active_certificates_on_deletion: p.child('ignore_active_certificates_on_deletion').ref,
      labels: p.child('labels').ref,
      lifetime: p.child('lifetime').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      pem_ca_certificate: p.child('pem_ca_certificate').ref,
      pem_ca_certificates: p.child('pem_ca_certificates').ref,
      pool: p.child('pool').ref,
      project: p.child('project').ref,
      skip_grace_period: p.child('skip_grace_period').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    privateca_certificate_template(name, block): {
      local p = path(['google_privateca_certificate_template', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_privateca_certificate_template: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                maximum_lifetime: build.template(std.get(block, 'maximum_lifetime', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      maximum_lifetime: p.child('maximum_lifetime').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    privateca_certificate_template_iam_binding(name, block): {
      local p = path(['google_privateca_certificate_template_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_privateca_certificate_template_iam_binding: {
              [name]: std.prune({
                certificate_template: build.template(block.certificate_template),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      certificate_template: p.child('certificate_template').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    privateca_certificate_template_iam_member(name, block): {
      local p = path(['google_privateca_certificate_template_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_privateca_certificate_template_iam_member: {
              [name]: std.prune({
                certificate_template: build.template(block.certificate_template),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      certificate_template: p.child('certificate_template').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    privateca_certificate_template_iam_policy(name, block): {
      local p = path(['google_privateca_certificate_template_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_privateca_certificate_template_iam_policy: {
              [name]: std.prune({
                certificate_template: build.template(block.certificate_template),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      certificate_template: p.child('certificate_template').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    privileged_access_manager_entitlement(name, block): {
      local p = path(['google_privileged_access_manager_entitlement', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_privileged_access_manager_entitlement: {
              [name]: std.prune({
                entitlement_id: build.template(block.entitlement_id),
                location: build.template(block.location),
                max_request_duration: build.template(block.max_request_duration),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      entitlement_id: p.child('entitlement_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      max_request_duration: p.child('max_request_duration').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      state: p.child('state').ref,
      update_time: p.child('update_time').ref,
    },
    project(name, block): {
      local p = path(['google_project', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_project: {
              [name]: std.prune({
                auto_create_network: build.template(std.get(block, 'auto_create_network', null, true)),
                billing_account: build.template(std.get(block, 'billing_account', null, true)),
                deletion_policy: build.template(std.get(block, 'deletion_policy', null, true)),
                folder_id: build.template(std.get(block, 'folder_id', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                org_id: build.template(std.get(block, 'org_id', null, true)),
                project_id: build.template(block.project_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      auto_create_network: p.child('auto_create_network').ref,
      billing_account: p.child('billing_account').ref,
      deletion_policy: p.child('deletion_policy').ref,
      effective_labels: p.child('effective_labels').ref,
      folder_id: p.child('folder_id').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      number: p.child('number').ref,
      org_id: p.child('org_id').ref,
      project_id: p.child('project_id').ref,
      tags: p.child('tags').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    project_access_approval_settings(name, block): {
      local p = path(['google_project_access_approval_settings', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_project_access_approval_settings: {
              [name]: std.prune({
                active_key_version: build.template(std.get(block, 'active_key_version', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
                project_id: build.template(block.project_id),
              }),
            },
          },
        },
      },
      active_key_version: p.child('active_key_version').ref,
      ancestor_has_active_key_version: p.child('ancestor_has_active_key_version').ref,
      enrolled_ancestor: p.child('enrolled_ancestor').ref,
      id: p.child('id').ref,
      invalid_key_version: p.child('invalid_key_version').ref,
      name: p.child('name').ref,
      notification_emails: p.child('notification_emails').ref,
      project: p.child('project').ref,
      project_id: p.child('project_id').ref,
    },
    project_default_service_accounts(name, block): {
      local p = path(['google_project_default_service_accounts', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_project_default_service_accounts: {
              [name]: std.prune({
                action: build.template(block.action),
                project: build.template(block.project),
                restore_policy: build.template(std.get(block, 'restore_policy', null, true)),
              }),
            },
          },
        },
      },
      action: p.child('action').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      restore_policy: p.child('restore_policy').ref,
      service_accounts: p.child('service_accounts').ref,
    },
    project_iam_audit_config(name, block): {
      local p = path(['google_project_iam_audit_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_project_iam_audit_config: {
              [name]: std.prune({
                project: build.template(block.project),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
    },
    project_iam_binding(name, block): {
      local p = path(['google_project_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_project_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                project: build.template(block.project),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    project_iam_custom_role(name, block): {
      local p = path(['google_project_iam_custom_role', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_project_iam_custom_role: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                permissions: build.template(block.permissions),
                role_id: build.template(block.role_id),
                stage: build.template(std.get(block, 'stage', null, true)),
                title: build.template(block.title),
              }),
            },
          },
        },
      },
      deleted: p.child('deleted').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      permissions: p.child('permissions').ref,
      project: p.child('project').ref,
      role_id: p.child('role_id').ref,
      stage: p.child('stage').ref,
      title: p.child('title').ref,
    },
    project_iam_member(name, block): {
      local p = path(['google_project_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_project_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                project: build.template(block.project),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    project_iam_member_remove(name, block): {
      local p = path(['google_project_iam_member_remove', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_project_iam_member_remove: {
              [name]: std.prune({
                member: build.template(block.member),
                project: build.template(block.project),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    project_iam_policy(name, block): {
      local p = path(['google_project_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_project_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                project: build.template(block.project),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    project_organization_policy(name, block): {
      local p = path(['google_project_organization_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_project_organization_policy: {
              [name]: std.prune({
                constraint: build.template(block.constraint),
                project: build.template(block.project),
              }),
            },
          },
        },
      },
      constraint: p.child('constraint').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      update_time: p.child('update_time').ref,
      version: p.child('version').ref,
    },
    project_service(name, block): {
      local p = path(['google_project_service', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_project_service: {
              [name]: std.prune({
                disable_dependent_services: build.template(std.get(block, 'disable_dependent_services', null, true)),
                disable_on_destroy: build.template(std.get(block, 'disable_on_destroy', null, true)),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      disable_dependent_services: p.child('disable_dependent_services').ref,
      disable_on_destroy: p.child('disable_on_destroy').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
    },
    project_usage_export_bucket(name, block): {
      local p = path(['google_project_usage_export_bucket', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_project_usage_export_bucket: {
              [name]: std.prune({
                bucket_name: build.template(block.bucket_name),
                prefix: build.template(std.get(block, 'prefix', null, true)),
              }),
            },
          },
        },
      },
      bucket_name: p.child('bucket_name').ref,
      id: p.child('id').ref,
      prefix: p.child('prefix').ref,
      project: p.child('project').ref,
    },
    public_ca_external_account_key(name, block): {
      local p = path(['google_public_ca_external_account_key', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_public_ca_external_account_key: {
              [name]: std.prune({
                location: build.template(std.get(block, 'location', null, true)),
              }),
            },
          },
        },
      },
      b64_mac_key: p.child('b64_mac_key').ref,
      id: p.child('id').ref,
      key_id: p.child('key_id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    pubsub_lite_reservation(name, block): {
      local p = path(['google_pubsub_lite_reservation', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_lite_reservation: {
              [name]: std.prune({
                name: build.template(block.name),
                region: build.template(std.get(block, 'region', null, true)),
                throughput_capacity: build.template(block.throughput_capacity),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      throughput_capacity: p.child('throughput_capacity').ref,
    },
    pubsub_lite_subscription(name, block): {
      local p = path(['google_pubsub_lite_subscription', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_lite_subscription: {
              [name]: std.prune({
                name: build.template(block.name),
                region: build.template(std.get(block, 'region', null, true)),
                topic: build.template(block.topic),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      topic: p.child('topic').ref,
      zone: p.child('zone').ref,
    },
    pubsub_lite_topic(name, block): {
      local p = path(['google_pubsub_lite_topic', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_lite_topic: {
              [name]: std.prune({
                name: build.template(block.name),
                region: build.template(std.get(block, 'region', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      zone: p.child('zone').ref,
    },
    pubsub_schema(name, block): {
      local p = path(['google_pubsub_schema', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_schema: {
              [name]: std.prune({
                definition: build.template(std.get(block, 'definition', null, true)),
                name: build.template(block.name),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      definition: p.child('definition').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      type: p.child('type').ref,
    },
    pubsub_schema_iam_binding(name, block): {
      local p = path(['google_pubsub_schema_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_schema_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                schema: build.template(block.schema),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      schema: p.child('schema').ref,
    },
    pubsub_schema_iam_member(name, block): {
      local p = path(['google_pubsub_schema_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_schema_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                schema: build.template(block.schema),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      schema: p.child('schema').ref,
    },
    pubsub_schema_iam_policy(name, block): {
      local p = path(['google_pubsub_schema_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_schema_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                schema: build.template(block.schema),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      schema: p.child('schema').ref,
    },
    pubsub_subscription(name, block): {
      local p = path(['google_pubsub_subscription', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_subscription: {
              [name]: std.prune({
                enable_exactly_once_delivery: build.template(std.get(block, 'enable_exactly_once_delivery', null, true)),
                enable_message_ordering: build.template(std.get(block, 'enable_message_ordering', null, true)),
                filter: build.template(std.get(block, 'filter', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                message_retention_duration: build.template(std.get(block, 'message_retention_duration', null, true)),
                name: build.template(block.name),
                retain_acked_messages: build.template(std.get(block, 'retain_acked_messages', null, true)),
                topic: build.template(block.topic),
              }),
            },
          },
        },
      },
      ack_deadline_seconds: p.child('ack_deadline_seconds').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_exactly_once_delivery: p.child('enable_exactly_once_delivery').ref,
      enable_message_ordering: p.child('enable_message_ordering').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      message_retention_duration: p.child('message_retention_duration').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      retain_acked_messages: p.child('retain_acked_messages').ref,
      terraform_labels: p.child('terraform_labels').ref,
      topic: p.child('topic').ref,
    },
    pubsub_subscription_iam_binding(name, block): {
      local p = path(['google_pubsub_subscription_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_subscription_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                subscription: build.template(block.subscription),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      subscription: p.child('subscription').ref,
    },
    pubsub_subscription_iam_member(name, block): {
      local p = path(['google_pubsub_subscription_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_subscription_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                subscription: build.template(block.subscription),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      subscription: p.child('subscription').ref,
    },
    pubsub_subscription_iam_policy(name, block): {
      local p = path(['google_pubsub_subscription_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_subscription_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                subscription: build.template(block.subscription),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      subscription: p.child('subscription').ref,
    },
    pubsub_topic(name, block): {
      local p = path(['google_pubsub_topic', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_topic: {
              [name]: std.prune({
                kms_key_name: build.template(std.get(block, 'kms_key_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                message_retention_duration: build.template(std.get(block, 'message_retention_duration', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      labels: p.child('labels').ref,
      message_retention_duration: p.child('message_retention_duration').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    pubsub_topic_iam_binding(name, block): {
      local p = path(['google_pubsub_topic_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_topic_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                topic: build.template(block.topic),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      topic: p.child('topic').ref,
    },
    pubsub_topic_iam_member(name, block): {
      local p = path(['google_pubsub_topic_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_topic_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                topic: build.template(block.topic),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      topic: p.child('topic').ref,
    },
    pubsub_topic_iam_policy(name, block): {
      local p = path(['google_pubsub_topic_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_pubsub_topic_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                topic: build.template(block.topic),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      topic: p.child('topic').ref,
    },
    recaptcha_enterprise_key(name, block): {
      local p = path(['google_recaptcha_enterprise_key', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_recaptcha_enterprise_key: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                labels: build.template(std.get(block, 'labels', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    redis_cluster(name, block): {
      local p = path(['google_redis_cluster', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_redis_cluster: {
              [name]: std.prune({
                authorization_mode: build.template(std.get(block, 'authorization_mode', null, true)),
                deletion_protection_enabled: build.template(std.get(block, 'deletion_protection_enabled', null, true)),
                redis_configs: build.template(std.get(block, 'redis_configs', null, true)),
                replica_count: build.template(std.get(block, 'replica_count', null, true)),
                shard_count: build.template(block.shard_count),
                transit_encryption_mode: build.template(std.get(block, 'transit_encryption_mode', null, true)),
              }),
            },
          },
        },
      },
      authorization_mode: p.child('authorization_mode').ref,
      create_time: p.child('create_time').ref,
      deletion_protection_enabled: p.child('deletion_protection_enabled').ref,
      discovery_endpoints: p.child('discovery_endpoints').ref,
      id: p.child('id').ref,
      maintenance_schedule: p.child('maintenance_schedule').ref,
      name: p.child('name').ref,
      node_type: p.child('node_type').ref,
      precise_size_gb: p.child('precise_size_gb').ref,
      project: p.child('project').ref,
      psc_connections: p.child('psc_connections').ref,
      redis_configs: p.child('redis_configs').ref,
      region: p.child('region').ref,
      replica_count: p.child('replica_count').ref,
      shard_count: p.child('shard_count').ref,
      size_gb: p.child('size_gb').ref,
      state: p.child('state').ref,
      state_info: p.child('state_info').ref,
      transit_encryption_mode: p.child('transit_encryption_mode').ref,
      uid: p.child('uid').ref,
    },
    redis_instance(name, block): {
      local p = path(['google_redis_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_redis_instance: {
              [name]: std.prune({
                auth_enabled: build.template(std.get(block, 'auth_enabled', null, true)),
                connect_mode: build.template(std.get(block, 'connect_mode', null, true)),
                customer_managed_key: build.template(std.get(block, 'customer_managed_key', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                memory_size_gb: build.template(block.memory_size_gb),
                name: build.template(block.name),
                redis_configs: build.template(std.get(block, 'redis_configs', null, true)),
                tier: build.template(std.get(block, 'tier', null, true)),
                transit_encryption_mode: build.template(std.get(block, 'transit_encryption_mode', null, true)),
              }),
            },
          },
        },
      },
      alternative_location_id: p.child('alternative_location_id').ref,
      auth_enabled: p.child('auth_enabled').ref,
      auth_string: p.child('auth_string').ref,
      authorized_network: p.child('authorized_network').ref,
      connect_mode: p.child('connect_mode').ref,
      create_time: p.child('create_time').ref,
      current_location_id: p.child('current_location_id').ref,
      customer_managed_key: p.child('customer_managed_key').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      host: p.child('host').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location_id: p.child('location_id').ref,
      maintenance_schedule: p.child('maintenance_schedule').ref,
      maintenance_version: p.child('maintenance_version').ref,
      memory_size_gb: p.child('memory_size_gb').ref,
      name: p.child('name').ref,
      nodes: p.child('nodes').ref,
      persistence_iam_identity: p.child('persistence_iam_identity').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
      read_endpoint: p.child('read_endpoint').ref,
      read_endpoint_port: p.child('read_endpoint_port').ref,
      read_replicas_mode: p.child('read_replicas_mode').ref,
      redis_configs: p.child('redis_configs').ref,
      redis_version: p.child('redis_version').ref,
      region: p.child('region').ref,
      replica_count: p.child('replica_count').ref,
      reserved_ip_range: p.child('reserved_ip_range').ref,
      secondary_ip_range: p.child('secondary_ip_range').ref,
      server_ca_certs: p.child('server_ca_certs').ref,
      terraform_labels: p.child('terraform_labels').ref,
      tier: p.child('tier').ref,
      transit_encryption_mode: p.child('transit_encryption_mode').ref,
    },
    resource_manager_lien(name, block): {
      local p = path(['google_resource_manager_lien', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_resource_manager_lien: {
              [name]: std.prune({
                origin: build.template(block.origin),
                parent: build.template(block.parent),
                reason: build.template(block.reason),
                restrictions: build.template(block.restrictions),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      origin: p.child('origin').ref,
      parent: p.child('parent').ref,
      reason: p.child('reason').ref,
      restrictions: p.child('restrictions').ref,
    },
    scc_event_threat_detection_custom_module(name, block): {
      local p = path(['google_scc_event_threat_detection_custom_module', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_event_threat_detection_custom_module: {
              [name]: std.prune({
                config: build.template(block.config),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enablement_state: build.template(block.enablement_state),
                organization: build.template(block.organization),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      config: p.child('config').ref,
      display_name: p.child('display_name').ref,
      enablement_state: p.child('enablement_state').ref,
      id: p.child('id').ref,
      last_editor: p.child('last_editor').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    scc_folder_custom_module(name, block): {
      local p = path(['google_scc_folder_custom_module', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_folder_custom_module: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                enablement_state: build.template(block.enablement_state),
                folder: build.template(block.folder),
              }),
            },
          },
        },
      },
      ancestor_module: p.child('ancestor_module').ref,
      display_name: p.child('display_name').ref,
      enablement_state: p.child('enablement_state').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      last_editor: p.child('last_editor').ref,
      name: p.child('name').ref,
      update_time: p.child('update_time').ref,
    },
    scc_folder_notification_config(name, block): {
      local p = path(['google_scc_folder_notification_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_folder_notification_config: {
              [name]: std.prune({
                config_id: build.template(block.config_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(block.folder),
                pubsub_topic: build.template(block.pubsub_topic),
              }),
            },
          },
        },
      },
      config_id: p.child('config_id').ref,
      description: p.child('description').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      pubsub_topic: p.child('pubsub_topic').ref,
      service_account: p.child('service_account').ref,
    },
    scc_folder_scc_big_query_export(name, block): {
      local p = path(['google_scc_folder_scc_big_query_export', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_folder_scc_big_query_export: {
              [name]: std.prune({
                big_query_export_id: build.template(block.big_query_export_id),
                dataset: build.template(block.dataset),
                description: build.template(block.description),
                filter: build.template(block.filter),
                folder: build.template(block.folder),
              }),
            },
          },
        },
      },
      big_query_export_id: p.child('big_query_export_id').ref,
      create_time: p.child('create_time').ref,
      dataset: p.child('dataset').ref,
      description: p.child('description').ref,
      filter: p.child('filter').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      most_recent_editor: p.child('most_recent_editor').ref,
      name: p.child('name').ref,
      principal: p.child('principal').ref,
      update_time: p.child('update_time').ref,
    },
    scc_management_folder_security_health_analytics_custom_module(name, block): {
      local p = path(['google_scc_management_folder_security_health_analytics_custom_module', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_management_folder_security_health_analytics_custom_module: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enablement_state: build.template(std.get(block, 'enablement_state', null, true)),
                folder: build.template(block.folder),
                location: build.template(std.get(block, 'location', null, true)),
              }),
            },
          },
        },
      },
      ancestor_module: p.child('ancestor_module').ref,
      display_name: p.child('display_name').ref,
      enablement_state: p.child('enablement_state').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      last_editor: p.child('last_editor').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      update_time: p.child('update_time').ref,
    },
    scc_management_organization_event_threat_detection_custom_module(name, block): {
      local p = path(['google_scc_management_organization_event_threat_detection_custom_module', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_management_organization_event_threat_detection_custom_module: {
              [name]: std.prune({
                config: build.template(std.get(block, 'config', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enablement_state: build.template(std.get(block, 'enablement_state', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                organization: build.template(block.organization),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      config: p.child('config').ref,
      display_name: p.child('display_name').ref,
      enablement_state: p.child('enablement_state').ref,
      id: p.child('id').ref,
      last_editor: p.child('last_editor').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    scc_management_organization_security_health_analytics_custom_module(name, block): {
      local p = path(['google_scc_management_organization_security_health_analytics_custom_module', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_management_organization_security_health_analytics_custom_module: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enablement_state: build.template(std.get(block, 'enablement_state', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                organization: build.template(block.organization),
              }),
            },
          },
        },
      },
      ancestor_module: p.child('ancestor_module').ref,
      display_name: p.child('display_name').ref,
      enablement_state: p.child('enablement_state').ref,
      id: p.child('id').ref,
      last_editor: p.child('last_editor').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      update_time: p.child('update_time').ref,
    },
    scc_management_project_security_health_analytics_custom_module(name, block): {
      local p = path(['google_scc_management_project_security_health_analytics_custom_module', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_management_project_security_health_analytics_custom_module: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enablement_state: build.template(std.get(block, 'enablement_state', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
              }),
            },
          },
        },
      },
      ancestor_module: p.child('ancestor_module').ref,
      display_name: p.child('display_name').ref,
      enablement_state: p.child('enablement_state').ref,
      id: p.child('id').ref,
      last_editor: p.child('last_editor').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      update_time: p.child('update_time').ref,
    },
    scc_mute_config(name, block): {
      local p = path(['google_scc_mute_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_mute_config: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                filter: build.template(block.filter),
                mute_config_id: build.template(block.mute_config_id),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      most_recent_editor: p.child('most_recent_editor').ref,
      mute_config_id: p.child('mute_config_id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      update_time: p.child('update_time').ref,
    },
    scc_notification_config(name, block): {
      local p = path(['google_scc_notification_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_notification_config: {
              [name]: std.prune({
                config_id: build.template(block.config_id),
                description: build.template(std.get(block, 'description', null, true)),
                organization: build.template(block.organization),
                pubsub_topic: build.template(block.pubsub_topic),
              }),
            },
          },
        },
      },
      config_id: p.child('config_id').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      pubsub_topic: p.child('pubsub_topic').ref,
      service_account: p.child('service_account').ref,
    },
    scc_organization_custom_module(name, block): {
      local p = path(['google_scc_organization_custom_module', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_organization_custom_module: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                enablement_state: build.template(block.enablement_state),
                organization: build.template(block.organization),
              }),
            },
          },
        },
      },
      ancestor_module: p.child('ancestor_module').ref,
      display_name: p.child('display_name').ref,
      enablement_state: p.child('enablement_state').ref,
      id: p.child('id').ref,
      last_editor: p.child('last_editor').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      update_time: p.child('update_time').ref,
    },
    scc_organization_scc_big_query_export(name, block): {
      local p = path(['google_scc_organization_scc_big_query_export', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_organization_scc_big_query_export: {
              [name]: std.prune({
                big_query_export_id: build.template(block.big_query_export_id),
                dataset: build.template(std.get(block, 'dataset', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                filter: build.template(std.get(block, 'filter', null, true)),
                organization: build.template(block.organization),
              }),
            },
          },
        },
      },
      big_query_export_id: p.child('big_query_export_id').ref,
      create_time: p.child('create_time').ref,
      dataset: p.child('dataset').ref,
      description: p.child('description').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      most_recent_editor: p.child('most_recent_editor').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      principal: p.child('principal').ref,
      update_time: p.child('update_time').ref,
    },
    scc_project_custom_module(name, block): {
      local p = path(['google_scc_project_custom_module', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_project_custom_module: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                enablement_state: build.template(block.enablement_state),
              }),
            },
          },
        },
      },
      ancestor_module: p.child('ancestor_module').ref,
      display_name: p.child('display_name').ref,
      enablement_state: p.child('enablement_state').ref,
      id: p.child('id').ref,
      last_editor: p.child('last_editor').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      update_time: p.child('update_time').ref,
    },
    scc_project_notification_config(name, block): {
      local p = path(['google_scc_project_notification_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_project_notification_config: {
              [name]: std.prune({
                config_id: build.template(block.config_id),
                description: build.template(std.get(block, 'description', null, true)),
                pubsub_topic: build.template(block.pubsub_topic),
              }),
            },
          },
        },
      },
      config_id: p.child('config_id').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      pubsub_topic: p.child('pubsub_topic').ref,
      service_account: p.child('service_account').ref,
    },
    scc_project_scc_big_query_export(name, block): {
      local p = path(['google_scc_project_scc_big_query_export', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_project_scc_big_query_export: {
              [name]: std.prune({
                big_query_export_id: build.template(block.big_query_export_id),
                dataset: build.template(std.get(block, 'dataset', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                filter: build.template(std.get(block, 'filter', null, true)),
              }),
            },
          },
        },
      },
      big_query_export_id: p.child('big_query_export_id').ref,
      create_time: p.child('create_time').ref,
      dataset: p.child('dataset').ref,
      description: p.child('description').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      most_recent_editor: p.child('most_recent_editor').ref,
      name: p.child('name').ref,
      principal: p.child('principal').ref,
      project: p.child('project').ref,
      update_time: p.child('update_time').ref,
    },
    scc_source(name, block): {
      local p = path(['google_scc_source', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_source: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                organization: build.template(block.organization),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
    },
    scc_source_iam_binding(name, block): {
      local p = path(['google_scc_source_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_source_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                organization: build.template(block.organization),
                role: build.template(block.role),
                source: build.template(block.source),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      organization: p.child('organization').ref,
      role: p.child('role').ref,
      source: p.child('source').ref,
    },
    scc_source_iam_member(name, block): {
      local p = path(['google_scc_source_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_source_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                organization: build.template(block.organization),
                role: build.template(block.role),
                source: build.template(block.source),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      organization: p.child('organization').ref,
      role: p.child('role').ref,
      source: p.child('source').ref,
    },
    scc_source_iam_policy(name, block): {
      local p = path(['google_scc_source_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_source_iam_policy: {
              [name]: std.prune({
                organization: build.template(block.organization),
                policy_data: build.template(block.policy_data),
                source: build.template(block.source),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      organization: p.child('organization').ref,
      policy_data: p.child('policy_data').ref,
      source: p.child('source').ref,
    },
    scc_v2_folder_mute_config(name, block): {
      local p = path(['google_scc_v2_folder_mute_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_folder_mute_config: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                filter: build.template(block.filter),
                folder: build.template(block.folder),
                location: build.template(std.get(block, 'location', null, true)),
                mute_config_id: build.template(block.mute_config_id),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      filter: p.child('filter').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      most_recent_editor: p.child('most_recent_editor').ref,
      mute_config_id: p.child('mute_config_id').ref,
      name: p.child('name').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    scc_v2_folder_notification_config(name, block): {
      local p = path(['google_scc_v2_folder_notification_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_folder_notification_config: {
              [name]: std.prune({
                config_id: build.template(block.config_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(block.folder),
                location: build.template(std.get(block, 'location', null, true)),
                pubsub_topic: build.template(block.pubsub_topic),
              }),
            },
          },
        },
      },
      config_id: p.child('config_id').ref,
      description: p.child('description').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      pubsub_topic: p.child('pubsub_topic').ref,
      service_account: p.child('service_account').ref,
    },
    scc_v2_folder_scc_big_query_export(name, block): {
      local p = path(['google_scc_v2_folder_scc_big_query_export', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_folder_scc_big_query_export: {
              [name]: std.prune({
                big_query_export_id: build.template(block.big_query_export_id),
                dataset: build.template(std.get(block, 'dataset', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                filter: build.template(std.get(block, 'filter', null, true)),
                folder: build.template(block.folder),
                location: build.template(std.get(block, 'location', null, true)),
              }),
            },
          },
        },
      },
      big_query_export_id: p.child('big_query_export_id').ref,
      create_time: p.child('create_time').ref,
      dataset: p.child('dataset').ref,
      description: p.child('description').ref,
      filter: p.child('filter').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      most_recent_editor: p.child('most_recent_editor').ref,
      name: p.child('name').ref,
      principal: p.child('principal').ref,
      update_time: p.child('update_time').ref,
    },
    scc_v2_organization_mute_config(name, block): {
      local p = path(['google_scc_v2_organization_mute_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_organization_mute_config: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                filter: build.template(block.filter),
                location: build.template(std.get(block, 'location', null, true)),
                mute_config_id: build.template(block.mute_config_id),
                organization: build.template(block.organization),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      most_recent_editor: p.child('most_recent_editor').ref,
      mute_config_id: p.child('mute_config_id').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    scc_v2_organization_notification_config(name, block): {
      local p = path(['google_scc_v2_organization_notification_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_organization_notification_config: {
              [name]: std.prune({
                config_id: build.template(block.config_id),
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                organization: build.template(block.organization),
                pubsub_topic: build.template(block.pubsub_topic),
              }),
            },
          },
        },
      },
      config_id: p.child('config_id').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      pubsub_topic: p.child('pubsub_topic').ref,
      service_account: p.child('service_account').ref,
    },
    scc_v2_organization_scc_big_query_export(name, block): {
      local p = path(['google_scc_v2_organization_scc_big_query_export', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_organization_scc_big_query_export: {
              [name]: std.prune({
                big_query_export_id: build.template(block.big_query_export_id),
                dataset: build.template(std.get(block, 'dataset', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                filter: build.template(std.get(block, 'filter', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                organization: build.template(block.organization),
              }),
            },
          },
        },
      },
      big_query_export_id: p.child('big_query_export_id').ref,
      create_time: p.child('create_time').ref,
      dataset: p.child('dataset').ref,
      description: p.child('description').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      most_recent_editor: p.child('most_recent_editor').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      principal: p.child('principal').ref,
      update_time: p.child('update_time').ref,
    },
    scc_v2_organization_scc_big_query_exports(name, block): {
      local p = path(['google_scc_v2_organization_scc_big_query_exports', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_organization_scc_big_query_exports: {
              [name]: std.prune({
                big_query_export_id: build.template(block.big_query_export_id),
                dataset: build.template(std.get(block, 'dataset', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                filter: build.template(std.get(block, 'filter', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                organization: build.template(block.organization),
              }),
            },
          },
        },
      },
      big_query_export_id: p.child('big_query_export_id').ref,
      create_time: p.child('create_time').ref,
      dataset: p.child('dataset').ref,
      description: p.child('description').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      most_recent_editor: p.child('most_recent_editor').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      principal: p.child('principal').ref,
      update_time: p.child('update_time').ref,
    },
    scc_v2_organization_source(name, block): {
      local p = path(['google_scc_v2_organization_source', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_organization_source: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                organization: build.template(block.organization),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
    },
    scc_v2_organization_source_iam_binding(name, block): {
      local p = path(['google_scc_v2_organization_source_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_organization_source_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                organization: build.template(block.organization),
                role: build.template(block.role),
                source: build.template(block.source),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      organization: p.child('organization').ref,
      role: p.child('role').ref,
      source: p.child('source').ref,
    },
    scc_v2_organization_source_iam_member(name, block): {
      local p = path(['google_scc_v2_organization_source_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_organization_source_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                organization: build.template(block.organization),
                role: build.template(block.role),
                source: build.template(block.source),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      organization: p.child('organization').ref,
      role: p.child('role').ref,
      source: p.child('source').ref,
    },
    scc_v2_organization_source_iam_policy(name, block): {
      local p = path(['google_scc_v2_organization_source_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_organization_source_iam_policy: {
              [name]: std.prune({
                organization: build.template(block.organization),
                policy_data: build.template(block.policy_data),
                source: build.template(block.source),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      organization: p.child('organization').ref,
      policy_data: p.child('policy_data').ref,
      source: p.child('source').ref,
    },
    scc_v2_project_mute_config(name, block): {
      local p = path(['google_scc_v2_project_mute_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_project_mute_config: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                filter: build.template(block.filter),
                location: build.template(std.get(block, 'location', null, true)),
                mute_config_id: build.template(block.mute_config_id),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      most_recent_editor: p.child('most_recent_editor').ref,
      mute_config_id: p.child('mute_config_id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    scc_v2_project_notification_config(name, block): {
      local p = path(['google_scc_v2_project_notification_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_project_notification_config: {
              [name]: std.prune({
                config_id: build.template(block.config_id),
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                pubsub_topic: build.template(std.get(block, 'pubsub_topic', null, true)),
              }),
            },
          },
        },
      },
      config_id: p.child('config_id').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      pubsub_topic: p.child('pubsub_topic').ref,
      service_account: p.child('service_account').ref,
    },
    scc_v2_project_scc_big_query_export(name, block): {
      local p = path(['google_scc_v2_project_scc_big_query_export', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_scc_v2_project_scc_big_query_export: {
              [name]: std.prune({
                big_query_export_id: build.template(block.big_query_export_id),
                dataset: build.template(std.get(block, 'dataset', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                filter: build.template(std.get(block, 'filter', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
              }),
            },
          },
        },
      },
      big_query_export_id: p.child('big_query_export_id').ref,
      create_time: p.child('create_time').ref,
      dataset: p.child('dataset').ref,
      description: p.child('description').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      most_recent_editor: p.child('most_recent_editor').ref,
      name: p.child('name').ref,
      principal: p.child('principal').ref,
      project: p.child('project').ref,
      update_time: p.child('update_time').ref,
    },
    secret_manager_regional_secret(name, block): {
      local p = path(['google_secret_manager_regional_secret', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secret_manager_regional_secret: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                secret_id: build.template(block.secret_id),
                ttl: build.template(std.get(block, 'ttl', null, true)),
                version_aliases: build.template(std.get(block, 'version_aliases', null, true)),
                version_destroy_ttl: build.template(std.get(block, 'version_destroy_ttl', null, true)),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      create_time: p.child('create_time').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      secret_id: p.child('secret_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      ttl: p.child('ttl').ref,
      version_aliases: p.child('version_aliases').ref,
      version_destroy_ttl: p.child('version_destroy_ttl').ref,
    },
    secret_manager_regional_secret_iam_binding(name, block): {
      local p = path(['google_secret_manager_regional_secret_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secret_manager_regional_secret_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                secret_id: build.template(block.secret_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      secret_id: p.child('secret_id').ref,
    },
    secret_manager_regional_secret_iam_member(name, block): {
      local p = path(['google_secret_manager_regional_secret_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secret_manager_regional_secret_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                secret_id: build.template(block.secret_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      secret_id: p.child('secret_id').ref,
    },
    secret_manager_regional_secret_iam_policy(name, block): {
      local p = path(['google_secret_manager_regional_secret_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secret_manager_regional_secret_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                secret_id: build.template(block.secret_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      secret_id: p.child('secret_id').ref,
    },
    secret_manager_regional_secret_version(name, block): {
      local p = path(['google_secret_manager_regional_secret_version', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secret_manager_regional_secret_version: {
              [name]: std.prune({
                deletion_policy: build.template(std.get(block, 'deletion_policy', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                is_secret_data_base64: build.template(std.get(block, 'is_secret_data_base64', null, true)),
                secret: build.template(block.secret),
                secret_data: build.template(block.secret_data),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      customer_managed_encryption: p.child('customer_managed_encryption').ref,
      deletion_policy: p.child('deletion_policy').ref,
      destroy_time: p.child('destroy_time').ref,
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      is_secret_data_base64: p.child('is_secret_data_base64').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      secret: p.child('secret').ref,
      secret_data: p.child('secret_data').ref,
      version: p.child('version').ref,
    },
    secret_manager_secret(name, block): {
      local p = path(['google_secret_manager_secret', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secret_manager_secret: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                secret_id: build.template(block.secret_id),
                ttl: build.template(std.get(block, 'ttl', null, true)),
                version_aliases: build.template(std.get(block, 'version_aliases', null, true)),
                version_destroy_ttl: build.template(std.get(block, 'version_destroy_ttl', null, true)),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      create_time: p.child('create_time').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      secret_id: p.child('secret_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      ttl: p.child('ttl').ref,
      version_aliases: p.child('version_aliases').ref,
      version_destroy_ttl: p.child('version_destroy_ttl').ref,
    },
    secret_manager_secret_iam_binding(name, block): {
      local p = path(['google_secret_manager_secret_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secret_manager_secret_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                secret_id: build.template(block.secret_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      secret_id: p.child('secret_id').ref,
    },
    secret_manager_secret_iam_member(name, block): {
      local p = path(['google_secret_manager_secret_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secret_manager_secret_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                secret_id: build.template(block.secret_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
      secret_id: p.child('secret_id').ref,
    },
    secret_manager_secret_iam_policy(name, block): {
      local p = path(['google_secret_manager_secret_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secret_manager_secret_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                secret_id: build.template(block.secret_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      secret_id: p.child('secret_id').ref,
    },
    secret_manager_secret_version(name, block): {
      local p = path(['google_secret_manager_secret_version', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secret_manager_secret_version: {
              [name]: std.prune({
                deletion_policy: build.template(std.get(block, 'deletion_policy', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                is_secret_data_base64: build.template(std.get(block, 'is_secret_data_base64', null, true)),
                secret: build.template(block.secret),
                secret_data: build.template(block.secret_data),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      deletion_policy: p.child('deletion_policy').ref,
      destroy_time: p.child('destroy_time').ref,
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      is_secret_data_base64: p.child('is_secret_data_base64').ref,
      name: p.child('name').ref,
      secret: p.child('secret').ref,
      secret_data: p.child('secret_data').ref,
      version: p.child('version').ref,
    },
    secure_source_manager_branch_rule(name, block): {
      local p = path(['google_secure_source_manager_branch_rule', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secure_source_manager_branch_rule: {
              [name]: std.prune({
                allow_stale_reviews: build.template(std.get(block, 'allow_stale_reviews', null, true)),
                branch_rule_id: build.template(block.branch_rule_id),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                include_pattern: build.template(block.include_pattern),
                location: build.template(block.location),
                minimum_approvals_count: build.template(std.get(block, 'minimum_approvals_count', null, true)),
                minimum_reviews_count: build.template(std.get(block, 'minimum_reviews_count', null, true)),
                repository_id: build.template(block.repository_id),
                require_comments_resolved: build.template(std.get(block, 'require_comments_resolved', null, true)),
                require_linear_history: build.template(std.get(block, 'require_linear_history', null, true)),
                require_pull_request: build.template(std.get(block, 'require_pull_request', null, true)),
              }),
            },
          },
        },
      },
      allow_stale_reviews: p.child('allow_stale_reviews').ref,
      branch_rule_id: p.child('branch_rule_id').ref,
      create_time: p.child('create_time').ref,
      disabled: p.child('disabled').ref,
      id: p.child('id').ref,
      include_pattern: p.child('include_pattern').ref,
      location: p.child('location').ref,
      minimum_approvals_count: p.child('minimum_approvals_count').ref,
      minimum_reviews_count: p.child('minimum_reviews_count').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      repository_id: p.child('repository_id').ref,
      require_comments_resolved: p.child('require_comments_resolved').ref,
      require_linear_history: p.child('require_linear_history').ref,
      require_pull_request: p.child('require_pull_request').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    secure_source_manager_instance(name, block): {
      local p = path(['google_secure_source_manager_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secure_source_manager_instance: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
                kms_key: build.template(std.get(block, 'kms_key', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      effective_labels: p.child('effective_labels').ref,
      host_config: p.child('host_config').ref,
      id: p.child('id').ref,
      instance_id: p.child('instance_id').ref,
      kms_key: p.child('kms_key').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      state_note: p.child('state_note').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    secure_source_manager_instance_iam_binding(name, block): {
      local p = path(['google_secure_source_manager_instance_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secure_source_manager_instance_iam_binding: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance_id: p.child('instance_id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    secure_source_manager_instance_iam_member(name, block): {
      local p = path(['google_secure_source_manager_instance_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secure_source_manager_instance_iam_member: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance_id: p.child('instance_id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    secure_source_manager_instance_iam_policy(name, block): {
      local p = path(['google_secure_source_manager_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secure_source_manager_instance_iam_policy: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance_id: p.child('instance_id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    secure_source_manager_repository(name, block): {
      local p = path(['google_secure_source_manager_repository', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secure_source_manager_repository: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                instance: build.template(block.instance),
                location: build.template(block.location),
                repository_id: build.template(block.repository_id),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      repository_id: p.child('repository_id').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      uris: p.child('uris').ref,
    },
    secure_source_manager_repository_iam_binding(name, block): {
      local p = path(['google_secure_source_manager_repository_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secure_source_manager_repository_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                repository_id: build.template(block.repository_id),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      repository_id: p.child('repository_id').ref,
      role: p.child('role').ref,
    },
    secure_source_manager_repository_iam_member(name, block): {
      local p = path(['google_secure_source_manager_repository_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secure_source_manager_repository_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                repository_id: build.template(block.repository_id),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      repository_id: p.child('repository_id').ref,
      role: p.child('role').ref,
    },
    secure_source_manager_repository_iam_policy(name, block): {
      local p = path(['google_secure_source_manager_repository_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_secure_source_manager_repository_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                repository_id: build.template(block.repository_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      repository_id: p.child('repository_id').ref,
    },
    securityposture_posture(name, block): {
      local p = path(['google_securityposture_posture', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_securityposture_posture: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                parent: build.template(block.parent),
                posture_id: build.template(block.posture_id),
                state: build.template(block.state),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      posture_id: p.child('posture_id').ref,
      reconciling: p.child('reconciling').ref,
      revision_id: p.child('revision_id').ref,
      state: p.child('state').ref,
      update_time: p.child('update_time').ref,
    },
    securityposture_posture_deployment(name, block): {
      local p = path(['google_securityposture_posture_deployment', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_securityposture_posture_deployment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                parent: build.template(block.parent),
                posture_deployment_id: build.template(block.posture_deployment_id),
                posture_id: build.template(block.posture_id),
                posture_revision_id: build.template(block.posture_revision_id),
                target_resource: build.template(block.target_resource),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      desired_posture_id: p.child('desired_posture_id').ref,
      desired_posture_revision_id: p.child('desired_posture_revision_id').ref,
      etag: p.child('etag').ref,
      failure_message: p.child('failure_message').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      posture_deployment_id: p.child('posture_deployment_id').ref,
      posture_id: p.child('posture_id').ref,
      posture_revision_id: p.child('posture_revision_id').ref,
      reconciling: p.child('reconciling').ref,
      state: p.child('state').ref,
      target_resource: p.child('target_resource').ref,
      update_time: p.child('update_time').ref,
    },
    service_account(name, block): {
      local p = path(['google_service_account', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_service_account: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
                create_ignore_already_exists: build.template(std.get(block, 'create_ignore_already_exists', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').ref,
      create_ignore_already_exists: p.child('create_ignore_already_exists').ref,
      description: p.child('description').ref,
      disabled: p.child('disabled').ref,
      display_name: p.child('display_name').ref,
      email: p.child('email').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      unique_id: p.child('unique_id').ref,
    },
    service_account_iam_binding(name, block): {
      local p = path(['google_service_account_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_service_account_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                service_account_id: build.template(block.service_account_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
      service_account_id: p.child('service_account_id').ref,
    },
    service_account_iam_member(name, block): {
      local p = path(['google_service_account_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_service_account_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                service_account_id: build.template(block.service_account_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
      service_account_id: p.child('service_account_id').ref,
    },
    service_account_iam_policy(name, block): {
      local p = path(['google_service_account_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_service_account_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                service_account_id: build.template(block.service_account_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      service_account_id: p.child('service_account_id').ref,
    },
    service_account_key(name, block): {
      local p = path(['google_service_account_key', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_service_account_key: {
              [name]: std.prune({
                keepers: build.template(std.get(block, 'keepers', null, true)),
                key_algorithm: build.template(std.get(block, 'key_algorithm', null, true)),
                private_key_type: build.template(std.get(block, 'private_key_type', null, true)),
                public_key_data: build.template(std.get(block, 'public_key_data', null, true)),
                public_key_type: build.template(std.get(block, 'public_key_type', null, true)),
                service_account_id: build.template(block.service_account_id),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      keepers: p.child('keepers').ref,
      key_algorithm: p.child('key_algorithm').ref,
      name: p.child('name').ref,
      private_key: p.child('private_key').ref,
      private_key_type: p.child('private_key_type').ref,
      public_key: p.child('public_key').ref,
      public_key_data: p.child('public_key_data').ref,
      public_key_type: p.child('public_key_type').ref,
      service_account_id: p.child('service_account_id').ref,
      valid_after: p.child('valid_after').ref,
      valid_before: p.child('valid_before').ref,
    },
    service_networking_connection(name, block): {
      local p = path(['google_service_networking_connection', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_service_networking_connection: {
              [name]: std.prune({
                deletion_policy: build.template(std.get(block, 'deletion_policy', null, true)),
                network: build.template(block.network),
                reserved_peering_ranges: build.template(block.reserved_peering_ranges),
                service: build.template(block.service),
                update_on_creation_fail: build.template(std.get(block, 'update_on_creation_fail', null, true)),
              }),
            },
          },
        },
      },
      deletion_policy: p.child('deletion_policy').ref,
      id: p.child('id').ref,
      network: p.child('network').ref,
      peering: p.child('peering').ref,
      reserved_peering_ranges: p.child('reserved_peering_ranges').ref,
      service: p.child('service').ref,
      update_on_creation_fail: p.child('update_on_creation_fail').ref,
    },
    service_networking_peered_dns_domain(name, block): {
      local p = path(['google_service_networking_peered_dns_domain', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_service_networking_peered_dns_domain: {
              [name]: std.prune({
                dns_suffix: build.template(block.dns_suffix),
                name: build.template(block.name),
                network: build.template(block.network),
                service: build.template(std.get(block, 'service', null, true)),
              }),
            },
          },
        },
      },
      dns_suffix: p.child('dns_suffix').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      parent: p.child('parent').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
    },
    service_networking_vpc_service_controls(name, block): {
      local p = path(['google_service_networking_vpc_service_controls', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_service_networking_vpc_service_controls: {
              [name]: std.prune({
                enabled: build.template(block.enabled),
                network: build.template(block.network),
                project: build.template(std.get(block, 'project', null, true)),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
    },
    site_verification_owner(name, block): {
      local p = path(['google_site_verification_owner', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_site_verification_owner: {
              [name]: std.prune({
                email: build.template(block.email),
                web_resource_id: build.template(block.web_resource_id),
              }),
            },
          },
        },
      },
      email: p.child('email').ref,
      id: p.child('id').ref,
      web_resource_id: p.child('web_resource_id').ref,
    },
    site_verification_web_resource(name, block): {
      local p = path(['google_site_verification_web_resource', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_site_verification_web_resource: {
              [name]: std.prune({
                verification_method: build.template(block.verification_method),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      owners: p.child('owners').ref,
      verification_method: p.child('verification_method').ref,
      web_resource_id: p.child('web_resource_id').ref,
    },
    sourcerepo_repository(name, block): {
      local p = path(['google_sourcerepo_repository', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_sourcerepo_repository: {
              [name]: std.prune({
                create_ignore_already_exists: build.template(std.get(block, 'create_ignore_already_exists', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_ignore_already_exists: p.child('create_ignore_already_exists').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      size: p.child('size').ref,
      url: p.child('url').ref,
    },
    sourcerepo_repository_iam_binding(name, block): {
      local p = path(['google_sourcerepo_repository_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_sourcerepo_repository_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                repository: build.template(block.repository),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      repository: p.child('repository').ref,
      role: p.child('role').ref,
    },
    sourcerepo_repository_iam_member(name, block): {
      local p = path(['google_sourcerepo_repository_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_sourcerepo_repository_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                repository: build.template(block.repository),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      repository: p.child('repository').ref,
      role: p.child('role').ref,
    },
    sourcerepo_repository_iam_policy(name, block): {
      local p = path(['google_sourcerepo_repository_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_sourcerepo_repository_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                repository: build.template(block.repository),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      repository: p.child('repository').ref,
    },
    spanner_backup_schedule(name, block): {
      local p = path(['google_spanner_backup_schedule', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_spanner_backup_schedule: {
              [name]: std.prune({
                database: build.template(block.database),
                instance: build.template(block.instance),
                name: build.template(std.get(block, 'name', null, true)),
                retention_duration: build.template(block.retention_duration),
              }),
            },
          },
        },
      },
      database: p.child('database').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      retention_duration: p.child('retention_duration').ref,
    },
    spanner_database(name, block): {
      local p = path(['google_spanner_database', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_spanner_database: {
              [name]: std.prune({
                ddl: build.template(std.get(block, 'ddl', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                enable_drop_protection: build.template(std.get(block, 'enable_drop_protection', null, true)),
                instance: build.template(block.instance),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      database_dialect: p.child('database_dialect').ref,
      ddl: p.child('ddl').ref,
      deletion_protection: p.child('deletion_protection').ref,
      enable_drop_protection: p.child('enable_drop_protection').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      version_retention_period: p.child('version_retention_period').ref,
    },
    spanner_database_iam_binding(name, block): {
      local p = path(['google_spanner_database_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_spanner_database_iam_binding: {
              [name]: std.prune({
                database: build.template(block.database),
                instance: build.template(block.instance),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      database: p.child('database').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    spanner_database_iam_member(name, block): {
      local p = path(['google_spanner_database_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_spanner_database_iam_member: {
              [name]: std.prune({
                database: build.template(block.database),
                instance: build.template(block.instance),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      database: p.child('database').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    spanner_database_iam_policy(name, block): {
      local p = path(['google_spanner_database_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_spanner_database_iam_policy: {
              [name]: std.prune({
                database: build.template(block.database),
                instance: build.template(block.instance),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      database: p.child('database').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    spanner_instance(name, block): {
      local p = path(['google_spanner_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_spanner_instance: {
              [name]: std.prune({
                config: build.template(block.config),
                display_name: build.template(block.display_name),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
              }),
            },
          },
        },
      },
      config: p.child('config').ref,
      display_name: p.child('display_name').ref,
      edition: p.child('edition').ref,
      effective_labels: p.child('effective_labels').ref,
      force_destroy: p.child('force_destroy').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      num_nodes: p.child('num_nodes').ref,
      processing_units: p.child('processing_units').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    spanner_instance_config(name, block): {
      local p = path(['google_spanner_instance_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_spanner_instance_config: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                labels: build.template(std.get(block, 'labels', null, true)),
              }),
            },
          },
        },
      },
      base_config: p.child('base_config').ref,
      config_type: p.child('config_type').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    spanner_instance_iam_binding(name, block): {
      local p = path(['google_spanner_instance_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_spanner_instance_iam_binding: {
              [name]: std.prune({
                instance: build.template(block.instance),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      members: p.child('members').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    spanner_instance_iam_member(name, block): {
      local p = path(['google_spanner_instance_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_spanner_instance_iam_member: {
              [name]: std.prune({
                instance: build.template(block.instance),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    spanner_instance_iam_policy(name, block): {
      local p = path(['google_spanner_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_spanner_instance_iam_policy: {
              [name]: std.prune({
                instance: build.template(block.instance),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    sql_database(name, block): {
      local p = path(['google_sql_database', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_sql_database: {
              [name]: std.prune({
                deletion_policy: build.template(std.get(block, 'deletion_policy', null, true)),
                instance: build.template(block.instance),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      charset: p.child('charset').ref,
      collation: p.child('collation').ref,
      deletion_policy: p.child('deletion_policy').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
    },
    sql_database_instance(name, block): {
      local p = path(['google_sql_database_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_sql_database_instance: {
              [name]: std.prune({
                database_version: build.template(block.database_version),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                root_password: build.template(std.get(block, 'root_password', null, true)),
              }),
            },
          },
        },
      },
      available_maintenance_versions: p.child('available_maintenance_versions').ref,
      connection_name: p.child('connection_name').ref,
      database_version: p.child('database_version').ref,
      deletion_protection: p.child('deletion_protection').ref,
      dns_name: p.child('dns_name').ref,
      encryption_key_name: p.child('encryption_key_name').ref,
      first_ip_address: p.child('first_ip_address').ref,
      id: p.child('id').ref,
      instance_type: p.child('instance_type').ref,
      ip_address: p.child('ip_address').ref,
      maintenance_version: p.child('maintenance_version').ref,
      master_instance_name: p.child('master_instance_name').ref,
      name: p.child('name').ref,
      private_ip_address: p.child('private_ip_address').ref,
      project: p.child('project').ref,
      psc_service_attachment_link: p.child('psc_service_attachment_link').ref,
      public_ip_address: p.child('public_ip_address').ref,
      region: p.child('region').ref,
      root_password: p.child('root_password').ref,
      self_link: p.child('self_link').ref,
      server_ca_cert: p.child('server_ca_cert').ref,
      service_account_email_address: p.child('service_account_email_address').ref,
    },
    sql_source_representation_instance(name, block): {
      local p = path(['google_sql_source_representation_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_sql_source_representation_instance: {
              [name]: std.prune({
                ca_certificate: build.template(std.get(block, 'ca_certificate', null, true)),
                client_certificate: build.template(std.get(block, 'client_certificate', null, true)),
                client_key: build.template(std.get(block, 'client_key', null, true)),
                database_version: build.template(block.database_version),
                dump_file_path: build.template(std.get(block, 'dump_file_path', null, true)),
                host: build.template(block.host),
                name: build.template(block.name),
                password: build.template(std.get(block, 'password', null, true)),
                port: build.template(std.get(block, 'port', null, true)),
                username: build.template(std.get(block, 'username', null, true)),
              }),
            },
          },
        },
      },
      ca_certificate: p.child('ca_certificate').ref,
      client_certificate: p.child('client_certificate').ref,
      client_key: p.child('client_key').ref,
      database_version: p.child('database_version').ref,
      dump_file_path: p.child('dump_file_path').ref,
      host: p.child('host').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      password: p.child('password').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      username: p.child('username').ref,
    },
    sql_ssl_cert(name, block): {
      local p = path(['google_sql_ssl_cert', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_sql_ssl_cert: {
              [name]: std.prune({
                common_name: build.template(block.common_name),
                instance: build.template(block.instance),
              }),
            },
          },
        },
      },
      cert: p.child('cert').ref,
      cert_serial_number: p.child('cert_serial_number').ref,
      common_name: p.child('common_name').ref,
      create_time: p.child('create_time').ref,
      expiration_time: p.child('expiration_time').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      private_key: p.child('private_key').ref,
      project: p.child('project').ref,
      server_ca_cert: p.child('server_ca_cert').ref,
      sha1_fingerprint: p.child('sha1_fingerprint').ref,
    },
    sql_user(name, block): {
      local p = path(['google_sql_user', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_sql_user: {
              [name]: std.prune({
                deletion_policy: build.template(std.get(block, 'deletion_policy', null, true)),
                instance: build.template(block.instance),
                name: build.template(block.name),
                password: build.template(std.get(block, 'password', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      deletion_policy: p.child('deletion_policy').ref,
      host: p.child('host').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      name: p.child('name').ref,
      password: p.child('password').ref,
      project: p.child('project').ref,
      sql_server_user_details: p.child('sql_server_user_details').ref,
      type: p.child('type').ref,
    },
    storage_bucket(name, block): {
      local p = path(['google_storage_bucket', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_bucket: {
              [name]: std.prune({
                default_event_based_hold: build.template(std.get(block, 'default_event_based_hold', null, true)),
                enable_object_retention: build.template(std.get(block, 'enable_object_retention', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                requester_pays: build.template(std.get(block, 'requester_pays', null, true)),
                storage_class: build.template(std.get(block, 'storage_class', null, true)),
              }),
            },
          },
        },
      },
      default_event_based_hold: p.child('default_event_based_hold').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_object_retention: p.child('enable_object_retention').ref,
      force_destroy: p.child('force_destroy').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      project_number: p.child('project_number').ref,
      public_access_prevention: p.child('public_access_prevention').ref,
      requester_pays: p.child('requester_pays').ref,
      rpo: p.child('rpo').ref,
      self_link: p.child('self_link').ref,
      storage_class: p.child('storage_class').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uniform_bucket_level_access: p.child('uniform_bucket_level_access').ref,
      url: p.child('url').ref,
    },
    storage_bucket_access_control(name, block): {
      local p = path(['google_storage_bucket_access_control', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_bucket_access_control: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                entity: build.template(block.entity),
                role: build.template(std.get(block, 'role', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      domain: p.child('domain').ref,
      email: p.child('email').ref,
      entity: p.child('entity').ref,
      id: p.child('id').ref,
      role: p.child('role').ref,
    },
    storage_bucket_acl(name, block): {
      local p = path(['google_storage_bucket_acl', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_bucket_acl: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                default_acl: build.template(std.get(block, 'default_acl', null, true)),
                predefined_acl: build.template(std.get(block, 'predefined_acl', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      default_acl: p.child('default_acl').ref,
      id: p.child('id').ref,
      predefined_acl: p.child('predefined_acl').ref,
      role_entity: p.child('role_entity').ref,
    },
    storage_bucket_iam_binding(name, block): {
      local p = path(['google_storage_bucket_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_bucket_iam_binding: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
    },
    storage_bucket_iam_member(name, block): {
      local p = path(['google_storage_bucket_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_bucket_iam_member: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
    },
    storage_bucket_iam_policy(name, block): {
      local p = path(['google_storage_bucket_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_bucket_iam_policy: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    storage_bucket_object(name, block): {
      local p = path(['google_storage_bucket_object', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_bucket_object: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                cache_control: build.template(std.get(block, 'cache_control', null, true)),
                content_disposition: build.template(std.get(block, 'content_disposition', null, true)),
                content_encoding: build.template(std.get(block, 'content_encoding', null, true)),
                content_language: build.template(std.get(block, 'content_language', null, true)),
                detect_md5hash: build.template(std.get(block, 'detect_md5hash', null, true)),
                event_based_hold: build.template(std.get(block, 'event_based_hold', null, true)),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                source: build.template(std.get(block, 'source', null, true)),
                temporary_hold: build.template(std.get(block, 'temporary_hold', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      cache_control: p.child('cache_control').ref,
      content: p.child('content').ref,
      content_disposition: p.child('content_disposition').ref,
      content_encoding: p.child('content_encoding').ref,
      content_language: p.child('content_language').ref,
      content_type: p.child('content_type').ref,
      crc32c: p.child('crc32c').ref,
      detect_md5hash: p.child('detect_md5hash').ref,
      event_based_hold: p.child('event_based_hold').ref,
      generation: p.child('generation').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      md5hash: p.child('md5hash').ref,
      media_link: p.child('media_link').ref,
      metadata: p.child('metadata').ref,
      name: p.child('name').ref,
      output_name: p.child('output_name').ref,
      self_link: p.child('self_link').ref,
      source: p.child('source').ref,
      storage_class: p.child('storage_class').ref,
      temporary_hold: p.child('temporary_hold').ref,
    },
    storage_default_object_access_control(name, block): {
      local p = path(['google_storage_default_object_access_control', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_default_object_access_control: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                entity: build.template(block.entity),
                object: build.template(std.get(block, 'object', null, true)),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      domain: p.child('domain').ref,
      email: p.child('email').ref,
      entity: p.child('entity').ref,
      entity_id: p.child('entity_id').ref,
      generation: p.child('generation').ref,
      id: p.child('id').ref,
      object: p.child('object').ref,
      project_team: p.child('project_team').ref,
      role: p.child('role').ref,
    },
    storage_default_object_acl(name, block): {
      local p = path(['google_storage_default_object_acl', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_default_object_acl: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      id: p.child('id').ref,
      role_entity: p.child('role_entity').ref,
    },
    storage_hmac_key(name, block): {
      local p = path(['google_storage_hmac_key', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_hmac_key: {
              [name]: std.prune({
                service_account_email: build.template(block.service_account_email),
                state: build.template(std.get(block, 'state', null, true)),
              }),
            },
          },
        },
      },
      access_id: p.child('access_id').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      secret: p.child('secret').ref,
      service_account_email: p.child('service_account_email').ref,
      state: p.child('state').ref,
      time_created: p.child('time_created').ref,
      updated: p.child('updated').ref,
    },
    storage_insights_report_config(name, block): {
      local p = path(['google_storage_insights_report_config', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_insights_report_config: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    storage_managed_folder(name, block): {
      local p = path(['google_storage_managed_folder', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_managed_folder: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      create_time: p.child('create_time').ref,
      force_destroy: p.child('force_destroy').ref,
      id: p.child('id').ref,
      metageneration: p.child('metageneration').ref,
      name: p.child('name').ref,
      self_link: p.child('self_link').ref,
      update_time: p.child('update_time').ref,
    },
    storage_managed_folder_iam_binding(name, block): {
      local p = path(['google_storage_managed_folder_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_managed_folder_iam_binding: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                managed_folder: build.template(block.managed_folder),
                members: build.template(block.members),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      managed_folder: p.child('managed_folder').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
    },
    storage_managed_folder_iam_member(name, block): {
      local p = path(['google_storage_managed_folder_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_managed_folder_iam_member: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                managed_folder: build.template(block.managed_folder),
                member: build.template(block.member),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      managed_folder: p.child('managed_folder').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
    },
    storage_managed_folder_iam_policy(name, block): {
      local p = path(['google_storage_managed_folder_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_managed_folder_iam_policy: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                managed_folder: build.template(block.managed_folder),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      managed_folder: p.child('managed_folder').ref,
      policy_data: p.child('policy_data').ref,
    },
    storage_notification(name, block): {
      local p = path(['google_storage_notification', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_notification: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                custom_attributes: build.template(std.get(block, 'custom_attributes', null, true)),
                event_types: build.template(std.get(block, 'event_types', null, true)),
                object_name_prefix: build.template(std.get(block, 'object_name_prefix', null, true)),
                payload_format: build.template(block.payload_format),
                topic: build.template(block.topic),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      custom_attributes: p.child('custom_attributes').ref,
      event_types: p.child('event_types').ref,
      id: p.child('id').ref,
      notification_id: p.child('notification_id').ref,
      object_name_prefix: p.child('object_name_prefix').ref,
      payload_format: p.child('payload_format').ref,
      self_link: p.child('self_link').ref,
      topic: p.child('topic').ref,
    },
    storage_object_access_control(name, block): {
      local p = path(['google_storage_object_access_control', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_object_access_control: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                entity: build.template(block.entity),
                object: build.template(block.object),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      domain: p.child('domain').ref,
      email: p.child('email').ref,
      entity: p.child('entity').ref,
      entity_id: p.child('entity_id').ref,
      generation: p.child('generation').ref,
      id: p.child('id').ref,
      object: p.child('object').ref,
      project_team: p.child('project_team').ref,
      role: p.child('role').ref,
    },
    storage_object_acl(name, block): {
      local p = path(['google_storage_object_acl', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_object_acl: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                object: build.template(block.object),
                predefined_acl: build.template(std.get(block, 'predefined_acl', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      id: p.child('id').ref,
      object: p.child('object').ref,
      predefined_acl: p.child('predefined_acl').ref,
      role_entity: p.child('role_entity').ref,
    },
    storage_transfer_agent_pool(name, block): {
      local p = path(['google_storage_transfer_agent_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_transfer_agent_pool: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
    },
    storage_transfer_job(name, block): {
      local p = path(['google_storage_transfer_job', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_storage_transfer_job: {
              [name]: std.prune({
                description: build.template(block.description),
                status: build.template(std.get(block, 'status', null, true)),
              }),
            },
          },
        },
      },
      creation_time: p.child('creation_time').ref,
      deletion_time: p.child('deletion_time').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      last_modification_time: p.child('last_modification_time').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      status: p.child('status').ref,
    },
    tags_location_tag_binding(name, block): {
      local p = path(['google_tags_location_tag_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_tags_location_tag_binding: {
              [name]: std.prune({
                location: build.template(std.get(block, 'location', null, true)),
                parent: build.template(block.parent),
                tag_value: build.template(block.tag_value),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      tag_value: p.child('tag_value').ref,
    },
    tags_tag_binding(name, block): {
      local p = path(['google_tags_tag_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_tags_tag_binding: {
              [name]: std.prune({
                parent: build.template(block.parent),
                tag_value: build.template(block.tag_value),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      tag_value: p.child('tag_value').ref,
    },
    tags_tag_key(name, block): {
      local p = path(['google_tags_tag_key', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_tags_tag_key: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                parent: build.template(block.parent),
                purpose: build.template(std.get(block, 'purpose', null, true)),
                purpose_data: build.template(std.get(block, 'purpose_data', null, true)),
                short_name: build.template(block.short_name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      namespaced_name: p.child('namespaced_name').ref,
      parent: p.child('parent').ref,
      purpose: p.child('purpose').ref,
      purpose_data: p.child('purpose_data').ref,
      short_name: p.child('short_name').ref,
      update_time: p.child('update_time').ref,
    },
    tags_tag_key_iam_binding(name, block): {
      local p = path(['google_tags_tag_key_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_tags_tag_key_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                tag_key: build.template(block.tag_key),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
      tag_key: p.child('tag_key').ref,
    },
    tags_tag_key_iam_member(name, block): {
      local p = path(['google_tags_tag_key_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_tags_tag_key_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                tag_key: build.template(block.tag_key),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
      tag_key: p.child('tag_key').ref,
    },
    tags_tag_key_iam_policy(name, block): {
      local p = path(['google_tags_tag_key_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_tags_tag_key_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                tag_key: build.template(block.tag_key),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      tag_key: p.child('tag_key').ref,
    },
    tags_tag_value(name, block): {
      local p = path(['google_tags_tag_value', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_tags_tag_value: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                parent: build.template(block.parent),
                short_name: build.template(block.short_name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      namespaced_name: p.child('namespaced_name').ref,
      parent: p.child('parent').ref,
      short_name: p.child('short_name').ref,
      update_time: p.child('update_time').ref,
    },
    tags_tag_value_iam_binding(name, block): {
      local p = path(['google_tags_tag_value_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_tags_tag_value_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                role: build.template(block.role),
                tag_value: build.template(block.tag_value),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      members: p.child('members').ref,
      role: p.child('role').ref,
      tag_value: p.child('tag_value').ref,
    },
    tags_tag_value_iam_member(name, block): {
      local p = path(['google_tags_tag_value_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_tags_tag_value_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                role: build.template(block.role),
                tag_value: build.template(block.tag_value),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      role: p.child('role').ref,
      tag_value: p.child('tag_value').ref,
    },
    tags_tag_value_iam_policy(name, block): {
      local p = path(['google_tags_tag_value_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_tags_tag_value_iam_policy: {
              [name]: std.prune({
                policy_data: build.template(block.policy_data),
                tag_value: build.template(block.tag_value),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      tag_value: p.child('tag_value').ref,
    },
    tpu_node(name, block): {
      local p = path(['google_tpu_node', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_tpu_node: {
              [name]: std.prune({
                accelerator_type: build.template(block.accelerator_type),
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                tensorflow_version: build.template(block.tensorflow_version),
                use_service_networking: build.template(std.get(block, 'use_service_networking', null, true)),
              }),
            },
          },
        },
      },
      accelerator_type: p.child('accelerator_type').ref,
      cidr_block: p.child('cidr_block').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      network_endpoints: p.child('network_endpoints').ref,
      project: p.child('project').ref,
      service_account: p.child('service_account').ref,
      tensorflow_version: p.child('tensorflow_version').ref,
      terraform_labels: p.child('terraform_labels').ref,
      use_service_networking: p.child('use_service_networking').ref,
      zone: p.child('zone').ref,
    },
    vertex_ai_dataset(name, block): {
      local p = path(['google_vertex_ai_dataset', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_dataset: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                labels: build.template(std.get(block, 'labels', null, true)),
                metadata_schema_uri: build.template(block.metadata_schema_uri),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      metadata_schema_uri: p.child('metadata_schema_uri').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    vertex_ai_deployment_resource_pool(name, block): {
      local p = path(['google_vertex_ai_deployment_resource_pool', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_deployment_resource_pool: {
              [name]: std.prune({
                name: build.template(block.name),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    vertex_ai_endpoint(name, block): {
      local p = path(['google_vertex_ai_endpoint', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_endpoint: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                network: build.template(std.get(block, 'network', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      deployed_models: p.child('deployed_models').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      model_deployment_monitoring_job: p.child('model_deployment_monitoring_job').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    vertex_ai_feature_group(name, block): {
      local p = path(['google_vertex_ai_feature_group', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_feature_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    vertex_ai_feature_group_feature(name, block): {
      local p = path(['google_vertex_ai_feature_group_feature', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_feature_group_feature: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                feature_group: build.template(block.feature_group),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                region: build.template(block.region),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      feature_group: p.child('feature_group').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
      version_column_name: p.child('version_column_name').ref,
    },
    vertex_ai_feature_online_store(name, block): {
      local p = path(['google_vertex_ai_feature_online_store', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_feature_online_store: {
              [name]: std.prune({
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      force_destroy: p.child('force_destroy').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    vertex_ai_feature_online_store_featureview(name, block): {
      local p = path(['google_vertex_ai_feature_online_store_featureview', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_feature_online_store_featureview: {
              [name]: std.prune({
                feature_online_store: build.template(block.feature_online_store),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                region: build.template(block.region),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      effective_labels: p.child('effective_labels').ref,
      feature_online_store: p.child('feature_online_store').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    vertex_ai_featurestore(name, block): {
      local p = path(['google_vertex_ai_featurestore', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_featurestore: {
              [name]: std.prune({
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      force_destroy: p.child('force_destroy').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    vertex_ai_featurestore_entitytype(name, block): {
      local p = path(['google_vertex_ai_featurestore_entitytype', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_featurestore_entitytype: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                featurestore: build.template(block.featurestore),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      featurestore: p.child('featurestore').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    vertex_ai_featurestore_entitytype_feature(name, block): {
      local p = path(['google_vertex_ai_featurestore_entitytype_feature', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_featurestore_entitytype_feature: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                entitytype: build.template(block.entitytype),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                value_type: build.template(block.value_type),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      entitytype: p.child('entitytype').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
      value_type: p.child('value_type').ref,
    },
    vertex_ai_index(name, block): {
      local p = path(['google_vertex_ai_index', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_index: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                index_update_method: build.template(std.get(block, 'index_update_method', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      deployed_indexes: p.child('deployed_indexes').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      index_stats: p.child('index_stats').ref,
      index_update_method: p.child('index_update_method').ref,
      labels: p.child('labels').ref,
      metadata_schema_uri: p.child('metadata_schema_uri').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    vertex_ai_index_endpoint(name, block): {
      local p = path(['google_vertex_ai_index_endpoint', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_index_endpoint: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                labels: build.template(std.get(block, 'labels', null, true)),
                network: build.template(std.get(block, 'network', null, true)),
                public_endpoint_enabled: build.template(std.get(block, 'public_endpoint_enabled', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      public_endpoint_domain_name: p.child('public_endpoint_domain_name').ref,
      public_endpoint_enabled: p.child('public_endpoint_enabled').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    vertex_ai_index_endpoint_deployed_index(name, block): {
      local p = path(['google_vertex_ai_index_endpoint_deployed_index', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_index_endpoint_deployed_index: {
              [name]: std.prune({
                deployed_index_id: build.template(block.deployed_index_id),
                deployment_group: build.template(std.get(block, 'deployment_group', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enable_access_logging: build.template(std.get(block, 'enable_access_logging', null, true)),
                index: build.template(block.index),
                index_endpoint: build.template(block.index_endpoint),
                reserved_ip_ranges: build.template(std.get(block, 'reserved_ip_ranges', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      deployed_index_id: p.child('deployed_index_id').ref,
      deployment_group: p.child('deployment_group').ref,
      display_name: p.child('display_name').ref,
      enable_access_logging: p.child('enable_access_logging').ref,
      id: p.child('id').ref,
      index: p.child('index').ref,
      index_endpoint: p.child('index_endpoint').ref,
      index_sync_time: p.child('index_sync_time').ref,
      name: p.child('name').ref,
      private_endpoints: p.child('private_endpoints').ref,
      reserved_ip_ranges: p.child('reserved_ip_ranges').ref,
    },
    vertex_ai_tensorboard(name, block): {
      local p = path(['google_vertex_ai_tensorboard', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vertex_ai_tensorboard: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                labels: build.template(std.get(block, 'labels', null, true)),
              }),
            },
          },
        },
      },
      blob_storage_path_prefix: p.child('blob_storage_path_prefix').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      run_count: p.child('run_count').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    vmwareengine_cluster(name, block): {
      local p = path(['google_vmwareengine_cluster', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vmwareengine_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      management: p.child('management').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
    },
    vmwareengine_external_access_rule(name, block): {
      local p = path(['google_vmwareengine_external_access_rule', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vmwareengine_external_access_rule: {
              [name]: std.prune({
                action: build.template(block.action),
                description: build.template(std.get(block, 'description', null, true)),
                destination_ports: build.template(block.destination_ports),
                ip_protocol: build.template(block.ip_protocol),
                name: build.template(block.name),
                parent: build.template(block.parent),
                priority: build.template(block.priority),
                source_ports: build.template(block.source_ports),
              }),
            },
          },
        },
      },
      action: p.child('action').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      destination_ports: p.child('destination_ports').ref,
      id: p.child('id').ref,
      ip_protocol: p.child('ip_protocol').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      priority: p.child('priority').ref,
      source_ports: p.child('source_ports').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    vmwareengine_external_address(name, block): {
      local p = path(['google_vmwareengine_external_address', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vmwareengine_external_address: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                internal_ip: build.template(block.internal_ip),
                name: build.template(block.name),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      external_ip: p.child('external_ip').ref,
      id: p.child('id').ref,
      internal_ip: p.child('internal_ip').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    vmwareengine_network(name, block): {
      local p = path(['google_vmwareengine_network', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vmwareengine_network: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      type: p.child('type').ref,
      uid: p.child('uid').ref,
      vpc_networks: p.child('vpc_networks').ref,
    },
    vmwareengine_network_peering(name, block): {
      local p = path(['google_vmwareengine_network_peering', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vmwareengine_network_peering: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                export_custom_routes: build.template(std.get(block, 'export_custom_routes', null, true)),
                export_custom_routes_with_public_ip: build.template(std.get(block, 'export_custom_routes_with_public_ip', null, true)),
                import_custom_routes: build.template(std.get(block, 'import_custom_routes', null, true)),
                import_custom_routes_with_public_ip: build.template(std.get(block, 'import_custom_routes_with_public_ip', null, true)),
                name: build.template(block.name),
                peer_network: build.template(block.peer_network),
                peer_network_type: build.template(block.peer_network_type),
                vmware_engine_network: build.template(block.vmware_engine_network),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      export_custom_routes: p.child('export_custom_routes').ref,
      export_custom_routes_with_public_ip: p.child('export_custom_routes_with_public_ip').ref,
      id: p.child('id').ref,
      import_custom_routes: p.child('import_custom_routes').ref,
      import_custom_routes_with_public_ip: p.child('import_custom_routes_with_public_ip').ref,
      name: p.child('name').ref,
      peer_network: p.child('peer_network').ref,
      peer_network_type: p.child('peer_network_type').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      state_details: p.child('state_details').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      vmware_engine_network: p.child('vmware_engine_network').ref,
      vmware_engine_network_canonical: p.child('vmware_engine_network_canonical').ref,
    },
    vmwareengine_network_policy(name, block): {
      local p = path(['google_vmwareengine_network_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vmwareengine_network_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                edge_services_cidr: build.template(block.edge_services_cidr),
                location: build.template(block.location),
                name: build.template(block.name),
                vmware_engine_network: build.template(block.vmware_engine_network),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      edge_services_cidr: p.child('edge_services_cidr').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      vmware_engine_network: p.child('vmware_engine_network').ref,
      vmware_engine_network_canonical: p.child('vmware_engine_network_canonical').ref,
    },
    vmwareengine_private_cloud(name, block): {
      local p = path(['google_vmwareengine_private_cloud', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vmwareengine_private_cloud: {
              [name]: std.prune({
                deletion_delay_hours: build.template(std.get(block, 'deletion_delay_hours', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                send_deletion_delay_hours_if_zero: build.template(std.get(block, 'send_deletion_delay_hours_if_zero', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      deletion_delay_hours: p.child('deletion_delay_hours').ref,
      description: p.child('description').ref,
      hcx: p.child('hcx').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      nsx: p.child('nsx').ref,
      project: p.child('project').ref,
      send_deletion_delay_hours_if_zero: p.child('send_deletion_delay_hours_if_zero').ref,
      state: p.child('state').ref,
      type: p.child('type').ref,
      uid: p.child('uid').ref,
      vcenter: p.child('vcenter').ref,
    },
    vmwareengine_subnet(name, block): {
      local p = path(['google_vmwareengine_subnet', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vmwareengine_subnet: {
              [name]: std.prune({
                ip_cidr_range: build.template(block.ip_cidr_range),
                name: build.template(block.name),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      dhcp_address_ranges: p.child('dhcp_address_ranges').ref,
      gateway_id: p.child('gateway_id').ref,
      gateway_ip: p.child('gateway_ip').ref,
      id: p.child('id').ref,
      ip_cidr_range: p.child('ip_cidr_range').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      standard_config: p.child('standard_config').ref,
      state: p.child('state').ref,
      type: p.child('type').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      vlan_id: p.child('vlan_id').ref,
    },
    vpc_access_connector(name, block): {
      local p = path(['google_vpc_access_connector', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_vpc_access_connector: {
              [name]: std.prune({
                ip_cidr_range: build.template(std.get(block, 'ip_cidr_range', null, true)),
                machine_type: build.template(std.get(block, 'machine_type', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      connected_projects: p.child('connected_projects').ref,
      id: p.child('id').ref,
      ip_cidr_range: p.child('ip_cidr_range').ref,
      machine_type: p.child('machine_type').ref,
      max_instances: p.child('max_instances').ref,
      max_throughput: p.child('max_throughput').ref,
      min_instances: p.child('min_instances').ref,
      min_throughput: p.child('min_throughput').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      state: p.child('state').ref,
    },
    workbench_instance(name, block): {
      local p = path(['google_workbench_instance', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_workbench_instance: {
              [name]: std.prune({
                desired_state: build.template(std.get(block, 'desired_state', null, true)),
                disable_proxy_access: build.template(std.get(block, 'disable_proxy_access', null, true)),
                instance_id: build.template(std.get(block, 'instance_id', null, true)),
                instance_owners: build.template(std.get(block, 'instance_owners', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      creator: p.child('creator').ref,
      desired_state: p.child('desired_state').ref,
      disable_proxy_access: p.child('disable_proxy_access').ref,
      effective_labels: p.child('effective_labels').ref,
      health_info: p.child('health_info').ref,
      health_state: p.child('health_state').ref,
      id: p.child('id').ref,
      instance_id: p.child('instance_id').ref,
      instance_owners: p.child('instance_owners').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      proxy_uri: p.child('proxy_uri').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
      upgrade_history: p.child('upgrade_history').ref,
    },
    workbench_instance_iam_binding(name, block): {
      local p = path(['google_workbench_instance_iam_binding', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_workbench_instance_iam_binding: {
              [name]: std.prune({
                members: build.template(block.members),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      members: p.child('members').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    workbench_instance_iam_member(name, block): {
      local p = path(['google_workbench_instance_iam_member', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_workbench_instance_iam_member: {
              [name]: std.prune({
                member: build.template(block.member),
                name: build.template(block.name),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      role: p.child('role').ref,
    },
    workbench_instance_iam_policy(name, block): {
      local p = path(['google_workbench_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_workbench_instance_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_data: build.template(block.policy_data),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    workflows_workflow(name, block): {
      local p = path(['google_workflows_workflow', name]),
      _: p.ref._ {
        block: {
          resource: {
            google_workflows_workflow: {
              [name]: std.prune({
                call_log_level: build.template(std.get(block, 'call_log_level', null, true)),
                crypto_key_name: build.template(std.get(block, 'crypto_key_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
                source_contents: build.template(std.get(block, 'source_contents', null, true)),
                user_env_vars: build.template(std.get(block, 'user_env_vars', null, true)),
              }),
            },
          },
        },
      },
      call_log_level: p.child('call_log_level').ref,
      create_time: p.child('create_time').ref,
      crypto_key_name: p.child('crypto_key_name').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      name_prefix: p.child('name_prefix').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      revision_id: p.child('revision_id').ref,
      service_account: p.child('service_account').ref,
      source_contents: p.child('source_contents').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
      user_env_vars: p.child('user_env_vars').ref,
    },
  },
  data: {
    access_approval_folder_service_account(name, block): {
      local p = path(['data', 'google_access_approval_folder_service_account', name]),
      _: p.ref._ {
        block: {
          data: {
            google_access_approval_folder_service_account: {
              [name]: std.prune({
                folder_id: build.template(block.folder_id),
              }),
            },
          },
        },
      },
      account_email: p.child('account_email').ref,
      folder_id: p.child('folder_id').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
    },
    access_approval_organization_service_account(name, block): {
      local p = path(['data', 'google_access_approval_organization_service_account', name]),
      _: p.ref._ {
        block: {
          data: {
            google_access_approval_organization_service_account: {
              [name]: std.prune({
                organization_id: build.template(block.organization_id),
              }),
            },
          },
        },
      },
      account_email: p.child('account_email').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      organization_id: p.child('organization_id').ref,
    },
    access_approval_project_service_account(name, block): {
      local p = path(['data', 'google_access_approval_project_service_account', name]),
      _: p.ref._ {
        block: {
          data: {
            google_access_approval_project_service_account: {
              [name]: std.prune({
                project_id: build.template(block.project_id),
              }),
            },
          },
        },
      },
      account_email: p.child('account_email').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project_id: p.child('project_id').ref,
    },
    access_context_manager_access_policy_iam_policy(name, block): {
      local p = path(['data', 'google_access_context_manager_access_policy_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_access_context_manager_access_policy_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
    },
    active_folder(name, block): {
      local p = path(['data', 'google_active_folder', name]),
      _: p.ref._ {
        block: {
          data: {
            google_active_folder: {
              [name]: std.prune({
                api_method: build.template(std.get(block, 'api_method', null, true)),
                display_name: build.template(block.display_name),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      api_method: p.child('api_method').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
    },
    alloydb_locations(name, block): {
      local p = path(['data', 'google_alloydb_locations', name]),
      _: p.ref._ {
        block: {
          data: {
            google_alloydb_locations: {
              [name]: std.prune({
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      locations: p.child('locations').ref,
      project: p.child('project').ref,
    },
    alloydb_supported_database_flags(name, block): {
      local p = path(['data', 'google_alloydb_supported_database_flags', name]),
      _: p.ref._ {
        block: {
          data: {
            google_alloydb_supported_database_flags: {
              [name]: std.prune({
                location: build.template(block.location),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      project: p.child('project').ref,
      supported_database_flags: p.child('supported_database_flags').ref,
    },
    apigee_environment_iam_policy(name, block): {
      local p = path(['data', 'google_apigee_environment_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_apigee_environment_iam_policy: {
              [name]: std.prune({
                env_id: build.template(block.env_id),
                org_id: build.template(block.org_id),
              }),
            },
          },
        },
      },
      env_id: p.child('env_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      org_id: p.child('org_id').ref,
      policy_data: p.child('policy_data').ref,
    },
    app_engine_default_service_account(name, block): {
      local p = path(['data', 'google_app_engine_default_service_account', name]),
      _: p.ref._ {
        block: {
          data: {
            google_app_engine_default_service_account: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      email: p.child('email').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      unique_id: p.child('unique_id').ref,
    },
    apphub_application(name, block): {
      local p = path(['data', 'google_apphub_application', name]),
      _: p.ref._ {
        block: {
          data: {
            google_apphub_application: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                location: build.template(block.location),
                project: build.template(block.project),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').ref,
      attributes: p.child('attributes').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      scope: p.child('scope').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    apphub_discovered_service(name, block): {
      local p = path(['data', 'google_apphub_discovered_service', name]),
      _: p.ref._ {
        block: {
          data: {
            google_apphub_discovered_service: {
              [name]: std.prune({
                location: build.template(block.location),
                project: build.template(std.get(block, 'project', null, true)),
                service_uri: build.template(block.service_uri),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_properties: p.child('service_properties').ref,
      service_reference: p.child('service_reference').ref,
      service_uri: p.child('service_uri').ref,
    },
    apphub_discovered_workload(name, block): {
      local p = path(['data', 'google_apphub_discovered_workload', name]),
      _: p.ref._ {
        block: {
          data: {
            google_apphub_discovered_workload: {
              [name]: std.prune({
                location: build.template(block.location),
                project: build.template(std.get(block, 'project', null, true)),
                workload_uri: build.template(block.workload_uri),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      workload_properties: p.child('workload_properties').ref,
      workload_reference: p.child('workload_reference').ref,
      workload_uri: p.child('workload_uri').ref,
    },
    artifact_registry_docker_image(name, block): {
      local p = path(['data', 'google_artifact_registry_docker_image', name]),
      _: p.ref._ {
        block: {
          data: {
            google_artifact_registry_docker_image: {
              [name]: std.prune({
                image_name: build.template(block.image_name),
                location: build.template(block.location),
                project: build.template(std.get(block, 'project', null, true)),
                repository_id: build.template(block.repository_id),
              }),
            },
          },
        },
      },
      build_time: p.child('build_time').ref,
      id: p.child('id').ref,
      image_name: p.child('image_name').ref,
      image_size_bytes: p.child('image_size_bytes').ref,
      location: p.child('location').ref,
      media_type: p.child('media_type').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      repository_id: p.child('repository_id').ref,
      self_link: p.child('self_link').ref,
      tags: p.child('tags').ref,
      update_time: p.child('update_time').ref,
      upload_time: p.child('upload_time').ref,
    },
    artifact_registry_locations(name, block): {
      local p = path(['data', 'google_artifact_registry_locations', name]),
      _: p.ref._ {
        block: {
          data: {
            google_artifact_registry_locations: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      locations: p.child('locations').ref,
      project: p.child('project').ref,
    },
    artifact_registry_repository(name, block): {
      local p = path(['data', 'google_artifact_registry_repository', name]),
      _: p.ref._ {
        block: {
          data: {
            google_artifact_registry_repository: {
              [name]: std.prune({
                location: build.template(block.location),
                project: build.template(std.get(block, 'project', null, true)),
                repository_id: build.template(block.repository_id),
              }),
            },
          },
        },
      },
      cleanup_policies: p.child('cleanup_policies').ref,
      cleanup_policy_dry_run: p.child('cleanup_policy_dry_run').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      docker_config: p.child('docker_config').ref,
      effective_labels: p.child('effective_labels').ref,
      format: p.child('format').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      maven_config: p.child('maven_config').ref,
      mode: p.child('mode').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      remote_repository_config: p.child('remote_repository_config').ref,
      repository_id: p.child('repository_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
      virtual_repository_config: p.child('virtual_repository_config').ref,
    },
    artifact_registry_repository_iam_policy(name, block): {
      local p = path(['data', 'google_artifact_registry_repository_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_artifact_registry_repository_iam_policy: {
              [name]: std.prune({
                repository: build.template(block.repository),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      repository: p.child('repository').ref,
    },
    beyondcorp_app_connection(name, block): {
      local p = path(['data', 'google_beyondcorp_app_connection', name]),
      _: p.ref._ {
        block: {
          data: {
            google_beyondcorp_app_connection: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      application_endpoint: p.child('application_endpoint').ref,
      connectors: p.child('connectors').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      gateway: p.child('gateway').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
    },
    beyondcorp_app_connector(name, block): {
      local p = path(['data', 'google_beyondcorp_app_connector', name]),
      _: p.ref._ {
        block: {
          data: {
            google_beyondcorp_app_connector: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      principal_info: p.child('principal_info').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    beyondcorp_app_gateway(name, block): {
      local p = path(['data', 'google_beyondcorp_app_gateway', name]),
      _: p.ref._ {
        block: {
          data: {
            google_beyondcorp_app_gateway: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      allocated_connections: p.child('allocated_connections').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      host_type: p.child('host_type').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      uri: p.child('uri').ref,
    },
    bigquery_analytics_hub_data_exchange_iam_policy(name, block): {
      local p = path(['data', 'google_bigquery_analytics_hub_data_exchange_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_bigquery_analytics_hub_data_exchange_iam_policy: {
              [name]: std.prune({
                data_exchange_id: build.template(block.data_exchange_id),
              }),
            },
          },
        },
      },
      data_exchange_id: p.child('data_exchange_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    bigquery_analytics_hub_listing_iam_policy(name, block): {
      local p = path(['data', 'google_bigquery_analytics_hub_listing_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_bigquery_analytics_hub_listing_iam_policy: {
              [name]: std.prune({
                data_exchange_id: build.template(block.data_exchange_id),
                listing_id: build.template(block.listing_id),
              }),
            },
          },
        },
      },
      data_exchange_id: p.child('data_exchange_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      listing_id: p.child('listing_id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    bigquery_connection_iam_policy(name, block): {
      local p = path(['data', 'google_bigquery_connection_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_bigquery_connection_iam_policy: {
              [name]: std.prune({
                connection_id: build.template(block.connection_id),
              }),
            },
          },
        },
      },
      connection_id: p.child('connection_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    bigquery_datapolicy_data_policy_iam_policy(name, block): {
      local p = path(['data', 'google_bigquery_datapolicy_data_policy_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_bigquery_datapolicy_data_policy_iam_policy: {
              [name]: std.prune({
                data_policy_id: build.template(block.data_policy_id),
              }),
            },
          },
        },
      },
      data_policy_id: p.child('data_policy_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    bigquery_dataset(name, block): {
      local p = path(['data', 'google_bigquery_dataset', name]),
      _: p.ref._ {
        block: {
          data: {
            google_bigquery_dataset: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      access: p.child('access').ref,
      creation_time: p.child('creation_time').ref,
      dataset_id: p.child('dataset_id').ref,
      default_collation: p.child('default_collation').ref,
      default_encryption_configuration: p.child('default_encryption_configuration').ref,
      default_partition_expiration_ms: p.child('default_partition_expiration_ms').ref,
      default_table_expiration_ms: p.child('default_table_expiration_ms').ref,
      delete_contents_on_destroy: p.child('delete_contents_on_destroy').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      external_dataset_reference: p.child('external_dataset_reference').ref,
      friendly_name: p.child('friendly_name').ref,
      id: p.child('id').ref,
      is_case_insensitive: p.child('is_case_insensitive').ref,
      labels: p.child('labels').ref,
      last_modified_time: p.child('last_modified_time').ref,
      location: p.child('location').ref,
      max_time_travel_hours: p.child('max_time_travel_hours').ref,
      project: p.child('project').ref,
      resource_tags: p.child('resource_tags').ref,
      self_link: p.child('self_link').ref,
      storage_billing_model: p.child('storage_billing_model').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    bigquery_dataset_iam_policy(name, block): {
      local p = path(['data', 'google_bigquery_dataset_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_bigquery_dataset_iam_policy: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
              }),
            },
          },
        },
      },
      dataset_id: p.child('dataset_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    bigquery_default_service_account(name, block): {
      local p = path(['data', 'google_bigquery_default_service_account', name]),
      _: p.ref._ {
        block: {
          data: {
            google_bigquery_default_service_account: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      email: p.child('email').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
    },
    bigquery_table_iam_policy(name, block): {
      local p = path(['data', 'google_bigquery_table_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_bigquery_table_iam_policy: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                table_id: build.template(block.table_id),
              }),
            },
          },
        },
      },
      dataset_id: p.child('dataset_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      table_id: p.child('table_id').ref,
    },
    bigquery_tables(name, block): {
      local p = path(['data', 'google_bigquery_tables', name]),
      _: p.ref._ {
        block: {
          data: {
            google_bigquery_tables: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      dataset_id: p.child('dataset_id').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      tables: p.child('tables').ref,
    },
    bigtable_instance_iam_policy(name, block): {
      local p = path(['data', 'google_bigtable_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_bigtable_instance_iam_policy: {
              [name]: std.prune({
                instance: build.template(block.instance),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    bigtable_table_iam_policy(name, block): {
      local p = path(['data', 'google_bigtable_table_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_bigtable_table_iam_policy: {
              [name]: std.prune({
                instance: build.template(block.instance),
                table: build.template(block.table),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      table: p.child('table').ref,
    },
    billing_account(name, block): {
      local p = path(['data', 'google_billing_account', name]),
      _: p.ref._ {
        block: {
          data: {
            google_billing_account: {
              [name]: std.prune({
                billing_account: build.template(std.get(block, 'billing_account', null, true)),
                lookup_projects: build.template(std.get(block, 'lookup_projects', null, true)),
              }),
            },
          },
        },
      },
      billing_account: p.child('billing_account').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      lookup_projects: p.child('lookup_projects').ref,
      name: p.child('name').ref,
      open: p.child('open').ref,
      project_ids: p.child('project_ids').ref,
    },
    billing_account_iam_policy(name, block): {
      local p = path(['data', 'google_billing_account_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_billing_account_iam_policy: {
              [name]: std.prune({
                billing_account_id: build.template(block.billing_account_id),
              }),
            },
          },
        },
      },
      billing_account_id: p.child('billing_account_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    binary_authorization_attestor_iam_policy(name, block): {
      local p = path(['data', 'google_binary_authorization_attestor_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_binary_authorization_attestor_iam_policy: {
              [name]: std.prune({
                attestor: build.template(block.attestor),
              }),
            },
          },
        },
      },
      attestor: p.child('attestor').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    certificate_manager_certificate_map(name, block): {
      local p = path(['data', 'google_certificate_manager_certificate_map', name]),
      _: p.ref._ {
        block: {
          data: {
            google_certificate_manager_certificate_map: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      gclb_targets: p.child('gclb_targets').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    certificate_manager_certificates(name, block): {
      local p = path(['data', 'google_certificate_manager_certificates', name]),
      _: p.ref._ {
        block: {
          data: {
            google_certificate_manager_certificates: {
              [name]: std.prune({
                filter: build.template(std.get(block, 'filter', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      certificates: p.child('certificates').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      region: p.child('region').ref,
    },
    client_config(name, block): {
      local p = path(['data', 'google_client_config', name]),
      _: p.ref._ {
        block: {
          data: {
            google_client_config: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      access_token: p.child('access_token').ref,
      default_labels: p.child('default_labels').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      zone: p.child('zone').ref,
    },
    client_openid_userinfo(name, block): {
      local p = path(['data', 'google_client_openid_userinfo', name]),
      _: p.ref._ {
        block: {
          data: {
            google_client_openid_userinfo: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      email: p.child('email').ref,
      id: p.child('id').ref,
    },
    cloud_asset_search_all_resources(name, block): {
      local p = path(['data', 'google_cloud_asset_search_all_resources', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_asset_search_all_resources: {
              [name]: std.prune({
                asset_types: build.template(std.get(block, 'asset_types', null, true)),
                query: build.template(std.get(block, 'query', null, true)),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      asset_types: p.child('asset_types').ref,
      id: p.child('id').ref,
      query: p.child('query').ref,
      results: p.child('results').ref,
      scope: p.child('scope').ref,
    },
    cloud_identity_group_lookup(name, block): {
      local p = path(['data', 'google_cloud_identity_group_lookup', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_identity_group_lookup: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      name: p.child('name').ref,
    },
    cloud_identity_group_memberships(name, block): {
      local p = path(['data', 'google_cloud_identity_group_memberships', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_identity_group_memberships: {
              [name]: std.prune({
                group: build.template(block.group),
              }),
            },
          },
        },
      },
      group: p.child('group').ref,
      id: p.child('id').ref,
      memberships: p.child('memberships').ref,
    },
    cloud_identity_group_transitive_memberships(name, block): {
      local p = path(['data', 'google_cloud_identity_group_transitive_memberships', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_identity_group_transitive_memberships: {
              [name]: std.prune({
                group: build.template(block.group),
              }),
            },
          },
        },
      },
      group: p.child('group').ref,
      id: p.child('id').ref,
      memberships: p.child('memberships').ref,
    },
    cloud_identity_groups(name, block): {
      local p = path(['data', 'google_cloud_identity_groups', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_identity_groups: {
              [name]: std.prune({
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      groups: p.child('groups').ref,
      id: p.child('id').ref,
      parent: p.child('parent').ref,
    },
    cloud_quotas_quota_info(name, block): {
      local p = path(['data', 'google_cloud_quotas_quota_info', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_quotas_quota_info: {
              [name]: std.prune({
                parent: build.template(block.parent),
                quota_id: build.template(block.quota_id),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      container_type: p.child('container_type').ref,
      dimensions: p.child('dimensions').ref,
      dimensions_infos: p.child('dimensions_infos').ref,
      id: p.child('id').ref,
      is_concurrent: p.child('is_concurrent').ref,
      is_fixed: p.child('is_fixed').ref,
      is_precise: p.child('is_precise').ref,
      metric: p.child('metric').ref,
      metric_display_name: p.child('metric_display_name').ref,
      metric_unit: p.child('metric_unit').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      quota_display_name: p.child('quota_display_name').ref,
      quota_id: p.child('quota_id').ref,
      quota_increase_eligibility: p.child('quota_increase_eligibility').ref,
      refresh_interval: p.child('refresh_interval').ref,
      service: p.child('service').ref,
      service_request_quota_uri: p.child('service_request_quota_uri').ref,
    },
    cloud_quotas_quota_infos(name, block): {
      local p = path(['data', 'google_cloud_quotas_quota_infos', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_quotas_quota_infos: {
              [name]: std.prune({
                parent: build.template(block.parent),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      parent: p.child('parent').ref,
      quota_infos: p.child('quota_infos').ref,
      service: p.child('service').ref,
    },
    cloud_run_locations(name, block): {
      local p = path(['data', 'google_cloud_run_locations', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_run_locations: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      locations: p.child('locations').ref,
      project: p.child('project').ref,
    },
    cloud_run_service(name, block): {
      local p = path(['data', 'google_cloud_run_service', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_run_service: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      autogenerate_revision_name: p.child('autogenerate_revision_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      metadata: p.child('metadata').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      status: p.child('status').ref,
      template: p.child('template').ref,
      traffic: p.child('traffic').ref,
    },
    cloud_run_service_iam_policy(name, block): {
      local p = path(['data', 'google_cloud_run_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_run_service_iam_policy: {
              [name]: std.prune({
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
    },
    cloud_run_v2_job(name, block): {
      local p = path(['data', 'google_cloud_run_v2_job', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_run_v2_job: {
              [name]: std.prune({
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      binary_authorization: p.child('binary_authorization').ref,
      client: p.child('client').ref,
      client_version: p.child('client_version').ref,
      conditions: p.child('conditions').ref,
      create_time: p.child('create_time').ref,
      creator: p.child('creator').ref,
      delete_time: p.child('delete_time').ref,
      deletion_protection: p.child('deletion_protection').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      execution_count: p.child('execution_count').ref,
      expire_time: p.child('expire_time').ref,
      generation: p.child('generation').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      last_modifier: p.child('last_modifier').ref,
      latest_created_execution: p.child('latest_created_execution').ref,
      launch_stage: p.child('launch_stage').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      observed_generation: p.child('observed_generation').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      template: p.child('template').ref,
      terminal_condition: p.child('terminal_condition').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    cloud_run_v2_job_iam_policy(name, block): {
      local p = path(['data', 'google_cloud_run_v2_job_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_run_v2_job_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    cloud_run_v2_service(name, block): {
      local p = path(['data', 'google_cloud_run_v2_service', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_run_v2_service: {
              [name]: std.prune({
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      binary_authorization: p.child('binary_authorization').ref,
      client: p.child('client').ref,
      client_version: p.child('client_version').ref,
      conditions: p.child('conditions').ref,
      create_time: p.child('create_time').ref,
      creator: p.child('creator').ref,
      custom_audiences: p.child('custom_audiences').ref,
      delete_time: p.child('delete_time').ref,
      deletion_protection: p.child('deletion_protection').ref,
      description: p.child('description').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      expire_time: p.child('expire_time').ref,
      generation: p.child('generation').ref,
      id: p.child('id').ref,
      ingress: p.child('ingress').ref,
      labels: p.child('labels').ref,
      last_modifier: p.child('last_modifier').ref,
      latest_created_revision: p.child('latest_created_revision').ref,
      latest_ready_revision: p.child('latest_ready_revision').ref,
      launch_stage: p.child('launch_stage').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      observed_generation: p.child('observed_generation').ref,
      project: p.child('project').ref,
      reconciling: p.child('reconciling').ref,
      scaling: p.child('scaling').ref,
      template: p.child('template').ref,
      terminal_condition: p.child('terminal_condition').ref,
      terraform_labels: p.child('terraform_labels').ref,
      traffic: p.child('traffic').ref,
      traffic_statuses: p.child('traffic_statuses').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      uri: p.child('uri').ref,
    },
    cloud_run_v2_service_iam_policy(name, block): {
      local p = path(['data', 'google_cloud_run_v2_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_run_v2_service_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    cloud_tasks_queue_iam_policy(name, block): {
      local p = path(['data', 'google_cloud_tasks_queue_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloud_tasks_queue_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    cloudbuild_trigger(name, block): {
      local p = path(['data', 'google_cloudbuild_trigger', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloudbuild_trigger: {
              [name]: std.prune({
                location: build.template(block.location),
                project: build.template(std.get(block, 'project', null, true)),
                trigger_id: build.template(block.trigger_id),
              }),
            },
          },
        },
      },
      approval_config: p.child('approval_config').ref,
      bitbucket_server_trigger_config: p.child('bitbucket_server_trigger_config').ref,
      build: p.child('build').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      disabled: p.child('disabled').ref,
      filename: p.child('filename').ref,
      filter: p.child('filter').ref,
      git_file_source: p.child('git_file_source').ref,
      github: p.child('github').ref,
      id: p.child('id').ref,
      ignored_files: p.child('ignored_files').ref,
      include_build_logs: p.child('include_build_logs').ref,
      included_files: p.child('included_files').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      pubsub_config: p.child('pubsub_config').ref,
      repository_event_config: p.child('repository_event_config').ref,
      service_account: p.child('service_account').ref,
      source_to_build: p.child('source_to_build').ref,
      substitutions: p.child('substitutions').ref,
      tags: p.child('tags').ref,
      trigger_id: p.child('trigger_id').ref,
      trigger_template: p.child('trigger_template').ref,
      webhook_config: p.child('webhook_config').ref,
    },
    cloudbuildv2_connection_iam_policy(name, block): {
      local p = path(['data', 'google_cloudbuildv2_connection_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloudbuildv2_connection_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    clouddeploy_custom_target_type_iam_policy(name, block): {
      local p = path(['data', 'google_clouddeploy_custom_target_type_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_clouddeploy_custom_target_type_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    clouddeploy_delivery_pipeline_iam_policy(name, block): {
      local p = path(['data', 'google_clouddeploy_delivery_pipeline_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_clouddeploy_delivery_pipeline_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    clouddeploy_target_iam_policy(name, block): {
      local p = path(['data', 'google_clouddeploy_target_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_clouddeploy_target_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    cloudfunctions2_function(name, block): {
      local p = path(['data', 'google_cloudfunctions2_function', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloudfunctions2_function: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      build_config: p.child('build_config').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      environment: p.child('environment').ref,
      event_trigger: p.child('event_trigger').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_config: p.child('service_config').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
      url: p.child('url').ref,
    },
    cloudfunctions2_function_iam_policy(name, block): {
      local p = path(['data', 'google_cloudfunctions2_function_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloudfunctions2_function_iam_policy: {
              [name]: std.prune({
                cloud_function: build.template(block.cloud_function),
              }),
            },
          },
        },
      },
      cloud_function: p.child('cloud_function').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    cloudfunctions_function(name, block): {
      local p = path(['data', 'google_cloudfunctions_function', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloudfunctions_function: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      available_memory_mb: p.child('available_memory_mb').ref,
      build_environment_variables: p.child('build_environment_variables').ref,
      build_service_account: p.child('build_service_account').ref,
      build_worker_pool: p.child('build_worker_pool').ref,
      description: p.child('description').ref,
      docker_registry: p.child('docker_registry').ref,
      docker_repository: p.child('docker_repository').ref,
      effective_labels: p.child('effective_labels').ref,
      entry_point: p.child('entry_point').ref,
      environment_variables: p.child('environment_variables').ref,
      event_trigger: p.child('event_trigger').ref,
      https_trigger_security_level: p.child('https_trigger_security_level').ref,
      https_trigger_url: p.child('https_trigger_url').ref,
      id: p.child('id').ref,
      ingress_settings: p.child('ingress_settings').ref,
      kms_key_name: p.child('kms_key_name').ref,
      labels: p.child('labels').ref,
      max_instances: p.child('max_instances').ref,
      min_instances: p.child('min_instances').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      runtime: p.child('runtime').ref,
      secret_environment_variables: p.child('secret_environment_variables').ref,
      secret_volumes: p.child('secret_volumes').ref,
      service_account_email: p.child('service_account_email').ref,
      source_archive_bucket: p.child('source_archive_bucket').ref,
      source_archive_object: p.child('source_archive_object').ref,
      source_repository: p.child('source_repository').ref,
      status: p.child('status').ref,
      terraform_labels: p.child('terraform_labels').ref,
      timeout: p.child('timeout').ref,
      trigger_http: p.child('trigger_http').ref,
      version_id: p.child('version_id').ref,
      vpc_connector: p.child('vpc_connector').ref,
      vpc_connector_egress_settings: p.child('vpc_connector_egress_settings').ref,
    },
    cloudfunctions_function_iam_policy(name, block): {
      local p = path(['data', 'google_cloudfunctions_function_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_cloudfunctions_function_iam_policy: {
              [name]: std.prune({
                cloud_function: build.template(block.cloud_function),
              }),
            },
          },
        },
      },
      cloud_function: p.child('cloud_function').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    composer_environment(name, block): {
      local p = path(['data', 'google_composer_environment', name]),
      _: p.ref._ {
        block: {
          data: {
            google_composer_environment: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      config: p.child('config').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      storage_config: p.child('storage_config').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    composer_image_versions(name, block): {
      local p = path(['data', 'google_composer_image_versions', name]),
      _: p.ref._ {
        block: {
          data: {
            google_composer_image_versions: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      image_versions: p.child('image_versions').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    compute_address(name, block): {
      local p = path(['data', 'google_compute_address', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_address: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      address: p.child('address').ref,
      address_type: p.child('address_type').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      network_tier: p.child('network_tier').ref,
      prefix_length: p.child('prefix_length').ref,
      project: p.child('project').ref,
      purpose: p.child('purpose').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      status: p.child('status').ref,
      subnetwork: p.child('subnetwork').ref,
      users: p.child('users').ref,
    },
    compute_addresses(name, block): {
      local p = path(['data', 'google_compute_addresses', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_addresses: {
              [name]: std.prune({
                filter: build.template(std.get(block, 'filter', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      addresses: p.child('addresses').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    compute_backend_bucket(name, block): {
      local p = path(['data', 'google_compute_backend_bucket', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_backend_bucket: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      bucket_name: p.child('bucket_name').ref,
      cdn_policy: p.child('cdn_policy').ref,
      compression_mode: p.child('compression_mode').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      custom_response_headers: p.child('custom_response_headers').ref,
      description: p.child('description').ref,
      edge_security_policy: p.child('edge_security_policy').ref,
      enable_cdn: p.child('enable_cdn').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
    },
    compute_backend_service(name, block): {
      local p = path(['data', 'google_compute_backend_service', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_backend_service: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      affinity_cookie_ttl_sec: p.child('affinity_cookie_ttl_sec').ref,
      backend: p.child('backend').ref,
      cdn_policy: p.child('cdn_policy').ref,
      circuit_breakers: p.child('circuit_breakers').ref,
      compression_mode: p.child('compression_mode').ref,
      connection_draining_timeout_sec: p.child('connection_draining_timeout_sec').ref,
      consistent_hash: p.child('consistent_hash').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      custom_request_headers: p.child('custom_request_headers').ref,
      custom_response_headers: p.child('custom_response_headers').ref,
      description: p.child('description').ref,
      edge_security_policy: p.child('edge_security_policy').ref,
      enable_cdn: p.child('enable_cdn').ref,
      fingerprint: p.child('fingerprint').ref,
      generated_id: p.child('generated_id').ref,
      health_checks: p.child('health_checks').ref,
      iap: p.child('iap').ref,
      id: p.child('id').ref,
      load_balancing_scheme: p.child('load_balancing_scheme').ref,
      locality_lb_policies: p.child('locality_lb_policies').ref,
      locality_lb_policy: p.child('locality_lb_policy').ref,
      log_config: p.child('log_config').ref,
      name: p.child('name').ref,
      outlier_detection: p.child('outlier_detection').ref,
      port_name: p.child('port_name').ref,
      project: p.child('project').ref,
      protocol: p.child('protocol').ref,
      security_policy: p.child('security_policy').ref,
      security_settings: p.child('security_settings').ref,
      self_link: p.child('self_link').ref,
      service_lb_policy: p.child('service_lb_policy').ref,
      session_affinity: p.child('session_affinity').ref,
      strong_session_affinity_cookie: p.child('strong_session_affinity_cookie').ref,
      timeout_sec: p.child('timeout_sec').ref,
    },
    compute_default_service_account(name, block): {
      local p = path(['data', 'google_compute_default_service_account', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_default_service_account: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      email: p.child('email').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      unique_id: p.child('unique_id').ref,
    },
    compute_disk(name, block): {
      local p = path(['data', 'google_compute_disk', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_disk: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      access_mode: p.child('access_mode').ref,
      async_primary_disk: p.child('async_primary_disk').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      disk_encryption_key: p.child('disk_encryption_key').ref,
      disk_id: p.child('disk_id').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_confidential_compute: p.child('enable_confidential_compute').ref,
      guest_os_features: p.child('guest_os_features').ref,
      id: p.child('id').ref,
      image: p.child('image').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      last_attach_timestamp: p.child('last_attach_timestamp').ref,
      last_detach_timestamp: p.child('last_detach_timestamp').ref,
      licenses: p.child('licenses').ref,
      name: p.child('name').ref,
      physical_block_size_bytes: p.child('physical_block_size_bytes').ref,
      project: p.child('project').ref,
      provisioned_iops: p.child('provisioned_iops').ref,
      provisioned_throughput: p.child('provisioned_throughput').ref,
      self_link: p.child('self_link').ref,
      size: p.child('size').ref,
      snapshot: p.child('snapshot').ref,
      source_disk: p.child('source_disk').ref,
      source_disk_id: p.child('source_disk_id').ref,
      source_image_encryption_key: p.child('source_image_encryption_key').ref,
      source_image_id: p.child('source_image_id').ref,
      source_snapshot_encryption_key: p.child('source_snapshot_encryption_key').ref,
      source_snapshot_id: p.child('source_snapshot_id').ref,
      storage_pool: p.child('storage_pool').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      users: p.child('users').ref,
      zone: p.child('zone').ref,
    },
    compute_disk_iam_policy(name, block): {
      local p = path(['data', 'google_compute_disk_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_disk_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_forwarding_rule(name, block): {
      local p = path(['data', 'google_compute_forwarding_rule', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_forwarding_rule: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      all_ports: p.child('all_ports').ref,
      allow_global_access: p.child('allow_global_access').ref,
      allow_psc_global_access: p.child('allow_psc_global_access').ref,
      backend_service: p.child('backend_service').ref,
      base_forwarding_rule: p.child('base_forwarding_rule').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      forwarding_rule_id: p.child('forwarding_rule_id').ref,
      id: p.child('id').ref,
      ip_address: p.child('ip_address').ref,
      ip_protocol: p.child('ip_protocol').ref,
      ip_version: p.child('ip_version').ref,
      is_mirroring_collector: p.child('is_mirroring_collector').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      load_balancing_scheme: p.child('load_balancing_scheme').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      network_tier: p.child('network_tier').ref,
      no_automate_dns_zone: p.child('no_automate_dns_zone').ref,
      port_range: p.child('port_range').ref,
      ports: p.child('ports').ref,
      project: p.child('project').ref,
      psc_connection_id: p.child('psc_connection_id').ref,
      psc_connection_status: p.child('psc_connection_status').ref,
      recreate_closed_psc: p.child('recreate_closed_psc').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      service_directory_registrations: p.child('service_directory_registrations').ref,
      service_label: p.child('service_label').ref,
      service_name: p.child('service_name').ref,
      source_ip_ranges: p.child('source_ip_ranges').ref,
      subnetwork: p.child('subnetwork').ref,
      target: p.child('target').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    compute_forwarding_rules(name, block): {
      local p = path(['data', 'google_compute_forwarding_rules', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_forwarding_rules: {
              [name]: std.prune({
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      rules: p.child('rules').ref,
    },
    compute_global_address(name, block): {
      local p = path(['data', 'google_compute_global_address', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_global_address: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      address: p.child('address').ref,
      address_type: p.child('address_type').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      network_tier: p.child('network_tier').ref,
      prefix_length: p.child('prefix_length').ref,
      project: p.child('project').ref,
      purpose: p.child('purpose').ref,
      self_link: p.child('self_link').ref,
      status: p.child('status').ref,
      subnetwork: p.child('subnetwork').ref,
      users: p.child('users').ref,
    },
    compute_global_forwarding_rule(name, block): {
      local p = path(['data', 'google_compute_global_forwarding_rule', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_global_forwarding_rule: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      base_forwarding_rule: p.child('base_forwarding_rule').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      ip_address: p.child('ip_address').ref,
      ip_protocol: p.child('ip_protocol').ref,
      ip_version: p.child('ip_version').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      load_balancing_scheme: p.child('load_balancing_scheme').ref,
      metadata_filters: p.child('metadata_filters').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      no_automate_dns_zone: p.child('no_automate_dns_zone').ref,
      port_range: p.child('port_range').ref,
      project: p.child('project').ref,
      psc_connection_id: p.child('psc_connection_id').ref,
      psc_connection_status: p.child('psc_connection_status').ref,
      self_link: p.child('self_link').ref,
      service_directory_registrations: p.child('service_directory_registrations').ref,
      source_ip_ranges: p.child('source_ip_ranges').ref,
      subnetwork: p.child('subnetwork').ref,
      target: p.child('target').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    compute_ha_vpn_gateway(name, block): {
      local p = path(['data', 'google_compute_ha_vpn_gateway', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_ha_vpn_gateway: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      gateway_ip_version: p.child('gateway_ip_version').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      stack_type: p.child('stack_type').ref,
      vpn_interfaces: p.child('vpn_interfaces').ref,
    },
    compute_health_check(name, block): {
      local p = path(['data', 'google_compute_health_check', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_health_check: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      check_interval_sec: p.child('check_interval_sec').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      grpc_health_check: p.child('grpc_health_check').ref,
      healthy_threshold: p.child('healthy_threshold').ref,
      http2_health_check: p.child('http2_health_check').ref,
      http_health_check: p.child('http_health_check').ref,
      https_health_check: p.child('https_health_check').ref,
      id: p.child('id').ref,
      log_config: p.child('log_config').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      source_regions: p.child('source_regions').ref,
      ssl_health_check: p.child('ssl_health_check').ref,
      tcp_health_check: p.child('tcp_health_check').ref,
      timeout_sec: p.child('timeout_sec').ref,
      type: p.child('type').ref,
      unhealthy_threshold: p.child('unhealthy_threshold').ref,
    },
    compute_image(name, block): {
      local p = path(['data', 'google_compute_image', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_image: {
              [name]: std.prune({
                filter: build.template(std.get(block, 'filter', null, true)),
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
              }),
            },
          },
        },
      },
      archive_size_bytes: p.child('archive_size_bytes').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      disk_size_gb: p.child('disk_size_gb').ref,
      family: p.child('family').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      image_encryption_key_sha256: p.child('image_encryption_key_sha256').ref,
      image_id: p.child('image_id').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      licenses: p.child('licenses').ref,
      most_recent: p.child('most_recent').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      source_disk: p.child('source_disk').ref,
      source_disk_encryption_key_sha256: p.child('source_disk_encryption_key_sha256').ref,
      source_disk_id: p.child('source_disk_id').ref,
      source_image_id: p.child('source_image_id').ref,
      status: p.child('status').ref,
    },
    compute_image_iam_policy(name, block): {
      local p = path(['data', 'google_compute_image_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_image_iam_policy: {
              [name]: std.prune({
                image: build.template(block.image),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      image: p.child('image').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    compute_instance(name, block): {
      local p = path(['data', 'google_compute_instance', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_instance: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
                self_link: build.template(std.get(block, 'self_link', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      advanced_machine_features: p.child('advanced_machine_features').ref,
      allow_stopping_for_update: p.child('allow_stopping_for_update').ref,
      attached_disk: p.child('attached_disk').ref,
      boot_disk: p.child('boot_disk').ref,
      can_ip_forward: p.child('can_ip_forward').ref,
      confidential_instance_config: p.child('confidential_instance_config').ref,
      cpu_platform: p.child('cpu_platform').ref,
      current_status: p.child('current_status').ref,
      deletion_protection: p.child('deletion_protection').ref,
      description: p.child('description').ref,
      desired_status: p.child('desired_status').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_display: p.child('enable_display').ref,
      guest_accelerator: p.child('guest_accelerator').ref,
      hostname: p.child('hostname').ref,
      id: p.child('id').ref,
      instance_id: p.child('instance_id').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      machine_type: p.child('machine_type').ref,
      metadata: p.child('metadata').ref,
      metadata_fingerprint: p.child('metadata_fingerprint').ref,
      metadata_startup_script: p.child('metadata_startup_script').ref,
      min_cpu_platform: p.child('min_cpu_platform').ref,
      name: p.child('name').ref,
      network_interface: p.child('network_interface').ref,
      network_performance_config: p.child('network_performance_config').ref,
      params: p.child('params').ref,
      project: p.child('project').ref,
      reservation_affinity: p.child('reservation_affinity').ref,
      resource_policies: p.child('resource_policies').ref,
      scheduling: p.child('scheduling').ref,
      scratch_disk: p.child('scratch_disk').ref,
      self_link: p.child('self_link').ref,
      service_account: p.child('service_account').ref,
      shielded_instance_config: p.child('shielded_instance_config').ref,
      tags: p.child('tags').ref,
      tags_fingerprint: p.child('tags_fingerprint').ref,
      terraform_labels: p.child('terraform_labels').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_group(name, block): {
      local p = path(['data', 'google_compute_instance_group', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_instance_group: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      id: p.child('id').ref,
      instances: p.child('instances').ref,
      name: p.child('name').ref,
      named_port: p.child('named_port').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      size: p.child('size').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_group_manager(name, block): {
      local p = path(['data', 'google_compute_instance_group_manager', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_instance_group_manager: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
                self_link: build.template(std.get(block, 'self_link', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      all_instances_config: p.child('all_instances_config').ref,
      auto_healing_policies: p.child('auto_healing_policies').ref,
      base_instance_name: p.child('base_instance_name').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      instance_group: p.child('instance_group').ref,
      instance_lifecycle_policy: p.child('instance_lifecycle_policy').ref,
      list_managed_instances_results: p.child('list_managed_instances_results').ref,
      name: p.child('name').ref,
      named_port: p.child('named_port').ref,
      operation: p.child('operation').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      stateful_disk: p.child('stateful_disk').ref,
      stateful_external_ip: p.child('stateful_external_ip').ref,
      stateful_internal_ip: p.child('stateful_internal_ip').ref,
      status: p.child('status').ref,
      target_pools: p.child('target_pools').ref,
      target_size: p.child('target_size').ref,
      update_policy: p.child('update_policy').ref,
      version: p.child('version').ref,
      wait_for_instances: p.child('wait_for_instances').ref,
      wait_for_instances_status: p.child('wait_for_instances_status').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_iam_policy(name, block): {
      local p = path(['data', 'google_compute_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_instance_iam_policy: {
              [name]: std.prune({
                instance_name: build.template(block.instance_name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance_name: p.child('instance_name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_serial_port(name, block): {
      local p = path(['data', 'google_compute_instance_serial_port', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_instance_serial_port: {
              [name]: std.prune({
                instance: build.template(block.instance),
                port: build.template(block.port),
              }),
            },
          },
        },
      },
      contents: p.child('contents').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_instance_template(name, block): {
      local p = path(['data', 'google_compute_instance_template', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_instance_template: {
              [name]: std.prune({
                filter: build.template(std.get(block, 'filter', null, true)),
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
                self_link_unique: build.template(std.get(block, 'self_link_unique', null, true)),
              }),
            },
          },
        },
      },
      advanced_machine_features: p.child('advanced_machine_features').ref,
      can_ip_forward: p.child('can_ip_forward').ref,
      confidential_instance_config: p.child('confidential_instance_config').ref,
      description: p.child('description').ref,
      disk: p.child('disk').ref,
      effective_labels: p.child('effective_labels').ref,
      filter: p.child('filter').ref,
      guest_accelerator: p.child('guest_accelerator').ref,
      id: p.child('id').ref,
      instance_description: p.child('instance_description').ref,
      labels: p.child('labels').ref,
      machine_type: p.child('machine_type').ref,
      metadata: p.child('metadata').ref,
      metadata_fingerprint: p.child('metadata_fingerprint').ref,
      metadata_startup_script: p.child('metadata_startup_script').ref,
      min_cpu_platform: p.child('min_cpu_platform').ref,
      most_recent: p.child('most_recent').ref,
      name: p.child('name').ref,
      name_prefix: p.child('name_prefix').ref,
      network_interface: p.child('network_interface').ref,
      network_performance_config: p.child('network_performance_config').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      reservation_affinity: p.child('reservation_affinity').ref,
      resource_manager_tags: p.child('resource_manager_tags').ref,
      resource_policies: p.child('resource_policies').ref,
      scheduling: p.child('scheduling').ref,
      self_link: p.child('self_link').ref,
      self_link_unique: p.child('self_link_unique').ref,
      service_account: p.child('service_account').ref,
      shielded_instance_config: p.child('shielded_instance_config').ref,
      tags: p.child('tags').ref,
      tags_fingerprint: p.child('tags_fingerprint').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    compute_lb_ip_ranges(name, block): {
      local p = path(['data', 'google_compute_lb_ip_ranges', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_lb_ip_ranges: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      http_ssl_tcp_internal: p.child('http_ssl_tcp_internal').ref,
      id: p.child('id').ref,
      network: p.child('network').ref,
    },
    compute_machine_types(name, block): {
      local p = path(['data', 'google_compute_machine_types', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_machine_types: {
              [name]: std.prune({
                filter: build.template(std.get(block, 'filter', null, true)),
              }),
            },
          },
        },
      },
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      machine_types: p.child('machine_types').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_network(name, block): {
      local p = path(['data', 'google_compute_network', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_network: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      gateway_ipv4: p.child('gateway_ipv4').ref,
      id: p.child('id').ref,
      internal_ipv6_range: p.child('internal_ipv6_range').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      subnetworks_self_links: p.child('subnetworks_self_links').ref,
    },
    compute_network_endpoint_group(name, block): {
      local p = path(['data', 'google_compute_network_endpoint_group', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_network_endpoint_group: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
                self_link: build.template(std.get(block, 'self_link', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      default_port: p.child('default_port').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      network_endpoint_type: p.child('network_endpoint_type').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      size: p.child('size').ref,
      subnetwork: p.child('subnetwork').ref,
      zone: p.child('zone').ref,
    },
    compute_network_peering(name, block): {
      local p = path(['data', 'google_compute_network_peering', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_network_peering: {
              [name]: std.prune({
                name: build.template(block.name),
                network: build.template(block.network),
              }),
            },
          },
        },
      },
      export_custom_routes: p.child('export_custom_routes').ref,
      export_subnet_routes_with_public_ip: p.child('export_subnet_routes_with_public_ip').ref,
      id: p.child('id').ref,
      import_custom_routes: p.child('import_custom_routes').ref,
      import_subnet_routes_with_public_ip: p.child('import_subnet_routes_with_public_ip').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      peer_network: p.child('peer_network').ref,
      stack_type: p.child('stack_type').ref,
      state: p.child('state').ref,
      state_details: p.child('state_details').ref,
    },
    compute_networks(name, block): {
      local p = path(['data', 'google_compute_networks', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_networks: {
              [name]: std.prune({
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      networks: p.child('networks').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
    },
    compute_node_types(name, block): {
      local p = path(['data', 'google_compute_node_types', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_node_types: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      names: p.child('names').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    compute_region_disk(name, block): {
      local p = path(['data', 'google_compute_region_disk', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_region_disk: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      async_primary_disk: p.child('async_primary_disk').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      disk_encryption_key: p.child('disk_encryption_key').ref,
      effective_labels: p.child('effective_labels').ref,
      guest_os_features: p.child('guest_os_features').ref,
      id: p.child('id').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      last_attach_timestamp: p.child('last_attach_timestamp').ref,
      last_detach_timestamp: p.child('last_detach_timestamp').ref,
      licenses: p.child('licenses').ref,
      name: p.child('name').ref,
      physical_block_size_bytes: p.child('physical_block_size_bytes').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      replica_zones: p.child('replica_zones').ref,
      self_link: p.child('self_link').ref,
      size: p.child('size').ref,
      snapshot: p.child('snapshot').ref,
      source_disk: p.child('source_disk').ref,
      source_disk_id: p.child('source_disk_id').ref,
      source_snapshot_encryption_key: p.child('source_snapshot_encryption_key').ref,
      source_snapshot_id: p.child('source_snapshot_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      users: p.child('users').ref,
    },
    compute_region_disk_iam_policy(name, block): {
      local p = path(['data', 'google_compute_region_disk_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_region_disk_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    compute_region_instance_group(name, block): {
      local p = path(['data', 'google_compute_region_instance_group', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_region_instance_group: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      instances: p.child('instances').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      size: p.child('size').ref,
    },
    compute_region_instance_group_manager(name, block): {
      local p = path(['data', 'google_compute_region_instance_group_manager', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_region_instance_group_manager: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
                self_link: build.template(std.get(block, 'self_link', null, true)),
              }),
            },
          },
        },
      },
      all_instances_config: p.child('all_instances_config').ref,
      auto_healing_policies: p.child('auto_healing_policies').ref,
      base_instance_name: p.child('base_instance_name').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      distribution_policy_target_shape: p.child('distribution_policy_target_shape').ref,
      distribution_policy_zones: p.child('distribution_policy_zones').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      instance_group: p.child('instance_group').ref,
      instance_lifecycle_policy: p.child('instance_lifecycle_policy').ref,
      list_managed_instances_results: p.child('list_managed_instances_results').ref,
      name: p.child('name').ref,
      named_port: p.child('named_port').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      stateful_disk: p.child('stateful_disk').ref,
      stateful_external_ip: p.child('stateful_external_ip').ref,
      stateful_internal_ip: p.child('stateful_internal_ip').ref,
      status: p.child('status').ref,
      target_pools: p.child('target_pools').ref,
      target_size: p.child('target_size').ref,
      update_policy: p.child('update_policy').ref,
      version: p.child('version').ref,
      wait_for_instances: p.child('wait_for_instances').ref,
      wait_for_instances_status: p.child('wait_for_instances_status').ref,
    },
    compute_region_instance_template(name, block): {
      local p = path(['data', 'google_compute_region_instance_template', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_region_instance_template: {
              [name]: std.prune({
                filter: build.template(std.get(block, 'filter', null, true)),
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      advanced_machine_features: p.child('advanced_machine_features').ref,
      can_ip_forward: p.child('can_ip_forward').ref,
      confidential_instance_config: p.child('confidential_instance_config').ref,
      description: p.child('description').ref,
      disk: p.child('disk').ref,
      effective_labels: p.child('effective_labels').ref,
      filter: p.child('filter').ref,
      guest_accelerator: p.child('guest_accelerator').ref,
      id: p.child('id').ref,
      instance_description: p.child('instance_description').ref,
      labels: p.child('labels').ref,
      machine_type: p.child('machine_type').ref,
      metadata: p.child('metadata').ref,
      metadata_fingerprint: p.child('metadata_fingerprint').ref,
      metadata_startup_script: p.child('metadata_startup_script').ref,
      min_cpu_platform: p.child('min_cpu_platform').ref,
      most_recent: p.child('most_recent').ref,
      name: p.child('name').ref,
      name_prefix: p.child('name_prefix').ref,
      network_interface: p.child('network_interface').ref,
      network_performance_config: p.child('network_performance_config').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      reservation_affinity: p.child('reservation_affinity').ref,
      resource_manager_tags: p.child('resource_manager_tags').ref,
      resource_policies: p.child('resource_policies').ref,
      scheduling: p.child('scheduling').ref,
      self_link: p.child('self_link').ref,
      service_account: p.child('service_account').ref,
      shielded_instance_config: p.child('shielded_instance_config').ref,
      tags: p.child('tags').ref,
      tags_fingerprint: p.child('tags_fingerprint').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    compute_region_network_endpoint_group(name, block): {
      local p = path(['data', 'google_compute_region_network_endpoint_group', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_region_network_endpoint_group: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
                self_link: build.template(std.get(block, 'self_link', null, true)),
              }),
            },
          },
        },
      },
      app_engine: p.child('app_engine').ref,
      cloud_function: p.child('cloud_function').ref,
      cloud_run: p.child('cloud_run').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      network_endpoint_type: p.child('network_endpoint_type').ref,
      project: p.child('project').ref,
      psc_target_service: p.child('psc_target_service').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      subnetwork: p.child('subnetwork').ref,
    },
    compute_region_ssl_certificate(name, block): {
      local p = path(['data', 'google_compute_region_ssl_certificate', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_region_ssl_certificate: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      certificate: p.child('certificate').ref,
      certificate_id: p.child('certificate_id').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      name_prefix: p.child('name_prefix').ref,
      private_key: p.child('private_key').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
    },
    compute_regions(name, block): {
      local p = path(['data', 'google_compute_regions', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_regions: {
              [name]: std.prune({
                status: build.template(std.get(block, 'status', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      names: p.child('names').ref,
      project: p.child('project').ref,
      status: p.child('status').ref,
    },
    compute_reservation(name, block): {
      local p = path(['data', 'google_compute_reservation', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_reservation: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                zone: build.template(block.zone),
              }),
            },
          },
        },
      },
      commitment: p.child('commitment').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      share_settings: p.child('share_settings').ref,
      specific_reservation: p.child('specific_reservation').ref,
      specific_reservation_required: p.child('specific_reservation_required').ref,
      status: p.child('status').ref,
      zone: p.child('zone').ref,
    },
    compute_resource_policy(name, block): {
      local p = path(['data', 'google_compute_resource_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_resource_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      disk_consistency_group_policy: p.child('disk_consistency_group_policy').ref,
      group_placement_policy: p.child('group_placement_policy').ref,
      id: p.child('id').ref,
      instance_schedule_policy: p.child('instance_schedule_policy').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      snapshot_schedule_policy: p.child('snapshot_schedule_policy').ref,
    },
    compute_router(name, block): {
      local p = path(['data', 'google_compute_router', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_router: {
              [name]: std.prune({
                name: build.template(block.name),
                network: build.template(block.network),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      bgp: p.child('bgp').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      encrypted_interconnect_router: p.child('encrypted_interconnect_router').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
    },
    compute_router_nat(name, block): {
      local p = path(['data', 'google_compute_router_nat', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_router_nat: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
                router: build.template(block.router),
              }),
            },
          },
        },
      },
      auto_network_tier: p.child('auto_network_tier').ref,
      drain_nat_ips: p.child('drain_nat_ips').ref,
      enable_dynamic_port_allocation: p.child('enable_dynamic_port_allocation').ref,
      enable_endpoint_independent_mapping: p.child('enable_endpoint_independent_mapping').ref,
      endpoint_types: p.child('endpoint_types').ref,
      icmp_idle_timeout_sec: p.child('icmp_idle_timeout_sec').ref,
      id: p.child('id').ref,
      initial_nat_ips: p.child('initial_nat_ips').ref,
      log_config: p.child('log_config').ref,
      max_ports_per_vm: p.child('max_ports_per_vm').ref,
      min_ports_per_vm: p.child('min_ports_per_vm').ref,
      name: p.child('name').ref,
      nat_ip_allocate_option: p.child('nat_ip_allocate_option').ref,
      nat_ips: p.child('nat_ips').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      router: p.child('router').ref,
      rules: p.child('rules').ref,
      source_subnetwork_ip_ranges_to_nat: p.child('source_subnetwork_ip_ranges_to_nat').ref,
      subnetwork: p.child('subnetwork').ref,
      tcp_established_idle_timeout_sec: p.child('tcp_established_idle_timeout_sec').ref,
      tcp_time_wait_timeout_sec: p.child('tcp_time_wait_timeout_sec').ref,
      tcp_transitory_idle_timeout_sec: p.child('tcp_transitory_idle_timeout_sec').ref,
      udp_idle_timeout_sec: p.child('udp_idle_timeout_sec').ref,
    },
    compute_router_status(name, block): {
      local p = path(['data', 'google_compute_router_status', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_router_status: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      best_routes: p.child('best_routes').ref,
      best_routes_for_router: p.child('best_routes_for_router').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    compute_security_policy(name, block): {
      local p = path(['data', 'google_compute_security_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_security_policy: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
                self_link: build.template(std.get(block, 'self_link', null, true)),
              }),
            },
          },
        },
      },
      adaptive_protection_config: p.child('adaptive_protection_config').ref,
      advanced_options_config: p.child('advanced_options_config').ref,
      description: p.child('description').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      recaptcha_options_config: p.child('recaptcha_options_config').ref,
      rule: p.child('rule').ref,
      self_link: p.child('self_link').ref,
      type: p.child('type').ref,
    },
    compute_snapshot(name, block): {
      local p = path(['data', 'google_compute_snapshot', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_snapshot: {
              [name]: std.prune({
                filter: build.template(std.get(block, 'filter', null, true)),
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      chain_name: p.child('chain_name').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      disk_size_gb: p.child('disk_size_gb').ref,
      effective_labels: p.child('effective_labels').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      labels: p.child('labels').ref,
      licenses: p.child('licenses').ref,
      most_recent: p.child('most_recent').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
      snapshot_encryption_key: p.child('snapshot_encryption_key').ref,
      snapshot_id: p.child('snapshot_id').ref,
      source_disk: p.child('source_disk').ref,
      source_disk_encryption_key: p.child('source_disk_encryption_key').ref,
      storage_bytes: p.child('storage_bytes').ref,
      storage_locations: p.child('storage_locations').ref,
      terraform_labels: p.child('terraform_labels').ref,
      zone: p.child('zone').ref,
    },
    compute_snapshot_iam_policy(name, block): {
      local p = path(['data', 'google_compute_snapshot_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_snapshot_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    compute_ssl_certificate(name, block): {
      local p = path(['data', 'google_compute_ssl_certificate', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_ssl_certificate: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      certificate: p.child('certificate').ref,
      certificate_id: p.child('certificate_id').ref,
      creation_timestamp: p.child('creation_timestamp').ref,
      description: p.child('description').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      name_prefix: p.child('name_prefix').ref,
      private_key: p.child('private_key').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
    },
    compute_ssl_policy(name, block): {
      local p = path(['data', 'google_compute_ssl_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_ssl_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      creation_timestamp: p.child('creation_timestamp').ref,
      custom_features: p.child('custom_features').ref,
      description: p.child('description').ref,
      enabled_features: p.child('enabled_features').ref,
      fingerprint: p.child('fingerprint').ref,
      id: p.child('id').ref,
      min_tls_version: p.child('min_tls_version').ref,
      name: p.child('name').ref,
      profile: p.child('profile').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
    },
    compute_subnetwork(name, block): {
      local p = path(['data', 'google_compute_subnetwork', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_subnetwork: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      gateway_address: p.child('gateway_address').ref,
      id: p.child('id').ref,
      internal_ipv6_prefix: p.child('internal_ipv6_prefix').ref,
      ip_cidr_range: p.child('ip_cidr_range').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      private_ip_google_access: p.child('private_ip_google_access').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      secondary_ip_range: p.child('secondary_ip_range').ref,
      self_link: p.child('self_link').ref,
    },
    compute_subnetwork_iam_policy(name, block): {
      local p = path(['data', 'google_compute_subnetwork_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_subnetwork_iam_policy: {
              [name]: std.prune({
                subnetwork: build.template(block.subnetwork),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      subnetwork: p.child('subnetwork').ref,
    },
    compute_subnetworks(name, block): {
      local p = path(['data', 'google_compute_subnetworks', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_subnetworks: {
              [name]: std.prune({
                filter: build.template(std.get(block, 'filter', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      subnetworks: p.child('subnetworks').ref,
    },
    compute_vpn_gateway(name, block): {
      local p = path(['data', 'google_compute_vpn_gateway', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_vpn_gateway: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
    },
    compute_zones(name, block): {
      local p = path(['data', 'google_compute_zones', name]),
      _: p.ref._ {
        block: {
          data: {
            google_compute_zones: {
              [name]: std.prune({
                region: build.template(std.get(block, 'region', null, true)),
                status: build.template(std.get(block, 'status', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      names: p.child('names').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      status: p.child('status').ref,
    },
    container_analysis_note_iam_policy(name, block): {
      local p = path(['data', 'google_container_analysis_note_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_container_analysis_note_iam_policy: {
              [name]: std.prune({
                note: build.template(block.note),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      note: p.child('note').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    container_attached_install_manifest(name, block): {
      local p = path(['data', 'google_container_attached_install_manifest', name]),
      _: p.ref._ {
        block: {
          data: {
            google_container_attached_install_manifest: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
                location: build.template(block.location),
                platform_version: build.template(block.platform_version),
                project: build.template(block.project),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      manifest: p.child('manifest').ref,
      platform_version: p.child('platform_version').ref,
      project: p.child('project').ref,
    },
    container_attached_versions(name, block): {
      local p = path(['data', 'google_container_attached_versions', name]),
      _: p.ref._ {
        block: {
          data: {
            google_container_attached_versions: {
              [name]: std.prune({
                location: build.template(block.location),
                project: build.template(block.project),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      project: p.child('project').ref,
      valid_versions: p.child('valid_versions').ref,
    },
    container_aws_versions(name, block): {
      local p = path(['data', 'google_container_aws_versions', name]),
      _: p.ref._ {
        block: {
          data: {
            google_container_aws_versions: {
              [name]: std.prune({
                location: build.template(std.get(block, 'location', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      project: p.child('project').ref,
      supported_regions: p.child('supported_regions').ref,
      valid_versions: p.child('valid_versions').ref,
    },
    container_azure_versions(name, block): {
      local p = path(['data', 'google_container_azure_versions', name]),
      _: p.ref._ {
        block: {
          data: {
            google_container_azure_versions: {
              [name]: std.prune({
                location: build.template(std.get(block, 'location', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      project: p.child('project').ref,
      supported_regions: p.child('supported_regions').ref,
      valid_versions: p.child('valid_versions').ref,
    },
    container_cluster(name, block): {
      local p = path(['data', 'google_container_cluster', name]),
      _: p.ref._ {
        block: {
          data: {
            google_container_cluster: {
              [name]: std.prune({
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      addons_config: p.child('addons_config').ref,
      allow_net_admin: p.child('allow_net_admin').ref,
      authenticator_groups_config: p.child('authenticator_groups_config').ref,
      binary_authorization: p.child('binary_authorization').ref,
      cluster_autoscaling: p.child('cluster_autoscaling').ref,
      cluster_ipv4_cidr: p.child('cluster_ipv4_cidr').ref,
      confidential_nodes: p.child('confidential_nodes').ref,
      cost_management_config: p.child('cost_management_config').ref,
      database_encryption: p.child('database_encryption').ref,
      datapath_provider: p.child('datapath_provider').ref,
      default_max_pods_per_node: p.child('default_max_pods_per_node').ref,
      default_snat_status: p.child('default_snat_status').ref,
      deletion_protection: p.child('deletion_protection').ref,
      description: p.child('description').ref,
      dns_config: p.child('dns_config').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_autopilot: p.child('enable_autopilot').ref,
      enable_cilium_clusterwide_network_policy: p.child('enable_cilium_clusterwide_network_policy').ref,
      enable_intranode_visibility: p.child('enable_intranode_visibility').ref,
      enable_k8s_beta_apis: p.child('enable_k8s_beta_apis').ref,
      enable_kubernetes_alpha: p.child('enable_kubernetes_alpha').ref,
      enable_l4_ilb_subsetting: p.child('enable_l4_ilb_subsetting').ref,
      enable_legacy_abac: p.child('enable_legacy_abac').ref,
      enable_multi_networking: p.child('enable_multi_networking').ref,
      enable_shielded_nodes: p.child('enable_shielded_nodes').ref,
      enable_tpu: p.child('enable_tpu').ref,
      endpoint: p.child('endpoint').ref,
      fleet: p.child('fleet').ref,
      gateway_api_config: p.child('gateway_api_config').ref,
      id: p.child('id').ref,
      identity_service_config: p.child('identity_service_config').ref,
      initial_node_count: p.child('initial_node_count').ref,
      ip_allocation_policy: p.child('ip_allocation_policy').ref,
      label_fingerprint: p.child('label_fingerprint').ref,
      location: p.child('location').ref,
      logging_config: p.child('logging_config').ref,
      logging_service: p.child('logging_service').ref,
      maintenance_policy: p.child('maintenance_policy').ref,
      master_auth: p.child('master_auth').ref,
      master_authorized_networks_config: p.child('master_authorized_networks_config').ref,
      master_version: p.child('master_version').ref,
      mesh_certificates: p.child('mesh_certificates').ref,
      min_master_version: p.child('min_master_version').ref,
      monitoring_config: p.child('monitoring_config').ref,
      monitoring_service: p.child('monitoring_service').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      network_policy: p.child('network_policy').ref,
      networking_mode: p.child('networking_mode').ref,
      node_config: p.child('node_config').ref,
      node_locations: p.child('node_locations').ref,
      node_pool: p.child('node_pool').ref,
      node_pool_auto_config: p.child('node_pool_auto_config').ref,
      node_pool_defaults: p.child('node_pool_defaults').ref,
      node_version: p.child('node_version').ref,
      notification_config: p.child('notification_config').ref,
      operation: p.child('operation').ref,
      private_cluster_config: p.child('private_cluster_config').ref,
      private_ipv6_google_access: p.child('private_ipv6_google_access').ref,
      project: p.child('project').ref,
      release_channel: p.child('release_channel').ref,
      remove_default_node_pool: p.child('remove_default_node_pool').ref,
      resource_labels: p.child('resource_labels').ref,
      resource_usage_export_config: p.child('resource_usage_export_config').ref,
      secret_manager_config: p.child('secret_manager_config').ref,
      security_posture_config: p.child('security_posture_config').ref,
      self_link: p.child('self_link').ref,
      service_external_ips_config: p.child('service_external_ips_config').ref,
      services_ipv4_cidr: p.child('services_ipv4_cidr').ref,
      subnetwork: p.child('subnetwork').ref,
      terraform_labels: p.child('terraform_labels').ref,
      tpu_ipv4_cidr_block: p.child('tpu_ipv4_cidr_block').ref,
      vertical_pod_autoscaling: p.child('vertical_pod_autoscaling').ref,
      workload_identity_config: p.child('workload_identity_config').ref,
    },
    container_engine_versions(name, block): {
      local p = path(['data', 'google_container_engine_versions', name]),
      _: p.ref._ {
        block: {
          data: {
            google_container_engine_versions: {
              [name]: std.prune({
                location: build.template(std.get(block, 'location', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
                version_prefix: build.template(std.get(block, 'version_prefix', null, true)),
              }),
            },
          },
        },
      },
      default_cluster_version: p.child('default_cluster_version').ref,
      id: p.child('id').ref,
      latest_master_version: p.child('latest_master_version').ref,
      latest_node_version: p.child('latest_node_version').ref,
      location: p.child('location').ref,
      project: p.child('project').ref,
      release_channel_default_version: p.child('release_channel_default_version').ref,
      release_channel_latest_version: p.child('release_channel_latest_version').ref,
      valid_master_versions: p.child('valid_master_versions').ref,
      valid_node_versions: p.child('valid_node_versions').ref,
      version_prefix: p.child('version_prefix').ref,
    },
    container_registry_image(name, block): {
      local p = path(['data', 'google_container_registry_image', name]),
      _: p.ref._ {
        block: {
          data: {
            google_container_registry_image: {
              [name]: std.prune({
                digest: build.template(std.get(block, 'digest', null, true)),
                name: build.template(block.name),
                region: build.template(std.get(block, 'region', null, true)),
                tag: build.template(std.get(block, 'tag', null, true)),
              }),
            },
          },
        },
      },
      digest: p.child('digest').ref,
      id: p.child('id').ref,
      image_url: p.child('image_url').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      tag: p.child('tag').ref,
    },
    container_registry_repository(name, block): {
      local p = path(['data', 'google_container_registry_repository', name]),
      _: p.ref._ {
        block: {
          data: {
            google_container_registry_repository: {
              [name]: std.prune({
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      repository_url: p.child('repository_url').ref,
    },
    data_catalog_entry_group_iam_policy(name, block): {
      local p = path(['data', 'google_data_catalog_entry_group_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_data_catalog_entry_group_iam_policy: {
              [name]: std.prune({
                entry_group: build.template(block.entry_group),
              }),
            },
          },
        },
      },
      entry_group: p.child('entry_group').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    data_catalog_policy_tag_iam_policy(name, block): {
      local p = path(['data', 'google_data_catalog_policy_tag_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_data_catalog_policy_tag_iam_policy: {
              [name]: std.prune({
                policy_tag: build.template(block.policy_tag),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      policy_tag: p.child('policy_tag').ref,
    },
    data_catalog_tag_template_iam_policy(name, block): {
      local p = path(['data', 'google_data_catalog_tag_template_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_data_catalog_tag_template_iam_policy: {
              [name]: std.prune({
                tag_template: build.template(block.tag_template),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      tag_template: p.child('tag_template').ref,
    },
    data_catalog_taxonomy_iam_policy(name, block): {
      local p = path(['data', 'google_data_catalog_taxonomy_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_data_catalog_taxonomy_iam_policy: {
              [name]: std.prune({
                taxonomy: build.template(block.taxonomy),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      taxonomy: p.child('taxonomy').ref,
    },
    data_fusion_instance_iam_policy(name, block): {
      local p = path(['data', 'google_data_fusion_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_data_fusion_instance_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    dataplex_aspect_type_iam_policy(name, block): {
      local p = path(['data', 'google_dataplex_aspect_type_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataplex_aspect_type_iam_policy: {
              [name]: std.prune({
                aspect_type_id: build.template(block.aspect_type_id),
              }),
            },
          },
        },
      },
      aspect_type_id: p.child('aspect_type_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataplex_asset_iam_policy(name, block): {
      local p = path(['data', 'google_dataplex_asset_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataplex_asset_iam_policy: {
              [name]: std.prune({
                asset: build.template(block.asset),
                dataplex_zone: build.template(block.dataplex_zone),
                lake: build.template(block.lake),
              }),
            },
          },
        },
      },
      asset: p.child('asset').ref,
      dataplex_zone: p.child('dataplex_zone').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataplex_datascan_iam_policy(name, block): {
      local p = path(['data', 'google_dataplex_datascan_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataplex_datascan_iam_policy: {
              [name]: std.prune({
                data_scan_id: build.template(block.data_scan_id),
              }),
            },
          },
        },
      },
      data_scan_id: p.child('data_scan_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataplex_entry_group_iam_policy(name, block): {
      local p = path(['data', 'google_dataplex_entry_group_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataplex_entry_group_iam_policy: {
              [name]: std.prune({
                entry_group_id: build.template(block.entry_group_id),
              }),
            },
          },
        },
      },
      entry_group_id: p.child('entry_group_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataplex_entry_type_iam_policy(name, block): {
      local p = path(['data', 'google_dataplex_entry_type_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataplex_entry_type_iam_policy: {
              [name]: std.prune({
                entry_type_id: build.template(block.entry_type_id),
              }),
            },
          },
        },
      },
      entry_type_id: p.child('entry_type_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataplex_lake_iam_policy(name, block): {
      local p = path(['data', 'google_dataplex_lake_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataplex_lake_iam_policy: {
              [name]: std.prune({
                lake: build.template(block.lake),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataplex_task_iam_policy(name, block): {
      local p = path(['data', 'google_dataplex_task_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataplex_task_iam_policy: {
              [name]: std.prune({
                lake: build.template(block.lake),
                task_id: build.template(block.task_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      task_id: p.child('task_id').ref,
    },
    dataplex_zone_iam_policy(name, block): {
      local p = path(['data', 'google_dataplex_zone_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataplex_zone_iam_policy: {
              [name]: std.prune({
                dataplex_zone: build.template(block.dataplex_zone),
                lake: build.template(block.lake),
              }),
            },
          },
        },
      },
      dataplex_zone: p.child('dataplex_zone').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      lake: p.child('lake').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataproc_autoscaling_policy_iam_policy(name, block): {
      local p = path(['data', 'google_dataproc_autoscaling_policy_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataproc_autoscaling_policy_iam_policy: {
              [name]: std.prune({
                policy_id: build.template(block.policy_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      policy_id: p.child('policy_id').ref,
      project: p.child('project').ref,
    },
    dataproc_cluster_iam_policy(name, block): {
      local p = path(['data', 'google_dataproc_cluster_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataproc_cluster_iam_policy: {
              [name]: std.prune({
                cluster: build.template(block.cluster),
              }),
            },
          },
        },
      },
      cluster: p.child('cluster').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    dataproc_job_iam_policy(name, block): {
      local p = path(['data', 'google_dataproc_job_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataproc_job_iam_policy: {
              [name]: std.prune({
                job_id: build.template(block.job_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      job_id: p.child('job_id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    dataproc_metastore_federation_iam_policy(name, block): {
      local p = path(['data', 'google_dataproc_metastore_federation_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataproc_metastore_federation_iam_policy: {
              [name]: std.prune({
                federation_id: build.template(block.federation_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      federation_id: p.child('federation_id').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dataproc_metastore_service(name, block): {
      local p = path(['data', 'google_dataproc_metastore_service', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataproc_metastore_service: {
              [name]: std.prune({
                location: build.template(block.location),
                project: build.template(std.get(block, 'project', null, true)),
                service_id: build.template(block.service_id),
              }),
            },
          },
        },
      },
      artifact_gcs_uri: p.child('artifact_gcs_uri').ref,
      database_type: p.child('database_type').ref,
      deletion_protection: p.child('deletion_protection').ref,
      effective_labels: p.child('effective_labels').ref,
      encryption_config: p.child('encryption_config').ref,
      endpoint_uri: p.child('endpoint_uri').ref,
      hive_metastore_config: p.child('hive_metastore_config').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      maintenance_window: p.child('maintenance_window').ref,
      metadata_integration: p.child('metadata_integration').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      network_config: p.child('network_config').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
      release_channel: p.child('release_channel').ref,
      scaling_config: p.child('scaling_config').ref,
      scheduled_backup: p.child('scheduled_backup').ref,
      service_id: p.child('service_id').ref,
      state: p.child('state').ref,
      state_message: p.child('state_message').ref,
      telemetry_config: p.child('telemetry_config').ref,
      terraform_labels: p.child('terraform_labels').ref,
      tier: p.child('tier').ref,
      uid: p.child('uid').ref,
    },
    dataproc_metastore_service_iam_policy(name, block): {
      local p = path(['data', 'google_dataproc_metastore_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dataproc_metastore_service_iam_policy: {
              [name]: std.prune({
                service_id: build.template(block.service_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      service_id: p.child('service_id').ref,
    },
    datastream_static_ips(name, block): {
      local p = path(['data', 'google_datastream_static_ips', name]),
      _: p.ref._ {
        block: {
          data: {
            google_datastream_static_ips: {
              [name]: std.prune({
                location: build.template(block.location),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      project: p.child('project').ref,
      static_ips: p.child('static_ips').ref,
    },
    dns_keys(name, block): {
      local p = path(['data', 'google_dns_keys', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dns_keys: {
              [name]: std.prune({
                managed_zone: build.template(block.managed_zone),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      key_signing_keys: p.child('key_signing_keys').ref,
      managed_zone: p.child('managed_zone').ref,
      project: p.child('project').ref,
      zone_signing_keys: p.child('zone_signing_keys').ref,
    },
    dns_managed_zone(name, block): {
      local p = path(['data', 'google_dns_managed_zone', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dns_managed_zone: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      dns_name: p.child('dns_name').ref,
      id: p.child('id').ref,
      managed_zone_id: p.child('managed_zone_id').ref,
      name: p.child('name').ref,
      name_servers: p.child('name_servers').ref,
      project: p.child('project').ref,
      visibility: p.child('visibility').ref,
    },
    dns_managed_zone_iam_policy(name, block): {
      local p = path(['data', 'google_dns_managed_zone_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dns_managed_zone_iam_policy: {
              [name]: std.prune({
                managed_zone: build.template(block.managed_zone),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      managed_zone: p.child('managed_zone').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    dns_managed_zones(name, block): {
      local p = path(['data', 'google_dns_managed_zones', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dns_managed_zones: {
              [name]: std.prune({
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      managed_zones: p.child('managed_zones').ref,
      project: p.child('project').ref,
    },
    dns_record_set(name, block): {
      local p = path(['data', 'google_dns_record_set', name]),
      _: p.ref._ {
        block: {
          data: {
            google_dns_record_set: {
              [name]: std.prune({
                managed_zone: build.template(block.managed_zone),
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      managed_zone: p.child('managed_zone').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      rrdatas: p.child('rrdatas').ref,
      ttl: p.child('ttl').ref,
      type: p.child('type').ref,
    },
    endpoints_service_consumers_iam_policy(name, block): {
      local p = path(['data', 'google_endpoints_service_consumers_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_endpoints_service_consumers_iam_policy: {
              [name]: std.prune({
                consumer_project: build.template(block.consumer_project),
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      consumer_project: p.child('consumer_project').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      service_name: p.child('service_name').ref,
    },
    endpoints_service_iam_policy(name, block): {
      local p = path(['data', 'google_endpoints_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_endpoints_service_iam_policy: {
              [name]: std.prune({
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      service_name: p.child('service_name').ref,
    },
    filestore_instance(name, block): {
      local p = path(['data', 'google_filestore_instance', name]),
      _: p.ref._ {
        block: {
          data: {
            google_filestore_instance: {
              [name]: std.prune({
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      deletion_protection_enabled: p.child('deletion_protection_enabled').ref,
      deletion_protection_reason: p.child('deletion_protection_reason').ref,
      description: p.child('description').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      file_shares: p.child('file_shares').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      networks: p.child('networks').ref,
      project: p.child('project').ref,
      terraform_labels: p.child('terraform_labels').ref,
      tier: p.child('tier').ref,
      zone: p.child('zone').ref,
    },
    folder(name, block): {
      local p = path(['data', 'google_folder', name]),
      _: p.ref._ {
        block: {
          data: {
            google_folder: {
              [name]: std.prune({
                folder: build.template(block.folder),
                lookup_organization: build.template(std.get(block, 'lookup_organization', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      deletion_protection: p.child('deletion_protection').ref,
      display_name: p.child('display_name').ref,
      folder: p.child('folder').ref,
      folder_id: p.child('folder_id').ref,
      id: p.child('id').ref,
      lifecycle_state: p.child('lifecycle_state').ref,
      lookup_organization: p.child('lookup_organization').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      parent: p.child('parent').ref,
    },
    folder_iam_policy(name, block): {
      local p = path(['data', 'google_folder_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_folder_iam_policy: {
              [name]: std.prune({
                folder: build.template(block.folder),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    folder_organization_policy(name, block): {
      local p = path(['data', 'google_folder_organization_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_folder_organization_policy: {
              [name]: std.prune({
                constraint: build.template(block.constraint),
                folder: build.template(block.folder),
              }),
            },
          },
        },
      },
      boolean_policy: p.child('boolean_policy').ref,
      constraint: p.child('constraint').ref,
      etag: p.child('etag').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      list_policy: p.child('list_policy').ref,
      restore_policy: p.child('restore_policy').ref,
      update_time: p.child('update_time').ref,
      version: p.child('version').ref,
    },
    folders(name, block): {
      local p = path(['data', 'google_folders', name]),
      _: p.ref._ {
        block: {
          data: {
            google_folders: {
              [name]: std.prune({
                parent_id: build.template(block.parent_id),
              }),
            },
          },
        },
      },
      folders: p.child('folders').ref,
      id: p.child('id').ref,
      parent_id: p.child('parent_id').ref,
    },
    gke_backup_backup_plan_iam_policy(name, block): {
      local p = path(['data', 'google_gke_backup_backup_plan_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_gke_backup_backup_plan_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    gke_backup_restore_plan_iam_policy(name, block): {
      local p = path(['data', 'google_gke_backup_restore_plan_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_gke_backup_restore_plan_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    gke_hub_feature_iam_policy(name, block): {
      local p = path(['data', 'google_gke_hub_feature_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_gke_hub_feature_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    gke_hub_membership_binding(name, block): {
      local p = path(['data', 'google_gke_hub_membership_binding', name]),
      _: p.ref._ {
        block: {
          data: {
            google_gke_hub_membership_binding: {
              [name]: std.prune({
                location: build.template(block.location),
                membership_binding_id: build.template(block.membership_binding_id),
                membership_id: build.template(block.membership_id),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      delete_time: p.child('delete_time').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      membership_binding_id: p.child('membership_binding_id').ref,
      membership_id: p.child('membership_id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      scope: p.child('scope').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    gke_hub_membership_iam_policy(name, block): {
      local p = path(['data', 'google_gke_hub_membership_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_gke_hub_membership_iam_policy: {
              [name]: std.prune({
                membership_id: build.template(block.membership_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      membership_id: p.child('membership_id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    gke_hub_scope_iam_policy(name, block): {
      local p = path(['data', 'google_gke_hub_scope_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_gke_hub_scope_iam_policy: {
              [name]: std.prune({
                scope_id: build.template(block.scope_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      scope_id: p.child('scope_id').ref,
    },
    healthcare_consent_store_iam_policy(name, block): {
      local p = path(['data', 'google_healthcare_consent_store_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_healthcare_consent_store_iam_policy: {
              [name]: std.prune({
                consent_store_id: build.template(block.consent_store_id),
                dataset: build.template(block.dataset),
              }),
            },
          },
        },
      },
      consent_store_id: p.child('consent_store_id').ref,
      dataset: p.child('dataset').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    healthcare_dataset_iam_policy(name, block): {
      local p = path(['data', 'google_healthcare_dataset_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_healthcare_dataset_iam_policy: {
              [name]: std.prune({
                dataset_id: build.template(block.dataset_id),
              }),
            },
          },
        },
      },
      dataset_id: p.child('dataset_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    healthcare_dicom_store_iam_policy(name, block): {
      local p = path(['data', 'google_healthcare_dicom_store_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_healthcare_dicom_store_iam_policy: {
              [name]: std.prune({
                dicom_store_id: build.template(block.dicom_store_id),
              }),
            },
          },
        },
      },
      dicom_store_id: p.child('dicom_store_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    healthcare_fhir_store_iam_policy(name, block): {
      local p = path(['data', 'google_healthcare_fhir_store_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_healthcare_fhir_store_iam_policy: {
              [name]: std.prune({
                fhir_store_id: build.template(block.fhir_store_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      fhir_store_id: p.child('fhir_store_id').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    healthcare_hl7_v2_store_iam_policy(name, block): {
      local p = path(['data', 'google_healthcare_hl7_v2_store_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_healthcare_hl7_v2_store_iam_policy: {
              [name]: std.prune({
                hl7_v2_store_id: build.template(block.hl7_v2_store_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      hl7_v2_store_id: p.child('hl7_v2_store_id').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    iam_policy(name, block): {
      local p = path(['data', 'google_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iam_policy: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    iam_role(name, block): {
      local p = path(['data', 'google_iam_role', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iam_role: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      included_permissions: p.child('included_permissions').ref,
      name: p.child('name').ref,
      stage: p.child('stage').ref,
      title: p.child('title').ref,
    },
    iam_testable_permissions(name, block): {
      local p = path(['data', 'google_iam_testable_permissions', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iam_testable_permissions: {
              [name]: std.prune({
                custom_support_level: build.template(std.get(block, 'custom_support_level', null, true)),
                full_resource_name: build.template(block.full_resource_name),
                stages: build.template(std.get(block, 'stages', null, true)),
              }),
            },
          },
        },
      },
      custom_support_level: p.child('custom_support_level').ref,
      full_resource_name: p.child('full_resource_name').ref,
      id: p.child('id').ref,
      permissions: p.child('permissions').ref,
      stages: p.child('stages').ref,
    },
    iap_app_engine_service_iam_policy(name, block): {
      local p = path(['data', 'google_iap_app_engine_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iap_app_engine_service_iam_policy: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
    },
    iap_app_engine_version_iam_policy(name, block): {
      local p = path(['data', 'google_iap_app_engine_version_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iap_app_engine_version_iam_policy: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                service: build.template(block.service),
                version_id: build.template(block.version_id),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
      version_id: p.child('version_id').ref,
    },
    iap_client(name, block): {
      local p = path(['data', 'google_iap_client', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iap_client: {
              [name]: std.prune({
                brand: build.template(block.brand),
                client_id: build.template(block.client_id),
              }),
            },
          },
        },
      },
      brand: p.child('brand').ref,
      client_id: p.child('client_id').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      secret: p.child('secret').ref,
    },
    iap_tunnel_dest_group_iam_policy(name, block): {
      local p = path(['data', 'google_iap_tunnel_dest_group_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iap_tunnel_dest_group_iam_policy: {
              [name]: std.prune({
                dest_group: build.template(block.dest_group),
              }),
            },
          },
        },
      },
      dest_group: p.child('dest_group').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
    },
    iap_tunnel_iam_policy(name, block): {
      local p = path(['data', 'google_iap_tunnel_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iap_tunnel_iam_policy: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    iap_tunnel_instance_iam_policy(name, block): {
      local p = path(['data', 'google_iap_tunnel_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iap_tunnel_instance_iam_policy: {
              [name]: std.prune({
                instance: build.template(block.instance),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      zone: p.child('zone').ref,
    },
    iap_web_backend_service_iam_policy(name, block): {
      local p = path(['data', 'google_iap_web_backend_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iap_web_backend_service_iam_policy: {
              [name]: std.prune({
                web_backend_service: build.template(block.web_backend_service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      web_backend_service: p.child('web_backend_service').ref,
    },
    iap_web_iam_policy(name, block): {
      local p = path(['data', 'google_iap_web_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iap_web_iam_policy: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    iap_web_region_backend_service_iam_policy(name, block): {
      local p = path(['data', 'google_iap_web_region_backend_service_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iap_web_region_backend_service_iam_policy: {
              [name]: std.prune({
                web_region_backend_service: build.template(block.web_region_backend_service),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      web_region_backend_service: p.child('web_region_backend_service').ref,
    },
    iap_web_type_app_engine_iam_policy(name, block): {
      local p = path(['data', 'google_iap_web_type_app_engine_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iap_web_type_app_engine_iam_policy: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    iap_web_type_compute_iam_policy(name, block): {
      local p = path(['data', 'google_iap_web_type_compute_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_iap_web_type_compute_iam_policy: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    kms_crypto_key(name, block): {
      local p = path(['data', 'google_kms_crypto_key', name]),
      _: p.ref._ {
        block: {
          data: {
            google_kms_crypto_key: {
              [name]: std.prune({
                key_ring: build.template(block.key_ring),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      crypto_key_backend: p.child('crypto_key_backend').ref,
      destroy_scheduled_duration: p.child('destroy_scheduled_duration').ref,
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      import_only: p.child('import_only').ref,
      key_ring: p.child('key_ring').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      primary: p.child('primary').ref,
      purpose: p.child('purpose').ref,
      rotation_period: p.child('rotation_period').ref,
      skip_initial_version_creation: p.child('skip_initial_version_creation').ref,
      terraform_labels: p.child('terraform_labels').ref,
      version_template: p.child('version_template').ref,
    },
    kms_crypto_key_iam_policy(name, block): {
      local p = path(['data', 'google_kms_crypto_key_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_kms_crypto_key_iam_policy: {
              [name]: std.prune({
                crypto_key_id: build.template(block.crypto_key_id),
              }),
            },
          },
        },
      },
      crypto_key_id: p.child('crypto_key_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    kms_crypto_key_latest_version(name, block): {
      local p = path(['data', 'google_kms_crypto_key_latest_version', name]),
      _: p.ref._ {
        block: {
          data: {
            google_kms_crypto_key_latest_version: {
              [name]: std.prune({
                crypto_key: build.template(block.crypto_key),
                filter: build.template(std.get(block, 'filter', null, true)),
              }),
            },
          },
        },
      },
      algorithm: p.child('algorithm').ref,
      crypto_key: p.child('crypto_key').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      protection_level: p.child('protection_level').ref,
      public_key: p.child('public_key').ref,
      state: p.child('state').ref,
      version: p.child('version').ref,
    },
    kms_crypto_key_version(name, block): {
      local p = path(['data', 'google_kms_crypto_key_version', name]),
      _: p.ref._ {
        block: {
          data: {
            google_kms_crypto_key_version: {
              [name]: std.prune({
                crypto_key: build.template(block.crypto_key),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      algorithm: p.child('algorithm').ref,
      crypto_key: p.child('crypto_key').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      protection_level: p.child('protection_level').ref,
      public_key: p.child('public_key').ref,
      state: p.child('state').ref,
      version: p.child('version').ref,
    },
    kms_crypto_key_versions(name, block): {
      local p = path(['data', 'google_kms_crypto_key_versions', name]),
      _: p.ref._ {
        block: {
          data: {
            google_kms_crypto_key_versions: {
              [name]: std.prune({
                crypto_key: build.template(block.crypto_key),
                filter: build.template(std.get(block, 'filter', null, true)),
              }),
            },
          },
        },
      },
      crypto_key: p.child('crypto_key').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      public_key: p.child('public_key').ref,
      versions: p.child('versions').ref,
    },
    kms_crypto_keys(name, block): {
      local p = path(['data', 'google_kms_crypto_keys', name]),
      _: p.ref._ {
        block: {
          data: {
            google_kms_crypto_keys: {
              [name]: std.prune({
                filter: build.template(std.get(block, 'filter', null, true)),
                key_ring: build.template(block.key_ring),
              }),
            },
          },
        },
      },
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      key_ring: p.child('key_ring').ref,
      keys: p.child('keys').ref,
    },
    kms_ekm_connection_iam_policy(name, block): {
      local p = path(['data', 'google_kms_ekm_connection_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_kms_ekm_connection_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    kms_key_ring(name, block): {
      local p = path(['data', 'google_kms_key_ring', name]),
      _: p.ref._ {
        block: {
          data: {
            google_kms_key_ring: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
    },
    kms_key_ring_iam_policy(name, block): {
      local p = path(['data', 'google_kms_key_ring_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_kms_key_ring_iam_policy: {
              [name]: std.prune({
                key_ring_id: build.template(block.key_ring_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      key_ring_id: p.child('key_ring_id').ref,
      policy_data: p.child('policy_data').ref,
    },
    kms_key_rings(name, block): {
      local p = path(['data', 'google_kms_key_rings', name]),
      _: p.ref._ {
        block: {
          data: {
            google_kms_key_rings: {
              [name]: std.prune({
                filter: build.template(std.get(block, 'filter', null, true)),
                location: build.template(block.location),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      key_rings: p.child('key_rings').ref,
      location: p.child('location').ref,
      project: p.child('project').ref,
    },
    kms_secret(name, block): {
      local p = path(['data', 'google_kms_secret', name]),
      _: p.ref._ {
        block: {
          data: {
            google_kms_secret: {
              [name]: std.prune({
                additional_authenticated_data: build.template(std.get(block, 'additional_authenticated_data', null, true)),
                ciphertext: build.template(block.ciphertext),
                crypto_key: build.template(block.crypto_key),
              }),
            },
          },
        },
      },
      additional_authenticated_data: p.child('additional_authenticated_data').ref,
      ciphertext: p.child('ciphertext').ref,
      crypto_key: p.child('crypto_key').ref,
      id: p.child('id').ref,
      plaintext: p.child('plaintext').ref,
    },
    kms_secret_ciphertext(name, block): {
      local p = path(['data', 'google_kms_secret_ciphertext', name]),
      _: p.ref._ {
        block: {
          data: {
            google_kms_secret_ciphertext: {
              [name]: std.prune({
                crypto_key: build.template(block.crypto_key),
                plaintext: build.template(block.plaintext),
              }),
            },
          },
        },
      },
      ciphertext: p.child('ciphertext').ref,
      crypto_key: p.child('crypto_key').ref,
      id: p.child('id').ref,
      plaintext: p.child('plaintext').ref,
    },
    logging_folder_settings(name, block): {
      local p = path(['data', 'google_logging_folder_settings', name]),
      _: p.ref._ {
        block: {
          data: {
            google_logging_folder_settings: {
              [name]: std.prune({
                folder: build.template(block.folder),
              }),
            },
          },
        },
      },
      disable_default_sink: p.child('disable_default_sink').ref,
      folder: p.child('folder').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      kms_service_account_id: p.child('kms_service_account_id').ref,
      logging_service_account_id: p.child('logging_service_account_id').ref,
      name: p.child('name').ref,
      storage_location: p.child('storage_location').ref,
    },
    logging_log_view_iam_policy(name, block): {
      local p = path(['data', 'google_logging_log_view_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_logging_log_view_iam_policy: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                name: build.template(block.name),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      policy_data: p.child('policy_data').ref,
    },
    logging_organization_settings(name, block): {
      local p = path(['data', 'google_logging_organization_settings', name]),
      _: p.ref._ {
        block: {
          data: {
            google_logging_organization_settings: {
              [name]: std.prune({
                organization: build.template(block.organization),
              }),
            },
          },
        },
      },
      disable_default_sink: p.child('disable_default_sink').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      kms_service_account_id: p.child('kms_service_account_id').ref,
      logging_service_account_id: p.child('logging_service_account_id').ref,
      name: p.child('name').ref,
      organization: p.child('organization').ref,
      storage_location: p.child('storage_location').ref,
    },
    logging_project_cmek_settings(name, block): {
      local p = path(['data', 'google_logging_project_cmek_settings', name]),
      _: p.ref._ {
        block: {
          data: {
            google_logging_project_cmek_settings: {
              [name]: std.prune({
                kms_key_name: build.template(std.get(block, 'kms_key_name', null, true)),
                project: build.template(block.project),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      kms_key_version_name: p.child('kms_key_version_name').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_account_id: p.child('service_account_id').ref,
    },
    logging_project_settings(name, block): {
      local p = path(['data', 'google_logging_project_settings', name]),
      _: p.ref._ {
        block: {
          data: {
            google_logging_project_settings: {
              [name]: std.prune({
                project: build.template(block.project),
              }),
            },
          },
        },
      },
      disable_default_sink: p.child('disable_default_sink').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      kms_service_account_id: p.child('kms_service_account_id').ref,
      logging_service_account_id: p.child('logging_service_account_id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      storage_location: p.child('storage_location').ref,
    },
    logging_sink(name, block): {
      local p = path(['data', 'google_logging_sink', name]),
      _: p.ref._ {
        block: {
          data: {
            google_logging_sink: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      bigquery_options: p.child('bigquery_options').ref,
      description: p.child('description').ref,
      destination: p.child('destination').ref,
      disabled: p.child('disabled').ref,
      exclusions: p.child('exclusions').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      writer_identity: p.child('writer_identity').ref,
    },
    monitoring_app_engine_service(name, block): {
      local p = path(['data', 'google_monitoring_app_engine_service', name]),
      _: p.ref._ {
        block: {
          data: {
            google_monitoring_app_engine_service: {
              [name]: std.prune({
                module_id: build.template(block.module_id),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      module_id: p.child('module_id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_id: p.child('service_id').ref,
      telemetry: p.child('telemetry').ref,
      user_labels: p.child('user_labels').ref,
    },
    monitoring_cluster_istio_service(name, block): {
      local p = path(['data', 'google_monitoring_cluster_istio_service', name]),
      _: p.ref._ {
        block: {
          data: {
            google_monitoring_cluster_istio_service: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                location: build.template(block.location),
                project: build.template(std.get(block, 'project', null, true)),
                service_name: build.template(block.service_name),
                service_namespace: build.template(block.service_namespace),
              }),
            },
          },
        },
      },
      cluster_name: p.child('cluster_name').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_id: p.child('service_id').ref,
      service_name: p.child('service_name').ref,
      service_namespace: p.child('service_namespace').ref,
      telemetry: p.child('telemetry').ref,
      user_labels: p.child('user_labels').ref,
    },
    monitoring_istio_canonical_service(name, block): {
      local p = path(['data', 'google_monitoring_istio_canonical_service', name]),
      _: p.ref._ {
        block: {
          data: {
            google_monitoring_istio_canonical_service: {
              [name]: std.prune({
                canonical_service: build.template(block.canonical_service),
                canonical_service_namespace: build.template(block.canonical_service_namespace),
                mesh_uid: build.template(block.mesh_uid),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      canonical_service: p.child('canonical_service').ref,
      canonical_service_namespace: p.child('canonical_service_namespace').ref,
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      mesh_uid: p.child('mesh_uid').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_id: p.child('service_id').ref,
      telemetry: p.child('telemetry').ref,
      user_labels: p.child('user_labels').ref,
    },
    monitoring_mesh_istio_service(name, block): {
      local p = path(['data', 'google_monitoring_mesh_istio_service', name]),
      _: p.ref._ {
        block: {
          data: {
            google_monitoring_mesh_istio_service: {
              [name]: std.prune({
                mesh_uid: build.template(block.mesh_uid),
                project: build.template(std.get(block, 'project', null, true)),
                service_name: build.template(block.service_name),
                service_namespace: build.template(block.service_namespace),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').ref,
      id: p.child('id').ref,
      mesh_uid: p.child('mesh_uid').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      service_id: p.child('service_id').ref,
      service_name: p.child('service_name').ref,
      service_namespace: p.child('service_namespace').ref,
      telemetry: p.child('telemetry').ref,
      user_labels: p.child('user_labels').ref,
    },
    monitoring_notification_channel(name, block): {
      local p = path(['data', 'google_monitoring_notification_channel', name]),
      _: p.ref._ {
        block: {
          data: {
            google_monitoring_notification_channel: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
                user_labels: build.template(std.get(block, 'user_labels', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      enabled: p.child('enabled').ref,
      force_delete: p.child('force_delete').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      sensitive_labels: p.child('sensitive_labels').ref,
      type: p.child('type').ref,
      user_labels: p.child('user_labels').ref,
      verification_status: p.child('verification_status').ref,
    },
    monitoring_uptime_check_ips(name, block): {
      local p = path(['data', 'google_monitoring_uptime_check_ips', name]),
      _: p.ref._ {
        block: {
          data: {
            google_monitoring_uptime_check_ips: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      uptime_check_ips: p.child('uptime_check_ips').ref,
    },
    netblock_ip_ranges(name, block): {
      local p = path(['data', 'google_netblock_ip_ranges', name]),
      _: p.ref._ {
        block: {
          data: {
            google_netblock_ip_ranges: {
              [name]: std.prune({
                range_type: build.template(std.get(block, 'range_type', null, true)),
              }),
            },
          },
        },
      },
      cidr_blocks: p.child('cidr_blocks').ref,
      cidr_blocks_ipv4: p.child('cidr_blocks_ipv4').ref,
      cidr_blocks_ipv6: p.child('cidr_blocks_ipv6').ref,
      id: p.child('id').ref,
      range_type: p.child('range_type').ref,
    },
    network_security_address_group_iam_policy(name, block): {
      local p = path(['data', 'google_network_security_address_group_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_network_security_address_group_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    notebooks_instance_iam_policy(name, block): {
      local p = path(['data', 'google_notebooks_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_notebooks_instance_iam_policy: {
              [name]: std.prune({
                instance_name: build.template(block.instance_name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance_name: p.child('instance_name').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    notebooks_runtime_iam_policy(name, block): {
      local p = path(['data', 'google_notebooks_runtime_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_notebooks_runtime_iam_policy: {
              [name]: std.prune({
                runtime_name: build.template(block.runtime_name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      runtime_name: p.child('runtime_name').ref,
    },
    organization(name, block): {
      local p = path(['data', 'google_organization', name]),
      _: p.ref._ {
        block: {
          data: {
            google_organization: {
              [name]: std.prune({
                organization: build.template(std.get(block, 'organization', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      directory_customer_id: p.child('directory_customer_id').ref,
      domain: p.child('domain').ref,
      id: p.child('id').ref,
      lifecycle_state: p.child('lifecycle_state').ref,
      name: p.child('name').ref,
      org_id: p.child('org_id').ref,
      organization: p.child('organization').ref,
    },
    organization_iam_policy(name, block): {
      local p = path(['data', 'google_organization_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_organization_iam_policy: {
              [name]: std.prune({
                org_id: build.template(block.org_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      org_id: p.child('org_id').ref,
      policy_data: p.child('policy_data').ref,
    },
    privateca_ca_pool_iam_policy(name, block): {
      local p = path(['data', 'google_privateca_ca_pool_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_privateca_ca_pool_iam_policy: {
              [name]: std.prune({
                ca_pool: build.template(block.ca_pool),
              }),
            },
          },
        },
      },
      ca_pool: p.child('ca_pool').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    privateca_certificate_authority(name, block): {
      local p = path(['data', 'google_privateca_certificate_authority', name]),
      _: p.ref._ {
        block: {
          data: {
            google_privateca_certificate_authority: {
              [name]: std.prune({
                certificate_authority_id: build.template(std.get(block, 'certificate_authority_id', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                pool: build.template(std.get(block, 'pool', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      access_urls: p.child('access_urls').ref,
      certificate_authority_id: p.child('certificate_authority_id').ref,
      config: p.child('config').ref,
      create_time: p.child('create_time').ref,
      deletion_protection: p.child('deletion_protection').ref,
      desired_state: p.child('desired_state').ref,
      effective_labels: p.child('effective_labels').ref,
      gcs_bucket: p.child('gcs_bucket').ref,
      id: p.child('id').ref,
      ignore_active_certificates_on_deletion: p.child('ignore_active_certificates_on_deletion').ref,
      key_spec: p.child('key_spec').ref,
      labels: p.child('labels').ref,
      lifetime: p.child('lifetime').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      pem_ca_certificate: p.child('pem_ca_certificate').ref,
      pem_ca_certificates: p.child('pem_ca_certificates').ref,
      pem_csr: p.child('pem_csr').ref,
      pool: p.child('pool').ref,
      project: p.child('project').ref,
      skip_grace_period: p.child('skip_grace_period').ref,
      state: p.child('state').ref,
      subordinate_config: p.child('subordinate_config').ref,
      terraform_labels: p.child('terraform_labels').ref,
      type: p.child('type').ref,
      update_time: p.child('update_time').ref,
    },
    privateca_certificate_template_iam_policy(name, block): {
      local p = path(['data', 'google_privateca_certificate_template_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_privateca_certificate_template_iam_policy: {
              [name]: std.prune({
                certificate_template: build.template(block.certificate_template),
              }),
            },
          },
        },
      },
      certificate_template: p.child('certificate_template').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    privileged_access_manager_entitlement(name, block): {
      local p = path(['data', 'google_privileged_access_manager_entitlement', name]),
      _: p.ref._ {
        block: {
          data: {
            google_privileged_access_manager_entitlement: {
              [name]: std.prune({
                entitlement_id: build.template(std.get(block, 'entitlement_id', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                parent: build.template(std.get(block, 'parent', null, true)),
              }),
            },
          },
        },
      },
      additional_notification_targets: p.child('additional_notification_targets').ref,
      approval_workflow: p.child('approval_workflow').ref,
      create_time: p.child('create_time').ref,
      eligible_users: p.child('eligible_users').ref,
      entitlement_id: p.child('entitlement_id').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      max_request_duration: p.child('max_request_duration').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      privileged_access: p.child('privileged_access').ref,
      requester_justification_config: p.child('requester_justification_config').ref,
      state: p.child('state').ref,
      update_time: p.child('update_time').ref,
    },
    project(name, block): {
      local p = path(['data', 'google_project', name]),
      _: p.ref._ {
        block: {
          data: {
            google_project: {
              [name]: std.prune({
                project_id: build.template(std.get(block, 'project_id', null, true)),
              }),
            },
          },
        },
      },
      auto_create_network: p.child('auto_create_network').ref,
      billing_account: p.child('billing_account').ref,
      deletion_policy: p.child('deletion_policy').ref,
      effective_labels: p.child('effective_labels').ref,
      folder_id: p.child('folder_id').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      number: p.child('number').ref,
      org_id: p.child('org_id').ref,
      project_id: p.child('project_id').ref,
      tags: p.child('tags').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    project_iam_policy(name, block): {
      local p = path(['data', 'google_project_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_project_iam_policy: {
              [name]: std.prune({
                project: build.template(block.project),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    project_organization_policy(name, block): {
      local p = path(['data', 'google_project_organization_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_project_organization_policy: {
              [name]: std.prune({
                constraint: build.template(block.constraint),
                project: build.template(block.project),
              }),
            },
          },
        },
      },
      boolean_policy: p.child('boolean_policy').ref,
      constraint: p.child('constraint').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      list_policy: p.child('list_policy').ref,
      project: p.child('project').ref,
      restore_policy: p.child('restore_policy').ref,
      update_time: p.child('update_time').ref,
      version: p.child('version').ref,
    },
    project_service(name, block): {
      local p = path(['data', 'google_project_service', name]),
      _: p.ref._ {
        block: {
          data: {
            google_project_service: {
              [name]: std.prune({
                project: build.template(std.get(block, 'project', null, true)),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      disable_dependent_services: p.child('disable_dependent_services').ref,
      disable_on_destroy: p.child('disable_on_destroy').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
    },
    projects(name, block): {
      local p = path(['data', 'google_projects', name]),
      _: p.ref._ {
        block: {
          data: {
            google_projects: {
              [name]: std.prune({
                filter: build.template(block.filter),
              }),
            },
          },
        },
      },
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      projects: p.child('projects').ref,
    },
    pubsub_schema_iam_policy(name, block): {
      local p = path(['data', 'google_pubsub_schema_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_pubsub_schema_iam_policy: {
              [name]: std.prune({
                schema: build.template(block.schema),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      schema: p.child('schema').ref,
    },
    pubsub_subscription(name, block): {
      local p = path(['data', 'google_pubsub_subscription', name]),
      _: p.ref._ {
        block: {
          data: {
            google_pubsub_subscription: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      ack_deadline_seconds: p.child('ack_deadline_seconds').ref,
      bigquery_config: p.child('bigquery_config').ref,
      cloud_storage_config: p.child('cloud_storage_config').ref,
      dead_letter_policy: p.child('dead_letter_policy').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_exactly_once_delivery: p.child('enable_exactly_once_delivery').ref,
      enable_message_ordering: p.child('enable_message_ordering').ref,
      expiration_policy: p.child('expiration_policy').ref,
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      message_retention_duration: p.child('message_retention_duration').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      push_config: p.child('push_config').ref,
      retain_acked_messages: p.child('retain_acked_messages').ref,
      retry_policy: p.child('retry_policy').ref,
      terraform_labels: p.child('terraform_labels').ref,
      topic: p.child('topic').ref,
    },
    pubsub_subscription_iam_policy(name, block): {
      local p = path(['data', 'google_pubsub_subscription_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_pubsub_subscription_iam_policy: {
              [name]: std.prune({
                subscription: build.template(block.subscription),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      subscription: p.child('subscription').ref,
    },
    pubsub_topic(name, block): {
      local p = path(['data', 'google_pubsub_topic', name]),
      _: p.ref._ {
        block: {
          data: {
            google_pubsub_topic: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      effective_labels: p.child('effective_labels').ref,
      id: p.child('id').ref,
      ingestion_data_source_settings: p.child('ingestion_data_source_settings').ref,
      kms_key_name: p.child('kms_key_name').ref,
      labels: p.child('labels').ref,
      message_retention_duration: p.child('message_retention_duration').ref,
      message_storage_policy: p.child('message_storage_policy').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      schema_settings: p.child('schema_settings').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    pubsub_topic_iam_policy(name, block): {
      local p = path(['data', 'google_pubsub_topic_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_pubsub_topic_iam_policy: {
              [name]: std.prune({
                topic: build.template(block.topic),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      topic: p.child('topic').ref,
    },
    redis_instance(name, block): {
      local p = path(['data', 'google_redis_instance', name]),
      _: p.ref._ {
        block: {
          data: {
            google_redis_instance: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      alternative_location_id: p.child('alternative_location_id').ref,
      auth_enabled: p.child('auth_enabled').ref,
      auth_string: p.child('auth_string').ref,
      authorized_network: p.child('authorized_network').ref,
      connect_mode: p.child('connect_mode').ref,
      create_time: p.child('create_time').ref,
      current_location_id: p.child('current_location_id').ref,
      customer_managed_key: p.child('customer_managed_key').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      host: p.child('host').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location_id: p.child('location_id').ref,
      maintenance_policy: p.child('maintenance_policy').ref,
      maintenance_schedule: p.child('maintenance_schedule').ref,
      maintenance_version: p.child('maintenance_version').ref,
      memory_size_gb: p.child('memory_size_gb').ref,
      name: p.child('name').ref,
      nodes: p.child('nodes').ref,
      persistence_config: p.child('persistence_config').ref,
      persistence_iam_identity: p.child('persistence_iam_identity').ref,
      port: p.child('port').ref,
      project: p.child('project').ref,
      read_endpoint: p.child('read_endpoint').ref,
      read_endpoint_port: p.child('read_endpoint_port').ref,
      read_replicas_mode: p.child('read_replicas_mode').ref,
      redis_configs: p.child('redis_configs').ref,
      redis_version: p.child('redis_version').ref,
      region: p.child('region').ref,
      replica_count: p.child('replica_count').ref,
      reserved_ip_range: p.child('reserved_ip_range').ref,
      secondary_ip_range: p.child('secondary_ip_range').ref,
      server_ca_certs: p.child('server_ca_certs').ref,
      terraform_labels: p.child('terraform_labels').ref,
      tier: p.child('tier').ref,
      transit_encryption_mode: p.child('transit_encryption_mode').ref,
    },
    scc_source_iam_policy(name, block): {
      local p = path(['data', 'google_scc_source_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_scc_source_iam_policy: {
              [name]: std.prune({
                organization: build.template(block.organization),
                source: build.template(block.source),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      organization: p.child('organization').ref,
      policy_data: p.child('policy_data').ref,
      source: p.child('source').ref,
    },
    scc_v2_organization_source_iam_policy(name, block): {
      local p = path(['data', 'google_scc_v2_organization_source_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_scc_v2_organization_source_iam_policy: {
              [name]: std.prune({
                organization: build.template(block.organization),
                source: build.template(block.source),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      organization: p.child('organization').ref,
      policy_data: p.child('policy_data').ref,
      source: p.child('source').ref,
    },
    secret_manager_regional_secret(name, block): {
      local p = path(['data', 'google_secret_manager_regional_secret', name]),
      _: p.ref._ {
        block: {
          data: {
            google_secret_manager_regional_secret: {
              [name]: std.prune({
                location: build.template(block.location),
                project: build.template(std.get(block, 'project', null, true)),
                secret_id: build.template(block.secret_id),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      create_time: p.child('create_time').ref,
      customer_managed_encryption: p.child('customer_managed_encryption').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      rotation: p.child('rotation').ref,
      secret_id: p.child('secret_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      topics: p.child('topics').ref,
      ttl: p.child('ttl').ref,
      version_aliases: p.child('version_aliases').ref,
      version_destroy_ttl: p.child('version_destroy_ttl').ref,
    },
    secret_manager_regional_secret_iam_policy(name, block): {
      local p = path(['data', 'google_secret_manager_regional_secret_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_secret_manager_regional_secret_iam_policy: {
              [name]: std.prune({
                secret_id: build.template(block.secret_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      secret_id: p.child('secret_id').ref,
    },
    secret_manager_regional_secret_version(name, block): {
      local p = path(['data', 'google_secret_manager_regional_secret_version', name]),
      _: p.ref._ {
        block: {
          data: {
            google_secret_manager_regional_secret_version: {
              [name]: std.prune({
                secret: build.template(block.secret),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      customer_managed_encryption: p.child('customer_managed_encryption').ref,
      destroy_time: p.child('destroy_time').ref,
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      secret: p.child('secret').ref,
      secret_data: p.child('secret_data').ref,
      version: p.child('version').ref,
    },
    secret_manager_regional_secret_version_access(name, block): {
      local p = path(['data', 'google_secret_manager_regional_secret_version_access', name]),
      _: p.ref._ {
        block: {
          data: {
            google_secret_manager_regional_secret_version_access: {
              [name]: std.prune({
                secret: build.template(block.secret),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      secret: p.child('secret').ref,
      secret_data: p.child('secret_data').ref,
      version: p.child('version').ref,
    },
    secret_manager_regional_secrets(name, block): {
      local p = path(['data', 'google_secret_manager_regional_secrets', name]),
      _: p.ref._ {
        block: {
          data: {
            google_secret_manager_regional_secrets: {
              [name]: std.prune({
                filter: build.template(std.get(block, 'filter', null, true)),
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      project: p.child('project').ref,
      secrets: p.child('secrets').ref,
    },
    secret_manager_secret(name, block): {
      local p = path(['data', 'google_secret_manager_secret', name]),
      _: p.ref._ {
        block: {
          data: {
            google_secret_manager_secret: {
              [name]: std.prune({
                project: build.template(std.get(block, 'project', null, true)),
                secret_id: build.template(block.secret_id),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').ref,
      create_time: p.child('create_time').ref,
      effective_annotations: p.child('effective_annotations').ref,
      effective_labels: p.child('effective_labels').ref,
      expire_time: p.child('expire_time').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      replication: p.child('replication').ref,
      rotation: p.child('rotation').ref,
      secret_id: p.child('secret_id').ref,
      terraform_labels: p.child('terraform_labels').ref,
      topics: p.child('topics').ref,
      ttl: p.child('ttl').ref,
      version_aliases: p.child('version_aliases').ref,
      version_destroy_ttl: p.child('version_destroy_ttl').ref,
    },
    secret_manager_secret_iam_policy(name, block): {
      local p = path(['data', 'google_secret_manager_secret_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_secret_manager_secret_iam_policy: {
              [name]: std.prune({
                secret_id: build.template(block.secret_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      secret_id: p.child('secret_id').ref,
    },
    secret_manager_secret_version(name, block): {
      local p = path(['data', 'google_secret_manager_secret_version', name]),
      _: p.ref._ {
        block: {
          data: {
            google_secret_manager_secret_version: {
              [name]: std.prune({
                secret: build.template(block.secret),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      destroy_time: p.child('destroy_time').ref,
      enabled: p.child('enabled').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      secret: p.child('secret').ref,
      secret_data: p.child('secret_data').ref,
      version: p.child('version').ref,
    },
    secret_manager_secret_version_access(name, block): {
      local p = path(['data', 'google_secret_manager_secret_version_access', name]),
      _: p.ref._ {
        block: {
          data: {
            google_secret_manager_secret_version_access: {
              [name]: std.prune({
                secret: build.template(block.secret),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      secret: p.child('secret').ref,
      secret_data: p.child('secret_data').ref,
      version: p.child('version').ref,
    },
    secret_manager_secrets(name, block): {
      local p = path(['data', 'google_secret_manager_secrets', name]),
      _: p.ref._ {
        block: {
          data: {
            google_secret_manager_secrets: {
              [name]: std.prune({
                filter: build.template(std.get(block, 'filter', null, true)),
              }),
            },
          },
        },
      },
      filter: p.child('filter').ref,
      id: p.child('id').ref,
      project: p.child('project').ref,
      secrets: p.child('secrets').ref,
    },
    secure_source_manager_instance_iam_policy(name, block): {
      local p = path(['data', 'google_secure_source_manager_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_secure_source_manager_instance_iam_policy: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance_id: p.child('instance_id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    secure_source_manager_repository_iam_policy(name, block): {
      local p = path(['data', 'google_secure_source_manager_repository_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_secure_source_manager_repository_iam_policy: {
              [name]: std.prune({
                repository_id: build.template(block.repository_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      repository_id: p.child('repository_id').ref,
    },
    service_account(name, block): {
      local p = path(['data', 'google_service_account', name]),
      _: p.ref._ {
        block: {
          data: {
            google_service_account: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').ref,
      display_name: p.child('display_name').ref,
      email: p.child('email').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      unique_id: p.child('unique_id').ref,
    },
    service_account_access_token(name, block): {
      local p = path(['data', 'google_service_account_access_token', name]),
      _: p.ref._ {
        block: {
          data: {
            google_service_account_access_token: {
              [name]: std.prune({
                delegates: build.template(std.get(block, 'delegates', null, true)),
                lifetime: build.template(std.get(block, 'lifetime', null, true)),
                scopes: build.template(block.scopes),
                target_service_account: build.template(block.target_service_account),
              }),
            },
          },
        },
      },
      access_token: p.child('access_token').ref,
      delegates: p.child('delegates').ref,
      id: p.child('id').ref,
      lifetime: p.child('lifetime').ref,
      scopes: p.child('scopes').ref,
      target_service_account: p.child('target_service_account').ref,
    },
    service_account_iam_policy(name, block): {
      local p = path(['data', 'google_service_account_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_service_account_iam_policy: {
              [name]: std.prune({
                service_account_id: build.template(block.service_account_id),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      service_account_id: p.child('service_account_id').ref,
    },
    service_account_id_token(name, block): {
      local p = path(['data', 'google_service_account_id_token', name]),
      _: p.ref._ {
        block: {
          data: {
            google_service_account_id_token: {
              [name]: std.prune({
                delegates: build.template(std.get(block, 'delegates', null, true)),
                include_email: build.template(std.get(block, 'include_email', null, true)),
                target_audience: build.template(block.target_audience),
                target_service_account: build.template(std.get(block, 'target_service_account', null, true)),
              }),
            },
          },
        },
      },
      delegates: p.child('delegates').ref,
      id: p.child('id').ref,
      id_token: p.child('id_token').ref,
      include_email: p.child('include_email').ref,
      target_audience: p.child('target_audience').ref,
      target_service_account: p.child('target_service_account').ref,
    },
    service_account_jwt(name, block): {
      local p = path(['data', 'google_service_account_jwt', name]),
      _: p.ref._ {
        block: {
          data: {
            google_service_account_jwt: {
              [name]: std.prune({
                delegates: build.template(std.get(block, 'delegates', null, true)),
                expires_in: build.template(std.get(block, 'expires_in', null, true)),
                payload: build.template(block.payload),
                target_service_account: build.template(block.target_service_account),
              }),
            },
          },
        },
      },
      delegates: p.child('delegates').ref,
      expires_in: p.child('expires_in').ref,
      id: p.child('id').ref,
      jwt: p.child('jwt').ref,
      payload: p.child('payload').ref,
      target_service_account: p.child('target_service_account').ref,
    },
    service_account_key(name, block): {
      local p = path(['data', 'google_service_account_key', name]),
      _: p.ref._ {
        block: {
          data: {
            google_service_account_key: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                public_key_type: build.template(std.get(block, 'public_key_type', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      key_algorithm: p.child('key_algorithm').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      public_key: p.child('public_key').ref,
      public_key_type: p.child('public_key_type').ref,
    },
    service_networking_peered_dns_domain(name, block): {
      local p = path(['data', 'google_service_networking_peered_dns_domain', name]),
      _: p.ref._ {
        block: {
          data: {
            google_service_networking_peered_dns_domain: {
              [name]: std.prune({
                name: build.template(block.name),
                network: build.template(block.network),
                project: build.template(block.project),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      dns_suffix: p.child('dns_suffix').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      parent: p.child('parent').ref,
      project: p.child('project').ref,
      service: p.child('service').ref,
    },
    site_verification_token(name, block): {
      local p = path(['data', 'google_site_verification_token', name]),
      _: p.ref._ {
        block: {
          data: {
            google_site_verification_token: {
              [name]: std.prune({
                identifier: build.template(block.identifier),
                type: build.template(block.type),
                verification_method: build.template(block.verification_method),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      identifier: p.child('identifier').ref,
      token: p.child('token').ref,
      type: p.child('type').ref,
      verification_method: p.child('verification_method').ref,
    },
    sourcerepo_repository(name, block): {
      local p = path(['data', 'google_sourcerepo_repository', name]),
      _: p.ref._ {
        block: {
          data: {
            google_sourcerepo_repository: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      create_ignore_already_exists: p.child('create_ignore_already_exists').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      pubsub_configs: p.child('pubsub_configs').ref,
      size: p.child('size').ref,
      url: p.child('url').ref,
    },
    sourcerepo_repository_iam_policy(name, block): {
      local p = path(['data', 'google_sourcerepo_repository_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_sourcerepo_repository_iam_policy: {
              [name]: std.prune({
                repository: build.template(block.repository),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
      repository: p.child('repository').ref,
    },
    spanner_database_iam_policy(name, block): {
      local p = path(['data', 'google_spanner_database_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_spanner_database_iam_policy: {
              [name]: std.prune({
                database: build.template(block.database),
                instance: build.template(block.instance),
              }),
            },
          },
        },
      },
      database: p.child('database').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    spanner_instance(name, block): {
      local p = path(['data', 'google_spanner_instance', name]),
      _: p.ref._ {
        block: {
          data: {
            google_spanner_instance: {
              [name]: std.prune({
                config: build.template(std.get(block, 'config', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      autoscaling_config: p.child('autoscaling_config').ref,
      config: p.child('config').ref,
      display_name: p.child('display_name').ref,
      edition: p.child('edition').ref,
      effective_labels: p.child('effective_labels').ref,
      force_destroy: p.child('force_destroy').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      name: p.child('name').ref,
      num_nodes: p.child('num_nodes').ref,
      processing_units: p.child('processing_units').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      terraform_labels: p.child('terraform_labels').ref,
    },
    spanner_instance_iam_policy(name, block): {
      local p = path(['data', 'google_spanner_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_spanner_instance_iam_policy: {
              [name]: std.prune({
                instance: build.template(block.instance),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
    sql_backup_run(name, block): {
      local p = path(['data', 'google_sql_backup_run', name]),
      _: p.ref._ {
        block: {
          data: {
            google_sql_backup_run: {
              [name]: std.prune({
                instance: build.template(block.instance),
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
              }),
            },
          },
        },
      },
      backup_id: p.child('backup_id').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      location: p.child('location').ref,
      most_recent: p.child('most_recent').ref,
      project: p.child('project').ref,
      start_time: p.child('start_time').ref,
      status: p.child('status').ref,
    },
    sql_ca_certs(name, block): {
      local p = path(['data', 'google_sql_ca_certs', name]),
      _: p.ref._ {
        block: {
          data: {
            google_sql_ca_certs: {
              [name]: std.prune({
                instance: build.template(block.instance),
              }),
            },
          },
        },
      },
      active_version: p.child('active_version').ref,
      certs: p.child('certs').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      project: p.child('project').ref,
    },
    sql_database(name, block): {
      local p = path(['data', 'google_sql_database', name]),
      _: p.ref._ {
        block: {
          data: {
            google_sql_database: {
              [name]: std.prune({
                instance: build.template(block.instance),
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      charset: p.child('charset').ref,
      collation: p.child('collation').ref,
      deletion_policy: p.child('deletion_policy').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      self_link: p.child('self_link').ref,
    },
    sql_database_instance(name, block): {
      local p = path(['data', 'google_sql_database_instance', name]),
      _: p.ref._ {
        block: {
          data: {
            google_sql_database_instance: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      available_maintenance_versions: p.child('available_maintenance_versions').ref,
      clone: p.child('clone').ref,
      connection_name: p.child('connection_name').ref,
      database_version: p.child('database_version').ref,
      deletion_protection: p.child('deletion_protection').ref,
      dns_name: p.child('dns_name').ref,
      encryption_key_name: p.child('encryption_key_name').ref,
      first_ip_address: p.child('first_ip_address').ref,
      id: p.child('id').ref,
      instance_type: p.child('instance_type').ref,
      ip_address: p.child('ip_address').ref,
      maintenance_version: p.child('maintenance_version').ref,
      master_instance_name: p.child('master_instance_name').ref,
      name: p.child('name').ref,
      private_ip_address: p.child('private_ip_address').ref,
      project: p.child('project').ref,
      psc_service_attachment_link: p.child('psc_service_attachment_link').ref,
      public_ip_address: p.child('public_ip_address').ref,
      region: p.child('region').ref,
      replica_configuration: p.child('replica_configuration').ref,
      restore_backup_context: p.child('restore_backup_context').ref,
      root_password: p.child('root_password').ref,
      self_link: p.child('self_link').ref,
      server_ca_cert: p.child('server_ca_cert').ref,
      service_account_email_address: p.child('service_account_email_address').ref,
      settings: p.child('settings').ref,
    },
    sql_database_instance_latest_recovery_time(name, block): {
      local p = path(['data', 'google_sql_database_instance_latest_recovery_time', name]),
      _: p.ref._ {
        block: {
          data: {
            google_sql_database_instance_latest_recovery_time: {
              [name]: std.prune({
                instance: build.template(block.instance),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      latest_recovery_time: p.child('latest_recovery_time').ref,
      project: p.child('project').ref,
    },
    sql_database_instances(name, block): {
      local p = path(['data', 'google_sql_database_instances', name]),
      _: p.ref._ {
        block: {
          data: {
            google_sql_database_instances: {
              [name]: std.prune({
                database_version: build.template(std.get(block, 'database_version', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
                state: build.template(std.get(block, 'state', null, true)),
                tier: build.template(std.get(block, 'tier', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      database_version: p.child('database_version').ref,
      id: p.child('id').ref,
      instances: p.child('instances').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      state: p.child('state').ref,
      tier: p.child('tier').ref,
      zone: p.child('zone').ref,
    },
    sql_databases(name, block): {
      local p = path(['data', 'google_sql_databases', name]),
      _: p.ref._ {
        block: {
          data: {
            google_sql_databases: {
              [name]: std.prune({
                instance: build.template(block.instance),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      databases: p.child('databases').ref,
      id: p.child('id').ref,
      instance: p.child('instance').ref,
      project: p.child('project').ref,
    },
    sql_tiers(name, block): {
      local p = path(['data', 'google_sql_tiers', name]),
      _: p.ref._ {
        block: {
          data: {
            google_sql_tiers: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      project: p.child('project').ref,
      tiers: p.child('tiers').ref,
    },
    storage_bucket(name, block): {
      local p = path(['data', 'google_storage_bucket', name]),
      _: p.ref._ {
        block: {
          data: {
            google_storage_bucket: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      autoclass: p.child('autoclass').ref,
      cors: p.child('cors').ref,
      custom_placement_config: p.child('custom_placement_config').ref,
      default_event_based_hold: p.child('default_event_based_hold').ref,
      effective_labels: p.child('effective_labels').ref,
      enable_object_retention: p.child('enable_object_retention').ref,
      encryption: p.child('encryption').ref,
      force_destroy: p.child('force_destroy').ref,
      id: p.child('id').ref,
      labels: p.child('labels').ref,
      lifecycle_rule: p.child('lifecycle_rule').ref,
      location: p.child('location').ref,
      logging: p.child('logging').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      project_number: p.child('project_number').ref,
      public_access_prevention: p.child('public_access_prevention').ref,
      requester_pays: p.child('requester_pays').ref,
      retention_policy: p.child('retention_policy').ref,
      rpo: p.child('rpo').ref,
      self_link: p.child('self_link').ref,
      soft_delete_policy: p.child('soft_delete_policy').ref,
      storage_class: p.child('storage_class').ref,
      terraform_labels: p.child('terraform_labels').ref,
      uniform_bucket_level_access: p.child('uniform_bucket_level_access').ref,
      url: p.child('url').ref,
      versioning: p.child('versioning').ref,
      website: p.child('website').ref,
    },
    storage_bucket_iam_policy(name, block): {
      local p = path(['data', 'google_storage_bucket_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_storage_bucket_iam_policy: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
    },
    storage_bucket_object(name, block): {
      local p = path(['data', 'google_storage_bucket_object', name]),
      _: p.ref._ {
        block: {
          data: {
            google_storage_bucket_object: {
              [name]: std.prune({
                bucket: build.template(std.get(block, 'bucket', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      cache_control: p.child('cache_control').ref,
      content: p.child('content').ref,
      content_disposition: p.child('content_disposition').ref,
      content_encoding: p.child('content_encoding').ref,
      content_language: p.child('content_language').ref,
      content_type: p.child('content_type').ref,
      crc32c: p.child('crc32c').ref,
      customer_encryption: p.child('customer_encryption').ref,
      detect_md5hash: p.child('detect_md5hash').ref,
      event_based_hold: p.child('event_based_hold').ref,
      generation: p.child('generation').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      md5hash: p.child('md5hash').ref,
      media_link: p.child('media_link').ref,
      metadata: p.child('metadata').ref,
      name: p.child('name').ref,
      output_name: p.child('output_name').ref,
      retention: p.child('retention').ref,
      self_link: p.child('self_link').ref,
      source: p.child('source').ref,
      storage_class: p.child('storage_class').ref,
      temporary_hold: p.child('temporary_hold').ref,
    },
    storage_bucket_object_content(name, block): {
      local p = path(['data', 'google_storage_bucket_object_content', name]),
      _: p.ref._ {
        block: {
          data: {
            google_storage_bucket_object_content: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                content: build.template(std.get(block, 'content', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      cache_control: p.child('cache_control').ref,
      content: p.child('content').ref,
      content_disposition: p.child('content_disposition').ref,
      content_encoding: p.child('content_encoding').ref,
      content_language: p.child('content_language').ref,
      content_type: p.child('content_type').ref,
      crc32c: p.child('crc32c').ref,
      customer_encryption: p.child('customer_encryption').ref,
      detect_md5hash: p.child('detect_md5hash').ref,
      event_based_hold: p.child('event_based_hold').ref,
      generation: p.child('generation').ref,
      id: p.child('id').ref,
      kms_key_name: p.child('kms_key_name').ref,
      md5hash: p.child('md5hash').ref,
      media_link: p.child('media_link').ref,
      metadata: p.child('metadata').ref,
      name: p.child('name').ref,
      output_name: p.child('output_name').ref,
      retention: p.child('retention').ref,
      self_link: p.child('self_link').ref,
      source: p.child('source').ref,
      storage_class: p.child('storage_class').ref,
      temporary_hold: p.child('temporary_hold').ref,
    },
    storage_bucket_objects(name, block): {
      local p = path(['data', 'google_storage_bucket_objects', name]),
      _: p.ref._ {
        block: {
          data: {
            google_storage_bucket_objects: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                match_glob: build.template(std.get(block, 'match_glob', null, true)),
                prefix: build.template(std.get(block, 'prefix', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      bucket_objects: p.child('bucket_objects').ref,
      id: p.child('id').ref,
      match_glob: p.child('match_glob').ref,
      prefix: p.child('prefix').ref,
    },
    storage_buckets(name, block): {
      local p = path(['data', 'google_storage_buckets', name]),
      _: p.ref._ {
        block: {
          data: {
            google_storage_buckets: {
              [name]: std.prune({
                prefix: build.template(std.get(block, 'prefix', null, true)),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      buckets: p.child('buckets').ref,
      id: p.child('id').ref,
      prefix: p.child('prefix').ref,
      project: p.child('project').ref,
    },
    storage_managed_folder_iam_policy(name, block): {
      local p = path(['data', 'google_storage_managed_folder_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_storage_managed_folder_iam_policy: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                managed_folder: build.template(block.managed_folder),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      managed_folder: p.child('managed_folder').ref,
      policy_data: p.child('policy_data').ref,
    },
    storage_object_signed_url(name, block): {
      local p = path(['data', 'google_storage_object_signed_url', name]),
      _: p.ref._ {
        block: {
          data: {
            google_storage_object_signed_url: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                content_md5: build.template(std.get(block, 'content_md5', null, true)),
                content_type: build.template(std.get(block, 'content_type', null, true)),
                credentials: build.template(std.get(block, 'credentials', null, true)),
                duration: build.template(std.get(block, 'duration', null, true)),
                extension_headers: build.template(std.get(block, 'extension_headers', null, true)),
                http_method: build.template(std.get(block, 'http_method', null, true)),
                path: build.template(block.path),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').ref,
      content_md5: p.child('content_md5').ref,
      content_type: p.child('content_type').ref,
      credentials: p.child('credentials').ref,
      duration: p.child('duration').ref,
      extension_headers: p.child('extension_headers').ref,
      http_method: p.child('http_method').ref,
      id: p.child('id').ref,
      path: p.child('path').ref,
      signed_url: p.child('signed_url').ref,
    },
    storage_project_service_account(name, block): {
      local p = path(['data', 'google_storage_project_service_account', name]),
      _: p.ref._ {
        block: {
          data: {
            google_storage_project_service_account: {
              [name]: std.prune({
                user_project: build.template(std.get(block, 'user_project', null, true)),
              }),
            },
          },
        },
      },
      email_address: p.child('email_address').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      user_project: p.child('user_project').ref,
    },
    storage_transfer_project_service_account(name, block): {
      local p = path(['data', 'google_storage_transfer_project_service_account', name]),
      _: p.ref._ {
        block: {
          data: {
            google_storage_transfer_project_service_account: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      email: p.child('email').ref,
      id: p.child('id').ref,
      member: p.child('member').ref,
      project: p.child('project').ref,
      subject_id: p.child('subject_id').ref,
    },
    tags_tag_key(name, block): {
      local p = path(['data', 'google_tags_tag_key', name]),
      _: p.ref._ {
        block: {
          data: {
            google_tags_tag_key: {
              [name]: std.prune({
                parent: build.template(block.parent),
                short_name: build.template(block.short_name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      namespaced_name: p.child('namespaced_name').ref,
      parent: p.child('parent').ref,
      short_name: p.child('short_name').ref,
      update_time: p.child('update_time').ref,
    },
    tags_tag_key_iam_policy(name, block): {
      local p = path(['data', 'google_tags_tag_key_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_tags_tag_key_iam_policy: {
              [name]: std.prune({
                tag_key: build.template(block.tag_key),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      tag_key: p.child('tag_key').ref,
    },
    tags_tag_keys(name, block): {
      local p = path(['data', 'google_tags_tag_keys', name]),
      _: p.ref._ {
        block: {
          data: {
            google_tags_tag_keys: {
              [name]: std.prune({
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      keys: p.child('keys').ref,
      parent: p.child('parent').ref,
    },
    tags_tag_value(name, block): {
      local p = path(['data', 'google_tags_tag_value', name]),
      _: p.ref._ {
        block: {
          data: {
            google_tags_tag_value: {
              [name]: std.prune({
                parent: build.template(block.parent),
                short_name: build.template(block.short_name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      id: p.child('id').ref,
      name: p.child('name').ref,
      namespaced_name: p.child('namespaced_name').ref,
      parent: p.child('parent').ref,
      short_name: p.child('short_name').ref,
      update_time: p.child('update_time').ref,
    },
    tags_tag_value_iam_policy(name, block): {
      local p = path(['data', 'google_tags_tag_value_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_tags_tag_value_iam_policy: {
              [name]: std.prune({
                tag_value: build.template(block.tag_value),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      policy_data: p.child('policy_data').ref,
      tag_value: p.child('tag_value').ref,
    },
    tags_tag_values(name, block): {
      local p = path(['data', 'google_tags_tag_values', name]),
      _: p.ref._ {
        block: {
          data: {
            google_tags_tag_values: {
              [name]: std.prune({
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      parent: p.child('parent').ref,
      values: p.child('values').ref,
    },
    tpu_tensorflow_versions(name, block): {
      local p = path(['data', 'google_tpu_tensorflow_versions', name]),
      _: p.ref._ {
        block: {
          data: {
            google_tpu_tensorflow_versions: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      project: p.child('project').ref,
      versions: p.child('versions').ref,
      zone: p.child('zone').ref,
    },
    vertex_ai_index(name, block): {
      local p = path(['data', 'google_vertex_ai_index', name]),
      _: p.ref._ {
        block: {
          data: {
            google_vertex_ai_index: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(block.region),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      deployed_indexes: p.child('deployed_indexes').ref,
      description: p.child('description').ref,
      display_name: p.child('display_name').ref,
      effective_labels: p.child('effective_labels').ref,
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      index_stats: p.child('index_stats').ref,
      index_update_method: p.child('index_update_method').ref,
      labels: p.child('labels').ref,
      metadata: p.child('metadata').ref,
      metadata_schema_uri: p.child('metadata_schema_uri').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      terraform_labels: p.child('terraform_labels').ref,
      update_time: p.child('update_time').ref,
    },
    vmwareengine_cluster(name, block): {
      local p = path(['data', 'google_vmwareengine_cluster', name]),
      _: p.ref._ {
        block: {
          data: {
            google_vmwareengine_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      management: p.child('management').ref,
      name: p.child('name').ref,
      node_type_configs: p.child('node_type_configs').ref,
      parent: p.child('parent').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
    },
    vmwareengine_external_access_rule(name, block): {
      local p = path(['data', 'google_vmwareengine_external_access_rule', name]),
      _: p.ref._ {
        block: {
          data: {
            google_vmwareengine_external_access_rule: {
              [name]: std.prune({
                name: build.template(block.name),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      action: p.child('action').ref,
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      destination_ip_ranges: p.child('destination_ip_ranges').ref,
      destination_ports: p.child('destination_ports').ref,
      id: p.child('id').ref,
      ip_protocol: p.child('ip_protocol').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      priority: p.child('priority').ref,
      source_ip_ranges: p.child('source_ip_ranges').ref,
      source_ports: p.child('source_ports').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    vmwareengine_external_address(name, block): {
      local p = path(['data', 'google_vmwareengine_external_address', name]),
      _: p.ref._ {
        block: {
          data: {
            google_vmwareengine_external_address: {
              [name]: std.prune({
                name: build.template(block.name),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      external_ip: p.child('external_ip').ref,
      id: p.child('id').ref,
      internal_ip: p.child('internal_ip').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      state: p.child('state').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
    },
    vmwareengine_network(name, block): {
      local p = path(['data', 'google_vmwareengine_network', name]),
      _: p.ref._ {
        block: {
          data: {
            google_vmwareengine_network: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      type: p.child('type').ref,
      uid: p.child('uid').ref,
      vpc_networks: p.child('vpc_networks').ref,
    },
    vmwareengine_network_peering(name, block): {
      local p = path(['data', 'google_vmwareengine_network_peering', name]),
      _: p.ref._ {
        block: {
          data: {
            google_vmwareengine_network_peering: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      export_custom_routes: p.child('export_custom_routes').ref,
      export_custom_routes_with_public_ip: p.child('export_custom_routes_with_public_ip').ref,
      id: p.child('id').ref,
      import_custom_routes: p.child('import_custom_routes').ref,
      import_custom_routes_with_public_ip: p.child('import_custom_routes_with_public_ip').ref,
      name: p.child('name').ref,
      peer_network: p.child('peer_network').ref,
      peer_network_type: p.child('peer_network_type').ref,
      project: p.child('project').ref,
      state: p.child('state').ref,
      state_details: p.child('state_details').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      vmware_engine_network: p.child('vmware_engine_network').ref,
      vmware_engine_network_canonical: p.child('vmware_engine_network_canonical').ref,
    },
    vmwareengine_network_policy(name, block): {
      local p = path(['data', 'google_vmwareengine_network_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_vmwareengine_network_policy: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      description: p.child('description').ref,
      edge_services_cidr: p.child('edge_services_cidr').ref,
      external_ip: p.child('external_ip').ref,
      id: p.child('id').ref,
      internet_access: p.child('internet_access').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      project: p.child('project').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      vmware_engine_network: p.child('vmware_engine_network').ref,
      vmware_engine_network_canonical: p.child('vmware_engine_network_canonical').ref,
    },
    vmwareengine_nsx_credentials(name, block): {
      local p = path(['data', 'google_vmwareengine_nsx_credentials', name]),
      _: p.ref._ {
        block: {
          data: {
            google_vmwareengine_nsx_credentials: {
              [name]: std.prune({
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      parent: p.child('parent').ref,
      password: p.child('password').ref,
      username: p.child('username').ref,
    },
    vmwareengine_private_cloud(name, block): {
      local p = path(['data', 'google_vmwareengine_private_cloud', name]),
      _: p.ref._ {
        block: {
          data: {
            google_vmwareengine_private_cloud: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
              }),
            },
          },
        },
      },
      deletion_delay_hours: p.child('deletion_delay_hours').ref,
      description: p.child('description').ref,
      hcx: p.child('hcx').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      management_cluster: p.child('management_cluster').ref,
      name: p.child('name').ref,
      network_config: p.child('network_config').ref,
      nsx: p.child('nsx').ref,
      project: p.child('project').ref,
      send_deletion_delay_hours_if_zero: p.child('send_deletion_delay_hours_if_zero').ref,
      state: p.child('state').ref,
      type: p.child('type').ref,
      uid: p.child('uid').ref,
      vcenter: p.child('vcenter').ref,
    },
    vmwareengine_subnet(name, block): {
      local p = path(['data', 'google_vmwareengine_subnet', name]),
      _: p.ref._ {
        block: {
          data: {
            google_vmwareengine_subnet: {
              [name]: std.prune({
                name: build.template(block.name),
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').ref,
      dhcp_address_ranges: p.child('dhcp_address_ranges').ref,
      gateway_id: p.child('gateway_id').ref,
      gateway_ip: p.child('gateway_ip').ref,
      id: p.child('id').ref,
      ip_cidr_range: p.child('ip_cidr_range').ref,
      name: p.child('name').ref,
      parent: p.child('parent').ref,
      standard_config: p.child('standard_config').ref,
      state: p.child('state').ref,
      type: p.child('type').ref,
      uid: p.child('uid').ref,
      update_time: p.child('update_time').ref,
      vlan_id: p.child('vlan_id').ref,
    },
    vmwareengine_vcenter_credentials(name, block): {
      local p = path(['data', 'google_vmwareengine_vcenter_credentials', name]),
      _: p.ref._ {
        block: {
          data: {
            google_vmwareengine_vcenter_credentials: {
              [name]: std.prune({
                parent: build.template(block.parent),
              }),
            },
          },
        },
      },
      id: p.child('id').ref,
      parent: p.child('parent').ref,
      password: p.child('password').ref,
      username: p.child('username').ref,
    },
    vpc_access_connector(name, block): {
      local p = path(['data', 'google_vpc_access_connector', name]),
      _: p.ref._ {
        block: {
          data: {
            google_vpc_access_connector: {
              [name]: std.prune({
                name: build.template(block.name),
                project: build.template(std.get(block, 'project', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      connected_projects: p.child('connected_projects').ref,
      id: p.child('id').ref,
      ip_cidr_range: p.child('ip_cidr_range').ref,
      machine_type: p.child('machine_type').ref,
      max_instances: p.child('max_instances').ref,
      max_throughput: p.child('max_throughput').ref,
      min_instances: p.child('min_instances').ref,
      min_throughput: p.child('min_throughput').ref,
      name: p.child('name').ref,
      network: p.child('network').ref,
      project: p.child('project').ref,
      region: p.child('region').ref,
      self_link: p.child('self_link').ref,
      state: p.child('state').ref,
      subnet: p.child('subnet').ref,
    },
    workbench_instance_iam_policy(name, block): {
      local p = path(['data', 'google_workbench_instance_iam_policy', name]),
      _: p.ref._ {
        block: {
          data: {
            google_workbench_instance_iam_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      etag: p.child('etag').ref,
      id: p.child('id').ref,
      location: p.child('location').ref,
      name: p.child('name').ref,
      policy_data: p.child('policy_data').ref,
      project: p.child('project').ref,
    },
  },
  func: {
    location_from_id(id): func('provider::google::location_from_id', [id]),
    name_from_id(id): func('provider::google::name_from_id', [id]),
    project_from_id(id): func('provider::google::project_from_id', [id]),
    region_from_id(id): func('provider::google::region_from_id', [id]),
    region_from_zone(zone): func('provider::google::region_from_zone', [zone]),
    zone_from_id(id): func('provider::google::zone_from_id', [id]),
  },
};

provider
