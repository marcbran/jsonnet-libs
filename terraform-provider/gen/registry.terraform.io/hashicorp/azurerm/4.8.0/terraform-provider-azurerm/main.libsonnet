local build = {
  expression(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then if std.objectHas(val._, 'ref') then val._.ref else '"%s"' % [std.strReplace(val._.str, '\n', '\n')] else std.mapWithKey(function(key, value) self.expression(value), val) else if std.type(val) == 'array' then std.map(function(element) self.expression(element), val) else if std.type(val) == 'string' then '"%s"' % [std.strReplace(val, '\n', '\n')] else val,
  template(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then if std.objectHas(val._, 'ref') then '${%s}' % [val._.ref] else val._.str else std.mapWithKey(function(key, value) self.template(value), val) else if std.type(val) == 'array' then std.map(function(element) self.template(element), val) else if std.type(val) == 'string' then val else val,
  requiredProvider(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then val._.requiredProvider else std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.requiredProvider(val[key]), std.objectFields(val)), {}) else if std.type(val) == 'array' then std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.requiredProvider(val[key]), val), {}) else {},
};

local requiredProvider = {
  _: {
    requiredProvider: {
      azurerm: {
        source: 'registry.terraform.io/hashicorp/azurerm',
        version: '4.8.0',
      },
    },
  },
};

local path(segments) = {
  child(segment): path(segments + [segment]),
  out: requiredProvider { _+: { ref: std.join('.', segments) } },
};

local func(name, parameters=[]) =
  local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]);
  requiredProvider { _+: { ref: '%s(%s)' % [name, parameterString] } };

local provider = {
  local name = 'azurerm',
  provider(block): {
    _: {
      block: {
        provider: {
          [name]: std.prune({
            alias: std.get(block, 'alias', null, true),
          }),
        },
      },
    },
  },
  resource: {
    aadb2c_directory(name, block): {
      local p = path(['azurerm_aadb2c_directory', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_aadb2c_directory: {
              [name]: std.prune({
                data_residency_location: build.template(block.data_residency_location),
                domain_name: build.template(block.domain_name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      billing_type: p.child('billing_type').out,
      country_code: p.child('country_code').out,
      data_residency_location: p.child('data_residency_location').out,
      display_name: p.child('display_name').out,
      domain_name: p.child('domain_name').out,
      effective_start_date: p.child('effective_start_date').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
    },
    active_directory_domain_service(name, block): {
      local p = path(['azurerm_active_directory_domain_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_active_directory_domain_service: {
              [name]: std.prune({
                domain_configuration_type: build.template(std.get(block, 'domain_configuration_type', null, true)),
                domain_name: build.template(block.domain_name),
                filtered_sync_enabled: build.template(std.get(block, 'filtered_sync_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      deployment_id: p.child('deployment_id').out,
      domain_configuration_type: p.child('domain_configuration_type').out,
      domain_name: p.child('domain_name').out,
      filtered_sync_enabled: p.child('filtered_sync_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      resource_id: p.child('resource_id').out,
      sku: p.child('sku').out,
      sync_owner: p.child('sync_owner').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
      version: p.child('version').out,
    },
    active_directory_domain_service_replica_set(name, block): {
      local p = path(['azurerm_active_directory_domain_service_replica_set', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_active_directory_domain_service_replica_set: {
              [name]: std.prune({
                domain_service_id: build.template(block.domain_service_id),
                location: build.template(block.location),
                subnet_id: build.template(block.subnet_id),
              }),
            },
          },
        },
      },
      domain_controller_ip_addresses: p.child('domain_controller_ip_addresses').out,
      domain_service_id: p.child('domain_service_id').out,
      external_access_ip_address: p.child('external_access_ip_address').out,
      id: p.child('id').out,
      location: p.child('location').out,
      service_status: p.child('service_status').out,
      subnet_id: p.child('subnet_id').out,
    },
    active_directory_domain_service_trust(name, block): {
      local p = path(['azurerm_active_directory_domain_service_trust', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_active_directory_domain_service_trust: {
              [name]: std.prune({
                domain_service_id: build.template(block.domain_service_id),
                name: build.template(block.name),
                password: build.template(block.password),
                trusted_domain_dns_ips: build.template(block.trusted_domain_dns_ips),
                trusted_domain_fqdn: build.template(block.trusted_domain_fqdn),
              }),
            },
          },
        },
      },
      domain_service_id: p.child('domain_service_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      password: p.child('password').out,
      trusted_domain_dns_ips: p.child('trusted_domain_dns_ips').out,
      trusted_domain_fqdn: p.child('trusted_domain_fqdn').out,
    },
    advanced_threat_protection(name, block): {
      local p = path(['azurerm_advanced_threat_protection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_advanced_threat_protection: {
              [name]: std.prune({
                enabled: build.template(block.enabled),
                target_resource_id: build.template(block.target_resource_id),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      target_resource_id: p.child('target_resource_id').out,
    },
    advisor_suppression(name, block): {
      local p = path(['azurerm_advisor_suppression', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_advisor_suppression: {
              [name]: std.prune({
                name: build.template(block.name),
                recommendation_id: build.template(block.recommendation_id),
                resource_id: build.template(block.resource_id),
                ttl: build.template(std.get(block, 'ttl', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      recommendation_id: p.child('recommendation_id').out,
      resource_id: p.child('resource_id').out,
      suppression_id: p.child('suppression_id').out,
      ttl: p.child('ttl').out,
    },
    ai_services(name, block): {
      local p = path(['azurerm_ai_services', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_ai_services: {
              [name]: std.prune({
                custom_subdomain_name: build.template(std.get(block, 'custom_subdomain_name', null, true)),
                fqdns: build.template(std.get(block, 'fqdns', null, true)),
                local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                outbound_network_access_restricted: build.template(std.get(block, 'outbound_network_access_restricted', null, true)),
                public_network_access: build.template(std.get(block, 'public_network_access', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      custom_subdomain_name: p.child('custom_subdomain_name').out,
      endpoint: p.child('endpoint').out,
      fqdns: p.child('fqdns').out,
      id: p.child('id').out,
      local_authentication_enabled: p.child('local_authentication_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_network_access_restricted: p.child('outbound_network_access_restricted').out,
      primary_access_key: p.child('primary_access_key').out,
      public_network_access: p.child('public_network_access').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    analysis_services_server(name, block): {
      local p = path(['azurerm_analysis_services_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_analysis_services_server: {
              [name]: std.prune({
                admin_users: build.template(std.get(block, 'admin_users', null, true)),
                backup_blob_container_uri: build.template(std.get(block, 'backup_blob_container_uri', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                power_bi_service_enabled: build.template(std.get(block, 'power_bi_service_enabled', null, true)),
                querypool_connection_mode: build.template(std.get(block, 'querypool_connection_mode', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      admin_users: p.child('admin_users').out,
      backup_blob_container_uri: p.child('backup_blob_container_uri').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      power_bi_service_enabled: p.child('power_bi_service_enabled').out,
      querypool_connection_mode: p.child('querypool_connection_mode').out,
      resource_group_name: p.child('resource_group_name').out,
      server_full_name: p.child('server_full_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    api_connection(name, block): {
      local p = path(['azurerm_api_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_connection: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                managed_api_id: build.template(block.managed_api_id),
                name: build.template(block.name),
                parameter_values: build.template(std.get(block, 'parameter_values', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      managed_api_id: p.child('managed_api_id').out,
      name: p.child('name').out,
      parameter_values: p.child('parameter_values').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    api_management(name, block): {
      local p = path(['azurerm_api_management', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management: {
              [name]: std.prune({
                client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null, true)),
                gateway_disabled: build.template(std.get(block, 'gateway_disabled', null, true)),
                location: build.template(block.location),
                min_api_version: build.template(std.get(block, 'min_api_version', null, true)),
                name: build.template(block.name),
                public_ip_address_id: build.template(std.get(block, 'public_ip_address_id', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                publisher_email: build.template(block.publisher_email),
                publisher_name: build.template(block.publisher_name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_network_type: build.template(std.get(block, 'virtual_network_type', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      client_certificate_enabled: p.child('client_certificate_enabled').out,
      developer_portal_url: p.child('developer_portal_url').out,
      gateway_disabled: p.child('gateway_disabled').out,
      gateway_regional_url: p.child('gateway_regional_url').out,
      gateway_url: p.child('gateway_url').out,
      id: p.child('id').out,
      location: p.child('location').out,
      management_api_url: p.child('management_api_url').out,
      min_api_version: p.child('min_api_version').out,
      name: p.child('name').out,
      notification_sender_email: p.child('notification_sender_email').out,
      portal_url: p.child('portal_url').out,
      private_ip_addresses: p.child('private_ip_addresses').out,
      public_ip_address_id: p.child('public_ip_address_id').out,
      public_ip_addresses: p.child('public_ip_addresses').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      publisher_email: p.child('publisher_email').out,
      publisher_name: p.child('publisher_name').out,
      resource_group_name: p.child('resource_group_name').out,
      scm_url: p.child('scm_url').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      virtual_network_type: p.child('virtual_network_type').out,
      zones: p.child('zones').out,
    },
    api_management_api(name, block): {
      local p = path(['azurerm_api_management_api', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_api: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                revision: build.template(block.revision),
                revision_description: build.template(std.get(block, 'revision_description', null, true)),
                source_api_id: build.template(std.get(block, 'source_api_id', null, true)),
                subscription_required: build.template(std.get(block, 'subscription_required', null, true)),
                terms_of_service_url: build.template(std.get(block, 'terms_of_service_url', null, true)),
                version_description: build.template(std.get(block, 'version_description', null, true)),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      api_type: p.child('api_type').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      is_current: p.child('is_current').out,
      is_online: p.child('is_online').out,
      name: p.child('name').out,
      path: p.child('path').out,
      protocols: p.child('protocols').out,
      resource_group_name: p.child('resource_group_name').out,
      revision: p.child('revision').out,
      revision_description: p.child('revision_description').out,
      service_url: p.child('service_url').out,
      source_api_id: p.child('source_api_id').out,
      subscription_required: p.child('subscription_required').out,
      terms_of_service_url: p.child('terms_of_service_url').out,
      version: p.child('version').out,
      version_description: p.child('version_description').out,
      version_set_id: p.child('version_set_id').out,
    },
    api_management_api_diagnostic(name, block): {
      local p = path(['azurerm_api_management_api_diagnostic', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_api_diagnostic: {
              [name]: std.prune({
                api_management_logger_id: build.template(block.api_management_logger_id),
                api_management_name: build.template(block.api_management_name),
                api_name: build.template(block.api_name),
                identifier: build.template(block.identifier),
                operation_name_format: build.template(std.get(block, 'operation_name_format', null, true)),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      always_log_errors: p.child('always_log_errors').out,
      api_management_logger_id: p.child('api_management_logger_id').out,
      api_management_name: p.child('api_management_name').out,
      api_name: p.child('api_name').out,
      http_correlation_protocol: p.child('http_correlation_protocol').out,
      id: p.child('id').out,
      identifier: p.child('identifier').out,
      log_client_ip: p.child('log_client_ip').out,
      operation_name_format: p.child('operation_name_format').out,
      resource_group_name: p.child('resource_group_name').out,
      sampling_percentage: p.child('sampling_percentage').out,
      verbosity: p.child('verbosity').out,
    },
    api_management_api_operation(name, block): {
      local p = path(['azurerm_api_management_api_operation', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_api_operation: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                api_name: build.template(block.api_name),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                method: build.template(block.method),
                operation_id: build.template(block.operation_id),
                resource_group_name: build.template(block.resource_group_name),
                url_template: build.template(block.url_template),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      api_name: p.child('api_name').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      method: p.child('method').out,
      operation_id: p.child('operation_id').out,
      resource_group_name: p.child('resource_group_name').out,
      url_template: p.child('url_template').out,
    },
    api_management_api_operation_policy(name, block): {
      local p = path(['azurerm_api_management_api_operation_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_api_operation_policy: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                api_name: build.template(block.api_name),
                operation_id: build.template(block.operation_id),
                resource_group_name: build.template(block.resource_group_name),
                xml_link: build.template(std.get(block, 'xml_link', null, true)),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      api_name: p.child('api_name').out,
      id: p.child('id').out,
      operation_id: p.child('operation_id').out,
      resource_group_name: p.child('resource_group_name').out,
      xml_content: p.child('xml_content').out,
      xml_link: p.child('xml_link').out,
    },
    api_management_api_operation_tag(name, block): {
      local p = path(['azurerm_api_management_api_operation_tag', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_api_operation_tag: {
              [name]: std.prune({
                api_operation_id: build.template(block.api_operation_id),
                display_name: build.template(block.display_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      api_operation_id: p.child('api_operation_id').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    api_management_api_policy(name, block): {
      local p = path(['azurerm_api_management_api_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_api_policy: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                api_name: build.template(block.api_name),
                resource_group_name: build.template(block.resource_group_name),
                xml_link: build.template(std.get(block, 'xml_link', null, true)),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      api_name: p.child('api_name').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
      xml_content: p.child('xml_content').out,
      xml_link: p.child('xml_link').out,
    },
    api_management_api_release(name, block): {
      local p = path(['azurerm_api_management_api_release', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_api_release: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                name: build.template(block.name),
                notes: build.template(std.get(block, 'notes', null, true)),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      notes: p.child('notes').out,
    },
    api_management_api_schema(name, block): {
      local p = path(['azurerm_api_management_api_schema', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_api_schema: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                api_name: build.template(block.api_name),
                components: build.template(std.get(block, 'components', null, true)),
                content_type: build.template(block.content_type),
                definitions: build.template(std.get(block, 'definitions', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                schema_id: build.template(block.schema_id),
                value: build.template(std.get(block, 'value', null, true)),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      api_name: p.child('api_name').out,
      components: p.child('components').out,
      content_type: p.child('content_type').out,
      definitions: p.child('definitions').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
      schema_id: p.child('schema_id').out,
      value: p.child('value').out,
    },
    api_management_api_tag(name, block): {
      local p = path(['azurerm_api_management_api_tag', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_api_tag: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    api_management_api_tag_description(name, block): {
      local p = path(['azurerm_api_management_api_tag_description', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_api_tag_description: {
              [name]: std.prune({
                api_tag_id: build.template(block.api_tag_id),
                description: build.template(std.get(block, 'description', null, true)),
                external_documentation_description: build.template(std.get(block, 'external_documentation_description', null, true)),
                external_documentation_url: build.template(std.get(block, 'external_documentation_url', null, true)),
              }),
            },
          },
        },
      },
      api_tag_id: p.child('api_tag_id').out,
      description: p.child('description').out,
      external_documentation_description: p.child('external_documentation_description').out,
      external_documentation_url: p.child('external_documentation_url').out,
      id: p.child('id').out,
    },
    api_management_api_version_set(name, block): {
      local p = path(['azurerm_api_management_api_version_set', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_api_version_set: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                version_header_name: build.template(std.get(block, 'version_header_name', null, true)),
                version_query_name: build.template(std.get(block, 'version_query_name', null, true)),
                versioning_scheme: build.template(block.versioning_scheme),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      version_header_name: p.child('version_header_name').out,
      version_query_name: p.child('version_query_name').out,
      versioning_scheme: p.child('versioning_scheme').out,
    },
    api_management_authorization_server(name, block): {
      local p = path(['azurerm_api_management_authorization_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_authorization_server: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                authorization_endpoint: build.template(block.authorization_endpoint),
                authorization_methods: build.template(block.authorization_methods),
                bearer_token_sending_methods: build.template(std.get(block, 'bearer_token_sending_methods', null, true)),
                client_authentication_method: build.template(std.get(block, 'client_authentication_method', null, true)),
                client_id: build.template(block.client_id),
                client_registration_endpoint: build.template(block.client_registration_endpoint),
                client_secret: build.template(std.get(block, 'client_secret', null, true)),
                default_scope: build.template(std.get(block, 'default_scope', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                grant_types: build.template(block.grant_types),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                resource_owner_password: build.template(std.get(block, 'resource_owner_password', null, true)),
                resource_owner_username: build.template(std.get(block, 'resource_owner_username', null, true)),
                support_state: build.template(std.get(block, 'support_state', null, true)),
                token_endpoint: build.template(std.get(block, 'token_endpoint', null, true)),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      authorization_endpoint: p.child('authorization_endpoint').out,
      authorization_methods: p.child('authorization_methods').out,
      bearer_token_sending_methods: p.child('bearer_token_sending_methods').out,
      client_authentication_method: p.child('client_authentication_method').out,
      client_id: p.child('client_id').out,
      client_registration_endpoint: p.child('client_registration_endpoint').out,
      client_secret: p.child('client_secret').out,
      default_scope: p.child('default_scope').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      grant_types: p.child('grant_types').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      resource_owner_password: p.child('resource_owner_password').out,
      resource_owner_username: p.child('resource_owner_username').out,
      support_state: p.child('support_state').out,
      token_endpoint: p.child('token_endpoint').out,
    },
    api_management_backend(name, block): {
      local p = path(['azurerm_api_management_backend', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_backend: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                protocol: build.template(block.protocol),
                resource_group_name: build.template(block.resource_group_name),
                resource_id: build.template(std.get(block, 'resource_id', null, true)),
                title: build.template(std.get(block, 'title', null, true)),
                url: build.template(block.url),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      protocol: p.child('protocol').out,
      resource_group_name: p.child('resource_group_name').out,
      resource_id: p.child('resource_id').out,
      title: p.child('title').out,
      url: p.child('url').out,
    },
    api_management_certificate(name, block): {
      local p = path(['azurerm_api_management_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_certificate: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                data: build.template(std.get(block, 'data', null, true)),
                key_vault_identity_client_id: build.template(std.get(block, 'key_vault_identity_client_id', null, true)),
                key_vault_secret_id: build.template(std.get(block, 'key_vault_secret_id', null, true)),
                name: build.template(block.name),
                password: build.template(std.get(block, 'password', null, true)),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      data: p.child('data').out,
      expiration: p.child('expiration').out,
      id: p.child('id').out,
      key_vault_identity_client_id: p.child('key_vault_identity_client_id').out,
      key_vault_secret_id: p.child('key_vault_secret_id').out,
      name: p.child('name').out,
      password: p.child('password').out,
      resource_group_name: p.child('resource_group_name').out,
      subject: p.child('subject').out,
      thumbprint: p.child('thumbprint').out,
    },
    api_management_custom_domain(name, block): {
      local p = path(['azurerm_api_management_custom_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_custom_domain: {
              [name]: std.prune({
                api_management_id: build.template(block.api_management_id),
              }),
            },
          },
        },
      },
      api_management_id: p.child('api_management_id').out,
      id: p.child('id').out,
    },
    api_management_diagnostic(name, block): {
      local p = path(['azurerm_api_management_diagnostic', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_diagnostic: {
              [name]: std.prune({
                api_management_logger_id: build.template(block.api_management_logger_id),
                api_management_name: build.template(block.api_management_name),
                identifier: build.template(block.identifier),
                operation_name_format: build.template(std.get(block, 'operation_name_format', null, true)),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      always_log_errors: p.child('always_log_errors').out,
      api_management_logger_id: p.child('api_management_logger_id').out,
      api_management_name: p.child('api_management_name').out,
      http_correlation_protocol: p.child('http_correlation_protocol').out,
      id: p.child('id').out,
      identifier: p.child('identifier').out,
      log_client_ip: p.child('log_client_ip').out,
      operation_name_format: p.child('operation_name_format').out,
      resource_group_name: p.child('resource_group_name').out,
      sampling_percentage: p.child('sampling_percentage').out,
      verbosity: p.child('verbosity').out,
    },
    api_management_email_template(name, block): {
      local p = path(['azurerm_api_management_email_template', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_email_template: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                body: build.template(block.body),
                resource_group_name: build.template(block.resource_group_name),
                subject: build.template(block.subject),
                template_name: build.template(block.template_name),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      body: p.child('body').out,
      description: p.child('description').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
      subject: p.child('subject').out,
      template_name: p.child('template_name').out,
      title: p.child('title').out,
    },
    api_management_gateway(name, block): {
      local p = path(['azurerm_api_management_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_gateway: {
              [name]: std.prune({
                api_management_id: build.template(block.api_management_id),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      api_management_id: p.child('api_management_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    api_management_gateway_api(name, block): {
      local p = path(['azurerm_api_management_gateway_api', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_gateway_api: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                gateway_id: build.template(block.gateway_id),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      gateway_id: p.child('gateway_id').out,
      id: p.child('id').out,
    },
    api_management_gateway_certificate_authority(name, block): {
      local p = path(['azurerm_api_management_gateway_certificate_authority', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_gateway_certificate_authority: {
              [name]: std.prune({
                api_management_id: build.template(block.api_management_id),
                certificate_name: build.template(block.certificate_name),
                gateway_name: build.template(block.gateway_name),
                is_trusted: build.template(std.get(block, 'is_trusted', null, true)),
              }),
            },
          },
        },
      },
      api_management_id: p.child('api_management_id').out,
      certificate_name: p.child('certificate_name').out,
      gateway_name: p.child('gateway_name').out,
      id: p.child('id').out,
      is_trusted: p.child('is_trusted').out,
    },
    api_management_gateway_host_name_configuration(name, block): {
      local p = path(['azurerm_api_management_gateway_host_name_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_gateway_host_name_configuration: {
              [name]: std.prune({
                api_management_id: build.template(block.api_management_id),
                certificate_id: build.template(block.certificate_id),
                gateway_name: build.template(block.gateway_name),
                host_name: build.template(block.host_name),
                http2_enabled: build.template(std.get(block, 'http2_enabled', null, true)),
                name: build.template(block.name),
                request_client_certificate_enabled: build.template(std.get(block, 'request_client_certificate_enabled', null, true)),
                tls10_enabled: build.template(std.get(block, 'tls10_enabled', null, true)),
                tls11_enabled: build.template(std.get(block, 'tls11_enabled', null, true)),
              }),
            },
          },
        },
      },
      api_management_id: p.child('api_management_id').out,
      certificate_id: p.child('certificate_id').out,
      gateway_name: p.child('gateway_name').out,
      host_name: p.child('host_name').out,
      http2_enabled: p.child('http2_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      request_client_certificate_enabled: p.child('request_client_certificate_enabled').out,
      tls10_enabled: p.child('tls10_enabled').out,
      tls11_enabled: p.child('tls11_enabled').out,
    },
    api_management_global_schema(name, block): {
      local p = path(['azurerm_api_management_global_schema', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_global_schema: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                description: build.template(std.get(block, 'description', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                schema_id: build.template(block.schema_id),
                type: build.template(block.type),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      description: p.child('description').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
      schema_id: p.child('schema_id').out,
      type: p.child('type').out,
      value: p.child('value').out,
    },
    api_management_group(name, block): {
      local p = path(['azurerm_api_management_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_group: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                external_id: build.template(std.get(block, 'external_id', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      external_id: p.child('external_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      type: p.child('type').out,
    },
    api_management_group_user(name, block): {
      local p = path(['azurerm_api_management_group_user', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_group_user: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                group_name: build.template(block.group_name),
                resource_group_name: build.template(block.resource_group_name),
                user_id: build.template(block.user_id),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      group_name: p.child('group_name').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
      user_id: p.child('user_id').out,
    },
    api_management_identity_provider_aad(name, block): {
      local p = path(['azurerm_api_management_identity_provider_aad', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_identity_provider_aad: {
              [name]: std.prune({
                allowed_tenants: build.template(block.allowed_tenants),
                api_management_name: build.template(block.api_management_name),
                client_id: build.template(block.client_id),
                client_library: build.template(std.get(block, 'client_library', null, true)),
                client_secret: build.template(block.client_secret),
                resource_group_name: build.template(block.resource_group_name),
                signin_tenant: build.template(std.get(block, 'signin_tenant', null, true)),
              }),
            },
          },
        },
      },
      allowed_tenants: p.child('allowed_tenants').out,
      api_management_name: p.child('api_management_name').out,
      client_id: p.child('client_id').out,
      client_library: p.child('client_library').out,
      client_secret: p.child('client_secret').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
      signin_tenant: p.child('signin_tenant').out,
    },
    api_management_identity_provider_aadb2c(name, block): {
      local p = path(['azurerm_api_management_identity_provider_aadb2c', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_identity_provider_aadb2c: {
              [name]: std.prune({
                allowed_tenant: build.template(block.allowed_tenant),
                api_management_name: build.template(block.api_management_name),
                authority: build.template(block.authority),
                client_id: build.template(block.client_id),
                client_library: build.template(std.get(block, 'client_library', null, true)),
                client_secret: build.template(block.client_secret),
                password_reset_policy: build.template(std.get(block, 'password_reset_policy', null, true)),
                profile_editing_policy: build.template(std.get(block, 'profile_editing_policy', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                signin_policy: build.template(block.signin_policy),
                signin_tenant: build.template(block.signin_tenant),
                signup_policy: build.template(block.signup_policy),
              }),
            },
          },
        },
      },
      allowed_tenant: p.child('allowed_tenant').out,
      api_management_name: p.child('api_management_name').out,
      authority: p.child('authority').out,
      client_id: p.child('client_id').out,
      client_library: p.child('client_library').out,
      client_secret: p.child('client_secret').out,
      id: p.child('id').out,
      password_reset_policy: p.child('password_reset_policy').out,
      profile_editing_policy: p.child('profile_editing_policy').out,
      resource_group_name: p.child('resource_group_name').out,
      signin_policy: p.child('signin_policy').out,
      signin_tenant: p.child('signin_tenant').out,
      signup_policy: p.child('signup_policy').out,
    },
    api_management_identity_provider_facebook(name, block): {
      local p = path(['azurerm_api_management_identity_provider_facebook', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_identity_provider_facebook: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                app_id: build.template(block.app_id),
                app_secret: build.template(block.app_secret),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      app_id: p.child('app_id').out,
      app_secret: p.child('app_secret').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    api_management_identity_provider_google(name, block): {
      local p = path(['azurerm_api_management_identity_provider_google', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_identity_provider_google: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                client_id: build.template(block.client_id),
                client_secret: build.template(block.client_secret),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      client_id: p.child('client_id').out,
      client_secret: p.child('client_secret').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    api_management_identity_provider_microsoft(name, block): {
      local p = path(['azurerm_api_management_identity_provider_microsoft', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_identity_provider_microsoft: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                client_id: build.template(block.client_id),
                client_secret: build.template(block.client_secret),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      client_id: p.child('client_id').out,
      client_secret: p.child('client_secret').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    api_management_identity_provider_twitter(name, block): {
      local p = path(['azurerm_api_management_identity_provider_twitter', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_identity_provider_twitter: {
              [name]: std.prune({
                api_key: build.template(block.api_key),
                api_management_name: build.template(block.api_management_name),
                api_secret_key: build.template(block.api_secret_key),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_key: p.child('api_key').out,
      api_management_name: p.child('api_management_name').out,
      api_secret_key: p.child('api_secret_key').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    api_management_logger(name, block): {
      local p = path(['azurerm_api_management_logger', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_logger: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                buffered: build.template(std.get(block, 'buffered', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                resource_id: build.template(std.get(block, 'resource_id', null, true)),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      buffered: p.child('buffered').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      resource_id: p.child('resource_id').out,
    },
    api_management_named_value(name, block): {
      local p = path(['azurerm_api_management_named_value', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_named_value: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                display_name: build.template(block.display_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                secret: build.template(std.get(block, 'secret', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                value: build.template(std.get(block, 'value', null, true)),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      secret: p.child('secret').out,
      tags: p.child('tags').out,
      value: p.child('value').out,
    },
    api_management_notification_recipient_email(name, block): {
      local p = path(['azurerm_api_management_notification_recipient_email', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_notification_recipient_email: {
              [name]: std.prune({
                api_management_id: build.template(block.api_management_id),
                email: build.template(block.email),
                notification_type: build.template(block.notification_type),
              }),
            },
          },
        },
      },
      api_management_id: p.child('api_management_id').out,
      email: p.child('email').out,
      id: p.child('id').out,
      notification_type: p.child('notification_type').out,
    },
    api_management_notification_recipient_user(name, block): {
      local p = path(['azurerm_api_management_notification_recipient_user', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_notification_recipient_user: {
              [name]: std.prune({
                api_management_id: build.template(block.api_management_id),
                notification_type: build.template(block.notification_type),
                user_id: build.template(block.user_id),
              }),
            },
          },
        },
      },
      api_management_id: p.child('api_management_id').out,
      id: p.child('id').out,
      notification_type: p.child('notification_type').out,
      user_id: p.child('user_id').out,
    },
    api_management_openid_connect_provider(name, block): {
      local p = path(['azurerm_api_management_openid_connect_provider', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_openid_connect_provider: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                client_id: build.template(block.client_id),
                client_secret: build.template(block.client_secret),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                metadata_endpoint: build.template(block.metadata_endpoint),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      client_id: p.child('client_id').out,
      client_secret: p.child('client_secret').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      metadata_endpoint: p.child('metadata_endpoint').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    api_management_policy(name, block): {
      local p = path(['azurerm_api_management_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_policy: {
              [name]: std.prune({
                api_management_id: build.template(block.api_management_id),
                xml_link: build.template(std.get(block, 'xml_link', null, true)),
              }),
            },
          },
        },
      },
      api_management_id: p.child('api_management_id').out,
      id: p.child('id').out,
      xml_content: p.child('xml_content').out,
      xml_link: p.child('xml_link').out,
    },
    api_management_policy_fragment(name, block): {
      local p = path(['azurerm_api_management_policy_fragment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_policy_fragment: {
              [name]: std.prune({
                api_management_id: build.template(block.api_management_id),
                description: build.template(std.get(block, 'description', null, true)),
                format: build.template(std.get(block, 'format', null, true)),
                name: build.template(block.name),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      api_management_id: p.child('api_management_id').out,
      description: p.child('description').out,
      format: p.child('format').out,
      id: p.child('id').out,
      name: p.child('name').out,
      value: p.child('value').out,
    },
    api_management_product(name, block): {
      local p = path(['azurerm_api_management_product', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_product: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                approval_required: build.template(std.get(block, 'approval_required', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                product_id: build.template(block.product_id),
                published: build.template(block.published),
                resource_group_name: build.template(block.resource_group_name),
                subscription_required: build.template(std.get(block, 'subscription_required', null, true)),
                subscriptions_limit: build.template(std.get(block, 'subscriptions_limit', null, true)),
                terms: build.template(std.get(block, 'terms', null, true)),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      approval_required: p.child('approval_required').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      product_id: p.child('product_id').out,
      published: p.child('published').out,
      resource_group_name: p.child('resource_group_name').out,
      subscription_required: p.child('subscription_required').out,
      subscriptions_limit: p.child('subscriptions_limit').out,
      terms: p.child('terms').out,
    },
    api_management_product_api(name, block): {
      local p = path(['azurerm_api_management_product_api', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_product_api: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                api_name: build.template(block.api_name),
                product_id: build.template(block.product_id),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      api_name: p.child('api_name').out,
      id: p.child('id').out,
      product_id: p.child('product_id').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    api_management_product_group(name, block): {
      local p = path(['azurerm_api_management_product_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_product_group: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                group_name: build.template(block.group_name),
                product_id: build.template(block.product_id),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      group_name: p.child('group_name').out,
      id: p.child('id').out,
      product_id: p.child('product_id').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    api_management_product_policy(name, block): {
      local p = path(['azurerm_api_management_product_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_product_policy: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                product_id: build.template(block.product_id),
                resource_group_name: build.template(block.resource_group_name),
                xml_link: build.template(std.get(block, 'xml_link', null, true)),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      id: p.child('id').out,
      product_id: p.child('product_id').out,
      resource_group_name: p.child('resource_group_name').out,
      xml_content: p.child('xml_content').out,
      xml_link: p.child('xml_link').out,
    },
    api_management_product_tag(name, block): {
      local p = path(['azurerm_api_management_product_tag', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_product_tag: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                api_management_product_id: build.template(block.api_management_product_id),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      api_management_product_id: p.child('api_management_product_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    api_management_redis_cache(name, block): {
      local p = path(['azurerm_api_management_redis_cache', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_redis_cache: {
              [name]: std.prune({
                api_management_id: build.template(block.api_management_id),
                cache_location: build.template(std.get(block, 'cache_location', null, true)),
                connection_string: build.template(block.connection_string),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                redis_cache_id: build.template(std.get(block, 'redis_cache_id', null, true)),
              }),
            },
          },
        },
      },
      api_management_id: p.child('api_management_id').out,
      cache_location: p.child('cache_location').out,
      connection_string: p.child('connection_string').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      redis_cache_id: p.child('redis_cache_id').out,
    },
    api_management_subscription(name, block): {
      local p = path(['azurerm_api_management_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_subscription: {
              [name]: std.prune({
                allow_tracing: build.template(std.get(block, 'allow_tracing', null, true)),
                api_id: build.template(std.get(block, 'api_id', null, true)),
                api_management_name: build.template(block.api_management_name),
                display_name: build.template(block.display_name),
                product_id: build.template(std.get(block, 'product_id', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                state: build.template(std.get(block, 'state', null, true)),
                user_id: build.template(std.get(block, 'user_id', null, true)),
              }),
            },
          },
        },
      },
      allow_tracing: p.child('allow_tracing').out,
      api_id: p.child('api_id').out,
      api_management_name: p.child('api_management_name').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      primary_key: p.child('primary_key').out,
      product_id: p.child('product_id').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_key: p.child('secondary_key').out,
      state: p.child('state').out,
      subscription_id: p.child('subscription_id').out,
      user_id: p.child('user_id').out,
    },
    api_management_tag(name, block): {
      local p = path(['azurerm_api_management_tag', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_tag: {
              [name]: std.prune({
                api_management_id: build.template(block.api_management_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      api_management_id: p.child('api_management_id').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    api_management_user(name, block): {
      local p = path(['azurerm_api_management_user', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_api_management_user: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                confirmation: build.template(std.get(block, 'confirmation', null, true)),
                email: build.template(block.email),
                first_name: build.template(block.first_name),
                last_name: build.template(block.last_name),
                note: build.template(std.get(block, 'note', null, true)),
                password: build.template(std.get(block, 'password', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                user_id: build.template(block.user_id),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      confirmation: p.child('confirmation').out,
      email: p.child('email').out,
      first_name: p.child('first_name').out,
      id: p.child('id').out,
      last_name: p.child('last_name').out,
      note: p.child('note').out,
      password: p.child('password').out,
      resource_group_name: p.child('resource_group_name').out,
      state: p.child('state').out,
      user_id: p.child('user_id').out,
    },
    app_configuration(name, block): {
      local p = path(['azurerm_app_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_configuration: {
              [name]: std.prune({
                local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access: build.template(std.get(block, 'public_network_access', null, true)),
                purge_protection_enabled: build.template(std.get(block, 'purge_protection_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(std.get(block, 'sku', null, true)),
                soft_delete_retention_days: build.template(std.get(block, 'soft_delete_retention_days', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      local_auth_enabled: p.child('local_auth_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_read_key: p.child('primary_read_key').out,
      primary_write_key: p.child('primary_write_key').out,
      public_network_access: p.child('public_network_access').out,
      purge_protection_enabled: p.child('purge_protection_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_read_key: p.child('secondary_read_key').out,
      secondary_write_key: p.child('secondary_write_key').out,
      sku: p.child('sku').out,
      soft_delete_retention_days: p.child('soft_delete_retention_days').out,
      tags: p.child('tags').out,
    },
    app_configuration_feature(name, block): {
      local p = path(['azurerm_app_configuration_feature', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_configuration_feature: {
              [name]: std.prune({
                configuration_store_id: build.template(block.configuration_store_id),
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                label: build.template(std.get(block, 'label', null, true)),
                locked: build.template(std.get(block, 'locked', null, true)),
                name: build.template(block.name),
                percentage_filter_value: build.template(std.get(block, 'percentage_filter_value', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      configuration_store_id: p.child('configuration_store_id').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      key: p.child('key').out,
      label: p.child('label').out,
      locked: p.child('locked').out,
      name: p.child('name').out,
      percentage_filter_value: p.child('percentage_filter_value').out,
      tags: p.child('tags').out,
    },
    app_configuration_key(name, block): {
      local p = path(['azurerm_app_configuration_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_configuration_key: {
              [name]: std.prune({
                configuration_store_id: build.template(block.configuration_store_id),
                key: build.template(block.key),
                label: build.template(std.get(block, 'label', null, true)),
                locked: build.template(std.get(block, 'locked', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
                value: build.template(std.get(block, 'value', null, true)),
                vault_key_reference: build.template(std.get(block, 'vault_key_reference', null, true)),
              }),
            },
          },
        },
      },
      configuration_store_id: p.child('configuration_store_id').out,
      content_type: p.child('content_type').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      key: p.child('key').out,
      label: p.child('label').out,
      locked: p.child('locked').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      value: p.child('value').out,
      vault_key_reference: p.child('vault_key_reference').out,
    },
    app_service(name, block): {
      local p = path(['azurerm_app_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service: {
              [name]: std.prune({
                app_service_plan_id: build.template(block.app_service_plan_id),
                client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null, true)),
                client_cert_enabled: build.template(std.get(block, 'client_cert_enabled', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      app_service_plan_id: p.child('app_service_plan_id').out,
      app_settings: p.child('app_settings').out,
      client_affinity_enabled: p.child('client_affinity_enabled').out,
      client_cert_enabled: p.child('client_cert_enabled').out,
      client_cert_mode: p.child('client_cert_mode').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      default_site_hostname: p.child('default_site_hostname').out,
      enabled: p.child('enabled').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      key_vault_reference_identity_id: p.child('key_vault_reference_identity_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      resource_group_name: p.child('resource_group_name').out,
      site_credential: p.child('site_credential').out,
      tags: p.child('tags').out,
    },
    app_service_active_slot(name, block): {
      local p = path(['azurerm_app_service_active_slot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_active_slot: {
              [name]: std.prune({
                app_service_name: build.template(block.app_service_name),
                app_service_slot_name: build.template(block.app_service_slot_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      app_service_name: p.child('app_service_name').out,
      app_service_slot_name: p.child('app_service_slot_name').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    app_service_certificate(name, block): {
      local p = path(['azurerm_app_service_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_certificate: {
              [name]: std.prune({
                app_service_plan_id: build.template(std.get(block, 'app_service_plan_id', null, true)),
                key_vault_id: build.template(std.get(block, 'key_vault_id', null, true)),
                key_vault_secret_id: build.template(std.get(block, 'key_vault_secret_id', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                password: build.template(std.get(block, 'password', null, true)),
                pfx_blob: build.template(std.get(block, 'pfx_blob', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      app_service_plan_id: p.child('app_service_plan_id').out,
      expiration_date: p.child('expiration_date').out,
      friendly_name: p.child('friendly_name').out,
      host_names: p.child('host_names').out,
      hosting_environment_profile_id: p.child('hosting_environment_profile_id').out,
      id: p.child('id').out,
      issue_date: p.child('issue_date').out,
      issuer: p.child('issuer').out,
      key_vault_id: p.child('key_vault_id').out,
      key_vault_secret_id: p.child('key_vault_secret_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      password: p.child('password').out,
      pfx_blob: p.child('pfx_blob').out,
      resource_group_name: p.child('resource_group_name').out,
      subject_name: p.child('subject_name').out,
      tags: p.child('tags').out,
      thumbprint: p.child('thumbprint').out,
    },
    app_service_certificate_binding(name, block): {
      local p = path(['azurerm_app_service_certificate_binding', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_certificate_binding: {
              [name]: std.prune({
                certificate_id: build.template(block.certificate_id),
                hostname_binding_id: build.template(block.hostname_binding_id),
                ssl_state: build.template(block.ssl_state),
              }),
            },
          },
        },
      },
      app_service_name: p.child('app_service_name').out,
      certificate_id: p.child('certificate_id').out,
      hostname: p.child('hostname').out,
      hostname_binding_id: p.child('hostname_binding_id').out,
      id: p.child('id').out,
      ssl_state: p.child('ssl_state').out,
      thumbprint: p.child('thumbprint').out,
    },
    app_service_certificate_order(name, block): {
      local p = path(['azurerm_app_service_certificate_order', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_certificate_order: {
              [name]: std.prune({
                auto_renew: build.template(std.get(block, 'auto_renew', null, true)),
                key_size: build.template(std.get(block, 'key_size', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                product_type: build.template(std.get(block, 'product_type', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                validity_in_years: build.template(std.get(block, 'validity_in_years', null, true)),
              }),
            },
          },
        },
      },
      app_service_certificate_not_renewable_reasons: p.child('app_service_certificate_not_renewable_reasons').out,
      auto_renew: p.child('auto_renew').out,
      certificates: p.child('certificates').out,
      csr: p.child('csr').out,
      distinguished_name: p.child('distinguished_name').out,
      domain_verification_token: p.child('domain_verification_token').out,
      expiration_time: p.child('expiration_time').out,
      id: p.child('id').out,
      intermediate_thumbprint: p.child('intermediate_thumbprint').out,
      is_private_key_external: p.child('is_private_key_external').out,
      key_size: p.child('key_size').out,
      location: p.child('location').out,
      name: p.child('name').out,
      product_type: p.child('product_type').out,
      resource_group_name: p.child('resource_group_name').out,
      root_thumbprint: p.child('root_thumbprint').out,
      signed_certificate_thumbprint: p.child('signed_certificate_thumbprint').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      validity_in_years: p.child('validity_in_years').out,
    },
    app_service_connection(name, block): {
      local p = path(['azurerm_app_service_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_connection: {
              [name]: std.prune({
                app_service_id: build.template(block.app_service_id),
                client_type: build.template(std.get(block, 'client_type', null, true)),
                name: build.template(block.name),
                target_resource_id: build.template(block.target_resource_id),
                vnet_solution: build.template(std.get(block, 'vnet_solution', null, true)),
              }),
            },
          },
        },
      },
      app_service_id: p.child('app_service_id').out,
      client_type: p.child('client_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      target_resource_id: p.child('target_resource_id').out,
      vnet_solution: p.child('vnet_solution').out,
    },
    app_service_custom_hostname_binding(name, block): {
      local p = path(['azurerm_app_service_custom_hostname_binding', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_custom_hostname_binding: {
              [name]: std.prune({
                app_service_name: build.template(block.app_service_name),
                hostname: build.template(block.hostname),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      app_service_name: p.child('app_service_name').out,
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
      ssl_state: p.child('ssl_state').out,
      thumbprint: p.child('thumbprint').out,
      virtual_ip: p.child('virtual_ip').out,
    },
    app_service_environment_v3(name, block): {
      local p = path(['azurerm_app_service_environment_v3', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_environment_v3: {
              [name]: std.prune({
                allow_new_private_endpoint_connections: build.template(std.get(block, 'allow_new_private_endpoint_connections', null, true)),
                dedicated_host_count: build.template(std.get(block, 'dedicated_host_count', null, true)),
                internal_load_balancing_mode: build.template(std.get(block, 'internal_load_balancing_mode', null, true)),
                name: build.template(block.name),
                remote_debugging_enabled: build.template(std.get(block, 'remote_debugging_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                zone_redundant: build.template(std.get(block, 'zone_redundant', null, true)),
              }),
            },
          },
        },
      },
      allow_new_private_endpoint_connections: p.child('allow_new_private_endpoint_connections').out,
      dedicated_host_count: p.child('dedicated_host_count').out,
      dns_suffix: p.child('dns_suffix').out,
      external_inbound_ip_addresses: p.child('external_inbound_ip_addresses').out,
      id: p.child('id').out,
      inbound_network_dependencies: p.child('inbound_network_dependencies').out,
      internal_inbound_ip_addresses: p.child('internal_inbound_ip_addresses').out,
      internal_load_balancing_mode: p.child('internal_load_balancing_mode').out,
      ip_ssl_address_count: p.child('ip_ssl_address_count').out,
      linux_outbound_ip_addresses: p.child('linux_outbound_ip_addresses').out,
      location: p.child('location').out,
      name: p.child('name').out,
      pricing_tier: p.child('pricing_tier').out,
      remote_debugging_enabled: p.child('remote_debugging_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      windows_outbound_ip_addresses: p.child('windows_outbound_ip_addresses').out,
      zone_redundant: p.child('zone_redundant').out,
    },
    app_service_hybrid_connection(name, block): {
      local p = path(['azurerm_app_service_hybrid_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_hybrid_connection: {
              [name]: std.prune({
                app_service_name: build.template(block.app_service_name),
                hostname: build.template(block.hostname),
                port: build.template(block.port),
                relay_id: build.template(block.relay_id),
                resource_group_name: build.template(block.resource_group_name),
                send_key_name: build.template(std.get(block, 'send_key_name', null, true)),
              }),
            },
          },
        },
      },
      app_service_name: p.child('app_service_name').out,
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      namespace_name: p.child('namespace_name').out,
      port: p.child('port').out,
      relay_id: p.child('relay_id').out,
      relay_name: p.child('relay_name').out,
      resource_group_name: p.child('resource_group_name').out,
      send_key_name: p.child('send_key_name').out,
      send_key_value: p.child('send_key_value').out,
      service_bus_namespace: p.child('service_bus_namespace').out,
      service_bus_suffix: p.child('service_bus_suffix').out,
    },
    app_service_managed_certificate(name, block): {
      local p = path(['azurerm_app_service_managed_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_managed_certificate: {
              [name]: std.prune({
                custom_hostname_binding_id: build.template(block.custom_hostname_binding_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      canonical_name: p.child('canonical_name').out,
      custom_hostname_binding_id: p.child('custom_hostname_binding_id').out,
      expiration_date: p.child('expiration_date').out,
      friendly_name: p.child('friendly_name').out,
      host_names: p.child('host_names').out,
      id: p.child('id').out,
      issue_date: p.child('issue_date').out,
      issuer: p.child('issuer').out,
      subject_name: p.child('subject_name').out,
      tags: p.child('tags').out,
      thumbprint: p.child('thumbprint').out,
    },
    app_service_plan(name, block): {
      local p = path(['azurerm_app_service_plan', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_plan: {
              [name]: std.prune({
                app_service_environment_id: build.template(std.get(block, 'app_service_environment_id', null, true)),
                is_xenon: build.template(std.get(block, 'is_xenon', null, true)),
                kind: build.template(std.get(block, 'kind', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                per_site_scaling: build.template(std.get(block, 'per_site_scaling', null, true)),
                reserved: build.template(std.get(block, 'reserved', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                zone_redundant: build.template(std.get(block, 'zone_redundant', null, true)),
              }),
            },
          },
        },
      },
      app_service_environment_id: p.child('app_service_environment_id').out,
      id: p.child('id').out,
      is_xenon: p.child('is_xenon').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      maximum_elastic_worker_count: p.child('maximum_elastic_worker_count').out,
      maximum_number_of_workers: p.child('maximum_number_of_workers').out,
      name: p.child('name').out,
      per_site_scaling: p.child('per_site_scaling').out,
      reserved: p.child('reserved').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      zone_redundant: p.child('zone_redundant').out,
    },
    app_service_public_certificate(name, block): {
      local p = path(['azurerm_app_service_public_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_public_certificate: {
              [name]: std.prune({
                app_service_name: build.template(block.app_service_name),
                blob: build.template(block.blob),
                certificate_location: build.template(block.certificate_location),
                certificate_name: build.template(block.certificate_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      app_service_name: p.child('app_service_name').out,
      blob: p.child('blob').out,
      certificate_location: p.child('certificate_location').out,
      certificate_name: p.child('certificate_name').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
      thumbprint: p.child('thumbprint').out,
    },
    app_service_slot(name, block): {
      local p = path(['azurerm_app_service_slot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_slot: {
              [name]: std.prune({
                app_service_name: build.template(block.app_service_name),
                app_service_plan_id: build.template(block.app_service_plan_id),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      app_service_name: p.child('app_service_name').out,
      app_service_plan_id: p.child('app_service_plan_id').out,
      app_settings: p.child('app_settings').out,
      client_affinity_enabled: p.child('client_affinity_enabled').out,
      default_site_hostname: p.child('default_site_hostname').out,
      enabled: p.child('enabled').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      key_vault_reference_identity_id: p.child('key_vault_reference_identity_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      site_credential: p.child('site_credential').out,
      tags: p.child('tags').out,
    },
    app_service_slot_custom_hostname_binding(name, block): {
      local p = path(['azurerm_app_service_slot_custom_hostname_binding', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_slot_custom_hostname_binding: {
              [name]: std.prune({
                app_service_slot_id: build.template(block.app_service_slot_id),
                hostname: build.template(block.hostname),
              }),
            },
          },
        },
      },
      app_service_slot_id: p.child('app_service_slot_id').out,
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      ssl_state: p.child('ssl_state').out,
      thumbprint: p.child('thumbprint').out,
      virtual_ip: p.child('virtual_ip').out,
    },
    app_service_slot_virtual_network_swift_connection(name, block): {
      local p = path(['azurerm_app_service_slot_virtual_network_swift_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_slot_virtual_network_swift_connection: {
              [name]: std.prune({
                app_service_id: build.template(block.app_service_id),
                slot_name: build.template(block.slot_name),
                subnet_id: build.template(block.subnet_id),
              }),
            },
          },
        },
      },
      app_service_id: p.child('app_service_id').out,
      id: p.child('id').out,
      slot_name: p.child('slot_name').out,
      subnet_id: p.child('subnet_id').out,
    },
    app_service_source_control(name, block): {
      local p = path(['azurerm_app_service_source_control', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_source_control: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                rollback_enabled: build.template(std.get(block, 'rollback_enabled', null, true)),
                use_local_git: build.template(std.get(block, 'use_local_git', null, true)),
                use_manual_integration: build.template(std.get(block, 'use_manual_integration', null, true)),
                use_mercurial: build.template(std.get(block, 'use_mercurial', null, true)),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').out,
      branch: p.child('branch').out,
      id: p.child('id').out,
      repo_url: p.child('repo_url').out,
      rollback_enabled: p.child('rollback_enabled').out,
      scm_type: p.child('scm_type').out,
      use_local_git: p.child('use_local_git').out,
      use_manual_integration: p.child('use_manual_integration').out,
      use_mercurial: p.child('use_mercurial').out,
      uses_github_action: p.child('uses_github_action').out,
    },
    app_service_source_control_slot(name, block): {
      local p = path(['azurerm_app_service_source_control_slot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_source_control_slot: {
              [name]: std.prune({
                rollback_enabled: build.template(std.get(block, 'rollback_enabled', null, true)),
                slot_id: build.template(block.slot_id),
                use_local_git: build.template(std.get(block, 'use_local_git', null, true)),
                use_manual_integration: build.template(std.get(block, 'use_manual_integration', null, true)),
                use_mercurial: build.template(std.get(block, 'use_mercurial', null, true)),
              }),
            },
          },
        },
      },
      branch: p.child('branch').out,
      id: p.child('id').out,
      repo_url: p.child('repo_url').out,
      rollback_enabled: p.child('rollback_enabled').out,
      scm_type: p.child('scm_type').out,
      slot_id: p.child('slot_id').out,
      use_local_git: p.child('use_local_git').out,
      use_manual_integration: p.child('use_manual_integration').out,
      use_mercurial: p.child('use_mercurial').out,
      uses_github_action: p.child('uses_github_action').out,
    },
    app_service_source_control_token(name, block): {
      local p = path(['azurerm_app_service_source_control_token', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_source_control_token: {
              [name]: std.prune({
                token: build.template(block.token),
                token_secret: build.template(std.get(block, 'token_secret', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      token: p.child('token').out,
      token_secret: p.child('token_secret').out,
      type: p.child('type').out,
    },
    app_service_virtual_network_swift_connection(name, block): {
      local p = path(['azurerm_app_service_virtual_network_swift_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_app_service_virtual_network_swift_connection: {
              [name]: std.prune({
                app_service_id: build.template(block.app_service_id),
                subnet_id: build.template(block.subnet_id),
              }),
            },
          },
        },
      },
      app_service_id: p.child('app_service_id').out,
      id: p.child('id').out,
      subnet_id: p.child('subnet_id').out,
    },
    application_gateway(name, block): {
      local p = path(['azurerm_application_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_application_gateway: {
              [name]: std.prune({
                enable_http2: build.template(std.get(block, 'enable_http2', null, true)),
                fips_enabled: build.template(std.get(block, 'fips_enabled', null, true)),
                firewall_policy_id: build.template(std.get(block, 'firewall_policy_id', null, true)),
                force_firewall_policy_association: build.template(std.get(block, 'force_firewall_policy_association', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      enable_http2: p.child('enable_http2').out,
      fips_enabled: p.child('fips_enabled').out,
      firewall_policy_id: p.child('firewall_policy_id').out,
      force_firewall_policy_association: p.child('force_firewall_policy_association').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_endpoint_connection: p.child('private_endpoint_connection').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    application_insights(name, block): {
      local p = path(['azurerm_application_insights', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_application_insights: {
              [name]: std.prune({
                application_type: build.template(block.application_type),
                daily_data_cap_in_gb: build.template(std.get(block, 'daily_data_cap_in_gb', null, true)),
                daily_data_cap_notifications_disabled: build.template(std.get(block, 'daily_data_cap_notifications_disabled', null, true)),
                disable_ip_masking: build.template(std.get(block, 'disable_ip_masking', null, true)),
                force_customer_storage_for_profiler: build.template(std.get(block, 'force_customer_storage_for_profiler', null, true)),
                internet_ingestion_enabled: build.template(std.get(block, 'internet_ingestion_enabled', null, true)),
                internet_query_enabled: build.template(std.get(block, 'internet_query_enabled', null, true)),
                local_authentication_disabled: build.template(std.get(block, 'local_authentication_disabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                retention_in_days: build.template(std.get(block, 'retention_in_days', null, true)),
                sampling_percentage: build.template(std.get(block, 'sampling_percentage', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                workspace_id: build.template(std.get(block, 'workspace_id', null, true)),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').out,
      application_type: p.child('application_type').out,
      connection_string: p.child('connection_string').out,
      daily_data_cap_in_gb: p.child('daily_data_cap_in_gb').out,
      daily_data_cap_notifications_disabled: p.child('daily_data_cap_notifications_disabled').out,
      disable_ip_masking: p.child('disable_ip_masking').out,
      force_customer_storage_for_profiler: p.child('force_customer_storage_for_profiler').out,
      id: p.child('id').out,
      instrumentation_key: p.child('instrumentation_key').out,
      internet_ingestion_enabled: p.child('internet_ingestion_enabled').out,
      internet_query_enabled: p.child('internet_query_enabled').out,
      local_authentication_disabled: p.child('local_authentication_disabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      retention_in_days: p.child('retention_in_days').out,
      sampling_percentage: p.child('sampling_percentage').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
    },
    application_insights_analytics_item(name, block): {
      local p = path(['azurerm_application_insights_analytics_item', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_application_insights_analytics_item: {
              [name]: std.prune({
                application_insights_id: build.template(block.application_insights_id),
                content: build.template(block.content),
                function_alias: build.template(std.get(block, 'function_alias', null, true)),
                name: build.template(block.name),
                scope: build.template(block.scope),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      application_insights_id: p.child('application_insights_id').out,
      content: p.child('content').out,
      function_alias: p.child('function_alias').out,
      id: p.child('id').out,
      name: p.child('name').out,
      scope: p.child('scope').out,
      time_created: p.child('time_created').out,
      time_modified: p.child('time_modified').out,
      type: p.child('type').out,
      version: p.child('version').out,
    },
    application_insights_api_key(name, block): {
      local p = path(['azurerm_application_insights_api_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_application_insights_api_key: {
              [name]: std.prune({
                application_insights_id: build.template(block.application_insights_id),
                name: build.template(block.name),
                read_permissions: build.template(std.get(block, 'read_permissions', null, true)),
                write_permissions: build.template(std.get(block, 'write_permissions', null, true)),
              }),
            },
          },
        },
      },
      api_key: p.child('api_key').out,
      application_insights_id: p.child('application_insights_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      read_permissions: p.child('read_permissions').out,
      write_permissions: p.child('write_permissions').out,
    },
    application_insights_smart_detection_rule(name, block): {
      local p = path(['azurerm_application_insights_smart_detection_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_application_insights_smart_detection_rule: {
              [name]: std.prune({
                additional_email_recipients: build.template(std.get(block, 'additional_email_recipients', null, true)),
                application_insights_id: build.template(block.application_insights_id),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                name: build.template(block.name),
                send_emails_to_subscription_owners: build.template(std.get(block, 'send_emails_to_subscription_owners', null, true)),
              }),
            },
          },
        },
      },
      additional_email_recipients: p.child('additional_email_recipients').out,
      application_insights_id: p.child('application_insights_id').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      send_emails_to_subscription_owners: p.child('send_emails_to_subscription_owners').out,
    },
    application_insights_standard_web_test(name, block): {
      local p = path(['azurerm_application_insights_standard_web_test', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_application_insights_standard_web_test: {
              [name]: std.prune({
                application_insights_id: build.template(block.application_insights_id),
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                frequency: build.template(std.get(block, 'frequency', null, true)),
                geo_locations: build.template(block.geo_locations),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                retry_enabled: build.template(std.get(block, 'retry_enabled', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                timeout: build.template(std.get(block, 'timeout', null, true)),
              }),
            },
          },
        },
      },
      application_insights_id: p.child('application_insights_id').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      frequency: p.child('frequency').out,
      geo_locations: p.child('geo_locations').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      retry_enabled: p.child('retry_enabled').out,
      synthetic_monitor_id: p.child('synthetic_monitor_id').out,
      tags: p.child('tags').out,
      timeout: p.child('timeout').out,
    },
    application_insights_web_test(name, block): {
      local p = path(['azurerm_application_insights_web_test', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_application_insights_web_test: {
              [name]: std.prune({
                application_insights_id: build.template(block.application_insights_id),
                configuration: build.template(block.configuration),
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                frequency: build.template(std.get(block, 'frequency', null, true)),
                geo_locations: build.template(block.geo_locations),
                kind: build.template(block.kind),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                retry_enabled: build.template(std.get(block, 'retry_enabled', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                timeout: build.template(std.get(block, 'timeout', null, true)),
              }),
            },
          },
        },
      },
      application_insights_id: p.child('application_insights_id').out,
      configuration: p.child('configuration').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      frequency: p.child('frequency').out,
      geo_locations: p.child('geo_locations').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      retry_enabled: p.child('retry_enabled').out,
      synthetic_monitor_id: p.child('synthetic_monitor_id').out,
      tags: p.child('tags').out,
      timeout: p.child('timeout').out,
    },
    application_insights_workbook(name, block): {
      local p = path(['azurerm_application_insights_workbook', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_application_insights_workbook: {
              [name]: std.prune({
                category: build.template(std.get(block, 'category', null, true)),
                data_json: build.template(block.data_json),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                source_id: build.template(std.get(block, 'source_id', null, true)),
                storage_container_id: build.template(std.get(block, 'storage_container_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      category: p.child('category').out,
      data_json: p.child('data_json').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      source_id: p.child('source_id').out,
      storage_container_id: p.child('storage_container_id').out,
      tags: p.child('tags').out,
    },
    application_insights_workbook_template(name, block): {
      local p = path(['azurerm_application_insights_workbook_template', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_application_insights_workbook_template: {
              [name]: std.prune({
                author: build.template(std.get(block, 'author', null, true)),
                localized: build.template(std.get(block, 'localized', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                priority: build.template(std.get(block, 'priority', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                template_data: build.template(block.template_data),
              }),
            },
          },
        },
      },
      author: p.child('author').out,
      id: p.child('id').out,
      localized: p.child('localized').out,
      location: p.child('location').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      template_data: p.child('template_data').out,
    },
    application_load_balancer(name, block): {
      local p = path(['azurerm_application_load_balancer', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_application_load_balancer: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_configuration_endpoint: p.child('primary_configuration_endpoint').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    application_load_balancer_frontend(name, block): {
      local p = path(['azurerm_application_load_balancer_frontend', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_application_load_balancer_frontend: {
              [name]: std.prune({
                application_load_balancer_id: build.template(block.application_load_balancer_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application_load_balancer_id: p.child('application_load_balancer_id').out,
      fully_qualified_domain_name: p.child('fully_qualified_domain_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    application_load_balancer_subnet_association(name, block): {
      local p = path(['azurerm_application_load_balancer_subnet_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_application_load_balancer_subnet_association: {
              [name]: std.prune({
                application_load_balancer_id: build.template(block.application_load_balancer_id),
                name: build.template(block.name),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application_load_balancer_id: p.child('application_load_balancer_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
    },
    application_security_group(name, block): {
      local p = path(['azurerm_application_security_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_application_security_group: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    arc_kubernetes_cluster(name, block): {
      local p = path(['azurerm_arc_kubernetes_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_arc_kubernetes_cluster: {
              [name]: std.prune({
                agent_public_key_certificate: build.template(block.agent_public_key_certificate),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      agent_public_key_certificate: p.child('agent_public_key_certificate').out,
      agent_version: p.child('agent_version').out,
      distribution: p.child('distribution').out,
      id: p.child('id').out,
      infrastructure: p.child('infrastructure').out,
      kubernetes_version: p.child('kubernetes_version').out,
      location: p.child('location').out,
      name: p.child('name').out,
      offering: p.child('offering').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      total_core_count: p.child('total_core_count').out,
      total_node_count: p.child('total_node_count').out,
    },
    arc_kubernetes_cluster_extension(name, block): {
      local p = path(['azurerm_arc_kubernetes_cluster_extension', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_arc_kubernetes_cluster_extension: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
                configuration_protected_settings: build.template(std.get(block, 'configuration_protected_settings', null, true)),
                configuration_settings: build.template(std.get(block, 'configuration_settings', null, true)),
                extension_type: build.template(block.extension_type),
                name: build.template(block.name),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').out,
      configuration_protected_settings: p.child('configuration_protected_settings').out,
      configuration_settings: p.child('configuration_settings').out,
      current_version: p.child('current_version').out,
      extension_type: p.child('extension_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      release_namespace: p.child('release_namespace').out,
      release_train: p.child('release_train').out,
      target_namespace: p.child('target_namespace').out,
      version: p.child('version').out,
    },
    arc_kubernetes_flux_configuration(name, block): {
      local p = path(['azurerm_arc_kubernetes_flux_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_arc_kubernetes_flux_configuration: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
                continuous_reconciliation_enabled: build.template(std.get(block, 'continuous_reconciliation_enabled', null, true)),
                name: build.template(block.name),
                namespace: build.template(block.namespace),
                scope: build.template(std.get(block, 'scope', null, true)),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').out,
      continuous_reconciliation_enabled: p.child('continuous_reconciliation_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      namespace: p.child('namespace').out,
      scope: p.child('scope').out,
    },
    arc_machine(name, block): {
      local p = path(['azurerm_arc_machine', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_arc_machine: {
              [name]: std.prune({
                kind: build.template(block.kind),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    arc_machine_automanage_configuration_assignment(name, block): {
      local p = path(['azurerm_arc_machine_automanage_configuration_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_arc_machine_automanage_configuration_assignment: {
              [name]: std.prune({
                arc_machine_id: build.template(block.arc_machine_id),
                configuration_id: build.template(block.configuration_id),
              }),
            },
          },
        },
      },
      arc_machine_id: p.child('arc_machine_id').out,
      configuration_id: p.child('configuration_id').out,
      id: p.child('id').out,
    },
    arc_machine_extension(name, block): {
      local p = path(['azurerm_arc_machine_extension', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_arc_machine_extension: {
              [name]: std.prune({
                arc_machine_id: build.template(block.arc_machine_id),
                automatic_upgrade_enabled: build.template(std.get(block, 'automatic_upgrade_enabled', null, true)),
                force_update_tag: build.template(std.get(block, 'force_update_tag', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                protected_settings: build.template(std.get(block, 'protected_settings', null, true)),
                publisher: build.template(block.publisher),
                settings: build.template(std.get(block, 'settings', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
                type_handler_version: build.template(std.get(block, 'type_handler_version', null, true)),
              }),
            },
          },
        },
      },
      arc_machine_id: p.child('arc_machine_id').out,
      automatic_upgrade_enabled: p.child('automatic_upgrade_enabled').out,
      force_update_tag: p.child('force_update_tag').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      protected_settings: p.child('protected_settings').out,
      publisher: p.child('publisher').out,
      settings: p.child('settings').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      type_handler_version: p.child('type_handler_version').out,
    },
    arc_private_link_scope(name, block): {
      local p = path(['azurerm_arc_private_link_scope', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_arc_private_link_scope: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    arc_resource_bridge_appliance(name, block): {
      local p = path(['azurerm_arc_resource_bridge_appliance', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_arc_resource_bridge_appliance: {
              [name]: std.prune({
                distro: build.template(block.distro),
                infrastructure_provider: build.template(block.infrastructure_provider),
                location: build.template(block.location),
                name: build.template(block.name),
                public_key_base64: build.template(std.get(block, 'public_key_base64', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      distro: p.child('distro').out,
      id: p.child('id').out,
      infrastructure_provider: p.child('infrastructure_provider').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_key_base64: p.child('public_key_base64').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    attestation_provider(name, block): {
      local p = path(['azurerm_attestation_provider', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_attestation_provider: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                open_enclave_policy_base64: build.template(std.get(block, 'open_enclave_policy_base64', null, true)),
                policy_signing_certificate_data: build.template(std.get(block, 'policy_signing_certificate_data', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sev_snp_policy_base64: build.template(std.get(block, 'sev_snp_policy_base64', null, true)),
                sgx_enclave_policy_base64: build.template(std.get(block, 'sgx_enclave_policy_base64', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tpm_policy_base64: build.template(std.get(block, 'tpm_policy_base64', null, true)),
              }),
            },
          },
        },
      },
      attestation_uri: p.child('attestation_uri').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      open_enclave_policy_base64: p.child('open_enclave_policy_base64').out,
      policy_signing_certificate_data: p.child('policy_signing_certificate_data').out,
      resource_group_name: p.child('resource_group_name').out,
      sev_snp_policy_base64: p.child('sev_snp_policy_base64').out,
      sgx_enclave_policy_base64: p.child('sgx_enclave_policy_base64').out,
      tags: p.child('tags').out,
      tpm_policy_base64: p.child('tpm_policy_base64').out,
      trust_model: p.child('trust_model').out,
    },
    automanage_configuration(name, block): {
      local p = path(['azurerm_automanage_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automanage_configuration: {
              [name]: std.prune({
                automation_account_enabled: build.template(std.get(block, 'automation_account_enabled', null, true)),
                boot_diagnostics_enabled: build.template(std.get(block, 'boot_diagnostics_enabled', null, true)),
                defender_for_cloud_enabled: build.template(std.get(block, 'defender_for_cloud_enabled', null, true)),
                guest_configuration_enabled: build.template(std.get(block, 'guest_configuration_enabled', null, true)),
                location: build.template(block.location),
                log_analytics_enabled: build.template(std.get(block, 'log_analytics_enabled', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                status_change_alert_enabled: build.template(std.get(block, 'status_change_alert_enabled', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      automation_account_enabled: p.child('automation_account_enabled').out,
      boot_diagnostics_enabled: p.child('boot_diagnostics_enabled').out,
      defender_for_cloud_enabled: p.child('defender_for_cloud_enabled').out,
      guest_configuration_enabled: p.child('guest_configuration_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      log_analytics_enabled: p.child('log_analytics_enabled').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      status_change_alert_enabled: p.child('status_change_alert_enabled').out,
      tags: p.child('tags').out,
    },
    automation_account(name, block): {
      local p = path(['azurerm_automation_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_account: {
              [name]: std.prune({
                local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      dsc_primary_access_key: p.child('dsc_primary_access_key').out,
      dsc_secondary_access_key: p.child('dsc_secondary_access_key').out,
      dsc_server_endpoint: p.child('dsc_server_endpoint').out,
      hybrid_service_url: p.child('hybrid_service_url').out,
      id: p.child('id').out,
      local_authentication_enabled: p.child('local_authentication_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_endpoint_connection: p.child('private_endpoint_connection').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    automation_certificate(name, block): {
      local p = path(['azurerm_automation_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_certificate: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                base64: build.template(block.base64),
                description: build.template(std.get(block, 'description', null, true)),
                exportable: build.template(std.get(block, 'exportable', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      base64: p.child('base64').out,
      description: p.child('description').out,
      exportable: p.child('exportable').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      thumbprint: p.child('thumbprint').out,
    },
    automation_connection(name, block): {
      local p = path(['azurerm_automation_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_connection: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                type: build.template(block.type),
                values: build.template(block.values),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      type: p.child('type').out,
      values: p.child('values').out,
    },
    automation_connection_certificate(name, block): {
      local p = path(['azurerm_automation_connection_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_connection_certificate: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                automation_certificate_name: build.template(block.automation_certificate_name),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                subscription_id: build.template(block.subscription_id),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      automation_certificate_name: p.child('automation_certificate_name').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      subscription_id: p.child('subscription_id').out,
    },
    automation_connection_classic_certificate(name, block): {
      local p = path(['azurerm_automation_connection_classic_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_connection_classic_certificate: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                certificate_asset_name: build.template(block.certificate_asset_name),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                subscription_id: build.template(block.subscription_id),
                subscription_name: build.template(block.subscription_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      certificate_asset_name: p.child('certificate_asset_name').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      subscription_id: p.child('subscription_id').out,
      subscription_name: p.child('subscription_name').out,
    },
    automation_connection_service_principal(name, block): {
      local p = path(['azurerm_automation_connection_service_principal', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_connection_service_principal: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                automation_account_name: build.template(block.automation_account_name),
                certificate_thumbprint: build.template(block.certificate_thumbprint),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                subscription_id: build.template(block.subscription_id),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      automation_account_name: p.child('automation_account_name').out,
      certificate_thumbprint: p.child('certificate_thumbprint').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      subscription_id: p.child('subscription_id').out,
      tenant_id: p.child('tenant_id').out,
    },
    automation_connection_type(name, block): {
      local p = path(['azurerm_automation_connection_type', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_connection_type: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                is_global: build.template(std.get(block, 'is_global', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      id: p.child('id').out,
      is_global: p.child('is_global').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    automation_credential(name, block): {
      local p = path(['azurerm_automation_credential', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_credential: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                password: build.template(block.password),
                resource_group_name: build.template(block.resource_group_name),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      password: p.child('password').out,
      resource_group_name: p.child('resource_group_name').out,
      username: p.child('username').out,
    },
    automation_dsc_configuration(name, block): {
      local p = path(['azurerm_automation_dsc_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_dsc_configuration: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                content_embedded: build.template(block.content_embedded),
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                log_verbose: build.template(std.get(block, 'log_verbose', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      content_embedded: p.child('content_embedded').out,
      description: p.child('description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      log_verbose: p.child('log_verbose').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
    },
    automation_dsc_nodeconfiguration(name, block): {
      local p = path(['azurerm_automation_dsc_nodeconfiguration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_dsc_nodeconfiguration: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                content_embedded: build.template(block.content_embedded),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      configuration_name: p.child('configuration_name').out,
      content_embedded: p.child('content_embedded').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    automation_hybrid_runbook_worker(name, block): {
      local p = path(['azurerm_automation_hybrid_runbook_worker', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_hybrid_runbook_worker: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                resource_group_name: build.template(block.resource_group_name),
                vm_resource_id: build.template(block.vm_resource_id),
                worker_group_name: build.template(block.worker_group_name),
                worker_id: build.template(block.worker_id),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      id: p.child('id').out,
      ip: p.child('ip').out,
      last_seen_date_time: p.child('last_seen_date_time').out,
      registration_date_time: p.child('registration_date_time').out,
      resource_group_name: p.child('resource_group_name').out,
      vm_resource_id: p.child('vm_resource_id').out,
      worker_group_name: p.child('worker_group_name').out,
      worker_id: p.child('worker_id').out,
      worker_name: p.child('worker_name').out,
      worker_type: p.child('worker_type').out,
    },
    automation_hybrid_runbook_worker_group(name, block): {
      local p = path(['azurerm_automation_hybrid_runbook_worker_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_hybrid_runbook_worker_group: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                credential_name: build.template(std.get(block, 'credential_name', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      credential_name: p.child('credential_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    automation_job_schedule(name, block): {
      local p = path(['azurerm_automation_job_schedule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_job_schedule: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                run_on: build.template(std.get(block, 'run_on', null, true)),
                runbook_name: build.template(block.runbook_name),
                schedule_name: build.template(block.schedule_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      id: p.child('id').out,
      job_schedule_id: p.child('job_schedule_id').out,
      parameters: p.child('parameters').out,
      resource_group_name: p.child('resource_group_name').out,
      resource_manager_id: p.child('resource_manager_id').out,
      run_on: p.child('run_on').out,
      runbook_name: p.child('runbook_name').out,
      schedule_name: p.child('schedule_name').out,
    },
    automation_module(name, block): {
      local p = path(['azurerm_automation_module', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_module: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    automation_powershell72_module(name, block): {
      local p = path(['azurerm_automation_powershell72_module', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_powershell72_module: {
              [name]: std.prune({
                automation_account_id: build.template(block.automation_account_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      automation_account_id: p.child('automation_account_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    automation_python3_package(name, block): {
      local p = path(['azurerm_automation_python3_package', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_python3_package: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                content_uri: build.template(block.content_uri),
                content_version: build.template(std.get(block, 'content_version', null, true)),
                hash_algorithm: build.template(std.get(block, 'hash_algorithm', null, true)),
                hash_value: build.template(std.get(block, 'hash_value', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      content_uri: p.child('content_uri').out,
      content_version: p.child('content_version').out,
      hash_algorithm: p.child('hash_algorithm').out,
      hash_value: p.child('hash_value').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    automation_runbook(name, block): {
      local p = path(['azurerm_automation_runbook', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_runbook: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                log_activity_trace_level: build.template(std.get(block, 'log_activity_trace_level', null, true)),
                log_progress: build.template(block.log_progress),
                log_verbose: build.template(block.log_verbose),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                runbook_type: build.template(block.runbook_type),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      content: p.child('content').out,
      description: p.child('description').out,
      id: p.child('id').out,
      job_schedule: p.child('job_schedule').out,
      location: p.child('location').out,
      log_activity_trace_level: p.child('log_activity_trace_level').out,
      log_progress: p.child('log_progress').out,
      log_verbose: p.child('log_verbose').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      runbook_type: p.child('runbook_type').out,
      tags: p.child('tags').out,
    },
    automation_schedule(name, block): {
      local p = path(['azurerm_automation_schedule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_schedule: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                description: build.template(std.get(block, 'description', null, true)),
                frequency: build.template(block.frequency),
                month_days: build.template(std.get(block, 'month_days', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                timezone: build.template(std.get(block, 'timezone', null, true)),
                week_days: build.template(std.get(block, 'week_days', null, true)),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      description: p.child('description').out,
      expiry_time: p.child('expiry_time').out,
      frequency: p.child('frequency').out,
      id: p.child('id').out,
      interval: p.child('interval').out,
      month_days: p.child('month_days').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      start_time: p.child('start_time').out,
      timezone: p.child('timezone').out,
      week_days: p.child('week_days').out,
    },
    automation_software_update_configuration(name, block): {
      local p = path(['azurerm_automation_software_update_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_software_update_configuration: {
              [name]: std.prune({
                automation_account_id: build.template(block.automation_account_id),
                duration: build.template(std.get(block, 'duration', null, true)),
                name: build.template(block.name),
                non_azure_computer_names: build.template(std.get(block, 'non_azure_computer_names', null, true)),
                virtual_machine_ids: build.template(std.get(block, 'virtual_machine_ids', null, true)),
              }),
            },
          },
        },
      },
      automation_account_id: p.child('automation_account_id').out,
      duration: p.child('duration').out,
      error_code: p.child('error_code').out,
      error_message: p.child('error_message').out,
      id: p.child('id').out,
      name: p.child('name').out,
      non_azure_computer_names: p.child('non_azure_computer_names').out,
      virtual_machine_ids: p.child('virtual_machine_ids').out,
    },
    automation_source_control(name, block): {
      local p = path(['azurerm_automation_source_control', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_source_control: {
              [name]: std.prune({
                automatic_sync: build.template(std.get(block, 'automatic_sync', null, true)),
                automation_account_id: build.template(block.automation_account_id),
                branch: build.template(std.get(block, 'branch', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                folder_path: build.template(block.folder_path),
                name: build.template(block.name),
                publish_runbook_enabled: build.template(std.get(block, 'publish_runbook_enabled', null, true)),
                repository_url: build.template(block.repository_url),
                source_control_type: build.template(block.source_control_type),
              }),
            },
          },
        },
      },
      automatic_sync: p.child('automatic_sync').out,
      automation_account_id: p.child('automation_account_id').out,
      branch: p.child('branch').out,
      description: p.child('description').out,
      folder_path: p.child('folder_path').out,
      id: p.child('id').out,
      name: p.child('name').out,
      publish_runbook_enabled: p.child('publish_runbook_enabled').out,
      repository_url: p.child('repository_url').out,
      source_control_type: p.child('source_control_type').out,
    },
    automation_variable_bool(name, block): {
      local p = path(['azurerm_automation_variable_bool', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_variable_bool: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                description: build.template(std.get(block, 'description', null, true)),
                encrypted: build.template(std.get(block, 'encrypted', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                value: build.template(std.get(block, 'value', null, true)),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      value: p.child('value').out,
    },
    automation_variable_datetime(name, block): {
      local p = path(['azurerm_automation_variable_datetime', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_variable_datetime: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                description: build.template(std.get(block, 'description', null, true)),
                encrypted: build.template(std.get(block, 'encrypted', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                value: build.template(std.get(block, 'value', null, true)),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      value: p.child('value').out,
    },
    automation_variable_int(name, block): {
      local p = path(['azurerm_automation_variable_int', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_variable_int: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                description: build.template(std.get(block, 'description', null, true)),
                encrypted: build.template(std.get(block, 'encrypted', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                value: build.template(std.get(block, 'value', null, true)),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      value: p.child('value').out,
    },
    automation_variable_object(name, block): {
      local p = path(['azurerm_automation_variable_object', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_variable_object: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                description: build.template(std.get(block, 'description', null, true)),
                encrypted: build.template(std.get(block, 'encrypted', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                value: build.template(std.get(block, 'value', null, true)),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      value: p.child('value').out,
    },
    automation_variable_string(name, block): {
      local p = path(['azurerm_automation_variable_string', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_variable_string: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                description: build.template(std.get(block, 'description', null, true)),
                encrypted: build.template(std.get(block, 'encrypted', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                value: build.template(std.get(block, 'value', null, true)),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      value: p.child('value').out,
    },
    automation_watcher(name, block): {
      local p = path(['azurerm_automation_watcher', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_watcher: {
              [name]: std.prune({
                automation_account_id: build.template(block.automation_account_id),
                description: build.template(std.get(block, 'description', null, true)),
                etag: build.template(std.get(block, 'etag', null, true)),
                execution_frequency_in_seconds: build.template(block.execution_frequency_in_seconds),
                location: build.template(block.location),
                name: build.template(block.name),
                script_name: build.template(block.script_name),
                script_parameters: build.template(std.get(block, 'script_parameters', null, true)),
                script_run_on: build.template(block.script_run_on),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      automation_account_id: p.child('automation_account_id').out,
      description: p.child('description').out,
      etag: p.child('etag').out,
      execution_frequency_in_seconds: p.child('execution_frequency_in_seconds').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      script_name: p.child('script_name').out,
      script_parameters: p.child('script_parameters').out,
      script_run_on: p.child('script_run_on').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
    },
    automation_webhook(name, block): {
      local p = path(['azurerm_automation_webhook', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_automation_webhook: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                expiry_time: build.template(block.expiry_time),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                run_on_worker_group: build.template(std.get(block, 'run_on_worker_group', null, true)),
                runbook_name: build.template(block.runbook_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      enabled: p.child('enabled').out,
      expiry_time: p.child('expiry_time').out,
      id: p.child('id').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      resource_group_name: p.child('resource_group_name').out,
      run_on_worker_group: p.child('run_on_worker_group').out,
      runbook_name: p.child('runbook_name').out,
      uri: p.child('uri').out,
    },
    availability_set(name, block): {
      local p = path(['azurerm_availability_set', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_availability_set: {
              [name]: std.prune({
                location: build.template(block.location),
                managed: build.template(std.get(block, 'managed', null, true)),
                name: build.template(block.name),
                platform_fault_domain_count: build.template(std.get(block, 'platform_fault_domain_count', null, true)),
                platform_update_domain_count: build.template(std.get(block, 'platform_update_domain_count', null, true)),
                proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      managed: p.child('managed').out,
      name: p.child('name').out,
      platform_fault_domain_count: p.child('platform_fault_domain_count').out,
      platform_update_domain_count: p.child('platform_update_domain_count').out,
      proximity_placement_group_id: p.child('proximity_placement_group_id').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    backup_container_storage_account(name, block): {
      local p = path(['azurerm_backup_container_storage_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_backup_container_storage_account: {
              [name]: std.prune({
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
                storage_account_id: build.template(block.storage_account_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    backup_policy_file_share(name, block): {
      local p = path(['azurerm_backup_policy_file_share', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_backup_policy_file_share: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
                timezone: build.template(std.get(block, 'timezone', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
      timezone: p.child('timezone').out,
    },
    backup_policy_vm(name, block): {
      local p = path(['azurerm_backup_policy_vm', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_backup_policy_vm: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_type: build.template(std.get(block, 'policy_type', null, true)),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
                timezone: build.template(std.get(block, 'timezone', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instant_restore_retention_days: p.child('instant_restore_retention_days').out,
      name: p.child('name').out,
      policy_type: p.child('policy_type').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
      timezone: p.child('timezone').out,
    },
    backup_policy_vm_workload(name, block): {
      local p = path(['azurerm_backup_policy_vm_workload', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_backup_policy_vm_workload: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
                workload_type: build.template(block.workload_type),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
      workload_type: p.child('workload_type').out,
    },
    backup_protected_file_share(name, block): {
      local p = path(['azurerm_backup_protected_file_share', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_backup_protected_file_share: {
              [name]: std.prune({
                backup_policy_id: build.template(block.backup_policy_id),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
                source_file_share_name: build.template(block.source_file_share_name),
                source_storage_account_id: build.template(block.source_storage_account_id),
              }),
            },
          },
        },
      },
      backup_policy_id: p.child('backup_policy_id').out,
      id: p.child('id').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
      source_file_share_name: p.child('source_file_share_name').out,
      source_storage_account_id: p.child('source_storage_account_id').out,
    },
    backup_protected_vm(name, block): {
      local p = path(['azurerm_backup_protected_vm', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_backup_protected_vm: {
              [name]: std.prune({
                backup_policy_id: build.template(std.get(block, 'backup_policy_id', null, true)),
                exclude_disk_luns: build.template(std.get(block, 'exclude_disk_luns', null, true)),
                include_disk_luns: build.template(std.get(block, 'include_disk_luns', null, true)),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      backup_policy_id: p.child('backup_policy_id').out,
      exclude_disk_luns: p.child('exclude_disk_luns').out,
      id: p.child('id').out,
      include_disk_luns: p.child('include_disk_luns').out,
      protection_state: p.child('protection_state').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
      source_vm_id: p.child('source_vm_id').out,
    },
    bastion_host(name, block): {
      local p = path(['azurerm_bastion_host', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bastion_host: {
              [name]: std.prune({
                copy_paste_enabled: build.template(std.get(block, 'copy_paste_enabled', null, true)),
                file_copy_enabled: build.template(std.get(block, 'file_copy_enabled', null, true)),
                ip_connect_enabled: build.template(std.get(block, 'ip_connect_enabled', null, true)),
                kerberos_enabled: build.template(std.get(block, 'kerberos_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                scale_units: build.template(std.get(block, 'scale_units', null, true)),
                session_recording_enabled: build.template(std.get(block, 'session_recording_enabled', null, true)),
                shareable_link_enabled: build.template(std.get(block, 'shareable_link_enabled', null, true)),
                sku: build.template(std.get(block, 'sku', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tunneling_enabled: build.template(std.get(block, 'tunneling_enabled', null, true)),
                virtual_network_id: build.template(std.get(block, 'virtual_network_id', null, true)),
              }),
            },
          },
        },
      },
      copy_paste_enabled: p.child('copy_paste_enabled').out,
      dns_name: p.child('dns_name').out,
      file_copy_enabled: p.child('file_copy_enabled').out,
      id: p.child('id').out,
      ip_connect_enabled: p.child('ip_connect_enabled').out,
      kerberos_enabled: p.child('kerberos_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scale_units: p.child('scale_units').out,
      session_recording_enabled: p.child('session_recording_enabled').out,
      shareable_link_enabled: p.child('shareable_link_enabled').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      tunneling_enabled: p.child('tunneling_enabled').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    batch_account(name, block): {
      local p = path(['azurerm_batch_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_batch_account: {
              [name]: std.prune({
                encryption: build.template(std.get(block, 'encryption', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                pool_allocation_mode: build.template(std.get(block, 'pool_allocation_mode', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                storage_account_authentication_mode: build.template(std.get(block, 'storage_account_authentication_mode', null, true)),
                storage_account_id: build.template(std.get(block, 'storage_account_id', null, true)),
                storage_account_node_identity: build.template(std.get(block, 'storage_account_node_identity', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      account_endpoint: p.child('account_endpoint').out,
      allowed_authentication_modes: p.child('allowed_authentication_modes').out,
      encryption: p.child('encryption').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      pool_allocation_mode: p.child('pool_allocation_mode').out,
      primary_access_key: p.child('primary_access_key').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      storage_account_authentication_mode: p.child('storage_account_authentication_mode').out,
      storage_account_id: p.child('storage_account_id').out,
      storage_account_node_identity: p.child('storage_account_node_identity').out,
      tags: p.child('tags').out,
    },
    batch_application(name, block): {
      local p = path(['azurerm_batch_application', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_batch_application: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                allow_updates: build.template(std.get(block, 'allow_updates', null, true)),
                default_version: build.template(std.get(block, 'default_version', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      allow_updates: p.child('allow_updates').out,
      default_version: p.child('default_version').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    batch_certificate(name, block): {
      local p = path(['azurerm_batch_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_batch_certificate: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                certificate: build.template(block.certificate),
                format: build.template(block.format),
                password: build.template(std.get(block, 'password', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                thumbprint: build.template(block.thumbprint),
                thumbprint_algorithm: build.template(block.thumbprint_algorithm),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      certificate: p.child('certificate').out,
      format: p.child('format').out,
      id: p.child('id').out,
      name: p.child('name').out,
      password: p.child('password').out,
      public_data: p.child('public_data').out,
      resource_group_name: p.child('resource_group_name').out,
      thumbprint: p.child('thumbprint').out,
      thumbprint_algorithm: p.child('thumbprint_algorithm').out,
    },
    batch_job(name, block): {
      local p = path(['azurerm_batch_job', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_batch_job: {
              [name]: std.prune({
                batch_pool_id: build.template(block.batch_pool_id),
                common_environment_properties: build.template(std.get(block, 'common_environment_properties', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                name: build.template(block.name),
                priority: build.template(std.get(block, 'priority', null, true)),
                task_retry_maximum: build.template(std.get(block, 'task_retry_maximum', null, true)),
              }),
            },
          },
        },
      },
      batch_pool_id: p.child('batch_pool_id').out,
      common_environment_properties: p.child('common_environment_properties').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      task_retry_maximum: p.child('task_retry_maximum').out,
    },
    batch_pool(name, block): {
      local p = path(['azurerm_batch_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_batch_pool: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                inter_node_communication: build.template(std.get(block, 'inter_node_communication', null, true)),
                license_type: build.template(std.get(block, 'license_type', null, true)),
                max_tasks_per_node: build.template(std.get(block, 'max_tasks_per_node', null, true)),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                node_agent_sku_id: build.template(block.node_agent_sku_id),
                os_disk_placement: build.template(std.get(block, 'os_disk_placement', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                stop_pending_resize_operation: build.template(std.get(block, 'stop_pending_resize_operation', null, true)),
                target_node_communication_mode: build.template(std.get(block, 'target_node_communication_mode', null, true)),
                vm_size: build.template(block.vm_size),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      inter_node_communication: p.child('inter_node_communication').out,
      license_type: p.child('license_type').out,
      max_tasks_per_node: p.child('max_tasks_per_node').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      node_agent_sku_id: p.child('node_agent_sku_id').out,
      os_disk_placement: p.child('os_disk_placement').out,
      resource_group_name: p.child('resource_group_name').out,
      stop_pending_resize_operation: p.child('stop_pending_resize_operation').out,
      target_node_communication_mode: p.child('target_node_communication_mode').out,
      vm_size: p.child('vm_size').out,
    },
    billing_account_cost_management_export(name, block): {
      local p = path(['azurerm_billing_account_cost_management_export', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_billing_account_cost_management_export: {
              [name]: std.prune({
                active: build.template(std.get(block, 'active', null, true)),
                billing_account_id: build.template(block.billing_account_id),
                name: build.template(block.name),
                recurrence_period_end_date: build.template(block.recurrence_period_end_date),
                recurrence_period_start_date: build.template(block.recurrence_period_start_date),
                recurrence_type: build.template(block.recurrence_type),
              }),
            },
          },
        },
      },
      active: p.child('active').out,
      billing_account_id: p.child('billing_account_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      recurrence_period_end_date: p.child('recurrence_period_end_date').out,
      recurrence_period_start_date: p.child('recurrence_period_start_date').out,
      recurrence_type: p.child('recurrence_type').out,
    },
    blueprint_assignment(name, block): {
      local p = path(['azurerm_blueprint_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_blueprint_assignment: {
              [name]: std.prune({
                location: build.template(block.location),
                lock_exclude_actions: build.template(std.get(block, 'lock_exclude_actions', null, true)),
                lock_exclude_principals: build.template(std.get(block, 'lock_exclude_principals', null, true)),
                lock_mode: build.template(std.get(block, 'lock_mode', null, true)),
                name: build.template(block.name),
                parameter_values: build.template(std.get(block, 'parameter_values', null, true)),
                resource_groups: build.template(std.get(block, 'resource_groups', null, true)),
                target_subscription_id: build.template(block.target_subscription_id),
                version_id: build.template(block.version_id),
              }),
            },
          },
        },
      },
      blueprint_name: p.child('blueprint_name').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      lock_exclude_actions: p.child('lock_exclude_actions').out,
      lock_exclude_principals: p.child('lock_exclude_principals').out,
      lock_mode: p.child('lock_mode').out,
      name: p.child('name').out,
      parameter_values: p.child('parameter_values').out,
      resource_groups: p.child('resource_groups').out,
      target_subscription_id: p.child('target_subscription_id').out,
      type: p.child('type').out,
      version_id: p.child('version_id').out,
    },
    bot_channel_alexa(name, block): {
      local p = path(['azurerm_bot_channel_alexa', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_channel_alexa: {
              [name]: std.prune({
                bot_name: build.template(block.bot_name),
                location: build.template(block.location),
                resource_group_name: build.template(block.resource_group_name),
                skill_id: build.template(block.skill_id),
              }),
            },
          },
        },
      },
      bot_name: p.child('bot_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      resource_group_name: p.child('resource_group_name').out,
      skill_id: p.child('skill_id').out,
    },
    bot_channel_direct_line_speech(name, block): {
      local p = path(['azurerm_bot_channel_direct_line_speech', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_channel_direct_line_speech: {
              [name]: std.prune({
                bot_name: build.template(block.bot_name),
                cognitive_account_id: build.template(std.get(block, 'cognitive_account_id', null, true)),
                cognitive_service_access_key: build.template(block.cognitive_service_access_key),
                cognitive_service_location: build.template(block.cognitive_service_location),
                custom_speech_model_id: build.template(std.get(block, 'custom_speech_model_id', null, true)),
                custom_voice_deployment_id: build.template(std.get(block, 'custom_voice_deployment_id', null, true)),
                location: build.template(block.location),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      bot_name: p.child('bot_name').out,
      cognitive_account_id: p.child('cognitive_account_id').out,
      cognitive_service_access_key: p.child('cognitive_service_access_key').out,
      cognitive_service_location: p.child('cognitive_service_location').out,
      custom_speech_model_id: p.child('custom_speech_model_id').out,
      custom_voice_deployment_id: p.child('custom_voice_deployment_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    bot_channel_directline(name, block): {
      local p = path(['azurerm_bot_channel_directline', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_channel_directline: {
              [name]: std.prune({
                bot_name: build.template(block.bot_name),
                location: build.template(block.location),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      bot_name: p.child('bot_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    bot_channel_email(name, block): {
      local p = path(['azurerm_bot_channel_email', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_channel_email: {
              [name]: std.prune({
                bot_name: build.template(block.bot_name),
                email_address: build.template(block.email_address),
                email_password: build.template(std.get(block, 'email_password', null, true)),
                location: build.template(block.location),
                magic_code: build.template(std.get(block, 'magic_code', null, true)),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      bot_name: p.child('bot_name').out,
      email_address: p.child('email_address').out,
      email_password: p.child('email_password').out,
      id: p.child('id').out,
      location: p.child('location').out,
      magic_code: p.child('magic_code').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    bot_channel_facebook(name, block): {
      local p = path(['azurerm_bot_channel_facebook', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_channel_facebook: {
              [name]: std.prune({
                bot_name: build.template(block.bot_name),
                facebook_application_id: build.template(block.facebook_application_id),
                facebook_application_secret: build.template(block.facebook_application_secret),
                location: build.template(block.location),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      bot_name: p.child('bot_name').out,
      facebook_application_id: p.child('facebook_application_id').out,
      facebook_application_secret: p.child('facebook_application_secret').out,
      id: p.child('id').out,
      location: p.child('location').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    bot_channel_line(name, block): {
      local p = path(['azurerm_bot_channel_line', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_channel_line: {
              [name]: std.prune({
                bot_name: build.template(block.bot_name),
                location: build.template(block.location),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      bot_name: p.child('bot_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    bot_channel_ms_teams(name, block): {
      local p = path(['azurerm_bot_channel_ms_teams', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_channel_ms_teams: {
              [name]: std.prune({
                bot_name: build.template(block.bot_name),
                deployment_environment: build.template(std.get(block, 'deployment_environment', null, true)),
                enable_calling: build.template(std.get(block, 'enable_calling', null, true)),
                location: build.template(block.location),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      bot_name: p.child('bot_name').out,
      calling_web_hook: p.child('calling_web_hook').out,
      deployment_environment: p.child('deployment_environment').out,
      enable_calling: p.child('enable_calling').out,
      id: p.child('id').out,
      location: p.child('location').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    bot_channel_slack(name, block): {
      local p = path(['azurerm_bot_channel_slack', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_channel_slack: {
              [name]: std.prune({
                bot_name: build.template(block.bot_name),
                client_id: build.template(block.client_id),
                client_secret: build.template(block.client_secret),
                landing_page_url: build.template(std.get(block, 'landing_page_url', null, true)),
                location: build.template(block.location),
                resource_group_name: build.template(block.resource_group_name),
                signing_secret: build.template(std.get(block, 'signing_secret', null, true)),
                verification_token: build.template(block.verification_token),
              }),
            },
          },
        },
      },
      bot_name: p.child('bot_name').out,
      client_id: p.child('client_id').out,
      client_secret: p.child('client_secret').out,
      id: p.child('id').out,
      landing_page_url: p.child('landing_page_url').out,
      location: p.child('location').out,
      resource_group_name: p.child('resource_group_name').out,
      signing_secret: p.child('signing_secret').out,
      verification_token: p.child('verification_token').out,
    },
    bot_channel_sms(name, block): {
      local p = path(['azurerm_bot_channel_sms', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_channel_sms: {
              [name]: std.prune({
                bot_name: build.template(block.bot_name),
                location: build.template(block.location),
                phone_number: build.template(block.phone_number),
                resource_group_name: build.template(block.resource_group_name),
                sms_channel_account_security_id: build.template(block.sms_channel_account_security_id),
                sms_channel_auth_token: build.template(block.sms_channel_auth_token),
              }),
            },
          },
        },
      },
      bot_name: p.child('bot_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      phone_number: p.child('phone_number').out,
      resource_group_name: p.child('resource_group_name').out,
      sms_channel_account_security_id: p.child('sms_channel_account_security_id').out,
      sms_channel_auth_token: p.child('sms_channel_auth_token').out,
    },
    bot_channel_web_chat(name, block): {
      local p = path(['azurerm_bot_channel_web_chat', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_channel_web_chat: {
              [name]: std.prune({
                bot_name: build.template(block.bot_name),
                location: build.template(block.location),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      bot_name: p.child('bot_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    bot_channels_registration(name, block): {
      local p = path(['azurerm_bot_channels_registration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_channels_registration: {
              [name]: std.prune({
                cmk_key_vault_url: build.template(std.get(block, 'cmk_key_vault_url', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                developer_app_insights_api_key: build.template(std.get(block, 'developer_app_insights_api_key', null, true)),
                developer_app_insights_application_id: build.template(std.get(block, 'developer_app_insights_application_id', null, true)),
                developer_app_insights_key: build.template(std.get(block, 'developer_app_insights_key', null, true)),
                endpoint: build.template(std.get(block, 'endpoint', null, true)),
                icon_url: build.template(std.get(block, 'icon_url', null, true)),
                location: build.template(block.location),
                microsoft_app_id: build.template(block.microsoft_app_id),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                streaming_endpoint_enabled: build.template(std.get(block, 'streaming_endpoint_enabled', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      cmk_key_vault_url: p.child('cmk_key_vault_url').out,
      description: p.child('description').out,
      developer_app_insights_api_key: p.child('developer_app_insights_api_key').out,
      developer_app_insights_application_id: p.child('developer_app_insights_application_id').out,
      developer_app_insights_key: p.child('developer_app_insights_key').out,
      display_name: p.child('display_name').out,
      endpoint: p.child('endpoint').out,
      icon_url: p.child('icon_url').out,
      id: p.child('id').out,
      location: p.child('location').out,
      microsoft_app_id: p.child('microsoft_app_id').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      streaming_endpoint_enabled: p.child('streaming_endpoint_enabled').out,
      tags: p.child('tags').out,
    },
    bot_connection(name, block): {
      local p = path(['azurerm_bot_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_connection: {
              [name]: std.prune({
                bot_name: build.template(block.bot_name),
                client_id: build.template(block.client_id),
                client_secret: build.template(block.client_secret),
                location: build.template(block.location),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                scopes: build.template(std.get(block, 'scopes', null, true)),
                service_provider_name: build.template(block.service_provider_name),
              }),
            },
          },
        },
      },
      bot_name: p.child('bot_name').out,
      client_id: p.child('client_id').out,
      client_secret: p.child('client_secret').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      resource_group_name: p.child('resource_group_name').out,
      scopes: p.child('scopes').out,
      service_provider_name: p.child('service_provider_name').out,
    },
    bot_service_azure_bot(name, block): {
      local p = path(['azurerm_bot_service_azure_bot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_service_azure_bot: {
              [name]: std.prune({
                cmk_key_vault_key_url: build.template(std.get(block, 'cmk_key_vault_key_url', null, true)),
                developer_app_insights_api_key: build.template(std.get(block, 'developer_app_insights_api_key', null, true)),
                developer_app_insights_application_id: build.template(std.get(block, 'developer_app_insights_application_id', null, true)),
                developer_app_insights_key: build.template(std.get(block, 'developer_app_insights_key', null, true)),
                endpoint: build.template(std.get(block, 'endpoint', null, true)),
                icon_url: build.template(std.get(block, 'icon_url', null, true)),
                local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null, true)),
                location: build.template(block.location),
                luis_app_ids: build.template(std.get(block, 'luis_app_ids', null, true)),
                luis_key: build.template(std.get(block, 'luis_key', null, true)),
                microsoft_app_id: build.template(block.microsoft_app_id),
                microsoft_app_msi_id: build.template(std.get(block, 'microsoft_app_msi_id', null, true)),
                microsoft_app_tenant_id: build.template(std.get(block, 'microsoft_app_tenant_id', null, true)),
                microsoft_app_type: build.template(std.get(block, 'microsoft_app_type', null, true)),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                streaming_endpoint_enabled: build.template(std.get(block, 'streaming_endpoint_enabled', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      cmk_key_vault_key_url: p.child('cmk_key_vault_key_url').out,
      developer_app_insights_api_key: p.child('developer_app_insights_api_key').out,
      developer_app_insights_application_id: p.child('developer_app_insights_application_id').out,
      developer_app_insights_key: p.child('developer_app_insights_key').out,
      display_name: p.child('display_name').out,
      endpoint: p.child('endpoint').out,
      icon_url: p.child('icon_url').out,
      id: p.child('id').out,
      local_authentication_enabled: p.child('local_authentication_enabled').out,
      location: p.child('location').out,
      luis_app_ids: p.child('luis_app_ids').out,
      luis_key: p.child('luis_key').out,
      microsoft_app_id: p.child('microsoft_app_id').out,
      microsoft_app_msi_id: p.child('microsoft_app_msi_id').out,
      microsoft_app_tenant_id: p.child('microsoft_app_tenant_id').out,
      microsoft_app_type: p.child('microsoft_app_type').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      streaming_endpoint_enabled: p.child('streaming_endpoint_enabled').out,
      tags: p.child('tags').out,
    },
    bot_web_app(name, block): {
      local p = path(['azurerm_bot_web_app', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_bot_web_app: {
              [name]: std.prune({
                developer_app_insights_api_key: build.template(std.get(block, 'developer_app_insights_api_key', null, true)),
                developer_app_insights_application_id: build.template(std.get(block, 'developer_app_insights_application_id', null, true)),
                developer_app_insights_key: build.template(std.get(block, 'developer_app_insights_key', null, true)),
                endpoint: build.template(std.get(block, 'endpoint', null, true)),
                location: build.template(block.location),
                luis_app_ids: build.template(std.get(block, 'luis_app_ids', null, true)),
                luis_key: build.template(std.get(block, 'luis_key', null, true)),
                microsoft_app_id: build.template(block.microsoft_app_id),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      developer_app_insights_api_key: p.child('developer_app_insights_api_key').out,
      developer_app_insights_application_id: p.child('developer_app_insights_application_id').out,
      developer_app_insights_key: p.child('developer_app_insights_key').out,
      display_name: p.child('display_name').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      location: p.child('location').out,
      luis_app_ids: p.child('luis_app_ids').out,
      luis_key: p.child('luis_key').out,
      microsoft_app_id: p.child('microsoft_app_id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    capacity_reservation(name, block): {
      local p = path(['azurerm_capacity_reservation', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_capacity_reservation: {
              [name]: std.prune({
                capacity_reservation_group_id: build.template(block.capacity_reservation_group_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      capacity_reservation_group_id: p.child('capacity_reservation_group_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      zone: p.child('zone').out,
    },
    capacity_reservation_group(name, block): {
      local p = path(['azurerm_capacity_reservation_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_capacity_reservation_group: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    cdn_endpoint(name, block): {
      local p = path(['azurerm_cdn_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_endpoint: {
              [name]: std.prune({
                content_types_to_compress: build.template(std.get(block, 'content_types_to_compress', null, true)),
                is_compression_enabled: build.template(std.get(block, 'is_compression_enabled', null, true)),
                is_http_allowed: build.template(std.get(block, 'is_http_allowed', null, true)),
                is_https_allowed: build.template(std.get(block, 'is_https_allowed', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                optimization_type: build.template(std.get(block, 'optimization_type', null, true)),
                origin_host_header: build.template(std.get(block, 'origin_host_header', null, true)),
                origin_path: build.template(std.get(block, 'origin_path', null, true)),
                probe_path: build.template(std.get(block, 'probe_path', null, true)),
                profile_name: build.template(block.profile_name),
                querystring_caching_behaviour: build.template(std.get(block, 'querystring_caching_behaviour', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      content_types_to_compress: p.child('content_types_to_compress').out,
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      is_compression_enabled: p.child('is_compression_enabled').out,
      is_http_allowed: p.child('is_http_allowed').out,
      is_https_allowed: p.child('is_https_allowed').out,
      location: p.child('location').out,
      name: p.child('name').out,
      optimization_type: p.child('optimization_type').out,
      origin_host_header: p.child('origin_host_header').out,
      origin_path: p.child('origin_path').out,
      probe_path: p.child('probe_path').out,
      profile_name: p.child('profile_name').out,
      querystring_caching_behaviour: p.child('querystring_caching_behaviour').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    cdn_endpoint_custom_domain(name, block): {
      local p = path(['azurerm_cdn_endpoint_custom_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_endpoint_custom_domain: {
              [name]: std.prune({
                cdn_endpoint_id: build.template(block.cdn_endpoint_id),
                host_name: build.template(block.host_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      cdn_endpoint_id: p.child('cdn_endpoint_id').out,
      host_name: p.child('host_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    cdn_frontdoor_custom_domain(name, block): {
      local p = path(['azurerm_cdn_frontdoor_custom_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_frontdoor_custom_domain: {
              [name]: std.prune({
                cdn_frontdoor_profile_id: build.template(block.cdn_frontdoor_profile_id),
                dns_zone_id: build.template(std.get(block, 'dns_zone_id', null, true)),
                host_name: build.template(block.host_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      cdn_frontdoor_profile_id: p.child('cdn_frontdoor_profile_id').out,
      dns_zone_id: p.child('dns_zone_id').out,
      expiration_date: p.child('expiration_date').out,
      host_name: p.child('host_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      validation_token: p.child('validation_token').out,
    },
    cdn_frontdoor_custom_domain_association(name, block): {
      local p = path(['azurerm_cdn_frontdoor_custom_domain_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_frontdoor_custom_domain_association: {
              [name]: std.prune({
                cdn_frontdoor_custom_domain_id: build.template(block.cdn_frontdoor_custom_domain_id),
                cdn_frontdoor_route_ids: build.template(block.cdn_frontdoor_route_ids),
              }),
            },
          },
        },
      },
      cdn_frontdoor_custom_domain_id: p.child('cdn_frontdoor_custom_domain_id').out,
      cdn_frontdoor_route_ids: p.child('cdn_frontdoor_route_ids').out,
      id: p.child('id').out,
    },
    cdn_frontdoor_endpoint(name, block): {
      local p = path(['azurerm_cdn_frontdoor_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_frontdoor_endpoint: {
              [name]: std.prune({
                cdn_frontdoor_profile_id: build.template(block.cdn_frontdoor_profile_id),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      cdn_frontdoor_profile_id: p.child('cdn_frontdoor_profile_id').out,
      enabled: p.child('enabled').out,
      host_name: p.child('host_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    cdn_frontdoor_firewall_policy(name, block): {
      local p = path(['azurerm_cdn_frontdoor_firewall_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_frontdoor_firewall_policy: {
              [name]: std.prune({
                custom_block_response_body: build.template(std.get(block, 'custom_block_response_body', null, true)),
                custom_block_response_status_code: build.template(std.get(block, 'custom_block_response_status_code', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                mode: build.template(block.mode),
                name: build.template(block.name),
                redirect_url: build.template(std.get(block, 'redirect_url', null, true)),
                request_body_check_enabled: build.template(std.get(block, 'request_body_check_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      custom_block_response_body: p.child('custom_block_response_body').out,
      custom_block_response_status_code: p.child('custom_block_response_status_code').out,
      enabled: p.child('enabled').out,
      frontend_endpoint_ids: p.child('frontend_endpoint_ids').out,
      id: p.child('id').out,
      mode: p.child('mode').out,
      name: p.child('name').out,
      redirect_url: p.child('redirect_url').out,
      request_body_check_enabled: p.child('request_body_check_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    cdn_frontdoor_origin(name, block): {
      local p = path(['azurerm_cdn_frontdoor_origin', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_frontdoor_origin: {
              [name]: std.prune({
                cdn_frontdoor_origin_group_id: build.template(block.cdn_frontdoor_origin_group_id),
                certificate_name_check_enabled: build.template(block.certificate_name_check_enabled),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                host_name: build.template(block.host_name),
                http_port: build.template(std.get(block, 'http_port', null, true)),
                https_port: build.template(std.get(block, 'https_port', null, true)),
                name: build.template(block.name),
                origin_host_header: build.template(std.get(block, 'origin_host_header', null, true)),
                priority: build.template(std.get(block, 'priority', null, true)),
                weight: build.template(std.get(block, 'weight', null, true)),
              }),
            },
          },
        },
      },
      cdn_frontdoor_origin_group_id: p.child('cdn_frontdoor_origin_group_id').out,
      certificate_name_check_enabled: p.child('certificate_name_check_enabled').out,
      enabled: p.child('enabled').out,
      host_name: p.child('host_name').out,
      http_port: p.child('http_port').out,
      https_port: p.child('https_port').out,
      id: p.child('id').out,
      name: p.child('name').out,
      origin_host_header: p.child('origin_host_header').out,
      priority: p.child('priority').out,
      weight: p.child('weight').out,
    },
    cdn_frontdoor_origin_group(name, block): {
      local p = path(['azurerm_cdn_frontdoor_origin_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_frontdoor_origin_group: {
              [name]: std.prune({
                cdn_frontdoor_profile_id: build.template(block.cdn_frontdoor_profile_id),
                name: build.template(block.name),
                restore_traffic_time_to_healed_or_new_endpoint_in_minutes: build.template(std.get(block, 'restore_traffic_time_to_healed_or_new_endpoint_in_minutes', null, true)),
                session_affinity_enabled: build.template(std.get(block, 'session_affinity_enabled', null, true)),
              }),
            },
          },
        },
      },
      cdn_frontdoor_profile_id: p.child('cdn_frontdoor_profile_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      restore_traffic_time_to_healed_or_new_endpoint_in_minutes: p.child('restore_traffic_time_to_healed_or_new_endpoint_in_minutes').out,
      session_affinity_enabled: p.child('session_affinity_enabled').out,
    },
    cdn_frontdoor_profile(name, block): {
      local p = path(['azurerm_cdn_frontdoor_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_frontdoor_profile: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                response_timeout_seconds: build.template(std.get(block, 'response_timeout_seconds', null, true)),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      resource_guid: p.child('resource_guid').out,
      response_timeout_seconds: p.child('response_timeout_seconds').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    cdn_frontdoor_route(name, block): {
      local p = path(['azurerm_cdn_frontdoor_route', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_frontdoor_route: {
              [name]: std.prune({
                cdn_frontdoor_custom_domain_ids: build.template(std.get(block, 'cdn_frontdoor_custom_domain_ids', null, true)),
                cdn_frontdoor_endpoint_id: build.template(block.cdn_frontdoor_endpoint_id),
                cdn_frontdoor_origin_group_id: build.template(block.cdn_frontdoor_origin_group_id),
                cdn_frontdoor_origin_ids: build.template(block.cdn_frontdoor_origin_ids),
                cdn_frontdoor_origin_path: build.template(std.get(block, 'cdn_frontdoor_origin_path', null, true)),
                cdn_frontdoor_rule_set_ids: build.template(std.get(block, 'cdn_frontdoor_rule_set_ids', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                forwarding_protocol: build.template(std.get(block, 'forwarding_protocol', null, true)),
                https_redirect_enabled: build.template(std.get(block, 'https_redirect_enabled', null, true)),
                link_to_default_domain: build.template(std.get(block, 'link_to_default_domain', null, true)),
                name: build.template(block.name),
                patterns_to_match: build.template(block.patterns_to_match),
                supported_protocols: build.template(block.supported_protocols),
              }),
            },
          },
        },
      },
      cdn_frontdoor_custom_domain_ids: p.child('cdn_frontdoor_custom_domain_ids').out,
      cdn_frontdoor_endpoint_id: p.child('cdn_frontdoor_endpoint_id').out,
      cdn_frontdoor_origin_group_id: p.child('cdn_frontdoor_origin_group_id').out,
      cdn_frontdoor_origin_ids: p.child('cdn_frontdoor_origin_ids').out,
      cdn_frontdoor_origin_path: p.child('cdn_frontdoor_origin_path').out,
      cdn_frontdoor_rule_set_ids: p.child('cdn_frontdoor_rule_set_ids').out,
      enabled: p.child('enabled').out,
      forwarding_protocol: p.child('forwarding_protocol').out,
      https_redirect_enabled: p.child('https_redirect_enabled').out,
      id: p.child('id').out,
      link_to_default_domain: p.child('link_to_default_domain').out,
      name: p.child('name').out,
      patterns_to_match: p.child('patterns_to_match').out,
      supported_protocols: p.child('supported_protocols').out,
    },
    cdn_frontdoor_rule(name, block): {
      local p = path(['azurerm_cdn_frontdoor_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_frontdoor_rule: {
              [name]: std.prune({
                behavior_on_match: build.template(std.get(block, 'behavior_on_match', null, true)),
                cdn_frontdoor_rule_set_id: build.template(block.cdn_frontdoor_rule_set_id),
                name: build.template(block.name),
                order: build.template(block.order),
              }),
            },
          },
        },
      },
      behavior_on_match: p.child('behavior_on_match').out,
      cdn_frontdoor_rule_set_id: p.child('cdn_frontdoor_rule_set_id').out,
      cdn_frontdoor_rule_set_name: p.child('cdn_frontdoor_rule_set_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      order: p.child('order').out,
    },
    cdn_frontdoor_rule_set(name, block): {
      local p = path(['azurerm_cdn_frontdoor_rule_set', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_frontdoor_rule_set: {
              [name]: std.prune({
                cdn_frontdoor_profile_id: build.template(block.cdn_frontdoor_profile_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      cdn_frontdoor_profile_id: p.child('cdn_frontdoor_profile_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    cdn_frontdoor_secret(name, block): {
      local p = path(['azurerm_cdn_frontdoor_secret', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_frontdoor_secret: {
              [name]: std.prune({
                cdn_frontdoor_profile_id: build.template(block.cdn_frontdoor_profile_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      cdn_frontdoor_profile_id: p.child('cdn_frontdoor_profile_id').out,
      cdn_frontdoor_profile_name: p.child('cdn_frontdoor_profile_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    cdn_frontdoor_security_policy(name, block): {
      local p = path(['azurerm_cdn_frontdoor_security_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_frontdoor_security_policy: {
              [name]: std.prune({
                cdn_frontdoor_profile_id: build.template(block.cdn_frontdoor_profile_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      cdn_frontdoor_profile_id: p.child('cdn_frontdoor_profile_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    cdn_profile(name, block): {
      local p = path(['azurerm_cdn_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cdn_profile: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    chaos_studio_capability(name, block): {
      local p = path(['azurerm_chaos_studio_capability', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_chaos_studio_capability: {
              [name]: std.prune({
                capability_type: build.template(block.capability_type),
                chaos_studio_target_id: build.template(block.chaos_studio_target_id),
              }),
            },
          },
        },
      },
      capability_type: p.child('capability_type').out,
      chaos_studio_target_id: p.child('chaos_studio_target_id').out,
      id: p.child('id').out,
      urn: p.child('urn').out,
    },
    chaos_studio_experiment(name, block): {
      local p = path(['azurerm_chaos_studio_experiment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_chaos_studio_experiment: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    chaos_studio_target(name, block): {
      local p = path(['azurerm_chaos_studio_target', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_chaos_studio_target: {
              [name]: std.prune({
                location: build.template(block.location),
                target_resource_id: build.template(block.target_resource_id),
                target_type: build.template(block.target_type),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      target_resource_id: p.child('target_resource_id').out,
      target_type: p.child('target_type').out,
    },
    cognitive_account(name, block): {
      local p = path(['azurerm_cognitive_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cognitive_account: {
              [name]: std.prune({
                custom_question_answering_search_service_id: build.template(std.get(block, 'custom_question_answering_search_service_id', null, true)),
                custom_question_answering_search_service_key: build.template(std.get(block, 'custom_question_answering_search_service_key', null, true)),
                custom_subdomain_name: build.template(std.get(block, 'custom_subdomain_name', null, true)),
                dynamic_throttling_enabled: build.template(std.get(block, 'dynamic_throttling_enabled', null, true)),
                fqdns: build.template(std.get(block, 'fqdns', null, true)),
                kind: build.template(block.kind),
                local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null, true)),
                location: build.template(block.location),
                metrics_advisor_aad_client_id: build.template(std.get(block, 'metrics_advisor_aad_client_id', null, true)),
                metrics_advisor_aad_tenant_id: build.template(std.get(block, 'metrics_advisor_aad_tenant_id', null, true)),
                metrics_advisor_super_user_name: build.template(std.get(block, 'metrics_advisor_super_user_name', null, true)),
                metrics_advisor_website_name: build.template(std.get(block, 'metrics_advisor_website_name', null, true)),
                name: build.template(block.name),
                outbound_network_access_restricted: build.template(std.get(block, 'outbound_network_access_restricted', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                qna_runtime_endpoint: build.template(std.get(block, 'qna_runtime_endpoint', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      custom_question_answering_search_service_id: p.child('custom_question_answering_search_service_id').out,
      custom_question_answering_search_service_key: p.child('custom_question_answering_search_service_key').out,
      custom_subdomain_name: p.child('custom_subdomain_name').out,
      dynamic_throttling_enabled: p.child('dynamic_throttling_enabled').out,
      endpoint: p.child('endpoint').out,
      fqdns: p.child('fqdns').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      local_auth_enabled: p.child('local_auth_enabled').out,
      location: p.child('location').out,
      metrics_advisor_aad_client_id: p.child('metrics_advisor_aad_client_id').out,
      metrics_advisor_aad_tenant_id: p.child('metrics_advisor_aad_tenant_id').out,
      metrics_advisor_super_user_name: p.child('metrics_advisor_super_user_name').out,
      metrics_advisor_website_name: p.child('metrics_advisor_website_name').out,
      name: p.child('name').out,
      outbound_network_access_restricted: p.child('outbound_network_access_restricted').out,
      primary_access_key: p.child('primary_access_key').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      qna_runtime_endpoint: p.child('qna_runtime_endpoint').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    cognitive_account_customer_managed_key(name, block): {
      local p = path(['azurerm_cognitive_account_customer_managed_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cognitive_account_customer_managed_key: {
              [name]: std.prune({
                cognitive_account_id: build.template(block.cognitive_account_id),
                identity_client_id: build.template(std.get(block, 'identity_client_id', null, true)),
                key_vault_key_id: build.template(block.key_vault_key_id),
              }),
            },
          },
        },
      },
      cognitive_account_id: p.child('cognitive_account_id').out,
      id: p.child('id').out,
      identity_client_id: p.child('identity_client_id').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
    },
    cognitive_deployment(name, block): {
      local p = path(['azurerm_cognitive_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cognitive_deployment: {
              [name]: std.prune({
                cognitive_account_id: build.template(block.cognitive_account_id),
                name: build.template(block.name),
                rai_policy_name: build.template(std.get(block, 'rai_policy_name', null, true)),
                version_upgrade_option: build.template(std.get(block, 'version_upgrade_option', null, true)),
              }),
            },
          },
        },
      },
      cognitive_account_id: p.child('cognitive_account_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      rai_policy_name: p.child('rai_policy_name').out,
      version_upgrade_option: p.child('version_upgrade_option').out,
    },
    communication_service(name, block): {
      local p = path(['azurerm_communication_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_communication_service: {
              [name]: std.prune({
                data_location: build.template(std.get(block, 'data_location', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      data_location: p.child('data_location').out,
      id: p.child('id').out,
      name: p.child('name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_key: p.child('secondary_key').out,
      tags: p.child('tags').out,
    },
    communication_service_email_domain_association(name, block): {
      local p = path(['azurerm_communication_service_email_domain_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_communication_service_email_domain_association: {
              [name]: std.prune({
                communication_service_id: build.template(block.communication_service_id),
                email_service_domain_id: build.template(block.email_service_domain_id),
              }),
            },
          },
        },
      },
      communication_service_id: p.child('communication_service_id').out,
      email_service_domain_id: p.child('email_service_domain_id').out,
      id: p.child('id').out,
    },
    confidential_ledger(name, block): {
      local p = path(['azurerm_confidential_ledger', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_confidential_ledger: {
              [name]: std.prune({
                ledger_type: build.template(block.ledger_type),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity_service_endpoint: p.child('identity_service_endpoint').out,
      ledger_endpoint: p.child('ledger_endpoint').out,
      ledger_type: p.child('ledger_type').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    consumption_budget_management_group(name, block): {
      local p = path(['azurerm_consumption_budget_management_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_consumption_budget_management_group: {
              [name]: std.prune({
                amount: build.template(block.amount),
                management_group_id: build.template(block.management_group_id),
                name: build.template(block.name),
                time_grain: build.template(std.get(block, 'time_grain', null, true)),
              }),
            },
          },
        },
      },
      amount: p.child('amount').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      management_group_id: p.child('management_group_id').out,
      name: p.child('name').out,
      time_grain: p.child('time_grain').out,
    },
    consumption_budget_resource_group(name, block): {
      local p = path(['azurerm_consumption_budget_resource_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_consumption_budget_resource_group: {
              [name]: std.prune({
                amount: build.template(block.amount),
                name: build.template(block.name),
                resource_group_id: build.template(block.resource_group_id),
                time_grain: build.template(std.get(block, 'time_grain', null, true)),
              }),
            },
          },
        },
      },
      amount: p.child('amount').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_id: p.child('resource_group_id').out,
      time_grain: p.child('time_grain').out,
    },
    consumption_budget_subscription(name, block): {
      local p = path(['azurerm_consumption_budget_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_consumption_budget_subscription: {
              [name]: std.prune({
                amount: build.template(block.amount),
                name: build.template(block.name),
                subscription_id: build.template(block.subscription_id),
                time_grain: build.template(std.get(block, 'time_grain', null, true)),
              }),
            },
          },
        },
      },
      amount: p.child('amount').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subscription_id: p.child('subscription_id').out,
      time_grain: p.child('time_grain').out,
    },
    container_app(name, block): {
      local p = path(['azurerm_container_app', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_app: {
              [name]: std.prune({
                container_app_environment_id: build.template(block.container_app_environment_id),
                max_inactive_revisions: build.template(std.get(block, 'max_inactive_revisions', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                revision_mode: build.template(block.revision_mode),
                tags: build.template(std.get(block, 'tags', null, true)),
                workload_profile_name: build.template(std.get(block, 'workload_profile_name', null, true)),
              }),
            },
          },
        },
      },
      container_app_environment_id: p.child('container_app_environment_id').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      id: p.child('id').out,
      latest_revision_fqdn: p.child('latest_revision_fqdn').out,
      latest_revision_name: p.child('latest_revision_name').out,
      location: p.child('location').out,
      max_inactive_revisions: p.child('max_inactive_revisions').out,
      name: p.child('name').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      resource_group_name: p.child('resource_group_name').out,
      revision_mode: p.child('revision_mode').out,
      tags: p.child('tags').out,
      workload_profile_name: p.child('workload_profile_name').out,
    },
    container_app_custom_domain(name, block): {
      local p = path(['azurerm_container_app_custom_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_app_custom_domain: {
              [name]: std.prune({
                certificate_binding_type: build.template(std.get(block, 'certificate_binding_type', null, true)),
                container_app_environment_certificate_id: build.template(std.get(block, 'container_app_environment_certificate_id', null, true)),
                container_app_id: build.template(block.container_app_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      certificate_binding_type: p.child('certificate_binding_type').out,
      container_app_environment_certificate_id: p.child('container_app_environment_certificate_id').out,
      container_app_environment_managed_certificate_id: p.child('container_app_environment_managed_certificate_id').out,
      container_app_id: p.child('container_app_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    container_app_environment(name, block): {
      local p = path(['azurerm_container_app_environment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_app_environment: {
              [name]: std.prune({
                dapr_application_insights_connection_string: build.template(std.get(block, 'dapr_application_insights_connection_string', null, true)),
                infrastructure_resource_group_name: build.template(std.get(block, 'infrastructure_resource_group_name', null, true)),
                infrastructure_subnet_id: build.template(std.get(block, 'infrastructure_subnet_id', null, true)),
                internal_load_balancer_enabled: build.template(std.get(block, 'internal_load_balancer_enabled', null, true)),
                location: build.template(block.location),
                log_analytics_workspace_id: build.template(std.get(block, 'log_analytics_workspace_id', null, true)),
                mutual_tls_enabled: build.template(std.get(block, 'mutual_tls_enabled', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                zone_redundancy_enabled: build.template(std.get(block, 'zone_redundancy_enabled', null, true)),
              }),
            },
          },
        },
      },
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      dapr_application_insights_connection_string: p.child('dapr_application_insights_connection_string').out,
      default_domain: p.child('default_domain').out,
      docker_bridge_cidr: p.child('docker_bridge_cidr').out,
      id: p.child('id').out,
      infrastructure_resource_group_name: p.child('infrastructure_resource_group_name').out,
      infrastructure_subnet_id: p.child('infrastructure_subnet_id').out,
      internal_load_balancer_enabled: p.child('internal_load_balancer_enabled').out,
      location: p.child('location').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      mutual_tls_enabled: p.child('mutual_tls_enabled').out,
      name: p.child('name').out,
      platform_reserved_cidr: p.child('platform_reserved_cidr').out,
      platform_reserved_dns_ip_address: p.child('platform_reserved_dns_ip_address').out,
      resource_group_name: p.child('resource_group_name').out,
      static_ip_address: p.child('static_ip_address').out,
      tags: p.child('tags').out,
      zone_redundancy_enabled: p.child('zone_redundancy_enabled').out,
    },
    container_app_environment_certificate(name, block): {
      local p = path(['azurerm_container_app_environment_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_app_environment_certificate: {
              [name]: std.prune({
                certificate_blob_base64: build.template(block.certificate_blob_base64),
                certificate_password: build.template(block.certificate_password),
                container_app_environment_id: build.template(block.container_app_environment_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      certificate_blob_base64: p.child('certificate_blob_base64').out,
      certificate_password: p.child('certificate_password').out,
      container_app_environment_id: p.child('container_app_environment_id').out,
      expiration_date: p.child('expiration_date').out,
      id: p.child('id').out,
      issue_date: p.child('issue_date').out,
      issuer: p.child('issuer').out,
      name: p.child('name').out,
      subject_name: p.child('subject_name').out,
      tags: p.child('tags').out,
      thumbprint: p.child('thumbprint').out,
    },
    container_app_environment_custom_domain(name, block): {
      local p = path(['azurerm_container_app_environment_custom_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_app_environment_custom_domain: {
              [name]: std.prune({
                certificate_blob_base64: build.template(block.certificate_blob_base64),
                certificate_password: build.template(block.certificate_password),
                container_app_environment_id: build.template(block.container_app_environment_id),
                dns_suffix: build.template(block.dns_suffix),
              }),
            },
          },
        },
      },
      certificate_blob_base64: p.child('certificate_blob_base64').out,
      certificate_password: p.child('certificate_password').out,
      container_app_environment_id: p.child('container_app_environment_id').out,
      dns_suffix: p.child('dns_suffix').out,
      id: p.child('id').out,
    },
    container_app_environment_dapr_component(name, block): {
      local p = path(['azurerm_container_app_environment_dapr_component', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_app_environment_dapr_component: {
              [name]: std.prune({
                component_type: build.template(block.component_type),
                container_app_environment_id: build.template(block.container_app_environment_id),
                ignore_errors: build.template(std.get(block, 'ignore_errors', null, true)),
                init_timeout: build.template(std.get(block, 'init_timeout', null, true)),
                name: build.template(block.name),
                scopes: build.template(std.get(block, 'scopes', null, true)),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      component_type: p.child('component_type').out,
      container_app_environment_id: p.child('container_app_environment_id').out,
      id: p.child('id').out,
      ignore_errors: p.child('ignore_errors').out,
      init_timeout: p.child('init_timeout').out,
      name: p.child('name').out,
      scopes: p.child('scopes').out,
      version: p.child('version').out,
    },
    container_app_environment_storage(name, block): {
      local p = path(['azurerm_container_app_environment_storage', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_app_environment_storage: {
              [name]: std.prune({
                access_key: build.template(block.access_key),
                access_mode: build.template(block.access_mode),
                account_name: build.template(block.account_name),
                container_app_environment_id: build.template(block.container_app_environment_id),
                name: build.template(block.name),
                share_name: build.template(block.share_name),
              }),
            },
          },
        },
      },
      access_key: p.child('access_key').out,
      access_mode: p.child('access_mode').out,
      account_name: p.child('account_name').out,
      container_app_environment_id: p.child('container_app_environment_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      share_name: p.child('share_name').out,
    },
    container_app_job(name, block): {
      local p = path(['azurerm_container_app_job', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_app_job: {
              [name]: std.prune({
                container_app_environment_id: build.template(block.container_app_environment_id),
                location: build.template(block.location),
                name: build.template(block.name),
                replica_retry_limit: build.template(std.get(block, 'replica_retry_limit', null, true)),
                replica_timeout_in_seconds: build.template(block.replica_timeout_in_seconds),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                workload_profile_name: build.template(std.get(block, 'workload_profile_name', null, true)),
              }),
            },
          },
        },
      },
      container_app_environment_id: p.child('container_app_environment_id').out,
      event_stream_endpoint: p.child('event_stream_endpoint').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      replica_retry_limit: p.child('replica_retry_limit').out,
      replica_timeout_in_seconds: p.child('replica_timeout_in_seconds').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      workload_profile_name: p.child('workload_profile_name').out,
    },
    container_connected_registry(name, block): {
      local p = path(['azurerm_container_connected_registry', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_connected_registry: {
              [name]: std.prune({
                audit_log_enabled: build.template(std.get(block, 'audit_log_enabled', null, true)),
                client_token_ids: build.template(std.get(block, 'client_token_ids', null, true)),
                container_registry_id: build.template(block.container_registry_id),
                log_level: build.template(std.get(block, 'log_level', null, true)),
                mode: build.template(std.get(block, 'mode', null, true)),
                name: build.template(block.name),
                parent_registry_id: build.template(std.get(block, 'parent_registry_id', null, true)),
                sync_message_ttl: build.template(std.get(block, 'sync_message_ttl', null, true)),
                sync_schedule: build.template(std.get(block, 'sync_schedule', null, true)),
                sync_token_id: build.template(block.sync_token_id),
                sync_window: build.template(std.get(block, 'sync_window', null, true)),
              }),
            },
          },
        },
      },
      audit_log_enabled: p.child('audit_log_enabled').out,
      client_token_ids: p.child('client_token_ids').out,
      container_registry_id: p.child('container_registry_id').out,
      id: p.child('id').out,
      log_level: p.child('log_level').out,
      mode: p.child('mode').out,
      name: p.child('name').out,
      parent_registry_id: p.child('parent_registry_id').out,
      sync_message_ttl: p.child('sync_message_ttl').out,
      sync_schedule: p.child('sync_schedule').out,
      sync_token_id: p.child('sync_token_id').out,
      sync_window: p.child('sync_window').out,
    },
    container_group(name, block): {
      local p = path(['azurerm_container_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_group: {
              [name]: std.prune({
                dns_name_label: build.template(std.get(block, 'dns_name_label', null, true)),
                dns_name_label_reuse_policy: build.template(std.get(block, 'dns_name_label_reuse_policy', null, true)),
                ip_address_type: build.template(std.get(block, 'ip_address_type', null, true)),
                key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null, true)),
                key_vault_user_assigned_identity_id: build.template(std.get(block, 'key_vault_user_assigned_identity_id', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                os_type: build.template(block.os_type),
                priority: build.template(std.get(block, 'priority', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                restart_policy: build.template(std.get(block, 'restart_policy', null, true)),
                sku: build.template(std.get(block, 'sku', null, true)),
                subnet_ids: build.template(std.get(block, 'subnet_ids', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      dns_name_label: p.child('dns_name_label').out,
      dns_name_label_reuse_policy: p.child('dns_name_label_reuse_policy').out,
      exposed_port: p.child('exposed_port').out,
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      ip_address_type: p.child('ip_address_type').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      key_vault_user_assigned_identity_id: p.child('key_vault_user_assigned_identity_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      network_profile_id: p.child('network_profile_id').out,
      os_type: p.child('os_type').out,
      priority: p.child('priority').out,
      resource_group_name: p.child('resource_group_name').out,
      restart_policy: p.child('restart_policy').out,
      sku: p.child('sku').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    container_registry(name, block): {
      local p = path(['azurerm_container_registry', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_registry: {
              [name]: std.prune({
                admin_enabled: build.template(std.get(block, 'admin_enabled', null, true)),
                anonymous_pull_enabled: build.template(std.get(block, 'anonymous_pull_enabled', null, true)),
                data_endpoint_enabled: build.template(std.get(block, 'data_endpoint_enabled', null, true)),
                export_policy_enabled: build.template(std.get(block, 'export_policy_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                network_rule_bypass_option: build.template(std.get(block, 'network_rule_bypass_option', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                quarantine_policy_enabled: build.template(std.get(block, 'quarantine_policy_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                retention_policy_in_days: build.template(std.get(block, 'retention_policy_in_days', null, true)),
                sku: build.template(block.sku),
                tags: build.template(std.get(block, 'tags', null, true)),
                trust_policy_enabled: build.template(std.get(block, 'trust_policy_enabled', null, true)),
                zone_redundancy_enabled: build.template(std.get(block, 'zone_redundancy_enabled', null, true)),
              }),
            },
          },
        },
      },
      admin_enabled: p.child('admin_enabled').out,
      admin_password: p.child('admin_password').out,
      admin_username: p.child('admin_username').out,
      anonymous_pull_enabled: p.child('anonymous_pull_enabled').out,
      data_endpoint_enabled: p.child('data_endpoint_enabled').out,
      encryption: p.child('encryption').out,
      export_policy_enabled: p.child('export_policy_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      login_server: p.child('login_server').out,
      name: p.child('name').out,
      network_rule_bypass_option: p.child('network_rule_bypass_option').out,
      network_rule_set: p.child('network_rule_set').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      quarantine_policy_enabled: p.child('quarantine_policy_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      retention_policy_in_days: p.child('retention_policy_in_days').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      trust_policy_enabled: p.child('trust_policy_enabled').out,
      zone_redundancy_enabled: p.child('zone_redundancy_enabled').out,
    },
    container_registry_agent_pool(name, block): {
      local p = path(['azurerm_container_registry_agent_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_registry_agent_pool: {
              [name]: std.prune({
                container_registry_name: build.template(block.container_registry_name),
                instance_count: build.template(std.get(block, 'instance_count', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                tier: build.template(std.get(block, 'tier', null, true)),
                virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null, true)),
              }),
            },
          },
        },
      },
      container_registry_name: p.child('container_registry_name').out,
      id: p.child('id').out,
      instance_count: p.child('instance_count').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      tier: p.child('tier').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
    },
    container_registry_cache_rule(name, block): {
      local p = path(['azurerm_container_registry_cache_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_registry_cache_rule: {
              [name]: std.prune({
                container_registry_id: build.template(block.container_registry_id),
                credential_set_id: build.template(std.get(block, 'credential_set_id', null, true)),
                name: build.template(block.name),
                source_repo: build.template(block.source_repo),
                target_repo: build.template(block.target_repo),
              }),
            },
          },
        },
      },
      container_registry_id: p.child('container_registry_id').out,
      credential_set_id: p.child('credential_set_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      source_repo: p.child('source_repo').out,
      target_repo: p.child('target_repo').out,
    },
    container_registry_scope_map(name, block): {
      local p = path(['azurerm_container_registry_scope_map', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_registry_scope_map: {
              [name]: std.prune({
                actions: build.template(block.actions),
                container_registry_name: build.template(block.container_registry_name),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      actions: p.child('actions').out,
      container_registry_name: p.child('container_registry_name').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    container_registry_task(name, block): {
      local p = path(['azurerm_container_registry_task', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_registry_task: {
              [name]: std.prune({
                agent_pool_name: build.template(std.get(block, 'agent_pool_name', null, true)),
                container_registry_id: build.template(block.container_registry_id),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                is_system_task: build.template(std.get(block, 'is_system_task', null, true)),
                log_template: build.template(std.get(block, 'log_template', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                timeout_in_seconds: build.template(std.get(block, 'timeout_in_seconds', null, true)),
              }),
            },
          },
        },
      },
      agent_pool_name: p.child('agent_pool_name').out,
      container_registry_id: p.child('container_registry_id').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      is_system_task: p.child('is_system_task').out,
      log_template: p.child('log_template').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      timeout_in_seconds: p.child('timeout_in_seconds').out,
    },
    container_registry_task_schedule_run_now(name, block): {
      local p = path(['azurerm_container_registry_task_schedule_run_now', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_registry_task_schedule_run_now: {
              [name]: std.prune({
                container_registry_task_id: build.template(block.container_registry_task_id),
              }),
            },
          },
        },
      },
      container_registry_task_id: p.child('container_registry_task_id').out,
      id: p.child('id').out,
    },
    container_registry_token(name, block): {
      local p = path(['azurerm_container_registry_token', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_registry_token: {
              [name]: std.prune({
                container_registry_name: build.template(block.container_registry_name),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                scope_map_id: build.template(block.scope_map_id),
              }),
            },
          },
        },
      },
      container_registry_name: p.child('container_registry_name').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scope_map_id: p.child('scope_map_id').out,
    },
    container_registry_token_password(name, block): {
      local p = path(['azurerm_container_registry_token_password', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_registry_token_password: {
              [name]: std.prune({
                container_registry_token_id: build.template(block.container_registry_token_id),
              }),
            },
          },
        },
      },
      container_registry_token_id: p.child('container_registry_token_id').out,
      id: p.child('id').out,
    },
    container_registry_webhook(name, block): {
      local p = path(['azurerm_container_registry_webhook', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_container_registry_webhook: {
              [name]: std.prune({
                actions: build.template(block.actions),
                custom_headers: build.template(std.get(block, 'custom_headers', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                registry_name: build.template(block.registry_name),
                resource_group_name: build.template(block.resource_group_name),
                scope: build.template(std.get(block, 'scope', null, true)),
                service_uri: build.template(block.service_uri),
                status: build.template(std.get(block, 'status', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      actions: p.child('actions').out,
      custom_headers: p.child('custom_headers').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      registry_name: p.child('registry_name').out,
      resource_group_name: p.child('resource_group_name').out,
      scope: p.child('scope').out,
      service_uri: p.child('service_uri').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
    },
    cosmosdb_account(name, block): {
      local p = path(['azurerm_cosmosdb_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_account: {
              [name]: std.prune({
                access_key_metadata_writes_enabled: build.template(std.get(block, 'access_key_metadata_writes_enabled', null, true)),
                analytical_storage_enabled: build.template(std.get(block, 'analytical_storage_enabled', null, true)),
                automatic_failover_enabled: build.template(std.get(block, 'automatic_failover_enabled', null, true)),
                burst_capacity_enabled: build.template(std.get(block, 'burst_capacity_enabled', null, true)),
                default_identity_type: build.template(std.get(block, 'default_identity_type', null, true)),
                free_tier_enabled: build.template(std.get(block, 'free_tier_enabled', null, true)),
                ip_range_filter: build.template(std.get(block, 'ip_range_filter', null, true)),
                is_virtual_network_filter_enabled: build.template(std.get(block, 'is_virtual_network_filter_enabled', null, true)),
                key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null, true)),
                kind: build.template(std.get(block, 'kind', null, true)),
                local_authentication_disabled: build.template(std.get(block, 'local_authentication_disabled', null, true)),
                location: build.template(block.location),
                managed_hsm_key_id: build.template(std.get(block, 'managed_hsm_key_id', null, true)),
                minimal_tls_version: build.template(std.get(block, 'minimal_tls_version', null, true)),
                multiple_write_locations_enabled: build.template(std.get(block, 'multiple_write_locations_enabled', null, true)),
                name: build.template(block.name),
                network_acl_bypass_for_azure_services: build.template(std.get(block, 'network_acl_bypass_for_azure_services', null, true)),
                network_acl_bypass_ids: build.template(std.get(block, 'network_acl_bypass_ids', null, true)),
                offer_type: build.template(block.offer_type),
                partition_merge_enabled: build.template(std.get(block, 'partition_merge_enabled', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_key_metadata_writes_enabled: p.child('access_key_metadata_writes_enabled').out,
      analytical_storage_enabled: p.child('analytical_storage_enabled').out,
      automatic_failover_enabled: p.child('automatic_failover_enabled').out,
      burst_capacity_enabled: p.child('burst_capacity_enabled').out,
      create_mode: p.child('create_mode').out,
      default_identity_type: p.child('default_identity_type').out,
      endpoint: p.child('endpoint').out,
      free_tier_enabled: p.child('free_tier_enabled').out,
      id: p.child('id').out,
      ip_range_filter: p.child('ip_range_filter').out,
      is_virtual_network_filter_enabled: p.child('is_virtual_network_filter_enabled').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      kind: p.child('kind').out,
      local_authentication_disabled: p.child('local_authentication_disabled').out,
      location: p.child('location').out,
      managed_hsm_key_id: p.child('managed_hsm_key_id').out,
      minimal_tls_version: p.child('minimal_tls_version').out,
      mongo_server_version: p.child('mongo_server_version').out,
      multiple_write_locations_enabled: p.child('multiple_write_locations_enabled').out,
      name: p.child('name').out,
      network_acl_bypass_for_azure_services: p.child('network_acl_bypass_for_azure_services').out,
      network_acl_bypass_ids: p.child('network_acl_bypass_ids').out,
      offer_type: p.child('offer_type').out,
      partition_merge_enabled: p.child('partition_merge_enabled').out,
      primary_key: p.child('primary_key').out,
      primary_mongodb_connection_string: p.child('primary_mongodb_connection_string').out,
      primary_readonly_key: p.child('primary_readonly_key').out,
      primary_readonly_mongodb_connection_string: p.child('primary_readonly_mongodb_connection_string').out,
      primary_readonly_sql_connection_string: p.child('primary_readonly_sql_connection_string').out,
      primary_sql_connection_string: p.child('primary_sql_connection_string').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      read_endpoints: p.child('read_endpoints').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_key: p.child('secondary_key').out,
      secondary_mongodb_connection_string: p.child('secondary_mongodb_connection_string').out,
      secondary_readonly_key: p.child('secondary_readonly_key').out,
      secondary_readonly_mongodb_connection_string: p.child('secondary_readonly_mongodb_connection_string').out,
      secondary_readonly_sql_connection_string: p.child('secondary_readonly_sql_connection_string').out,
      secondary_sql_connection_string: p.child('secondary_sql_connection_string').out,
      tags: p.child('tags').out,
      write_endpoints: p.child('write_endpoints').out,
    },
    cosmosdb_cassandra_cluster(name, block): {
      local p = path(['azurerm_cosmosdb_cassandra_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_cassandra_cluster: {
              [name]: std.prune({
                authentication_method: build.template(std.get(block, 'authentication_method', null, true)),
                client_certificate_pems: build.template(std.get(block, 'client_certificate_pems', null, true)),
                default_admin_password: build.template(block.default_admin_password),
                delegated_management_subnet_id: build.template(block.delegated_management_subnet_id),
                external_gossip_certificate_pems: build.template(std.get(block, 'external_gossip_certificate_pems', null, true)),
                external_seed_node_ip_addresses: build.template(std.get(block, 'external_seed_node_ip_addresses', null, true)),
                hours_between_backups: build.template(std.get(block, 'hours_between_backups', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                repair_enabled: build.template(std.get(block, 'repair_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      authentication_method: p.child('authentication_method').out,
      client_certificate_pems: p.child('client_certificate_pems').out,
      default_admin_password: p.child('default_admin_password').out,
      delegated_management_subnet_id: p.child('delegated_management_subnet_id').out,
      external_gossip_certificate_pems: p.child('external_gossip_certificate_pems').out,
      external_seed_node_ip_addresses: p.child('external_seed_node_ip_addresses').out,
      hours_between_backups: p.child('hours_between_backups').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      repair_enabled: p.child('repair_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    cosmosdb_cassandra_datacenter(name, block): {
      local p = path(['azurerm_cosmosdb_cassandra_datacenter', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_cassandra_datacenter: {
              [name]: std.prune({
                availability_zones_enabled: build.template(std.get(block, 'availability_zones_enabled', null, true)),
                backup_storage_customer_key_uri: build.template(std.get(block, 'backup_storage_customer_key_uri', null, true)),
                base64_encoded_yaml_fragment: build.template(std.get(block, 'base64_encoded_yaml_fragment', null, true)),
                cassandra_cluster_id: build.template(block.cassandra_cluster_id),
                delegated_management_subnet_id: build.template(block.delegated_management_subnet_id),
                disk_count: build.template(std.get(block, 'disk_count', null, true)),
                disk_sku: build.template(std.get(block, 'disk_sku', null, true)),
                location: build.template(block.location),
                managed_disk_customer_key_uri: build.template(std.get(block, 'managed_disk_customer_key_uri', null, true)),
                name: build.template(block.name),
                node_count: build.template(std.get(block, 'node_count', null, true)),
                sku_name: build.template(std.get(block, 'sku_name', null, true)),
              }),
            },
          },
        },
      },
      availability_zones_enabled: p.child('availability_zones_enabled').out,
      backup_storage_customer_key_uri: p.child('backup_storage_customer_key_uri').out,
      base64_encoded_yaml_fragment: p.child('base64_encoded_yaml_fragment').out,
      cassandra_cluster_id: p.child('cassandra_cluster_id').out,
      delegated_management_subnet_id: p.child('delegated_management_subnet_id').out,
      disk_count: p.child('disk_count').out,
      disk_sku: p.child('disk_sku').out,
      id: p.child('id').out,
      location: p.child('location').out,
      managed_disk_customer_key_uri: p.child('managed_disk_customer_key_uri').out,
      name: p.child('name').out,
      node_count: p.child('node_count').out,
      seed_node_ip_addresses: p.child('seed_node_ip_addresses').out,
      sku_name: p.child('sku_name').out,
    },
    cosmosdb_cassandra_keyspace(name, block): {
      local p = path(['azurerm_cosmosdb_cassandra_keyspace', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_cassandra_keyspace: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      throughput: p.child('throughput').out,
    },
    cosmosdb_cassandra_table(name, block): {
      local p = path(['azurerm_cosmosdb_cassandra_table', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_cassandra_table: {
              [name]: std.prune({
                analytical_storage_ttl: build.template(std.get(block, 'analytical_storage_ttl', null, true)),
                cassandra_keyspace_id: build.template(block.cassandra_keyspace_id),
                default_ttl: build.template(std.get(block, 'default_ttl', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      analytical_storage_ttl: p.child('analytical_storage_ttl').out,
      cassandra_keyspace_id: p.child('cassandra_keyspace_id').out,
      default_ttl: p.child('default_ttl').out,
      id: p.child('id').out,
      name: p.child('name').out,
      throughput: p.child('throughput').out,
    },
    cosmosdb_gremlin_database(name, block): {
      local p = path(['azurerm_cosmosdb_gremlin_database', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_gremlin_database: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      throughput: p.child('throughput').out,
    },
    cosmosdb_gremlin_graph(name, block): {
      local p = path(['azurerm_cosmosdb_gremlin_graph', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_gremlin_graph: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                analytical_storage_ttl: build.template(std.get(block, 'analytical_storage_ttl', null, true)),
                database_name: build.template(block.database_name),
                default_ttl: build.template(std.get(block, 'default_ttl', null, true)),
                name: build.template(block.name),
                partition_key_path: build.template(block.partition_key_path),
                partition_key_version: build.template(std.get(block, 'partition_key_version', null, true)),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      analytical_storage_ttl: p.child('analytical_storage_ttl').out,
      database_name: p.child('database_name').out,
      default_ttl: p.child('default_ttl').out,
      id: p.child('id').out,
      name: p.child('name').out,
      partition_key_path: p.child('partition_key_path').out,
      partition_key_version: p.child('partition_key_version').out,
      resource_group_name: p.child('resource_group_name').out,
      throughput: p.child('throughput').out,
    },
    cosmosdb_mongo_collection(name, block): {
      local p = path(['azurerm_cosmosdb_mongo_collection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_mongo_collection: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                analytical_storage_ttl: build.template(std.get(block, 'analytical_storage_ttl', null, true)),
                database_name: build.template(block.database_name),
                default_ttl_seconds: build.template(std.get(block, 'default_ttl_seconds', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                shard_key: build.template(std.get(block, 'shard_key', null, true)),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      analytical_storage_ttl: p.child('analytical_storage_ttl').out,
      database_name: p.child('database_name').out,
      default_ttl_seconds: p.child('default_ttl_seconds').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      shard_key: p.child('shard_key').out,
      system_indexes: p.child('system_indexes').out,
      throughput: p.child('throughput').out,
    },
    cosmosdb_mongo_database(name, block): {
      local p = path(['azurerm_cosmosdb_mongo_database', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_mongo_database: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      throughput: p.child('throughput').out,
    },
    cosmosdb_mongo_role_definition(name, block): {
      local p = path(['azurerm_cosmosdb_mongo_role_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_mongo_role_definition: {
              [name]: std.prune({
                cosmos_mongo_database_id: build.template(block.cosmos_mongo_database_id),
                inherited_role_names: build.template(std.get(block, 'inherited_role_names', null, true)),
                role_name: build.template(block.role_name),
              }),
            },
          },
        },
      },
      cosmos_mongo_database_id: p.child('cosmos_mongo_database_id').out,
      id: p.child('id').out,
      inherited_role_names: p.child('inherited_role_names').out,
      role_name: p.child('role_name').out,
    },
    cosmosdb_mongo_user_definition(name, block): {
      local p = path(['azurerm_cosmosdb_mongo_user_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_mongo_user_definition: {
              [name]: std.prune({
                cosmos_mongo_database_id: build.template(block.cosmos_mongo_database_id),
                inherited_role_names: build.template(std.get(block, 'inherited_role_names', null, true)),
                password: build.template(block.password),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      cosmos_mongo_database_id: p.child('cosmos_mongo_database_id').out,
      id: p.child('id').out,
      inherited_role_names: p.child('inherited_role_names').out,
      password: p.child('password').out,
      username: p.child('username').out,
    },
    cosmosdb_postgresql_cluster(name, block): {
      local p = path(['azurerm_cosmosdb_postgresql_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_postgresql_cluster: {
              [name]: std.prune({
                administrator_login_password: build.template(std.get(block, 'administrator_login_password', null, true)),
                coordinator_public_ip_access_enabled: build.template(std.get(block, 'coordinator_public_ip_access_enabled', null, true)),
                coordinator_server_edition: build.template(std.get(block, 'coordinator_server_edition', null, true)),
                coordinator_storage_quota_in_mb: build.template(std.get(block, 'coordinator_storage_quota_in_mb', null, true)),
                coordinator_vcore_count: build.template(std.get(block, 'coordinator_vcore_count', null, true)),
                ha_enabled: build.template(std.get(block, 'ha_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                node_count: build.template(block.node_count),
                node_public_ip_access_enabled: build.template(std.get(block, 'node_public_ip_access_enabled', null, true)),
                node_server_edition: build.template(std.get(block, 'node_server_edition', null, true)),
                point_in_time_in_utc: build.template(std.get(block, 'point_in_time_in_utc', null, true)),
                preferred_primary_zone: build.template(std.get(block, 'preferred_primary_zone', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                source_location: build.template(std.get(block, 'source_location', null, true)),
                source_resource_id: build.template(std.get(block, 'source_resource_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      administrator_login_password: p.child('administrator_login_password').out,
      citus_version: p.child('citus_version').out,
      coordinator_public_ip_access_enabled: p.child('coordinator_public_ip_access_enabled').out,
      coordinator_server_edition: p.child('coordinator_server_edition').out,
      coordinator_storage_quota_in_mb: p.child('coordinator_storage_quota_in_mb').out,
      coordinator_vcore_count: p.child('coordinator_vcore_count').out,
      earliest_restore_time: p.child('earliest_restore_time').out,
      ha_enabled: p.child('ha_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      node_count: p.child('node_count').out,
      node_public_ip_access_enabled: p.child('node_public_ip_access_enabled').out,
      node_server_edition: p.child('node_server_edition').out,
      node_storage_quota_in_mb: p.child('node_storage_quota_in_mb').out,
      node_vcores: p.child('node_vcores').out,
      point_in_time_in_utc: p.child('point_in_time_in_utc').out,
      preferred_primary_zone: p.child('preferred_primary_zone').out,
      resource_group_name: p.child('resource_group_name').out,
      servers: p.child('servers').out,
      shards_on_coordinator_enabled: p.child('shards_on_coordinator_enabled').out,
      source_location: p.child('source_location').out,
      source_resource_id: p.child('source_resource_id').out,
      sql_version: p.child('sql_version').out,
      tags: p.child('tags').out,
    },
    cosmosdb_postgresql_coordinator_configuration(name, block): {
      local p = path(['azurerm_cosmosdb_postgresql_coordinator_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_postgresql_coordinator_configuration: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
                name: build.template(block.name),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      value: p.child('value').out,
    },
    cosmosdb_postgresql_firewall_rule(name, block): {
      local p = path(['azurerm_cosmosdb_postgresql_firewall_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_postgresql_firewall_rule: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
                end_ip_address: build.template(block.end_ip_address),
                name: build.template(block.name),
                start_ip_address: build.template(block.start_ip_address),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').out,
      end_ip_address: p.child('end_ip_address').out,
      id: p.child('id').out,
      name: p.child('name').out,
      start_ip_address: p.child('start_ip_address').out,
    },
    cosmosdb_postgresql_node_configuration(name, block): {
      local p = path(['azurerm_cosmosdb_postgresql_node_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_postgresql_node_configuration: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
                name: build.template(block.name),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      value: p.child('value').out,
    },
    cosmosdb_postgresql_role(name, block): {
      local p = path(['azurerm_cosmosdb_postgresql_role', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_postgresql_role: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
                name: build.template(block.name),
                password: build.template(block.password),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      password: p.child('password').out,
    },
    cosmosdb_sql_container(name, block): {
      local p = path(['azurerm_cosmosdb_sql_container', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_sql_container: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                analytical_storage_ttl: build.template(std.get(block, 'analytical_storage_ttl', null, true)),
                database_name: build.template(block.database_name),
                default_ttl: build.template(std.get(block, 'default_ttl', null, true)),
                name: build.template(block.name),
                partition_key_kind: build.template(std.get(block, 'partition_key_kind', null, true)),
                partition_key_paths: build.template(block.partition_key_paths),
                partition_key_version: build.template(std.get(block, 'partition_key_version', null, true)),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      analytical_storage_ttl: p.child('analytical_storage_ttl').out,
      database_name: p.child('database_name').out,
      default_ttl: p.child('default_ttl').out,
      id: p.child('id').out,
      name: p.child('name').out,
      partition_key_kind: p.child('partition_key_kind').out,
      partition_key_paths: p.child('partition_key_paths').out,
      partition_key_version: p.child('partition_key_version').out,
      resource_group_name: p.child('resource_group_name').out,
      throughput: p.child('throughput').out,
    },
    cosmosdb_sql_database(name, block): {
      local p = path(['azurerm_cosmosdb_sql_database', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_sql_database: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      throughput: p.child('throughput').out,
    },
    cosmosdb_sql_dedicated_gateway(name, block): {
      local p = path(['azurerm_cosmosdb_sql_dedicated_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_sql_dedicated_gateway: {
              [name]: std.prune({
                cosmosdb_account_id: build.template(block.cosmosdb_account_id),
                instance_count: build.template(block.instance_count),
                instance_size: build.template(block.instance_size),
              }),
            },
          },
        },
      },
      cosmosdb_account_id: p.child('cosmosdb_account_id').out,
      id: p.child('id').out,
      instance_count: p.child('instance_count').out,
      instance_size: p.child('instance_size').out,
    },
    cosmosdb_sql_function(name, block): {
      local p = path(['azurerm_cosmosdb_sql_function', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_sql_function: {
              [name]: std.prune({
                body: build.template(block.body),
                container_id: build.template(block.container_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      body: p.child('body').out,
      container_id: p.child('container_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    cosmosdb_sql_role_assignment(name, block): {
      local p = path(['azurerm_cosmosdb_sql_role_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_sql_role_assignment: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                principal_id: build.template(block.principal_id),
                resource_group_name: build.template(block.resource_group_name),
                role_definition_id: build.template(block.role_definition_id),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      principal_id: p.child('principal_id').out,
      resource_group_name: p.child('resource_group_name').out,
      role_definition_id: p.child('role_definition_id').out,
      scope: p.child('scope').out,
    },
    cosmosdb_sql_role_definition(name, block): {
      local p = path(['azurerm_cosmosdb_sql_role_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_sql_role_definition: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                assignable_scopes: build.template(block.assignable_scopes),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      assignable_scopes: p.child('assignable_scopes').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      role_definition_id: p.child('role_definition_id').out,
      type: p.child('type').out,
    },
    cosmosdb_sql_stored_procedure(name, block): {
      local p = path(['azurerm_cosmosdb_sql_stored_procedure', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_sql_stored_procedure: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                body: build.template(block.body),
                container_name: build.template(block.container_name),
                database_name: build.template(block.database_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      body: p.child('body').out,
      container_name: p.child('container_name').out,
      database_name: p.child('database_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    cosmosdb_sql_trigger(name, block): {
      local p = path(['azurerm_cosmosdb_sql_trigger', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_sql_trigger: {
              [name]: std.prune({
                body: build.template(block.body),
                container_id: build.template(block.container_id),
                name: build.template(block.name),
                operation: build.template(block.operation),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      body: p.child('body').out,
      container_id: p.child('container_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      operation: p.child('operation').out,
      type: p.child('type').out,
    },
    cosmosdb_table(name, block): {
      local p = path(['azurerm_cosmosdb_table', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cosmosdb_table: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      throughput: p.child('throughput').out,
    },
    cost_anomaly_alert(name, block): {
      local p = path(['azurerm_cost_anomaly_alert', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cost_anomaly_alert: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                email_addresses: build.template(block.email_addresses),
                email_subject: build.template(block.email_subject),
                message: build.template(std.get(block, 'message', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      email_addresses: p.child('email_addresses').out,
      email_subject: p.child('email_subject').out,
      id: p.child('id').out,
      message: p.child('message').out,
      name: p.child('name').out,
      subscription_id: p.child('subscription_id').out,
    },
    cost_management_scheduled_action(name, block): {
      local p = path(['azurerm_cost_management_scheduled_action', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_cost_management_scheduled_action: {
              [name]: std.prune({
                day_of_month: build.template(std.get(block, 'day_of_month', null, true)),
                days_of_week: build.template(std.get(block, 'days_of_week', null, true)),
                display_name: build.template(block.display_name),
                email_address_sender: build.template(block.email_address_sender),
                email_addresses: build.template(block.email_addresses),
                email_subject: build.template(block.email_subject),
                end_date: build.template(block.end_date),
                frequency: build.template(block.frequency),
                hour_of_day: build.template(std.get(block, 'hour_of_day', null, true)),
                message: build.template(std.get(block, 'message', null, true)),
                name: build.template(block.name),
                start_date: build.template(block.start_date),
                view_id: build.template(block.view_id),
                weeks_of_month: build.template(std.get(block, 'weeks_of_month', null, true)),
              }),
            },
          },
        },
      },
      day_of_month: p.child('day_of_month').out,
      days_of_week: p.child('days_of_week').out,
      display_name: p.child('display_name').out,
      email_address_sender: p.child('email_address_sender').out,
      email_addresses: p.child('email_addresses').out,
      email_subject: p.child('email_subject').out,
      end_date: p.child('end_date').out,
      frequency: p.child('frequency').out,
      hour_of_day: p.child('hour_of_day').out,
      id: p.child('id').out,
      message: p.child('message').out,
      name: p.child('name').out,
      start_date: p.child('start_date').out,
      view_id: p.child('view_id').out,
      weeks_of_month: p.child('weeks_of_month').out,
    },
    custom_ip_prefix(name, block): {
      local p = path(['azurerm_custom_ip_prefix', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_custom_ip_prefix: {
              [name]: std.prune({
                cidr: build.template(block.cidr),
                commissioning_enabled: build.template(std.get(block, 'commissioning_enabled', null, true)),
                internet_advertising_disabled: build.template(std.get(block, 'internet_advertising_disabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                parent_custom_ip_prefix_id: build.template(std.get(block, 'parent_custom_ip_prefix_id', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                roa_validity_end_date: build.template(std.get(block, 'roa_validity_end_date', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                wan_validation_signed_message: build.template(std.get(block, 'wan_validation_signed_message', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      cidr: p.child('cidr').out,
      commissioning_enabled: p.child('commissioning_enabled').out,
      id: p.child('id').out,
      internet_advertising_disabled: p.child('internet_advertising_disabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      parent_custom_ip_prefix_id: p.child('parent_custom_ip_prefix_id').out,
      resource_group_name: p.child('resource_group_name').out,
      roa_validity_end_date: p.child('roa_validity_end_date').out,
      tags: p.child('tags').out,
      wan_validation_signed_message: p.child('wan_validation_signed_message').out,
      zones: p.child('zones').out,
    },
    custom_provider(name, block): {
      local p = path(['azurerm_custom_provider', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_custom_provider: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    dashboard_grafana(name, block): {
      local p = path(['azurerm_dashboard_grafana', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dashboard_grafana: {
              [name]: std.prune({
                api_key_enabled: build.template(std.get(block, 'api_key_enabled', null, true)),
                auto_generated_domain_name_label_scope: build.template(std.get(block, 'auto_generated_domain_name_label_scope', null, true)),
                deterministic_outbound_ip_enabled: build.template(std.get(block, 'deterministic_outbound_ip_enabled', null, true)),
                grafana_major_version: build.template(block.grafana_major_version),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(std.get(block, 'sku', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                zone_redundancy_enabled: build.template(std.get(block, 'zone_redundancy_enabled', null, true)),
              }),
            },
          },
        },
      },
      api_key_enabled: p.child('api_key_enabled').out,
      auto_generated_domain_name_label_scope: p.child('auto_generated_domain_name_label_scope').out,
      deterministic_outbound_ip_enabled: p.child('deterministic_outbound_ip_enabled').out,
      endpoint: p.child('endpoint').out,
      grafana_major_version: p.child('grafana_major_version').out,
      grafana_version: p.child('grafana_version').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_ip: p.child('outbound_ip').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      zone_redundancy_enabled: p.child('zone_redundancy_enabled').out,
    },
    data_factory(name, block): {
      local p = path(['azurerm_data_factory', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory: {
              [name]: std.prune({
                customer_managed_key_id: build.template(std.get(block, 'customer_managed_key_id', null, true)),
                customer_managed_key_identity_id: build.template(std.get(block, 'customer_managed_key_identity_id', null, true)),
                location: build.template(block.location),
                managed_virtual_network_enabled: build.template(std.get(block, 'managed_virtual_network_enabled', null, true)),
                name: build.template(block.name),
                public_network_enabled: build.template(std.get(block, 'public_network_enabled', null, true)),
                purview_id: build.template(std.get(block, 'purview_id', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      customer_managed_key_id: p.child('customer_managed_key_id').out,
      customer_managed_key_identity_id: p.child('customer_managed_key_identity_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      managed_virtual_network_enabled: p.child('managed_virtual_network_enabled').out,
      name: p.child('name').out,
      public_network_enabled: p.child('public_network_enabled').out,
      purview_id: p.child('purview_id').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    data_factory_credential_service_principal(name, block): {
      local p = path(['azurerm_data_factory_credential_service_principal', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_credential_service_principal: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                service_principal_id: build.template(block.service_principal_id),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      service_principal_id: p.child('service_principal_id').out,
      tenant_id: p.child('tenant_id').out,
    },
    data_factory_credential_user_managed_identity(name, block): {
      local p = path(['azurerm_data_factory_credential_user_managed_identity', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_credential_user_managed_identity: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                identity_id: build.template(block.identity_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      identity_id: p.child('identity_id').out,
      name: p.child('name').out,
    },
    data_factory_custom_dataset(name, block): {
      local p = path(['azurerm_data_factory_custom_dataset', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_custom_dataset: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                schema_json: build.template(std.get(block, 'schema_json', null, true)),
                type: build.template(block.type),
                type_properties_json: build.template(block.type_properties_json),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      schema_json: p.child('schema_json').out,
      type: p.child('type').out,
      type_properties_json: p.child('type_properties_json').out,
    },
    data_factory_data_flow(name, block): {
      local p = path(['azurerm_data_factory_data_flow', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_data_flow: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                name: build.template(block.name),
                script: build.template(std.get(block, 'script', null, true)),
                script_lines: build.template(std.get(block, 'script_lines', null, true)),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      name: p.child('name').out,
      script: p.child('script').out,
      script_lines: p.child('script_lines').out,
    },
    data_factory_dataset_azure_blob(name, block): {
      local p = path(['azurerm_data_factory_dataset_azure_blob', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_dataset_azure_blob: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                dynamic_filename_enabled: build.template(std.get(block, 'dynamic_filename_enabled', null, true)),
                dynamic_path_enabled: build.template(std.get(block, 'dynamic_path_enabled', null, true)),
                filename: build.template(std.get(block, 'filename', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                linked_service_name: build.template(block.linked_service_name),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                path: build.template(std.get(block, 'path', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      dynamic_filename_enabled: p.child('dynamic_filename_enabled').out,
      dynamic_path_enabled: p.child('dynamic_path_enabled').out,
      filename: p.child('filename').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      linked_service_name: p.child('linked_service_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      path: p.child('path').out,
    },
    data_factory_dataset_azure_sql_table(name, block): {
      local p = path(['azurerm_data_factory_dataset_azure_sql_table', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_dataset_azure_sql_table: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                linked_service_id: build.template(block.linked_service_id),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                schema: build.template(std.get(block, 'schema', null, true)),
                table: build.template(std.get(block, 'table', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      linked_service_id: p.child('linked_service_id').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      schema: p.child('schema').out,
      table: p.child('table').out,
    },
    data_factory_dataset_binary(name, block): {
      local p = path(['azurerm_data_factory_dataset_binary', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_dataset_binary: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                linked_service_name: build.template(block.linked_service_name),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      linked_service_name: p.child('linked_service_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
    },
    data_factory_dataset_cosmosdb_sqlapi(name, block): {
      local p = path(['azurerm_data_factory_dataset_cosmosdb_sqlapi', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_dataset_cosmosdb_sqlapi: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                collection_name: build.template(std.get(block, 'collection_name', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                linked_service_name: build.template(block.linked_service_name),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      collection_name: p.child('collection_name').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      linked_service_name: p.child('linked_service_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
    },
    data_factory_dataset_delimited_text(name, block): {
      local p = path(['azurerm_data_factory_dataset_delimited_text', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_dataset_delimited_text: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                column_delimiter: build.template(std.get(block, 'column_delimiter', null, true)),
                compression_codec: build.template(std.get(block, 'compression_codec', null, true)),
                compression_level: build.template(std.get(block, 'compression_level', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                encoding: build.template(std.get(block, 'encoding', null, true)),
                escape_character: build.template(std.get(block, 'escape_character', null, true)),
                first_row_as_header: build.template(std.get(block, 'first_row_as_header', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                linked_service_name: build.template(block.linked_service_name),
                name: build.template(block.name),
                null_value: build.template(std.get(block, 'null_value', null, true)),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                quote_character: build.template(std.get(block, 'quote_character', null, true)),
                row_delimiter: build.template(std.get(block, 'row_delimiter', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      column_delimiter: p.child('column_delimiter').out,
      compression_codec: p.child('compression_codec').out,
      compression_level: p.child('compression_level').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      encoding: p.child('encoding').out,
      escape_character: p.child('escape_character').out,
      first_row_as_header: p.child('first_row_as_header').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      linked_service_name: p.child('linked_service_name').out,
      name: p.child('name').out,
      null_value: p.child('null_value').out,
      parameters: p.child('parameters').out,
      quote_character: p.child('quote_character').out,
      row_delimiter: p.child('row_delimiter').out,
    },
    data_factory_dataset_http(name, block): {
      local p = path(['azurerm_data_factory_dataset_http', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_dataset_http: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                linked_service_name: build.template(block.linked_service_name),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                relative_url: build.template(std.get(block, 'relative_url', null, true)),
                request_body: build.template(std.get(block, 'request_body', null, true)),
                request_method: build.template(std.get(block, 'request_method', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      linked_service_name: p.child('linked_service_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      relative_url: p.child('relative_url').out,
      request_body: p.child('request_body').out,
      request_method: p.child('request_method').out,
    },
    data_factory_dataset_json(name, block): {
      local p = path(['azurerm_data_factory_dataset_json', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_dataset_json: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                encoding: build.template(std.get(block, 'encoding', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                linked_service_name: build.template(block.linked_service_name),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      encoding: p.child('encoding').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      linked_service_name: p.child('linked_service_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
    },
    data_factory_dataset_mysql(name, block): {
      local p = path(['azurerm_data_factory_dataset_mysql', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_dataset_mysql: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                linked_service_name: build.template(block.linked_service_name),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                table_name: build.template(std.get(block, 'table_name', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      linked_service_name: p.child('linked_service_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      table_name: p.child('table_name').out,
    },
    data_factory_dataset_parquet(name, block): {
      local p = path(['azurerm_data_factory_dataset_parquet', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_dataset_parquet: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                compression_codec: build.template(std.get(block, 'compression_codec', null, true)),
                compression_level: build.template(std.get(block, 'compression_level', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                linked_service_name: build.template(block.linked_service_name),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      compression_codec: p.child('compression_codec').out,
      compression_level: p.child('compression_level').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      linked_service_name: p.child('linked_service_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
    },
    data_factory_dataset_postgresql(name, block): {
      local p = path(['azurerm_data_factory_dataset_postgresql', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_dataset_postgresql: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                linked_service_name: build.template(block.linked_service_name),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                table_name: build.template(std.get(block, 'table_name', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      linked_service_name: p.child('linked_service_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      table_name: p.child('table_name').out,
    },
    data_factory_dataset_snowflake(name, block): {
      local p = path(['azurerm_data_factory_dataset_snowflake', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_dataset_snowflake: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                linked_service_name: build.template(block.linked_service_name),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                schema_name: build.template(std.get(block, 'schema_name', null, true)),
                table_name: build.template(std.get(block, 'table_name', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      linked_service_name: p.child('linked_service_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      schema_name: p.child('schema_name').out,
      table_name: p.child('table_name').out,
    },
    data_factory_dataset_sql_server_table(name, block): {
      local p = path(['azurerm_data_factory_dataset_sql_server_table', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_dataset_sql_server_table: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                linked_service_name: build.template(block.linked_service_name),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                table_name: build.template(std.get(block, 'table_name', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      linked_service_name: p.child('linked_service_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      table_name: p.child('table_name').out,
    },
    data_factory_flowlet_data_flow(name, block): {
      local p = path(['azurerm_data_factory_flowlet_data_flow', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_flowlet_data_flow: {
              [name]: std.prune({
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                name: build.template(block.name),
                script: build.template(std.get(block, 'script', null, true)),
                script_lines: build.template(std.get(block, 'script_lines', null, true)),
              }),
            },
          },
        },
      },
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      name: p.child('name').out,
      script: p.child('script').out,
      script_lines: p.child('script_lines').out,
    },
    data_factory_integration_runtime_azure(name, block): {
      local p = path(['azurerm_data_factory_integration_runtime_azure', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_integration_runtime_azure: {
              [name]: std.prune({
                cleanup_enabled: build.template(std.get(block, 'cleanup_enabled', null, true)),
                compute_type: build.template(std.get(block, 'compute_type', null, true)),
                core_count: build.template(std.get(block, 'core_count', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                time_to_live_min: build.template(std.get(block, 'time_to_live_min', null, true)),
                virtual_network_enabled: build.template(std.get(block, 'virtual_network_enabled', null, true)),
              }),
            },
          },
        },
      },
      cleanup_enabled: p.child('cleanup_enabled').out,
      compute_type: p.child('compute_type').out,
      core_count: p.child('core_count').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      time_to_live_min: p.child('time_to_live_min').out,
      virtual_network_enabled: p.child('virtual_network_enabled').out,
    },
    data_factory_integration_runtime_azure_ssis(name, block): {
      local p = path(['azurerm_data_factory_integration_runtime_azure_ssis', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_integration_runtime_azure_ssis: {
              [name]: std.prune({
                credential_name: build.template(std.get(block, 'credential_name', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                edition: build.template(std.get(block, 'edition', null, true)),
                license_type: build.template(std.get(block, 'license_type', null, true)),
                location: build.template(block.location),
                max_parallel_executions_per_node: build.template(std.get(block, 'max_parallel_executions_per_node', null, true)),
                name: build.template(block.name),
                node_size: build.template(block.node_size),
                number_of_nodes: build.template(std.get(block, 'number_of_nodes', null, true)),
              }),
            },
          },
        },
      },
      credential_name: p.child('credential_name').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      edition: p.child('edition').out,
      id: p.child('id').out,
      license_type: p.child('license_type').out,
      location: p.child('location').out,
      max_parallel_executions_per_node: p.child('max_parallel_executions_per_node').out,
      name: p.child('name').out,
      node_size: p.child('node_size').out,
      number_of_nodes: p.child('number_of_nodes').out,
    },
    data_factory_integration_runtime_self_hosted(name, block): {
      local p = path(['azurerm_data_factory_integration_runtime_self_hosted', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_integration_runtime_self_hosted: {
              [name]: std.prune({
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                self_contained_interactive_authoring_enabled: build.template(std.get(block, 'self_contained_interactive_authoring_enabled', null, true)),
              }),
            },
          },
        },
      },
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      primary_authorization_key: p.child('primary_authorization_key').out,
      secondary_authorization_key: p.child('secondary_authorization_key').out,
      self_contained_interactive_authoring_enabled: p.child('self_contained_interactive_authoring_enabled').out,
    },
    data_factory_linked_custom_service(name, block): {
      local p = path(['azurerm_data_factory_linked_custom_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_custom_service: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                type: build.template(block.type),
                type_properties_json: build.template(block.type_properties_json),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      type: p.child('type').out,
      type_properties_json: p.child('type_properties_json').out,
    },
    data_factory_linked_service_azure_blob_storage(name, block): {
      local p = path(['azurerm_data_factory_linked_service_azure_blob_storage', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_azure_blob_storage: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                connection_string: build.template(std.get(block, 'connection_string', null, true)),
                connection_string_insecure: build.template(std.get(block, 'connection_string_insecure', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                sas_uri: build.template(std.get(block, 'sas_uri', null, true)),
                service_endpoint: build.template(std.get(block, 'service_endpoint', null, true)),
                service_principal_id: build.template(std.get(block, 'service_principal_id', null, true)),
                service_principal_key: build.template(std.get(block, 'service_principal_key', null, true)),
                storage_kind: build.template(std.get(block, 'storage_kind', null, true)),
                tenant_id: build.template(std.get(block, 'tenant_id', null, true)),
                use_managed_identity: build.template(std.get(block, 'use_managed_identity', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      connection_string: p.child('connection_string').out,
      connection_string_insecure: p.child('connection_string_insecure').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      sas_uri: p.child('sas_uri').out,
      service_endpoint: p.child('service_endpoint').out,
      service_principal_id: p.child('service_principal_id').out,
      service_principal_key: p.child('service_principal_key').out,
      storage_kind: p.child('storage_kind').out,
      tenant_id: p.child('tenant_id').out,
      use_managed_identity: p.child('use_managed_identity').out,
    },
    data_factory_linked_service_azure_databricks(name, block): {
      local p = path(['azurerm_data_factory_linked_service_azure_databricks', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_azure_databricks: {
              [name]: std.prune({
                access_token: build.template(std.get(block, 'access_token', null, true)),
                adb_domain: build.template(block.adb_domain),
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                existing_cluster_id: build.template(std.get(block, 'existing_cluster_id', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                msi_work_space_resource_id: build.template(std.get(block, 'msi_work_space_resource_id', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
              }),
            },
          },
        },
      },
      access_token: p.child('access_token').out,
      adb_domain: p.child('adb_domain').out,
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      existing_cluster_id: p.child('existing_cluster_id').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      msi_work_space_resource_id: p.child('msi_work_space_resource_id').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
    },
    data_factory_linked_service_azure_file_storage(name, block): {
      local p = path(['azurerm_data_factory_linked_service_azure_file_storage', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_azure_file_storage: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                connection_string: build.template(block.connection_string),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                file_share: build.template(std.get(block, 'file_share', null, true)),
                host: build.template(std.get(block, 'host', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                password: build.template(std.get(block, 'password', null, true)),
                user_id: build.template(std.get(block, 'user_id', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      connection_string: p.child('connection_string').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      file_share: p.child('file_share').out,
      host: p.child('host').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      password: p.child('password').out,
      user_id: p.child('user_id').out,
    },
    data_factory_linked_service_azure_function(name, block): {
      local p = path(['azurerm_data_factory_linked_service_azure_function', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_azure_function: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                key: build.template(std.get(block, 'key', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                url: build.template(block.url),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      key: p.child('key').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      url: p.child('url').out,
    },
    data_factory_linked_service_azure_search(name, block): {
      local p = path(['azurerm_data_factory_linked_service_azure_search', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_azure_search: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                search_service_key: build.template(block.search_service_key),
                url: build.template(block.url),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      encrypted_credential: p.child('encrypted_credential').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      search_service_key: p.child('search_service_key').out,
      url: p.child('url').out,
    },
    data_factory_linked_service_azure_sql_database(name, block): {
      local p = path(['azurerm_data_factory_linked_service_azure_sql_database', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_azure_sql_database: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                connection_string: build.template(std.get(block, 'connection_string', null, true)),
                credential_name: build.template(std.get(block, 'credential_name', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                service_principal_id: build.template(std.get(block, 'service_principal_id', null, true)),
                service_principal_key: build.template(std.get(block, 'service_principal_key', null, true)),
                tenant_id: build.template(std.get(block, 'tenant_id', null, true)),
                use_managed_identity: build.template(std.get(block, 'use_managed_identity', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      connection_string: p.child('connection_string').out,
      credential_name: p.child('credential_name').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      service_principal_id: p.child('service_principal_id').out,
      service_principal_key: p.child('service_principal_key').out,
      tenant_id: p.child('tenant_id').out,
      use_managed_identity: p.child('use_managed_identity').out,
    },
    data_factory_linked_service_azure_table_storage(name, block): {
      local p = path(['azurerm_data_factory_linked_service_azure_table_storage', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_azure_table_storage: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                connection_string: build.template(block.connection_string),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      connection_string: p.child('connection_string').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
    },
    data_factory_linked_service_cosmosdb(name, block): {
      local p = path(['azurerm_data_factory_linked_service_cosmosdb', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_cosmosdb: {
              [name]: std.prune({
                account_endpoint: build.template(std.get(block, 'account_endpoint', null, true)),
                account_key: build.template(std.get(block, 'account_key', null, true)),
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                connection_string: build.template(std.get(block, 'connection_string', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                database: build.template(std.get(block, 'database', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
              }),
            },
          },
        },
      },
      account_endpoint: p.child('account_endpoint').out,
      account_key: p.child('account_key').out,
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      connection_string: p.child('connection_string').out,
      data_factory_id: p.child('data_factory_id').out,
      database: p.child('database').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
    },
    data_factory_linked_service_cosmosdb_mongoapi(name, block): {
      local p = path(['azurerm_data_factory_linked_service_cosmosdb_mongoapi', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_cosmosdb_mongoapi: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                connection_string: build.template(std.get(block, 'connection_string', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                database: build.template(std.get(block, 'database', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                server_version_is_32_or_higher: build.template(std.get(block, 'server_version_is_32_or_higher', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      connection_string: p.child('connection_string').out,
      data_factory_id: p.child('data_factory_id').out,
      database: p.child('database').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      server_version_is_32_or_higher: p.child('server_version_is_32_or_higher').out,
    },
    data_factory_linked_service_data_lake_storage_gen2(name, block): {
      local p = path(['azurerm_data_factory_linked_service_data_lake_storage_gen2', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_data_lake_storage_gen2: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                service_principal_id: build.template(std.get(block, 'service_principal_id', null, true)),
                service_principal_key: build.template(std.get(block, 'service_principal_key', null, true)),
                storage_account_key: build.template(std.get(block, 'storage_account_key', null, true)),
                tenant: build.template(std.get(block, 'tenant', null, true)),
                url: build.template(block.url),
                use_managed_identity: build.template(std.get(block, 'use_managed_identity', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      service_principal_id: p.child('service_principal_id').out,
      service_principal_key: p.child('service_principal_key').out,
      storage_account_key: p.child('storage_account_key').out,
      tenant: p.child('tenant').out,
      url: p.child('url').out,
      use_managed_identity: p.child('use_managed_identity').out,
    },
    data_factory_linked_service_key_vault(name, block): {
      local p = path(['azurerm_data_factory_linked_service_key_vault', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_key_vault: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                key_vault_id: build.template(block.key_vault_id),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      key_vault_id: p.child('key_vault_id').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
    },
    data_factory_linked_service_kusto(name, block): {
      local p = path(['azurerm_data_factory_linked_service_kusto', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_kusto: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                kusto_database_name: build.template(block.kusto_database_name),
                kusto_endpoint: build.template(block.kusto_endpoint),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                service_principal_id: build.template(std.get(block, 'service_principal_id', null, true)),
                service_principal_key: build.template(std.get(block, 'service_principal_key', null, true)),
                tenant: build.template(std.get(block, 'tenant', null, true)),
                use_managed_identity: build.template(std.get(block, 'use_managed_identity', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      kusto_database_name: p.child('kusto_database_name').out,
      kusto_endpoint: p.child('kusto_endpoint').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      service_principal_id: p.child('service_principal_id').out,
      service_principal_key: p.child('service_principal_key').out,
      tenant: p.child('tenant').out,
      use_managed_identity: p.child('use_managed_identity').out,
    },
    data_factory_linked_service_mysql(name, block): {
      local p = path(['azurerm_data_factory_linked_service_mysql', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_mysql: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                connection_string: build.template(block.connection_string),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      connection_string: p.child('connection_string').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
    },
    data_factory_linked_service_odata(name, block): {
      local p = path(['azurerm_data_factory_linked_service_odata', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_odata: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                url: build.template(block.url),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      url: p.child('url').out,
    },
    data_factory_linked_service_odbc(name, block): {
      local p = path(['azurerm_data_factory_linked_service_odbc', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_odbc: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                connection_string: build.template(block.connection_string),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      connection_string: p.child('connection_string').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
    },
    data_factory_linked_service_postgresql(name, block): {
      local p = path(['azurerm_data_factory_linked_service_postgresql', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_postgresql: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                connection_string: build.template(block.connection_string),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      connection_string: p.child('connection_string').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
    },
    data_factory_linked_service_sftp(name, block): {
      local p = path(['azurerm_data_factory_linked_service_sftp', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_sftp: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                authentication_type: build.template(block.authentication_type),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                host: build.template(block.host),
                host_key_fingerprint: build.template(std.get(block, 'host_key_fingerprint', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                password: build.template(block.password),
                port: build.template(block.port),
                skip_host_key_validation: build.template(std.get(block, 'skip_host_key_validation', null, true)),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      authentication_type: p.child('authentication_type').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      host: p.child('host').out,
      host_key_fingerprint: p.child('host_key_fingerprint').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      password: p.child('password').out,
      port: p.child('port').out,
      skip_host_key_validation: p.child('skip_host_key_validation').out,
      username: p.child('username').out,
    },
    data_factory_linked_service_snowflake(name, block): {
      local p = path(['azurerm_data_factory_linked_service_snowflake', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_snowflake: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                connection_string: build.template(block.connection_string),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      connection_string: p.child('connection_string').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
    },
    data_factory_linked_service_sql_server(name, block): {
      local p = path(['azurerm_data_factory_linked_service_sql_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_sql_server: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                connection_string: build.template(std.get(block, 'connection_string', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                user_name: build.template(std.get(block, 'user_name', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      connection_string: p.child('connection_string').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      user_name: p.child('user_name').out,
    },
    data_factory_linked_service_synapse(name, block): {
      local p = path(['azurerm_data_factory_linked_service_synapse', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_synapse: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                connection_string: build.template(block.connection_string),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      connection_string: p.child('connection_string').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
    },
    data_factory_linked_service_web(name, block): {
      local p = path(['azurerm_data_factory_linked_service_web', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_linked_service_web: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                authentication_type: build.template(block.authentication_type),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                password: build.template(std.get(block, 'password', null, true)),
                url: build.template(block.url),
                username: build.template(std.get(block, 'username', null, true)),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      authentication_type: p.child('authentication_type').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_runtime_name: p.child('integration_runtime_name').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      password: p.child('password').out,
      url: p.child('url').out,
      username: p.child('username').out,
    },
    data_factory_managed_private_endpoint(name, block): {
      local p = path(['azurerm_data_factory_managed_private_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_managed_private_endpoint: {
              [name]: std.prune({
                data_factory_id: build.template(block.data_factory_id),
                name: build.template(block.name),
                subresource_name: build.template(std.get(block, 'subresource_name', null, true)),
                target_resource_id: build.template(block.target_resource_id),
              }),
            },
          },
        },
      },
      data_factory_id: p.child('data_factory_id').out,
      fqdns: p.child('fqdns').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subresource_name: p.child('subresource_name').out,
      target_resource_id: p.child('target_resource_id').out,
    },
    data_factory_pipeline(name, block): {
      local p = path(['azurerm_data_factory_pipeline', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_pipeline: {
              [name]: std.prune({
                activities_json: build.template(std.get(block, 'activities_json', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                concurrency: build.template(std.get(block, 'concurrency', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                folder: build.template(std.get(block, 'folder', null, true)),
                moniter_metrics_after_duration: build.template(std.get(block, 'moniter_metrics_after_duration', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                variables: build.template(std.get(block, 'variables', null, true)),
              }),
            },
          },
        },
      },
      activities_json: p.child('activities_json').out,
      annotations: p.child('annotations').out,
      concurrency: p.child('concurrency').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      folder: p.child('folder').out,
      id: p.child('id').out,
      moniter_metrics_after_duration: p.child('moniter_metrics_after_duration').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      variables: p.child('variables').out,
    },
    data_factory_trigger_blob_event(name, block): {
      local p = path(['azurerm_data_factory_trigger_blob_event', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_trigger_blob_event: {
              [name]: std.prune({
                activated: build.template(std.get(block, 'activated', null, true)),
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                blob_path_begins_with: build.template(std.get(block, 'blob_path_begins_with', null, true)),
                blob_path_ends_with: build.template(std.get(block, 'blob_path_ends_with', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                events: build.template(block.events),
                ignore_empty_blobs: build.template(std.get(block, 'ignore_empty_blobs', null, true)),
                name: build.template(block.name),
                storage_account_id: build.template(block.storage_account_id),
              }),
            },
          },
        },
      },
      activated: p.child('activated').out,
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      blob_path_begins_with: p.child('blob_path_begins_with').out,
      blob_path_ends_with: p.child('blob_path_ends_with').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      events: p.child('events').out,
      id: p.child('id').out,
      ignore_empty_blobs: p.child('ignore_empty_blobs').out,
      name: p.child('name').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    data_factory_trigger_custom_event(name, block): {
      local p = path(['azurerm_data_factory_trigger_custom_event', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_trigger_custom_event: {
              [name]: std.prune({
                activated: build.template(std.get(block, 'activated', null, true)),
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                eventgrid_topic_id: build.template(block.eventgrid_topic_id),
                events: build.template(block.events),
                name: build.template(block.name),
                subject_begins_with: build.template(std.get(block, 'subject_begins_with', null, true)),
                subject_ends_with: build.template(std.get(block, 'subject_ends_with', null, true)),
              }),
            },
          },
        },
      },
      activated: p.child('activated').out,
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      eventgrid_topic_id: p.child('eventgrid_topic_id').out,
      events: p.child('events').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subject_begins_with: p.child('subject_begins_with').out,
      subject_ends_with: p.child('subject_ends_with').out,
    },
    data_factory_trigger_schedule(name, block): {
      local p = path(['azurerm_data_factory_trigger_schedule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_trigger_schedule: {
              [name]: std.prune({
                activated: build.template(std.get(block, 'activated', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                description: build.template(std.get(block, 'description', null, true)),
                end_time: build.template(std.get(block, 'end_time', null, true)),
                frequency: build.template(std.get(block, 'frequency', null, true)),
                interval: build.template(std.get(block, 'interval', null, true)),
                name: build.template(block.name),
                time_zone: build.template(std.get(block, 'time_zone', null, true)),
              }),
            },
          },
        },
      },
      activated: p.child('activated').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      end_time: p.child('end_time').out,
      frequency: p.child('frequency').out,
      id: p.child('id').out,
      interval: p.child('interval').out,
      name: p.child('name').out,
      pipeline_name: p.child('pipeline_name').out,
      pipeline_parameters: p.child('pipeline_parameters').out,
      start_time: p.child('start_time').out,
      time_zone: p.child('time_zone').out,
    },
    data_factory_trigger_tumbling_window(name, block): {
      local p = path(['azurerm_data_factory_trigger_tumbling_window', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_factory_trigger_tumbling_window: {
              [name]: std.prune({
                activated: build.template(std.get(block, 'activated', null, true)),
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                data_factory_id: build.template(block.data_factory_id),
                delay: build.template(std.get(block, 'delay', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                end_time: build.template(std.get(block, 'end_time', null, true)),
                frequency: build.template(block.frequency),
                interval: build.template(block.interval),
                max_concurrency: build.template(std.get(block, 'max_concurrency', null, true)),
                name: build.template(block.name),
                start_time: build.template(block.start_time),
              }),
            },
          },
        },
      },
      activated: p.child('activated').out,
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      delay: p.child('delay').out,
      description: p.child('description').out,
      end_time: p.child('end_time').out,
      frequency: p.child('frequency').out,
      id: p.child('id').out,
      interval: p.child('interval').out,
      max_concurrency: p.child('max_concurrency').out,
      name: p.child('name').out,
      start_time: p.child('start_time').out,
    },
    data_protection_backup_instance_blob_storage(name, block): {
      local p = path(['azurerm_data_protection_backup_instance_blob_storage', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_protection_backup_instance_blob_storage: {
              [name]: std.prune({
                backup_policy_id: build.template(block.backup_policy_id),
                location: build.template(block.location),
                name: build.template(block.name),
                storage_account_container_names: build.template(std.get(block, 'storage_account_container_names', null, true)),
                storage_account_id: build.template(block.storage_account_id),
                vault_id: build.template(block.vault_id),
              }),
            },
          },
        },
      },
      backup_policy_id: p.child('backup_policy_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      storage_account_container_names: p.child('storage_account_container_names').out,
      storage_account_id: p.child('storage_account_id').out,
      vault_id: p.child('vault_id').out,
    },
    data_protection_backup_instance_disk(name, block): {
      local p = path(['azurerm_data_protection_backup_instance_disk', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_protection_backup_instance_disk: {
              [name]: std.prune({
                backup_policy_id: build.template(block.backup_policy_id),
                disk_id: build.template(block.disk_id),
                location: build.template(block.location),
                name: build.template(block.name),
                snapshot_resource_group_name: build.template(block.snapshot_resource_group_name),
                vault_id: build.template(block.vault_id),
              }),
            },
          },
        },
      },
      backup_policy_id: p.child('backup_policy_id').out,
      disk_id: p.child('disk_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      snapshot_resource_group_name: p.child('snapshot_resource_group_name').out,
      vault_id: p.child('vault_id').out,
    },
    data_protection_backup_instance_kubernetes_cluster(name, block): {
      local p = path(['azurerm_data_protection_backup_instance_kubernetes_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_protection_backup_instance_kubernetes_cluster: {
              [name]: std.prune({
                backup_policy_id: build.template(block.backup_policy_id),
                kubernetes_cluster_id: build.template(block.kubernetes_cluster_id),
                location: build.template(block.location),
                name: build.template(block.name),
                snapshot_resource_group_name: build.template(block.snapshot_resource_group_name),
                vault_id: build.template(block.vault_id),
              }),
            },
          },
        },
      },
      backup_policy_id: p.child('backup_policy_id').out,
      id: p.child('id').out,
      kubernetes_cluster_id: p.child('kubernetes_cluster_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      snapshot_resource_group_name: p.child('snapshot_resource_group_name').out,
      vault_id: p.child('vault_id').out,
    },
    data_protection_backup_instance_postgresql(name, block): {
      local p = path(['azurerm_data_protection_backup_instance_postgresql', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_protection_backup_instance_postgresql: {
              [name]: std.prune({
                backup_policy_id: build.template(block.backup_policy_id),
                database_credential_key_vault_secret_id: build.template(std.get(block, 'database_credential_key_vault_secret_id', null, true)),
                database_id: build.template(block.database_id),
                location: build.template(block.location),
                name: build.template(block.name),
                vault_id: build.template(block.vault_id),
              }),
            },
          },
        },
      },
      backup_policy_id: p.child('backup_policy_id').out,
      database_credential_key_vault_secret_id: p.child('database_credential_key_vault_secret_id').out,
      database_id: p.child('database_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      vault_id: p.child('vault_id').out,
    },
    data_protection_backup_instance_postgresql_flexible_server(name, block): {
      local p = path(['azurerm_data_protection_backup_instance_postgresql_flexible_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_protection_backup_instance_postgresql_flexible_server: {
              [name]: std.prune({
                backup_policy_id: build.template(block.backup_policy_id),
                location: build.template(block.location),
                name: build.template(block.name),
                server_id: build.template(block.server_id),
                vault_id: build.template(block.vault_id),
              }),
            },
          },
        },
      },
      backup_policy_id: p.child('backup_policy_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      server_id: p.child('server_id').out,
      vault_id: p.child('vault_id').out,
    },
    data_protection_backup_policy_blob_storage(name, block): {
      local p = path(['azurerm_data_protection_backup_policy_blob_storage', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_protection_backup_policy_blob_storage: {
              [name]: std.prune({
                backup_repeating_time_intervals: build.template(std.get(block, 'backup_repeating_time_intervals', null, true)),
                name: build.template(block.name),
                operational_default_retention_duration: build.template(std.get(block, 'operational_default_retention_duration', null, true)),
                time_zone: build.template(std.get(block, 'time_zone', null, true)),
                vault_default_retention_duration: build.template(std.get(block, 'vault_default_retention_duration', null, true)),
                vault_id: build.template(block.vault_id),
              }),
            },
          },
        },
      },
      backup_repeating_time_intervals: p.child('backup_repeating_time_intervals').out,
      id: p.child('id').out,
      name: p.child('name').out,
      operational_default_retention_duration: p.child('operational_default_retention_duration').out,
      time_zone: p.child('time_zone').out,
      vault_default_retention_duration: p.child('vault_default_retention_duration').out,
      vault_id: p.child('vault_id').out,
    },
    data_protection_backup_policy_disk(name, block): {
      local p = path(['azurerm_data_protection_backup_policy_disk', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_protection_backup_policy_disk: {
              [name]: std.prune({
                backup_repeating_time_intervals: build.template(block.backup_repeating_time_intervals),
                default_retention_duration: build.template(block.default_retention_duration),
                name: build.template(block.name),
                time_zone: build.template(std.get(block, 'time_zone', null, true)),
                vault_id: build.template(block.vault_id),
              }),
            },
          },
        },
      },
      backup_repeating_time_intervals: p.child('backup_repeating_time_intervals').out,
      default_retention_duration: p.child('default_retention_duration').out,
      id: p.child('id').out,
      name: p.child('name').out,
      time_zone: p.child('time_zone').out,
      vault_id: p.child('vault_id').out,
    },
    data_protection_backup_policy_kubernetes_cluster(name, block): {
      local p = path(['azurerm_data_protection_backup_policy_kubernetes_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_protection_backup_policy_kubernetes_cluster: {
              [name]: std.prune({
                backup_repeating_time_intervals: build.template(block.backup_repeating_time_intervals),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                time_zone: build.template(std.get(block, 'time_zone', null, true)),
                vault_name: build.template(block.vault_name),
              }),
            },
          },
        },
      },
      backup_repeating_time_intervals: p.child('backup_repeating_time_intervals').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      time_zone: p.child('time_zone').out,
      vault_name: p.child('vault_name').out,
    },
    data_protection_backup_policy_mysql_flexible_server(name, block): {
      local p = path(['azurerm_data_protection_backup_policy_mysql_flexible_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_protection_backup_policy_mysql_flexible_server: {
              [name]: std.prune({
                backup_repeating_time_intervals: build.template(block.backup_repeating_time_intervals),
                name: build.template(block.name),
                time_zone: build.template(std.get(block, 'time_zone', null, true)),
                vault_id: build.template(block.vault_id),
              }),
            },
          },
        },
      },
      backup_repeating_time_intervals: p.child('backup_repeating_time_intervals').out,
      id: p.child('id').out,
      name: p.child('name').out,
      time_zone: p.child('time_zone').out,
      vault_id: p.child('vault_id').out,
    },
    data_protection_backup_policy_postgresql(name, block): {
      local p = path(['azurerm_data_protection_backup_policy_postgresql', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_protection_backup_policy_postgresql: {
              [name]: std.prune({
                backup_repeating_time_intervals: build.template(block.backup_repeating_time_intervals),
                default_retention_duration: build.template(block.default_retention_duration),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                time_zone: build.template(std.get(block, 'time_zone', null, true)),
                vault_name: build.template(block.vault_name),
              }),
            },
          },
        },
      },
      backup_repeating_time_intervals: p.child('backup_repeating_time_intervals').out,
      default_retention_duration: p.child('default_retention_duration').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      time_zone: p.child('time_zone').out,
      vault_name: p.child('vault_name').out,
    },
    data_protection_backup_policy_postgresql_flexible_server(name, block): {
      local p = path(['azurerm_data_protection_backup_policy_postgresql_flexible_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_protection_backup_policy_postgresql_flexible_server: {
              [name]: std.prune({
                backup_repeating_time_intervals: build.template(block.backup_repeating_time_intervals),
                name: build.template(block.name),
                time_zone: build.template(std.get(block, 'time_zone', null, true)),
                vault_id: build.template(block.vault_id),
              }),
            },
          },
        },
      },
      backup_repeating_time_intervals: p.child('backup_repeating_time_intervals').out,
      id: p.child('id').out,
      name: p.child('name').out,
      time_zone: p.child('time_zone').out,
      vault_id: p.child('vault_id').out,
    },
    data_protection_backup_vault(name, block): {
      local p = path(['azurerm_data_protection_backup_vault', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_protection_backup_vault: {
              [name]: std.prune({
                cross_region_restore_enabled: build.template(std.get(block, 'cross_region_restore_enabled', null, true)),
                datastore_type: build.template(block.datastore_type),
                location: build.template(block.location),
                name: build.template(block.name),
                redundancy: build.template(block.redundancy),
                resource_group_name: build.template(block.resource_group_name),
                retention_duration_in_days: build.template(std.get(block, 'retention_duration_in_days', null, true)),
                soft_delete: build.template(std.get(block, 'soft_delete', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      cross_region_restore_enabled: p.child('cross_region_restore_enabled').out,
      datastore_type: p.child('datastore_type').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      redundancy: p.child('redundancy').out,
      resource_group_name: p.child('resource_group_name').out,
      retention_duration_in_days: p.child('retention_duration_in_days').out,
      soft_delete: p.child('soft_delete').out,
      tags: p.child('tags').out,
    },
    data_protection_resource_guard(name, block): {
      local p = path(['azurerm_data_protection_resource_guard', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_protection_resource_guard: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                vault_critical_operation_exclusion_list: build.template(std.get(block, 'vault_critical_operation_exclusion_list', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      vault_critical_operation_exclusion_list: p.child('vault_critical_operation_exclusion_list').out,
    },
    data_share(name, block): {
      local p = path(['azurerm_data_share', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_share: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
                description: build.template(std.get(block, 'description', null, true)),
                kind: build.template(block.kind),
                name: build.template(block.name),
                terms: build.template(std.get(block, 'terms', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      name: p.child('name').out,
      terms: p.child('terms').out,
    },
    data_share_account(name, block): {
      local p = path(['azurerm_data_share_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_share_account: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    data_share_dataset_blob_storage(name, block): {
      local p = path(['azurerm_data_share_dataset_blob_storage', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_share_dataset_blob_storage: {
              [name]: std.prune({
                container_name: build.template(block.container_name),
                data_share_id: build.template(block.data_share_id),
                file_path: build.template(std.get(block, 'file_path', null, true)),
                folder_path: build.template(std.get(block, 'folder_path', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      container_name: p.child('container_name').out,
      data_share_id: p.child('data_share_id').out,
      display_name: p.child('display_name').out,
      file_path: p.child('file_path').out,
      folder_path: p.child('folder_path').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    data_share_dataset_data_lake_gen2(name, block): {
      local p = path(['azurerm_data_share_dataset_data_lake_gen2', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_share_dataset_data_lake_gen2: {
              [name]: std.prune({
                file_path: build.template(std.get(block, 'file_path', null, true)),
                file_system_name: build.template(block.file_system_name),
                folder_path: build.template(std.get(block, 'folder_path', null, true)),
                name: build.template(block.name),
                share_id: build.template(block.share_id),
                storage_account_id: build.template(block.storage_account_id),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      file_path: p.child('file_path').out,
      file_system_name: p.child('file_system_name').out,
      folder_path: p.child('folder_path').out,
      id: p.child('id').out,
      name: p.child('name').out,
      share_id: p.child('share_id').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    data_share_dataset_kusto_cluster(name, block): {
      local p = path(['azurerm_data_share_dataset_kusto_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_share_dataset_kusto_cluster: {
              [name]: std.prune({
                kusto_cluster_id: build.template(block.kusto_cluster_id),
                name: build.template(block.name),
                share_id: build.template(block.share_id),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      kusto_cluster_id: p.child('kusto_cluster_id').out,
      kusto_cluster_location: p.child('kusto_cluster_location').out,
      name: p.child('name').out,
      share_id: p.child('share_id').out,
    },
    data_share_dataset_kusto_database(name, block): {
      local p = path(['azurerm_data_share_dataset_kusto_database', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_data_share_dataset_kusto_database: {
              [name]: std.prune({
                kusto_database_id: build.template(block.kusto_database_id),
                name: build.template(block.name),
                share_id: build.template(block.share_id),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      kusto_cluster_location: p.child('kusto_cluster_location').out,
      kusto_database_id: p.child('kusto_database_id').out,
      name: p.child('name').out,
      share_id: p.child('share_id').out,
    },
    database_migration_project(name, block): {
      local p = path(['azurerm_database_migration_project', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_database_migration_project: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                service_name: build.template(block.service_name),
                source_platform: build.template(block.source_platform),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_platform: build.template(block.target_platform),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      service_name: p.child('service_name').out,
      source_platform: p.child('source_platform').out,
      tags: p.child('tags').out,
      target_platform: p.child('target_platform').out,
    },
    database_migration_service(name, block): {
      local p = path(['azurerm_database_migration_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_database_migration_service: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
    },
    databox_edge_device(name, block): {
      local p = path(['azurerm_databox_edge_device', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_databox_edge_device: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      device_properties: p.child('device_properties').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    databricks_access_connector(name, block): {
      local p = path(['azurerm_databricks_access_connector', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_databricks_access_connector: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    databricks_virtual_network_peering(name, block): {
      local p = path(['azurerm_databricks_virtual_network_peering', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_databricks_virtual_network_peering: {
              [name]: std.prune({
                allow_forwarded_traffic: build.template(std.get(block, 'allow_forwarded_traffic', null, true)),
                allow_gateway_transit: build.template(std.get(block, 'allow_gateway_transit', null, true)),
                allow_virtual_network_access: build.template(std.get(block, 'allow_virtual_network_access', null, true)),
                name: build.template(block.name),
                remote_address_space_prefixes: build.template(block.remote_address_space_prefixes),
                remote_virtual_network_id: build.template(block.remote_virtual_network_id),
                resource_group_name: build.template(block.resource_group_name),
                use_remote_gateways: build.template(std.get(block, 'use_remote_gateways', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      address_space_prefixes: p.child('address_space_prefixes').out,
      allow_forwarded_traffic: p.child('allow_forwarded_traffic').out,
      allow_gateway_transit: p.child('allow_gateway_transit').out,
      allow_virtual_network_access: p.child('allow_virtual_network_access').out,
      id: p.child('id').out,
      name: p.child('name').out,
      remote_address_space_prefixes: p.child('remote_address_space_prefixes').out,
      remote_virtual_network_id: p.child('remote_virtual_network_id').out,
      resource_group_name: p.child('resource_group_name').out,
      use_remote_gateways: p.child('use_remote_gateways').out,
      virtual_network_id: p.child('virtual_network_id').out,
      workspace_id: p.child('workspace_id').out,
    },
    databricks_workspace(name, block): {
      local p = path(['azurerm_databricks_workspace', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_databricks_workspace: {
              [name]: std.prune({
                access_connector_id: build.template(std.get(block, 'access_connector_id', null, true)),
                customer_managed_key_enabled: build.template(std.get(block, 'customer_managed_key_enabled', null, true)),
                default_storage_firewall_enabled: build.template(std.get(block, 'default_storage_firewall_enabled', null, true)),
                infrastructure_encryption_enabled: build.template(std.get(block, 'infrastructure_encryption_enabled', null, true)),
                load_balancer_backend_address_pool_id: build.template(std.get(block, 'load_balancer_backend_address_pool_id', null, true)),
                location: build.template(block.location),
                managed_disk_cmk_key_vault_id: build.template(std.get(block, 'managed_disk_cmk_key_vault_id', null, true)),
                managed_disk_cmk_key_vault_key_id: build.template(std.get(block, 'managed_disk_cmk_key_vault_key_id', null, true)),
                managed_disk_cmk_rotation_to_latest_version_enabled: build.template(std.get(block, 'managed_disk_cmk_rotation_to_latest_version_enabled', null, true)),
                managed_services_cmk_key_vault_id: build.template(std.get(block, 'managed_services_cmk_key_vault_id', null, true)),
                managed_services_cmk_key_vault_key_id: build.template(std.get(block, 'managed_services_cmk_key_vault_key_id', null, true)),
                name: build.template(block.name),
                network_security_group_rules_required: build.template(std.get(block, 'network_security_group_rules_required', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_connector_id: p.child('access_connector_id').out,
      customer_managed_key_enabled: p.child('customer_managed_key_enabled').out,
      default_storage_firewall_enabled: p.child('default_storage_firewall_enabled').out,
      disk_encryption_set_id: p.child('disk_encryption_set_id').out,
      id: p.child('id').out,
      infrastructure_encryption_enabled: p.child('infrastructure_encryption_enabled').out,
      load_balancer_backend_address_pool_id: p.child('load_balancer_backend_address_pool_id').out,
      location: p.child('location').out,
      managed_disk_cmk_key_vault_id: p.child('managed_disk_cmk_key_vault_id').out,
      managed_disk_cmk_key_vault_key_id: p.child('managed_disk_cmk_key_vault_key_id').out,
      managed_disk_cmk_rotation_to_latest_version_enabled: p.child('managed_disk_cmk_rotation_to_latest_version_enabled').out,
      managed_disk_identity: p.child('managed_disk_identity').out,
      managed_resource_group_id: p.child('managed_resource_group_id').out,
      managed_resource_group_name: p.child('managed_resource_group_name').out,
      managed_services_cmk_key_vault_id: p.child('managed_services_cmk_key_vault_id').out,
      managed_services_cmk_key_vault_key_id: p.child('managed_services_cmk_key_vault_key_id').out,
      name: p.child('name').out,
      network_security_group_rules_required: p.child('network_security_group_rules_required').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      storage_account_identity: p.child('storage_account_identity').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
      workspace_url: p.child('workspace_url').out,
    },
    databricks_workspace_customer_managed_key(name, block): {
      local p = path(['azurerm_databricks_workspace_customer_managed_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_databricks_workspace_customer_managed_key: {
              [name]: std.prune({
                key_vault_key_id: build.template(block.key_vault_key_id),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      workspace_id: p.child('workspace_id').out,
    },
    databricks_workspace_root_dbfs_customer_managed_key(name, block): {
      local p = path(['azurerm_databricks_workspace_root_dbfs_customer_managed_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_databricks_workspace_root_dbfs_customer_managed_key: {
              [name]: std.prune({
                key_vault_id: build.template(std.get(block, 'key_vault_id', null, true)),
                key_vault_key_id: build.template(block.key_vault_key_id),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key_vault_id: p.child('key_vault_id').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      workspace_id: p.child('workspace_id').out,
    },
    datadog_monitor(name, block): {
      local p = path(['azurerm_datadog_monitor', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_datadog_monitor: {
              [name]: std.prune({
                location: build.template(block.location),
                monitoring_enabled: build.template(std.get(block, 'monitoring_enabled', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      marketplace_subscription_status: p.child('marketplace_subscription_status').out,
      monitoring_enabled: p.child('monitoring_enabled').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    datadog_monitor_sso_configuration(name, block): {
      local p = path(['azurerm_datadog_monitor_sso_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_datadog_monitor_sso_configuration: {
              [name]: std.prune({
                datadog_monitor_id: build.template(block.datadog_monitor_id),
                enterprise_application_id: build.template(block.enterprise_application_id),
                name: build.template(std.get(block, 'name', null, true)),
                single_sign_on_enabled: build.template(block.single_sign_on_enabled),
              }),
            },
          },
        },
      },
      datadog_monitor_id: p.child('datadog_monitor_id').out,
      enterprise_application_id: p.child('enterprise_application_id').out,
      id: p.child('id').out,
      login_url: p.child('login_url').out,
      name: p.child('name').out,
      single_sign_on_enabled: p.child('single_sign_on_enabled').out,
    },
    datadog_monitor_tag_rule(name, block): {
      local p = path(['azurerm_datadog_monitor_tag_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_datadog_monitor_tag_rule: {
              [name]: std.prune({
                datadog_monitor_id: build.template(block.datadog_monitor_id),
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      datadog_monitor_id: p.child('datadog_monitor_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    dedicated_hardware_security_module(name, block): {
      local p = path(['azurerm_dedicated_hardware_security_module', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dedicated_hardware_security_module: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                stamp_id: build.template(std.get(block, 'stamp_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      stamp_id: p.child('stamp_id').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    dedicated_host(name, block): {
      local p = path(['azurerm_dedicated_host', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dedicated_host: {
              [name]: std.prune({
                auto_replace_on_failure: build.template(std.get(block, 'auto_replace_on_failure', null, true)),
                dedicated_host_group_id: build.template(block.dedicated_host_group_id),
                license_type: build.template(std.get(block, 'license_type', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                platform_fault_domain: build.template(block.platform_fault_domain),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      auto_replace_on_failure: p.child('auto_replace_on_failure').out,
      dedicated_host_group_id: p.child('dedicated_host_group_id').out,
      id: p.child('id').out,
      license_type: p.child('license_type').out,
      location: p.child('location').out,
      name: p.child('name').out,
      platform_fault_domain: p.child('platform_fault_domain').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    dedicated_host_group(name, block): {
      local p = path(['azurerm_dedicated_host_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dedicated_host_group: {
              [name]: std.prune({
                automatic_placement_enabled: build.template(std.get(block, 'automatic_placement_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                platform_fault_domain_count: build.template(block.platform_fault_domain_count),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      automatic_placement_enabled: p.child('automatic_placement_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      platform_fault_domain_count: p.child('platform_fault_domain_count').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      zone: p.child('zone').out,
    },
    dev_center(name, block): {
      local p = path(['azurerm_dev_center', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_center: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      dev_center_uri: p.child('dev_center_uri').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    dev_center_attached_network(name, block): {
      local p = path(['azurerm_dev_center_attached_network', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_center_attached_network: {
              [name]: std.prune({
                dev_center_id: build.template(block.dev_center_id),
                name: build.template(block.name),
                network_connection_id: build.template(block.network_connection_id),
              }),
            },
          },
        },
      },
      dev_center_id: p.child('dev_center_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      network_connection_id: p.child('network_connection_id').out,
    },
    dev_center_catalog(name, block): {
      local p = path(['azurerm_dev_center_catalog', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_center_catalog: {
              [name]: std.prune({
                dev_center_id: build.template(block.dev_center_id),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      dev_center_id: p.child('dev_center_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    dev_center_dev_box_definition(name, block): {
      local p = path(['azurerm_dev_center_dev_box_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_center_dev_box_definition: {
              [name]: std.prune({
                dev_center_id: build.template(block.dev_center_id),
                image_reference_id: build.template(block.image_reference_id),
                location: build.template(block.location),
                name: build.template(block.name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      dev_center_id: p.child('dev_center_id').out,
      id: p.child('id').out,
      image_reference_id: p.child('image_reference_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    dev_center_environment_type(name, block): {
      local p = path(['azurerm_dev_center_environment_type', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_center_environment_type: {
              [name]: std.prune({
                dev_center_id: build.template(block.dev_center_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      dev_center_id: p.child('dev_center_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    dev_center_gallery(name, block): {
      local p = path(['azurerm_dev_center_gallery', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_center_gallery: {
              [name]: std.prune({
                dev_center_id: build.template(block.dev_center_id),
                name: build.template(block.name),
                shared_gallery_id: build.template(block.shared_gallery_id),
              }),
            },
          },
        },
      },
      dev_center_id: p.child('dev_center_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      shared_gallery_id: p.child('shared_gallery_id').out,
    },
    dev_center_network_connection(name, block): {
      local p = path(['azurerm_dev_center_network_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_center_network_connection: {
              [name]: std.prune({
                domain_join_type: build.template(block.domain_join_type),
                domain_name: build.template(std.get(block, 'domain_name', null, true)),
                domain_password: build.template(std.get(block, 'domain_password', null, true)),
                domain_username: build.template(std.get(block, 'domain_username', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                organization_unit: build.template(std.get(block, 'organization_unit', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      domain_join_type: p.child('domain_join_type').out,
      domain_name: p.child('domain_name').out,
      domain_password: p.child('domain_password').out,
      domain_username: p.child('domain_username').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      organization_unit: p.child('organization_unit').out,
      resource_group_name: p.child('resource_group_name').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
    },
    dev_center_project(name, block): {
      local p = path(['azurerm_dev_center_project', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_center_project: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                dev_center_id: build.template(block.dev_center_id),
                location: build.template(block.location),
                maximum_dev_boxes_per_user: build.template(std.get(block, 'maximum_dev_boxes_per_user', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      dev_center_id: p.child('dev_center_id').out,
      dev_center_uri: p.child('dev_center_uri').out,
      id: p.child('id').out,
      location: p.child('location').out,
      maximum_dev_boxes_per_user: p.child('maximum_dev_boxes_per_user').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    dev_center_project_environment_type(name, block): {
      local p = path(['azurerm_dev_center_project_environment_type', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_center_project_environment_type: {
              [name]: std.prune({
                creator_role_assignment_roles: build.template(std.get(block, 'creator_role_assignment_roles', null, true)),
                deployment_target_id: build.template(block.deployment_target_id),
                dev_center_project_id: build.template(block.dev_center_project_id),
                location: build.template(block.location),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      creator_role_assignment_roles: p.child('creator_role_assignment_roles').out,
      deployment_target_id: p.child('deployment_target_id').out,
      dev_center_project_id: p.child('dev_center_project_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    dev_center_project_pool(name, block): {
      local p = path(['azurerm_dev_center_project_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_center_project_pool: {
              [name]: std.prune({
                dev_box_definition_name: build.template(block.dev_box_definition_name),
                dev_center_attached_network_name: build.template(block.dev_center_attached_network_name),
                dev_center_project_id: build.template(block.dev_center_project_id),
                local_administrator_enabled: build.template(block.local_administrator_enabled),
                location: build.template(block.location),
                name: build.template(block.name),
                stop_on_disconnect_grace_period_minutes: build.template(std.get(block, 'stop_on_disconnect_grace_period_minutes', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      dev_box_definition_name: p.child('dev_box_definition_name').out,
      dev_center_attached_network_name: p.child('dev_center_attached_network_name').out,
      dev_center_project_id: p.child('dev_center_project_id').out,
      id: p.child('id').out,
      local_administrator_enabled: p.child('local_administrator_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      stop_on_disconnect_grace_period_minutes: p.child('stop_on_disconnect_grace_period_minutes').out,
      tags: p.child('tags').out,
    },
    dev_test_global_vm_shutdown_schedule(name, block): {
      local p = path(['azurerm_dev_test_global_vm_shutdown_schedule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_test_global_vm_shutdown_schedule: {
              [name]: std.prune({
                daily_recurrence_time: build.template(block.daily_recurrence_time),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                location: build.template(block.location),
                tags: build.template(std.get(block, 'tags', null, true)),
                timezone: build.template(block.timezone),
                virtual_machine_id: build.template(block.virtual_machine_id),
              }),
            },
          },
        },
      },
      daily_recurrence_time: p.child('daily_recurrence_time').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      tags: p.child('tags').out,
      timezone: p.child('timezone').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
    },
    dev_test_lab(name, block): {
      local p = path(['azurerm_dev_test_lab', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_test_lab: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      artifacts_storage_account_id: p.child('artifacts_storage_account_id').out,
      default_premium_storage_account_id: p.child('default_premium_storage_account_id').out,
      default_storage_account_id: p.child('default_storage_account_id').out,
      id: p.child('id').out,
      key_vault_id: p.child('key_vault_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      premium_data_disk_storage_account_id: p.child('premium_data_disk_storage_account_id').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      unique_identifier: p.child('unique_identifier').out,
    },
    dev_test_linux_virtual_machine(name, block): {
      local p = path(['azurerm_dev_test_linux_virtual_machine', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_test_linux_virtual_machine: {
              [name]: std.prune({
                allow_claim: build.template(std.get(block, 'allow_claim', null, true)),
                disallow_public_ip_address: build.template(std.get(block, 'disallow_public_ip_address', null, true)),
                lab_name: build.template(block.lab_name),
                lab_subnet_name: build.template(block.lab_subnet_name),
                lab_virtual_network_id: build.template(block.lab_virtual_network_id),
                location: build.template(block.location),
                name: build.template(block.name),
                notes: build.template(std.get(block, 'notes', null, true)),
                password: build.template(std.get(block, 'password', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                size: build.template(block.size),
                ssh_key: build.template(std.get(block, 'ssh_key', null, true)),
                storage_type: build.template(block.storage_type),
                tags: build.template(std.get(block, 'tags', null, true)),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      allow_claim: p.child('allow_claim').out,
      disallow_public_ip_address: p.child('disallow_public_ip_address').out,
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      lab_name: p.child('lab_name').out,
      lab_subnet_name: p.child('lab_subnet_name').out,
      lab_virtual_network_id: p.child('lab_virtual_network_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      notes: p.child('notes').out,
      password: p.child('password').out,
      resource_group_name: p.child('resource_group_name').out,
      size: p.child('size').out,
      ssh_key: p.child('ssh_key').out,
      storage_type: p.child('storage_type').out,
      tags: p.child('tags').out,
      unique_identifier: p.child('unique_identifier').out,
      username: p.child('username').out,
    },
    dev_test_policy(name, block): {
      local p = path(['azurerm_dev_test_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_test_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                evaluator_type: build.template(block.evaluator_type),
                fact_data: build.template(std.get(block, 'fact_data', null, true)),
                lab_name: build.template(block.lab_name),
                name: build.template(block.name),
                policy_set_name: build.template(block.policy_set_name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                threshold: build.template(block.threshold),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      evaluator_type: p.child('evaluator_type').out,
      fact_data: p.child('fact_data').out,
      id: p.child('id').out,
      lab_name: p.child('lab_name').out,
      name: p.child('name').out,
      policy_set_name: p.child('policy_set_name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      threshold: p.child('threshold').out,
    },
    dev_test_schedule(name, block): {
      local p = path(['azurerm_dev_test_schedule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_test_schedule: {
              [name]: std.prune({
                lab_name: build.template(block.lab_name),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                status: build.template(std.get(block, 'status', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                task_type: build.template(block.task_type),
                time_zone_id: build.template(block.time_zone_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      lab_name: p.child('lab_name').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      task_type: p.child('task_type').out,
      time_zone_id: p.child('time_zone_id').out,
    },
    dev_test_virtual_network(name, block): {
      local p = path(['azurerm_dev_test_virtual_network', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_test_virtual_network: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                lab_name: build.template(block.lab_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      lab_name: p.child('lab_name').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      unique_identifier: p.child('unique_identifier').out,
    },
    dev_test_windows_virtual_machine(name, block): {
      local p = path(['azurerm_dev_test_windows_virtual_machine', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dev_test_windows_virtual_machine: {
              [name]: std.prune({
                allow_claim: build.template(std.get(block, 'allow_claim', null, true)),
                disallow_public_ip_address: build.template(std.get(block, 'disallow_public_ip_address', null, true)),
                lab_name: build.template(block.lab_name),
                lab_subnet_name: build.template(block.lab_subnet_name),
                lab_virtual_network_id: build.template(block.lab_virtual_network_id),
                location: build.template(block.location),
                name: build.template(block.name),
                notes: build.template(std.get(block, 'notes', null, true)),
                password: build.template(block.password),
                resource_group_name: build.template(block.resource_group_name),
                size: build.template(block.size),
                storage_type: build.template(block.storage_type),
                tags: build.template(std.get(block, 'tags', null, true)),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      allow_claim: p.child('allow_claim').out,
      disallow_public_ip_address: p.child('disallow_public_ip_address').out,
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      lab_name: p.child('lab_name').out,
      lab_subnet_name: p.child('lab_subnet_name').out,
      lab_virtual_network_id: p.child('lab_virtual_network_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      notes: p.child('notes').out,
      password: p.child('password').out,
      resource_group_name: p.child('resource_group_name').out,
      size: p.child('size').out,
      storage_type: p.child('storage_type').out,
      tags: p.child('tags').out,
      unique_identifier: p.child('unique_identifier').out,
      username: p.child('username').out,
    },
    digital_twins_endpoint_eventgrid(name, block): {
      local p = path(['azurerm_digital_twins_endpoint_eventgrid', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_digital_twins_endpoint_eventgrid: {
              [name]: std.prune({
                dead_letter_storage_secret: build.template(std.get(block, 'dead_letter_storage_secret', null, true)),
                digital_twins_id: build.template(block.digital_twins_id),
                eventgrid_topic_endpoint: build.template(block.eventgrid_topic_endpoint),
                eventgrid_topic_primary_access_key: build.template(block.eventgrid_topic_primary_access_key),
                eventgrid_topic_secondary_access_key: build.template(block.eventgrid_topic_secondary_access_key),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      dead_letter_storage_secret: p.child('dead_letter_storage_secret').out,
      digital_twins_id: p.child('digital_twins_id').out,
      eventgrid_topic_endpoint: p.child('eventgrid_topic_endpoint').out,
      eventgrid_topic_primary_access_key: p.child('eventgrid_topic_primary_access_key').out,
      eventgrid_topic_secondary_access_key: p.child('eventgrid_topic_secondary_access_key').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    digital_twins_endpoint_eventhub(name, block): {
      local p = path(['azurerm_digital_twins_endpoint_eventhub', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_digital_twins_endpoint_eventhub: {
              [name]: std.prune({
                dead_letter_storage_secret: build.template(std.get(block, 'dead_letter_storage_secret', null, true)),
                digital_twins_id: build.template(block.digital_twins_id),
                eventhub_primary_connection_string: build.template(block.eventhub_primary_connection_string),
                eventhub_secondary_connection_string: build.template(block.eventhub_secondary_connection_string),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      dead_letter_storage_secret: p.child('dead_letter_storage_secret').out,
      digital_twins_id: p.child('digital_twins_id').out,
      eventhub_primary_connection_string: p.child('eventhub_primary_connection_string').out,
      eventhub_secondary_connection_string: p.child('eventhub_secondary_connection_string').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    digital_twins_endpoint_servicebus(name, block): {
      local p = path(['azurerm_digital_twins_endpoint_servicebus', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_digital_twins_endpoint_servicebus: {
              [name]: std.prune({
                dead_letter_storage_secret: build.template(std.get(block, 'dead_letter_storage_secret', null, true)),
                digital_twins_id: build.template(block.digital_twins_id),
                name: build.template(block.name),
                servicebus_primary_connection_string: build.template(block.servicebus_primary_connection_string),
                servicebus_secondary_connection_string: build.template(block.servicebus_secondary_connection_string),
              }),
            },
          },
        },
      },
      dead_letter_storage_secret: p.child('dead_letter_storage_secret').out,
      digital_twins_id: p.child('digital_twins_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      servicebus_primary_connection_string: p.child('servicebus_primary_connection_string').out,
      servicebus_secondary_connection_string: p.child('servicebus_secondary_connection_string').out,
    },
    digital_twins_instance(name, block): {
      local p = path(['azurerm_digital_twins_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_digital_twins_instance: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      host_name: p.child('host_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    digital_twins_time_series_database_connection(name, block): {
      local p = path(['azurerm_digital_twins_time_series_database_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_digital_twins_time_series_database_connection: {
              [name]: std.prune({
                digital_twins_id: build.template(block.digital_twins_id),
                eventhub_consumer_group_name: build.template(std.get(block, 'eventhub_consumer_group_name', null, true)),
                eventhub_name: build.template(block.eventhub_name),
                eventhub_namespace_endpoint_uri: build.template(block.eventhub_namespace_endpoint_uri),
                eventhub_namespace_id: build.template(block.eventhub_namespace_id),
                kusto_cluster_id: build.template(block.kusto_cluster_id),
                kusto_cluster_uri: build.template(block.kusto_cluster_uri),
                kusto_database_name: build.template(block.kusto_database_name),
                kusto_table_name: build.template(std.get(block, 'kusto_table_name', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      digital_twins_id: p.child('digital_twins_id').out,
      eventhub_consumer_group_name: p.child('eventhub_consumer_group_name').out,
      eventhub_name: p.child('eventhub_name').out,
      eventhub_namespace_endpoint_uri: p.child('eventhub_namespace_endpoint_uri').out,
      eventhub_namespace_id: p.child('eventhub_namespace_id').out,
      id: p.child('id').out,
      kusto_cluster_id: p.child('kusto_cluster_id').out,
      kusto_cluster_uri: p.child('kusto_cluster_uri').out,
      kusto_database_name: p.child('kusto_database_name').out,
      kusto_table_name: p.child('kusto_table_name').out,
      name: p.child('name').out,
    },
    disk_access(name, block): {
      local p = path(['azurerm_disk_access', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_disk_access: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    disk_encryption_set(name, block): {
      local p = path(['azurerm_disk_encryption_set', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_disk_encryption_set: {
              [name]: std.prune({
                auto_key_rotation_enabled: build.template(std.get(block, 'auto_key_rotation_enabled', null, true)),
                encryption_type: build.template(std.get(block, 'encryption_type', null, true)),
                federated_client_id: build.template(std.get(block, 'federated_client_id', null, true)),
                key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null, true)),
                location: build.template(block.location),
                managed_hsm_key_id: build.template(std.get(block, 'managed_hsm_key_id', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      auto_key_rotation_enabled: p.child('auto_key_rotation_enabled').out,
      encryption_type: p.child('encryption_type').out,
      federated_client_id: p.child('federated_client_id').out,
      id: p.child('id').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      key_vault_key_url: p.child('key_vault_key_url').out,
      location: p.child('location').out,
      managed_hsm_key_id: p.child('managed_hsm_key_id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    dns_a_record(name, block): {
      local p = path(['azurerm_dns_a_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dns_a_record: {
              [name]: std.prune({
                name: build.template(block.name),
                records: build.template(std.get(block, 'records', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_resource_id: build.template(std.get(block, 'target_resource_id', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      target_resource_id: p.child('target_resource_id').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_aaaa_record(name, block): {
      local p = path(['azurerm_dns_aaaa_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dns_aaaa_record: {
              [name]: std.prune({
                name: build.template(block.name),
                records: build.template(std.get(block, 'records', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_resource_id: build.template(std.get(block, 'target_resource_id', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      target_resource_id: p.child('target_resource_id').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_caa_record(name, block): {
      local p = path(['azurerm_dns_caa_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dns_caa_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_cname_record(name, block): {
      local p = path(['azurerm_dns_cname_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dns_cname_record: {
              [name]: std.prune({
                name: build.template(block.name),
                record: build.template(std.get(block, 'record', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_resource_id: build.template(std.get(block, 'target_resource_id', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      record: p.child('record').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      target_resource_id: p.child('target_resource_id').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_mx_record(name, block): {
      local p = path(['azurerm_dns_mx_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dns_mx_record: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_ns_record(name, block): {
      local p = path(['azurerm_dns_ns_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dns_ns_record: {
              [name]: std.prune({
                name: build.template(block.name),
                records: build.template(block.records),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_ptr_record(name, block): {
      local p = path(['azurerm_dns_ptr_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dns_ptr_record: {
              [name]: std.prune({
                name: build.template(block.name),
                records: build.template(block.records),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_srv_record(name, block): {
      local p = path(['azurerm_dns_srv_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dns_srv_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_txt_record(name, block): {
      local p = path(['azurerm_dns_txt_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dns_txt_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_zone(name, block): {
      local p = path(['azurerm_dns_zone', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_dns_zone: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      max_number_of_record_sets: p.child('max_number_of_record_sets').out,
      name: p.child('name').out,
      name_servers: p.child('name_servers').out,
      number_of_record_sets: p.child('number_of_record_sets').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    elastic_cloud_elasticsearch(name, block): {
      local p = path(['azurerm_elastic_cloud_elasticsearch', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_elastic_cloud_elasticsearch: {
              [name]: std.prune({
                elastic_cloud_email_address: build.template(block.elastic_cloud_email_address),
                location: build.template(block.location),
                monitoring_enabled: build.template(std.get(block, 'monitoring_enabled', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      elastic_cloud_deployment_id: p.child('elastic_cloud_deployment_id').out,
      elastic_cloud_email_address: p.child('elastic_cloud_email_address').out,
      elastic_cloud_sso_default_url: p.child('elastic_cloud_sso_default_url').out,
      elastic_cloud_user_id: p.child('elastic_cloud_user_id').out,
      elasticsearch_service_url: p.child('elasticsearch_service_url').out,
      id: p.child('id').out,
      kibana_service_url: p.child('kibana_service_url').out,
      kibana_sso_uri: p.child('kibana_sso_uri').out,
      location: p.child('location').out,
      monitoring_enabled: p.child('monitoring_enabled').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    elastic_san(name, block): {
      local p = path(['azurerm_elastic_san', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_elastic_san: {
              [name]: std.prune({
                base_size_in_tib: build.template(block.base_size_in_tib),
                extended_size_in_tib: build.template(std.get(block, 'extended_size_in_tib', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      base_size_in_tib: p.child('base_size_in_tib').out,
      extended_size_in_tib: p.child('extended_size_in_tib').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      total_iops: p.child('total_iops').out,
      total_mbps: p.child('total_mbps').out,
      total_size_in_tib: p.child('total_size_in_tib').out,
      total_volume_size_in_gib: p.child('total_volume_size_in_gib').out,
      volume_group_count: p.child('volume_group_count').out,
      zones: p.child('zones').out,
    },
    elastic_san_volume(name, block): {
      local p = path(['azurerm_elastic_san_volume', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_elastic_san_volume: {
              [name]: std.prune({
                name: build.template(block.name),
                size_in_gib: build.template(block.size_in_gib),
                volume_group_id: build.template(block.volume_group_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      size_in_gib: p.child('size_in_gib').out,
      target_iqn: p.child('target_iqn').out,
      target_portal_hostname: p.child('target_portal_hostname').out,
      target_portal_port: p.child('target_portal_port').out,
      volume_group_id: p.child('volume_group_id').out,
      volume_id: p.child('volume_id').out,
    },
    elastic_san_volume_group(name, block): {
      local p = path(['azurerm_elastic_san_volume_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_elastic_san_volume_group: {
              [name]: std.prune({
                elastic_san_id: build.template(block.elastic_san_id),
                encryption_type: build.template(std.get(block, 'encryption_type', null, true)),
                name: build.template(block.name),
                protocol_type: build.template(std.get(block, 'protocol_type', null, true)),
              }),
            },
          },
        },
      },
      elastic_san_id: p.child('elastic_san_id').out,
      encryption_type: p.child('encryption_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      protocol_type: p.child('protocol_type').out,
    },
    email_communication_service(name, block): {
      local p = path(['azurerm_email_communication_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_email_communication_service: {
              [name]: std.prune({
                data_location: build.template(block.data_location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      data_location: p.child('data_location').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    email_communication_service_domain(name, block): {
      local p = path(['azurerm_email_communication_service_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_email_communication_service_domain: {
              [name]: std.prune({
                domain_management: build.template(block.domain_management),
                email_service_id: build.template(block.email_service_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_engagement_tracking_enabled: build.template(std.get(block, 'user_engagement_tracking_enabled', null, true)),
              }),
            },
          },
        },
      },
      domain_management: p.child('domain_management').out,
      email_service_id: p.child('email_service_id').out,
      from_sender_domain: p.child('from_sender_domain').out,
      id: p.child('id').out,
      mail_from_sender_domain: p.child('mail_from_sender_domain').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      user_engagement_tracking_enabled: p.child('user_engagement_tracking_enabled').out,
      verification_records: p.child('verification_records').out,
    },
    eventgrid_domain(name, block): {
      local p = path(['azurerm_eventgrid_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventgrid_domain: {
              [name]: std.prune({
                auto_create_topic_with_first_subscription: build.template(std.get(block, 'auto_create_topic_with_first_subscription', null, true)),
                auto_delete_topic_with_last_subscription: build.template(std.get(block, 'auto_delete_topic_with_last_subscription', null, true)),
                inbound_ip_rule: build.template(std.get(block, 'inbound_ip_rule', null, true)),
                input_schema: build.template(std.get(block, 'input_schema', null, true)),
                local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      auto_create_topic_with_first_subscription: p.child('auto_create_topic_with_first_subscription').out,
      auto_delete_topic_with_last_subscription: p.child('auto_delete_topic_with_last_subscription').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      inbound_ip_rule: p.child('inbound_ip_rule').out,
      input_schema: p.child('input_schema').out,
      local_auth_enabled: p.child('local_auth_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_access_key: p.child('primary_access_key').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      tags: p.child('tags').out,
    },
    eventgrid_domain_topic(name, block): {
      local p = path(['azurerm_eventgrid_domain_topic', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventgrid_domain_topic: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    eventgrid_event_subscription(name, block): {
      local p = path(['azurerm_eventgrid_event_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventgrid_event_subscription: {
              [name]: std.prune({
                advanced_filtering_on_arrays_enabled: build.template(std.get(block, 'advanced_filtering_on_arrays_enabled', null, true)),
                event_delivery_schema: build.template(std.get(block, 'event_delivery_schema', null, true)),
                expiration_time_utc: build.template(std.get(block, 'expiration_time_utc', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                scope: build.template(block.scope),
                service_bus_queue_endpoint_id: build.template(std.get(block, 'service_bus_queue_endpoint_id', null, true)),
                service_bus_topic_endpoint_id: build.template(std.get(block, 'service_bus_topic_endpoint_id', null, true)),
              }),
            },
          },
        },
      },
      advanced_filtering_on_arrays_enabled: p.child('advanced_filtering_on_arrays_enabled').out,
      event_delivery_schema: p.child('event_delivery_schema').out,
      eventhub_endpoint_id: p.child('eventhub_endpoint_id').out,
      expiration_time_utc: p.child('expiration_time_utc').out,
      hybrid_connection_endpoint_id: p.child('hybrid_connection_endpoint_id').out,
      id: p.child('id').out,
      included_event_types: p.child('included_event_types').out,
      labels: p.child('labels').out,
      name: p.child('name').out,
      scope: p.child('scope').out,
      service_bus_queue_endpoint_id: p.child('service_bus_queue_endpoint_id').out,
      service_bus_topic_endpoint_id: p.child('service_bus_topic_endpoint_id').out,
    },
    eventgrid_system_topic(name, block): {
      local p = path(['azurerm_eventgrid_system_topic', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventgrid_system_topic: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                source_arm_resource_id: build.template(block.source_arm_resource_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                topic_type: build.template(block.topic_type),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      metric_arm_resource_id: p.child('metric_arm_resource_id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      source_arm_resource_id: p.child('source_arm_resource_id').out,
      tags: p.child('tags').out,
      topic_type: p.child('topic_type').out,
    },
    eventgrid_system_topic_event_subscription(name, block): {
      local p = path(['azurerm_eventgrid_system_topic_event_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventgrid_system_topic_event_subscription: {
              [name]: std.prune({
                advanced_filtering_on_arrays_enabled: build.template(std.get(block, 'advanced_filtering_on_arrays_enabled', null, true)),
                event_delivery_schema: build.template(std.get(block, 'event_delivery_schema', null, true)),
                expiration_time_utc: build.template(std.get(block, 'expiration_time_utc', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                service_bus_queue_endpoint_id: build.template(std.get(block, 'service_bus_queue_endpoint_id', null, true)),
                service_bus_topic_endpoint_id: build.template(std.get(block, 'service_bus_topic_endpoint_id', null, true)),
                system_topic: build.template(block.system_topic),
              }),
            },
          },
        },
      },
      advanced_filtering_on_arrays_enabled: p.child('advanced_filtering_on_arrays_enabled').out,
      event_delivery_schema: p.child('event_delivery_schema').out,
      eventhub_endpoint_id: p.child('eventhub_endpoint_id').out,
      expiration_time_utc: p.child('expiration_time_utc').out,
      hybrid_connection_endpoint_id: p.child('hybrid_connection_endpoint_id').out,
      id: p.child('id').out,
      included_event_types: p.child('included_event_types').out,
      labels: p.child('labels').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      service_bus_queue_endpoint_id: p.child('service_bus_queue_endpoint_id').out,
      service_bus_topic_endpoint_id: p.child('service_bus_topic_endpoint_id').out,
      system_topic: p.child('system_topic').out,
    },
    eventgrid_topic(name, block): {
      local p = path(['azurerm_eventgrid_topic', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventgrid_topic: {
              [name]: std.prune({
                inbound_ip_rule: build.template(std.get(block, 'inbound_ip_rule', null, true)),
                input_schema: build.template(std.get(block, 'input_schema', null, true)),
                local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      inbound_ip_rule: p.child('inbound_ip_rule').out,
      input_schema: p.child('input_schema').out,
      local_auth_enabled: p.child('local_auth_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_access_key: p.child('primary_access_key').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      tags: p.child('tags').out,
    },
    eventhub(name, block): {
      local p = path(['azurerm_eventhub', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventhub: {
              [name]: std.prune({
                message_retention: build.template(block.message_retention),
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                partition_count: build.template(block.partition_count),
                resource_group_name: build.template(block.resource_group_name),
                status: build.template(std.get(block, 'status', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      message_retention: p.child('message_retention').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      partition_count: p.child('partition_count').out,
      partition_ids: p.child('partition_ids').out,
      resource_group_name: p.child('resource_group_name').out,
      status: p.child('status').out,
    },
    eventhub_authorization_rule(name, block): {
      local p = path(['azurerm_eventhub_authorization_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventhub_authorization_rule: {
              [name]: std.prune({
                eventhub_name: build.template(block.eventhub_name),
                listen: build.template(std.get(block, 'listen', null, true)),
                manage: build.template(std.get(block, 'manage', null, true)),
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                resource_group_name: build.template(block.resource_group_name),
                send: build.template(std.get(block, 'send', null, true)),
              }),
            },
          },
        },
      },
      eventhub_name: p.child('eventhub_name').out,
      id: p.child('id').out,
      listen: p.child('listen').out,
      manage: p.child('manage').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_connection_string_alias: p.child('primary_connection_string_alias').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_connection_string_alias: p.child('secondary_connection_string_alias').out,
      secondary_key: p.child('secondary_key').out,
      send: p.child('send').out,
    },
    eventhub_cluster(name, block): {
      local p = path(['azurerm_eventhub_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventhub_cluster: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    eventhub_consumer_group(name, block): {
      local p = path(['azurerm_eventhub_consumer_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventhub_consumer_group: {
              [name]: std.prune({
                eventhub_name: build.template(block.eventhub_name),
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                resource_group_name: build.template(block.resource_group_name),
                user_metadata: build.template(std.get(block, 'user_metadata', null, true)),
              }),
            },
          },
        },
      },
      eventhub_name: p.child('eventhub_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      resource_group_name: p.child('resource_group_name').out,
      user_metadata: p.child('user_metadata').out,
    },
    eventhub_namespace(name, block): {
      local p = path(['azurerm_eventhub_namespace', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventhub_namespace: {
              [name]: std.prune({
                auto_inflate_enabled: build.template(std.get(block, 'auto_inflate_enabled', null, true)),
                capacity: build.template(std.get(block, 'capacity', null, true)),
                dedicated_cluster_id: build.template(std.get(block, 'dedicated_cluster_id', null, true)),
                local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null, true)),
                location: build.template(block.location),
                maximum_throughput_units: build.template(std.get(block, 'maximum_throughput_units', null, true)),
                minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null, true)),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      auto_inflate_enabled: p.child('auto_inflate_enabled').out,
      capacity: p.child('capacity').out,
      dedicated_cluster_id: p.child('dedicated_cluster_id').out,
      default_primary_connection_string: p.child('default_primary_connection_string').out,
      default_primary_connection_string_alias: p.child('default_primary_connection_string_alias').out,
      default_primary_key: p.child('default_primary_key').out,
      default_secondary_connection_string: p.child('default_secondary_connection_string').out,
      default_secondary_connection_string_alias: p.child('default_secondary_connection_string_alias').out,
      default_secondary_key: p.child('default_secondary_key').out,
      id: p.child('id').out,
      local_authentication_enabled: p.child('local_authentication_enabled').out,
      location: p.child('location').out,
      maximum_throughput_units: p.child('maximum_throughput_units').out,
      minimum_tls_version: p.child('minimum_tls_version').out,
      name: p.child('name').out,
      network_rulesets: p.child('network_rulesets').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    eventhub_namespace_authorization_rule(name, block): {
      local p = path(['azurerm_eventhub_namespace_authorization_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventhub_namespace_authorization_rule: {
              [name]: std.prune({
                listen: build.template(std.get(block, 'listen', null, true)),
                manage: build.template(std.get(block, 'manage', null, true)),
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                resource_group_name: build.template(block.resource_group_name),
                send: build.template(std.get(block, 'send', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      listen: p.child('listen').out,
      manage: p.child('manage').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_connection_string_alias: p.child('primary_connection_string_alias').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_connection_string_alias: p.child('secondary_connection_string_alias').out,
      secondary_key: p.child('secondary_key').out,
      send: p.child('send').out,
    },
    eventhub_namespace_customer_managed_key(name, block): {
      local p = path(['azurerm_eventhub_namespace_customer_managed_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventhub_namespace_customer_managed_key: {
              [name]: std.prune({
                eventhub_namespace_id: build.template(block.eventhub_namespace_id),
                infrastructure_encryption_enabled: build.template(std.get(block, 'infrastructure_encryption_enabled', null, true)),
                key_vault_key_ids: build.template(block.key_vault_key_ids),
                user_assigned_identity_id: build.template(std.get(block, 'user_assigned_identity_id', null, true)),
              }),
            },
          },
        },
      },
      eventhub_namespace_id: p.child('eventhub_namespace_id').out,
      id: p.child('id').out,
      infrastructure_encryption_enabled: p.child('infrastructure_encryption_enabled').out,
      key_vault_key_ids: p.child('key_vault_key_ids').out,
      user_assigned_identity_id: p.child('user_assigned_identity_id').out,
    },
    eventhub_namespace_disaster_recovery_config(name, block): {
      local p = path(['azurerm_eventhub_namespace_disaster_recovery_config', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventhub_namespace_disaster_recovery_config: {
              [name]: std.prune({
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                partner_namespace_id: build.template(block.partner_namespace_id),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      partner_namespace_id: p.child('partner_namespace_id').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    eventhub_namespace_schema_group(name, block): {
      local p = path(['azurerm_eventhub_namespace_schema_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_eventhub_namespace_schema_group: {
              [name]: std.prune({
                name: build.template(block.name),
                namespace_id: build.template(block.namespace_id),
                schema_compatibility: build.template(block.schema_compatibility),
                schema_type: build.template(block.schema_type),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      namespace_id: p.child('namespace_id').out,
      schema_compatibility: p.child('schema_compatibility').out,
      schema_type: p.child('schema_type').out,
    },
    express_route_circuit(name, block): {
      local p = path(['azurerm_express_route_circuit', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_express_route_circuit: {
              [name]: std.prune({
                allow_classic_operations: build.template(std.get(block, 'allow_classic_operations', null, true)),
                authorization_key: build.template(std.get(block, 'authorization_key', null, true)),
                bandwidth_in_gbps: build.template(std.get(block, 'bandwidth_in_gbps', null, true)),
                bandwidth_in_mbps: build.template(std.get(block, 'bandwidth_in_mbps', null, true)),
                express_route_port_id: build.template(std.get(block, 'express_route_port_id', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                peering_location: build.template(std.get(block, 'peering_location', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                service_provider_name: build.template(std.get(block, 'service_provider_name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allow_classic_operations: p.child('allow_classic_operations').out,
      authorization_key: p.child('authorization_key').out,
      bandwidth_in_gbps: p.child('bandwidth_in_gbps').out,
      bandwidth_in_mbps: p.child('bandwidth_in_mbps').out,
      express_route_port_id: p.child('express_route_port_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      peering_location: p.child('peering_location').out,
      resource_group_name: p.child('resource_group_name').out,
      service_key: p.child('service_key').out,
      service_provider_name: p.child('service_provider_name').out,
      service_provider_provisioning_state: p.child('service_provider_provisioning_state').out,
      tags: p.child('tags').out,
    },
    express_route_circuit_authorization(name, block): {
      local p = path(['azurerm_express_route_circuit_authorization', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_express_route_circuit_authorization: {
              [name]: std.prune({
                express_route_circuit_name: build.template(block.express_route_circuit_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      authorization_key: p.child('authorization_key').out,
      authorization_use_status: p.child('authorization_use_status').out,
      express_route_circuit_name: p.child('express_route_circuit_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    express_route_circuit_connection(name, block): {
      local p = path(['azurerm_express_route_circuit_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_express_route_circuit_connection: {
              [name]: std.prune({
                address_prefix_ipv4: build.template(block.address_prefix_ipv4),
                address_prefix_ipv6: build.template(std.get(block, 'address_prefix_ipv6', null, true)),
                authorization_key: build.template(std.get(block, 'authorization_key', null, true)),
                name: build.template(block.name),
                peer_peering_id: build.template(block.peer_peering_id),
                peering_id: build.template(block.peering_id),
              }),
            },
          },
        },
      },
      address_prefix_ipv4: p.child('address_prefix_ipv4').out,
      address_prefix_ipv6: p.child('address_prefix_ipv6').out,
      authorization_key: p.child('authorization_key').out,
      id: p.child('id').out,
      name: p.child('name').out,
      peer_peering_id: p.child('peer_peering_id').out,
      peering_id: p.child('peering_id').out,
    },
    express_route_circuit_peering(name, block): {
      local p = path(['azurerm_express_route_circuit_peering', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_express_route_circuit_peering: {
              [name]: std.prune({
                express_route_circuit_name: build.template(block.express_route_circuit_name),
                ipv4_enabled: build.template(std.get(block, 'ipv4_enabled', null, true)),
                peering_type: build.template(block.peering_type),
                primary_peer_address_prefix: build.template(std.get(block, 'primary_peer_address_prefix', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                route_filter_id: build.template(std.get(block, 'route_filter_id', null, true)),
                secondary_peer_address_prefix: build.template(std.get(block, 'secondary_peer_address_prefix', null, true)),
                shared_key: build.template(std.get(block, 'shared_key', null, true)),
                vlan_id: build.template(block.vlan_id),
              }),
            },
          },
        },
      },
      azure_asn: p.child('azure_asn').out,
      express_route_circuit_name: p.child('express_route_circuit_name').out,
      gateway_manager_etag: p.child('gateway_manager_etag').out,
      id: p.child('id').out,
      ipv4_enabled: p.child('ipv4_enabled').out,
      peer_asn: p.child('peer_asn').out,
      peering_type: p.child('peering_type').out,
      primary_azure_port: p.child('primary_azure_port').out,
      primary_peer_address_prefix: p.child('primary_peer_address_prefix').out,
      resource_group_name: p.child('resource_group_name').out,
      route_filter_id: p.child('route_filter_id').out,
      secondary_azure_port: p.child('secondary_azure_port').out,
      secondary_peer_address_prefix: p.child('secondary_peer_address_prefix').out,
      shared_key: p.child('shared_key').out,
      vlan_id: p.child('vlan_id').out,
    },
    express_route_connection(name, block): {
      local p = path(['azurerm_express_route_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_express_route_connection: {
              [name]: std.prune({
                authorization_key: build.template(std.get(block, 'authorization_key', null, true)),
                enable_internet_security: build.template(std.get(block, 'enable_internet_security', null, true)),
                express_route_circuit_peering_id: build.template(block.express_route_circuit_peering_id),
                express_route_gateway_bypass_enabled: build.template(std.get(block, 'express_route_gateway_bypass_enabled', null, true)),
                express_route_gateway_id: build.template(block.express_route_gateway_id),
                name: build.template(block.name),
                private_link_fast_path_enabled: build.template(std.get(block, 'private_link_fast_path_enabled', null, true)),
                routing_weight: build.template(std.get(block, 'routing_weight', null, true)),
              }),
            },
          },
        },
      },
      authorization_key: p.child('authorization_key').out,
      enable_internet_security: p.child('enable_internet_security').out,
      express_route_circuit_peering_id: p.child('express_route_circuit_peering_id').out,
      express_route_gateway_bypass_enabled: p.child('express_route_gateway_bypass_enabled').out,
      express_route_gateway_id: p.child('express_route_gateway_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      private_link_fast_path_enabled: p.child('private_link_fast_path_enabled').out,
      routing_weight: p.child('routing_weight').out,
    },
    express_route_gateway(name, block): {
      local p = path(['azurerm_express_route_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_express_route_gateway: {
              [name]: std.prune({
                allow_non_virtual_wan_traffic: build.template(std.get(block, 'allow_non_virtual_wan_traffic', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                scale_units: build.template(block.scale_units),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_hub_id: build.template(block.virtual_hub_id),
              }),
            },
          },
        },
      },
      allow_non_virtual_wan_traffic: p.child('allow_non_virtual_wan_traffic').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scale_units: p.child('scale_units').out,
      tags: p.child('tags').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
    },
    express_route_port(name, block): {
      local p = path(['azurerm_express_route_port', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_express_route_port: {
              [name]: std.prune({
                bandwidth_in_gbps: build.template(block.bandwidth_in_gbps),
                billing_type: build.template(std.get(block, 'billing_type', null, true)),
                encapsulation: build.template(block.encapsulation),
                location: build.template(block.location),
                name: build.template(block.name),
                peering_location: build.template(block.peering_location),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      bandwidth_in_gbps: p.child('bandwidth_in_gbps').out,
      billing_type: p.child('billing_type').out,
      encapsulation: p.child('encapsulation').out,
      ethertype: p.child('ethertype').out,
      guid: p.child('guid').out,
      id: p.child('id').out,
      location: p.child('location').out,
      mtu: p.child('mtu').out,
      name: p.child('name').out,
      peering_location: p.child('peering_location').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    express_route_port_authorization(name, block): {
      local p = path(['azurerm_express_route_port_authorization', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_express_route_port_authorization: {
              [name]: std.prune({
                express_route_port_name: build.template(block.express_route_port_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      authorization_key: p.child('authorization_key').out,
      authorization_use_status: p.child('authorization_use_status').out,
      express_route_port_name: p.child('express_route_port_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    extended_custom_location(name, block): {
      local p = path(['azurerm_extended_custom_location', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_extended_custom_location: {
              [name]: std.prune({
                cluster_extension_ids: build.template(block.cluster_extension_ids),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                host_resource_id: build.template(block.host_resource_id),
                host_type: build.template(std.get(block, 'host_type', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                namespace: build.template(block.namespace),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      cluster_extension_ids: p.child('cluster_extension_ids').out,
      display_name: p.child('display_name').out,
      host_resource_id: p.child('host_resource_id').out,
      host_type: p.child('host_type').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      namespace: p.child('namespace').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    federated_identity_credential(name, block): {
      local p = path(['azurerm_federated_identity_credential', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_federated_identity_credential: {
              [name]: std.prune({
                audience: build.template(block.audience),
                issuer: build.template(block.issuer),
                name: build.template(block.name),
                parent_id: build.template(block.parent_id),
                resource_group_name: build.template(block.resource_group_name),
                subject: build.template(block.subject),
              }),
            },
          },
        },
      },
      audience: p.child('audience').out,
      id: p.child('id').out,
      issuer: p.child('issuer').out,
      name: p.child('name').out,
      parent_id: p.child('parent_id').out,
      resource_group_name: p.child('resource_group_name').out,
      subject: p.child('subject').out,
    },
    firewall(name, block): {
      local p = path(['azurerm_firewall', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_firewall: {
              [name]: std.prune({
                dns_servers: build.template(std.get(block, 'dns_servers', null, true)),
                firewall_policy_id: build.template(std.get(block, 'firewall_policy_id', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                private_ip_ranges: build.template(std.get(block, 'private_ip_ranges', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                sku_tier: build.template(block.sku_tier),
                tags: build.template(std.get(block, 'tags', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      dns_proxy_enabled: p.child('dns_proxy_enabled').out,
      dns_servers: p.child('dns_servers').out,
      firewall_policy_id: p.child('firewall_policy_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_ip_ranges: p.child('private_ip_ranges').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      sku_tier: p.child('sku_tier').out,
      tags: p.child('tags').out,
      threat_intel_mode: p.child('threat_intel_mode').out,
      zones: p.child('zones').out,
    },
    firewall_application_rule_collection(name, block): {
      local p = path(['azurerm_firewall_application_rule_collection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_firewall_application_rule_collection: {
              [name]: std.prune({
                action: build.template(block.action),
                azure_firewall_name: build.template(block.azure_firewall_name),
                name: build.template(block.name),
                priority: build.template(block.priority),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      azure_firewall_name: p.child('azure_firewall_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    firewall_nat_rule_collection(name, block): {
      local p = path(['azurerm_firewall_nat_rule_collection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_firewall_nat_rule_collection: {
              [name]: std.prune({
                action: build.template(block.action),
                azure_firewall_name: build.template(block.azure_firewall_name),
                name: build.template(block.name),
                priority: build.template(block.priority),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      azure_firewall_name: p.child('azure_firewall_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    firewall_network_rule_collection(name, block): {
      local p = path(['azurerm_firewall_network_rule_collection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_firewall_network_rule_collection: {
              [name]: std.prune({
                action: build.template(block.action),
                azure_firewall_name: build.template(block.azure_firewall_name),
                name: build.template(block.name),
                priority: build.template(block.priority),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      azure_firewall_name: p.child('azure_firewall_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    firewall_policy(name, block): {
      local p = path(['azurerm_firewall_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_firewall_policy: {
              [name]: std.prune({
                auto_learn_private_ranges_enabled: build.template(std.get(block, 'auto_learn_private_ranges_enabled', null, true)),
                base_policy_id: build.template(std.get(block, 'base_policy_id', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                private_ip_ranges: build.template(std.get(block, 'private_ip_ranges', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(std.get(block, 'sku', null, true)),
                sql_redirect_allowed: build.template(std.get(block, 'sql_redirect_allowed', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                threat_intelligence_mode: build.template(std.get(block, 'threat_intelligence_mode', null, true)),
              }),
            },
          },
        },
      },
      auto_learn_private_ranges_enabled: p.child('auto_learn_private_ranges_enabled').out,
      base_policy_id: p.child('base_policy_id').out,
      child_policies: p.child('child_policies').out,
      firewalls: p.child('firewalls').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_ip_ranges: p.child('private_ip_ranges').out,
      resource_group_name: p.child('resource_group_name').out,
      rule_collection_groups: p.child('rule_collection_groups').out,
      sku: p.child('sku').out,
      sql_redirect_allowed: p.child('sql_redirect_allowed').out,
      tags: p.child('tags').out,
      threat_intelligence_mode: p.child('threat_intelligence_mode').out,
    },
    firewall_policy_rule_collection_group(name, block): {
      local p = path(['azurerm_firewall_policy_rule_collection_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_firewall_policy_rule_collection_group: {
              [name]: std.prune({
                firewall_policy_id: build.template(block.firewall_policy_id),
                name: build.template(block.name),
                priority: build.template(block.priority),
              }),
            },
          },
        },
      },
      firewall_policy_id: p.child('firewall_policy_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
    },
    fluid_relay_server(name, block): {
      local p = path(['azurerm_fluid_relay_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_fluid_relay_server: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      frs_tenant_id: p.child('frs_tenant_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      orderer_endpoints: p.child('orderer_endpoints').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_key: p.child('secondary_key').out,
      service_endpoints: p.child('service_endpoints').out,
      storage_endpoints: p.child('storage_endpoints').out,
      storage_sku: p.child('storage_sku').out,
      tags: p.child('tags').out,
    },
    frontdoor(name, block): {
      local p = path(['azurerm_frontdoor', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_frontdoor: {
              [name]: std.prune({
                friendly_name: build.template(std.get(block, 'friendly_name', null, true)),
                load_balancer_enabled: build.template(std.get(block, 'load_balancer_enabled', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      backend_pool_health_probes: p.child('backend_pool_health_probes').out,
      backend_pool_load_balancing_settings: p.child('backend_pool_load_balancing_settings').out,
      backend_pools: p.child('backend_pools').out,
      cname: p.child('cname').out,
      explicit_resource_order: p.child('explicit_resource_order').out,
      friendly_name: p.child('friendly_name').out,
      frontend_endpoints: p.child('frontend_endpoints').out,
      header_frontdoor_id: p.child('header_frontdoor_id').out,
      id: p.child('id').out,
      load_balancer_enabled: p.child('load_balancer_enabled').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      routing_rules: p.child('routing_rules').out,
      tags: p.child('tags').out,
    },
    frontdoor_custom_https_configuration(name, block): {
      local p = path(['azurerm_frontdoor_custom_https_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_frontdoor_custom_https_configuration: {
              [name]: std.prune({
                custom_https_provisioning_enabled: build.template(block.custom_https_provisioning_enabled),
                frontend_endpoint_id: build.template(block.frontend_endpoint_id),
              }),
            },
          },
        },
      },
      custom_https_provisioning_enabled: p.child('custom_https_provisioning_enabled').out,
      frontend_endpoint_id: p.child('frontend_endpoint_id').out,
      id: p.child('id').out,
    },
    frontdoor_firewall_policy(name, block): {
      local p = path(['azurerm_frontdoor_firewall_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_frontdoor_firewall_policy: {
              [name]: std.prune({
                custom_block_response_body: build.template(std.get(block, 'custom_block_response_body', null, true)),
                custom_block_response_status_code: build.template(std.get(block, 'custom_block_response_status_code', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                mode: build.template(std.get(block, 'mode', null, true)),
                name: build.template(block.name),
                redirect_url: build.template(std.get(block, 'redirect_url', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      custom_block_response_body: p.child('custom_block_response_body').out,
      custom_block_response_status_code: p.child('custom_block_response_status_code').out,
      enabled: p.child('enabled').out,
      frontend_endpoint_ids: p.child('frontend_endpoint_ids').out,
      id: p.child('id').out,
      location: p.child('location').out,
      mode: p.child('mode').out,
      name: p.child('name').out,
      redirect_url: p.child('redirect_url').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    frontdoor_rules_engine(name, block): {
      local p = path(['azurerm_frontdoor_rules_engine', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_frontdoor_rules_engine: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                frontdoor_name: build.template(block.frontdoor_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      frontdoor_name: p.child('frontdoor_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    function_app(name, block): {
      local p = path(['azurerm_function_app', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_function_app: {
              [name]: std.prune({
                app_service_plan_id: build.template(block.app_service_plan_id),
                client_cert_mode: build.template(std.get(block, 'client_cert_mode', null, true)),
                daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null, true)),
                enable_builtin_logging: build.template(std.get(block, 'enable_builtin_logging', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                os_type: build.template(std.get(block, 'os_type', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                storage_account_access_key: build.template(block.storage_account_access_key),
                storage_account_name: build.template(block.storage_account_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      app_service_plan_id: p.child('app_service_plan_id').out,
      app_settings: p.child('app_settings').out,
      client_cert_mode: p.child('client_cert_mode').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      daily_memory_time_quota: p.child('daily_memory_time_quota').out,
      default_hostname: p.child('default_hostname').out,
      enable_builtin_logging: p.child('enable_builtin_logging').out,
      enabled: p.child('enabled').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      key_vault_reference_identity_id: p.child('key_vault_reference_identity_id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      os_type: p.child('os_type').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      resource_group_name: p.child('resource_group_name').out,
      site_credential: p.child('site_credential').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_name: p.child('storage_account_name').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    function_app_active_slot(name, block): {
      local p = path(['azurerm_function_app_active_slot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_function_app_active_slot: {
              [name]: std.prune({
                overwrite_network_config: build.template(std.get(block, 'overwrite_network_config', null, true)),
                slot_id: build.template(block.slot_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      last_successful_swap: p.child('last_successful_swap').out,
      overwrite_network_config: p.child('overwrite_network_config').out,
      slot_id: p.child('slot_id').out,
    },
    function_app_connection(name, block): {
      local p = path(['azurerm_function_app_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_function_app_connection: {
              [name]: std.prune({
                client_type: build.template(std.get(block, 'client_type', null, true)),
                function_app_id: build.template(block.function_app_id),
                name: build.template(block.name),
                target_resource_id: build.template(block.target_resource_id),
                vnet_solution: build.template(std.get(block, 'vnet_solution', null, true)),
              }),
            },
          },
        },
      },
      client_type: p.child('client_type').out,
      function_app_id: p.child('function_app_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      target_resource_id: p.child('target_resource_id').out,
      vnet_solution: p.child('vnet_solution').out,
    },
    function_app_function(name, block): {
      local p = path(['azurerm_function_app_function', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_function_app_function: {
              [name]: std.prune({
                config_json: build.template(block.config_json),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                function_app_id: build.template(block.function_app_id),
                language: build.template(std.get(block, 'language', null, true)),
                name: build.template(block.name),
                test_data: build.template(std.get(block, 'test_data', null, true)),
              }),
            },
          },
        },
      },
      config_json: p.child('config_json').out,
      config_url: p.child('config_url').out,
      enabled: p.child('enabled').out,
      function_app_id: p.child('function_app_id').out,
      id: p.child('id').out,
      invocation_url: p.child('invocation_url').out,
      language: p.child('language').out,
      name: p.child('name').out,
      script_root_path_url: p.child('script_root_path_url').out,
      script_url: p.child('script_url').out,
      secrets_file_url: p.child('secrets_file_url').out,
      test_data: p.child('test_data').out,
      test_data_url: p.child('test_data_url').out,
      url: p.child('url').out,
    },
    function_app_hybrid_connection(name, block): {
      local p = path(['azurerm_function_app_hybrid_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_function_app_hybrid_connection: {
              [name]: std.prune({
                function_app_id: build.template(block.function_app_id),
                hostname: build.template(block.hostname),
                port: build.template(block.port),
                relay_id: build.template(block.relay_id),
                send_key_name: build.template(std.get(block, 'send_key_name', null, true)),
              }),
            },
          },
        },
      },
      function_app_id: p.child('function_app_id').out,
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      namespace_name: p.child('namespace_name').out,
      port: p.child('port').out,
      relay_id: p.child('relay_id').out,
      relay_name: p.child('relay_name').out,
      send_key_name: p.child('send_key_name').out,
      send_key_value: p.child('send_key_value').out,
      service_bus_namespace: p.child('service_bus_namespace').out,
      service_bus_suffix: p.child('service_bus_suffix').out,
    },
    function_app_slot(name, block): {
      local p = path(['azurerm_function_app_slot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_function_app_slot: {
              [name]: std.prune({
                app_service_plan_id: build.template(block.app_service_plan_id),
                daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null, true)),
                enable_builtin_logging: build.template(std.get(block, 'enable_builtin_logging', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                function_app_name: build.template(block.function_app_name),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                os_type: build.template(std.get(block, 'os_type', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                storage_account_access_key: build.template(block.storage_account_access_key),
                storage_account_name: build.template(block.storage_account_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      app_service_plan_id: p.child('app_service_plan_id').out,
      app_settings: p.child('app_settings').out,
      daily_memory_time_quota: p.child('daily_memory_time_quota').out,
      default_hostname: p.child('default_hostname').out,
      enable_builtin_logging: p.child('enable_builtin_logging').out,
      enabled: p.child('enabled').out,
      function_app_name: p.child('function_app_name').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      os_type: p.child('os_type').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      resource_group_name: p.child('resource_group_name').out,
      site_credential: p.child('site_credential').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_name: p.child('storage_account_name').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    gallery_application(name, block): {
      local p = path(['azurerm_gallery_application', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_gallery_application: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                end_of_life_date: build.template(std.get(block, 'end_of_life_date', null, true)),
                eula: build.template(std.get(block, 'eula', null, true)),
                gallery_id: build.template(block.gallery_id),
                location: build.template(block.location),
                name: build.template(block.name),
                privacy_statement_uri: build.template(std.get(block, 'privacy_statement_uri', null, true)),
                release_note_uri: build.template(std.get(block, 'release_note_uri', null, true)),
                supported_os_type: build.template(block.supported_os_type),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      end_of_life_date: p.child('end_of_life_date').out,
      eula: p.child('eula').out,
      gallery_id: p.child('gallery_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      privacy_statement_uri: p.child('privacy_statement_uri').out,
      release_note_uri: p.child('release_note_uri').out,
      supported_os_type: p.child('supported_os_type').out,
      tags: p.child('tags').out,
    },
    gallery_application_version(name, block): {
      local p = path(['azurerm_gallery_application_version', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_gallery_application_version: {
              [name]: std.prune({
                config_file: build.template(std.get(block, 'config_file', null, true)),
                enable_health_check: build.template(std.get(block, 'enable_health_check', null, true)),
                end_of_life_date: build.template(std.get(block, 'end_of_life_date', null, true)),
                exclude_from_latest: build.template(std.get(block, 'exclude_from_latest', null, true)),
                gallery_application_id: build.template(block.gallery_application_id),
                location: build.template(block.location),
                name: build.template(block.name),
                package_file: build.template(std.get(block, 'package_file', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      config_file: p.child('config_file').out,
      enable_health_check: p.child('enable_health_check').out,
      end_of_life_date: p.child('end_of_life_date').out,
      exclude_from_latest: p.child('exclude_from_latest').out,
      gallery_application_id: p.child('gallery_application_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      package_file: p.child('package_file').out,
      tags: p.child('tags').out,
    },
    graph_services_account(name, block): {
      local p = path(['azurerm_graph_services_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_graph_services_account: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      billing_plan_id: p.child('billing_plan_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    hdinsight_hadoop_cluster(name, block): {
      local p = path(['azurerm_hdinsight_hadoop_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_hdinsight_hadoop_cluster: {
              [name]: std.prune({
                cluster_version: build.template(block.cluster_version),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                tier: build.template(block.tier),
                tls_min_version: build.template(std.get(block, 'tls_min_version', null, true)),
              }),
            },
          },
        },
      },
      cluster_version: p.child('cluster_version').out,
      https_endpoint: p.child('https_endpoint').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      ssh_endpoint: p.child('ssh_endpoint').out,
      tags: p.child('tags').out,
      tier: p.child('tier').out,
      tls_min_version: p.child('tls_min_version').out,
    },
    hdinsight_hbase_cluster(name, block): {
      local p = path(['azurerm_hdinsight_hbase_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_hdinsight_hbase_cluster: {
              [name]: std.prune({
                cluster_version: build.template(block.cluster_version),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                tier: build.template(block.tier),
                tls_min_version: build.template(std.get(block, 'tls_min_version', null, true)),
              }),
            },
          },
        },
      },
      cluster_version: p.child('cluster_version').out,
      https_endpoint: p.child('https_endpoint').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      ssh_endpoint: p.child('ssh_endpoint').out,
      tags: p.child('tags').out,
      tier: p.child('tier').out,
      tls_min_version: p.child('tls_min_version').out,
    },
    hdinsight_interactive_query_cluster(name, block): {
      local p = path(['azurerm_hdinsight_interactive_query_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_hdinsight_interactive_query_cluster: {
              [name]: std.prune({
                cluster_version: build.template(block.cluster_version),
                encryption_in_transit_enabled: build.template(std.get(block, 'encryption_in_transit_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                tier: build.template(block.tier),
                tls_min_version: build.template(std.get(block, 'tls_min_version', null, true)),
              }),
            },
          },
        },
      },
      cluster_version: p.child('cluster_version').out,
      encryption_in_transit_enabled: p.child('encryption_in_transit_enabled').out,
      https_endpoint: p.child('https_endpoint').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      ssh_endpoint: p.child('ssh_endpoint').out,
      tags: p.child('tags').out,
      tier: p.child('tier').out,
      tls_min_version: p.child('tls_min_version').out,
    },
    hdinsight_kafka_cluster(name, block): {
      local p = path(['azurerm_hdinsight_kafka_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_hdinsight_kafka_cluster: {
              [name]: std.prune({
                cluster_version: build.template(block.cluster_version),
                encryption_in_transit_enabled: build.template(std.get(block, 'encryption_in_transit_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                tier: build.template(block.tier),
                tls_min_version: build.template(std.get(block, 'tls_min_version', null, true)),
              }),
            },
          },
        },
      },
      cluster_version: p.child('cluster_version').out,
      encryption_in_transit_enabled: p.child('encryption_in_transit_enabled').out,
      https_endpoint: p.child('https_endpoint').out,
      id: p.child('id').out,
      kafka_rest_proxy_endpoint: p.child('kafka_rest_proxy_endpoint').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      ssh_endpoint: p.child('ssh_endpoint').out,
      tags: p.child('tags').out,
      tier: p.child('tier').out,
      tls_min_version: p.child('tls_min_version').out,
    },
    hdinsight_spark_cluster(name, block): {
      local p = path(['azurerm_hdinsight_spark_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_hdinsight_spark_cluster: {
              [name]: std.prune({
                cluster_version: build.template(block.cluster_version),
                encryption_in_transit_enabled: build.template(std.get(block, 'encryption_in_transit_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                tier: build.template(block.tier),
                tls_min_version: build.template(std.get(block, 'tls_min_version', null, true)),
              }),
            },
          },
        },
      },
      cluster_version: p.child('cluster_version').out,
      encryption_in_transit_enabled: p.child('encryption_in_transit_enabled').out,
      https_endpoint: p.child('https_endpoint').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      ssh_endpoint: p.child('ssh_endpoint').out,
      tags: p.child('tags').out,
      tier: p.child('tier').out,
      tls_min_version: p.child('tls_min_version').out,
    },
    healthbot(name, block): {
      local p = path(['azurerm_healthbot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_healthbot: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      bot_management_portal_url: p.child('bot_management_portal_url').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    healthcare_dicom_service(name, block): {
      local p = path(['azurerm_healthcare_dicom_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_healthcare_dicom_service: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      authentication: p.child('authentication').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_endpoint: p.child('private_endpoint').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      service_url: p.child('service_url').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
    },
    healthcare_fhir_service(name, block): {
      local p = path(['azurerm_healthcare_fhir_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_healthcare_fhir_service: {
              [name]: std.prune({
                access_policy_object_ids: build.template(std.get(block, 'access_policy_object_ids', null, true)),
                configuration_export_storage_account_name: build.template(std.get(block, 'configuration_export_storage_account_name', null, true)),
                container_registry_login_server_url: build.template(std.get(block, 'container_registry_login_server_url', null, true)),
                kind: build.template(std.get(block, 'kind', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      access_policy_object_ids: p.child('access_policy_object_ids').out,
      configuration_export_storage_account_name: p.child('configuration_export_storage_account_name').out,
      container_registry_login_server_url: p.child('container_registry_login_server_url').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
    },
    healthcare_medtech_service(name, block): {
      local p = path(['azurerm_healthcare_medtech_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_healthcare_medtech_service: {
              [name]: std.prune({
                device_mapping_json: build.template(block.device_mapping_json),
                eventhub_consumer_group_name: build.template(block.eventhub_consumer_group_name),
                eventhub_name: build.template(block.eventhub_name),
                eventhub_namespace_name: build.template(block.eventhub_namespace_name),
                location: build.template(block.location),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      device_mapping_json: p.child('device_mapping_json').out,
      eventhub_consumer_group_name: p.child('eventhub_consumer_group_name').out,
      eventhub_name: p.child('eventhub_name').out,
      eventhub_namespace_name: p.child('eventhub_namespace_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
    },
    healthcare_medtech_service_fhir_destination(name, block): {
      local p = path(['azurerm_healthcare_medtech_service_fhir_destination', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_healthcare_medtech_service_fhir_destination: {
              [name]: std.prune({
                destination_fhir_mapping_json: build.template(block.destination_fhir_mapping_json),
                destination_fhir_service_id: build.template(block.destination_fhir_service_id),
                destination_identity_resolution_type: build.template(block.destination_identity_resolution_type),
                location: build.template(block.location),
                medtech_service_id: build.template(block.medtech_service_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      destination_fhir_mapping_json: p.child('destination_fhir_mapping_json').out,
      destination_fhir_service_id: p.child('destination_fhir_service_id').out,
      destination_identity_resolution_type: p.child('destination_identity_resolution_type').out,
      id: p.child('id').out,
      location: p.child('location').out,
      medtech_service_id: p.child('medtech_service_id').out,
      name: p.child('name').out,
    },
    healthcare_service(name, block): {
      local p = path(['azurerm_healthcare_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_healthcare_service: {
              [name]: std.prune({
                access_policy_object_ids: build.template(std.get(block, 'access_policy_object_ids', null, true)),
                configuration_export_storage_account_name: build.template(std.get(block, 'configuration_export_storage_account_name', null, true)),
                cosmosdb_key_vault_key_versionless_id: build.template(std.get(block, 'cosmosdb_key_vault_key_versionless_id', null, true)),
                cosmosdb_throughput: build.template(std.get(block, 'cosmosdb_throughput', null, true)),
                kind: build.template(std.get(block, 'kind', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_policy_object_ids: p.child('access_policy_object_ids').out,
      configuration_export_storage_account_name: p.child('configuration_export_storage_account_name').out,
      cosmosdb_key_vault_key_versionless_id: p.child('cosmosdb_key_vault_key_versionless_id').out,
      cosmosdb_throughput: p.child('cosmosdb_throughput').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    healthcare_workspace(name, block): {
      local p = path(['azurerm_healthcare_workspace', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_healthcare_workspace: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_endpoint_connection: p.child('private_endpoint_connection').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    hpc_cache(name, block): {
      local p = path(['azurerm_hpc_cache', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_hpc_cache: {
              [name]: std.prune({
                automatically_rotate_key_to_latest_enabled: build.template(std.get(block, 'automatically_rotate_key_to_latest_enabled', null, true)),
                cache_size_in_gb: build.template(block.cache_size_in_gb),
                key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null, true)),
                location: build.template(block.location),
                mtu: build.template(std.get(block, 'mtu', null, true)),
                name: build.template(block.name),
                ntp_server: build.template(std.get(block, 'ntp_server', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      automatically_rotate_key_to_latest_enabled: p.child('automatically_rotate_key_to_latest_enabled').out,
      cache_size_in_gb: p.child('cache_size_in_gb').out,
      id: p.child('id').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      location: p.child('location').out,
      mount_addresses: p.child('mount_addresses').out,
      mtu: p.child('mtu').out,
      name: p.child('name').out,
      ntp_server: p.child('ntp_server').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
    },
    hpc_cache_access_policy(name, block): {
      local p = path(['azurerm_hpc_cache_access_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_hpc_cache_access_policy: {
              [name]: std.prune({
                hpc_cache_id: build.template(block.hpc_cache_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      hpc_cache_id: p.child('hpc_cache_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    hpc_cache_blob_nfs_target(name, block): {
      local p = path(['azurerm_hpc_cache_blob_nfs_target', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_hpc_cache_blob_nfs_target: {
              [name]: std.prune({
                access_policy_name: build.template(std.get(block, 'access_policy_name', null, true)),
                cache_name: build.template(block.cache_name),
                name: build.template(block.name),
                namespace_path: build.template(block.namespace_path),
                resource_group_name: build.template(block.resource_group_name),
                storage_container_id: build.template(block.storage_container_id),
                usage_model: build.template(block.usage_model),
                verification_timer_in_seconds: build.template(std.get(block, 'verification_timer_in_seconds', null, true)),
                write_back_timer_in_seconds: build.template(std.get(block, 'write_back_timer_in_seconds', null, true)),
              }),
            },
          },
        },
      },
      access_policy_name: p.child('access_policy_name').out,
      cache_name: p.child('cache_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      namespace_path: p.child('namespace_path').out,
      resource_group_name: p.child('resource_group_name').out,
      storage_container_id: p.child('storage_container_id').out,
      usage_model: p.child('usage_model').out,
      verification_timer_in_seconds: p.child('verification_timer_in_seconds').out,
      write_back_timer_in_seconds: p.child('write_back_timer_in_seconds').out,
    },
    hpc_cache_blob_target(name, block): {
      local p = path(['azurerm_hpc_cache_blob_target', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_hpc_cache_blob_target: {
              [name]: std.prune({
                access_policy_name: build.template(std.get(block, 'access_policy_name', null, true)),
                cache_name: build.template(block.cache_name),
                name: build.template(block.name),
                namespace_path: build.template(block.namespace_path),
                resource_group_name: build.template(block.resource_group_name),
                storage_container_id: build.template(block.storage_container_id),
              }),
            },
          },
        },
      },
      access_policy_name: p.child('access_policy_name').out,
      cache_name: p.child('cache_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      namespace_path: p.child('namespace_path').out,
      resource_group_name: p.child('resource_group_name').out,
      storage_container_id: p.child('storage_container_id').out,
    },
    hpc_cache_nfs_target(name, block): {
      local p = path(['azurerm_hpc_cache_nfs_target', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_hpc_cache_nfs_target: {
              [name]: std.prune({
                cache_name: build.template(block.cache_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                target_host_name: build.template(block.target_host_name),
                usage_model: build.template(block.usage_model),
                verification_timer_in_seconds: build.template(std.get(block, 'verification_timer_in_seconds', null, true)),
                write_back_timer_in_seconds: build.template(std.get(block, 'write_back_timer_in_seconds', null, true)),
              }),
            },
          },
        },
      },
      cache_name: p.child('cache_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      target_host_name: p.child('target_host_name').out,
      usage_model: p.child('usage_model').out,
      verification_timer_in_seconds: p.child('verification_timer_in_seconds').out,
      write_back_timer_in_seconds: p.child('write_back_timer_in_seconds').out,
    },
    image(name, block): {
      local p = path(['azurerm_image', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_image: {
              [name]: std.prune({
                hyper_v_generation: build.template(std.get(block, 'hyper_v_generation', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                source_virtual_machine_id: build.template(std.get(block, 'source_virtual_machine_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                zone_resilient: build.template(std.get(block, 'zone_resilient', null, true)),
              }),
            },
          },
        },
      },
      hyper_v_generation: p.child('hyper_v_generation').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      source_virtual_machine_id: p.child('source_virtual_machine_id').out,
      tags: p.child('tags').out,
      zone_resilient: p.child('zone_resilient').out,
    },
    iot_security_device_group(name, block): {
      local p = path(['azurerm_iot_security_device_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iot_security_device_group: {
              [name]: std.prune({
                iothub_id: build.template(block.iothub_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      iothub_id: p.child('iothub_id').out,
      name: p.child('name').out,
    },
    iot_security_solution(name, block): {
      local p = path(['azurerm_iot_security_solution', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iot_security_solution: {
              [name]: std.prune({
                disabled_data_sources: build.template(std.get(block, 'disabled_data_sources', null, true)),
                display_name: build.template(block.display_name),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                events_to_export: build.template(std.get(block, 'events_to_export', null, true)),
                iothub_ids: build.template(block.iothub_ids),
                location: build.template(block.location),
                log_analytics_workspace_id: build.template(std.get(block, 'log_analytics_workspace_id', null, true)),
                log_unmasked_ips_enabled: build.template(std.get(block, 'log_unmasked_ips_enabled', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      disabled_data_sources: p.child('disabled_data_sources').out,
      display_name: p.child('display_name').out,
      enabled: p.child('enabled').out,
      events_to_export: p.child('events_to_export').out,
      id: p.child('id').out,
      iothub_ids: p.child('iothub_ids').out,
      location: p.child('location').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      log_unmasked_ips_enabled: p.child('log_unmasked_ips_enabled').out,
      name: p.child('name').out,
      query_for_resources: p.child('query_for_resources').out,
      query_subscription_ids: p.child('query_subscription_ids').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    iotcentral_application(name, block): {
      local p = path(['azurerm_iotcentral_application', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iotcentral_application: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(std.get(block, 'sku', null, true)),
                sub_domain: build.template(block.sub_domain),
                tags: build.template(std.get(block, 'tags', null, true)),
                template: build.template(std.get(block, 'template', null, true)),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      sub_domain: p.child('sub_domain').out,
      tags: p.child('tags').out,
      template: p.child('template').out,
    },
    iotcentral_application_network_rule_set(name, block): {
      local p = path(['azurerm_iotcentral_application_network_rule_set', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iotcentral_application_network_rule_set: {
              [name]: std.prune({
                apply_to_device: build.template(std.get(block, 'apply_to_device', null, true)),
                default_action: build.template(std.get(block, 'default_action', null, true)),
                iotcentral_application_id: build.template(block.iotcentral_application_id),
              }),
            },
          },
        },
      },
      apply_to_device: p.child('apply_to_device').out,
      default_action: p.child('default_action').out,
      id: p.child('id').out,
      iotcentral_application_id: p.child('iotcentral_application_id').out,
    },
    iotcentral_organization(name, block): {
      local p = path(['azurerm_iotcentral_organization', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iotcentral_organization: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                iotcentral_application_id: build.template(block.iotcentral_application_id),
                organization_id: build.template(block.organization_id),
                parent_organization_id: build.template(std.get(block, 'parent_organization_id', null, true)),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      iotcentral_application_id: p.child('iotcentral_application_id').out,
      organization_id: p.child('organization_id').out,
      parent_organization_id: p.child('parent_organization_id').out,
    },
    iothub(name, block): {
      local p = path(['azurerm_iothub', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub: {
              [name]: std.prune({
                event_hub_partition_count: build.template(std.get(block, 'event_hub_partition_count', null, true)),
                event_hub_retention_in_days: build.template(std.get(block, 'event_hub_retention_in_days', null, true)),
                local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null, true)),
                location: build.template(block.location),
                min_tls_version: build.template(std.get(block, 'min_tls_version', null, true)),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      endpoint: p.child('endpoint').out,
      enrichment: p.child('enrichment').out,
      event_hub_events_endpoint: p.child('event_hub_events_endpoint').out,
      event_hub_events_namespace: p.child('event_hub_events_namespace').out,
      event_hub_events_path: p.child('event_hub_events_path').out,
      event_hub_operations_endpoint: p.child('event_hub_operations_endpoint').out,
      event_hub_operations_path: p.child('event_hub_operations_path').out,
      event_hub_partition_count: p.child('event_hub_partition_count').out,
      event_hub_retention_in_days: p.child('event_hub_retention_in_days').out,
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      local_authentication_enabled: p.child('local_authentication_enabled').out,
      location: p.child('location').out,
      min_tls_version: p.child('min_tls_version').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      route: p.child('route').out,
      shared_access_policy: p.child('shared_access_policy').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
    },
    iothub_certificate(name, block): {
      local p = path(['azurerm_iothub_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_certificate: {
              [name]: std.prune({
                certificate_content: build.template(block.certificate_content),
                iothub_name: build.template(block.iothub_name),
                is_verified: build.template(std.get(block, 'is_verified', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      certificate_content: p.child('certificate_content').out,
      id: p.child('id').out,
      iothub_name: p.child('iothub_name').out,
      is_verified: p.child('is_verified').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    iothub_consumer_group(name, block): {
      local p = path(['azurerm_iothub_consumer_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_consumer_group: {
              [name]: std.prune({
                eventhub_endpoint_name: build.template(block.eventhub_endpoint_name),
                iothub_name: build.template(block.iothub_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      eventhub_endpoint_name: p.child('eventhub_endpoint_name').out,
      id: p.child('id').out,
      iothub_name: p.child('iothub_name').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    iothub_device_update_account(name, block): {
      local p = path(['azurerm_iothub_device_update_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_device_update_account: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(std.get(block, 'sku', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      host_name: p.child('host_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    iothub_device_update_instance(name, block): {
      local p = path(['azurerm_iothub_device_update_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_device_update_instance: {
              [name]: std.prune({
                device_update_account_id: build.template(block.device_update_account_id),
                diagnostic_enabled: build.template(std.get(block, 'diagnostic_enabled', null, true)),
                iothub_id: build.template(block.iothub_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      device_update_account_id: p.child('device_update_account_id').out,
      diagnostic_enabled: p.child('diagnostic_enabled').out,
      id: p.child('id').out,
      iothub_id: p.child('iothub_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    iothub_dps(name, block): {
      local p = path(['azurerm_iothub_dps', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_dps: {
              [name]: std.prune({
                allocation_policy: build.template(std.get(block, 'allocation_policy', null, true)),
                data_residency_enabled: build.template(std.get(block, 'data_residency_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allocation_policy: p.child('allocation_policy').out,
      data_residency_enabled: p.child('data_residency_enabled').out,
      device_provisioning_host_name: p.child('device_provisioning_host_name').out,
      id: p.child('id').out,
      id_scope: p.child('id_scope').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      service_operations_host_name: p.child('service_operations_host_name').out,
      tags: p.child('tags').out,
    },
    iothub_dps_certificate(name, block): {
      local p = path(['azurerm_iothub_dps_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_dps_certificate: {
              [name]: std.prune({
                certificate_content: build.template(block.certificate_content),
                iot_dps_name: build.template(block.iot_dps_name),
                is_verified: build.template(std.get(block, 'is_verified', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      certificate_content: p.child('certificate_content').out,
      id: p.child('id').out,
      iot_dps_name: p.child('iot_dps_name').out,
      is_verified: p.child('is_verified').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    iothub_dps_shared_access_policy(name, block): {
      local p = path(['azurerm_iothub_dps_shared_access_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_dps_shared_access_policy: {
              [name]: std.prune({
                enrollment_read: build.template(std.get(block, 'enrollment_read', null, true)),
                enrollment_write: build.template(std.get(block, 'enrollment_write', null, true)),
                iothub_dps_name: build.template(block.iothub_dps_name),
                name: build.template(block.name),
                registration_read: build.template(std.get(block, 'registration_read', null, true)),
                registration_write: build.template(std.get(block, 'registration_write', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                service_config: build.template(std.get(block, 'service_config', null, true)),
              }),
            },
          },
        },
      },
      enrollment_read: p.child('enrollment_read').out,
      enrollment_write: p.child('enrollment_write').out,
      id: p.child('id').out,
      iothub_dps_name: p.child('iothub_dps_name').out,
      name: p.child('name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_key: p.child('primary_key').out,
      registration_read: p.child('registration_read').out,
      registration_write: p.child('registration_write').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_key: p.child('secondary_key').out,
      service_config: p.child('service_config').out,
    },
    iothub_endpoint_cosmosdb_account(name, block): {
      local p = path(['azurerm_iothub_endpoint_cosmosdb_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_endpoint_cosmosdb_account: {
              [name]: std.prune({
                authentication_type: build.template(std.get(block, 'authentication_type', null, true)),
                container_name: build.template(block.container_name),
                database_name: build.template(block.database_name),
                endpoint_uri: build.template(block.endpoint_uri),
                identity_id: build.template(std.get(block, 'identity_id', null, true)),
                iothub_id: build.template(block.iothub_id),
                name: build.template(block.name),
                partition_key_name: build.template(std.get(block, 'partition_key_name', null, true)),
                partition_key_template: build.template(std.get(block, 'partition_key_template', null, true)),
                primary_key: build.template(std.get(block, 'primary_key', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                secondary_key: build.template(std.get(block, 'secondary_key', null, true)),
              }),
            },
          },
        },
      },
      authentication_type: p.child('authentication_type').out,
      container_name: p.child('container_name').out,
      database_name: p.child('database_name').out,
      endpoint_uri: p.child('endpoint_uri').out,
      id: p.child('id').out,
      identity_id: p.child('identity_id').out,
      iothub_id: p.child('iothub_id').out,
      name: p.child('name').out,
      partition_key_name: p.child('partition_key_name').out,
      partition_key_template: p.child('partition_key_template').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_key: p.child('secondary_key').out,
    },
    iothub_endpoint_eventhub(name, block): {
      local p = path(['azurerm_iothub_endpoint_eventhub', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_endpoint_eventhub: {
              [name]: std.prune({
                authentication_type: build.template(std.get(block, 'authentication_type', null, true)),
                connection_string: build.template(std.get(block, 'connection_string', null, true)),
                endpoint_uri: build.template(std.get(block, 'endpoint_uri', null, true)),
                entity_path: build.template(std.get(block, 'entity_path', null, true)),
                identity_id: build.template(std.get(block, 'identity_id', null, true)),
                iothub_id: build.template(block.iothub_id),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      authentication_type: p.child('authentication_type').out,
      connection_string: p.child('connection_string').out,
      endpoint_uri: p.child('endpoint_uri').out,
      entity_path: p.child('entity_path').out,
      id: p.child('id').out,
      identity_id: p.child('identity_id').out,
      iothub_id: p.child('iothub_id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    iothub_endpoint_servicebus_queue(name, block): {
      local p = path(['azurerm_iothub_endpoint_servicebus_queue', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_endpoint_servicebus_queue: {
              [name]: std.prune({
                authentication_type: build.template(std.get(block, 'authentication_type', null, true)),
                connection_string: build.template(std.get(block, 'connection_string', null, true)),
                endpoint_uri: build.template(std.get(block, 'endpoint_uri', null, true)),
                entity_path: build.template(std.get(block, 'entity_path', null, true)),
                identity_id: build.template(std.get(block, 'identity_id', null, true)),
                iothub_id: build.template(block.iothub_id),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      authentication_type: p.child('authentication_type').out,
      connection_string: p.child('connection_string').out,
      endpoint_uri: p.child('endpoint_uri').out,
      entity_path: p.child('entity_path').out,
      id: p.child('id').out,
      identity_id: p.child('identity_id').out,
      iothub_id: p.child('iothub_id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    iothub_endpoint_servicebus_topic(name, block): {
      local p = path(['azurerm_iothub_endpoint_servicebus_topic', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_endpoint_servicebus_topic: {
              [name]: std.prune({
                authentication_type: build.template(std.get(block, 'authentication_type', null, true)),
                connection_string: build.template(std.get(block, 'connection_string', null, true)),
                endpoint_uri: build.template(std.get(block, 'endpoint_uri', null, true)),
                entity_path: build.template(std.get(block, 'entity_path', null, true)),
                identity_id: build.template(std.get(block, 'identity_id', null, true)),
                iothub_id: build.template(block.iothub_id),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      authentication_type: p.child('authentication_type').out,
      connection_string: p.child('connection_string').out,
      endpoint_uri: p.child('endpoint_uri').out,
      entity_path: p.child('entity_path').out,
      id: p.child('id').out,
      identity_id: p.child('identity_id').out,
      iothub_id: p.child('iothub_id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    iothub_endpoint_storage_container(name, block): {
      local p = path(['azurerm_iothub_endpoint_storage_container', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_endpoint_storage_container: {
              [name]: std.prune({
                authentication_type: build.template(std.get(block, 'authentication_type', null, true)),
                batch_frequency_in_seconds: build.template(std.get(block, 'batch_frequency_in_seconds', null, true)),
                connection_string: build.template(std.get(block, 'connection_string', null, true)),
                container_name: build.template(block.container_name),
                encoding: build.template(std.get(block, 'encoding', null, true)),
                endpoint_uri: build.template(std.get(block, 'endpoint_uri', null, true)),
                file_name_format: build.template(std.get(block, 'file_name_format', null, true)),
                identity_id: build.template(std.get(block, 'identity_id', null, true)),
                iothub_id: build.template(block.iothub_id),
                max_chunk_size_in_bytes: build.template(std.get(block, 'max_chunk_size_in_bytes', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      authentication_type: p.child('authentication_type').out,
      batch_frequency_in_seconds: p.child('batch_frequency_in_seconds').out,
      connection_string: p.child('connection_string').out,
      container_name: p.child('container_name').out,
      encoding: p.child('encoding').out,
      endpoint_uri: p.child('endpoint_uri').out,
      file_name_format: p.child('file_name_format').out,
      id: p.child('id').out,
      identity_id: p.child('identity_id').out,
      iothub_id: p.child('iothub_id').out,
      max_chunk_size_in_bytes: p.child('max_chunk_size_in_bytes').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    iothub_enrichment(name, block): {
      local p = path(['azurerm_iothub_enrichment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_enrichment: {
              [name]: std.prune({
                endpoint_names: build.template(block.endpoint_names),
                iothub_name: build.template(block.iothub_name),
                key: build.template(block.key),
                resource_group_name: build.template(block.resource_group_name),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      endpoint_names: p.child('endpoint_names').out,
      id: p.child('id').out,
      iothub_name: p.child('iothub_name').out,
      key: p.child('key').out,
      resource_group_name: p.child('resource_group_name').out,
      value: p.child('value').out,
    },
    iothub_fallback_route(name, block): {
      local p = path(['azurerm_iothub_fallback_route', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_fallback_route: {
              [name]: std.prune({
                condition: build.template(std.get(block, 'condition', null, true)),
                enabled: build.template(block.enabled),
                endpoint_names: build.template(block.endpoint_names),
                iothub_name: build.template(block.iothub_name),
                resource_group_name: build.template(block.resource_group_name),
                source: build.template(std.get(block, 'source', null, true)),
              }),
            },
          },
        },
      },
      condition: p.child('condition').out,
      enabled: p.child('enabled').out,
      endpoint_names: p.child('endpoint_names').out,
      id: p.child('id').out,
      iothub_name: p.child('iothub_name').out,
      resource_group_name: p.child('resource_group_name').out,
      source: p.child('source').out,
    },
    iothub_file_upload(name, block): {
      local p = path(['azurerm_iothub_file_upload', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_file_upload: {
              [name]: std.prune({
                authentication_type: build.template(std.get(block, 'authentication_type', null, true)),
                connection_string: build.template(block.connection_string),
                container_name: build.template(block.container_name),
                default_ttl: build.template(std.get(block, 'default_ttl', null, true)),
                identity_id: build.template(std.get(block, 'identity_id', null, true)),
                iothub_id: build.template(block.iothub_id),
                lock_duration: build.template(std.get(block, 'lock_duration', null, true)),
                max_delivery_count: build.template(std.get(block, 'max_delivery_count', null, true)),
                notifications_enabled: build.template(std.get(block, 'notifications_enabled', null, true)),
                sas_ttl: build.template(std.get(block, 'sas_ttl', null, true)),
              }),
            },
          },
        },
      },
      authentication_type: p.child('authentication_type').out,
      connection_string: p.child('connection_string').out,
      container_name: p.child('container_name').out,
      default_ttl: p.child('default_ttl').out,
      id: p.child('id').out,
      identity_id: p.child('identity_id').out,
      iothub_id: p.child('iothub_id').out,
      lock_duration: p.child('lock_duration').out,
      max_delivery_count: p.child('max_delivery_count').out,
      notifications_enabled: p.child('notifications_enabled').out,
      sas_ttl: p.child('sas_ttl').out,
    },
    iothub_route(name, block): {
      local p = path(['azurerm_iothub_route', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_route: {
              [name]: std.prune({
                condition: build.template(std.get(block, 'condition', null, true)),
                enabled: build.template(block.enabled),
                endpoint_names: build.template(block.endpoint_names),
                iothub_name: build.template(block.iothub_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                source: build.template(block.source),
              }),
            },
          },
        },
      },
      condition: p.child('condition').out,
      enabled: p.child('enabled').out,
      endpoint_names: p.child('endpoint_names').out,
      id: p.child('id').out,
      iothub_name: p.child('iothub_name').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      source: p.child('source').out,
    },
    iothub_shared_access_policy(name, block): {
      local p = path(['azurerm_iothub_shared_access_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_iothub_shared_access_policy: {
              [name]: std.prune({
                device_connect: build.template(std.get(block, 'device_connect', null, true)),
                iothub_name: build.template(block.iothub_name),
                name: build.template(block.name),
                registry_read: build.template(std.get(block, 'registry_read', null, true)),
                registry_write: build.template(std.get(block, 'registry_write', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                service_connect: build.template(std.get(block, 'service_connect', null, true)),
              }),
            },
          },
        },
      },
      device_connect: p.child('device_connect').out,
      id: p.child('id').out,
      iothub_name: p.child('iothub_name').out,
      name: p.child('name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_key: p.child('primary_key').out,
      registry_read: p.child('registry_read').out,
      registry_write: p.child('registry_write').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_key: p.child('secondary_key').out,
      service_connect: p.child('service_connect').out,
    },
    ip_group(name, block): {
      local p = path(['azurerm_ip_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_ip_group: {
              [name]: std.prune({
                cidrs: build.template(std.get(block, 'cidrs', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      cidrs: p.child('cidrs').out,
      firewall_ids: p.child('firewall_ids').out,
      firewall_policy_ids: p.child('firewall_policy_ids').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    ip_group_cidr(name, block): {
      local p = path(['azurerm_ip_group_cidr', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_ip_group_cidr: {
              [name]: std.prune({
                cidr: build.template(block.cidr),
                ip_group_id: build.template(block.ip_group_id),
              }),
            },
          },
        },
      },
      cidr: p.child('cidr').out,
      id: p.child('id').out,
      ip_group_id: p.child('ip_group_id').out,
    },
    key_vault(name, block): {
      local p = path(['azurerm_key_vault', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault: {
              [name]: std.prune({
                enable_rbac_authorization: build.template(std.get(block, 'enable_rbac_authorization', null, true)),
                enabled_for_deployment: build.template(std.get(block, 'enabled_for_deployment', null, true)),
                enabled_for_disk_encryption: build.template(std.get(block, 'enabled_for_disk_encryption', null, true)),
                enabled_for_template_deployment: build.template(std.get(block, 'enabled_for_template_deployment', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                purge_protection_enabled: build.template(std.get(block, 'purge_protection_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                soft_delete_retention_days: build.template(std.get(block, 'soft_delete_retention_days', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      access_policy: p.child('access_policy').out,
      enable_rbac_authorization: p.child('enable_rbac_authorization').out,
      enabled_for_deployment: p.child('enabled_for_deployment').out,
      enabled_for_disk_encryption: p.child('enabled_for_disk_encryption').out,
      enabled_for_template_deployment: p.child('enabled_for_template_deployment').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      purge_protection_enabled: p.child('purge_protection_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      soft_delete_retention_days: p.child('soft_delete_retention_days').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
      vault_uri: p.child('vault_uri').out,
    },
    key_vault_access_policy(name, block): {
      local p = path(['azurerm_key_vault_access_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault_access_policy: {
              [name]: std.prune({
                application_id: build.template(std.get(block, 'application_id', null, true)),
                certificate_permissions: build.template(std.get(block, 'certificate_permissions', null, true)),
                key_permissions: build.template(std.get(block, 'key_permissions', null, true)),
                key_vault_id: build.template(block.key_vault_id),
                object_id: build.template(block.object_id),
                secret_permissions: build.template(std.get(block, 'secret_permissions', null, true)),
                storage_permissions: build.template(std.get(block, 'storage_permissions', null, true)),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      certificate_permissions: p.child('certificate_permissions').out,
      id: p.child('id').out,
      key_permissions: p.child('key_permissions').out,
      key_vault_id: p.child('key_vault_id').out,
      object_id: p.child('object_id').out,
      secret_permissions: p.child('secret_permissions').out,
      storage_permissions: p.child('storage_permissions').out,
      tenant_id: p.child('tenant_id').out,
    },
    key_vault_certificate(name, block): {
      local p = path(['azurerm_key_vault_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault_certificate: {
              [name]: std.prune({
                key_vault_id: build.template(block.key_vault_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      certificate_attribute: p.child('certificate_attribute').out,
      certificate_data: p.child('certificate_data').out,
      certificate_data_base64: p.child('certificate_data_base64').out,
      id: p.child('id').out,
      key_vault_id: p.child('key_vault_id').out,
      name: p.child('name').out,
      resource_manager_id: p.child('resource_manager_id').out,
      resource_manager_versionless_id: p.child('resource_manager_versionless_id').out,
      secret_id: p.child('secret_id').out,
      tags: p.child('tags').out,
      thumbprint: p.child('thumbprint').out,
      version: p.child('version').out,
      versionless_id: p.child('versionless_id').out,
      versionless_secret_id: p.child('versionless_secret_id').out,
    },
    key_vault_certificate_contacts(name, block): {
      local p = path(['azurerm_key_vault_certificate_contacts', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault_certificate_contacts: {
              [name]: std.prune({
                key_vault_id: build.template(block.key_vault_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key_vault_id: p.child('key_vault_id').out,
    },
    key_vault_certificate_issuer(name, block): {
      local p = path(['azurerm_key_vault_certificate_issuer', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault_certificate_issuer: {
              [name]: std.prune({
                account_id: build.template(std.get(block, 'account_id', null, true)),
                key_vault_id: build.template(block.key_vault_id),
                name: build.template(block.name),
                org_id: build.template(std.get(block, 'org_id', null, true)),
                password: build.template(std.get(block, 'password', null, true)),
                provider_name: build.template(block.provider_name),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      id: p.child('id').out,
      key_vault_id: p.child('key_vault_id').out,
      name: p.child('name').out,
      org_id: p.child('org_id').out,
      password: p.child('password').out,
      provider_name: p.child('provider_name').out,
    },
    key_vault_key(name, block): {
      local p = path(['azurerm_key_vault_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault_key: {
              [name]: std.prune({
                expiration_date: build.template(std.get(block, 'expiration_date', null, true)),
                key_opts: build.template(block.key_opts),
                key_size: build.template(std.get(block, 'key_size', null, true)),
                key_type: build.template(block.key_type),
                key_vault_id: build.template(block.key_vault_id),
                name: build.template(block.name),
                not_before_date: build.template(std.get(block, 'not_before_date', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      curve: p.child('curve').out,
      e: p.child('e').out,
      expiration_date: p.child('expiration_date').out,
      id: p.child('id').out,
      key_opts: p.child('key_opts').out,
      key_size: p.child('key_size').out,
      key_type: p.child('key_type').out,
      key_vault_id: p.child('key_vault_id').out,
      n: p.child('n').out,
      name: p.child('name').out,
      not_before_date: p.child('not_before_date').out,
      public_key_openssh: p.child('public_key_openssh').out,
      public_key_pem: p.child('public_key_pem').out,
      resource_id: p.child('resource_id').out,
      resource_versionless_id: p.child('resource_versionless_id').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
      versionless_id: p.child('versionless_id').out,
      x: p.child('x').out,
      y: p.child('y').out,
    },
    key_vault_managed_hardware_security_module(name, block): {
      local p = path(['azurerm_key_vault_managed_hardware_security_module', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault_managed_hardware_security_module: {
              [name]: std.prune({
                admin_object_ids: build.template(block.admin_object_ids),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                purge_protection_enabled: build.template(std.get(block, 'purge_protection_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                security_domain_key_vault_certificate_ids: build.template(std.get(block, 'security_domain_key_vault_certificate_ids', null, true)),
                security_domain_quorum: build.template(std.get(block, 'security_domain_quorum', null, true)),
                sku_name: build.template(block.sku_name),
                soft_delete_retention_days: build.template(std.get(block, 'soft_delete_retention_days', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      admin_object_ids: p.child('admin_object_ids').out,
      hsm_uri: p.child('hsm_uri').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      purge_protection_enabled: p.child('purge_protection_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      security_domain_encrypted_data: p.child('security_domain_encrypted_data').out,
      security_domain_key_vault_certificate_ids: p.child('security_domain_key_vault_certificate_ids').out,
      security_domain_quorum: p.child('security_domain_quorum').out,
      sku_name: p.child('sku_name').out,
      soft_delete_retention_days: p.child('soft_delete_retention_days').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
    },
    key_vault_managed_hardware_security_module_key(name, block): {
      local p = path(['azurerm_key_vault_managed_hardware_security_module_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault_managed_hardware_security_module_key: {
              [name]: std.prune({
                curve: build.template(std.get(block, 'curve', null, true)),
                expiration_date: build.template(std.get(block, 'expiration_date', null, true)),
                key_opts: build.template(block.key_opts),
                key_size: build.template(std.get(block, 'key_size', null, true)),
                key_type: build.template(block.key_type),
                managed_hsm_id: build.template(block.managed_hsm_id),
                name: build.template(block.name),
                not_before_date: build.template(std.get(block, 'not_before_date', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      curve: p.child('curve').out,
      expiration_date: p.child('expiration_date').out,
      id: p.child('id').out,
      key_opts: p.child('key_opts').out,
      key_size: p.child('key_size').out,
      key_type: p.child('key_type').out,
      managed_hsm_id: p.child('managed_hsm_id').out,
      name: p.child('name').out,
      not_before_date: p.child('not_before_date').out,
      tags: p.child('tags').out,
      versioned_id: p.child('versioned_id').out,
    },
    key_vault_managed_hardware_security_module_key_rotation_policy(name, block): {
      local p = path(['azurerm_key_vault_managed_hardware_security_module_key_rotation_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault_managed_hardware_security_module_key_rotation_policy: {
              [name]: std.prune({
                expire_after: build.template(block.expire_after),
                managed_hsm_key_id: build.template(block.managed_hsm_key_id),
                time_after_creation: build.template(std.get(block, 'time_after_creation', null, true)),
                time_before_expiry: build.template(std.get(block, 'time_before_expiry', null, true)),
              }),
            },
          },
        },
      },
      expire_after: p.child('expire_after').out,
      id: p.child('id').out,
      managed_hsm_key_id: p.child('managed_hsm_key_id').out,
      time_after_creation: p.child('time_after_creation').out,
      time_before_expiry: p.child('time_before_expiry').out,
    },
    key_vault_managed_hardware_security_module_role_assignment(name, block): {
      local p = path(['azurerm_key_vault_managed_hardware_security_module_role_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault_managed_hardware_security_module_role_assignment: {
              [name]: std.prune({
                managed_hsm_id: build.template(block.managed_hsm_id),
                name: build.template(block.name),
                principal_id: build.template(block.principal_id),
                role_definition_id: build.template(block.role_definition_id),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      managed_hsm_id: p.child('managed_hsm_id').out,
      name: p.child('name').out,
      principal_id: p.child('principal_id').out,
      resource_id: p.child('resource_id').out,
      role_definition_id: p.child('role_definition_id').out,
      scope: p.child('scope').out,
    },
    key_vault_managed_hardware_security_module_role_definition(name, block): {
      local p = path(['azurerm_key_vault_managed_hardware_security_module_role_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault_managed_hardware_security_module_role_definition: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                managed_hsm_id: build.template(block.managed_hsm_id),
                name: build.template(block.name),
                role_name: build.template(std.get(block, 'role_name', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      managed_hsm_id: p.child('managed_hsm_id').out,
      name: p.child('name').out,
      resource_manager_id: p.child('resource_manager_id').out,
      role_name: p.child('role_name').out,
      role_type: p.child('role_type').out,
    },
    key_vault_managed_storage_account(name, block): {
      local p = path(['azurerm_key_vault_managed_storage_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault_managed_storage_account: {
              [name]: std.prune({
                key_vault_id: build.template(block.key_vault_id),
                name: build.template(block.name),
                regenerate_key_automatically: build.template(std.get(block, 'regenerate_key_automatically', null, true)),
                regeneration_period: build.template(std.get(block, 'regeneration_period', null, true)),
                storage_account_id: build.template(block.storage_account_id),
                storage_account_key: build.template(block.storage_account_key),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key_vault_id: p.child('key_vault_id').out,
      name: p.child('name').out,
      regenerate_key_automatically: p.child('regenerate_key_automatically').out,
      regeneration_period: p.child('regeneration_period').out,
      storage_account_id: p.child('storage_account_id').out,
      storage_account_key: p.child('storage_account_key').out,
      tags: p.child('tags').out,
    },
    key_vault_managed_storage_account_sas_token_definition(name, block): {
      local p = path(['azurerm_key_vault_managed_storage_account_sas_token_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault_managed_storage_account_sas_token_definition: {
              [name]: std.prune({
                managed_storage_account_id: build.template(block.managed_storage_account_id),
                name: build.template(block.name),
                sas_template_uri: build.template(block.sas_template_uri),
                sas_type: build.template(block.sas_type),
                tags: build.template(std.get(block, 'tags', null, true)),
                validity_period: build.template(block.validity_period),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      managed_storage_account_id: p.child('managed_storage_account_id').out,
      name: p.child('name').out,
      sas_template_uri: p.child('sas_template_uri').out,
      sas_type: p.child('sas_type').out,
      secret_id: p.child('secret_id').out,
      tags: p.child('tags').out,
      validity_period: p.child('validity_period').out,
    },
    key_vault_secret(name, block): {
      local p = path(['azurerm_key_vault_secret', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_key_vault_secret: {
              [name]: std.prune({
                content_type: build.template(std.get(block, 'content_type', null, true)),
                expiration_date: build.template(std.get(block, 'expiration_date', null, true)),
                key_vault_id: build.template(block.key_vault_id),
                name: build.template(block.name),
                not_before_date: build.template(std.get(block, 'not_before_date', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      content_type: p.child('content_type').out,
      expiration_date: p.child('expiration_date').out,
      id: p.child('id').out,
      key_vault_id: p.child('key_vault_id').out,
      name: p.child('name').out,
      not_before_date: p.child('not_before_date').out,
      resource_id: p.child('resource_id').out,
      resource_versionless_id: p.child('resource_versionless_id').out,
      tags: p.child('tags').out,
      value: p.child('value').out,
      version: p.child('version').out,
      versionless_id: p.child('versionless_id').out,
    },
    kubernetes_cluster(name, block): {
      local p = path(['azurerm_kubernetes_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kubernetes_cluster: {
              [name]: std.prune({
                automatic_upgrade_channel: build.template(std.get(block, 'automatic_upgrade_channel', null, true)),
                azure_policy_enabled: build.template(std.get(block, 'azure_policy_enabled', null, true)),
                cost_analysis_enabled: build.template(std.get(block, 'cost_analysis_enabled', null, true)),
                disk_encryption_set_id: build.template(std.get(block, 'disk_encryption_set_id', null, true)),
                dns_prefix: build.template(std.get(block, 'dns_prefix', null, true)),
                dns_prefix_private_cluster: build.template(std.get(block, 'dns_prefix_private_cluster', null, true)),
                edge_zone: build.template(std.get(block, 'edge_zone', null, true)),
                http_application_routing_enabled: build.template(std.get(block, 'http_application_routing_enabled', null, true)),
                image_cleaner_enabled: build.template(std.get(block, 'image_cleaner_enabled', null, true)),
                image_cleaner_interval_hours: build.template(std.get(block, 'image_cleaner_interval_hours', null, true)),
                local_account_disabled: build.template(std.get(block, 'local_account_disabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                node_os_upgrade_channel: build.template(std.get(block, 'node_os_upgrade_channel', null, true)),
                oidc_issuer_enabled: build.template(std.get(block, 'oidc_issuer_enabled', null, true)),
                open_service_mesh_enabled: build.template(std.get(block, 'open_service_mesh_enabled', null, true)),
                private_cluster_enabled: build.template(std.get(block, 'private_cluster_enabled', null, true)),
                private_cluster_public_fqdn_enabled: build.template(std.get(block, 'private_cluster_public_fqdn_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                role_based_access_control_enabled: build.template(std.get(block, 'role_based_access_control_enabled', null, true)),
                run_command_enabled: build.template(std.get(block, 'run_command_enabled', null, true)),
                sku_tier: build.template(std.get(block, 'sku_tier', null, true)),
                support_plan: build.template(std.get(block, 'support_plan', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                workload_identity_enabled: build.template(std.get(block, 'workload_identity_enabled', null, true)),
              }),
            },
          },
        },
      },
      automatic_upgrade_channel: p.child('automatic_upgrade_channel').out,
      azure_policy_enabled: p.child('azure_policy_enabled').out,
      cost_analysis_enabled: p.child('cost_analysis_enabled').out,
      current_kubernetes_version: p.child('current_kubernetes_version').out,
      disk_encryption_set_id: p.child('disk_encryption_set_id').out,
      dns_prefix: p.child('dns_prefix').out,
      dns_prefix_private_cluster: p.child('dns_prefix_private_cluster').out,
      edge_zone: p.child('edge_zone').out,
      fqdn: p.child('fqdn').out,
      http_application_routing_enabled: p.child('http_application_routing_enabled').out,
      http_application_routing_zone_name: p.child('http_application_routing_zone_name').out,
      id: p.child('id').out,
      image_cleaner_enabled: p.child('image_cleaner_enabled').out,
      image_cleaner_interval_hours: p.child('image_cleaner_interval_hours').out,
      kube_admin_config: p.child('kube_admin_config').out,
      kube_admin_config_raw: p.child('kube_admin_config_raw').out,
      kube_config: p.child('kube_config').out,
      kube_config_raw: p.child('kube_config_raw').out,
      kubernetes_version: p.child('kubernetes_version').out,
      local_account_disabled: p.child('local_account_disabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      node_os_upgrade_channel: p.child('node_os_upgrade_channel').out,
      node_resource_group: p.child('node_resource_group').out,
      node_resource_group_id: p.child('node_resource_group_id').out,
      oidc_issuer_enabled: p.child('oidc_issuer_enabled').out,
      oidc_issuer_url: p.child('oidc_issuer_url').out,
      open_service_mesh_enabled: p.child('open_service_mesh_enabled').out,
      portal_fqdn: p.child('portal_fqdn').out,
      private_cluster_enabled: p.child('private_cluster_enabled').out,
      private_cluster_public_fqdn_enabled: p.child('private_cluster_public_fqdn_enabled').out,
      private_dns_zone_id: p.child('private_dns_zone_id').out,
      private_fqdn: p.child('private_fqdn').out,
      resource_group_name: p.child('resource_group_name').out,
      role_based_access_control_enabled: p.child('role_based_access_control_enabled').out,
      run_command_enabled: p.child('run_command_enabled').out,
      sku_tier: p.child('sku_tier').out,
      support_plan: p.child('support_plan').out,
      tags: p.child('tags').out,
      workload_identity_enabled: p.child('workload_identity_enabled').out,
    },
    kubernetes_cluster_extension(name, block): {
      local p = path(['azurerm_kubernetes_cluster_extension', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kubernetes_cluster_extension: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
                configuration_protected_settings: build.template(std.get(block, 'configuration_protected_settings', null, true)),
                configuration_settings: build.template(std.get(block, 'configuration_settings', null, true)),
                extension_type: build.template(block.extension_type),
                name: build.template(block.name),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      aks_assigned_identity: p.child('aks_assigned_identity').out,
      cluster_id: p.child('cluster_id').out,
      configuration_protected_settings: p.child('configuration_protected_settings').out,
      configuration_settings: p.child('configuration_settings').out,
      current_version: p.child('current_version').out,
      extension_type: p.child('extension_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      release_namespace: p.child('release_namespace').out,
      release_train: p.child('release_train').out,
      target_namespace: p.child('target_namespace').out,
      version: p.child('version').out,
    },
    kubernetes_cluster_node_pool(name, block): {
      local p = path(['azurerm_kubernetes_cluster_node_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kubernetes_cluster_node_pool: {
              [name]: std.prune({
                auto_scaling_enabled: build.template(std.get(block, 'auto_scaling_enabled', null, true)),
                capacity_reservation_group_id: build.template(std.get(block, 'capacity_reservation_group_id', null, true)),
                eviction_policy: build.template(std.get(block, 'eviction_policy', null, true)),
                fips_enabled: build.template(std.get(block, 'fips_enabled', null, true)),
                gpu_instance: build.template(std.get(block, 'gpu_instance', null, true)),
                host_encryption_enabled: build.template(std.get(block, 'host_encryption_enabled', null, true)),
                host_group_id: build.template(std.get(block, 'host_group_id', null, true)),
                kubernetes_cluster_id: build.template(block.kubernetes_cluster_id),
                max_count: build.template(std.get(block, 'max_count', null, true)),
                min_count: build.template(std.get(block, 'min_count', null, true)),
                mode: build.template(std.get(block, 'mode', null, true)),
                name: build.template(block.name),
                node_public_ip_enabled: build.template(std.get(block, 'node_public_ip_enabled', null, true)),
                node_public_ip_prefix_id: build.template(std.get(block, 'node_public_ip_prefix_id', null, true)),
                node_taints: build.template(std.get(block, 'node_taints', null, true)),
                os_disk_type: build.template(std.get(block, 'os_disk_type', null, true)),
                os_type: build.template(std.get(block, 'os_type', null, true)),
                pod_subnet_id: build.template(std.get(block, 'pod_subnet_id', null, true)),
                priority: build.template(std.get(block, 'priority', null, true)),
                proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null, true)),
                scale_down_mode: build.template(std.get(block, 'scale_down_mode', null, true)),
                snapshot_id: build.template(std.get(block, 'snapshot_id', null, true)),
                spot_max_price: build.template(std.get(block, 'spot_max_price', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                ultra_ssd_enabled: build.template(std.get(block, 'ultra_ssd_enabled', null, true)),
                vm_size: build.template(block.vm_size),
                vnet_subnet_id: build.template(std.get(block, 'vnet_subnet_id', null, true)),
                workload_runtime: build.template(std.get(block, 'workload_runtime', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      auto_scaling_enabled: p.child('auto_scaling_enabled').out,
      capacity_reservation_group_id: p.child('capacity_reservation_group_id').out,
      eviction_policy: p.child('eviction_policy').out,
      fips_enabled: p.child('fips_enabled').out,
      gpu_instance: p.child('gpu_instance').out,
      host_encryption_enabled: p.child('host_encryption_enabled').out,
      host_group_id: p.child('host_group_id').out,
      id: p.child('id').out,
      kubelet_disk_type: p.child('kubelet_disk_type').out,
      kubernetes_cluster_id: p.child('kubernetes_cluster_id').out,
      max_count: p.child('max_count').out,
      max_pods: p.child('max_pods').out,
      min_count: p.child('min_count').out,
      mode: p.child('mode').out,
      name: p.child('name').out,
      node_count: p.child('node_count').out,
      node_labels: p.child('node_labels').out,
      node_public_ip_enabled: p.child('node_public_ip_enabled').out,
      node_public_ip_prefix_id: p.child('node_public_ip_prefix_id').out,
      node_taints: p.child('node_taints').out,
      orchestrator_version: p.child('orchestrator_version').out,
      os_disk_size_gb: p.child('os_disk_size_gb').out,
      os_disk_type: p.child('os_disk_type').out,
      os_sku: p.child('os_sku').out,
      os_type: p.child('os_type').out,
      pod_subnet_id: p.child('pod_subnet_id').out,
      priority: p.child('priority').out,
      proximity_placement_group_id: p.child('proximity_placement_group_id').out,
      scale_down_mode: p.child('scale_down_mode').out,
      snapshot_id: p.child('snapshot_id').out,
      spot_max_price: p.child('spot_max_price').out,
      tags: p.child('tags').out,
      ultra_ssd_enabled: p.child('ultra_ssd_enabled').out,
      vm_size: p.child('vm_size').out,
      vnet_subnet_id: p.child('vnet_subnet_id').out,
      workload_runtime: p.child('workload_runtime').out,
      zones: p.child('zones').out,
    },
    kubernetes_cluster_trusted_access_role_binding(name, block): {
      local p = path(['azurerm_kubernetes_cluster_trusted_access_role_binding', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kubernetes_cluster_trusted_access_role_binding: {
              [name]: std.prune({
                kubernetes_cluster_id: build.template(block.kubernetes_cluster_id),
                name: build.template(block.name),
                roles: build.template(block.roles),
                source_resource_id: build.template(block.source_resource_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      kubernetes_cluster_id: p.child('kubernetes_cluster_id').out,
      name: p.child('name').out,
      roles: p.child('roles').out,
      source_resource_id: p.child('source_resource_id').out,
    },
    kubernetes_fleet_manager(name, block): {
      local p = path(['azurerm_kubernetes_fleet_manager', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kubernetes_fleet_manager: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    kubernetes_fleet_member(name, block): {
      local p = path(['azurerm_kubernetes_fleet_member', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kubernetes_fleet_member: {
              [name]: std.prune({
                group: build.template(std.get(block, 'group', null, true)),
                kubernetes_cluster_id: build.template(block.kubernetes_cluster_id),
                kubernetes_fleet_id: build.template(block.kubernetes_fleet_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      group: p.child('group').out,
      id: p.child('id').out,
      kubernetes_cluster_id: p.child('kubernetes_cluster_id').out,
      kubernetes_fleet_id: p.child('kubernetes_fleet_id').out,
      name: p.child('name').out,
    },
    kubernetes_fleet_update_run(name, block): {
      local p = path(['azurerm_kubernetes_fleet_update_run', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kubernetes_fleet_update_run: {
              [name]: std.prune({
                fleet_update_strategy_id: build.template(std.get(block, 'fleet_update_strategy_id', null, true)),
                kubernetes_fleet_manager_id: build.template(block.kubernetes_fleet_manager_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      fleet_update_strategy_id: p.child('fleet_update_strategy_id').out,
      id: p.child('id').out,
      kubernetes_fleet_manager_id: p.child('kubernetes_fleet_manager_id').out,
      name: p.child('name').out,
    },
    kubernetes_fleet_update_strategy(name, block): {
      local p = path(['azurerm_kubernetes_fleet_update_strategy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kubernetes_fleet_update_strategy: {
              [name]: std.prune({
                kubernetes_fleet_manager_id: build.template(block.kubernetes_fleet_manager_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      kubernetes_fleet_manager_id: p.child('kubernetes_fleet_manager_id').out,
      name: p.child('name').out,
    },
    kubernetes_flux_configuration(name, block): {
      local p = path(['azurerm_kubernetes_flux_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kubernetes_flux_configuration: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
                continuous_reconciliation_enabled: build.template(std.get(block, 'continuous_reconciliation_enabled', null, true)),
                name: build.template(block.name),
                namespace: build.template(block.namespace),
                scope: build.template(std.get(block, 'scope', null, true)),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').out,
      continuous_reconciliation_enabled: p.child('continuous_reconciliation_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      namespace: p.child('namespace').out,
      scope: p.child('scope').out,
    },
    kusto_attached_database_configuration(name, block): {
      local p = path(['azurerm_kusto_attached_database_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kusto_attached_database_configuration: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                cluster_resource_id: build.template(block.cluster_resource_id),
                database_name: build.template(block.database_name),
                default_principal_modification_kind: build.template(std.get(block, 'default_principal_modification_kind', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      attached_database_names: p.child('attached_database_names').out,
      cluster_name: p.child('cluster_name').out,
      cluster_resource_id: p.child('cluster_resource_id').out,
      database_name: p.child('database_name').out,
      default_principal_modification_kind: p.child('default_principal_modification_kind').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    kusto_cluster(name, block): {
      local p = path(['azurerm_kusto_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kusto_cluster: {
              [name]: std.prune({
                allowed_fqdns: build.template(std.get(block, 'allowed_fqdns', null, true)),
                allowed_ip_ranges: build.template(std.get(block, 'allowed_ip_ranges', null, true)),
                auto_stop_enabled: build.template(std.get(block, 'auto_stop_enabled', null, true)),
                disk_encryption_enabled: build.template(std.get(block, 'disk_encryption_enabled', null, true)),
                double_encryption_enabled: build.template(std.get(block, 'double_encryption_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                outbound_network_access_restricted: build.template(std.get(block, 'outbound_network_access_restricted', null, true)),
                public_ip_type: build.template(std.get(block, 'public_ip_type', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                purge_enabled: build.template(std.get(block, 'purge_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                streaming_ingestion_enabled: build.template(std.get(block, 'streaming_ingestion_enabled', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      allowed_fqdns: p.child('allowed_fqdns').out,
      allowed_ip_ranges: p.child('allowed_ip_ranges').out,
      auto_stop_enabled: p.child('auto_stop_enabled').out,
      data_ingestion_uri: p.child('data_ingestion_uri').out,
      disk_encryption_enabled: p.child('disk_encryption_enabled').out,
      double_encryption_enabled: p.child('double_encryption_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_network_access_restricted: p.child('outbound_network_access_restricted').out,
      public_ip_type: p.child('public_ip_type').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      purge_enabled: p.child('purge_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      streaming_ingestion_enabled: p.child('streaming_ingestion_enabled').out,
      tags: p.child('tags').out,
      trusted_external_tenants: p.child('trusted_external_tenants').out,
      uri: p.child('uri').out,
      zones: p.child('zones').out,
    },
    kusto_cluster_customer_managed_key(name, block): {
      local p = path(['azurerm_kusto_cluster_customer_managed_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kusto_cluster_customer_managed_key: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
                key_name: build.template(block.key_name),
                key_vault_id: build.template(block.key_vault_id),
                key_version: build.template(std.get(block, 'key_version', null, true)),
                user_identity: build.template(std.get(block, 'user_identity', null, true)),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').out,
      id: p.child('id').out,
      key_name: p.child('key_name').out,
      key_vault_id: p.child('key_vault_id').out,
      key_version: p.child('key_version').out,
      user_identity: p.child('user_identity').out,
    },
    kusto_cluster_managed_private_endpoint(name, block): {
      local p = path(['azurerm_kusto_cluster_managed_private_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kusto_cluster_managed_private_endpoint: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                group_id: build.template(block.group_id),
                name: build.template(block.name),
                private_link_resource_id: build.template(block.private_link_resource_id),
                private_link_resource_region: build.template(std.get(block, 'private_link_resource_region', null, true)),
                request_message: build.template(std.get(block, 'request_message', null, true)),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      cluster_name: p.child('cluster_name').out,
      group_id: p.child('group_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      private_link_resource_id: p.child('private_link_resource_id').out,
      private_link_resource_region: p.child('private_link_resource_region').out,
      request_message: p.child('request_message').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    kusto_cluster_principal_assignment(name, block): {
      local p = path(['azurerm_kusto_cluster_principal_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kusto_cluster_principal_assignment: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                name: build.template(block.name),
                principal_id: build.template(block.principal_id),
                principal_type: build.template(block.principal_type),
                resource_group_name: build.template(block.resource_group_name),
                role: build.template(block.role),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      cluster_name: p.child('cluster_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      principal_id: p.child('principal_id').out,
      principal_name: p.child('principal_name').out,
      principal_type: p.child('principal_type').out,
      resource_group_name: p.child('resource_group_name').out,
      role: p.child('role').out,
      tenant_id: p.child('tenant_id').out,
      tenant_name: p.child('tenant_name').out,
    },
    kusto_cosmosdb_data_connection(name, block): {
      local p = path(['azurerm_kusto_cosmosdb_data_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kusto_cosmosdb_data_connection: {
              [name]: std.prune({
                cosmosdb_container_id: build.template(block.cosmosdb_container_id),
                kusto_database_id: build.template(block.kusto_database_id),
                location: build.template(block.location),
                managed_identity_id: build.template(block.managed_identity_id),
                mapping_rule_name: build.template(std.get(block, 'mapping_rule_name', null, true)),
                name: build.template(block.name),
                retrieval_start_date: build.template(std.get(block, 'retrieval_start_date', null, true)),
                table_name: build.template(block.table_name),
              }),
            },
          },
        },
      },
      cosmosdb_container_id: p.child('cosmosdb_container_id').out,
      id: p.child('id').out,
      kusto_database_id: p.child('kusto_database_id').out,
      location: p.child('location').out,
      managed_identity_id: p.child('managed_identity_id').out,
      mapping_rule_name: p.child('mapping_rule_name').out,
      name: p.child('name').out,
      retrieval_start_date: p.child('retrieval_start_date').out,
      table_name: p.child('table_name').out,
    },
    kusto_database(name, block): {
      local p = path(['azurerm_kusto_database', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kusto_database: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                hot_cache_period: build.template(std.get(block, 'hot_cache_period', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                soft_delete_period: build.template(std.get(block, 'soft_delete_period', null, true)),
              }),
            },
          },
        },
      },
      cluster_name: p.child('cluster_name').out,
      hot_cache_period: p.child('hot_cache_period').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      size: p.child('size').out,
      soft_delete_period: p.child('soft_delete_period').out,
    },
    kusto_database_principal_assignment(name, block): {
      local p = path(['azurerm_kusto_database_principal_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kusto_database_principal_assignment: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                database_name: build.template(block.database_name),
                name: build.template(block.name),
                principal_id: build.template(block.principal_id),
                principal_type: build.template(block.principal_type),
                resource_group_name: build.template(block.resource_group_name),
                role: build.template(block.role),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      cluster_name: p.child('cluster_name').out,
      database_name: p.child('database_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      principal_id: p.child('principal_id').out,
      principal_name: p.child('principal_name').out,
      principal_type: p.child('principal_type').out,
      resource_group_name: p.child('resource_group_name').out,
      role: p.child('role').out,
      tenant_id: p.child('tenant_id').out,
      tenant_name: p.child('tenant_name').out,
    },
    kusto_eventgrid_data_connection(name, block): {
      local p = path(['azurerm_kusto_eventgrid_data_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kusto_eventgrid_data_connection: {
              [name]: std.prune({
                blob_storage_event_type: build.template(std.get(block, 'blob_storage_event_type', null, true)),
                cluster_name: build.template(block.cluster_name),
                data_format: build.template(std.get(block, 'data_format', null, true)),
                database_name: build.template(block.database_name),
                database_routing_type: build.template(std.get(block, 'database_routing_type', null, true)),
                eventgrid_resource_id: build.template(std.get(block, 'eventgrid_resource_id', null, true)),
                eventhub_consumer_group_name: build.template(block.eventhub_consumer_group_name),
                eventhub_id: build.template(block.eventhub_id),
                location: build.template(block.location),
                managed_identity_resource_id: build.template(std.get(block, 'managed_identity_resource_id', null, true)),
                mapping_rule_name: build.template(std.get(block, 'mapping_rule_name', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                skip_first_record: build.template(std.get(block, 'skip_first_record', null, true)),
                storage_account_id: build.template(block.storage_account_id),
                table_name: build.template(std.get(block, 'table_name', null, true)),
              }),
            },
          },
        },
      },
      blob_storage_event_type: p.child('blob_storage_event_type').out,
      cluster_name: p.child('cluster_name').out,
      data_format: p.child('data_format').out,
      database_name: p.child('database_name').out,
      database_routing_type: p.child('database_routing_type').out,
      eventgrid_resource_id: p.child('eventgrid_resource_id').out,
      eventhub_consumer_group_name: p.child('eventhub_consumer_group_name').out,
      eventhub_id: p.child('eventhub_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      managed_identity_resource_id: p.child('managed_identity_resource_id').out,
      mapping_rule_name: p.child('mapping_rule_name').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      skip_first_record: p.child('skip_first_record').out,
      storage_account_id: p.child('storage_account_id').out,
      table_name: p.child('table_name').out,
    },
    kusto_eventhub_data_connection(name, block): {
      local p = path(['azurerm_kusto_eventhub_data_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kusto_eventhub_data_connection: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                compression: build.template(std.get(block, 'compression', null, true)),
                consumer_group: build.template(block.consumer_group),
                data_format: build.template(std.get(block, 'data_format', null, true)),
                database_name: build.template(block.database_name),
                database_routing_type: build.template(std.get(block, 'database_routing_type', null, true)),
                eventhub_id: build.template(block.eventhub_id),
                identity_id: build.template(std.get(block, 'identity_id', null, true)),
                location: build.template(block.location),
                mapping_rule_name: build.template(std.get(block, 'mapping_rule_name', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                table_name: build.template(std.get(block, 'table_name', null, true)),
              }),
            },
          },
        },
      },
      cluster_name: p.child('cluster_name').out,
      compression: p.child('compression').out,
      consumer_group: p.child('consumer_group').out,
      data_format: p.child('data_format').out,
      database_name: p.child('database_name').out,
      database_routing_type: p.child('database_routing_type').out,
      event_system_properties: p.child('event_system_properties').out,
      eventhub_id: p.child('eventhub_id').out,
      id: p.child('id').out,
      identity_id: p.child('identity_id').out,
      location: p.child('location').out,
      mapping_rule_name: p.child('mapping_rule_name').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      table_name: p.child('table_name').out,
    },
    kusto_iothub_data_connection(name, block): {
      local p = path(['azurerm_kusto_iothub_data_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kusto_iothub_data_connection: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                consumer_group: build.template(block.consumer_group),
                data_format: build.template(std.get(block, 'data_format', null, true)),
                database_name: build.template(block.database_name),
                database_routing_type: build.template(std.get(block, 'database_routing_type', null, true)),
                event_system_properties: build.template(std.get(block, 'event_system_properties', null, true)),
                iothub_id: build.template(block.iothub_id),
                location: build.template(block.location),
                mapping_rule_name: build.template(std.get(block, 'mapping_rule_name', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                shared_access_policy_name: build.template(block.shared_access_policy_name),
                table_name: build.template(std.get(block, 'table_name', null, true)),
              }),
            },
          },
        },
      },
      cluster_name: p.child('cluster_name').out,
      consumer_group: p.child('consumer_group').out,
      data_format: p.child('data_format').out,
      database_name: p.child('database_name').out,
      database_routing_type: p.child('database_routing_type').out,
      event_system_properties: p.child('event_system_properties').out,
      id: p.child('id').out,
      iothub_id: p.child('iothub_id').out,
      location: p.child('location').out,
      mapping_rule_name: p.child('mapping_rule_name').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      shared_access_policy_name: p.child('shared_access_policy_name').out,
      table_name: p.child('table_name').out,
    },
    kusto_script(name, block): {
      local p = path(['azurerm_kusto_script', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_kusto_script: {
              [name]: std.prune({
                continue_on_errors_enabled: build.template(std.get(block, 'continue_on_errors_enabled', null, true)),
                database_id: build.template(block.database_id),
                name: build.template(block.name),
                sas_token: build.template(std.get(block, 'sas_token', null, true)),
                script_content: build.template(std.get(block, 'script_content', null, true)),
                url: build.template(std.get(block, 'url', null, true)),
              }),
            },
          },
        },
      },
      continue_on_errors_enabled: p.child('continue_on_errors_enabled').out,
      database_id: p.child('database_id').out,
      force_an_update_when_value_changed: p.child('force_an_update_when_value_changed').out,
      id: p.child('id').out,
      name: p.child('name').out,
      sas_token: p.child('sas_token').out,
      script_content: p.child('script_content').out,
      url: p.child('url').out,
    },
    lb(name, block): {
      local p = path(['azurerm_lb', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_lb: {
              [name]: std.prune({
                edge_zone: build.template(std.get(block, 'edge_zone', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(std.get(block, 'sku', null, true)),
                sku_tier: build.template(std.get(block, 'sku_tier', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      edge_zone: p.child('edge_zone').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_ip_address: p.child('private_ip_address').out,
      private_ip_addresses: p.child('private_ip_addresses').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      sku_tier: p.child('sku_tier').out,
      tags: p.child('tags').out,
    },
    lb_backend_address_pool(name, block): {
      local p = path(['azurerm_lb_backend_address_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_lb_backend_address_pool: {
              [name]: std.prune({
                loadbalancer_id: build.template(block.loadbalancer_id),
                name: build.template(block.name),
                synchronous_mode: build.template(std.get(block, 'synchronous_mode', null, true)),
                virtual_network_id: build.template(std.get(block, 'virtual_network_id', null, true)),
              }),
            },
          },
        },
      },
      backend_ip_configurations: p.child('backend_ip_configurations').out,
      id: p.child('id').out,
      inbound_nat_rules: p.child('inbound_nat_rules').out,
      load_balancing_rules: p.child('load_balancing_rules').out,
      loadbalancer_id: p.child('loadbalancer_id').out,
      name: p.child('name').out,
      outbound_rules: p.child('outbound_rules').out,
      synchronous_mode: p.child('synchronous_mode').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    lb_backend_address_pool_address(name, block): {
      local p = path(['azurerm_lb_backend_address_pool_address', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_lb_backend_address_pool_address: {
              [name]: std.prune({
                backend_address_ip_configuration_id: build.template(std.get(block, 'backend_address_ip_configuration_id', null, true)),
                backend_address_pool_id: build.template(block.backend_address_pool_id),
                ip_address: build.template(std.get(block, 'ip_address', null, true)),
                name: build.template(block.name),
                virtual_network_id: build.template(std.get(block, 'virtual_network_id', null, true)),
              }),
            },
          },
        },
      },
      backend_address_ip_configuration_id: p.child('backend_address_ip_configuration_id').out,
      backend_address_pool_id: p.child('backend_address_pool_id').out,
      id: p.child('id').out,
      inbound_nat_rule_port_mapping: p.child('inbound_nat_rule_port_mapping').out,
      ip_address: p.child('ip_address').out,
      name: p.child('name').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    lb_nat_pool(name, block): {
      local p = path(['azurerm_lb_nat_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_lb_nat_pool: {
              [name]: std.prune({
                backend_port: build.template(block.backend_port),
                floating_ip_enabled: build.template(std.get(block, 'floating_ip_enabled', null, true)),
                frontend_ip_configuration_name: build.template(block.frontend_ip_configuration_name),
                frontend_port_end: build.template(block.frontend_port_end),
                frontend_port_start: build.template(block.frontend_port_start),
                idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null, true)),
                loadbalancer_id: build.template(block.loadbalancer_id),
                name: build.template(block.name),
                protocol: build.template(block.protocol),
                resource_group_name: build.template(block.resource_group_name),
                tcp_reset_enabled: build.template(std.get(block, 'tcp_reset_enabled', null, true)),
              }),
            },
          },
        },
      },
      backend_port: p.child('backend_port').out,
      floating_ip_enabled: p.child('floating_ip_enabled').out,
      frontend_ip_configuration_id: p.child('frontend_ip_configuration_id').out,
      frontend_ip_configuration_name: p.child('frontend_ip_configuration_name').out,
      frontend_port_end: p.child('frontend_port_end').out,
      frontend_port_start: p.child('frontend_port_start').out,
      id: p.child('id').out,
      idle_timeout_in_minutes: p.child('idle_timeout_in_minutes').out,
      loadbalancer_id: p.child('loadbalancer_id').out,
      name: p.child('name').out,
      protocol: p.child('protocol').out,
      resource_group_name: p.child('resource_group_name').out,
      tcp_reset_enabled: p.child('tcp_reset_enabled').out,
    },
    lb_nat_rule(name, block): {
      local p = path(['azurerm_lb_nat_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_lb_nat_rule: {
              [name]: std.prune({
                backend_address_pool_id: build.template(std.get(block, 'backend_address_pool_id', null, true)),
                backend_port: build.template(block.backend_port),
                enable_tcp_reset: build.template(std.get(block, 'enable_tcp_reset', null, true)),
                frontend_ip_configuration_name: build.template(block.frontend_ip_configuration_name),
                frontend_port: build.template(std.get(block, 'frontend_port', null, true)),
                frontend_port_end: build.template(std.get(block, 'frontend_port_end', null, true)),
                frontend_port_start: build.template(std.get(block, 'frontend_port_start', null, true)),
                idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null, true)),
                loadbalancer_id: build.template(block.loadbalancer_id),
                name: build.template(block.name),
                protocol: build.template(block.protocol),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      backend_address_pool_id: p.child('backend_address_pool_id').out,
      backend_ip_configuration_id: p.child('backend_ip_configuration_id').out,
      backend_port: p.child('backend_port').out,
      enable_floating_ip: p.child('enable_floating_ip').out,
      enable_tcp_reset: p.child('enable_tcp_reset').out,
      frontend_ip_configuration_id: p.child('frontend_ip_configuration_id').out,
      frontend_ip_configuration_name: p.child('frontend_ip_configuration_name').out,
      frontend_port: p.child('frontend_port').out,
      frontend_port_end: p.child('frontend_port_end').out,
      frontend_port_start: p.child('frontend_port_start').out,
      id: p.child('id').out,
      idle_timeout_in_minutes: p.child('idle_timeout_in_minutes').out,
      loadbalancer_id: p.child('loadbalancer_id').out,
      name: p.child('name').out,
      protocol: p.child('protocol').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    lb_outbound_rule(name, block): {
      local p = path(['azurerm_lb_outbound_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_lb_outbound_rule: {
              [name]: std.prune({
                allocated_outbound_ports: build.template(std.get(block, 'allocated_outbound_ports', null, true)),
                backend_address_pool_id: build.template(block.backend_address_pool_id),
                enable_tcp_reset: build.template(std.get(block, 'enable_tcp_reset', null, true)),
                idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null, true)),
                loadbalancer_id: build.template(block.loadbalancer_id),
                name: build.template(block.name),
                protocol: build.template(block.protocol),
              }),
            },
          },
        },
      },
      allocated_outbound_ports: p.child('allocated_outbound_ports').out,
      backend_address_pool_id: p.child('backend_address_pool_id').out,
      enable_tcp_reset: p.child('enable_tcp_reset').out,
      id: p.child('id').out,
      idle_timeout_in_minutes: p.child('idle_timeout_in_minutes').out,
      loadbalancer_id: p.child('loadbalancer_id').out,
      name: p.child('name').out,
      protocol: p.child('protocol').out,
    },
    lb_probe(name, block): {
      local p = path(['azurerm_lb_probe', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_lb_probe: {
              [name]: std.prune({
                interval_in_seconds: build.template(std.get(block, 'interval_in_seconds', null, true)),
                loadbalancer_id: build.template(block.loadbalancer_id),
                name: build.template(block.name),
                number_of_probes: build.template(std.get(block, 'number_of_probes', null, true)),
                port: build.template(block.port),
                probe_threshold: build.template(std.get(block, 'probe_threshold', null, true)),
                protocol: build.template(std.get(block, 'protocol', null, true)),
                request_path: build.template(std.get(block, 'request_path', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      interval_in_seconds: p.child('interval_in_seconds').out,
      load_balancer_rules: p.child('load_balancer_rules').out,
      loadbalancer_id: p.child('loadbalancer_id').out,
      name: p.child('name').out,
      number_of_probes: p.child('number_of_probes').out,
      port: p.child('port').out,
      probe_threshold: p.child('probe_threshold').out,
      protocol: p.child('protocol').out,
      request_path: p.child('request_path').out,
    },
    lb_rule(name, block): {
      local p = path(['azurerm_lb_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_lb_rule: {
              [name]: std.prune({
                backend_address_pool_ids: build.template(std.get(block, 'backend_address_pool_ids', null, true)),
                backend_port: build.template(block.backend_port),
                disable_outbound_snat: build.template(std.get(block, 'disable_outbound_snat', null, true)),
                enable_floating_ip: build.template(std.get(block, 'enable_floating_ip', null, true)),
                enable_tcp_reset: build.template(std.get(block, 'enable_tcp_reset', null, true)),
                frontend_ip_configuration_name: build.template(block.frontend_ip_configuration_name),
                frontend_port: build.template(block.frontend_port),
                idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null, true)),
                load_distribution: build.template(std.get(block, 'load_distribution', null, true)),
                loadbalancer_id: build.template(block.loadbalancer_id),
                name: build.template(block.name),
                probe_id: build.template(std.get(block, 'probe_id', null, true)),
                protocol: build.template(block.protocol),
              }),
            },
          },
        },
      },
      backend_address_pool_ids: p.child('backend_address_pool_ids').out,
      backend_port: p.child('backend_port').out,
      disable_outbound_snat: p.child('disable_outbound_snat').out,
      enable_floating_ip: p.child('enable_floating_ip').out,
      enable_tcp_reset: p.child('enable_tcp_reset').out,
      frontend_ip_configuration_id: p.child('frontend_ip_configuration_id').out,
      frontend_ip_configuration_name: p.child('frontend_ip_configuration_name').out,
      frontend_port: p.child('frontend_port').out,
      id: p.child('id').out,
      idle_timeout_in_minutes: p.child('idle_timeout_in_minutes').out,
      load_distribution: p.child('load_distribution').out,
      loadbalancer_id: p.child('loadbalancer_id').out,
      name: p.child('name').out,
      probe_id: p.child('probe_id').out,
      protocol: p.child('protocol').out,
    },
    lighthouse_assignment(name, block): {
      local p = path(['azurerm_lighthouse_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_lighthouse_assignment: {
              [name]: std.prune({
                lighthouse_definition_id: build.template(block.lighthouse_definition_id),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      lighthouse_definition_id: p.child('lighthouse_definition_id').out,
      name: p.child('name').out,
      scope: p.child('scope').out,
    },
    lighthouse_definition(name, block): {
      local p = path(['azurerm_lighthouse_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_lighthouse_definition: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                managing_tenant_id: build.template(block.managing_tenant_id),
                name: build.template(block.name),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      lighthouse_definition_id: p.child('lighthouse_definition_id').out,
      managing_tenant_id: p.child('managing_tenant_id').out,
      name: p.child('name').out,
      scope: p.child('scope').out,
    },
    linux_function_app(name, block): {
      local p = path(['azurerm_linux_function_app', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_linux_function_app: {
              [name]: std.prune({
                app_settings: build.template(std.get(block, 'app_settings', null, true)),
                builtin_logging_enabled: build.template(std.get(block, 'builtin_logging_enabled', null, true)),
                client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null, true)),
                client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null, true)),
                client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null, true)),
                content_share_force_disabled: build.template(std.get(block, 'content_share_force_disabled', null, true)),
                daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null, true)),
                functions_extension_version: build.template(std.get(block, 'functions_extension_version', null, true)),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                service_plan_id: build.template(block.service_plan_id),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_account_name: build.template(std.get(block, 'storage_account_name', null, true)),
                storage_key_vault_secret_id: build.template(std.get(block, 'storage_key_vault_secret_id', null, true)),
                storage_uses_managed_identity: build.template(std.get(block, 'storage_uses_managed_identity', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null, true)),
                vnet_image_pull_enabled: build.template(std.get(block, 'vnet_image_pull_enabled', null, true)),
                webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null, true)),
              }),
            },
          },
        },
      },
      app_settings: p.child('app_settings').out,
      builtin_logging_enabled: p.child('builtin_logging_enabled').out,
      client_certificate_enabled: p.child('client_certificate_enabled').out,
      client_certificate_exclusion_paths: p.child('client_certificate_exclusion_paths').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      content_share_force_disabled: p.child('content_share_force_disabled').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      daily_memory_time_quota: p.child('daily_memory_time_quota').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      ftp_publish_basic_authentication_enabled: p.child('ftp_publish_basic_authentication_enabled').out,
      functions_extension_version: p.child('functions_extension_version').out,
      hosting_environment_id: p.child('hosting_environment_id').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      key_vault_reference_identity_id: p.child('key_vault_reference_identity_id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      service_plan_id: p.child('service_plan_id').out,
      site_credential: p.child('site_credential').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_name: p.child('storage_account_name').out,
      storage_key_vault_secret_id: p.child('storage_key_vault_secret_id').out,
      storage_uses_managed_identity: p.child('storage_uses_managed_identity').out,
      tags: p.child('tags').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
      vnet_image_pull_enabled: p.child('vnet_image_pull_enabled').out,
      webdeploy_publish_basic_authentication_enabled: p.child('webdeploy_publish_basic_authentication_enabled').out,
      zip_deploy_file: p.child('zip_deploy_file').out,
    },
    linux_function_app_slot(name, block): {
      local p = path(['azurerm_linux_function_app_slot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_linux_function_app_slot: {
              [name]: std.prune({
                app_settings: build.template(std.get(block, 'app_settings', null, true)),
                builtin_logging_enabled: build.template(std.get(block, 'builtin_logging_enabled', null, true)),
                client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null, true)),
                client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null, true)),
                client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null, true)),
                content_share_force_disabled: build.template(std.get(block, 'content_share_force_disabled', null, true)),
                daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null, true)),
                function_app_id: build.template(block.function_app_id),
                functions_extension_version: build.template(std.get(block, 'functions_extension_version', null, true)),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                service_plan_id: build.template(std.get(block, 'service_plan_id', null, true)),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_account_name: build.template(std.get(block, 'storage_account_name', null, true)),
                storage_key_vault_secret_id: build.template(std.get(block, 'storage_key_vault_secret_id', null, true)),
                storage_uses_managed_identity: build.template(std.get(block, 'storage_uses_managed_identity', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null, true)),
                vnet_image_pull_enabled: build.template(std.get(block, 'vnet_image_pull_enabled', null, true)),
                webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null, true)),
              }),
            },
          },
        },
      },
      app_settings: p.child('app_settings').out,
      builtin_logging_enabled: p.child('builtin_logging_enabled').out,
      client_certificate_enabled: p.child('client_certificate_enabled').out,
      client_certificate_exclusion_paths: p.child('client_certificate_exclusion_paths').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      content_share_force_disabled: p.child('content_share_force_disabled').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      daily_memory_time_quota: p.child('daily_memory_time_quota').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      ftp_publish_basic_authentication_enabled: p.child('ftp_publish_basic_authentication_enabled').out,
      function_app_id: p.child('function_app_id').out,
      functions_extension_version: p.child('functions_extension_version').out,
      hosting_environment_id: p.child('hosting_environment_id').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      key_vault_reference_identity_id: p.child('key_vault_reference_identity_id').out,
      kind: p.child('kind').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      service_plan_id: p.child('service_plan_id').out,
      site_credential: p.child('site_credential').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_name: p.child('storage_account_name').out,
      storage_key_vault_secret_id: p.child('storage_key_vault_secret_id').out,
      storage_uses_managed_identity: p.child('storage_uses_managed_identity').out,
      tags: p.child('tags').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
      vnet_image_pull_enabled: p.child('vnet_image_pull_enabled').out,
      webdeploy_publish_basic_authentication_enabled: p.child('webdeploy_publish_basic_authentication_enabled').out,
    },
    linux_virtual_machine(name, block): {
      local p = path(['azurerm_linux_virtual_machine', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_linux_virtual_machine: {
              [name]: std.prune({
                admin_password: build.template(std.get(block, 'admin_password', null, true)),
                admin_username: build.template(block.admin_username),
                allow_extension_operations: build.template(std.get(block, 'allow_extension_operations', null, true)),
                availability_set_id: build.template(std.get(block, 'availability_set_id', null, true)),
                bypass_platform_safety_checks_on_user_schedule_enabled: build.template(std.get(block, 'bypass_platform_safety_checks_on_user_schedule_enabled', null, true)),
                capacity_reservation_group_id: build.template(std.get(block, 'capacity_reservation_group_id', null, true)),
                custom_data: build.template(std.get(block, 'custom_data', null, true)),
                dedicated_host_group_id: build.template(std.get(block, 'dedicated_host_group_id', null, true)),
                dedicated_host_id: build.template(std.get(block, 'dedicated_host_id', null, true)),
                disable_password_authentication: build.template(std.get(block, 'disable_password_authentication', null, true)),
                edge_zone: build.template(std.get(block, 'edge_zone', null, true)),
                encryption_at_host_enabled: build.template(std.get(block, 'encryption_at_host_enabled', null, true)),
                eviction_policy: build.template(std.get(block, 'eviction_policy', null, true)),
                extensions_time_budget: build.template(std.get(block, 'extensions_time_budget', null, true)),
                license_type: build.template(std.get(block, 'license_type', null, true)),
                location: build.template(block.location),
                max_bid_price: build.template(std.get(block, 'max_bid_price', null, true)),
                name: build.template(block.name),
                network_interface_ids: build.template(block.network_interface_ids),
                patch_assessment_mode: build.template(std.get(block, 'patch_assessment_mode', null, true)),
                patch_mode: build.template(std.get(block, 'patch_mode', null, true)),
                platform_fault_domain: build.template(std.get(block, 'platform_fault_domain', null, true)),
                priority: build.template(std.get(block, 'priority', null, true)),
                provision_vm_agent: build.template(std.get(block, 'provision_vm_agent', null, true)),
                proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null, true)),
                reboot_setting: build.template(std.get(block, 'reboot_setting', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                secure_boot_enabled: build.template(std.get(block, 'secure_boot_enabled', null, true)),
                size: build.template(block.size),
                source_image_id: build.template(std.get(block, 'source_image_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_data: build.template(std.get(block, 'user_data', null, true)),
                virtual_machine_scale_set_id: build.template(std.get(block, 'virtual_machine_scale_set_id', null, true)),
                vm_agent_platform_updates_enabled: build.template(std.get(block, 'vm_agent_platform_updates_enabled', null, true)),
                vtpm_enabled: build.template(std.get(block, 'vtpm_enabled', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      admin_password: p.child('admin_password').out,
      admin_username: p.child('admin_username').out,
      allow_extension_operations: p.child('allow_extension_operations').out,
      availability_set_id: p.child('availability_set_id').out,
      bypass_platform_safety_checks_on_user_schedule_enabled: p.child('bypass_platform_safety_checks_on_user_schedule_enabled').out,
      capacity_reservation_group_id: p.child('capacity_reservation_group_id').out,
      computer_name: p.child('computer_name').out,
      custom_data: p.child('custom_data').out,
      dedicated_host_group_id: p.child('dedicated_host_group_id').out,
      dedicated_host_id: p.child('dedicated_host_id').out,
      disable_password_authentication: p.child('disable_password_authentication').out,
      disk_controller_type: p.child('disk_controller_type').out,
      edge_zone: p.child('edge_zone').out,
      encryption_at_host_enabled: p.child('encryption_at_host_enabled').out,
      eviction_policy: p.child('eviction_policy').out,
      extensions_time_budget: p.child('extensions_time_budget').out,
      id: p.child('id').out,
      license_type: p.child('license_type').out,
      location: p.child('location').out,
      max_bid_price: p.child('max_bid_price').out,
      name: p.child('name').out,
      network_interface_ids: p.child('network_interface_ids').out,
      patch_assessment_mode: p.child('patch_assessment_mode').out,
      patch_mode: p.child('patch_mode').out,
      platform_fault_domain: p.child('platform_fault_domain').out,
      priority: p.child('priority').out,
      private_ip_address: p.child('private_ip_address').out,
      private_ip_addresses: p.child('private_ip_addresses').out,
      provision_vm_agent: p.child('provision_vm_agent').out,
      proximity_placement_group_id: p.child('proximity_placement_group_id').out,
      public_ip_address: p.child('public_ip_address').out,
      public_ip_addresses: p.child('public_ip_addresses').out,
      reboot_setting: p.child('reboot_setting').out,
      resource_group_name: p.child('resource_group_name').out,
      secure_boot_enabled: p.child('secure_boot_enabled').out,
      size: p.child('size').out,
      source_image_id: p.child('source_image_id').out,
      tags: p.child('tags').out,
      user_data: p.child('user_data').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
      virtual_machine_scale_set_id: p.child('virtual_machine_scale_set_id').out,
      vm_agent_platform_updates_enabled: p.child('vm_agent_platform_updates_enabled').out,
      vtpm_enabled: p.child('vtpm_enabled').out,
      zone: p.child('zone').out,
    },
    linux_virtual_machine_scale_set(name, block): {
      local p = path(['azurerm_linux_virtual_machine_scale_set', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_linux_virtual_machine_scale_set: {
              [name]: std.prune({
                admin_password: build.template(std.get(block, 'admin_password', null, true)),
                admin_username: build.template(block.admin_username),
                capacity_reservation_group_id: build.template(std.get(block, 'capacity_reservation_group_id', null, true)),
                custom_data: build.template(std.get(block, 'custom_data', null, true)),
                disable_password_authentication: build.template(std.get(block, 'disable_password_authentication', null, true)),
                do_not_run_extensions_on_overprovisioned_machines: build.template(std.get(block, 'do_not_run_extensions_on_overprovisioned_machines', null, true)),
                edge_zone: build.template(std.get(block, 'edge_zone', null, true)),
                encryption_at_host_enabled: build.template(std.get(block, 'encryption_at_host_enabled', null, true)),
                eviction_policy: build.template(std.get(block, 'eviction_policy', null, true)),
                extension_operations_enabled: build.template(std.get(block, 'extension_operations_enabled', null, true)),
                extensions_time_budget: build.template(std.get(block, 'extensions_time_budget', null, true)),
                health_probe_id: build.template(std.get(block, 'health_probe_id', null, true)),
                host_group_id: build.template(std.get(block, 'host_group_id', null, true)),
                instances: build.template(std.get(block, 'instances', null, true)),
                location: build.template(block.location),
                max_bid_price: build.template(std.get(block, 'max_bid_price', null, true)),
                name: build.template(block.name),
                overprovision: build.template(std.get(block, 'overprovision', null, true)),
                priority: build.template(std.get(block, 'priority', null, true)),
                provision_vm_agent: build.template(std.get(block, 'provision_vm_agent', null, true)),
                proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                secure_boot_enabled: build.template(std.get(block, 'secure_boot_enabled', null, true)),
                single_placement_group: build.template(std.get(block, 'single_placement_group', null, true)),
                sku: build.template(block.sku),
                source_image_id: build.template(std.get(block, 'source_image_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                upgrade_mode: build.template(std.get(block, 'upgrade_mode', null, true)),
                user_data: build.template(std.get(block, 'user_data', null, true)),
                vtpm_enabled: build.template(std.get(block, 'vtpm_enabled', null, true)),
                zone_balance: build.template(std.get(block, 'zone_balance', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      admin_password: p.child('admin_password').out,
      admin_username: p.child('admin_username').out,
      capacity_reservation_group_id: p.child('capacity_reservation_group_id').out,
      computer_name_prefix: p.child('computer_name_prefix').out,
      custom_data: p.child('custom_data').out,
      disable_password_authentication: p.child('disable_password_authentication').out,
      do_not_run_extensions_on_overprovisioned_machines: p.child('do_not_run_extensions_on_overprovisioned_machines').out,
      edge_zone: p.child('edge_zone').out,
      encryption_at_host_enabled: p.child('encryption_at_host_enabled').out,
      eviction_policy: p.child('eviction_policy').out,
      extension_operations_enabled: p.child('extension_operations_enabled').out,
      extensions_time_budget: p.child('extensions_time_budget').out,
      health_probe_id: p.child('health_probe_id').out,
      host_group_id: p.child('host_group_id').out,
      id: p.child('id').out,
      instances: p.child('instances').out,
      location: p.child('location').out,
      max_bid_price: p.child('max_bid_price').out,
      name: p.child('name').out,
      overprovision: p.child('overprovision').out,
      platform_fault_domain_count: p.child('platform_fault_domain_count').out,
      priority: p.child('priority').out,
      provision_vm_agent: p.child('provision_vm_agent').out,
      proximity_placement_group_id: p.child('proximity_placement_group_id').out,
      resource_group_name: p.child('resource_group_name').out,
      secure_boot_enabled: p.child('secure_boot_enabled').out,
      single_placement_group: p.child('single_placement_group').out,
      sku: p.child('sku').out,
      source_image_id: p.child('source_image_id').out,
      tags: p.child('tags').out,
      unique_id: p.child('unique_id').out,
      upgrade_mode: p.child('upgrade_mode').out,
      user_data: p.child('user_data').out,
      vtpm_enabled: p.child('vtpm_enabled').out,
      zone_balance: p.child('zone_balance').out,
      zones: p.child('zones').out,
    },
    linux_web_app(name, block): {
      local p = path(['azurerm_linux_web_app', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_linux_web_app: {
              [name]: std.prune({
                app_settings: build.template(std.get(block, 'app_settings', null, true)),
                client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null, true)),
                client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null, true)),
                client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null, true)),
                client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null, true)),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                service_plan_id: build.template(block.service_plan_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null, true)),
                webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null, true)),
              }),
            },
          },
        },
      },
      app_settings: p.child('app_settings').out,
      client_affinity_enabled: p.child('client_affinity_enabled').out,
      client_certificate_enabled: p.child('client_certificate_enabled').out,
      client_certificate_exclusion_paths: p.child('client_certificate_exclusion_paths').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      ftp_publish_basic_authentication_enabled: p.child('ftp_publish_basic_authentication_enabled').out,
      hosting_environment_id: p.child('hosting_environment_id').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      key_vault_reference_identity_id: p.child('key_vault_reference_identity_id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      service_plan_id: p.child('service_plan_id').out,
      site_credential: p.child('site_credential').out,
      tags: p.child('tags').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
      webdeploy_publish_basic_authentication_enabled: p.child('webdeploy_publish_basic_authentication_enabled').out,
      zip_deploy_file: p.child('zip_deploy_file').out,
    },
    linux_web_app_slot(name, block): {
      local p = path(['azurerm_linux_web_app_slot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_linux_web_app_slot: {
              [name]: std.prune({
                app_service_id: build.template(block.app_service_id),
                app_settings: build.template(std.get(block, 'app_settings', null, true)),
                client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null, true)),
                client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null, true)),
                client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null, true)),
                client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null, true)),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                service_plan_id: build.template(std.get(block, 'service_plan_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null, true)),
                webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null, true)),
              }),
            },
          },
        },
      },
      app_metadata: p.child('app_metadata').out,
      app_service_id: p.child('app_service_id').out,
      app_settings: p.child('app_settings').out,
      client_affinity_enabled: p.child('client_affinity_enabled').out,
      client_certificate_enabled: p.child('client_certificate_enabled').out,
      client_certificate_exclusion_paths: p.child('client_certificate_exclusion_paths').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      ftp_publish_basic_authentication_enabled: p.child('ftp_publish_basic_authentication_enabled').out,
      hosting_environment_id: p.child('hosting_environment_id').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      key_vault_reference_identity_id: p.child('key_vault_reference_identity_id').out,
      kind: p.child('kind').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      service_plan_id: p.child('service_plan_id').out,
      site_credential: p.child('site_credential').out,
      tags: p.child('tags').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
      webdeploy_publish_basic_authentication_enabled: p.child('webdeploy_publish_basic_authentication_enabled').out,
      zip_deploy_file: p.child('zip_deploy_file').out,
    },
    load_test(name, block): {
      local p = path(['azurerm_load_test', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_load_test: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      data_plane_uri: p.child('data_plane_uri').out,
      description: p.child('description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    local_network_gateway(name, block): {
      local p = path(['azurerm_local_network_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_local_network_gateway: {
              [name]: std.prune({
                address_space: build.template(std.get(block, 'address_space', null, true)),
                gateway_address: build.template(std.get(block, 'gateway_address', null, true)),
                gateway_fqdn: build.template(std.get(block, 'gateway_fqdn', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      address_space: p.child('address_space').out,
      gateway_address: p.child('gateway_address').out,
      gateway_fqdn: p.child('gateway_fqdn').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    log_analytics_cluster(name, block): {
      local p = path(['azurerm_log_analytics_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_cluster: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                size_gb: build.template(std.get(block, 'size_gb', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      size_gb: p.child('size_gb').out,
      tags: p.child('tags').out,
    },
    log_analytics_cluster_customer_managed_key(name, block): {
      local p = path(['azurerm_log_analytics_cluster_customer_managed_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_cluster_customer_managed_key: {
              [name]: std.prune({
                key_vault_key_id: build.template(block.key_vault_key_id),
                log_analytics_cluster_id: build.template(block.log_analytics_cluster_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      log_analytics_cluster_id: p.child('log_analytics_cluster_id').out,
    },
    log_analytics_data_export_rule(name, block): {
      local p = path(['azurerm_log_analytics_data_export_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_data_export_rule: {
              [name]: std.prune({
                destination_resource_id: build.template(block.destination_resource_id),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                table_names: build.template(block.table_names),
                workspace_resource_id: build.template(block.workspace_resource_id),
              }),
            },
          },
        },
      },
      destination_resource_id: p.child('destination_resource_id').out,
      enabled: p.child('enabled').out,
      export_rule_id: p.child('export_rule_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      table_names: p.child('table_names').out,
      workspace_resource_id: p.child('workspace_resource_id').out,
    },
    log_analytics_datasource_windows_event(name, block): {
      local p = path(['azurerm_log_analytics_datasource_windows_event', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_datasource_windows_event: {
              [name]: std.prune({
                event_log_name: build.template(block.event_log_name),
                event_types: build.template(block.event_types),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                workspace_name: build.template(block.workspace_name),
              }),
            },
          },
        },
      },
      event_log_name: p.child('event_log_name').out,
      event_types: p.child('event_types').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      workspace_name: p.child('workspace_name').out,
    },
    log_analytics_datasource_windows_performance_counter(name, block): {
      local p = path(['azurerm_log_analytics_datasource_windows_performance_counter', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_datasource_windows_performance_counter: {
              [name]: std.prune({
                counter_name: build.template(block.counter_name),
                instance_name: build.template(block.instance_name),
                interval_seconds: build.template(block.interval_seconds),
                name: build.template(block.name),
                object_name: build.template(block.object_name),
                resource_group_name: build.template(block.resource_group_name),
                workspace_name: build.template(block.workspace_name),
              }),
            },
          },
        },
      },
      counter_name: p.child('counter_name').out,
      id: p.child('id').out,
      instance_name: p.child('instance_name').out,
      interval_seconds: p.child('interval_seconds').out,
      name: p.child('name').out,
      object_name: p.child('object_name').out,
      resource_group_name: p.child('resource_group_name').out,
      workspace_name: p.child('workspace_name').out,
    },
    log_analytics_linked_service(name, block): {
      local p = path(['azurerm_log_analytics_linked_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_linked_service: {
              [name]: std.prune({
                resource_group_name: build.template(block.resource_group_name),
                workspace_id: build.template(block.workspace_id),
                write_access_id: build.template(std.get(block, 'write_access_id', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      read_access_id: p.child('read_access_id').out,
      resource_group_name: p.child('resource_group_name').out,
      workspace_id: p.child('workspace_id').out,
      write_access_id: p.child('write_access_id').out,
    },
    log_analytics_linked_storage_account(name, block): {
      local p = path(['azurerm_log_analytics_linked_storage_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_linked_storage_account: {
              [name]: std.prune({
                data_source_type: build.template(block.data_source_type),
                resource_group_name: build.template(block.resource_group_name),
                storage_account_ids: build.template(block.storage_account_ids),
                workspace_resource_id: build.template(block.workspace_resource_id),
              }),
            },
          },
        },
      },
      data_source_type: p.child('data_source_type').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
      storage_account_ids: p.child('storage_account_ids').out,
      workspace_resource_id: p.child('workspace_resource_id').out,
    },
    log_analytics_query_pack(name, block): {
      local p = path(['azurerm_log_analytics_query_pack', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_query_pack: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    log_analytics_query_pack_query(name, block): {
      local p = path(['azurerm_log_analytics_query_pack_query', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_query_pack_query: {
              [name]: std.prune({
                additional_settings_json: build.template(std.get(block, 'additional_settings_json', null, true)),
                body: build.template(block.body),
                categories: build.template(std.get(block, 'categories', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                query_pack_id: build.template(block.query_pack_id),
                resource_types: build.template(std.get(block, 'resource_types', null, true)),
                solutions: build.template(std.get(block, 'solutions', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      additional_settings_json: p.child('additional_settings_json').out,
      body: p.child('body').out,
      categories: p.child('categories').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      query_pack_id: p.child('query_pack_id').out,
      resource_types: p.child('resource_types').out,
      solutions: p.child('solutions').out,
      tags: p.child('tags').out,
    },
    log_analytics_saved_search(name, block): {
      local p = path(['azurerm_log_analytics_saved_search', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_saved_search: {
              [name]: std.prune({
                category: build.template(block.category),
                display_name: build.template(block.display_name),
                function_alias: build.template(std.get(block, 'function_alias', null, true)),
                function_parameters: build.template(std.get(block, 'function_parameters', null, true)),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
                query: build.template(block.query),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      category: p.child('category').out,
      display_name: p.child('display_name').out,
      function_alias: p.child('function_alias').out,
      function_parameters: p.child('function_parameters').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      query: p.child('query').out,
      tags: p.child('tags').out,
    },
    log_analytics_solution(name, block): {
      local p = path(['azurerm_log_analytics_solution', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_solution: {
              [name]: std.prune({
                location: build.template(block.location),
                resource_group_name: build.template(block.resource_group_name),
                solution_name: build.template(block.solution_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                workspace_name: build.template(block.workspace_name),
                workspace_resource_id: build.template(block.workspace_resource_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      resource_group_name: p.child('resource_group_name').out,
      solution_name: p.child('solution_name').out,
      tags: p.child('tags').out,
      workspace_name: p.child('workspace_name').out,
      workspace_resource_id: p.child('workspace_resource_id').out,
    },
    log_analytics_storage_insights(name, block): {
      local p = path(['azurerm_log_analytics_storage_insights', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_storage_insights: {
              [name]: std.prune({
                blob_container_names: build.template(std.get(block, 'blob_container_names', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                storage_account_id: build.template(block.storage_account_id),
                storage_account_key: build.template(block.storage_account_key),
                table_names: build.template(std.get(block, 'table_names', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      blob_container_names: p.child('blob_container_names').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      storage_account_id: p.child('storage_account_id').out,
      storage_account_key: p.child('storage_account_key').out,
      table_names: p.child('table_names').out,
      workspace_id: p.child('workspace_id').out,
    },
    log_analytics_workspace(name, block): {
      local p = path(['azurerm_log_analytics_workspace', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_workspace: {
              [name]: std.prune({
                allow_resource_only_permissions: build.template(std.get(block, 'allow_resource_only_permissions', null, true)),
                cmk_for_query_forced: build.template(std.get(block, 'cmk_for_query_forced', null, true)),
                daily_quota_gb: build.template(std.get(block, 'daily_quota_gb', null, true)),
                data_collection_rule_id: build.template(std.get(block, 'data_collection_rule_id', null, true)),
                immediate_data_purge_on_30_days_enabled: build.template(std.get(block, 'immediate_data_purge_on_30_days_enabled', null, true)),
                internet_ingestion_enabled: build.template(std.get(block, 'internet_ingestion_enabled', null, true)),
                internet_query_enabled: build.template(std.get(block, 'internet_query_enabled', null, true)),
                local_authentication_disabled: build.template(std.get(block, 'local_authentication_disabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                reservation_capacity_in_gb_per_day: build.template(std.get(block, 'reservation_capacity_in_gb_per_day', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allow_resource_only_permissions: p.child('allow_resource_only_permissions').out,
      cmk_for_query_forced: p.child('cmk_for_query_forced').out,
      daily_quota_gb: p.child('daily_quota_gb').out,
      data_collection_rule_id: p.child('data_collection_rule_id').out,
      id: p.child('id').out,
      immediate_data_purge_on_30_days_enabled: p.child('immediate_data_purge_on_30_days_enabled').out,
      internet_ingestion_enabled: p.child('internet_ingestion_enabled').out,
      internet_query_enabled: p.child('internet_query_enabled').out,
      local_authentication_disabled: p.child('local_authentication_disabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_shared_key: p.child('primary_shared_key').out,
      reservation_capacity_in_gb_per_day: p.child('reservation_capacity_in_gb_per_day').out,
      resource_group_name: p.child('resource_group_name').out,
      retention_in_days: p.child('retention_in_days').out,
      secondary_shared_key: p.child('secondary_shared_key').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
    },
    log_analytics_workspace_table(name, block): {
      local p = path(['azurerm_log_analytics_workspace_table', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_log_analytics_workspace_table: {
              [name]: std.prune({
                name: build.template(block.name),
                plan: build.template(std.get(block, 'plan', null, true)),
                retention_in_days: build.template(std.get(block, 'retention_in_days', null, true)),
                total_retention_in_days: build.template(std.get(block, 'total_retention_in_days', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      plan: p.child('plan').out,
      retention_in_days: p.child('retention_in_days').out,
      total_retention_in_days: p.child('total_retention_in_days').out,
      workspace_id: p.child('workspace_id').out,
    },
    logic_app_action_custom(name, block): {
      local p = path(['azurerm_logic_app_action_custom', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_action_custom: {
              [name]: std.prune({
                body: build.template(block.body),
                logic_app_id: build.template(block.logic_app_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      body: p.child('body').out,
      id: p.child('id').out,
      logic_app_id: p.child('logic_app_id').out,
      name: p.child('name').out,
    },
    logic_app_action_http(name, block): {
      local p = path(['azurerm_logic_app_action_http', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_action_http: {
              [name]: std.prune({
                body: build.template(std.get(block, 'body', null, true)),
                headers: build.template(std.get(block, 'headers', null, true)),
                logic_app_id: build.template(block.logic_app_id),
                method: build.template(block.method),
                name: build.template(block.name),
                queries: build.template(std.get(block, 'queries', null, true)),
                uri: build.template(block.uri),
              }),
            },
          },
        },
      },
      body: p.child('body').out,
      headers: p.child('headers').out,
      id: p.child('id').out,
      logic_app_id: p.child('logic_app_id').out,
      method: p.child('method').out,
      name: p.child('name').out,
      queries: p.child('queries').out,
      uri: p.child('uri').out,
    },
    logic_app_integration_account(name, block): {
      local p = path(['azurerm_logic_app_integration_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_integration_account: {
              [name]: std.prune({
                integration_service_environment_id: build.template(std.get(block, 'integration_service_environment_id', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      integration_service_environment_id: p.child('integration_service_environment_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    logic_app_integration_account_agreement(name, block): {
      local p = path(['azurerm_logic_app_integration_account_agreement', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_integration_account_agreement: {
              [name]: std.prune({
                agreement_type: build.template(block.agreement_type),
                content: build.template(block.content),
                guest_partner_name: build.template(block.guest_partner_name),
                host_partner_name: build.template(block.host_partner_name),
                integration_account_name: build.template(block.integration_account_name),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      agreement_type: p.child('agreement_type').out,
      content: p.child('content').out,
      guest_partner_name: p.child('guest_partner_name').out,
      host_partner_name: p.child('host_partner_name').out,
      id: p.child('id').out,
      integration_account_name: p.child('integration_account_name').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    logic_app_integration_account_assembly(name, block): {
      local p = path(['azurerm_logic_app_integration_account_assembly', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_integration_account_assembly: {
              [name]: std.prune({
                assembly_name: build.template(block.assembly_name),
                assembly_version: build.template(std.get(block, 'assembly_version', null, true)),
                content: build.template(std.get(block, 'content', null, true)),
                content_link_uri: build.template(std.get(block, 'content_link_uri', null, true)),
                integration_account_name: build.template(block.integration_account_name),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      assembly_name: p.child('assembly_name').out,
      assembly_version: p.child('assembly_version').out,
      content: p.child('content').out,
      content_link_uri: p.child('content_link_uri').out,
      id: p.child('id').out,
      integration_account_name: p.child('integration_account_name').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    logic_app_integration_account_batch_configuration(name, block): {
      local p = path(['azurerm_logic_app_integration_account_batch_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_integration_account_batch_configuration: {
              [name]: std.prune({
                batch_group_name: build.template(block.batch_group_name),
                integration_account_name: build.template(block.integration_account_name),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      batch_group_name: p.child('batch_group_name').out,
      id: p.child('id').out,
      integration_account_name: p.child('integration_account_name').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    logic_app_integration_account_certificate(name, block): {
      local p = path(['azurerm_logic_app_integration_account_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_integration_account_certificate: {
              [name]: std.prune({
                integration_account_name: build.template(block.integration_account_name),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                public_certificate: build.template(std.get(block, 'public_certificate', null, true)),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      integration_account_name: p.child('integration_account_name').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      public_certificate: p.child('public_certificate').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    logic_app_integration_account_map(name, block): {
      local p = path(['azurerm_logic_app_integration_account_map', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_integration_account_map: {
              [name]: std.prune({
                content: build.template(block.content),
                integration_account_name: build.template(block.integration_account_name),
                map_type: build.template(block.map_type),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      content: p.child('content').out,
      id: p.child('id').out,
      integration_account_name: p.child('integration_account_name').out,
      map_type: p.child('map_type').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    logic_app_integration_account_partner(name, block): {
      local p = path(['azurerm_logic_app_integration_account_partner', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_integration_account_partner: {
              [name]: std.prune({
                integration_account_name: build.template(block.integration_account_name),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      integration_account_name: p.child('integration_account_name').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    logic_app_integration_account_schema(name, block): {
      local p = path(['azurerm_logic_app_integration_account_schema', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_integration_account_schema: {
              [name]: std.prune({
                content: build.template(block.content),
                file_name: build.template(std.get(block, 'file_name', null, true)),
                integration_account_name: build.template(block.integration_account_name),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      content: p.child('content').out,
      file_name: p.child('file_name').out,
      id: p.child('id').out,
      integration_account_name: p.child('integration_account_name').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    logic_app_integration_account_session(name, block): {
      local p = path(['azurerm_logic_app_integration_account_session', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_integration_account_session: {
              [name]: std.prune({
                content: build.template(block.content),
                integration_account_name: build.template(block.integration_account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      content: p.child('content').out,
      id: p.child('id').out,
      integration_account_name: p.child('integration_account_name').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    logic_app_standard(name, block): {
      local p = path(['azurerm_logic_app_standard', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_standard: {
              [name]: std.prune({
                app_service_plan_id: build.template(block.app_service_plan_id),
                bundle_version: build.template(std.get(block, 'bundle_version', null, true)),
                client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                storage_account_access_key: build.template(block.storage_account_access_key),
                storage_account_name: build.template(block.storage_account_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                use_extension_bundle: build.template(std.get(block, 'use_extension_bundle', null, true)),
                version: build.template(std.get(block, 'version', null, true)),
                virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null, true)),
              }),
            },
          },
        },
      },
      app_service_plan_id: p.child('app_service_plan_id').out,
      app_settings: p.child('app_settings').out,
      bundle_version: p.child('bundle_version').out,
      client_affinity_enabled: p.child('client_affinity_enabled').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      resource_group_name: p.child('resource_group_name').out,
      site_credential: p.child('site_credential').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_name: p.child('storage_account_name').out,
      storage_account_share_name: p.child('storage_account_share_name').out,
      tags: p.child('tags').out,
      use_extension_bundle: p.child('use_extension_bundle').out,
      version: p.child('version').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
    },
    logic_app_trigger_custom(name, block): {
      local p = path(['azurerm_logic_app_trigger_custom', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_trigger_custom: {
              [name]: std.prune({
                body: build.template(block.body),
                logic_app_id: build.template(block.logic_app_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      body: p.child('body').out,
      callback_url: p.child('callback_url').out,
      id: p.child('id').out,
      logic_app_id: p.child('logic_app_id').out,
      name: p.child('name').out,
    },
    logic_app_trigger_http_request(name, block): {
      local p = path(['azurerm_logic_app_trigger_http_request', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_trigger_http_request: {
              [name]: std.prune({
                logic_app_id: build.template(block.logic_app_id),
                method: build.template(std.get(block, 'method', null, true)),
                name: build.template(block.name),
                relative_path: build.template(std.get(block, 'relative_path', null, true)),
                schema: build.template(block.schema),
              }),
            },
          },
        },
      },
      callback_url: p.child('callback_url').out,
      id: p.child('id').out,
      logic_app_id: p.child('logic_app_id').out,
      method: p.child('method').out,
      name: p.child('name').out,
      relative_path: p.child('relative_path').out,
      schema: p.child('schema').out,
    },
    logic_app_trigger_recurrence(name, block): {
      local p = path(['azurerm_logic_app_trigger_recurrence', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_trigger_recurrence: {
              [name]: std.prune({
                frequency: build.template(block.frequency),
                interval: build.template(block.interval),
                logic_app_id: build.template(block.logic_app_id),
                name: build.template(block.name),
                start_time: build.template(std.get(block, 'start_time', null, true)),
              }),
            },
          },
        },
      },
      frequency: p.child('frequency').out,
      id: p.child('id').out,
      interval: p.child('interval').out,
      logic_app_id: p.child('logic_app_id').out,
      name: p.child('name').out,
      start_time: p.child('start_time').out,
      time_zone: p.child('time_zone').out,
    },
    logic_app_workflow(name, block): {
      local p = path(['azurerm_logic_app_workflow', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_logic_app_workflow: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                integration_service_environment_id: build.template(std.get(block, 'integration_service_environment_id', null, true)),
                location: build.template(block.location),
                logic_app_integration_account_id: build.template(std.get(block, 'logic_app_integration_account_id', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                workflow_parameters: build.template(std.get(block, 'workflow_parameters', null, true)),
                workflow_schema: build.template(std.get(block, 'workflow_schema', null, true)),
                workflow_version: build.template(std.get(block, 'workflow_version', null, true)),
              }),
            },
          },
        },
      },
      access_endpoint: p.child('access_endpoint').out,
      connector_endpoint_ip_addresses: p.child('connector_endpoint_ip_addresses').out,
      connector_outbound_ip_addresses: p.child('connector_outbound_ip_addresses').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      integration_service_environment_id: p.child('integration_service_environment_id').out,
      location: p.child('location').out,
      logic_app_integration_account_id: p.child('logic_app_integration_account_id').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      workflow_endpoint_ip_addresses: p.child('workflow_endpoint_ip_addresses').out,
      workflow_outbound_ip_addresses: p.child('workflow_outbound_ip_addresses').out,
      workflow_parameters: p.child('workflow_parameters').out,
      workflow_schema: p.child('workflow_schema').out,
      workflow_version: p.child('workflow_version').out,
    },
    machine_learning_compute_cluster(name, block): {
      local p = path(['azurerm_machine_learning_compute_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_machine_learning_compute_cluster: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null, true)),
                location: build.template(block.location),
                machine_learning_workspace_id: build.template(block.machine_learning_workspace_id),
                name: build.template(block.name),
                node_public_ip_enabled: build.template(std.get(block, 'node_public_ip_enabled', null, true)),
                ssh_public_access_enabled: build.template(std.get(block, 'ssh_public_access_enabled', null, true)),
                subnet_resource_id: build.template(std.get(block, 'subnet_resource_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                vm_priority: build.template(block.vm_priority),
                vm_size: build.template(block.vm_size),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      local_auth_enabled: p.child('local_auth_enabled').out,
      location: p.child('location').out,
      machine_learning_workspace_id: p.child('machine_learning_workspace_id').out,
      name: p.child('name').out,
      node_public_ip_enabled: p.child('node_public_ip_enabled').out,
      ssh_public_access_enabled: p.child('ssh_public_access_enabled').out,
      subnet_resource_id: p.child('subnet_resource_id').out,
      tags: p.child('tags').out,
      vm_priority: p.child('vm_priority').out,
      vm_size: p.child('vm_size').out,
    },
    machine_learning_compute_instance(name, block): {
      local p = path(['azurerm_machine_learning_compute_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_machine_learning_compute_instance: {
              [name]: std.prune({
                authorization_type: build.template(std.get(block, 'authorization_type', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null, true)),
                machine_learning_workspace_id: build.template(block.machine_learning_workspace_id),
                name: build.template(block.name),
                node_public_ip_enabled: build.template(std.get(block, 'node_public_ip_enabled', null, true)),
                subnet_resource_id: build.template(std.get(block, 'subnet_resource_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_machine_size: build.template(block.virtual_machine_size),
              }),
            },
          },
        },
      },
      authorization_type: p.child('authorization_type').out,
      description: p.child('description').out,
      id: p.child('id').out,
      local_auth_enabled: p.child('local_auth_enabled').out,
      machine_learning_workspace_id: p.child('machine_learning_workspace_id').out,
      name: p.child('name').out,
      node_public_ip_enabled: p.child('node_public_ip_enabled').out,
      subnet_resource_id: p.child('subnet_resource_id').out,
      tags: p.child('tags').out,
      virtual_machine_size: p.child('virtual_machine_size').out,
    },
    machine_learning_datastore_blobstorage(name, block): {
      local p = path(['azurerm_machine_learning_datastore_blobstorage', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_machine_learning_datastore_blobstorage: {
              [name]: std.prune({
                account_key: build.template(std.get(block, 'account_key', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                is_default: build.template(std.get(block, 'is_default', null, true)),
                name: build.template(block.name),
                service_data_auth_identity: build.template(std.get(block, 'service_data_auth_identity', null, true)),
                shared_access_signature: build.template(std.get(block, 'shared_access_signature', null, true)),
                storage_container_id: build.template(block.storage_container_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      account_key: p.child('account_key').out,
      description: p.child('description').out,
      id: p.child('id').out,
      is_default: p.child('is_default').out,
      name: p.child('name').out,
      service_data_auth_identity: p.child('service_data_auth_identity').out,
      shared_access_signature: p.child('shared_access_signature').out,
      storage_container_id: p.child('storage_container_id').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
    },
    machine_learning_datastore_datalake_gen2(name, block): {
      local p = path(['azurerm_machine_learning_datastore_datalake_gen2', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_machine_learning_datastore_datalake_gen2: {
              [name]: std.prune({
                authority_url: build.template(std.get(block, 'authority_url', null, true)),
                client_id: build.template(std.get(block, 'client_id', null, true)),
                client_secret: build.template(std.get(block, 'client_secret', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                service_data_identity: build.template(std.get(block, 'service_data_identity', null, true)),
                storage_container_id: build.template(block.storage_container_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                tenant_id: build.template(std.get(block, 'tenant_id', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      authority_url: p.child('authority_url').out,
      client_id: p.child('client_id').out,
      client_secret: p.child('client_secret').out,
      description: p.child('description').out,
      id: p.child('id').out,
      is_default: p.child('is_default').out,
      name: p.child('name').out,
      service_data_identity: p.child('service_data_identity').out,
      storage_container_id: p.child('storage_container_id').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
      workspace_id: p.child('workspace_id').out,
    },
    machine_learning_datastore_fileshare(name, block): {
      local p = path(['azurerm_machine_learning_datastore_fileshare', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_machine_learning_datastore_fileshare: {
              [name]: std.prune({
                account_key: build.template(std.get(block, 'account_key', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                service_data_identity: build.template(std.get(block, 'service_data_identity', null, true)),
                shared_access_signature: build.template(std.get(block, 'shared_access_signature', null, true)),
                storage_fileshare_id: build.template(block.storage_fileshare_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      account_key: p.child('account_key').out,
      description: p.child('description').out,
      id: p.child('id').out,
      is_default: p.child('is_default').out,
      name: p.child('name').out,
      service_data_identity: p.child('service_data_identity').out,
      shared_access_signature: p.child('shared_access_signature').out,
      storage_fileshare_id: p.child('storage_fileshare_id').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
    },
    machine_learning_inference_cluster(name, block): {
      local p = path(['azurerm_machine_learning_inference_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_machine_learning_inference_cluster: {
              [name]: std.prune({
                cluster_purpose: build.template(std.get(block, 'cluster_purpose', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                kubernetes_cluster_id: build.template(block.kubernetes_cluster_id),
                location: build.template(block.location),
                machine_learning_workspace_id: build.template(block.machine_learning_workspace_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      cluster_purpose: p.child('cluster_purpose').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kubernetes_cluster_id: p.child('kubernetes_cluster_id').out,
      location: p.child('location').out,
      machine_learning_workspace_id: p.child('machine_learning_workspace_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    machine_learning_synapse_spark(name, block): {
      local p = path(['azurerm_machine_learning_synapse_spark', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_machine_learning_synapse_spark: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null, true)),
                location: build.template(block.location),
                machine_learning_workspace_id: build.template(block.machine_learning_workspace_id),
                name: build.template(block.name),
                synapse_spark_pool_id: build.template(block.synapse_spark_pool_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      local_auth_enabled: p.child('local_auth_enabled').out,
      location: p.child('location').out,
      machine_learning_workspace_id: p.child('machine_learning_workspace_id').out,
      name: p.child('name').out,
      synapse_spark_pool_id: p.child('synapse_spark_pool_id').out,
      tags: p.child('tags').out,
    },
    machine_learning_workspace(name, block): {
      local p = path(['azurerm_machine_learning_workspace', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_machine_learning_workspace: {
              [name]: std.prune({
                application_insights_id: build.template(block.application_insights_id),
                container_registry_id: build.template(std.get(block, 'container_registry_id', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                friendly_name: build.template(std.get(block, 'friendly_name', null, true)),
                high_business_impact: build.template(std.get(block, 'high_business_impact', null, true)),
                image_build_compute_name: build.template(std.get(block, 'image_build_compute_name', null, true)),
                key_vault_id: build.template(block.key_vault_id),
                kind: build.template(std.get(block, 'kind', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                primary_user_assigned_identity: build.template(std.get(block, 'primary_user_assigned_identity', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(std.get(block, 'sku_name', null, true)),
                storage_account_id: build.template(block.storage_account_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                v1_legacy_mode_enabled: build.template(std.get(block, 'v1_legacy_mode_enabled', null, true)),
              }),
            },
          },
        },
      },
      application_insights_id: p.child('application_insights_id').out,
      container_registry_id: p.child('container_registry_id').out,
      description: p.child('description').out,
      discovery_url: p.child('discovery_url').out,
      friendly_name: p.child('friendly_name').out,
      high_business_impact: p.child('high_business_impact').out,
      id: p.child('id').out,
      image_build_compute_name: p.child('image_build_compute_name').out,
      key_vault_id: p.child('key_vault_id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_user_assigned_identity: p.child('primary_user_assigned_identity').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      storage_account_id: p.child('storage_account_id').out,
      tags: p.child('tags').out,
      v1_legacy_mode_enabled: p.child('v1_legacy_mode_enabled').out,
      workspace_id: p.child('workspace_id').out,
    },
    machine_learning_workspace_network_outbound_rule_fqdn(name, block): {
      local p = path(['azurerm_machine_learning_workspace_network_outbound_rule_fqdn', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_machine_learning_workspace_network_outbound_rule_fqdn: {
              [name]: std.prune({
                destination_fqdn: build.template(block.destination_fqdn),
                name: build.template(block.name),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      destination_fqdn: p.child('destination_fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      workspace_id: p.child('workspace_id').out,
    },
    maintenance_assignment_dedicated_host(name, block): {
      local p = path(['azurerm_maintenance_assignment_dedicated_host', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_maintenance_assignment_dedicated_host: {
              [name]: std.prune({
                dedicated_host_id: build.template(block.dedicated_host_id),
                location: build.template(block.location),
                maintenance_configuration_id: build.template(block.maintenance_configuration_id),
              }),
            },
          },
        },
      },
      dedicated_host_id: p.child('dedicated_host_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      maintenance_configuration_id: p.child('maintenance_configuration_id').out,
    },
    maintenance_assignment_dynamic_scope(name, block): {
      local p = path(['azurerm_maintenance_assignment_dynamic_scope', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_maintenance_assignment_dynamic_scope: {
              [name]: std.prune({
                maintenance_configuration_id: build.template(block.maintenance_configuration_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      maintenance_configuration_id: p.child('maintenance_configuration_id').out,
      name: p.child('name').out,
    },
    maintenance_assignment_virtual_machine(name, block): {
      local p = path(['azurerm_maintenance_assignment_virtual_machine', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_maintenance_assignment_virtual_machine: {
              [name]: std.prune({
                location: build.template(block.location),
                maintenance_configuration_id: build.template(block.maintenance_configuration_id),
                virtual_machine_id: build.template(block.virtual_machine_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      maintenance_configuration_id: p.child('maintenance_configuration_id').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
    },
    maintenance_assignment_virtual_machine_scale_set(name, block): {
      local p = path(['azurerm_maintenance_assignment_virtual_machine_scale_set', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_maintenance_assignment_virtual_machine_scale_set: {
              [name]: std.prune({
                location: build.template(block.location),
                maintenance_configuration_id: build.template(block.maintenance_configuration_id),
                virtual_machine_scale_set_id: build.template(block.virtual_machine_scale_set_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      maintenance_configuration_id: p.child('maintenance_configuration_id').out,
      virtual_machine_scale_set_id: p.child('virtual_machine_scale_set_id').out,
    },
    maintenance_configuration(name, block): {
      local p = path(['azurerm_maintenance_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_maintenance_configuration: {
              [name]: std.prune({
                in_guest_user_patch_mode: build.template(std.get(block, 'in_guest_user_patch_mode', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                properties: build.template(std.get(block, 'properties', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                scope: build.template(block.scope),
                tags: build.template(std.get(block, 'tags', null, true)),
                visibility: build.template(std.get(block, 'visibility', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      in_guest_user_patch_mode: p.child('in_guest_user_patch_mode').out,
      location: p.child('location').out,
      name: p.child('name').out,
      properties: p.child('properties').out,
      resource_group_name: p.child('resource_group_name').out,
      scope: p.child('scope').out,
      tags: p.child('tags').out,
      visibility: p.child('visibility').out,
    },
    managed_application(name, block): {
      local p = path(['azurerm_managed_application', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_managed_application: {
              [name]: std.prune({
                application_definition_id: build.template(std.get(block, 'application_definition_id', null, true)),
                kind: build.template(block.kind),
                location: build.template(block.location),
                managed_resource_group_name: build.template(block.managed_resource_group_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application_definition_id: p.child('application_definition_id').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      managed_resource_group_name: p.child('managed_resource_group_name').out,
      name: p.child('name').out,
      outputs: p.child('outputs').out,
      parameter_values: p.child('parameter_values').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    managed_application_definition(name, block): {
      local p = path(['azurerm_managed_application_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_managed_application_definition: {
              [name]: std.prune({
                create_ui_definition: build.template(std.get(block, 'create_ui_definition', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                location: build.template(block.location),
                lock_level: build.template(block.lock_level),
                main_template: build.template(std.get(block, 'main_template', null, true)),
                name: build.template(block.name),
                package_enabled: build.template(std.get(block, 'package_enabled', null, true)),
                package_file_uri: build.template(std.get(block, 'package_file_uri', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      create_ui_definition: p.child('create_ui_definition').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      lock_level: p.child('lock_level').out,
      main_template: p.child('main_template').out,
      name: p.child('name').out,
      package_enabled: p.child('package_enabled').out,
      package_file_uri: p.child('package_file_uri').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    managed_disk(name, block): {
      local p = path(['azurerm_managed_disk', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_managed_disk: {
              [name]: std.prune({
                create_option: build.template(block.create_option),
                disk_access_id: build.template(std.get(block, 'disk_access_id', null, true)),
                disk_encryption_set_id: build.template(std.get(block, 'disk_encryption_set_id', null, true)),
                edge_zone: build.template(std.get(block, 'edge_zone', null, true)),
                gallery_image_reference_id: build.template(std.get(block, 'gallery_image_reference_id', null, true)),
                hyper_v_generation: build.template(std.get(block, 'hyper_v_generation', null, true)),
                image_reference_id: build.template(std.get(block, 'image_reference_id', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                network_access_policy: build.template(std.get(block, 'network_access_policy', null, true)),
                on_demand_bursting_enabled: build.template(std.get(block, 'on_demand_bursting_enabled', null, true)),
                optimized_frequent_attach_enabled: build.template(std.get(block, 'optimized_frequent_attach_enabled', null, true)),
                os_type: build.template(std.get(block, 'os_type', null, true)),
                performance_plus_enabled: build.template(std.get(block, 'performance_plus_enabled', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                secure_vm_disk_encryption_set_id: build.template(std.get(block, 'secure_vm_disk_encryption_set_id', null, true)),
                security_type: build.template(std.get(block, 'security_type', null, true)),
                source_resource_id: build.template(std.get(block, 'source_resource_id', null, true)),
                storage_account_id: build.template(std.get(block, 'storage_account_id', null, true)),
                storage_account_type: build.template(block.storage_account_type),
                tags: build.template(std.get(block, 'tags', null, true)),
                trusted_launch_enabled: build.template(std.get(block, 'trusted_launch_enabled', null, true)),
                upload_size_bytes: build.template(std.get(block, 'upload_size_bytes', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      create_option: p.child('create_option').out,
      disk_access_id: p.child('disk_access_id').out,
      disk_encryption_set_id: p.child('disk_encryption_set_id').out,
      disk_iops_read_only: p.child('disk_iops_read_only').out,
      disk_iops_read_write: p.child('disk_iops_read_write').out,
      disk_mbps_read_only: p.child('disk_mbps_read_only').out,
      disk_mbps_read_write: p.child('disk_mbps_read_write').out,
      disk_size_gb: p.child('disk_size_gb').out,
      edge_zone: p.child('edge_zone').out,
      gallery_image_reference_id: p.child('gallery_image_reference_id').out,
      hyper_v_generation: p.child('hyper_v_generation').out,
      id: p.child('id').out,
      image_reference_id: p.child('image_reference_id').out,
      location: p.child('location').out,
      logical_sector_size: p.child('logical_sector_size').out,
      max_shares: p.child('max_shares').out,
      name: p.child('name').out,
      network_access_policy: p.child('network_access_policy').out,
      on_demand_bursting_enabled: p.child('on_demand_bursting_enabled').out,
      optimized_frequent_attach_enabled: p.child('optimized_frequent_attach_enabled').out,
      os_type: p.child('os_type').out,
      performance_plus_enabled: p.child('performance_plus_enabled').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      secure_vm_disk_encryption_set_id: p.child('secure_vm_disk_encryption_set_id').out,
      security_type: p.child('security_type').out,
      source_resource_id: p.child('source_resource_id').out,
      source_uri: p.child('source_uri').out,
      storage_account_id: p.child('storage_account_id').out,
      storage_account_type: p.child('storage_account_type').out,
      tags: p.child('tags').out,
      tier: p.child('tier').out,
      trusted_launch_enabled: p.child('trusted_launch_enabled').out,
      upload_size_bytes: p.child('upload_size_bytes').out,
      zone: p.child('zone').out,
    },
    managed_disk_sas_token(name, block): {
      local p = path(['azurerm_managed_disk_sas_token', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_managed_disk_sas_token: {
              [name]: std.prune({
                access_level: build.template(block.access_level),
                duration_in_seconds: build.template(block.duration_in_seconds),
                managed_disk_id: build.template(block.managed_disk_id),
              }),
            },
          },
        },
      },
      access_level: p.child('access_level').out,
      duration_in_seconds: p.child('duration_in_seconds').out,
      id: p.child('id').out,
      managed_disk_id: p.child('managed_disk_id').out,
      sas_url: p.child('sas_url').out,
    },
    managed_lustre_file_system(name, block): {
      local p = path(['azurerm_managed_lustre_file_system', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_managed_lustre_file_system: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                storage_capacity_in_tb: build.template(block.storage_capacity_in_tb),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                zones: build.template(block.zones),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      mgs_address: p.child('mgs_address').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      storage_capacity_in_tb: p.child('storage_capacity_in_tb').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    management_group(name, block): {
      local p = path(['azurerm_management_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_management_group: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      parent_management_group_id: p.child('parent_management_group_id').out,
      subscription_ids: p.child('subscription_ids').out,
      tenant_scoped_id: p.child('tenant_scoped_id').out,
    },
    management_group_policy_assignment(name, block): {
      local p = path(['azurerm_management_group_policy_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_management_group_policy_assignment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enforce: build.template(std.get(block, 'enforce', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                management_group_id: build.template(block.management_group_id),
                name: build.template(block.name),
                not_scopes: build.template(std.get(block, 'not_scopes', null, true)),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                policy_definition_id: build.template(block.policy_definition_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      enforce: p.child('enforce').out,
      id: p.child('id').out,
      location: p.child('location').out,
      management_group_id: p.child('management_group_id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      not_scopes: p.child('not_scopes').out,
      parameters: p.child('parameters').out,
      policy_definition_id: p.child('policy_definition_id').out,
    },
    management_group_policy_exemption(name, block): {
      local p = path(['azurerm_management_group_policy_exemption', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_management_group_policy_exemption: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                exemption_category: build.template(block.exemption_category),
                expires_on: build.template(std.get(block, 'expires_on', null, true)),
                management_group_id: build.template(block.management_group_id),
                name: build.template(block.name),
                policy_assignment_id: build.template(block.policy_assignment_id),
                policy_definition_reference_ids: build.template(std.get(block, 'policy_definition_reference_ids', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      exemption_category: p.child('exemption_category').out,
      expires_on: p.child('expires_on').out,
      id: p.child('id').out,
      management_group_id: p.child('management_group_id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      policy_assignment_id: p.child('policy_assignment_id').out,
      policy_definition_reference_ids: p.child('policy_definition_reference_ids').out,
    },
    management_group_policy_remediation(name, block): {
      local p = path(['azurerm_management_group_policy_remediation', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_management_group_policy_remediation: {
              [name]: std.prune({
                failure_percentage: build.template(std.get(block, 'failure_percentage', null, true)),
                location_filters: build.template(std.get(block, 'location_filters', null, true)),
                management_group_id: build.template(block.management_group_id),
                name: build.template(block.name),
                parallel_deployments: build.template(std.get(block, 'parallel_deployments', null, true)),
                policy_assignment_id: build.template(block.policy_assignment_id),
                policy_definition_reference_id: build.template(std.get(block, 'policy_definition_reference_id', null, true)),
                resource_count: build.template(std.get(block, 'resource_count', null, true)),
              }),
            },
          },
        },
      },
      failure_percentage: p.child('failure_percentage').out,
      id: p.child('id').out,
      location_filters: p.child('location_filters').out,
      management_group_id: p.child('management_group_id').out,
      name: p.child('name').out,
      parallel_deployments: p.child('parallel_deployments').out,
      policy_assignment_id: p.child('policy_assignment_id').out,
      policy_definition_reference_id: p.child('policy_definition_reference_id').out,
      resource_count: p.child('resource_count').out,
    },
    management_group_subscription_association(name, block): {
      local p = path(['azurerm_management_group_subscription_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_management_group_subscription_association: {
              [name]: std.prune({
                management_group_id: build.template(block.management_group_id),
                subscription_id: build.template(block.subscription_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      management_group_id: p.child('management_group_id').out,
      subscription_id: p.child('subscription_id').out,
    },
    management_group_template_deployment(name, block): {
      local p = path(['azurerm_management_group_template_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_management_group_template_deployment: {
              [name]: std.prune({
                debug_level: build.template(std.get(block, 'debug_level', null, true)),
                location: build.template(block.location),
                management_group_id: build.template(block.management_group_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                template_spec_version_id: build.template(std.get(block, 'template_spec_version_id', null, true)),
              }),
            },
          },
        },
      },
      debug_level: p.child('debug_level').out,
      id: p.child('id').out,
      location: p.child('location').out,
      management_group_id: p.child('management_group_id').out,
      name: p.child('name').out,
      output_content: p.child('output_content').out,
      parameters_content: p.child('parameters_content').out,
      tags: p.child('tags').out,
      template_content: p.child('template_content').out,
      template_spec_version_id: p.child('template_spec_version_id').out,
    },
    management_lock(name, block): {
      local p = path(['azurerm_management_lock', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_management_lock: {
              [name]: std.prune({
                lock_level: build.template(block.lock_level),
                name: build.template(block.name),
                notes: build.template(std.get(block, 'notes', null, true)),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      lock_level: p.child('lock_level').out,
      name: p.child('name').out,
      notes: p.child('notes').out,
      scope: p.child('scope').out,
    },
    maps_account(name, block): {
      local p = path(['azurerm_maps_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_maps_account: {
              [name]: std.prune({
                local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      local_authentication_enabled: p.child('local_authentication_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_access_key: p.child('primary_access_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      x_ms_client_id: p.child('x_ms_client_id').out,
    },
    maps_creator(name, block): {
      local p = path(['azurerm_maps_creator', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_maps_creator: {
              [name]: std.prune({
                location: build.template(block.location),
                maps_account_id: build.template(block.maps_account_id),
                name: build.template(block.name),
                storage_units: build.template(block.storage_units),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      maps_account_id: p.child('maps_account_id').out,
      name: p.child('name').out,
      storage_units: p.child('storage_units').out,
      tags: p.child('tags').out,
    },
    marketplace_agreement(name, block): {
      local p = path(['azurerm_marketplace_agreement', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_marketplace_agreement: {
              [name]: std.prune({
                offer: build.template(block.offer),
                plan: build.template(block.plan),
                publisher: build.template(block.publisher),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      license_text_link: p.child('license_text_link').out,
      offer: p.child('offer').out,
      plan: p.child('plan').out,
      privacy_policy_link: p.child('privacy_policy_link').out,
      publisher: p.child('publisher').out,
    },
    marketplace_role_assignment(name, block): {
      local p = path(['azurerm_marketplace_role_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_marketplace_role_assignment: {
              [name]: std.prune({
                condition: build.template(std.get(block, 'condition', null, true)),
                condition_version: build.template(std.get(block, 'condition_version', null, true)),
                delegated_managed_identity_resource_id: build.template(std.get(block, 'delegated_managed_identity_resource_id', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                principal_id: build.template(block.principal_id),
                role_definition_id: build.template(std.get(block, 'role_definition_id', null, true)),
                role_definition_name: build.template(std.get(block, 'role_definition_name', null, true)),
                skip_service_principal_aad_check: build.template(std.get(block, 'skip_service_principal_aad_check', null, true)),
              }),
            },
          },
        },
      },
      condition: p.child('condition').out,
      condition_version: p.child('condition_version').out,
      delegated_managed_identity_resource_id: p.child('delegated_managed_identity_resource_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      principal_id: p.child('principal_id').out,
      principal_type: p.child('principal_type').out,
      role_definition_id: p.child('role_definition_id').out,
      role_definition_name: p.child('role_definition_name').out,
      skip_service_principal_aad_check: p.child('skip_service_principal_aad_check').out,
    },
    mobile_network(name, block): {
      local p = path(['azurerm_mobile_network', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mobile_network: {
              [name]: std.prune({
                location: build.template(block.location),
                mobile_country_code: build.template(block.mobile_country_code),
                mobile_network_code: build.template(block.mobile_network_code),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_country_code: p.child('mobile_country_code').out,
      mobile_network_code: p.child('mobile_network_code').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      service_key: p.child('service_key').out,
      tags: p.child('tags').out,
    },
    mobile_network_attached_data_network(name, block): {
      local p = path(['azurerm_mobile_network_attached_data_network', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mobile_network_attached_data_network: {
              [name]: std.prune({
                dns_addresses: build.template(block.dns_addresses),
                location: build.template(block.location),
                mobile_network_data_network_name: build.template(block.mobile_network_data_network_name),
                mobile_network_packet_core_data_plane_id: build.template(block.mobile_network_packet_core_data_plane_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_equipment_address_pool_prefixes: build.template(std.get(block, 'user_equipment_address_pool_prefixes', null, true)),
                user_equipment_static_address_pool_prefixes: build.template(std.get(block, 'user_equipment_static_address_pool_prefixes', null, true)),
                user_plane_access_ipv4_address: build.template(std.get(block, 'user_plane_access_ipv4_address', null, true)),
                user_plane_access_ipv4_gateway: build.template(std.get(block, 'user_plane_access_ipv4_gateway', null, true)),
                user_plane_access_ipv4_subnet: build.template(std.get(block, 'user_plane_access_ipv4_subnet', null, true)),
                user_plane_access_name: build.template(std.get(block, 'user_plane_access_name', null, true)),
              }),
            },
          },
        },
      },
      dns_addresses: p.child('dns_addresses').out,
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_data_network_name: p.child('mobile_network_data_network_name').out,
      mobile_network_packet_core_data_plane_id: p.child('mobile_network_packet_core_data_plane_id').out,
      tags: p.child('tags').out,
      user_equipment_address_pool_prefixes: p.child('user_equipment_address_pool_prefixes').out,
      user_equipment_static_address_pool_prefixes: p.child('user_equipment_static_address_pool_prefixes').out,
      user_plane_access_ipv4_address: p.child('user_plane_access_ipv4_address').out,
      user_plane_access_ipv4_gateway: p.child('user_plane_access_ipv4_gateway').out,
      user_plane_access_ipv4_subnet: p.child('user_plane_access_ipv4_subnet').out,
      user_plane_access_name: p.child('user_plane_access_name').out,
    },
    mobile_network_data_network(name, block): {
      local p = path(['azurerm_mobile_network_data_network', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mobile_network_data_network: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                mobile_network_id: build.template(block.mobile_network_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_id: p.child('mobile_network_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    mobile_network_packet_core_control_plane(name, block): {
      local p = path(['azurerm_mobile_network_packet_core_control_plane', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mobile_network_packet_core_control_plane: {
              [name]: std.prune({
                control_plane_access_ipv4_address: build.template(std.get(block, 'control_plane_access_ipv4_address', null, true)),
                control_plane_access_ipv4_gateway: build.template(std.get(block, 'control_plane_access_ipv4_gateway', null, true)),
                control_plane_access_ipv4_subnet: build.template(std.get(block, 'control_plane_access_ipv4_subnet', null, true)),
                control_plane_access_name: build.template(std.get(block, 'control_plane_access_name', null, true)),
                core_network_technology: build.template(std.get(block, 'core_network_technology', null, true)),
                interoperability_settings_json: build.template(std.get(block, 'interoperability_settings_json', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                site_ids: build.template(block.site_ids),
                sku: build.template(block.sku),
                software_version: build.template(std.get(block, 'software_version', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_equipment_mtu_in_bytes: build.template(std.get(block, 'user_equipment_mtu_in_bytes', null, true)),
              }),
            },
          },
        },
      },
      control_plane_access_ipv4_address: p.child('control_plane_access_ipv4_address').out,
      control_plane_access_ipv4_gateway: p.child('control_plane_access_ipv4_gateway').out,
      control_plane_access_ipv4_subnet: p.child('control_plane_access_ipv4_subnet').out,
      control_plane_access_name: p.child('control_plane_access_name').out,
      core_network_technology: p.child('core_network_technology').out,
      id: p.child('id').out,
      interoperability_settings_json: p.child('interoperability_settings_json').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      site_ids: p.child('site_ids').out,
      sku: p.child('sku').out,
      software_version: p.child('software_version').out,
      tags: p.child('tags').out,
      user_equipment_mtu_in_bytes: p.child('user_equipment_mtu_in_bytes').out,
    },
    mobile_network_packet_core_data_plane(name, block): {
      local p = path(['azurerm_mobile_network_packet_core_data_plane', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mobile_network_packet_core_data_plane: {
              [name]: std.prune({
                location: build.template(block.location),
                mobile_network_packet_core_control_plane_id: build.template(block.mobile_network_packet_core_control_plane_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_plane_access_ipv4_address: build.template(std.get(block, 'user_plane_access_ipv4_address', null, true)),
                user_plane_access_ipv4_gateway: build.template(std.get(block, 'user_plane_access_ipv4_gateway', null, true)),
                user_plane_access_ipv4_subnet: build.template(std.get(block, 'user_plane_access_ipv4_subnet', null, true)),
                user_plane_access_name: build.template(std.get(block, 'user_plane_access_name', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_packet_core_control_plane_id: p.child('mobile_network_packet_core_control_plane_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      user_plane_access_ipv4_address: p.child('user_plane_access_ipv4_address').out,
      user_plane_access_ipv4_gateway: p.child('user_plane_access_ipv4_gateway').out,
      user_plane_access_ipv4_subnet: p.child('user_plane_access_ipv4_subnet').out,
      user_plane_access_name: p.child('user_plane_access_name').out,
    },
    mobile_network_service(name, block): {
      local p = path(['azurerm_mobile_network_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mobile_network_service: {
              [name]: std.prune({
                location: build.template(block.location),
                mobile_network_id: build.template(block.mobile_network_id),
                name: build.template(block.name),
                service_precedence: build.template(block.service_precedence),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_id: p.child('mobile_network_id').out,
      name: p.child('name').out,
      service_precedence: p.child('service_precedence').out,
      tags: p.child('tags').out,
    },
    mobile_network_sim(name, block): {
      local p = path(['azurerm_mobile_network_sim', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mobile_network_sim: {
              [name]: std.prune({
                authentication_key: build.template(block.authentication_key),
                device_type: build.template(std.get(block, 'device_type', null, true)),
                integrated_circuit_card_identifier: build.template(block.integrated_circuit_card_identifier),
                international_mobile_subscriber_identity: build.template(block.international_mobile_subscriber_identity),
                mobile_network_sim_group_id: build.template(block.mobile_network_sim_group_id),
                name: build.template(block.name),
                operator_key_code: build.template(block.operator_key_code),
                sim_policy_id: build.template(std.get(block, 'sim_policy_id', null, true)),
              }),
            },
          },
        },
      },
      authentication_key: p.child('authentication_key').out,
      device_type: p.child('device_type').out,
      id: p.child('id').out,
      integrated_circuit_card_identifier: p.child('integrated_circuit_card_identifier').out,
      international_mobile_subscriber_identity: p.child('international_mobile_subscriber_identity').out,
      mobile_network_sim_group_id: p.child('mobile_network_sim_group_id').out,
      name: p.child('name').out,
      operator_key_code: p.child('operator_key_code').out,
      sim_policy_id: p.child('sim_policy_id').out,
      sim_state: p.child('sim_state').out,
      vendor_key_fingerprint: p.child('vendor_key_fingerprint').out,
      vendor_name: p.child('vendor_name').out,
    },
    mobile_network_sim_group(name, block): {
      local p = path(['azurerm_mobile_network_sim_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mobile_network_sim_group: {
              [name]: std.prune({
                encryption_key_url: build.template(std.get(block, 'encryption_key_url', null, true)),
                location: build.template(block.location),
                mobile_network_id: build.template(block.mobile_network_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      encryption_key_url: p.child('encryption_key_url').out,
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_id: p.child('mobile_network_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    mobile_network_sim_policy(name, block): {
      local p = path(['azurerm_mobile_network_sim_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mobile_network_sim_policy: {
              [name]: std.prune({
                default_slice_id: build.template(block.default_slice_id),
                location: build.template(block.location),
                mobile_network_id: build.template(block.mobile_network_id),
                name: build.template(block.name),
                rat_frequency_selection_priority_index: build.template(std.get(block, 'rat_frequency_selection_priority_index', null, true)),
                registration_timer_in_seconds: build.template(std.get(block, 'registration_timer_in_seconds', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      default_slice_id: p.child('default_slice_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_id: p.child('mobile_network_id').out,
      name: p.child('name').out,
      rat_frequency_selection_priority_index: p.child('rat_frequency_selection_priority_index').out,
      registration_timer_in_seconds: p.child('registration_timer_in_seconds').out,
      tags: p.child('tags').out,
    },
    mobile_network_site(name, block): {
      local p = path(['azurerm_mobile_network_site', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mobile_network_site: {
              [name]: std.prune({
                location: build.template(block.location),
                mobile_network_id: build.template(block.mobile_network_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_id: p.child('mobile_network_id').out,
      name: p.child('name').out,
      network_function_ids: p.child('network_function_ids').out,
      tags: p.child('tags').out,
    },
    mobile_network_slice(name, block): {
      local p = path(['azurerm_mobile_network_slice', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mobile_network_slice: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                mobile_network_id: build.template(block.mobile_network_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_id: p.child('mobile_network_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    monitor_aad_diagnostic_setting(name, block): {
      local p = path(['azurerm_monitor_aad_diagnostic_setting', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_aad_diagnostic_setting: {
              [name]: std.prune({
                eventhub_authorization_rule_id: build.template(std.get(block, 'eventhub_authorization_rule_id', null, true)),
                eventhub_name: build.template(std.get(block, 'eventhub_name', null, true)),
                log_analytics_workspace_id: build.template(std.get(block, 'log_analytics_workspace_id', null, true)),
                name: build.template(block.name),
                storage_account_id: build.template(std.get(block, 'storage_account_id', null, true)),
              }),
            },
          },
        },
      },
      eventhub_authorization_rule_id: p.child('eventhub_authorization_rule_id').out,
      eventhub_name: p.child('eventhub_name').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    monitor_action_group(name, block): {
      local p = path(['azurerm_monitor_action_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_action_group: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                short_name: build.template(block.short_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      short_name: p.child('short_name').out,
      tags: p.child('tags').out,
    },
    monitor_activity_log_alert(name, block): {
      local p = path(['azurerm_monitor_activity_log_alert', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_activity_log_alert: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                scopes: build.template(block.scopes),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scopes: p.child('scopes').out,
      tags: p.child('tags').out,
    },
    monitor_alert_processing_rule_action_group(name, block): {
      local p = path(['azurerm_monitor_alert_processing_rule_action_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_alert_processing_rule_action_group: {
              [name]: std.prune({
                add_action_group_ids: build.template(block.add_action_group_ids),
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                scopes: build.template(block.scopes),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      add_action_group_ids: p.child('add_action_group_ids').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scopes: p.child('scopes').out,
      tags: p.child('tags').out,
    },
    monitor_alert_processing_rule_suppression(name, block): {
      local p = path(['azurerm_monitor_alert_processing_rule_suppression', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_alert_processing_rule_suppression: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                scopes: build.template(block.scopes),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scopes: p.child('scopes').out,
      tags: p.child('tags').out,
    },
    monitor_alert_prometheus_rule_group(name, block): {
      local p = path(['azurerm_monitor_alert_prometheus_rule_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_alert_prometheus_rule_group: {
              [name]: std.prune({
                cluster_name: build.template(std.get(block, 'cluster_name', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                interval: build.template(std.get(block, 'interval', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                rule_group_enabled: build.template(std.get(block, 'rule_group_enabled', null, true)),
                scopes: build.template(block.scopes),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      cluster_name: p.child('cluster_name').out,
      description: p.child('description').out,
      id: p.child('id').out,
      interval: p.child('interval').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      rule_group_enabled: p.child('rule_group_enabled').out,
      scopes: p.child('scopes').out,
      tags: p.child('tags').out,
    },
    monitor_autoscale_setting(name, block): {
      local p = path(['azurerm_monitor_autoscale_setting', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_autoscale_setting: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_resource_id: build.template(block.target_resource_id),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      target_resource_id: p.child('target_resource_id').out,
    },
    monitor_data_collection_endpoint(name, block): {
      local p = path(['azurerm_monitor_data_collection_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_data_collection_endpoint: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                kind: build.template(std.get(block, 'kind', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      configuration_access_endpoint: p.child('configuration_access_endpoint').out,
      description: p.child('description').out,
      id: p.child('id').out,
      immutable_id: p.child('immutable_id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      logs_ingestion_endpoint: p.child('logs_ingestion_endpoint').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    monitor_data_collection_rule(name, block): {
      local p = path(['azurerm_monitor_data_collection_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_data_collection_rule: {
              [name]: std.prune({
                data_collection_endpoint_id: build.template(std.get(block, 'data_collection_endpoint_id', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                kind: build.template(std.get(block, 'kind', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      data_collection_endpoint_id: p.child('data_collection_endpoint_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      immutable_id: p.child('immutable_id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    monitor_data_collection_rule_association(name, block): {
      local p = path(['azurerm_monitor_data_collection_rule_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_data_collection_rule_association: {
              [name]: std.prune({
                data_collection_endpoint_id: build.template(std.get(block, 'data_collection_endpoint_id', null, true)),
                data_collection_rule_id: build.template(std.get(block, 'data_collection_rule_id', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                target_resource_id: build.template(block.target_resource_id),
              }),
            },
          },
        },
      },
      data_collection_endpoint_id: p.child('data_collection_endpoint_id').out,
      data_collection_rule_id: p.child('data_collection_rule_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      target_resource_id: p.child('target_resource_id').out,
    },
    monitor_diagnostic_setting(name, block): {
      local p = path(['azurerm_monitor_diagnostic_setting', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_diagnostic_setting: {
              [name]: std.prune({
                eventhub_authorization_rule_id: build.template(std.get(block, 'eventhub_authorization_rule_id', null, true)),
                eventhub_name: build.template(std.get(block, 'eventhub_name', null, true)),
                log_analytics_workspace_id: build.template(std.get(block, 'log_analytics_workspace_id', null, true)),
                name: build.template(block.name),
                partner_solution_id: build.template(std.get(block, 'partner_solution_id', null, true)),
                storage_account_id: build.template(std.get(block, 'storage_account_id', null, true)),
                target_resource_id: build.template(block.target_resource_id),
              }),
            },
          },
        },
      },
      eventhub_authorization_rule_id: p.child('eventhub_authorization_rule_id').out,
      eventhub_name: p.child('eventhub_name').out,
      id: p.child('id').out,
      log_analytics_destination_type: p.child('log_analytics_destination_type').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      partner_solution_id: p.child('partner_solution_id').out,
      storage_account_id: p.child('storage_account_id').out,
      target_resource_id: p.child('target_resource_id').out,
    },
    monitor_metric_alert(name, block): {
      local p = path(['azurerm_monitor_metric_alert', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_metric_alert: {
              [name]: std.prune({
                auto_mitigate: build.template(std.get(block, 'auto_mitigate', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                frequency: build.template(std.get(block, 'frequency', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                scopes: build.template(block.scopes),
                severity: build.template(std.get(block, 'severity', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                window_size: build.template(std.get(block, 'window_size', null, true)),
              }),
            },
          },
        },
      },
      auto_mitigate: p.child('auto_mitigate').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      frequency: p.child('frequency').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scopes: p.child('scopes').out,
      severity: p.child('severity').out,
      tags: p.child('tags').out,
      target_resource_location: p.child('target_resource_location').out,
      target_resource_type: p.child('target_resource_type').out,
      window_size: p.child('window_size').out,
    },
    monitor_private_link_scope(name, block): {
      local p = path(['azurerm_monitor_private_link_scope', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_private_link_scope: {
              [name]: std.prune({
                ingestion_access_mode: build.template(std.get(block, 'ingestion_access_mode', null, true)),
                name: build.template(block.name),
                query_access_mode: build.template(std.get(block, 'query_access_mode', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ingestion_access_mode: p.child('ingestion_access_mode').out,
      name: p.child('name').out,
      query_access_mode: p.child('query_access_mode').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    monitor_private_link_scoped_service(name, block): {
      local p = path(['azurerm_monitor_private_link_scoped_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_private_link_scoped_service: {
              [name]: std.prune({
                linked_resource_id: build.template(block.linked_resource_id),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                scope_name: build.template(block.scope_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      linked_resource_id: p.child('linked_resource_id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scope_name: p.child('scope_name').out,
    },
    monitor_scheduled_query_rules_alert(name, block): {
      local p = path(['azurerm_monitor_scheduled_query_rules_alert', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_scheduled_query_rules_alert: {
              [name]: std.prune({
                authorized_resource_ids: build.template(std.get(block, 'authorized_resource_ids', null, true)),
                auto_mitigation_enabled: build.template(std.get(block, 'auto_mitigation_enabled', null, true)),
                data_source_id: build.template(block.data_source_id),
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                frequency: build.template(block.frequency),
                location: build.template(block.location),
                name: build.template(block.name),
                query: build.template(block.query),
                query_type: build.template(std.get(block, 'query_type', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                severity: build.template(std.get(block, 'severity', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                throttling: build.template(std.get(block, 'throttling', null, true)),
                time_window: build.template(block.time_window),
              }),
            },
          },
        },
      },
      authorized_resource_ids: p.child('authorized_resource_ids').out,
      auto_mitigation_enabled: p.child('auto_mitigation_enabled').out,
      data_source_id: p.child('data_source_id').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      frequency: p.child('frequency').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      query: p.child('query').out,
      query_type: p.child('query_type').out,
      resource_group_name: p.child('resource_group_name').out,
      severity: p.child('severity').out,
      tags: p.child('tags').out,
      throttling: p.child('throttling').out,
      time_window: p.child('time_window').out,
    },
    monitor_scheduled_query_rules_alert_v2(name, block): {
      local p = path(['azurerm_monitor_scheduled_query_rules_alert_v2', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_scheduled_query_rules_alert_v2: {
              [name]: std.prune({
                auto_mitigation_enabled: build.template(std.get(block, 'auto_mitigation_enabled', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                evaluation_frequency: build.template(block.evaluation_frequency),
                location: build.template(block.location),
                mute_actions_after_alert_duration: build.template(std.get(block, 'mute_actions_after_alert_duration', null, true)),
                name: build.template(block.name),
                query_time_range_override: build.template(std.get(block, 'query_time_range_override', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                scopes: build.template(block.scopes),
                severity: build.template(block.severity),
                skip_query_validation: build.template(std.get(block, 'skip_query_validation', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_resource_types: build.template(std.get(block, 'target_resource_types', null, true)),
                window_duration: build.template(block.window_duration),
                workspace_alerts_storage_enabled: build.template(std.get(block, 'workspace_alerts_storage_enabled', null, true)),
              }),
            },
          },
        },
      },
      auto_mitigation_enabled: p.child('auto_mitigation_enabled').out,
      created_with_api_version: p.child('created_with_api_version').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      enabled: p.child('enabled').out,
      evaluation_frequency: p.child('evaluation_frequency').out,
      id: p.child('id').out,
      is_a_legacy_log_analytics_rule: p.child('is_a_legacy_log_analytics_rule').out,
      is_workspace_alerts_storage_configured: p.child('is_workspace_alerts_storage_configured').out,
      location: p.child('location').out,
      mute_actions_after_alert_duration: p.child('mute_actions_after_alert_duration').out,
      name: p.child('name').out,
      query_time_range_override: p.child('query_time_range_override').out,
      resource_group_name: p.child('resource_group_name').out,
      scopes: p.child('scopes').out,
      severity: p.child('severity').out,
      skip_query_validation: p.child('skip_query_validation').out,
      tags: p.child('tags').out,
      target_resource_types: p.child('target_resource_types').out,
      window_duration: p.child('window_duration').out,
      workspace_alerts_storage_enabled: p.child('workspace_alerts_storage_enabled').out,
    },
    monitor_scheduled_query_rules_log(name, block): {
      local p = path(['azurerm_monitor_scheduled_query_rules_log', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_scheduled_query_rules_log: {
              [name]: std.prune({
                authorized_resource_ids: build.template(std.get(block, 'authorized_resource_ids', null, true)),
                data_source_id: build.template(block.data_source_id),
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      authorized_resource_ids: p.child('authorized_resource_ids').out,
      data_source_id: p.child('data_source_id').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    monitor_smart_detector_alert_rule(name, block): {
      local p = path(['azurerm_monitor_smart_detector_alert_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_smart_detector_alert_rule: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                detector_type: build.template(block.detector_type),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                frequency: build.template(block.frequency),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                scope_resource_ids: build.template(block.scope_resource_ids),
                severity: build.template(block.severity),
                tags: build.template(std.get(block, 'tags', null, true)),
                throttling_duration: build.template(std.get(block, 'throttling_duration', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      detector_type: p.child('detector_type').out,
      enabled: p.child('enabled').out,
      frequency: p.child('frequency').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scope_resource_ids: p.child('scope_resource_ids').out,
      severity: p.child('severity').out,
      tags: p.child('tags').out,
      throttling_duration: p.child('throttling_duration').out,
    },
    monitor_workspace(name, block): {
      local p = path(['azurerm_monitor_workspace', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_monitor_workspace: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      default_data_collection_endpoint_id: p.child('default_data_collection_endpoint_id').out,
      default_data_collection_rule_id: p.child('default_data_collection_rule_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      query_endpoint: p.child('query_endpoint').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    mssql_database(name, block): {
      local p = path(['azurerm_mssql_database', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_database: {
              [name]: std.prune({
                create_mode: build.template(std.get(block, 'create_mode', null, true)),
                elastic_pool_id: build.template(std.get(block, 'elastic_pool_id', null, true)),
                geo_backup_enabled: build.template(std.get(block, 'geo_backup_enabled', null, true)),
                name: build.template(block.name),
                recover_database_id: build.template(std.get(block, 'recover_database_id', null, true)),
                recovery_point_id: build.template(std.get(block, 'recovery_point_id', null, true)),
                restore_dropped_database_id: build.template(std.get(block, 'restore_dropped_database_id', null, true)),
                restore_long_term_retention_backup_id: build.template(std.get(block, 'restore_long_term_retention_backup_id', null, true)),
                server_id: build.template(block.server_id),
                storage_account_type: build.template(std.get(block, 'storage_account_type', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                transparent_data_encryption_enabled: build.template(std.get(block, 'transparent_data_encryption_enabled', null, true)),
                transparent_data_encryption_key_automatic_rotation_enabled: build.template(std.get(block, 'transparent_data_encryption_key_automatic_rotation_enabled', null, true)),
                transparent_data_encryption_key_vault_key_id: build.template(std.get(block, 'transparent_data_encryption_key_vault_key_id', null, true)),
              }),
            },
          },
        },
      },
      auto_pause_delay_in_minutes: p.child('auto_pause_delay_in_minutes').out,
      collation: p.child('collation').out,
      create_mode: p.child('create_mode').out,
      creation_source_database_id: p.child('creation_source_database_id').out,
      elastic_pool_id: p.child('elastic_pool_id').out,
      enclave_type: p.child('enclave_type').out,
      geo_backup_enabled: p.child('geo_backup_enabled').out,
      id: p.child('id').out,
      ledger_enabled: p.child('ledger_enabled').out,
      license_type: p.child('license_type').out,
      maintenance_configuration_name: p.child('maintenance_configuration_name').out,
      max_size_gb: p.child('max_size_gb').out,
      min_capacity: p.child('min_capacity').out,
      name: p.child('name').out,
      read_replica_count: p.child('read_replica_count').out,
      read_scale: p.child('read_scale').out,
      recover_database_id: p.child('recover_database_id').out,
      recovery_point_id: p.child('recovery_point_id').out,
      restore_dropped_database_id: p.child('restore_dropped_database_id').out,
      restore_long_term_retention_backup_id: p.child('restore_long_term_retention_backup_id').out,
      restore_point_in_time: p.child('restore_point_in_time').out,
      sample_name: p.child('sample_name').out,
      secondary_type: p.child('secondary_type').out,
      server_id: p.child('server_id').out,
      sku_name: p.child('sku_name').out,
      storage_account_type: p.child('storage_account_type').out,
      tags: p.child('tags').out,
      transparent_data_encryption_enabled: p.child('transparent_data_encryption_enabled').out,
      transparent_data_encryption_key_automatic_rotation_enabled: p.child('transparent_data_encryption_key_automatic_rotation_enabled').out,
      transparent_data_encryption_key_vault_key_id: p.child('transparent_data_encryption_key_vault_key_id').out,
      zone_redundant: p.child('zone_redundant').out,
    },
    mssql_database_extended_auditing_policy(name, block): {
      local p = path(['azurerm_mssql_database_extended_auditing_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_database_extended_auditing_policy: {
              [name]: std.prune({
                database_id: build.template(block.database_id),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                log_monitoring_enabled: build.template(std.get(block, 'log_monitoring_enabled', null, true)),
                retention_in_days: build.template(std.get(block, 'retention_in_days', null, true)),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_account_access_key_is_secondary: build.template(std.get(block, 'storage_account_access_key_is_secondary', null, true)),
                storage_endpoint: build.template(std.get(block, 'storage_endpoint', null, true)),
              }),
            },
          },
        },
      },
      database_id: p.child('database_id').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      log_monitoring_enabled: p.child('log_monitoring_enabled').out,
      retention_in_days: p.child('retention_in_days').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_access_key_is_secondary: p.child('storage_account_access_key_is_secondary').out,
      storage_endpoint: p.child('storage_endpoint').out,
    },
    mssql_database_vulnerability_assessment_rule_baseline(name, block): {
      local p = path(['azurerm_mssql_database_vulnerability_assessment_rule_baseline', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_database_vulnerability_assessment_rule_baseline: {
              [name]: std.prune({
                baseline_name: build.template(std.get(block, 'baseline_name', null, true)),
                database_name: build.template(block.database_name),
                rule_id: build.template(block.rule_id),
                server_vulnerability_assessment_id: build.template(block.server_vulnerability_assessment_id),
              }),
            },
          },
        },
      },
      baseline_name: p.child('baseline_name').out,
      database_name: p.child('database_name').out,
      id: p.child('id').out,
      rule_id: p.child('rule_id').out,
      server_vulnerability_assessment_id: p.child('server_vulnerability_assessment_id').out,
    },
    mssql_elasticpool(name, block): {
      local p = path(['azurerm_mssql_elasticpool', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_elasticpool: {
              [name]: std.prune({
                location: build.template(block.location),
                maintenance_configuration_name: build.template(std.get(block, 'maintenance_configuration_name', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                server_name: build.template(block.server_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                zone_redundant: build.template(std.get(block, 'zone_redundant', null, true)),
              }),
            },
          },
        },
      },
      enclave_type: p.child('enclave_type').out,
      id: p.child('id').out,
      license_type: p.child('license_type').out,
      location: p.child('location').out,
      maintenance_configuration_name: p.child('maintenance_configuration_name').out,
      max_size_bytes: p.child('max_size_bytes').out,
      max_size_gb: p.child('max_size_gb').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      server_name: p.child('server_name').out,
      tags: p.child('tags').out,
      zone_redundant: p.child('zone_redundant').out,
    },
    mssql_failover_group(name, block): {
      local p = path(['azurerm_mssql_failover_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_failover_group: {
              [name]: std.prune({
                databases: build.template(std.get(block, 'databases', null, true)),
                name: build.template(block.name),
                server_id: build.template(block.server_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      databases: p.child('databases').out,
      id: p.child('id').out,
      name: p.child('name').out,
      readonly_endpoint_failover_policy_enabled: p.child('readonly_endpoint_failover_policy_enabled').out,
      server_id: p.child('server_id').out,
      tags: p.child('tags').out,
    },
    mssql_firewall_rule(name, block): {
      local p = path(['azurerm_mssql_firewall_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_firewall_rule: {
              [name]: std.prune({
                end_ip_address: build.template(block.end_ip_address),
                name: build.template(block.name),
                server_id: build.template(block.server_id),
                start_ip_address: build.template(block.start_ip_address),
              }),
            },
          },
        },
      },
      end_ip_address: p.child('end_ip_address').out,
      id: p.child('id').out,
      name: p.child('name').out,
      server_id: p.child('server_id').out,
      start_ip_address: p.child('start_ip_address').out,
    },
    mssql_job_agent(name, block): {
      local p = path(['azurerm_mssql_job_agent', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_job_agent: {
              [name]: std.prune({
                database_id: build.template(block.database_id),
                location: build.template(block.location),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      database_id: p.child('database_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    mssql_job_credential(name, block): {
      local p = path(['azurerm_mssql_job_credential', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_job_credential: {
              [name]: std.prune({
                job_agent_id: build.template(block.job_agent_id),
                name: build.template(block.name),
                password: build.template(block.password),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      job_agent_id: p.child('job_agent_id').out,
      name: p.child('name').out,
      password: p.child('password').out,
      username: p.child('username').out,
    },
    mssql_managed_database(name, block): {
      local p = path(['azurerm_mssql_managed_database', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_managed_database: {
              [name]: std.prune({
                managed_instance_id: build.template(block.managed_instance_id),
                name: build.template(block.name),
                short_term_retention_days: build.template(std.get(block, 'short_term_retention_days', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      managed_instance_id: p.child('managed_instance_id').out,
      name: p.child('name').out,
      short_term_retention_days: p.child('short_term_retention_days').out,
    },
    mssql_managed_instance(name, block): {
      local p = path(['azurerm_mssql_managed_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_managed_instance: {
              [name]: std.prune({
                administrator_login: build.template(block.administrator_login),
                administrator_login_password: build.template(block.administrator_login_password),
                collation: build.template(std.get(block, 'collation', null, true)),
                dns_zone_partner_id: build.template(std.get(block, 'dns_zone_partner_id', null, true)),
                license_type: build.template(block.license_type),
                location: build.template(block.location),
                maintenance_configuration_name: build.template(std.get(block, 'maintenance_configuration_name', null, true)),
                minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null, true)),
                name: build.template(block.name),
                proxy_override: build.template(std.get(block, 'proxy_override', null, true)),
                public_data_endpoint_enabled: build.template(std.get(block, 'public_data_endpoint_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                service_principal_type: build.template(std.get(block, 'service_principal_type', null, true)),
                sku_name: build.template(block.sku_name),
                storage_account_type: build.template(std.get(block, 'storage_account_type', null, true)),
                storage_size_in_gb: build.template(block.storage_size_in_gb),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                timezone_id: build.template(std.get(block, 'timezone_id', null, true)),
                vcores: build.template(block.vcores),
                zone_redundant_enabled: build.template(std.get(block, 'zone_redundant_enabled', null, true)),
              }),
            },
          },
        },
      },
      administrator_login: p.child('administrator_login').out,
      administrator_login_password: p.child('administrator_login_password').out,
      collation: p.child('collation').out,
      dns_zone: p.child('dns_zone').out,
      dns_zone_partner_id: p.child('dns_zone_partner_id').out,
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      license_type: p.child('license_type').out,
      location: p.child('location').out,
      maintenance_configuration_name: p.child('maintenance_configuration_name').out,
      minimum_tls_version: p.child('minimum_tls_version').out,
      name: p.child('name').out,
      proxy_override: p.child('proxy_override').out,
      public_data_endpoint_enabled: p.child('public_data_endpoint_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      service_principal_type: p.child('service_principal_type').out,
      sku_name: p.child('sku_name').out,
      storage_account_type: p.child('storage_account_type').out,
      storage_size_in_gb: p.child('storage_size_in_gb').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      timezone_id: p.child('timezone_id').out,
      vcores: p.child('vcores').out,
      zone_redundant_enabled: p.child('zone_redundant_enabled').out,
    },
    mssql_managed_instance_active_directory_administrator(name, block): {
      local p = path(['azurerm_mssql_managed_instance_active_directory_administrator', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_managed_instance_active_directory_administrator: {
              [name]: std.prune({
                azuread_authentication_only: build.template(std.get(block, 'azuread_authentication_only', null, true)),
                login_username: build.template(block.login_username),
                managed_instance_id: build.template(block.managed_instance_id),
                object_id: build.template(block.object_id),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      azuread_authentication_only: p.child('azuread_authentication_only').out,
      id: p.child('id').out,
      login_username: p.child('login_username').out,
      managed_instance_id: p.child('managed_instance_id').out,
      object_id: p.child('object_id').out,
      tenant_id: p.child('tenant_id').out,
    },
    mssql_managed_instance_failover_group(name, block): {
      local p = path(['azurerm_mssql_managed_instance_failover_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_managed_instance_failover_group: {
              [name]: std.prune({
                location: build.template(block.location),
                managed_instance_id: build.template(block.managed_instance_id),
                name: build.template(block.name),
                partner_managed_instance_id: build.template(block.partner_managed_instance_id),
                readonly_endpoint_failover_policy_enabled: build.template(std.get(block, 'readonly_endpoint_failover_policy_enabled', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      managed_instance_id: p.child('managed_instance_id').out,
      name: p.child('name').out,
      partner_managed_instance_id: p.child('partner_managed_instance_id').out,
      partner_region: p.child('partner_region').out,
      readonly_endpoint_failover_policy_enabled: p.child('readonly_endpoint_failover_policy_enabled').out,
      role: p.child('role').out,
    },
    mssql_managed_instance_security_alert_policy(name, block): {
      local p = path(['azurerm_mssql_managed_instance_security_alert_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_managed_instance_security_alert_policy: {
              [name]: std.prune({
                disabled_alerts: build.template(std.get(block, 'disabled_alerts', null, true)),
                email_account_admins_enabled: build.template(std.get(block, 'email_account_admins_enabled', null, true)),
                email_addresses: build.template(std.get(block, 'email_addresses', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                managed_instance_name: build.template(block.managed_instance_name),
                resource_group_name: build.template(block.resource_group_name),
                retention_days: build.template(std.get(block, 'retention_days', null, true)),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_endpoint: build.template(std.get(block, 'storage_endpoint', null, true)),
              }),
            },
          },
        },
      },
      disabled_alerts: p.child('disabled_alerts').out,
      email_account_admins_enabled: p.child('email_account_admins_enabled').out,
      email_addresses: p.child('email_addresses').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      managed_instance_name: p.child('managed_instance_name').out,
      resource_group_name: p.child('resource_group_name').out,
      retention_days: p.child('retention_days').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_endpoint: p.child('storage_endpoint').out,
    },
    mssql_managed_instance_transparent_data_encryption(name, block): {
      local p = path(['azurerm_mssql_managed_instance_transparent_data_encryption', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_managed_instance_transparent_data_encryption: {
              [name]: std.prune({
                auto_rotation_enabled: build.template(std.get(block, 'auto_rotation_enabled', null, true)),
                key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null, true)),
                managed_instance_id: build.template(block.managed_instance_id),
              }),
            },
          },
        },
      },
      auto_rotation_enabled: p.child('auto_rotation_enabled').out,
      id: p.child('id').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      managed_instance_id: p.child('managed_instance_id').out,
    },
    mssql_managed_instance_vulnerability_assessment(name, block): {
      local p = path(['azurerm_mssql_managed_instance_vulnerability_assessment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_managed_instance_vulnerability_assessment: {
              [name]: std.prune({
                managed_instance_id: build.template(block.managed_instance_id),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_container_path: build.template(block.storage_container_path),
                storage_container_sas_key: build.template(std.get(block, 'storage_container_sas_key', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      managed_instance_id: p.child('managed_instance_id').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_container_path: p.child('storage_container_path').out,
      storage_container_sas_key: p.child('storage_container_sas_key').out,
    },
    mssql_outbound_firewall_rule(name, block): {
      local p = path(['azurerm_mssql_outbound_firewall_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_outbound_firewall_rule: {
              [name]: std.prune({
                name: build.template(block.name),
                server_id: build.template(block.server_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      server_id: p.child('server_id').out,
    },
    mssql_server(name, block): {
      local p = path(['azurerm_mssql_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_server: {
              [name]: std.prune({
                administrator_login_password: build.template(std.get(block, 'administrator_login_password', null, true)),
                connection_policy: build.template(std.get(block, 'connection_policy', null, true)),
                location: build.template(block.location),
                minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null, true)),
                name: build.template(block.name),
                outbound_network_restriction_enabled: build.template(std.get(block, 'outbound_network_restriction_enabled', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                transparent_data_encryption_key_vault_key_id: build.template(std.get(block, 'transparent_data_encryption_key_vault_key_id', null, true)),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      administrator_login: p.child('administrator_login').out,
      administrator_login_password: p.child('administrator_login_password').out,
      connection_policy: p.child('connection_policy').out,
      fully_qualified_domain_name: p.child('fully_qualified_domain_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      minimum_tls_version: p.child('minimum_tls_version').out,
      name: p.child('name').out,
      outbound_network_restriction_enabled: p.child('outbound_network_restriction_enabled').out,
      primary_user_assigned_identity_id: p.child('primary_user_assigned_identity_id').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      restorable_dropped_database_ids: p.child('restorable_dropped_database_ids').out,
      tags: p.child('tags').out,
      transparent_data_encryption_key_vault_key_id: p.child('transparent_data_encryption_key_vault_key_id').out,
      version: p.child('version').out,
    },
    mssql_server_dns_alias(name, block): {
      local p = path(['azurerm_mssql_server_dns_alias', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_server_dns_alias: {
              [name]: std.prune({
                mssql_server_id: build.template(block.mssql_server_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      dns_record: p.child('dns_record').out,
      id: p.child('id').out,
      mssql_server_id: p.child('mssql_server_id').out,
      name: p.child('name').out,
    },
    mssql_server_extended_auditing_policy(name, block): {
      local p = path(['azurerm_mssql_server_extended_auditing_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_server_extended_auditing_policy: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                log_monitoring_enabled: build.template(std.get(block, 'log_monitoring_enabled', null, true)),
                predicate_expression: build.template(std.get(block, 'predicate_expression', null, true)),
                retention_in_days: build.template(std.get(block, 'retention_in_days', null, true)),
                server_id: build.template(block.server_id),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_account_access_key_is_secondary: build.template(std.get(block, 'storage_account_access_key_is_secondary', null, true)),
                storage_account_subscription_id: build.template(std.get(block, 'storage_account_subscription_id', null, true)),
                storage_endpoint: build.template(std.get(block, 'storage_endpoint', null, true)),
              }),
            },
          },
        },
      },
      audit_actions_and_groups: p.child('audit_actions_and_groups').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      log_monitoring_enabled: p.child('log_monitoring_enabled').out,
      predicate_expression: p.child('predicate_expression').out,
      retention_in_days: p.child('retention_in_days').out,
      server_id: p.child('server_id').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_access_key_is_secondary: p.child('storage_account_access_key_is_secondary').out,
      storage_account_subscription_id: p.child('storage_account_subscription_id').out,
      storage_endpoint: p.child('storage_endpoint').out,
    },
    mssql_server_microsoft_support_auditing_policy(name, block): {
      local p = path(['azurerm_mssql_server_microsoft_support_auditing_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_server_microsoft_support_auditing_policy: {
              [name]: std.prune({
                blob_storage_endpoint: build.template(std.get(block, 'blob_storage_endpoint', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                log_monitoring_enabled: build.template(std.get(block, 'log_monitoring_enabled', null, true)),
                server_id: build.template(block.server_id),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_account_subscription_id: build.template(std.get(block, 'storage_account_subscription_id', null, true)),
              }),
            },
          },
        },
      },
      blob_storage_endpoint: p.child('blob_storage_endpoint').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      log_monitoring_enabled: p.child('log_monitoring_enabled').out,
      server_id: p.child('server_id').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_subscription_id: p.child('storage_account_subscription_id').out,
    },
    mssql_server_security_alert_policy(name, block): {
      local p = path(['azurerm_mssql_server_security_alert_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_server_security_alert_policy: {
              [name]: std.prune({
                disabled_alerts: build.template(std.get(block, 'disabled_alerts', null, true)),
                email_account_admins: build.template(std.get(block, 'email_account_admins', null, true)),
                email_addresses: build.template(std.get(block, 'email_addresses', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                retention_days: build.template(std.get(block, 'retention_days', null, true)),
                server_name: build.template(block.server_name),
                state: build.template(block.state),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_endpoint: build.template(std.get(block, 'storage_endpoint', null, true)),
              }),
            },
          },
        },
      },
      disabled_alerts: p.child('disabled_alerts').out,
      email_account_admins: p.child('email_account_admins').out,
      email_addresses: p.child('email_addresses').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
      retention_days: p.child('retention_days').out,
      server_name: p.child('server_name').out,
      state: p.child('state').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_endpoint: p.child('storage_endpoint').out,
    },
    mssql_server_transparent_data_encryption(name, block): {
      local p = path(['azurerm_mssql_server_transparent_data_encryption', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_server_transparent_data_encryption: {
              [name]: std.prune({
                auto_rotation_enabled: build.template(std.get(block, 'auto_rotation_enabled', null, true)),
                key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null, true)),
                managed_hsm_key_id: build.template(std.get(block, 'managed_hsm_key_id', null, true)),
                server_id: build.template(block.server_id),
              }),
            },
          },
        },
      },
      auto_rotation_enabled: p.child('auto_rotation_enabled').out,
      id: p.child('id').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      managed_hsm_key_id: p.child('managed_hsm_key_id').out,
      server_id: p.child('server_id').out,
    },
    mssql_server_vulnerability_assessment(name, block): {
      local p = path(['azurerm_mssql_server_vulnerability_assessment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_server_vulnerability_assessment: {
              [name]: std.prune({
                server_security_alert_policy_id: build.template(block.server_security_alert_policy_id),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_container_path: build.template(block.storage_container_path),
                storage_container_sas_key: build.template(std.get(block, 'storage_container_sas_key', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      server_security_alert_policy_id: p.child('server_security_alert_policy_id').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_container_path: p.child('storage_container_path').out,
      storage_container_sas_key: p.child('storage_container_sas_key').out,
    },
    mssql_virtual_machine(name, block): {
      local p = path(['azurerm_mssql_virtual_machine', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_virtual_machine: {
              [name]: std.prune({
                r_services_enabled: build.template(std.get(block, 'r_services_enabled', null, true)),
                sql_connectivity_port: build.template(std.get(block, 'sql_connectivity_port', null, true)),
                sql_connectivity_type: build.template(std.get(block, 'sql_connectivity_type', null, true)),
                sql_connectivity_update_password: build.template(std.get(block, 'sql_connectivity_update_password', null, true)),
                sql_connectivity_update_username: build.template(std.get(block, 'sql_connectivity_update_username', null, true)),
                sql_license_type: build.template(std.get(block, 'sql_license_type', null, true)),
                sql_virtual_machine_group_id: build.template(std.get(block, 'sql_virtual_machine_group_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_machine_id: build.template(block.virtual_machine_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      r_services_enabled: p.child('r_services_enabled').out,
      sql_connectivity_port: p.child('sql_connectivity_port').out,
      sql_connectivity_type: p.child('sql_connectivity_type').out,
      sql_connectivity_update_password: p.child('sql_connectivity_update_password').out,
      sql_connectivity_update_username: p.child('sql_connectivity_update_username').out,
      sql_license_type: p.child('sql_license_type').out,
      sql_virtual_machine_group_id: p.child('sql_virtual_machine_group_id').out,
      tags: p.child('tags').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
    },
    mssql_virtual_machine_availability_group_listener(name, block): {
      local p = path(['azurerm_mssql_virtual_machine_availability_group_listener', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_virtual_machine_availability_group_listener: {
              [name]: std.prune({
                availability_group_name: build.template(std.get(block, 'availability_group_name', null, true)),
                name: build.template(block.name),
                port: build.template(std.get(block, 'port', null, true)),
                sql_virtual_machine_group_id: build.template(block.sql_virtual_machine_group_id),
              }),
            },
          },
        },
      },
      availability_group_name: p.child('availability_group_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      port: p.child('port').out,
      sql_virtual_machine_group_id: p.child('sql_virtual_machine_group_id').out,
    },
    mssql_virtual_machine_group(name, block): {
      local p = path(['azurerm_mssql_virtual_machine_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_virtual_machine_group: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sql_image_offer: build.template(block.sql_image_offer),
                sql_image_sku: build.template(block.sql_image_sku),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sql_image_offer: p.child('sql_image_offer').out,
      sql_image_sku: p.child('sql_image_sku').out,
      tags: p.child('tags').out,
    },
    mssql_virtual_network_rule(name, block): {
      local p = path(['azurerm_mssql_virtual_network_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mssql_virtual_network_rule: {
              [name]: std.prune({
                ignore_missing_vnet_service_endpoint: build.template(std.get(block, 'ignore_missing_vnet_service_endpoint', null, true)),
                name: build.template(block.name),
                server_id: build.template(block.server_id),
                subnet_id: build.template(block.subnet_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ignore_missing_vnet_service_endpoint: p.child('ignore_missing_vnet_service_endpoint').out,
      name: p.child('name').out,
      server_id: p.child('server_id').out,
      subnet_id: p.child('subnet_id').out,
    },
    mysql_flexible_database(name, block): {
      local p = path(['azurerm_mysql_flexible_database', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mysql_flexible_database: {
              [name]: std.prune({
                charset: build.template(block.charset),
                collation: build.template(block.collation),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                server_name: build.template(block.server_name),
              }),
            },
          },
        },
      },
      charset: p.child('charset').out,
      collation: p.child('collation').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      server_name: p.child('server_name').out,
    },
    mysql_flexible_server(name, block): {
      local p = path(['azurerm_mysql_flexible_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mysql_flexible_server: {
              [name]: std.prune({
                administrator_password: build.template(std.get(block, 'administrator_password', null, true)),
                backup_retention_days: build.template(std.get(block, 'backup_retention_days', null, true)),
                create_mode: build.template(std.get(block, 'create_mode', null, true)),
                delegated_subnet_id: build.template(std.get(block, 'delegated_subnet_id', null, true)),
                geo_redundant_backup_enabled: build.template(std.get(block, 'geo_redundant_backup_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                point_in_time_restore_time_in_utc: build.template(std.get(block, 'point_in_time_restore_time_in_utc', null, true)),
                private_dns_zone_id: build.template(std.get(block, 'private_dns_zone_id', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                source_server_id: build.template(std.get(block, 'source_server_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      administrator_login: p.child('administrator_login').out,
      administrator_password: p.child('administrator_password').out,
      backup_retention_days: p.child('backup_retention_days').out,
      create_mode: p.child('create_mode').out,
      delegated_subnet_id: p.child('delegated_subnet_id').out,
      fqdn: p.child('fqdn').out,
      geo_redundant_backup_enabled: p.child('geo_redundant_backup_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      point_in_time_restore_time_in_utc: p.child('point_in_time_restore_time_in_utc').out,
      private_dns_zone_id: p.child('private_dns_zone_id').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      replica_capacity: p.child('replica_capacity').out,
      replication_role: p.child('replication_role').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      source_server_id: p.child('source_server_id').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
      zone: p.child('zone').out,
    },
    mysql_flexible_server_active_directory_administrator(name, block): {
      local p = path(['azurerm_mysql_flexible_server_active_directory_administrator', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mysql_flexible_server_active_directory_administrator: {
              [name]: std.prune({
                identity_id: build.template(block.identity_id),
                login: build.template(block.login),
                object_id: build.template(block.object_id),
                server_id: build.template(block.server_id),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity_id: p.child('identity_id').out,
      login: p.child('login').out,
      object_id: p.child('object_id').out,
      server_id: p.child('server_id').out,
      tenant_id: p.child('tenant_id').out,
    },
    mysql_flexible_server_configuration(name, block): {
      local p = path(['azurerm_mysql_flexible_server_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mysql_flexible_server_configuration: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                server_name: build.template(block.server_name),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      server_name: p.child('server_name').out,
      value: p.child('value').out,
    },
    mysql_flexible_server_firewall_rule(name, block): {
      local p = path(['azurerm_mysql_flexible_server_firewall_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_mysql_flexible_server_firewall_rule: {
              [name]: std.prune({
                end_ip_address: build.template(block.end_ip_address),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                server_name: build.template(block.server_name),
                start_ip_address: build.template(block.start_ip_address),
              }),
            },
          },
        },
      },
      end_ip_address: p.child('end_ip_address').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      server_name: p.child('server_name').out,
      start_ip_address: p.child('start_ip_address').out,
    },
    nat_gateway(name, block): {
      local p = path(['azurerm_nat_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_nat_gateway: {
              [name]: std.prune({
                idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(std.get(block, 'sku_name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      idle_timeout_in_minutes: p.child('idle_timeout_in_minutes').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      resource_guid: p.child('resource_guid').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    nat_gateway_public_ip_association(name, block): {
      local p = path(['azurerm_nat_gateway_public_ip_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_nat_gateway_public_ip_association: {
              [name]: std.prune({
                nat_gateway_id: build.template(block.nat_gateway_id),
                public_ip_address_id: build.template(block.public_ip_address_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      nat_gateway_id: p.child('nat_gateway_id').out,
      public_ip_address_id: p.child('public_ip_address_id').out,
    },
    nat_gateway_public_ip_prefix_association(name, block): {
      local p = path(['azurerm_nat_gateway_public_ip_prefix_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_nat_gateway_public_ip_prefix_association: {
              [name]: std.prune({
                nat_gateway_id: build.template(block.nat_gateway_id),
                public_ip_prefix_id: build.template(block.public_ip_prefix_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      nat_gateway_id: p.child('nat_gateway_id').out,
      public_ip_prefix_id: p.child('public_ip_prefix_id').out,
    },
    netapp_account(name, block): {
      local p = path(['azurerm_netapp_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_netapp_account: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    netapp_account_encryption(name, block): {
      local p = path(['azurerm_netapp_account_encryption', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_netapp_account_encryption: {
              [name]: std.prune({
                encryption_key: build.template(block.encryption_key),
                netapp_account_id: build.template(block.netapp_account_id),
                system_assigned_identity_principal_id: build.template(std.get(block, 'system_assigned_identity_principal_id', null, true)),
                user_assigned_identity_id: build.template(std.get(block, 'user_assigned_identity_id', null, true)),
              }),
            },
          },
        },
      },
      encryption_key: p.child('encryption_key').out,
      id: p.child('id').out,
      netapp_account_id: p.child('netapp_account_id').out,
      system_assigned_identity_principal_id: p.child('system_assigned_identity_principal_id').out,
      user_assigned_identity_id: p.child('user_assigned_identity_id').out,
    },
    netapp_pool(name, block): {
      local p = path(['azurerm_netapp_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_netapp_pool: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                encryption_type: build.template(std.get(block, 'encryption_type', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                qos_type: build.template(std.get(block, 'qos_type', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                service_level: build.template(block.service_level),
                size_in_tb: build.template(block.size_in_tb),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      encryption_type: p.child('encryption_type').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      qos_type: p.child('qos_type').out,
      resource_group_name: p.child('resource_group_name').out,
      service_level: p.child('service_level').out,
      size_in_tb: p.child('size_in_tb').out,
      tags: p.child('tags').out,
    },
    netapp_snapshot(name, block): {
      local p = path(['azurerm_netapp_snapshot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_netapp_snapshot: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                location: build.template(block.location),
                name: build.template(block.name),
                pool_name: build.template(block.pool_name),
                resource_group_name: build.template(block.resource_group_name),
                volume_name: build.template(block.volume_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      pool_name: p.child('pool_name').out,
      resource_group_name: p.child('resource_group_name').out,
      volume_name: p.child('volume_name').out,
    },
    netapp_snapshot_policy(name, block): {
      local p = path(['azurerm_netapp_snapshot_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_netapp_snapshot_policy: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                enabled: build.template(block.enabled),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    netapp_volume(name, block): {
      local p = path(['azurerm_netapp_volume', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_netapp_volume: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                azure_vmware_data_store_enabled: build.template(std.get(block, 'azure_vmware_data_store_enabled', null, true)),
                create_from_snapshot_resource_id: build.template(std.get(block, 'create_from_snapshot_resource_id', null, true)),
                kerberos_enabled: build.template(std.get(block, 'kerberos_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                network_features: build.template(std.get(block, 'network_features', null, true)),
                pool_name: build.template(block.pool_name),
                resource_group_name: build.template(block.resource_group_name),
                service_level: build.template(block.service_level),
                smb3_protocol_encryption_enabled: build.template(std.get(block, 'smb3_protocol_encryption_enabled', null, true)),
                smb_access_based_enumeration_enabled: build.template(std.get(block, 'smb_access_based_enumeration_enabled', null, true)),
                smb_continuous_availability_enabled: build.template(std.get(block, 'smb_continuous_availability_enabled', null, true)),
                smb_non_browsable_enabled: build.template(std.get(block, 'smb_non_browsable_enabled', null, true)),
                storage_quota_in_gb: build.template(block.storage_quota_in_gb),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                volume_path: build.template(block.volume_path),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      azure_vmware_data_store_enabled: p.child('azure_vmware_data_store_enabled').out,
      create_from_snapshot_resource_id: p.child('create_from_snapshot_resource_id').out,
      encryption_key_source: p.child('encryption_key_source').out,
      id: p.child('id').out,
      kerberos_enabled: p.child('kerberos_enabled').out,
      key_vault_private_endpoint_id: p.child('key_vault_private_endpoint_id').out,
      location: p.child('location').out,
      mount_ip_addresses: p.child('mount_ip_addresses').out,
      name: p.child('name').out,
      network_features: p.child('network_features').out,
      pool_name: p.child('pool_name').out,
      protocols: p.child('protocols').out,
      resource_group_name: p.child('resource_group_name').out,
      security_style: p.child('security_style').out,
      service_level: p.child('service_level').out,
      smb3_protocol_encryption_enabled: p.child('smb3_protocol_encryption_enabled').out,
      smb_access_based_enumeration_enabled: p.child('smb_access_based_enumeration_enabled').out,
      smb_continuous_availability_enabled: p.child('smb_continuous_availability_enabled').out,
      smb_non_browsable_enabled: p.child('smb_non_browsable_enabled').out,
      snapshot_directory_visible: p.child('snapshot_directory_visible').out,
      storage_quota_in_gb: p.child('storage_quota_in_gb').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      throughput_in_mibps: p.child('throughput_in_mibps').out,
      volume_path: p.child('volume_path').out,
      zone: p.child('zone').out,
    },
    netapp_volume_group_sap_hana(name, block): {
      local p = path(['azurerm_netapp_volume_group_sap_hana', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_netapp_volume_group_sap_hana: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                application_identifier: build.template(block.application_identifier),
                group_description: build.template(block.group_description),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      application_identifier: p.child('application_identifier').out,
      group_description: p.child('group_description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    netapp_volume_quota_rule(name, block): {
      local p = path(['azurerm_netapp_volume_quota_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_netapp_volume_quota_rule: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                quota_size_in_kib: build.template(block.quota_size_in_kib),
                quota_target: build.template(std.get(block, 'quota_target', null, true)),
                quota_type: build.template(block.quota_type),
                volume_id: build.template(block.volume_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      quota_size_in_kib: p.child('quota_size_in_kib').out,
      quota_target: p.child('quota_target').out,
      quota_type: p.child('quota_type').out,
      volume_id: p.child('volume_id').out,
    },
    network_connection_monitor(name, block): {
      local p = path(['azurerm_network_connection_monitor', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_connection_monitor: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                network_watcher_id: build.template(block.network_watcher_id),
                notes: build.template(std.get(block, 'notes', null, true)),
                output_workspace_resource_ids: build.template(std.get(block, 'output_workspace_resource_ids', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      network_watcher_id: p.child('network_watcher_id').out,
      notes: p.child('notes').out,
      output_workspace_resource_ids: p.child('output_workspace_resource_ids').out,
      tags: p.child('tags').out,
    },
    network_ddos_protection_plan(name, block): {
      local p = path(['azurerm_network_ddos_protection_plan', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_ddos_protection_plan: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      virtual_network_ids: p.child('virtual_network_ids').out,
    },
    network_function_azure_traffic_collector(name, block): {
      local p = path(['azurerm_network_function_azure_traffic_collector', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_function_azure_traffic_collector: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      collector_policy_ids: p.child('collector_policy_ids').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
    },
    network_function_collector_policy(name, block): {
      local p = path(['azurerm_network_function_collector_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_function_collector_policy: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                traffic_collector_id: build.template(block.traffic_collector_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      traffic_collector_id: p.child('traffic_collector_id').out,
    },
    network_interface(name, block): {
      local p = path(['azurerm_network_interface', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_interface: {
              [name]: std.prune({
                accelerated_networking_enabled: build.template(std.get(block, 'accelerated_networking_enabled', null, true)),
                auxiliary_mode: build.template(std.get(block, 'auxiliary_mode', null, true)),
                auxiliary_sku: build.template(std.get(block, 'auxiliary_sku', null, true)),
                dns_servers: build.template(std.get(block, 'dns_servers', null, true)),
                edge_zone: build.template(std.get(block, 'edge_zone', null, true)),
                internal_dns_name_label: build.template(std.get(block, 'internal_dns_name_label', null, true)),
                ip_forwarding_enabled: build.template(std.get(block, 'ip_forwarding_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      accelerated_networking_enabled: p.child('accelerated_networking_enabled').out,
      applied_dns_servers: p.child('applied_dns_servers').out,
      auxiliary_mode: p.child('auxiliary_mode').out,
      auxiliary_sku: p.child('auxiliary_sku').out,
      dns_servers: p.child('dns_servers').out,
      edge_zone: p.child('edge_zone').out,
      id: p.child('id').out,
      internal_dns_name_label: p.child('internal_dns_name_label').out,
      internal_domain_name_suffix: p.child('internal_domain_name_suffix').out,
      ip_forwarding_enabled: p.child('ip_forwarding_enabled').out,
      location: p.child('location').out,
      mac_address: p.child('mac_address').out,
      name: p.child('name').out,
      private_ip_address: p.child('private_ip_address').out,
      private_ip_addresses: p.child('private_ip_addresses').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
    },
    network_interface_application_gateway_backend_address_pool_association(name, block): {
      local p = path(['azurerm_network_interface_application_gateway_backend_address_pool_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_interface_application_gateway_backend_address_pool_association: {
              [name]: std.prune({
                backend_address_pool_id: build.template(block.backend_address_pool_id),
                ip_configuration_name: build.template(block.ip_configuration_name),
                network_interface_id: build.template(block.network_interface_id),
              }),
            },
          },
        },
      },
      backend_address_pool_id: p.child('backend_address_pool_id').out,
      id: p.child('id').out,
      ip_configuration_name: p.child('ip_configuration_name').out,
      network_interface_id: p.child('network_interface_id').out,
    },
    network_interface_application_security_group_association(name, block): {
      local p = path(['azurerm_network_interface_application_security_group_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_interface_application_security_group_association: {
              [name]: std.prune({
                application_security_group_id: build.template(block.application_security_group_id),
                network_interface_id: build.template(block.network_interface_id),
              }),
            },
          },
        },
      },
      application_security_group_id: p.child('application_security_group_id').out,
      id: p.child('id').out,
      network_interface_id: p.child('network_interface_id').out,
    },
    network_interface_backend_address_pool_association(name, block): {
      local p = path(['azurerm_network_interface_backend_address_pool_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_interface_backend_address_pool_association: {
              [name]: std.prune({
                backend_address_pool_id: build.template(block.backend_address_pool_id),
                ip_configuration_name: build.template(block.ip_configuration_name),
                network_interface_id: build.template(block.network_interface_id),
              }),
            },
          },
        },
      },
      backend_address_pool_id: p.child('backend_address_pool_id').out,
      id: p.child('id').out,
      ip_configuration_name: p.child('ip_configuration_name').out,
      network_interface_id: p.child('network_interface_id').out,
    },
    network_interface_nat_rule_association(name, block): {
      local p = path(['azurerm_network_interface_nat_rule_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_interface_nat_rule_association: {
              [name]: std.prune({
                ip_configuration_name: build.template(block.ip_configuration_name),
                nat_rule_id: build.template(block.nat_rule_id),
                network_interface_id: build.template(block.network_interface_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ip_configuration_name: p.child('ip_configuration_name').out,
      nat_rule_id: p.child('nat_rule_id').out,
      network_interface_id: p.child('network_interface_id').out,
    },
    network_interface_security_group_association(name, block): {
      local p = path(['azurerm_network_interface_security_group_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_interface_security_group_association: {
              [name]: std.prune({
                network_interface_id: build.template(block.network_interface_id),
                network_security_group_id: build.template(block.network_security_group_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      network_interface_id: p.child('network_interface_id').out,
      network_security_group_id: p.child('network_security_group_id').out,
    },
    network_manager(name, block): {
      local p = path(['azurerm_network_manager', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_manager: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                scope_accesses: build.template(block.scope_accesses),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      cross_tenant_scopes: p.child('cross_tenant_scopes').out,
      description: p.child('description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scope_accesses: p.child('scope_accesses').out,
      tags: p.child('tags').out,
    },
    network_manager_admin_rule(name, block): {
      local p = path(['azurerm_network_manager_admin_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_manager_admin_rule: {
              [name]: std.prune({
                action: build.template(block.action),
                admin_rule_collection_id: build.template(block.admin_rule_collection_id),
                description: build.template(std.get(block, 'description', null, true)),
                destination_port_ranges: build.template(std.get(block, 'destination_port_ranges', null, true)),
                direction: build.template(block.direction),
                name: build.template(block.name),
                priority: build.template(block.priority),
                protocol: build.template(block.protocol),
                source_port_ranges: build.template(std.get(block, 'source_port_ranges', null, true)),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      admin_rule_collection_id: p.child('admin_rule_collection_id').out,
      description: p.child('description').out,
      destination_port_ranges: p.child('destination_port_ranges').out,
      direction: p.child('direction').out,
      id: p.child('id').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      protocol: p.child('protocol').out,
      source_port_ranges: p.child('source_port_ranges').out,
    },
    network_manager_admin_rule_collection(name, block): {
      local p = path(['azurerm_network_manager_admin_rule_collection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_manager_admin_rule_collection: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                network_group_ids: build.template(block.network_group_ids),
                security_admin_configuration_id: build.template(block.security_admin_configuration_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      network_group_ids: p.child('network_group_ids').out,
      security_admin_configuration_id: p.child('security_admin_configuration_id').out,
    },
    network_manager_connectivity_configuration(name, block): {
      local p = path(['azurerm_network_manager_connectivity_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_manager_connectivity_configuration: {
              [name]: std.prune({
                connectivity_topology: build.template(block.connectivity_topology),
                delete_existing_peering_enabled: build.template(std.get(block, 'delete_existing_peering_enabled', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                global_mesh_enabled: build.template(std.get(block, 'global_mesh_enabled', null, true)),
                name: build.template(block.name),
                network_manager_id: build.template(block.network_manager_id),
              }),
            },
          },
        },
      },
      connectivity_topology: p.child('connectivity_topology').out,
      delete_existing_peering_enabled: p.child('delete_existing_peering_enabled').out,
      description: p.child('description').out,
      global_mesh_enabled: p.child('global_mesh_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      network_manager_id: p.child('network_manager_id').out,
    },
    network_manager_deployment(name, block): {
      local p = path(['azurerm_network_manager_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_manager_deployment: {
              [name]: std.prune({
                configuration_ids: build.template(block.configuration_ids),
                location: build.template(block.location),
                network_manager_id: build.template(block.network_manager_id),
                scope_access: build.template(block.scope_access),
                triggers: build.template(std.get(block, 'triggers', null, true)),
              }),
            },
          },
        },
      },
      configuration_ids: p.child('configuration_ids').out,
      id: p.child('id').out,
      location: p.child('location').out,
      network_manager_id: p.child('network_manager_id').out,
      scope_access: p.child('scope_access').out,
      triggers: p.child('triggers').out,
    },
    network_manager_management_group_connection(name, block): {
      local p = path(['azurerm_network_manager_management_group_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_manager_management_group_connection: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                management_group_id: build.template(block.management_group_id),
                name: build.template(block.name),
                network_manager_id: build.template(block.network_manager_id),
              }),
            },
          },
        },
      },
      connection_state: p.child('connection_state').out,
      description: p.child('description').out,
      id: p.child('id').out,
      management_group_id: p.child('management_group_id').out,
      name: p.child('name').out,
      network_manager_id: p.child('network_manager_id').out,
    },
    network_manager_network_group(name, block): {
      local p = path(['azurerm_network_manager_network_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_manager_network_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                network_manager_id: build.template(block.network_manager_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      network_manager_id: p.child('network_manager_id').out,
    },
    network_manager_scope_connection(name, block): {
      local p = path(['azurerm_network_manager_scope_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_manager_scope_connection: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                network_manager_id: build.template(block.network_manager_id),
                target_scope_id: build.template(block.target_scope_id),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      connection_state: p.child('connection_state').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      network_manager_id: p.child('network_manager_id').out,
      target_scope_id: p.child('target_scope_id').out,
      tenant_id: p.child('tenant_id').out,
    },
    network_manager_security_admin_configuration(name, block): {
      local p = path(['azurerm_network_manager_security_admin_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_manager_security_admin_configuration: {
              [name]: std.prune({
                apply_on_network_intent_policy_based_services: build.template(std.get(block, 'apply_on_network_intent_policy_based_services', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                network_manager_id: build.template(block.network_manager_id),
              }),
            },
          },
        },
      },
      apply_on_network_intent_policy_based_services: p.child('apply_on_network_intent_policy_based_services').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      network_manager_id: p.child('network_manager_id').out,
    },
    network_manager_static_member(name, block): {
      local p = path(['azurerm_network_manager_static_member', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_manager_static_member: {
              [name]: std.prune({
                name: build.template(block.name),
                network_group_id: build.template(block.network_group_id),
                target_virtual_network_id: build.template(block.target_virtual_network_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      network_group_id: p.child('network_group_id').out,
      region: p.child('region').out,
      target_virtual_network_id: p.child('target_virtual_network_id').out,
    },
    network_manager_subscription_connection(name, block): {
      local p = path(['azurerm_network_manager_subscription_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_manager_subscription_connection: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                network_manager_id: build.template(block.network_manager_id),
                subscription_id: build.template(block.subscription_id),
              }),
            },
          },
        },
      },
      connection_state: p.child('connection_state').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      network_manager_id: p.child('network_manager_id').out,
      subscription_id: p.child('subscription_id').out,
    },
    network_packet_capture(name, block): {
      local p = path(['azurerm_network_packet_capture', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_packet_capture: {
              [name]: std.prune({
                maximum_bytes_per_packet: build.template(std.get(block, 'maximum_bytes_per_packet', null, true)),
                maximum_bytes_per_session: build.template(std.get(block, 'maximum_bytes_per_session', null, true)),
                maximum_capture_duration: build.template(std.get(block, 'maximum_capture_duration', null, true)),
                name: build.template(block.name),
                network_watcher_name: build.template(block.network_watcher_name),
                resource_group_name: build.template(block.resource_group_name),
                target_resource_id: build.template(block.target_resource_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      maximum_bytes_per_packet: p.child('maximum_bytes_per_packet').out,
      maximum_bytes_per_session: p.child('maximum_bytes_per_session').out,
      maximum_capture_duration: p.child('maximum_capture_duration').out,
      name: p.child('name').out,
      network_watcher_name: p.child('network_watcher_name').out,
      resource_group_name: p.child('resource_group_name').out,
      target_resource_id: p.child('target_resource_id').out,
    },
    network_profile(name, block): {
      local p = path(['azurerm_network_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_profile: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      container_network_interface_ids: p.child('container_network_interface_ids').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    network_security_group(name, block): {
      local p = path(['azurerm_network_security_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_security_group: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      security_rule: p.child('security_rule').out,
      tags: p.child('tags').out,
    },
    network_security_rule(name, block): {
      local p = path(['azurerm_network_security_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_security_rule: {
              [name]: std.prune({
                access: build.template(block.access),
                description: build.template(std.get(block, 'description', null, true)),
                destination_address_prefix: build.template(std.get(block, 'destination_address_prefix', null, true)),
                destination_address_prefixes: build.template(std.get(block, 'destination_address_prefixes', null, true)),
                destination_application_security_group_ids: build.template(std.get(block, 'destination_application_security_group_ids', null, true)),
                destination_port_range: build.template(std.get(block, 'destination_port_range', null, true)),
                destination_port_ranges: build.template(std.get(block, 'destination_port_ranges', null, true)),
                direction: build.template(block.direction),
                name: build.template(block.name),
                network_security_group_name: build.template(block.network_security_group_name),
                priority: build.template(block.priority),
                protocol: build.template(block.protocol),
                resource_group_name: build.template(block.resource_group_name),
                source_address_prefix: build.template(std.get(block, 'source_address_prefix', null, true)),
                source_address_prefixes: build.template(std.get(block, 'source_address_prefixes', null, true)),
                source_application_security_group_ids: build.template(std.get(block, 'source_application_security_group_ids', null, true)),
                source_port_range: build.template(std.get(block, 'source_port_range', null, true)),
                source_port_ranges: build.template(std.get(block, 'source_port_ranges', null, true)),
              }),
            },
          },
        },
      },
      access: p.child('access').out,
      description: p.child('description').out,
      destination_address_prefix: p.child('destination_address_prefix').out,
      destination_address_prefixes: p.child('destination_address_prefixes').out,
      destination_application_security_group_ids: p.child('destination_application_security_group_ids').out,
      destination_port_range: p.child('destination_port_range').out,
      destination_port_ranges: p.child('destination_port_ranges').out,
      direction: p.child('direction').out,
      id: p.child('id').out,
      name: p.child('name').out,
      network_security_group_name: p.child('network_security_group_name').out,
      priority: p.child('priority').out,
      protocol: p.child('protocol').out,
      resource_group_name: p.child('resource_group_name').out,
      source_address_prefix: p.child('source_address_prefix').out,
      source_address_prefixes: p.child('source_address_prefixes').out,
      source_application_security_group_ids: p.child('source_application_security_group_ids').out,
      source_port_range: p.child('source_port_range').out,
      source_port_ranges: p.child('source_port_ranges').out,
    },
    network_watcher(name, block): {
      local p = path(['azurerm_network_watcher', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_watcher: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    network_watcher_flow_log(name, block): {
      local p = path(['azurerm_network_watcher_flow_log', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_network_watcher_flow_log: {
              [name]: std.prune({
                enabled: build.template(block.enabled),
                name: build.template(block.name),
                network_security_group_id: build.template(block.network_security_group_id),
                network_watcher_name: build.template(block.network_watcher_name),
                resource_group_name: build.template(block.resource_group_name),
                storage_account_id: build.template(block.storage_account_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      network_security_group_id: p.child('network_security_group_id').out,
      network_watcher_name: p.child('network_watcher_name').out,
      resource_group_name: p.child('resource_group_name').out,
      storage_account_id: p.child('storage_account_id').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    new_relic_monitor(name, block): {
      local p = path(['azurerm_new_relic_monitor', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_new_relic_monitor: {
              [name]: std.prune({
                account_creation_source: build.template(std.get(block, 'account_creation_source', null, true)),
                ingestion_key: build.template(std.get(block, 'ingestion_key', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                org_creation_source: build.template(std.get(block, 'org_creation_source', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                user_id: build.template(std.get(block, 'user_id', null, true)),
              }),
            },
          },
        },
      },
      account_creation_source: p.child('account_creation_source').out,
      account_id: p.child('account_id').out,
      id: p.child('id').out,
      ingestion_key: p.child('ingestion_key').out,
      location: p.child('location').out,
      name: p.child('name').out,
      org_creation_source: p.child('org_creation_source').out,
      organization_id: p.child('organization_id').out,
      resource_group_name: p.child('resource_group_name').out,
      user_id: p.child('user_id').out,
    },
    new_relic_tag_rule(name, block): {
      local p = path(['azurerm_new_relic_tag_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_new_relic_tag_rule: {
              [name]: std.prune({
                activity_log_enabled: build.template(std.get(block, 'activity_log_enabled', null, true)),
                azure_active_directory_log_enabled: build.template(std.get(block, 'azure_active_directory_log_enabled', null, true)),
                metric_enabled: build.template(std.get(block, 'metric_enabled', null, true)),
                monitor_id: build.template(block.monitor_id),
                subscription_log_enabled: build.template(std.get(block, 'subscription_log_enabled', null, true)),
              }),
            },
          },
        },
      },
      activity_log_enabled: p.child('activity_log_enabled').out,
      azure_active_directory_log_enabled: p.child('azure_active_directory_log_enabled').out,
      id: p.child('id').out,
      metric_enabled: p.child('metric_enabled').out,
      monitor_id: p.child('monitor_id').out,
      subscription_log_enabled: p.child('subscription_log_enabled').out,
    },
    nginx_certificate(name, block): {
      local p = path(['azurerm_nginx_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_nginx_certificate: {
              [name]: std.prune({
                certificate_virtual_path: build.template(block.certificate_virtual_path),
                key_vault_secret_id: build.template(block.key_vault_secret_id),
                key_virtual_path: build.template(block.key_virtual_path),
                name: build.template(block.name),
                nginx_deployment_id: build.template(block.nginx_deployment_id),
              }),
            },
          },
        },
      },
      certificate_virtual_path: p.child('certificate_virtual_path').out,
      id: p.child('id').out,
      key_vault_secret_id: p.child('key_vault_secret_id').out,
      key_virtual_path: p.child('key_virtual_path').out,
      name: p.child('name').out,
      nginx_deployment_id: p.child('nginx_deployment_id').out,
    },
    nginx_configuration(name, block): {
      local p = path(['azurerm_nginx_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_nginx_configuration: {
              [name]: std.prune({
                nginx_deployment_id: build.template(block.nginx_deployment_id),
                package_data: build.template(std.get(block, 'package_data', null, true)),
                root_file: build.template(block.root_file),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      nginx_deployment_id: p.child('nginx_deployment_id').out,
      package_data: p.child('package_data').out,
      root_file: p.child('root_file').out,
    },
    nginx_deployment(name, block): {
      local p = path(['azurerm_nginx_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_nginx_deployment: {
              [name]: std.prune({
                automatic_upgrade_channel: build.template(std.get(block, 'automatic_upgrade_channel', null, true)),
                capacity: build.template(std.get(block, 'capacity', null, true)),
                diagnose_support_enabled: build.template(std.get(block, 'diagnose_support_enabled', null, true)),
                email: build.template(std.get(block, 'email', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      automatic_upgrade_channel: p.child('automatic_upgrade_channel').out,
      capacity: p.child('capacity').out,
      diagnose_support_enabled: p.child('diagnose_support_enabled').out,
      email: p.child('email').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      location: p.child('location').out,
      managed_resource_group: p.child('managed_resource_group').out,
      name: p.child('name').out,
      nginx_version: p.child('nginx_version').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    notification_hub(name, block): {
      local p = path(['azurerm_notification_hub', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_notification_hub: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    notification_hub_authorization_rule(name, block): {
      local p = path(['azurerm_notification_hub_authorization_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_notification_hub_authorization_rule: {
              [name]: std.prune({
                listen: build.template(std.get(block, 'listen', null, true)),
                manage: build.template(std.get(block, 'manage', null, true)),
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                notification_hub_name: build.template(block.notification_hub_name),
                resource_group_name: build.template(block.resource_group_name),
                send: build.template(std.get(block, 'send', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      listen: p.child('listen').out,
      manage: p.child('manage').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      notification_hub_name: p.child('notification_hub_name').out,
      primary_access_key: p.child('primary_access_key').out,
      primary_connection_string: p.child('primary_connection_string').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      send: p.child('send').out,
    },
    notification_hub_namespace(name, block): {
      local p = path(['azurerm_notification_hub_namespace', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_notification_hub_namespace: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                namespace_type: build.template(block.namespace_type),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      namespace_type: p.child('namespace_type').out,
      resource_group_name: p.child('resource_group_name').out,
      servicebus_endpoint: p.child('servicebus_endpoint').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    oracle_autonomous_database(name, block): {
      local p = path(['azurerm_oracle_autonomous_database', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_oracle_autonomous_database: {
              [name]: std.prune({
                admin_password: build.template(block.admin_password),
                auto_scaling_enabled: build.template(block.auto_scaling_enabled),
                auto_scaling_for_storage_enabled: build.template(block.auto_scaling_for_storage_enabled),
                backup_retention_period_in_days: build.template(block.backup_retention_period_in_days),
                character_set: build.template(block.character_set),
                compute_count: build.template(block.compute_count),
                compute_model: build.template(block.compute_model),
                data_storage_size_in_tbs: build.template(block.data_storage_size_in_tbs),
                db_version: build.template(block.db_version),
                db_workload: build.template(block.db_workload),
                display_name: build.template(block.display_name),
                license_model: build.template(block.license_model),
                location: build.template(block.location),
                mtls_connection_required: build.template(block.mtls_connection_required),
                name: build.template(block.name),
                national_character_set: build.template(block.national_character_set),
                resource_group_name: build.template(block.resource_group_name),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_network_id: build.template(block.virtual_network_id),
              }),
            },
          },
        },
      },
      admin_password: p.child('admin_password').out,
      auto_scaling_enabled: p.child('auto_scaling_enabled').out,
      auto_scaling_for_storage_enabled: p.child('auto_scaling_for_storage_enabled').out,
      backup_retention_period_in_days: p.child('backup_retention_period_in_days').out,
      character_set: p.child('character_set').out,
      compute_count: p.child('compute_count').out,
      compute_model: p.child('compute_model').out,
      customer_contacts: p.child('customer_contacts').out,
      data_storage_size_in_tbs: p.child('data_storage_size_in_tbs').out,
      db_version: p.child('db_version').out,
      db_workload: p.child('db_workload').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      license_model: p.child('license_model').out,
      location: p.child('location').out,
      mtls_connection_required: p.child('mtls_connection_required').out,
      name: p.child('name').out,
      national_character_set: p.child('national_character_set').out,
      resource_group_name: p.child('resource_group_name').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    oracle_cloud_vm_cluster(name, block): {
      local p = path(['azurerm_oracle_cloud_vm_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_oracle_cloud_vm_cluster: {
              [name]: std.prune({
                backup_subnet_cidr: build.template(std.get(block, 'backup_subnet_cidr', null, true)),
                cloud_exadata_infrastructure_id: build.template(block.cloud_exadata_infrastructure_id),
                cpu_core_count: build.template(block.cpu_core_count),
                db_servers: build.template(block.db_servers),
                display_name: build.template(block.display_name),
                gi_version: build.template(block.gi_version),
                hostname: build.template(block.hostname),
                license_model: build.template(block.license_model),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                ssh_public_keys: build.template(block.ssh_public_keys),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_network_id: build.template(block.virtual_network_id),
              }),
            },
          },
        },
      },
      backup_subnet_cidr: p.child('backup_subnet_cidr').out,
      cloud_exadata_infrastructure_id: p.child('cloud_exadata_infrastructure_id').out,
      cluster_name: p.child('cluster_name').out,
      cpu_core_count: p.child('cpu_core_count').out,
      data_storage_percentage: p.child('data_storage_percentage').out,
      data_storage_size_in_tbs: p.child('data_storage_size_in_tbs').out,
      db_node_storage_size_in_gbs: p.child('db_node_storage_size_in_gbs').out,
      db_servers: p.child('db_servers').out,
      display_name: p.child('display_name').out,
      gi_version: p.child('gi_version').out,
      hostname: p.child('hostname').out,
      hostname_actual: p.child('hostname_actual').out,
      id: p.child('id').out,
      license_model: p.child('license_model').out,
      local_backup_enabled: p.child('local_backup_enabled').out,
      location: p.child('location').out,
      memory_size_in_gbs: p.child('memory_size_in_gbs').out,
      name: p.child('name').out,
      ocid: p.child('ocid').out,
      resource_group_name: p.child('resource_group_name').out,
      sparse_diskgroup_enabled: p.child('sparse_diskgroup_enabled').out,
      ssh_public_keys: p.child('ssh_public_keys').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      time_zone: p.child('time_zone').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    oracle_exadata_infrastructure(name, block): {
      local p = path(['azurerm_oracle_exadata_infrastructure', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_oracle_exadata_infrastructure: {
              [name]: std.prune({
                compute_count: build.template(block.compute_count),
                display_name: build.template(block.display_name),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                shape: build.template(block.shape),
                storage_count: build.template(block.storage_count),
                tags: build.template(std.get(block, 'tags', null, true)),
                zones: build.template(block.zones),
              }),
            },
          },
        },
      },
      compute_count: p.child('compute_count').out,
      customer_contacts: p.child('customer_contacts').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      shape: p.child('shape').out,
      storage_count: p.child('storage_count').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    orbital_contact(name, block): {
      local p = path(['azurerm_orbital_contact', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_orbital_contact: {
              [name]: std.prune({
                contact_profile_id: build.template(block.contact_profile_id),
                ground_station_name: build.template(block.ground_station_name),
                name: build.template(block.name),
                reservation_end_time: build.template(block.reservation_end_time),
                reservation_start_time: build.template(block.reservation_start_time),
                spacecraft_id: build.template(block.spacecraft_id),
              }),
            },
          },
        },
      },
      contact_profile_id: p.child('contact_profile_id').out,
      ground_station_name: p.child('ground_station_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      reservation_end_time: p.child('reservation_end_time').out,
      reservation_start_time: p.child('reservation_start_time').out,
      spacecraft_id: p.child('spacecraft_id').out,
    },
    orbital_contact_profile(name, block): {
      local p = path(['azurerm_orbital_contact_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_orbital_contact_profile: {
              [name]: std.prune({
                auto_tracking: build.template(block.auto_tracking),
                event_hub_uri: build.template(std.get(block, 'event_hub_uri', null, true)),
                location: build.template(block.location),
                minimum_elevation_degrees: build.template(std.get(block, 'minimum_elevation_degrees', null, true)),
                minimum_variable_contact_duration: build.template(block.minimum_variable_contact_duration),
                name: build.template(block.name),
                network_configuration_subnet_id: build.template(block.network_configuration_subnet_id),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      auto_tracking: p.child('auto_tracking').out,
      event_hub_uri: p.child('event_hub_uri').out,
      id: p.child('id').out,
      location: p.child('location').out,
      minimum_elevation_degrees: p.child('minimum_elevation_degrees').out,
      minimum_variable_contact_duration: p.child('minimum_variable_contact_duration').out,
      name: p.child('name').out,
      network_configuration_subnet_id: p.child('network_configuration_subnet_id').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    orbital_spacecraft(name, block): {
      local p = path(['azurerm_orbital_spacecraft', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_orbital_spacecraft: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                norad_id: build.template(block.norad_id),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                title_line: build.template(block.title_line),
                two_line_elements: build.template(block.two_line_elements),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      norad_id: p.child('norad_id').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      title_line: p.child('title_line').out,
      two_line_elements: p.child('two_line_elements').out,
    },
    orchestrated_virtual_machine_scale_set(name, block): {
      local p = path(['azurerm_orchestrated_virtual_machine_scale_set', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_orchestrated_virtual_machine_scale_set: {
              [name]: std.prune({
                capacity_reservation_group_id: build.template(std.get(block, 'capacity_reservation_group_id', null, true)),
                encryption_at_host_enabled: build.template(std.get(block, 'encryption_at_host_enabled', null, true)),
                eviction_policy: build.template(std.get(block, 'eviction_policy', null, true)),
                extension_operations_enabled: build.template(std.get(block, 'extension_operations_enabled', null, true)),
                extensions_time_budget: build.template(std.get(block, 'extensions_time_budget', null, true)),
                license_type: build.template(std.get(block, 'license_type', null, true)),
                location: build.template(block.location),
                max_bid_price: build.template(std.get(block, 'max_bid_price', null, true)),
                name: build.template(block.name),
                platform_fault_domain_count: build.template(block.platform_fault_domain_count),
                priority: build.template(std.get(block, 'priority', null, true)),
                proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(std.get(block, 'sku_name', null, true)),
                source_image_id: build.template(std.get(block, 'source_image_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_data_base64: build.template(std.get(block, 'user_data_base64', null, true)),
                zone_balance: build.template(std.get(block, 'zone_balance', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      capacity_reservation_group_id: p.child('capacity_reservation_group_id').out,
      encryption_at_host_enabled: p.child('encryption_at_host_enabled').out,
      eviction_policy: p.child('eviction_policy').out,
      extension_operations_enabled: p.child('extension_operations_enabled').out,
      extensions_time_budget: p.child('extensions_time_budget').out,
      id: p.child('id').out,
      instances: p.child('instances').out,
      license_type: p.child('license_type').out,
      location: p.child('location').out,
      max_bid_price: p.child('max_bid_price').out,
      name: p.child('name').out,
      platform_fault_domain_count: p.child('platform_fault_domain_count').out,
      priority: p.child('priority').out,
      proximity_placement_group_id: p.child('proximity_placement_group_id').out,
      resource_group_name: p.child('resource_group_name').out,
      single_placement_group: p.child('single_placement_group').out,
      sku_name: p.child('sku_name').out,
      source_image_id: p.child('source_image_id').out,
      tags: p.child('tags').out,
      unique_id: p.child('unique_id').out,
      user_data_base64: p.child('user_data_base64').out,
      zone_balance: p.child('zone_balance').out,
      zones: p.child('zones').out,
    },
    palo_alto_local_rulestack(name, block): {
      local p = path(['azurerm_palo_alto_local_rulestack', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_palo_alto_local_rulestack: {
              [name]: std.prune({
                anti_spyware_profile: build.template(std.get(block, 'anti_spyware_profile', null, true)),
                anti_virus_profile: build.template(std.get(block, 'anti_virus_profile', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                dns_subscription: build.template(std.get(block, 'dns_subscription', null, true)),
                file_blocking_profile: build.template(std.get(block, 'file_blocking_profile', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                url_filtering_profile: build.template(std.get(block, 'url_filtering_profile', null, true)),
                vulnerability_profile: build.template(std.get(block, 'vulnerability_profile', null, true)),
              }),
            },
          },
        },
      },
      anti_spyware_profile: p.child('anti_spyware_profile').out,
      anti_virus_profile: p.child('anti_virus_profile').out,
      description: p.child('description').out,
      dns_subscription: p.child('dns_subscription').out,
      file_blocking_profile: p.child('file_blocking_profile').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      url_filtering_profile: p.child('url_filtering_profile').out,
      vulnerability_profile: p.child('vulnerability_profile').out,
    },
    palo_alto_local_rulestack_certificate(name, block): {
      local p = path(['azurerm_palo_alto_local_rulestack_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_palo_alto_local_rulestack_certificate: {
              [name]: std.prune({
                audit_comment: build.template(std.get(block, 'audit_comment', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                key_vault_certificate_id: build.template(std.get(block, 'key_vault_certificate_id', null, true)),
                name: build.template(block.name),
                rulestack_id: build.template(block.rulestack_id),
                self_signed: build.template(std.get(block, 'self_signed', null, true)),
              }),
            },
          },
        },
      },
      audit_comment: p.child('audit_comment').out,
      description: p.child('description').out,
      id: p.child('id').out,
      key_vault_certificate_id: p.child('key_vault_certificate_id').out,
      name: p.child('name').out,
      rulestack_id: p.child('rulestack_id').out,
      self_signed: p.child('self_signed').out,
    },
    palo_alto_local_rulestack_fqdn_list(name, block): {
      local p = path(['azurerm_palo_alto_local_rulestack_fqdn_list', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_palo_alto_local_rulestack_fqdn_list: {
              [name]: std.prune({
                audit_comment: build.template(std.get(block, 'audit_comment', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                fully_qualified_domain_names: build.template(block.fully_qualified_domain_names),
                name: build.template(block.name),
                rulestack_id: build.template(block.rulestack_id),
              }),
            },
          },
        },
      },
      audit_comment: p.child('audit_comment').out,
      description: p.child('description').out,
      fully_qualified_domain_names: p.child('fully_qualified_domain_names').out,
      id: p.child('id').out,
      name: p.child('name').out,
      rulestack_id: p.child('rulestack_id').out,
    },
    palo_alto_local_rulestack_outbound_trust_certificate_association(name, block): {
      local p = path(['azurerm_palo_alto_local_rulestack_outbound_trust_certificate_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_palo_alto_local_rulestack_outbound_trust_certificate_association: {
              [name]: std.prune({
                certificate_id: build.template(block.certificate_id),
              }),
            },
          },
        },
      },
      certificate_id: p.child('certificate_id').out,
      id: p.child('id').out,
    },
    palo_alto_local_rulestack_outbound_untrust_certificate_association(name, block): {
      local p = path(['azurerm_palo_alto_local_rulestack_outbound_untrust_certificate_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_palo_alto_local_rulestack_outbound_untrust_certificate_association: {
              [name]: std.prune({
                certificate_id: build.template(block.certificate_id),
              }),
            },
          },
        },
      },
      certificate_id: p.child('certificate_id').out,
      id: p.child('id').out,
    },
    palo_alto_local_rulestack_prefix_list(name, block): {
      local p = path(['azurerm_palo_alto_local_rulestack_prefix_list', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_palo_alto_local_rulestack_prefix_list: {
              [name]: std.prune({
                audit_comment: build.template(std.get(block, 'audit_comment', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                prefix_list: build.template(block.prefix_list),
                rulestack_id: build.template(block.rulestack_id),
              }),
            },
          },
        },
      },
      audit_comment: p.child('audit_comment').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      prefix_list: p.child('prefix_list').out,
      rulestack_id: p.child('rulestack_id').out,
    },
    palo_alto_local_rulestack_rule(name, block): {
      local p = path(['azurerm_palo_alto_local_rulestack_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_palo_alto_local_rulestack_rule: {
              [name]: std.prune({
                action: build.template(block.action),
                applications: build.template(block.applications),
                audit_comment: build.template(std.get(block, 'audit_comment', null, true)),
                decryption_rule_type: build.template(std.get(block, 'decryption_rule_type', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                inspection_certificate_id: build.template(std.get(block, 'inspection_certificate_id', null, true)),
                logging_enabled: build.template(std.get(block, 'logging_enabled', null, true)),
                name: build.template(block.name),
                negate_destination: build.template(std.get(block, 'negate_destination', null, true)),
                negate_source: build.template(std.get(block, 'negate_source', null, true)),
                priority: build.template(block.priority),
                protocol: build.template(std.get(block, 'protocol', null, true)),
                protocol_ports: build.template(std.get(block, 'protocol_ports', null, true)),
                rulestack_id: build.template(block.rulestack_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      applications: p.child('applications').out,
      audit_comment: p.child('audit_comment').out,
      decryption_rule_type: p.child('decryption_rule_type').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      inspection_certificate_id: p.child('inspection_certificate_id').out,
      logging_enabled: p.child('logging_enabled').out,
      name: p.child('name').out,
      negate_destination: p.child('negate_destination').out,
      negate_source: p.child('negate_source').out,
      priority: p.child('priority').out,
      protocol: p.child('protocol').out,
      protocol_ports: p.child('protocol_ports').out,
      rulestack_id: p.child('rulestack_id').out,
      tags: p.child('tags').out,
    },
    palo_alto_next_generation_firewall_virtual_hub_local_rulestack(name, block): {
      local p = path(['azurerm_palo_alto_next_generation_firewall_virtual_hub_local_rulestack', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_palo_alto_next_generation_firewall_virtual_hub_local_rulestack: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                rulestack_id: build.template(block.rulestack_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      rulestack_id: p.child('rulestack_id').out,
      tags: p.child('tags').out,
    },
    palo_alto_next_generation_firewall_virtual_hub_panorama(name, block): {
      local p = path(['azurerm_palo_alto_next_generation_firewall_virtual_hub_panorama', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_palo_alto_next_generation_firewall_virtual_hub_panorama: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                panorama_base64_config: build.template(block.panorama_base64_config),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      panorama: p.child('panorama').out,
      panorama_base64_config: p.child('panorama_base64_config').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    palo_alto_next_generation_firewall_virtual_network_local_rulestack(name, block): {
      local p = path(['azurerm_palo_alto_next_generation_firewall_virtual_network_local_rulestack', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_palo_alto_next_generation_firewall_virtual_network_local_rulestack: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                rulestack_id: build.template(block.rulestack_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      rulestack_id: p.child('rulestack_id').out,
      tags: p.child('tags').out,
    },
    palo_alto_next_generation_firewall_virtual_network_panorama(name, block): {
      local p = path(['azurerm_palo_alto_next_generation_firewall_virtual_network_panorama', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_palo_alto_next_generation_firewall_virtual_network_panorama: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                panorama_base64_config: build.template(block.panorama_base64_config),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      panorama: p.child('panorama').out,
      panorama_base64_config: p.child('panorama_base64_config').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    palo_alto_virtual_network_appliance(name, block): {
      local p = path(['azurerm_palo_alto_virtual_network_appliance', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_palo_alto_virtual_network_appliance: {
              [name]: std.prune({
                name: build.template(block.name),
                virtual_hub_id: build.template(block.virtual_hub_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
    },
    pim_active_role_assignment(name, block): {
      local p = path(['azurerm_pim_active_role_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_pim_active_role_assignment: {
              [name]: std.prune({
                principal_id: build.template(block.principal_id),
                role_definition_id: build.template(block.role_definition_id),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      justification: p.child('justification').out,
      principal_id: p.child('principal_id').out,
      principal_type: p.child('principal_type').out,
      role_definition_id: p.child('role_definition_id').out,
      scope: p.child('scope').out,
    },
    pim_eligible_role_assignment(name, block): {
      local p = path(['azurerm_pim_eligible_role_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_pim_eligible_role_assignment: {
              [name]: std.prune({
                principal_id: build.template(block.principal_id),
                role_definition_id: build.template(block.role_definition_id),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      justification: p.child('justification').out,
      principal_id: p.child('principal_id').out,
      principal_type: p.child('principal_type').out,
      role_definition_id: p.child('role_definition_id').out,
      scope: p.child('scope').out,
    },
    point_to_site_vpn_gateway(name, block): {
      local p = path(['azurerm_point_to_site_vpn_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_point_to_site_vpn_gateway: {
              [name]: std.prune({
                dns_servers: build.template(std.get(block, 'dns_servers', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                routing_preference_internet_enabled: build.template(std.get(block, 'routing_preference_internet_enabled', null, true)),
                scale_unit: build.template(block.scale_unit),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_hub_id: build.template(block.virtual_hub_id),
                vpn_server_configuration_id: build.template(block.vpn_server_configuration_id),
              }),
            },
          },
        },
      },
      dns_servers: p.child('dns_servers').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      routing_preference_internet_enabled: p.child('routing_preference_internet_enabled').out,
      scale_unit: p.child('scale_unit').out,
      tags: p.child('tags').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
      vpn_server_configuration_id: p.child('vpn_server_configuration_id').out,
    },
    policy_definition(name, block): {
      local p = path(['azurerm_policy_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_policy_definition: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                management_group_id: build.template(std.get(block, 'management_group_id', null, true)),
                mode: build.template(block.mode),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                policy_rule: build.template(std.get(block, 'policy_rule', null, true)),
                policy_type: build.template(block.policy_type),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      management_group_id: p.child('management_group_id').out,
      metadata: p.child('metadata').out,
      mode: p.child('mode').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      policy_rule: p.child('policy_rule').out,
      policy_type: p.child('policy_type').out,
      role_definition_ids: p.child('role_definition_ids').out,
    },
    policy_set_definition(name, block): {
      local p = path(['azurerm_policy_set_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_policy_set_definition: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                management_group_id: build.template(std.get(block, 'management_group_id', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                policy_type: build.template(block.policy_type),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      management_group_id: p.child('management_group_id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      policy_type: p.child('policy_type').out,
    },
    policy_virtual_machine_configuration_assignment(name, block): {
      local p = path(['azurerm_policy_virtual_machine_configuration_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_policy_virtual_machine_configuration_assignment: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                virtual_machine_id: build.template(block.virtual_machine_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
    },
    portal_dashboard(name, block): {
      local p = path(['azurerm_portal_dashboard', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_portal_dashboard: {
              [name]: std.prune({
                dashboard_properties: build.template(block.dashboard_properties),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      dashboard_properties: p.child('dashboard_properties').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    portal_tenant_configuration(name, block): {
      local p = path(['azurerm_portal_tenant_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_portal_tenant_configuration: {
              [name]: std.prune({
                private_markdown_storage_enforced: build.template(block.private_markdown_storage_enforced),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      private_markdown_storage_enforced: p.child('private_markdown_storage_enforced').out,
    },
    postgresql_active_directory_administrator(name, block): {
      local p = path(['azurerm_postgresql_active_directory_administrator', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_postgresql_active_directory_administrator: {
              [name]: std.prune({
                login: build.template(block.login),
                object_id: build.template(block.object_id),
                resource_group_name: build.template(block.resource_group_name),
                server_name: build.template(block.server_name),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      login: p.child('login').out,
      object_id: p.child('object_id').out,
      resource_group_name: p.child('resource_group_name').out,
      server_name: p.child('server_name').out,
      tenant_id: p.child('tenant_id').out,
    },
    postgresql_configuration(name, block): {
      local p = path(['azurerm_postgresql_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_postgresql_configuration: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                server_name: build.template(block.server_name),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      server_name: p.child('server_name').out,
      value: p.child('value').out,
    },
    postgresql_database(name, block): {
      local p = path(['azurerm_postgresql_database', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_postgresql_database: {
              [name]: std.prune({
                charset: build.template(block.charset),
                collation: build.template(block.collation),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                server_name: build.template(block.server_name),
              }),
            },
          },
        },
      },
      charset: p.child('charset').out,
      collation: p.child('collation').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      server_name: p.child('server_name').out,
    },
    postgresql_firewall_rule(name, block): {
      local p = path(['azurerm_postgresql_firewall_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_postgresql_firewall_rule: {
              [name]: std.prune({
                end_ip_address: build.template(block.end_ip_address),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                server_name: build.template(block.server_name),
                start_ip_address: build.template(block.start_ip_address),
              }),
            },
          },
        },
      },
      end_ip_address: p.child('end_ip_address').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      server_name: p.child('server_name').out,
      start_ip_address: p.child('start_ip_address').out,
    },
    postgresql_flexible_server(name, block): {
      local p = path(['azurerm_postgresql_flexible_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_postgresql_flexible_server: {
              [name]: std.prune({
                administrator_password: build.template(std.get(block, 'administrator_password', null, true)),
                auto_grow_enabled: build.template(std.get(block, 'auto_grow_enabled', null, true)),
                create_mode: build.template(std.get(block, 'create_mode', null, true)),
                delegated_subnet_id: build.template(std.get(block, 'delegated_subnet_id', null, true)),
                geo_redundant_backup_enabled: build.template(std.get(block, 'geo_redundant_backup_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                point_in_time_restore_time_in_utc: build.template(std.get(block, 'point_in_time_restore_time_in_utc', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                replication_role: build.template(std.get(block, 'replication_role', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                source_server_id: build.template(std.get(block, 'source_server_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      administrator_login: p.child('administrator_login').out,
      administrator_password: p.child('administrator_password').out,
      auto_grow_enabled: p.child('auto_grow_enabled').out,
      backup_retention_days: p.child('backup_retention_days').out,
      create_mode: p.child('create_mode').out,
      delegated_subnet_id: p.child('delegated_subnet_id').out,
      fqdn: p.child('fqdn').out,
      geo_redundant_backup_enabled: p.child('geo_redundant_backup_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      point_in_time_restore_time_in_utc: p.child('point_in_time_restore_time_in_utc').out,
      private_dns_zone_id: p.child('private_dns_zone_id').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      replication_role: p.child('replication_role').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      source_server_id: p.child('source_server_id').out,
      storage_mb: p.child('storage_mb').out,
      storage_tier: p.child('storage_tier').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
      zone: p.child('zone').out,
    },
    postgresql_flexible_server_active_directory_administrator(name, block): {
      local p = path(['azurerm_postgresql_flexible_server_active_directory_administrator', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_postgresql_flexible_server_active_directory_administrator: {
              [name]: std.prune({
                object_id: build.template(block.object_id),
                principal_name: build.template(block.principal_name),
                principal_type: build.template(block.principal_type),
                resource_group_name: build.template(block.resource_group_name),
                server_name: build.template(block.server_name),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      object_id: p.child('object_id').out,
      principal_name: p.child('principal_name').out,
      principal_type: p.child('principal_type').out,
      resource_group_name: p.child('resource_group_name').out,
      server_name: p.child('server_name').out,
      tenant_id: p.child('tenant_id').out,
    },
    postgresql_flexible_server_configuration(name, block): {
      local p = path(['azurerm_postgresql_flexible_server_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_postgresql_flexible_server_configuration: {
              [name]: std.prune({
                name: build.template(block.name),
                server_id: build.template(block.server_id),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      server_id: p.child('server_id').out,
      value: p.child('value').out,
    },
    postgresql_flexible_server_database(name, block): {
      local p = path(['azurerm_postgresql_flexible_server_database', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_postgresql_flexible_server_database: {
              [name]: std.prune({
                charset: build.template(std.get(block, 'charset', null, true)),
                collation: build.template(std.get(block, 'collation', null, true)),
                name: build.template(block.name),
                server_id: build.template(block.server_id),
              }),
            },
          },
        },
      },
      charset: p.child('charset').out,
      collation: p.child('collation').out,
      id: p.child('id').out,
      name: p.child('name').out,
      server_id: p.child('server_id').out,
    },
    postgresql_flexible_server_firewall_rule(name, block): {
      local p = path(['azurerm_postgresql_flexible_server_firewall_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_postgresql_flexible_server_firewall_rule: {
              [name]: std.prune({
                end_ip_address: build.template(block.end_ip_address),
                name: build.template(block.name),
                server_id: build.template(block.server_id),
                start_ip_address: build.template(block.start_ip_address),
              }),
            },
          },
        },
      },
      end_ip_address: p.child('end_ip_address').out,
      id: p.child('id').out,
      name: p.child('name').out,
      server_id: p.child('server_id').out,
      start_ip_address: p.child('start_ip_address').out,
    },
    postgresql_flexible_server_virtual_endpoint(name, block): {
      local p = path(['azurerm_postgresql_flexible_server_virtual_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_postgresql_flexible_server_virtual_endpoint: {
              [name]: std.prune({
                name: build.template(block.name),
                replica_server_id: build.template(block.replica_server_id),
                source_server_id: build.template(block.source_server_id),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      replica_server_id: p.child('replica_server_id').out,
      source_server_id: p.child('source_server_id').out,
      type: p.child('type').out,
    },
    postgresql_server(name, block): {
      local p = path(['azurerm_postgresql_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_postgresql_server: {
              [name]: std.prune({
                administrator_login_password: build.template(std.get(block, 'administrator_login_password', null, true)),
                auto_grow_enabled: build.template(std.get(block, 'auto_grow_enabled', null, true)),
                create_mode: build.template(std.get(block, 'create_mode', null, true)),
                creation_source_server_id: build.template(std.get(block, 'creation_source_server_id', null, true)),
                geo_redundant_backup_enabled: build.template(std.get(block, 'geo_redundant_backup_enabled', null, true)),
                infrastructure_encryption_enabled: build.template(std.get(block, 'infrastructure_encryption_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                restore_point_in_time: build.template(std.get(block, 'restore_point_in_time', null, true)),
                sku_name: build.template(block.sku_name),
                ssl_enforcement_enabled: build.template(block.ssl_enforcement_enabled),
                ssl_minimal_tls_version_enforced: build.template(std.get(block, 'ssl_minimal_tls_version_enforced', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      administrator_login: p.child('administrator_login').out,
      administrator_login_password: p.child('administrator_login_password').out,
      auto_grow_enabled: p.child('auto_grow_enabled').out,
      backup_retention_days: p.child('backup_retention_days').out,
      create_mode: p.child('create_mode').out,
      creation_source_server_id: p.child('creation_source_server_id').out,
      fqdn: p.child('fqdn').out,
      geo_redundant_backup_enabled: p.child('geo_redundant_backup_enabled').out,
      id: p.child('id').out,
      infrastructure_encryption_enabled: p.child('infrastructure_encryption_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      restore_point_in_time: p.child('restore_point_in_time').out,
      sku_name: p.child('sku_name').out,
      ssl_enforcement_enabled: p.child('ssl_enforcement_enabled').out,
      ssl_minimal_tls_version_enforced: p.child('ssl_minimal_tls_version_enforced').out,
      storage_mb: p.child('storage_mb').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    postgresql_server_key(name, block): {
      local p = path(['azurerm_postgresql_server_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_postgresql_server_key: {
              [name]: std.prune({
                key_vault_key_id: build.template(block.key_vault_key_id),
                server_id: build.template(block.server_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      server_id: p.child('server_id').out,
    },
    postgresql_virtual_network_rule(name, block): {
      local p = path(['azurerm_postgresql_virtual_network_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_postgresql_virtual_network_rule: {
              [name]: std.prune({
                ignore_missing_vnet_service_endpoint: build.template(std.get(block, 'ignore_missing_vnet_service_endpoint', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                server_name: build.template(block.server_name),
                subnet_id: build.template(block.subnet_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ignore_missing_vnet_service_endpoint: p.child('ignore_missing_vnet_service_endpoint').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      server_name: p.child('server_name').out,
      subnet_id: p.child('subnet_id').out,
    },
    powerbi_embedded(name, block): {
      local p = path(['azurerm_powerbi_embedded', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_powerbi_embedded: {
              [name]: std.prune({
                administrators: build.template(block.administrators),
                location: build.template(block.location),
                mode: build.template(std.get(block, 'mode', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      administrators: p.child('administrators').out,
      id: p.child('id').out,
      location: p.child('location').out,
      mode: p.child('mode').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    private_dns_a_record(name, block): {
      local p = path(['azurerm_private_dns_a_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_a_record: {
              [name]: std.prune({
                name: build.template(block.name),
                records: build.template(block.records),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_aaaa_record(name, block): {
      local p = path(['azurerm_private_dns_aaaa_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_aaaa_record: {
              [name]: std.prune({
                name: build.template(block.name),
                records: build.template(block.records),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_cname_record(name, block): {
      local p = path(['azurerm_private_dns_cname_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_cname_record: {
              [name]: std.prune({
                name: build.template(block.name),
                record: build.template(block.record),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      record: p.child('record').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_mx_record(name, block): {
      local p = path(['azurerm_private_dns_mx_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_mx_record: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_ptr_record(name, block): {
      local p = path(['azurerm_private_dns_ptr_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_ptr_record: {
              [name]: std.prune({
                name: build.template(block.name),
                records: build.template(block.records),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_resolver(name, block): {
      local p = path(['azurerm_private_dns_resolver', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_resolver: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_network_id: build.template(block.virtual_network_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    private_dns_resolver_dns_forwarding_ruleset(name, block): {
      local p = path(['azurerm_private_dns_resolver_dns_forwarding_ruleset', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_resolver_dns_forwarding_ruleset: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                private_dns_resolver_outbound_endpoint_ids: build.template(block.private_dns_resolver_outbound_endpoint_ids),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_dns_resolver_outbound_endpoint_ids: p.child('private_dns_resolver_outbound_endpoint_ids').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    private_dns_resolver_forwarding_rule(name, block): {
      local p = path(['azurerm_private_dns_resolver_forwarding_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_resolver_forwarding_rule: {
              [name]: std.prune({
                dns_forwarding_ruleset_id: build.template(block.dns_forwarding_ruleset_id),
                domain_name: build.template(block.domain_name),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      dns_forwarding_ruleset_id: p.child('dns_forwarding_ruleset_id').out,
      domain_name: p.child('domain_name').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
    },
    private_dns_resolver_inbound_endpoint(name, block): {
      local p = path(['azurerm_private_dns_resolver_inbound_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_resolver_inbound_endpoint: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                private_dns_resolver_id: build.template(block.private_dns_resolver_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_dns_resolver_id: p.child('private_dns_resolver_id').out,
      tags: p.child('tags').out,
    },
    private_dns_resolver_outbound_endpoint(name, block): {
      local p = path(['azurerm_private_dns_resolver_outbound_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_resolver_outbound_endpoint: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                private_dns_resolver_id: build.template(block.private_dns_resolver_id),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_dns_resolver_id: p.child('private_dns_resolver_id').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
    },
    private_dns_resolver_virtual_network_link(name, block): {
      local p = path(['azurerm_private_dns_resolver_virtual_network_link', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_resolver_virtual_network_link: {
              [name]: std.prune({
                dns_forwarding_ruleset_id: build.template(block.dns_forwarding_ruleset_id),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                virtual_network_id: build.template(block.virtual_network_id),
              }),
            },
          },
        },
      },
      dns_forwarding_ruleset_id: p.child('dns_forwarding_ruleset_id').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    private_dns_srv_record(name, block): {
      local p = path(['azurerm_private_dns_srv_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_srv_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_txt_record(name, block): {
      local p = path(['azurerm_private_dns_txt_record', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_txt_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(block.ttl),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_zone(name, block): {
      local p = path(['azurerm_private_dns_zone', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_zone: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      max_number_of_record_sets: p.child('max_number_of_record_sets').out,
      max_number_of_virtual_network_links: p.child('max_number_of_virtual_network_links').out,
      max_number_of_virtual_network_links_with_registration: p.child('max_number_of_virtual_network_links_with_registration').out,
      name: p.child('name').out,
      number_of_record_sets: p.child('number_of_record_sets').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    private_dns_zone_virtual_network_link(name, block): {
      local p = path(['azurerm_private_dns_zone_virtual_network_link', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_dns_zone_virtual_network_link: {
              [name]: std.prune({
                name: build.template(block.name),
                private_dns_zone_name: build.template(block.private_dns_zone_name),
                registration_enabled: build.template(std.get(block, 'registration_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_network_id: build.template(block.virtual_network_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      private_dns_zone_name: p.child('private_dns_zone_name').out,
      registration_enabled: p.child('registration_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    private_endpoint(name, block): {
      local p = path(['azurerm_private_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_endpoint: {
              [name]: std.prune({
                custom_network_interface_name: build.template(std.get(block, 'custom_network_interface_name', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      custom_dns_configs: p.child('custom_dns_configs').out,
      custom_network_interface_name: p.child('custom_network_interface_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      network_interface: p.child('network_interface').out,
      private_dns_zone_configs: p.child('private_dns_zone_configs').out,
      resource_group_name: p.child('resource_group_name').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
    },
    private_endpoint_application_security_group_association(name, block): {
      local p = path(['azurerm_private_endpoint_application_security_group_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_endpoint_application_security_group_association: {
              [name]: std.prune({
                application_security_group_id: build.template(block.application_security_group_id),
                private_endpoint_id: build.template(block.private_endpoint_id),
              }),
            },
          },
        },
      },
      application_security_group_id: p.child('application_security_group_id').out,
      id: p.child('id').out,
      private_endpoint_id: p.child('private_endpoint_id').out,
    },
    private_link_service(name, block): {
      local p = path(['azurerm_private_link_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_private_link_service: {
              [name]: std.prune({
                auto_approval_subscription_ids: build.template(std.get(block, 'auto_approval_subscription_ids', null, true)),
                enable_proxy_protocol: build.template(std.get(block, 'enable_proxy_protocol', null, true)),
                fqdns: build.template(std.get(block, 'fqdns', null, true)),
                load_balancer_frontend_ip_configuration_ids: build.template(block.load_balancer_frontend_ip_configuration_ids),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                visibility_subscription_ids: build.template(std.get(block, 'visibility_subscription_ids', null, true)),
              }),
            },
          },
        },
      },
      alias: p.child('alias').out,
      auto_approval_subscription_ids: p.child('auto_approval_subscription_ids').out,
      enable_proxy_protocol: p.child('enable_proxy_protocol').out,
      fqdns: p.child('fqdns').out,
      id: p.child('id').out,
      load_balancer_frontend_ip_configuration_ids: p.child('load_balancer_frontend_ip_configuration_ids').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      visibility_subscription_ids: p.child('visibility_subscription_ids').out,
    },
    proximity_placement_group(name, block): {
      local p = path(['azurerm_proximity_placement_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_proximity_placement_group: {
              [name]: std.prune({
                allowed_vm_sizes: build.template(std.get(block, 'allowed_vm_sizes', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      allowed_vm_sizes: p.child('allowed_vm_sizes').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      zone: p.child('zone').out,
    },
    public_ip(name, block): {
      local p = path(['azurerm_public_ip', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_public_ip: {
              [name]: std.prune({
                allocation_method: build.template(block.allocation_method),
                ddos_protection_mode: build.template(std.get(block, 'ddos_protection_mode', null, true)),
                ddos_protection_plan_id: build.template(std.get(block, 'ddos_protection_plan_id', null, true)),
                domain_name_label: build.template(std.get(block, 'domain_name_label', null, true)),
                edge_zone: build.template(std.get(block, 'edge_zone', null, true)),
                idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null, true)),
                ip_tags: build.template(std.get(block, 'ip_tags', null, true)),
                ip_version: build.template(std.get(block, 'ip_version', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_ip_prefix_id: build.template(std.get(block, 'public_ip_prefix_id', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                reverse_fqdn: build.template(std.get(block, 'reverse_fqdn', null, true)),
                sku: build.template(std.get(block, 'sku', null, true)),
                sku_tier: build.template(std.get(block, 'sku_tier', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      allocation_method: p.child('allocation_method').out,
      ddos_protection_mode: p.child('ddos_protection_mode').out,
      ddos_protection_plan_id: p.child('ddos_protection_plan_id').out,
      domain_name_label: p.child('domain_name_label').out,
      edge_zone: p.child('edge_zone').out,
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      idle_timeout_in_minutes: p.child('idle_timeout_in_minutes').out,
      ip_address: p.child('ip_address').out,
      ip_tags: p.child('ip_tags').out,
      ip_version: p.child('ip_version').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_ip_prefix_id: p.child('public_ip_prefix_id').out,
      resource_group_name: p.child('resource_group_name').out,
      reverse_fqdn: p.child('reverse_fqdn').out,
      sku: p.child('sku').out,
      sku_tier: p.child('sku_tier').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    public_ip_prefix(name, block): {
      local p = path(['azurerm_public_ip_prefix', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_public_ip_prefix: {
              [name]: std.prune({
                ip_version: build.template(std.get(block, 'ip_version', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                prefix_length: build.template(std.get(block, 'prefix_length', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(std.get(block, 'sku', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ip_prefix: p.child('ip_prefix').out,
      ip_version: p.child('ip_version').out,
      location: p.child('location').out,
      name: p.child('name').out,
      prefix_length: p.child('prefix_length').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    purview_account(name, block): {
      local p = path(['azurerm_purview_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_purview_account: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_enabled: build.template(std.get(block, 'public_network_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      atlas_kafka_endpoint_primary_connection_string: p.child('atlas_kafka_endpoint_primary_connection_string').out,
      atlas_kafka_endpoint_secondary_connection_string: p.child('atlas_kafka_endpoint_secondary_connection_string').out,
      catalog_endpoint: p.child('catalog_endpoint').out,
      guardian_endpoint: p.child('guardian_endpoint').out,
      id: p.child('id').out,
      location: p.child('location').out,
      managed_resource_group_name: p.child('managed_resource_group_name').out,
      managed_resources: p.child('managed_resources').out,
      name: p.child('name').out,
      public_network_enabled: p.child('public_network_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      scan_endpoint: p.child('scan_endpoint').out,
      tags: p.child('tags').out,
    },
    recovery_services_vault(name, block): {
      local p = path(['azurerm_recovery_services_vault', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_recovery_services_vault: {
              [name]: std.prune({
                classic_vmware_replication_enabled: build.template(std.get(block, 'classic_vmware_replication_enabled', null, true)),
                cross_region_restore_enabled: build.template(std.get(block, 'cross_region_restore_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                soft_delete_enabled: build.template(std.get(block, 'soft_delete_enabled', null, true)),
                storage_mode_type: build.template(std.get(block, 'storage_mode_type', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      classic_vmware_replication_enabled: p.child('classic_vmware_replication_enabled').out,
      cross_region_restore_enabled: p.child('cross_region_restore_enabled').out,
      id: p.child('id').out,
      immutability: p.child('immutability').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      soft_delete_enabled: p.child('soft_delete_enabled').out,
      storage_mode_type: p.child('storage_mode_type').out,
      tags: p.child('tags').out,
    },
    recovery_services_vault_resource_guard_association(name, block): {
      local p = path(['azurerm_recovery_services_vault_resource_guard_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_recovery_services_vault_resource_guard_association: {
              [name]: std.prune({
                resource_guard_id: build.template(block.resource_guard_id),
                vault_id: build.template(block.vault_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      resource_guard_id: p.child('resource_guard_id').out,
      vault_id: p.child('vault_id').out,
    },
    redhat_openshift_cluster(name, block): {
      local p = path(['azurerm_redhat_openshift_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_redhat_openshift_cluster: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      console_url: p.child('console_url').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    redis_cache(name, block): {
      local p = path(['azurerm_redis_cache', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_redis_cache: {
              [name]: std.prune({
                access_keys_authentication_enabled: build.template(std.get(block, 'access_keys_authentication_enabled', null, true)),
                capacity: build.template(block.capacity),
                family: build.template(block.family),
                location: build.template(block.location),
                minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null, true)),
                name: build.template(block.name),
                non_ssl_port_enabled: build.template(std.get(block, 'non_ssl_port_enabled', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                redis_version: build.template(std.get(block, 'redis_version', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                shard_count: build.template(std.get(block, 'shard_count', null, true)),
                sku_name: build.template(block.sku_name),
                subnet_id: build.template(std.get(block, 'subnet_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tenant_settings: build.template(std.get(block, 'tenant_settings', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      access_keys_authentication_enabled: p.child('access_keys_authentication_enabled').out,
      capacity: p.child('capacity').out,
      family: p.child('family').out,
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      location: p.child('location').out,
      minimum_tls_version: p.child('minimum_tls_version').out,
      name: p.child('name').out,
      non_ssl_port_enabled: p.child('non_ssl_port_enabled').out,
      port: p.child('port').out,
      primary_access_key: p.child('primary_access_key').out,
      primary_connection_string: p.child('primary_connection_string').out,
      private_static_ip_address: p.child('private_static_ip_address').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      redis_version: p.child('redis_version').out,
      replicas_per_master: p.child('replicas_per_master').out,
      replicas_per_primary: p.child('replicas_per_primary').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      shard_count: p.child('shard_count').out,
      sku_name: p.child('sku_name').out,
      ssl_port: p.child('ssl_port').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      tenant_settings: p.child('tenant_settings').out,
      zones: p.child('zones').out,
    },
    redis_cache_access_policy(name, block): {
      local p = path(['azurerm_redis_cache_access_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_redis_cache_access_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                permissions: build.template(block.permissions),
                redis_cache_id: build.template(block.redis_cache_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      permissions: p.child('permissions').out,
      redis_cache_id: p.child('redis_cache_id').out,
    },
    redis_cache_access_policy_assignment(name, block): {
      local p = path(['azurerm_redis_cache_access_policy_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_redis_cache_access_policy_assignment: {
              [name]: std.prune({
                access_policy_name: build.template(block.access_policy_name),
                name: build.template(block.name),
                object_id: build.template(block.object_id),
                object_id_alias: build.template(block.object_id_alias),
                redis_cache_id: build.template(block.redis_cache_id),
              }),
            },
          },
        },
      },
      access_policy_name: p.child('access_policy_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      object_id: p.child('object_id').out,
      object_id_alias: p.child('object_id_alias').out,
      redis_cache_id: p.child('redis_cache_id').out,
    },
    redis_enterprise_cluster(name, block): {
      local p = path(['azurerm_redis_enterprise_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_redis_enterprise_cluster: {
              [name]: std.prune({
                location: build.template(block.location),
                minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      location: p.child('location').out,
      minimum_tls_version: p.child('minimum_tls_version').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    redis_enterprise_database(name, block): {
      local p = path(['azurerm_redis_enterprise_database', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_redis_enterprise_database: {
              [name]: std.prune({
                client_protocol: build.template(std.get(block, 'client_protocol', null, true)),
                cluster_id: build.template(block.cluster_id),
                clustering_policy: build.template(std.get(block, 'clustering_policy', null, true)),
                eviction_policy: build.template(std.get(block, 'eviction_policy', null, true)),
                linked_database_group_nickname: build.template(std.get(block, 'linked_database_group_nickname', null, true)),
                linked_database_id: build.template(std.get(block, 'linked_database_id', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                port: build.template(std.get(block, 'port', null, true)),
              }),
            },
          },
        },
      },
      client_protocol: p.child('client_protocol').out,
      cluster_id: p.child('cluster_id').out,
      clustering_policy: p.child('clustering_policy').out,
      eviction_policy: p.child('eviction_policy').out,
      id: p.child('id').out,
      linked_database_group_nickname: p.child('linked_database_group_nickname').out,
      linked_database_id: p.child('linked_database_id').out,
      name: p.child('name').out,
      port: p.child('port').out,
      primary_access_key: p.child('primary_access_key').out,
      secondary_access_key: p.child('secondary_access_key').out,
    },
    redis_firewall_rule(name, block): {
      local p = path(['azurerm_redis_firewall_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_redis_firewall_rule: {
              [name]: std.prune({
                end_ip: build.template(block.end_ip),
                name: build.template(block.name),
                redis_cache_name: build.template(block.redis_cache_name),
                resource_group_name: build.template(block.resource_group_name),
                start_ip: build.template(block.start_ip),
              }),
            },
          },
        },
      },
      end_ip: p.child('end_ip').out,
      id: p.child('id').out,
      name: p.child('name').out,
      redis_cache_name: p.child('redis_cache_name').out,
      resource_group_name: p.child('resource_group_name').out,
      start_ip: p.child('start_ip').out,
    },
    redis_linked_server(name, block): {
      local p = path(['azurerm_redis_linked_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_redis_linked_server: {
              [name]: std.prune({
                linked_redis_cache_id: build.template(block.linked_redis_cache_id),
                linked_redis_cache_location: build.template(block.linked_redis_cache_location),
                resource_group_name: build.template(block.resource_group_name),
                server_role: build.template(block.server_role),
                target_redis_cache_name: build.template(block.target_redis_cache_name),
              }),
            },
          },
        },
      },
      geo_replicated_primary_host_name: p.child('geo_replicated_primary_host_name').out,
      id: p.child('id').out,
      linked_redis_cache_id: p.child('linked_redis_cache_id').out,
      linked_redis_cache_location: p.child('linked_redis_cache_location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      server_role: p.child('server_role').out,
      target_redis_cache_name: p.child('target_redis_cache_name').out,
    },
    relay_hybrid_connection(name, block): {
      local p = path(['azurerm_relay_hybrid_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_relay_hybrid_connection: {
              [name]: std.prune({
                name: build.template(block.name),
                relay_namespace_name: build.template(block.relay_namespace_name),
                requires_client_authorization: build.template(std.get(block, 'requires_client_authorization', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                user_metadata: build.template(std.get(block, 'user_metadata', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      relay_namespace_name: p.child('relay_namespace_name').out,
      requires_client_authorization: p.child('requires_client_authorization').out,
      resource_group_name: p.child('resource_group_name').out,
      user_metadata: p.child('user_metadata').out,
    },
    relay_hybrid_connection_authorization_rule(name, block): {
      local p = path(['azurerm_relay_hybrid_connection_authorization_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_relay_hybrid_connection_authorization_rule: {
              [name]: std.prune({
                hybrid_connection_name: build.template(block.hybrid_connection_name),
                listen: build.template(std.get(block, 'listen', null, true)),
                manage: build.template(std.get(block, 'manage', null, true)),
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                resource_group_name: build.template(block.resource_group_name),
                send: build.template(std.get(block, 'send', null, true)),
              }),
            },
          },
        },
      },
      hybrid_connection_name: p.child('hybrid_connection_name').out,
      id: p.child('id').out,
      listen: p.child('listen').out,
      manage: p.child('manage').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_key: p.child('secondary_key').out,
      send: p.child('send').out,
    },
    relay_namespace(name, block): {
      local p = path(['azurerm_relay_namespace', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_relay_namespace: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      metric_id: p.child('metric_id').out,
      name: p.child('name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_key: p.child('secondary_key').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    relay_namespace_authorization_rule(name, block): {
      local p = path(['azurerm_relay_namespace_authorization_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_relay_namespace_authorization_rule: {
              [name]: std.prune({
                listen: build.template(std.get(block, 'listen', null, true)),
                manage: build.template(std.get(block, 'manage', null, true)),
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                resource_group_name: build.template(block.resource_group_name),
                send: build.template(std.get(block, 'send', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      listen: p.child('listen').out,
      manage: p.child('manage').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_key: p.child('secondary_key').out,
      send: p.child('send').out,
    },
    resource_deployment_script_azure_cli(name, block): {
      local p = path(['azurerm_resource_deployment_script_azure_cli', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_deployment_script_azure_cli: {
              [name]: std.prune({
                cleanup_preference: build.template(std.get(block, 'cleanup_preference', null, true)),
                command_line: build.template(std.get(block, 'command_line', null, true)),
                force_update_tag: build.template(std.get(block, 'force_update_tag', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                primary_script_uri: build.template(std.get(block, 'primary_script_uri', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                retention_interval: build.template(block.retention_interval),
                script_content: build.template(std.get(block, 'script_content', null, true)),
                supporting_script_uris: build.template(std.get(block, 'supporting_script_uris', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                timeout: build.template(std.get(block, 'timeout', null, true)),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      cleanup_preference: p.child('cleanup_preference').out,
      command_line: p.child('command_line').out,
      force_update_tag: p.child('force_update_tag').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outputs: p.child('outputs').out,
      primary_script_uri: p.child('primary_script_uri').out,
      resource_group_name: p.child('resource_group_name').out,
      retention_interval: p.child('retention_interval').out,
      script_content: p.child('script_content').out,
      supporting_script_uris: p.child('supporting_script_uris').out,
      tags: p.child('tags').out,
      timeout: p.child('timeout').out,
      version: p.child('version').out,
    },
    resource_deployment_script_azure_power_shell(name, block): {
      local p = path(['azurerm_resource_deployment_script_azure_power_shell', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_deployment_script_azure_power_shell: {
              [name]: std.prune({
                cleanup_preference: build.template(std.get(block, 'cleanup_preference', null, true)),
                command_line: build.template(std.get(block, 'command_line', null, true)),
                force_update_tag: build.template(std.get(block, 'force_update_tag', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                primary_script_uri: build.template(std.get(block, 'primary_script_uri', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                retention_interval: build.template(block.retention_interval),
                script_content: build.template(std.get(block, 'script_content', null, true)),
                supporting_script_uris: build.template(std.get(block, 'supporting_script_uris', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                timeout: build.template(std.get(block, 'timeout', null, true)),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      cleanup_preference: p.child('cleanup_preference').out,
      command_line: p.child('command_line').out,
      force_update_tag: p.child('force_update_tag').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outputs: p.child('outputs').out,
      primary_script_uri: p.child('primary_script_uri').out,
      resource_group_name: p.child('resource_group_name').out,
      retention_interval: p.child('retention_interval').out,
      script_content: p.child('script_content').out,
      supporting_script_uris: p.child('supporting_script_uris').out,
      tags: p.child('tags').out,
      timeout: p.child('timeout').out,
      version: p.child('version').out,
    },
    resource_group(name, block): {
      local p = path(['azurerm_resource_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_group: {
              [name]: std.prune({
                location: build.template(block.location),
                managed_by: build.template(std.get(block, 'managed_by', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      managed_by: p.child('managed_by').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    resource_group_cost_management_export(name, block): {
      local p = path(['azurerm_resource_group_cost_management_export', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_group_cost_management_export: {
              [name]: std.prune({
                active: build.template(std.get(block, 'active', null, true)),
                name: build.template(block.name),
                recurrence_period_end_date: build.template(block.recurrence_period_end_date),
                recurrence_period_start_date: build.template(block.recurrence_period_start_date),
                recurrence_type: build.template(block.recurrence_type),
                resource_group_id: build.template(block.resource_group_id),
              }),
            },
          },
        },
      },
      active: p.child('active').out,
      id: p.child('id').out,
      name: p.child('name').out,
      recurrence_period_end_date: p.child('recurrence_period_end_date').out,
      recurrence_period_start_date: p.child('recurrence_period_start_date').out,
      recurrence_type: p.child('recurrence_type').out,
      resource_group_id: p.child('resource_group_id').out,
    },
    resource_group_cost_management_view(name, block): {
      local p = path(['azurerm_resource_group_cost_management_view', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_group_cost_management_view: {
              [name]: std.prune({
                accumulated: build.template(block.accumulated),
                chart_type: build.template(block.chart_type),
                display_name: build.template(block.display_name),
                name: build.template(block.name),
                report_type: build.template(block.report_type),
                resource_group_id: build.template(block.resource_group_id),
                timeframe: build.template(block.timeframe),
              }),
            },
          },
        },
      },
      accumulated: p.child('accumulated').out,
      chart_type: p.child('chart_type').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      report_type: p.child('report_type').out,
      resource_group_id: p.child('resource_group_id').out,
      timeframe: p.child('timeframe').out,
    },
    resource_group_policy_assignment(name, block): {
      local p = path(['azurerm_resource_group_policy_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_group_policy_assignment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enforce: build.template(std.get(block, 'enforce', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                not_scopes: build.template(std.get(block, 'not_scopes', null, true)),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                policy_definition_id: build.template(block.policy_definition_id),
                resource_group_id: build.template(block.resource_group_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      enforce: p.child('enforce').out,
      id: p.child('id').out,
      location: p.child('location').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      not_scopes: p.child('not_scopes').out,
      parameters: p.child('parameters').out,
      policy_definition_id: p.child('policy_definition_id').out,
      resource_group_id: p.child('resource_group_id').out,
    },
    resource_group_policy_exemption(name, block): {
      local p = path(['azurerm_resource_group_policy_exemption', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_group_policy_exemption: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                exemption_category: build.template(block.exemption_category),
                expires_on: build.template(std.get(block, 'expires_on', null, true)),
                name: build.template(block.name),
                policy_assignment_id: build.template(block.policy_assignment_id),
                policy_definition_reference_ids: build.template(std.get(block, 'policy_definition_reference_ids', null, true)),
                resource_group_id: build.template(block.resource_group_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      exemption_category: p.child('exemption_category').out,
      expires_on: p.child('expires_on').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      policy_assignment_id: p.child('policy_assignment_id').out,
      policy_definition_reference_ids: p.child('policy_definition_reference_ids').out,
      resource_group_id: p.child('resource_group_id').out,
    },
    resource_group_policy_remediation(name, block): {
      local p = path(['azurerm_resource_group_policy_remediation', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_group_policy_remediation: {
              [name]: std.prune({
                failure_percentage: build.template(std.get(block, 'failure_percentage', null, true)),
                location_filters: build.template(std.get(block, 'location_filters', null, true)),
                name: build.template(block.name),
                parallel_deployments: build.template(std.get(block, 'parallel_deployments', null, true)),
                policy_assignment_id: build.template(block.policy_assignment_id),
                policy_definition_reference_id: build.template(std.get(block, 'policy_definition_reference_id', null, true)),
                resource_count: build.template(std.get(block, 'resource_count', null, true)),
                resource_discovery_mode: build.template(std.get(block, 'resource_discovery_mode', null, true)),
                resource_group_id: build.template(block.resource_group_id),
              }),
            },
          },
        },
      },
      failure_percentage: p.child('failure_percentage').out,
      id: p.child('id').out,
      location_filters: p.child('location_filters').out,
      name: p.child('name').out,
      parallel_deployments: p.child('parallel_deployments').out,
      policy_assignment_id: p.child('policy_assignment_id').out,
      policy_definition_reference_id: p.child('policy_definition_reference_id').out,
      resource_count: p.child('resource_count').out,
      resource_discovery_mode: p.child('resource_discovery_mode').out,
      resource_group_id: p.child('resource_group_id').out,
    },
    resource_group_template_deployment(name, block): {
      local p = path(['azurerm_resource_group_template_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_group_template_deployment: {
              [name]: std.prune({
                debug_level: build.template(std.get(block, 'debug_level', null, true)),
                deployment_mode: build.template(block.deployment_mode),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                template_spec_version_id: build.template(std.get(block, 'template_spec_version_id', null, true)),
              }),
            },
          },
        },
      },
      debug_level: p.child('debug_level').out,
      deployment_mode: p.child('deployment_mode').out,
      id: p.child('id').out,
      name: p.child('name').out,
      output_content: p.child('output_content').out,
      parameters_content: p.child('parameters_content').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      template_content: p.child('template_content').out,
      template_spec_version_id: p.child('template_spec_version_id').out,
    },
    resource_management_private_link(name, block): {
      local p = path(['azurerm_resource_management_private_link', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_management_private_link: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    resource_management_private_link_association(name, block): {
      local p = path(['azurerm_resource_management_private_link_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_management_private_link_association: {
              [name]: std.prune({
                management_group_id: build.template(block.management_group_id),
                name: build.template(std.get(block, 'name', null, true)),
                public_network_access_enabled: build.template(block.public_network_access_enabled),
                resource_management_private_link_id: build.template(block.resource_management_private_link_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      management_group_id: p.child('management_group_id').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_management_private_link_id: p.child('resource_management_private_link_id').out,
      tenant_id: p.child('tenant_id').out,
    },
    resource_policy_assignment(name, block): {
      local p = path(['azurerm_resource_policy_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_policy_assignment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enforce: build.template(std.get(block, 'enforce', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                not_scopes: build.template(std.get(block, 'not_scopes', null, true)),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                policy_definition_id: build.template(block.policy_definition_id),
                resource_id: build.template(block.resource_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      enforce: p.child('enforce').out,
      id: p.child('id').out,
      location: p.child('location').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      not_scopes: p.child('not_scopes').out,
      parameters: p.child('parameters').out,
      policy_definition_id: p.child('policy_definition_id').out,
      resource_id: p.child('resource_id').out,
    },
    resource_policy_exemption(name, block): {
      local p = path(['azurerm_resource_policy_exemption', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_policy_exemption: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                exemption_category: build.template(block.exemption_category),
                expires_on: build.template(std.get(block, 'expires_on', null, true)),
                name: build.template(block.name),
                policy_assignment_id: build.template(block.policy_assignment_id),
                policy_definition_reference_ids: build.template(std.get(block, 'policy_definition_reference_ids', null, true)),
                resource_id: build.template(block.resource_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      exemption_category: p.child('exemption_category').out,
      expires_on: p.child('expires_on').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      policy_assignment_id: p.child('policy_assignment_id').out,
      policy_definition_reference_ids: p.child('policy_definition_reference_ids').out,
      resource_id: p.child('resource_id').out,
    },
    resource_policy_remediation(name, block): {
      local p = path(['azurerm_resource_policy_remediation', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_policy_remediation: {
              [name]: std.prune({
                failure_percentage: build.template(std.get(block, 'failure_percentage', null, true)),
                location_filters: build.template(std.get(block, 'location_filters', null, true)),
                name: build.template(block.name),
                parallel_deployments: build.template(std.get(block, 'parallel_deployments', null, true)),
                policy_assignment_id: build.template(block.policy_assignment_id),
                policy_definition_reference_id: build.template(std.get(block, 'policy_definition_reference_id', null, true)),
                resource_count: build.template(std.get(block, 'resource_count', null, true)),
                resource_discovery_mode: build.template(std.get(block, 'resource_discovery_mode', null, true)),
                resource_id: build.template(block.resource_id),
              }),
            },
          },
        },
      },
      failure_percentage: p.child('failure_percentage').out,
      id: p.child('id').out,
      location_filters: p.child('location_filters').out,
      name: p.child('name').out,
      parallel_deployments: p.child('parallel_deployments').out,
      policy_assignment_id: p.child('policy_assignment_id').out,
      policy_definition_reference_id: p.child('policy_definition_reference_id').out,
      resource_count: p.child('resource_count').out,
      resource_discovery_mode: p.child('resource_discovery_mode').out,
      resource_id: p.child('resource_id').out,
    },
    resource_provider_registration(name, block): {
      local p = path(['azurerm_resource_provider_registration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_resource_provider_registration: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    restore_point_collection(name, block): {
      local p = path(['azurerm_restore_point_collection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_restore_point_collection: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                source_virtual_machine_id: build.template(block.source_virtual_machine_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      source_virtual_machine_id: p.child('source_virtual_machine_id').out,
      tags: p.child('tags').out,
    },
    role_assignment(name, block): {
      local p = path(['azurerm_role_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_role_assignment: {
              [name]: std.prune({
                condition: build.template(std.get(block, 'condition', null, true)),
                condition_version: build.template(std.get(block, 'condition_version', null, true)),
                delegated_managed_identity_resource_id: build.template(std.get(block, 'delegated_managed_identity_resource_id', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                principal_id: build.template(block.principal_id),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      condition: p.child('condition').out,
      condition_version: p.child('condition_version').out,
      delegated_managed_identity_resource_id: p.child('delegated_managed_identity_resource_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      principal_id: p.child('principal_id').out,
      principal_type: p.child('principal_type').out,
      role_definition_id: p.child('role_definition_id').out,
      role_definition_name: p.child('role_definition_name').out,
      scope: p.child('scope').out,
      skip_service_principal_aad_check: p.child('skip_service_principal_aad_check').out,
    },
    role_definition(name, block): {
      local p = path(['azurerm_role_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_role_definition: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      assignable_scopes: p.child('assignable_scopes').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      role_definition_id: p.child('role_definition_id').out,
      role_definition_resource_id: p.child('role_definition_resource_id').out,
      scope: p.child('scope').out,
    },
    role_management_policy(name, block): {
      local p = path(['azurerm_role_management_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_role_management_policy: {
              [name]: std.prune({
                role_definition_id: build.template(block.role_definition_id),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      role_definition_id: p.child('role_definition_id').out,
      scope: p.child('scope').out,
    },
    route(name, block): {
      local p = path(['azurerm_route', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_route: {
              [name]: std.prune({
                address_prefix: build.template(block.address_prefix),
                name: build.template(block.name),
                next_hop_in_ip_address: build.template(std.get(block, 'next_hop_in_ip_address', null, true)),
                next_hop_type: build.template(block.next_hop_type),
                resource_group_name: build.template(block.resource_group_name),
                route_table_name: build.template(block.route_table_name),
              }),
            },
          },
        },
      },
      address_prefix: p.child('address_prefix').out,
      id: p.child('id').out,
      name: p.child('name').out,
      next_hop_in_ip_address: p.child('next_hop_in_ip_address').out,
      next_hop_type: p.child('next_hop_type').out,
      resource_group_name: p.child('resource_group_name').out,
      route_table_name: p.child('route_table_name').out,
    },
    route_filter(name, block): {
      local p = path(['azurerm_route_filter', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_route_filter: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      rule: p.child('rule').out,
      tags: p.child('tags').out,
    },
    route_map(name, block): {
      local p = path(['azurerm_route_map', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_route_map: {
              [name]: std.prune({
                name: build.template(block.name),
                virtual_hub_id: build.template(block.virtual_hub_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
    },
    route_server(name, block): {
      local p = path(['azurerm_route_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_route_server: {
              [name]: std.prune({
                branch_to_branch_traffic_enabled: build.template(std.get(block, 'branch_to_branch_traffic_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_ip_address_id: build.template(block.public_ip_address_id),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      branch_to_branch_traffic_enabled: p.child('branch_to_branch_traffic_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_ip_address_id: p.child('public_ip_address_id').out,
      resource_group_name: p.child('resource_group_name').out,
      routing_state: p.child('routing_state').out,
      sku: p.child('sku').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      virtual_router_asn: p.child('virtual_router_asn').out,
      virtual_router_ips: p.child('virtual_router_ips').out,
    },
    route_server_bgp_connection(name, block): {
      local p = path(['azurerm_route_server_bgp_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_route_server_bgp_connection: {
              [name]: std.prune({
                name: build.template(block.name),
                peer_asn: build.template(block.peer_asn),
                peer_ip: build.template(block.peer_ip),
                route_server_id: build.template(block.route_server_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      peer_asn: p.child('peer_asn').out,
      peer_ip: p.child('peer_ip').out,
      route_server_id: p.child('route_server_id').out,
    },
    route_table(name, block): {
      local p = path(['azurerm_route_table', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_route_table: {
              [name]: std.prune({
                bgp_route_propagation_enabled: build.template(std.get(block, 'bgp_route_propagation_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      bgp_route_propagation_enabled: p.child('bgp_route_propagation_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      route: p.child('route').out,
      subnets: p.child('subnets').out,
      tags: p.child('tags').out,
    },
    search_service(name, block): {
      local p = path(['azurerm_search_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_search_service: {
              [name]: std.prune({
                allowed_ips: build.template(std.get(block, 'allowed_ips', null, true)),
                authentication_failure_mode: build.template(std.get(block, 'authentication_failure_mode', null, true)),
                customer_managed_key_enforcement_enabled: build.template(std.get(block, 'customer_managed_key_enforcement_enabled', null, true)),
                hosting_mode: build.template(std.get(block, 'hosting_mode', null, true)),
                local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                partition_count: build.template(std.get(block, 'partition_count', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                replica_count: build.template(std.get(block, 'replica_count', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                semantic_search_sku: build.template(std.get(block, 'semantic_search_sku', null, true)),
                sku: build.template(block.sku),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allowed_ips: p.child('allowed_ips').out,
      authentication_failure_mode: p.child('authentication_failure_mode').out,
      customer_managed_key_enforcement_enabled: p.child('customer_managed_key_enforcement_enabled').out,
      hosting_mode: p.child('hosting_mode').out,
      id: p.child('id').out,
      local_authentication_enabled: p.child('local_authentication_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      partition_count: p.child('partition_count').out,
      primary_key: p.child('primary_key').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      query_keys: p.child('query_keys').out,
      replica_count: p.child('replica_count').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_key: p.child('secondary_key').out,
      semantic_search_sku: p.child('semantic_search_sku').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    search_shared_private_link_service(name, block): {
      local p = path(['azurerm_search_shared_private_link_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_search_shared_private_link_service: {
              [name]: std.prune({
                name: build.template(block.name),
                request_message: build.template(std.get(block, 'request_message', null, true)),
                search_service_id: build.template(block.search_service_id),
                subresource_name: build.template(block.subresource_name),
                target_resource_id: build.template(block.target_resource_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      request_message: p.child('request_message').out,
      search_service_id: p.child('search_service_id').out,
      status: p.child('status').out,
      subresource_name: p.child('subresource_name').out,
      target_resource_id: p.child('target_resource_id').out,
    },
    security_center_assessment(name, block): {
      local p = path(['azurerm_security_center_assessment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_security_center_assessment: {
              [name]: std.prune({
                additional_data: build.template(std.get(block, 'additional_data', null, true)),
                assessment_policy_id: build.template(block.assessment_policy_id),
                target_resource_id: build.template(block.target_resource_id),
              }),
            },
          },
        },
      },
      additional_data: p.child('additional_data').out,
      assessment_policy_id: p.child('assessment_policy_id').out,
      id: p.child('id').out,
      target_resource_id: p.child('target_resource_id').out,
    },
    security_center_assessment_policy(name, block): {
      local p = path(['azurerm_security_center_assessment_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_security_center_assessment_policy: {
              [name]: std.prune({
                description: build.template(block.description),
                display_name: build.template(block.display_name),
                implementation_effort: build.template(std.get(block, 'implementation_effort', null, true)),
                remediation_description: build.template(std.get(block, 'remediation_description', null, true)),
                severity: build.template(std.get(block, 'severity', null, true)),
                threats: build.template(std.get(block, 'threats', null, true)),
                user_impact: build.template(std.get(block, 'user_impact', null, true)),
              }),
            },
          },
        },
      },
      categories: p.child('categories').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      implementation_effort: p.child('implementation_effort').out,
      name: p.child('name').out,
      remediation_description: p.child('remediation_description').out,
      severity: p.child('severity').out,
      threats: p.child('threats').out,
      user_impact: p.child('user_impact').out,
    },
    security_center_auto_provisioning(name, block): {
      local p = path(['azurerm_security_center_auto_provisioning', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_security_center_auto_provisioning: {
              [name]: std.prune({
                auto_provision: build.template(block.auto_provision),
              }),
            },
          },
        },
      },
      auto_provision: p.child('auto_provision').out,
      id: p.child('id').out,
    },
    security_center_automation(name, block): {
      local p = path(['azurerm_security_center_automation', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_security_center_automation: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                scopes: build.template(block.scopes),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scopes: p.child('scopes').out,
      tags: p.child('tags').out,
    },
    security_center_contact(name, block): {
      local p = path(['azurerm_security_center_contact', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_security_center_contact: {
              [name]: std.prune({
                alert_notifications: build.template(block.alert_notifications),
                alerts_to_admins: build.template(block.alerts_to_admins),
                email: build.template(block.email),
                name: build.template(block.name),
                phone: build.template(std.get(block, 'phone', null, true)),
              }),
            },
          },
        },
      },
      alert_notifications: p.child('alert_notifications').out,
      alerts_to_admins: p.child('alerts_to_admins').out,
      email: p.child('email').out,
      id: p.child('id').out,
      name: p.child('name').out,
      phone: p.child('phone').out,
    },
    security_center_server_vulnerability_assessment_virtual_machine(name, block): {
      local p = path(['azurerm_security_center_server_vulnerability_assessment_virtual_machine', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_security_center_server_vulnerability_assessment_virtual_machine: {
              [name]: std.prune({
                virtual_machine_id: build.template(block.virtual_machine_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
    },
    security_center_server_vulnerability_assessments_setting(name, block): {
      local p = path(['azurerm_security_center_server_vulnerability_assessments_setting', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_security_center_server_vulnerability_assessments_setting: {
              [name]: std.prune({
                vulnerability_assessment_provider: build.template(block.vulnerability_assessment_provider),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      vulnerability_assessment_provider: p.child('vulnerability_assessment_provider').out,
    },
    security_center_setting(name, block): {
      local p = path(['azurerm_security_center_setting', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_security_center_setting: {
              [name]: std.prune({
                enabled: build.template(block.enabled),
                setting_name: build.template(block.setting_name),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      setting_name: p.child('setting_name').out,
    },
    security_center_storage_defender(name, block): {
      local p = path(['azurerm_security_center_storage_defender', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_security_center_storage_defender: {
              [name]: std.prune({
                malware_scanning_on_upload_cap_gb_per_month: build.template(std.get(block, 'malware_scanning_on_upload_cap_gb_per_month', null, true)),
                malware_scanning_on_upload_enabled: build.template(std.get(block, 'malware_scanning_on_upload_enabled', null, true)),
                override_subscription_settings_enabled: build.template(std.get(block, 'override_subscription_settings_enabled', null, true)),
                scan_results_event_grid_topic_id: build.template(std.get(block, 'scan_results_event_grid_topic_id', null, true)),
                sensitive_data_discovery_enabled: build.template(std.get(block, 'sensitive_data_discovery_enabled', null, true)),
                storage_account_id: build.template(block.storage_account_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      malware_scanning_on_upload_cap_gb_per_month: p.child('malware_scanning_on_upload_cap_gb_per_month').out,
      malware_scanning_on_upload_enabled: p.child('malware_scanning_on_upload_enabled').out,
      override_subscription_settings_enabled: p.child('override_subscription_settings_enabled').out,
      scan_results_event_grid_topic_id: p.child('scan_results_event_grid_topic_id').out,
      sensitive_data_discovery_enabled: p.child('sensitive_data_discovery_enabled').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    security_center_subscription_pricing(name, block): {
      local p = path(['azurerm_security_center_subscription_pricing', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_security_center_subscription_pricing: {
              [name]: std.prune({
                resource_type: build.template(std.get(block, 'resource_type', null, true)),
                subplan: build.template(std.get(block, 'subplan', null, true)),
                tier: build.template(block.tier),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      resource_type: p.child('resource_type').out,
      subplan: p.child('subplan').out,
      tier: p.child('tier').out,
    },
    security_center_workspace(name, block): {
      local p = path(['azurerm_security_center_workspace', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_security_center_workspace: {
              [name]: std.prune({
                scope: build.template(block.scope),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      scope: p.child('scope').out,
      workspace_id: p.child('workspace_id').out,
    },
    sentinel_alert_rule_anomaly_built_in(name, block): {
      local p = path(['azurerm_sentinel_alert_rule_anomaly_built_in', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_alert_rule_anomaly_built_in: {
              [name]: std.prune({
                enabled: build.template(block.enabled),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                mode: build.template(block.mode),
              }),
            },
          },
        },
      },
      anomaly_settings_version: p.child('anomaly_settings_version').out,
      anomaly_version: p.child('anomaly_version').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      enabled: p.child('enabled').out,
      frequency: p.child('frequency').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      mode: p.child('mode').out,
      multi_select_observation: p.child('multi_select_observation').out,
      name: p.child('name').out,
      prioritized_exclude_observation: p.child('prioritized_exclude_observation').out,
      required_data_connector: p.child('required_data_connector').out,
      settings_definition_id: p.child('settings_definition_id').out,
      single_select_observation: p.child('single_select_observation').out,
      tactics: p.child('tactics').out,
      techniques: p.child('techniques').out,
      threshold_observation: p.child('threshold_observation').out,
    },
    sentinel_alert_rule_anomaly_duplicate(name, block): {
      local p = path(['azurerm_sentinel_alert_rule_anomaly_duplicate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_alert_rule_anomaly_duplicate: {
              [name]: std.prune({
                built_in_rule_id: build.template(block.built_in_rule_id),
                display_name: build.template(block.display_name),
                enabled: build.template(block.enabled),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                mode: build.template(block.mode),
              }),
            },
          },
        },
      },
      anomaly_settings_version: p.child('anomaly_settings_version').out,
      anomaly_version: p.child('anomaly_version').out,
      built_in_rule_id: p.child('built_in_rule_id').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      enabled: p.child('enabled').out,
      frequency: p.child('frequency').out,
      id: p.child('id').out,
      is_default_settings: p.child('is_default_settings').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      mode: p.child('mode').out,
      name: p.child('name').out,
      required_data_connector: p.child('required_data_connector').out,
      settings_definition_id: p.child('settings_definition_id').out,
      tactics: p.child('tactics').out,
      techniques: p.child('techniques').out,
    },
    sentinel_alert_rule_fusion(name, block): {
      local p = path(['azurerm_sentinel_alert_rule_fusion', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_alert_rule_fusion: {
              [name]: std.prune({
                alert_rule_template_guid: build.template(block.alert_rule_template_guid),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      alert_rule_template_guid: p.child('alert_rule_template_guid').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
    },
    sentinel_alert_rule_machine_learning_behavior_analytics(name, block): {
      local p = path(['azurerm_sentinel_alert_rule_machine_learning_behavior_analytics', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_alert_rule_machine_learning_behavior_analytics: {
              [name]: std.prune({
                alert_rule_template_guid: build.template(block.alert_rule_template_guid),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      alert_rule_template_guid: p.child('alert_rule_template_guid').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
    },
    sentinel_alert_rule_ms_security_incident(name, block): {
      local p = path(['azurerm_sentinel_alert_rule_ms_security_incident', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_alert_rule_ms_security_incident: {
              [name]: std.prune({
                alert_rule_template_guid: build.template(std.get(block, 'alert_rule_template_guid', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                display_name_exclude_filter: build.template(std.get(block, 'display_name_exclude_filter', null, true)),
                display_name_filter: build.template(std.get(block, 'display_name_filter', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
                product_filter: build.template(block.product_filter),
                severity_filter: build.template(block.severity_filter),
              }),
            },
          },
        },
      },
      alert_rule_template_guid: p.child('alert_rule_template_guid').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      display_name_exclude_filter: p.child('display_name_exclude_filter').out,
      display_name_filter: p.child('display_name_filter').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      product_filter: p.child('product_filter').out,
      severity_filter: p.child('severity_filter').out,
    },
    sentinel_alert_rule_nrt(name, block): {
      local p = path(['azurerm_sentinel_alert_rule_nrt', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_alert_rule_nrt: {
              [name]: std.prune({
                alert_rule_template_guid: build.template(std.get(block, 'alert_rule_template_guid', null, true)),
                alert_rule_template_version: build.template(std.get(block, 'alert_rule_template_version', null, true)),
                custom_details: build.template(std.get(block, 'custom_details', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
                query: build.template(block.query),
                severity: build.template(block.severity),
                suppression_duration: build.template(std.get(block, 'suppression_duration', null, true)),
                suppression_enabled: build.template(std.get(block, 'suppression_enabled', null, true)),
                tactics: build.template(std.get(block, 'tactics', null, true)),
                techniques: build.template(std.get(block, 'techniques', null, true)),
              }),
            },
          },
        },
      },
      alert_rule_template_guid: p.child('alert_rule_template_guid').out,
      alert_rule_template_version: p.child('alert_rule_template_version').out,
      custom_details: p.child('custom_details').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      query: p.child('query').out,
      severity: p.child('severity').out,
      suppression_duration: p.child('suppression_duration').out,
      suppression_enabled: p.child('suppression_enabled').out,
      tactics: p.child('tactics').out,
      techniques: p.child('techniques').out,
    },
    sentinel_alert_rule_scheduled(name, block): {
      local p = path(['azurerm_sentinel_alert_rule_scheduled', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_alert_rule_scheduled: {
              [name]: std.prune({
                alert_rule_template_guid: build.template(std.get(block, 'alert_rule_template_guid', null, true)),
                alert_rule_template_version: build.template(std.get(block, 'alert_rule_template_version', null, true)),
                custom_details: build.template(std.get(block, 'custom_details', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
                query: build.template(block.query),
                query_frequency: build.template(std.get(block, 'query_frequency', null, true)),
                query_period: build.template(std.get(block, 'query_period', null, true)),
                severity: build.template(block.severity),
                suppression_duration: build.template(std.get(block, 'suppression_duration', null, true)),
                suppression_enabled: build.template(std.get(block, 'suppression_enabled', null, true)),
                tactics: build.template(std.get(block, 'tactics', null, true)),
                techniques: build.template(std.get(block, 'techniques', null, true)),
                trigger_operator: build.template(std.get(block, 'trigger_operator', null, true)),
                trigger_threshold: build.template(std.get(block, 'trigger_threshold', null, true)),
              }),
            },
          },
        },
      },
      alert_rule_template_guid: p.child('alert_rule_template_guid').out,
      alert_rule_template_version: p.child('alert_rule_template_version').out,
      custom_details: p.child('custom_details').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      query: p.child('query').out,
      query_frequency: p.child('query_frequency').out,
      query_period: p.child('query_period').out,
      severity: p.child('severity').out,
      suppression_duration: p.child('suppression_duration').out,
      suppression_enabled: p.child('suppression_enabled').out,
      tactics: p.child('tactics').out,
      techniques: p.child('techniques').out,
      trigger_operator: p.child('trigger_operator').out,
      trigger_threshold: p.child('trigger_threshold').out,
    },
    sentinel_alert_rule_threat_intelligence(name, block): {
      local p = path(['azurerm_sentinel_alert_rule_threat_intelligence', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_alert_rule_threat_intelligence: {
              [name]: std.prune({
                alert_rule_template_guid: build.template(block.alert_rule_template_guid),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      alert_rule_template_guid: p.child('alert_rule_template_guid').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
    },
    sentinel_automation_rule(name, block): {
      local p = path(['azurerm_sentinel_automation_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_automation_rule: {
              [name]: std.prune({
                condition_json: build.template(std.get(block, 'condition_json', null, true)),
                display_name: build.template(block.display_name),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                expiration: build.template(std.get(block, 'expiration', null, true)),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
                order: build.template(block.order),
                triggers_on: build.template(std.get(block, 'triggers_on', null, true)),
                triggers_when: build.template(std.get(block, 'triggers_when', null, true)),
              }),
            },
          },
        },
      },
      condition_json: p.child('condition_json').out,
      display_name: p.child('display_name').out,
      enabled: p.child('enabled').out,
      expiration: p.child('expiration').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      order: p.child('order').out,
      triggers_on: p.child('triggers_on').out,
      triggers_when: p.child('triggers_when').out,
    },
    sentinel_data_connector_aws_cloud_trail(name, block): {
      local p = path(['azurerm_sentinel_data_connector_aws_cloud_trail', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_aws_cloud_trail: {
              [name]: std.prune({
                aws_role_arn: build.template(block.aws_role_arn),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      aws_role_arn: p.child('aws_role_arn').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
    },
    sentinel_data_connector_aws_s3(name, block): {
      local p = path(['azurerm_sentinel_data_connector_aws_s3', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_aws_s3: {
              [name]: std.prune({
                aws_role_arn: build.template(block.aws_role_arn),
                destination_table: build.template(block.destination_table),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
                sqs_urls: build.template(block.sqs_urls),
              }),
            },
          },
        },
      },
      aws_role_arn: p.child('aws_role_arn').out,
      destination_table: p.child('destination_table').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      sqs_urls: p.child('sqs_urls').out,
    },
    sentinel_data_connector_azure_active_directory(name, block): {
      local p = path(['azurerm_sentinel_data_connector_azure_active_directory', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_azure_active_directory: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      tenant_id: p.child('tenant_id').out,
    },
    sentinel_data_connector_azure_advanced_threat_protection(name, block): {
      local p = path(['azurerm_sentinel_data_connector_azure_advanced_threat_protection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_azure_advanced_threat_protection: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      tenant_id: p.child('tenant_id').out,
    },
    sentinel_data_connector_azure_security_center(name, block): {
      local p = path(['azurerm_sentinel_data_connector_azure_security_center', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_azure_security_center: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      subscription_id: p.child('subscription_id').out,
    },
    sentinel_data_connector_dynamics_365(name, block): {
      local p = path(['azurerm_sentinel_data_connector_dynamics_365', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_dynamics_365: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      tenant_id: p.child('tenant_id').out,
    },
    sentinel_data_connector_iot(name, block): {
      local p = path(['azurerm_sentinel_data_connector_iot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_iot: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      subscription_id: p.child('subscription_id').out,
    },
    sentinel_data_connector_microsoft_cloud_app_security(name, block): {
      local p = path(['azurerm_sentinel_data_connector_microsoft_cloud_app_security', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_microsoft_cloud_app_security: {
              [name]: std.prune({
                alerts_enabled: build.template(std.get(block, 'alerts_enabled', null, true)),
                discovery_logs_enabled: build.template(std.get(block, 'discovery_logs_enabled', null, true)),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      alerts_enabled: p.child('alerts_enabled').out,
      discovery_logs_enabled: p.child('discovery_logs_enabled').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      tenant_id: p.child('tenant_id').out,
    },
    sentinel_data_connector_microsoft_defender_advanced_threat_protection(name, block): {
      local p = path(['azurerm_sentinel_data_connector_microsoft_defender_advanced_threat_protection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_microsoft_defender_advanced_threat_protection: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      tenant_id: p.child('tenant_id').out,
    },
    sentinel_data_connector_microsoft_threat_intelligence(name, block): {
      local p = path(['azurerm_sentinel_data_connector_microsoft_threat_intelligence', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_microsoft_threat_intelligence: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                microsoft_emerging_threat_feed_lookback_date: build.template(block.microsoft_emerging_threat_feed_lookback_date),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      microsoft_emerging_threat_feed_lookback_date: p.child('microsoft_emerging_threat_feed_lookback_date').out,
      name: p.child('name').out,
      tenant_id: p.child('tenant_id').out,
    },
    sentinel_data_connector_microsoft_threat_protection(name, block): {
      local p = path(['azurerm_sentinel_data_connector_microsoft_threat_protection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_microsoft_threat_protection: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      tenant_id: p.child('tenant_id').out,
    },
    sentinel_data_connector_office_365(name, block): {
      local p = path(['azurerm_sentinel_data_connector_office_365', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_office_365: {
              [name]: std.prune({
                exchange_enabled: build.template(std.get(block, 'exchange_enabled', null, true)),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
                sharepoint_enabled: build.template(std.get(block, 'sharepoint_enabled', null, true)),
                teams_enabled: build.template(std.get(block, 'teams_enabled', null, true)),
              }),
            },
          },
        },
      },
      exchange_enabled: p.child('exchange_enabled').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      sharepoint_enabled: p.child('sharepoint_enabled').out,
      teams_enabled: p.child('teams_enabled').out,
      tenant_id: p.child('tenant_id').out,
    },
    sentinel_data_connector_office_365_project(name, block): {
      local p = path(['azurerm_sentinel_data_connector_office_365_project', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_office_365_project: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      tenant_id: p.child('tenant_id').out,
    },
    sentinel_data_connector_office_atp(name, block): {
      local p = path(['azurerm_sentinel_data_connector_office_atp', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_office_atp: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      tenant_id: p.child('tenant_id').out,
    },
    sentinel_data_connector_office_irm(name, block): {
      local p = path(['azurerm_sentinel_data_connector_office_irm', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_office_irm: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      tenant_id: p.child('tenant_id').out,
    },
    sentinel_data_connector_office_power_bi(name, block): {
      local p = path(['azurerm_sentinel_data_connector_office_power_bi', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_office_power_bi: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      tenant_id: p.child('tenant_id').out,
    },
    sentinel_data_connector_threat_intelligence(name, block): {
      local p = path(['azurerm_sentinel_data_connector_threat_intelligence', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_threat_intelligence: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                lookback_date: build.template(std.get(block, 'lookback_date', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      lookback_date: p.child('lookback_date').out,
      name: p.child('name').out,
      tenant_id: p.child('tenant_id').out,
    },
    sentinel_data_connector_threat_intelligence_taxii(name, block): {
      local p = path(['azurerm_sentinel_data_connector_threat_intelligence_taxii', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_data_connector_threat_intelligence_taxii: {
              [name]: std.prune({
                api_root_url: build.template(block.api_root_url),
                collection_id: build.template(block.collection_id),
                display_name: build.template(block.display_name),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                lookback_date: build.template(std.get(block, 'lookback_date', null, true)),
                name: build.template(block.name),
                password: build.template(std.get(block, 'password', null, true)),
                polling_frequency: build.template(std.get(block, 'polling_frequency', null, true)),
                user_name: build.template(std.get(block, 'user_name', null, true)),
              }),
            },
          },
        },
      },
      api_root_url: p.child('api_root_url').out,
      collection_id: p.child('collection_id').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      lookback_date: p.child('lookback_date').out,
      name: p.child('name').out,
      password: p.child('password').out,
      polling_frequency: p.child('polling_frequency').out,
      tenant_id: p.child('tenant_id').out,
      user_name: p.child('user_name').out,
    },
    sentinel_log_analytics_workspace_onboarding(name, block): {
      local p = path(['azurerm_sentinel_log_analytics_workspace_onboarding', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_log_analytics_workspace_onboarding: {
              [name]: std.prune({
                customer_managed_key_enabled: build.template(std.get(block, 'customer_managed_key_enabled', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      customer_managed_key_enabled: p.child('customer_managed_key_enabled').out,
      id: p.child('id').out,
      workspace_id: p.child('workspace_id').out,
    },
    sentinel_metadata(name, block): {
      local p = path(['azurerm_sentinel_metadata', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_metadata: {
              [name]: std.prune({
                content_id: build.template(block.content_id),
                content_schema_version: build.template(std.get(block, 'content_schema_version', null, true)),
                custom_version: build.template(std.get(block, 'custom_version', null, true)),
                dependency: build.template(std.get(block, 'dependency', null, true)),
                first_publish_date: build.template(std.get(block, 'first_publish_date', null, true)),
                icon_id: build.template(std.get(block, 'icon_id', null, true)),
                kind: build.template(block.kind),
                last_publish_date: build.template(std.get(block, 'last_publish_date', null, true)),
                name: build.template(block.name),
                parent_id: build.template(block.parent_id),
                preview_images: build.template(std.get(block, 'preview_images', null, true)),
                preview_images_dark: build.template(std.get(block, 'preview_images_dark', null, true)),
                providers: build.template(std.get(block, 'providers', null, true)),
                threat_analysis_tactics: build.template(std.get(block, 'threat_analysis_tactics', null, true)),
                threat_analysis_techniques: build.template(std.get(block, 'threat_analysis_techniques', null, true)),
                version: build.template(std.get(block, 'version', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      content_id: p.child('content_id').out,
      content_schema_version: p.child('content_schema_version').out,
      custom_version: p.child('custom_version').out,
      dependency: p.child('dependency').out,
      first_publish_date: p.child('first_publish_date').out,
      icon_id: p.child('icon_id').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      last_publish_date: p.child('last_publish_date').out,
      name: p.child('name').out,
      parent_id: p.child('parent_id').out,
      preview_images: p.child('preview_images').out,
      preview_images_dark: p.child('preview_images_dark').out,
      providers: p.child('providers').out,
      threat_analysis_tactics: p.child('threat_analysis_tactics').out,
      threat_analysis_techniques: p.child('threat_analysis_techniques').out,
      version: p.child('version').out,
      workspace_id: p.child('workspace_id').out,
    },
    sentinel_threat_intelligence_indicator(name, block): {
      local p = path(['azurerm_sentinel_threat_intelligence_indicator', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_threat_intelligence_indicator: {
              [name]: std.prune({
                confidence: build.template(std.get(block, 'confidence', null, true)),
                created_by: build.template(std.get(block, 'created_by', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                language: build.template(std.get(block, 'language', null, true)),
                object_marking_refs: build.template(std.get(block, 'object_marking_refs', null, true)),
                pattern: build.template(block.pattern),
                pattern_type: build.template(block.pattern_type),
                pattern_version: build.template(std.get(block, 'pattern_version', null, true)),
                revoked: build.template(std.get(block, 'revoked', null, true)),
                source: build.template(block.source),
                tags: build.template(std.get(block, 'tags', null, true)),
                threat_types: build.template(std.get(block, 'threat_types', null, true)),
                validate_from_utc: build.template(block.validate_from_utc),
                validate_until_utc: build.template(std.get(block, 'validate_until_utc', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      confidence: p.child('confidence').out,
      created_by: p.child('created_by').out,
      created_on: p.child('created_on').out,
      defanged: p.child('defanged').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      extension: p.child('extension').out,
      external_id: p.child('external_id').out,
      external_last_updated_time_utc: p.child('external_last_updated_time_utc').out,
      guid: p.child('guid').out,
      id: p.child('id').out,
      indicator_type: p.child('indicator_type').out,
      language: p.child('language').out,
      last_updated_time_utc: p.child('last_updated_time_utc').out,
      object_marking_refs: p.child('object_marking_refs').out,
      parsed_pattern: p.child('parsed_pattern').out,
      pattern: p.child('pattern').out,
      pattern_type: p.child('pattern_type').out,
      pattern_version: p.child('pattern_version').out,
      revoked: p.child('revoked').out,
      source: p.child('source').out,
      tags: p.child('tags').out,
      threat_types: p.child('threat_types').out,
      validate_from_utc: p.child('validate_from_utc').out,
      validate_until_utc: p.child('validate_until_utc').out,
      workspace_id: p.child('workspace_id').out,
    },
    sentinel_watchlist(name, block): {
      local p = path(['azurerm_sentinel_watchlist', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_watchlist: {
              [name]: std.prune({
                default_duration: build.template(std.get(block, 'default_duration', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                item_search_key: build.template(block.item_search_key),
                labels: build.template(std.get(block, 'labels', null, true)),
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      default_duration: p.child('default_duration').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      item_search_key: p.child('item_search_key').out,
      labels: p.child('labels').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
    },
    sentinel_watchlist_item(name, block): {
      local p = path(['azurerm_sentinel_watchlist_item', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_sentinel_watchlist_item: {
              [name]: std.prune({
                properties: build.template(block.properties),
                watchlist_id: build.template(block.watchlist_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      properties: p.child('properties').out,
      watchlist_id: p.child('watchlist_id').out,
    },
    service_fabric_cluster(name, block): {
      local p = path(['azurerm_service_fabric_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_service_fabric_cluster: {
              [name]: std.prune({
                add_on_features: build.template(std.get(block, 'add_on_features', null, true)),
                location: build.template(block.location),
                management_endpoint: build.template(block.management_endpoint),
                name: build.template(block.name),
                reliability_level: build.template(block.reliability_level),
                resource_group_name: build.template(block.resource_group_name),
                service_fabric_zonal_upgrade_mode: build.template(std.get(block, 'service_fabric_zonal_upgrade_mode', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                upgrade_mode: build.template(block.upgrade_mode),
                vm_image: build.template(block.vm_image),
                vmss_zonal_upgrade_mode: build.template(std.get(block, 'vmss_zonal_upgrade_mode', null, true)),
              }),
            },
          },
        },
      },
      add_on_features: p.child('add_on_features').out,
      cluster_code_version: p.child('cluster_code_version').out,
      cluster_endpoint: p.child('cluster_endpoint').out,
      id: p.child('id').out,
      location: p.child('location').out,
      management_endpoint: p.child('management_endpoint').out,
      name: p.child('name').out,
      reliability_level: p.child('reliability_level').out,
      resource_group_name: p.child('resource_group_name').out,
      service_fabric_zonal_upgrade_mode: p.child('service_fabric_zonal_upgrade_mode').out,
      tags: p.child('tags').out,
      upgrade_mode: p.child('upgrade_mode').out,
      vm_image: p.child('vm_image').out,
      vmss_zonal_upgrade_mode: p.child('vmss_zonal_upgrade_mode').out,
    },
    service_fabric_managed_cluster(name, block): {
      local p = path(['azurerm_service_fabric_managed_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_service_fabric_managed_cluster: {
              [name]: std.prune({
                backup_service_enabled: build.template(std.get(block, 'backup_service_enabled', null, true)),
                client_connection_port: build.template(block.client_connection_port),
                dns_service_enabled: build.template(std.get(block, 'dns_service_enabled', null, true)),
                http_gateway_port: build.template(block.http_gateway_port),
                location: build.template(block.location),
                name: build.template(block.name),
                password: build.template(std.get(block, 'password', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(std.get(block, 'sku', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                upgrade_wave: build.template(std.get(block, 'upgrade_wave', null, true)),
                username: build.template(std.get(block, 'username', null, true)),
              }),
            },
          },
        },
      },
      backup_service_enabled: p.child('backup_service_enabled').out,
      client_connection_port: p.child('client_connection_port').out,
      dns_name: p.child('dns_name').out,
      dns_service_enabled: p.child('dns_service_enabled').out,
      http_gateway_port: p.child('http_gateway_port').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      password: p.child('password').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      upgrade_wave: p.child('upgrade_wave').out,
      username: p.child('username').out,
    },
    service_plan(name, block): {
      local p = path(['azurerm_service_plan', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_service_plan: {
              [name]: std.prune({
                app_service_environment_id: build.template(std.get(block, 'app_service_environment_id', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                os_type: build.template(block.os_type),
                per_site_scaling_enabled: build.template(std.get(block, 'per_site_scaling_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                zone_balancing_enabled: build.template(std.get(block, 'zone_balancing_enabled', null, true)),
              }),
            },
          },
        },
      },
      app_service_environment_id: p.child('app_service_environment_id').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      maximum_elastic_worker_count: p.child('maximum_elastic_worker_count').out,
      name: p.child('name').out,
      os_type: p.child('os_type').out,
      per_site_scaling_enabled: p.child('per_site_scaling_enabled').out,
      reserved: p.child('reserved').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      worker_count: p.child('worker_count').out,
      zone_balancing_enabled: p.child('zone_balancing_enabled').out,
    },
    servicebus_namespace(name, block): {
      local p = path(['azurerm_servicebus_namespace', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_servicebus_namespace: {
              [name]: std.prune({
                capacity: build.template(std.get(block, 'capacity', null, true)),
                local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null, true)),
                location: build.template(block.location),
                minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null, true)),
                name: build.template(block.name),
                premium_messaging_partitions: build.template(std.get(block, 'premium_messaging_partitions', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      capacity: p.child('capacity').out,
      default_primary_connection_string: p.child('default_primary_connection_string').out,
      default_primary_key: p.child('default_primary_key').out,
      default_secondary_connection_string: p.child('default_secondary_connection_string').out,
      default_secondary_key: p.child('default_secondary_key').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      local_auth_enabled: p.child('local_auth_enabled').out,
      location: p.child('location').out,
      minimum_tls_version: p.child('minimum_tls_version').out,
      name: p.child('name').out,
      premium_messaging_partitions: p.child('premium_messaging_partitions').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    servicebus_namespace_authorization_rule(name, block): {
      local p = path(['azurerm_servicebus_namespace_authorization_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_servicebus_namespace_authorization_rule: {
              [name]: std.prune({
                listen: build.template(std.get(block, 'listen', null, true)),
                manage: build.template(std.get(block, 'manage', null, true)),
                name: build.template(block.name),
                namespace_id: build.template(block.namespace_id),
                send: build.template(std.get(block, 'send', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      listen: p.child('listen').out,
      manage: p.child('manage').out,
      name: p.child('name').out,
      namespace_id: p.child('namespace_id').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_connection_string_alias: p.child('primary_connection_string_alias').out,
      primary_key: p.child('primary_key').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_connection_string_alias: p.child('secondary_connection_string_alias').out,
      secondary_key: p.child('secondary_key').out,
      send: p.child('send').out,
    },
    servicebus_namespace_disaster_recovery_config(name, block): {
      local p = path(['azurerm_servicebus_namespace_disaster_recovery_config', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_servicebus_namespace_disaster_recovery_config: {
              [name]: std.prune({
                alias_authorization_rule_id: build.template(std.get(block, 'alias_authorization_rule_id', null, true)),
                name: build.template(block.name),
                partner_namespace_id: build.template(block.partner_namespace_id),
                primary_namespace_id: build.template(block.primary_namespace_id),
              }),
            },
          },
        },
      },
      alias_authorization_rule_id: p.child('alias_authorization_rule_id').out,
      default_primary_key: p.child('default_primary_key').out,
      default_secondary_key: p.child('default_secondary_key').out,
      id: p.child('id').out,
      name: p.child('name').out,
      partner_namespace_id: p.child('partner_namespace_id').out,
      primary_connection_string_alias: p.child('primary_connection_string_alias').out,
      primary_namespace_id: p.child('primary_namespace_id').out,
      secondary_connection_string_alias: p.child('secondary_connection_string_alias').out,
    },
    servicebus_queue(name, block): {
      local p = path(['azurerm_servicebus_queue', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_servicebus_queue: {
              [name]: std.prune({
                batched_operations_enabled: build.template(std.get(block, 'batched_operations_enabled', null, true)),
                dead_lettering_on_message_expiration: build.template(std.get(block, 'dead_lettering_on_message_expiration', null, true)),
                duplicate_detection_history_time_window: build.template(std.get(block, 'duplicate_detection_history_time_window', null, true)),
                express_enabled: build.template(std.get(block, 'express_enabled', null, true)),
                forward_dead_lettered_messages_to: build.template(std.get(block, 'forward_dead_lettered_messages_to', null, true)),
                forward_to: build.template(std.get(block, 'forward_to', null, true)),
                lock_duration: build.template(std.get(block, 'lock_duration', null, true)),
                max_delivery_count: build.template(std.get(block, 'max_delivery_count', null, true)),
                name: build.template(block.name),
                namespace_id: build.template(block.namespace_id),
                partitioning_enabled: build.template(std.get(block, 'partitioning_enabled', null, true)),
                requires_duplicate_detection: build.template(std.get(block, 'requires_duplicate_detection', null, true)),
                requires_session: build.template(std.get(block, 'requires_session', null, true)),
                status: build.template(std.get(block, 'status', null, true)),
              }),
            },
          },
        },
      },
      auto_delete_on_idle: p.child('auto_delete_on_idle').out,
      batched_operations_enabled: p.child('batched_operations_enabled').out,
      dead_lettering_on_message_expiration: p.child('dead_lettering_on_message_expiration').out,
      default_message_ttl: p.child('default_message_ttl').out,
      duplicate_detection_history_time_window: p.child('duplicate_detection_history_time_window').out,
      express_enabled: p.child('express_enabled').out,
      forward_dead_lettered_messages_to: p.child('forward_dead_lettered_messages_to').out,
      forward_to: p.child('forward_to').out,
      id: p.child('id').out,
      lock_duration: p.child('lock_duration').out,
      max_delivery_count: p.child('max_delivery_count').out,
      max_message_size_in_kilobytes: p.child('max_message_size_in_kilobytes').out,
      max_size_in_megabytes: p.child('max_size_in_megabytes').out,
      name: p.child('name').out,
      namespace_id: p.child('namespace_id').out,
      partitioning_enabled: p.child('partitioning_enabled').out,
      requires_duplicate_detection: p.child('requires_duplicate_detection').out,
      requires_session: p.child('requires_session').out,
      status: p.child('status').out,
    },
    servicebus_queue_authorization_rule(name, block): {
      local p = path(['azurerm_servicebus_queue_authorization_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_servicebus_queue_authorization_rule: {
              [name]: std.prune({
                listen: build.template(std.get(block, 'listen', null, true)),
                manage: build.template(std.get(block, 'manage', null, true)),
                name: build.template(block.name),
                queue_id: build.template(block.queue_id),
                send: build.template(std.get(block, 'send', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      listen: p.child('listen').out,
      manage: p.child('manage').out,
      name: p.child('name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_connection_string_alias: p.child('primary_connection_string_alias').out,
      primary_key: p.child('primary_key').out,
      queue_id: p.child('queue_id').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_connection_string_alias: p.child('secondary_connection_string_alias').out,
      secondary_key: p.child('secondary_key').out,
      send: p.child('send').out,
    },
    servicebus_subscription(name, block): {
      local p = path(['azurerm_servicebus_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_servicebus_subscription: {
              [name]: std.prune({
                auto_delete_on_idle: build.template(std.get(block, 'auto_delete_on_idle', null, true)),
                batched_operations_enabled: build.template(std.get(block, 'batched_operations_enabled', null, true)),
                client_scoped_subscription_enabled: build.template(std.get(block, 'client_scoped_subscription_enabled', null, true)),
                dead_lettering_on_filter_evaluation_error: build.template(std.get(block, 'dead_lettering_on_filter_evaluation_error', null, true)),
                dead_lettering_on_message_expiration: build.template(std.get(block, 'dead_lettering_on_message_expiration', null, true)),
                default_message_ttl: build.template(std.get(block, 'default_message_ttl', null, true)),
                forward_dead_lettered_messages_to: build.template(std.get(block, 'forward_dead_lettered_messages_to', null, true)),
                forward_to: build.template(std.get(block, 'forward_to', null, true)),
                lock_duration: build.template(std.get(block, 'lock_duration', null, true)),
                max_delivery_count: build.template(block.max_delivery_count),
                name: build.template(block.name),
                requires_session: build.template(std.get(block, 'requires_session', null, true)),
                status: build.template(std.get(block, 'status', null, true)),
                topic_id: build.template(block.topic_id),
              }),
            },
          },
        },
      },
      auto_delete_on_idle: p.child('auto_delete_on_idle').out,
      batched_operations_enabled: p.child('batched_operations_enabled').out,
      client_scoped_subscription_enabled: p.child('client_scoped_subscription_enabled').out,
      dead_lettering_on_filter_evaluation_error: p.child('dead_lettering_on_filter_evaluation_error').out,
      dead_lettering_on_message_expiration: p.child('dead_lettering_on_message_expiration').out,
      default_message_ttl: p.child('default_message_ttl').out,
      forward_dead_lettered_messages_to: p.child('forward_dead_lettered_messages_to').out,
      forward_to: p.child('forward_to').out,
      id: p.child('id').out,
      lock_duration: p.child('lock_duration').out,
      max_delivery_count: p.child('max_delivery_count').out,
      name: p.child('name').out,
      requires_session: p.child('requires_session').out,
      status: p.child('status').out,
      topic_id: p.child('topic_id').out,
    },
    servicebus_subscription_rule(name, block): {
      local p = path(['azurerm_servicebus_subscription_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_servicebus_subscription_rule: {
              [name]: std.prune({
                action: build.template(std.get(block, 'action', null, true)),
                filter_type: build.template(block.filter_type),
                name: build.template(block.name),
                sql_filter: build.template(std.get(block, 'sql_filter', null, true)),
                subscription_id: build.template(block.subscription_id),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      filter_type: p.child('filter_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      sql_filter: p.child('sql_filter').out,
      sql_filter_compatibility_level: p.child('sql_filter_compatibility_level').out,
      subscription_id: p.child('subscription_id').out,
    },
    servicebus_topic(name, block): {
      local p = path(['azurerm_servicebus_topic', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_servicebus_topic: {
              [name]: std.prune({
                auto_delete_on_idle: build.template(std.get(block, 'auto_delete_on_idle', null, true)),
                batched_operations_enabled: build.template(std.get(block, 'batched_operations_enabled', null, true)),
                default_message_ttl: build.template(std.get(block, 'default_message_ttl', null, true)),
                duplicate_detection_history_time_window: build.template(std.get(block, 'duplicate_detection_history_time_window', null, true)),
                express_enabled: build.template(std.get(block, 'express_enabled', null, true)),
                name: build.template(block.name),
                namespace_id: build.template(block.namespace_id),
                partitioning_enabled: build.template(std.get(block, 'partitioning_enabled', null, true)),
                requires_duplicate_detection: build.template(std.get(block, 'requires_duplicate_detection', null, true)),
                status: build.template(std.get(block, 'status', null, true)),
                support_ordering: build.template(std.get(block, 'support_ordering', null, true)),
              }),
            },
          },
        },
      },
      auto_delete_on_idle: p.child('auto_delete_on_idle').out,
      batched_operations_enabled: p.child('batched_operations_enabled').out,
      default_message_ttl: p.child('default_message_ttl').out,
      duplicate_detection_history_time_window: p.child('duplicate_detection_history_time_window').out,
      express_enabled: p.child('express_enabled').out,
      id: p.child('id').out,
      max_message_size_in_kilobytes: p.child('max_message_size_in_kilobytes').out,
      max_size_in_megabytes: p.child('max_size_in_megabytes').out,
      name: p.child('name').out,
      namespace_id: p.child('namespace_id').out,
      partitioning_enabled: p.child('partitioning_enabled').out,
      requires_duplicate_detection: p.child('requires_duplicate_detection').out,
      status: p.child('status').out,
      support_ordering: p.child('support_ordering').out,
    },
    servicebus_topic_authorization_rule(name, block): {
      local p = path(['azurerm_servicebus_topic_authorization_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_servicebus_topic_authorization_rule: {
              [name]: std.prune({
                listen: build.template(std.get(block, 'listen', null, true)),
                manage: build.template(std.get(block, 'manage', null, true)),
                name: build.template(block.name),
                send: build.template(std.get(block, 'send', null, true)),
                topic_id: build.template(block.topic_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      listen: p.child('listen').out,
      manage: p.child('manage').out,
      name: p.child('name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_connection_string_alias: p.child('primary_connection_string_alias').out,
      primary_key: p.child('primary_key').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_connection_string_alias: p.child('secondary_connection_string_alias').out,
      secondary_key: p.child('secondary_key').out,
      send: p.child('send').out,
      topic_id: p.child('topic_id').out,
    },
    shared_image(name, block): {
      local p = path(['azurerm_shared_image', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_shared_image: {
              [name]: std.prune({
                accelerated_network_support_enabled: build.template(std.get(block, 'accelerated_network_support_enabled', null, true)),
                architecture: build.template(std.get(block, 'architecture', null, true)),
                confidential_vm_enabled: build.template(std.get(block, 'confidential_vm_enabled', null, true)),
                confidential_vm_supported: build.template(std.get(block, 'confidential_vm_supported', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                disk_controller_type_nvme_enabled: build.template(std.get(block, 'disk_controller_type_nvme_enabled', null, true)),
                disk_types_not_allowed: build.template(std.get(block, 'disk_types_not_allowed', null, true)),
                end_of_life_date: build.template(std.get(block, 'end_of_life_date', null, true)),
                eula: build.template(std.get(block, 'eula', null, true)),
                gallery_name: build.template(block.gallery_name),
                hibernation_enabled: build.template(std.get(block, 'hibernation_enabled', null, true)),
                hyper_v_generation: build.template(std.get(block, 'hyper_v_generation', null, true)),
                location: build.template(block.location),
                max_recommended_memory_in_gb: build.template(std.get(block, 'max_recommended_memory_in_gb', null, true)),
                max_recommended_vcpu_count: build.template(std.get(block, 'max_recommended_vcpu_count', null, true)),
                min_recommended_memory_in_gb: build.template(std.get(block, 'min_recommended_memory_in_gb', null, true)),
                min_recommended_vcpu_count: build.template(std.get(block, 'min_recommended_vcpu_count', null, true)),
                name: build.template(block.name),
                os_type: build.template(block.os_type),
                privacy_statement_uri: build.template(std.get(block, 'privacy_statement_uri', null, true)),
                release_note_uri: build.template(std.get(block, 'release_note_uri', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                specialized: build.template(std.get(block, 'specialized', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                trusted_launch_enabled: build.template(std.get(block, 'trusted_launch_enabled', null, true)),
                trusted_launch_supported: build.template(std.get(block, 'trusted_launch_supported', null, true)),
              }),
            },
          },
        },
      },
      accelerated_network_support_enabled: p.child('accelerated_network_support_enabled').out,
      architecture: p.child('architecture').out,
      confidential_vm_enabled: p.child('confidential_vm_enabled').out,
      confidential_vm_supported: p.child('confidential_vm_supported').out,
      description: p.child('description').out,
      disk_controller_type_nvme_enabled: p.child('disk_controller_type_nvme_enabled').out,
      disk_types_not_allowed: p.child('disk_types_not_allowed').out,
      end_of_life_date: p.child('end_of_life_date').out,
      eula: p.child('eula').out,
      gallery_name: p.child('gallery_name').out,
      hibernation_enabled: p.child('hibernation_enabled').out,
      hyper_v_generation: p.child('hyper_v_generation').out,
      id: p.child('id').out,
      location: p.child('location').out,
      max_recommended_memory_in_gb: p.child('max_recommended_memory_in_gb').out,
      max_recommended_vcpu_count: p.child('max_recommended_vcpu_count').out,
      min_recommended_memory_in_gb: p.child('min_recommended_memory_in_gb').out,
      min_recommended_vcpu_count: p.child('min_recommended_vcpu_count').out,
      name: p.child('name').out,
      os_type: p.child('os_type').out,
      privacy_statement_uri: p.child('privacy_statement_uri').out,
      release_note_uri: p.child('release_note_uri').out,
      resource_group_name: p.child('resource_group_name').out,
      specialized: p.child('specialized').out,
      tags: p.child('tags').out,
      trusted_launch_enabled: p.child('trusted_launch_enabled').out,
      trusted_launch_supported: p.child('trusted_launch_supported').out,
    },
    shared_image_gallery(name, block): {
      local p = path(['azurerm_shared_image_gallery', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_shared_image_gallery: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      unique_name: p.child('unique_name').out,
    },
    shared_image_version(name, block): {
      local p = path(['azurerm_shared_image_version', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_shared_image_version: {
              [name]: std.prune({
                blob_uri: build.template(std.get(block, 'blob_uri', null, true)),
                deletion_of_replicated_locations_enabled: build.template(std.get(block, 'deletion_of_replicated_locations_enabled', null, true)),
                end_of_life_date: build.template(std.get(block, 'end_of_life_date', null, true)),
                exclude_from_latest: build.template(std.get(block, 'exclude_from_latest', null, true)),
                gallery_name: build.template(block.gallery_name),
                image_name: build.template(block.image_name),
                location: build.template(block.location),
                managed_image_id: build.template(std.get(block, 'managed_image_id', null, true)),
                name: build.template(block.name),
                os_disk_snapshot_id: build.template(std.get(block, 'os_disk_snapshot_id', null, true)),
                replication_mode: build.template(std.get(block, 'replication_mode', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                storage_account_id: build.template(std.get(block, 'storage_account_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      blob_uri: p.child('blob_uri').out,
      deletion_of_replicated_locations_enabled: p.child('deletion_of_replicated_locations_enabled').out,
      end_of_life_date: p.child('end_of_life_date').out,
      exclude_from_latest: p.child('exclude_from_latest').out,
      gallery_name: p.child('gallery_name').out,
      id: p.child('id').out,
      image_name: p.child('image_name').out,
      location: p.child('location').out,
      managed_image_id: p.child('managed_image_id').out,
      name: p.child('name').out,
      os_disk_snapshot_id: p.child('os_disk_snapshot_id').out,
      replication_mode: p.child('replication_mode').out,
      resource_group_name: p.child('resource_group_name').out,
      storage_account_id: p.child('storage_account_id').out,
      tags: p.child('tags').out,
    },
    signalr_service(name, block): {
      local p = path(['azurerm_signalr_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_signalr_service: {
              [name]: std.prune({
                aad_auth_enabled: build.template(std.get(block, 'aad_auth_enabled', null, true)),
                connectivity_logs_enabled: build.template(std.get(block, 'connectivity_logs_enabled', null, true)),
                http_request_logs_enabled: build.template(std.get(block, 'http_request_logs_enabled', null, true)),
                live_trace_enabled: build.template(std.get(block, 'live_trace_enabled', null, true)),
                local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null, true)),
                location: build.template(block.location),
                messaging_logs_enabled: build.template(std.get(block, 'messaging_logs_enabled', null, true)),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                serverless_connection_timeout_in_seconds: build.template(std.get(block, 'serverless_connection_timeout_in_seconds', null, true)),
                service_mode: build.template(std.get(block, 'service_mode', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tls_client_cert_enabled: build.template(std.get(block, 'tls_client_cert_enabled', null, true)),
              }),
            },
          },
        },
      },
      aad_auth_enabled: p.child('aad_auth_enabled').out,
      connectivity_logs_enabled: p.child('connectivity_logs_enabled').out,
      hostname: p.child('hostname').out,
      http_request_logs_enabled: p.child('http_request_logs_enabled').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      live_trace_enabled: p.child('live_trace_enabled').out,
      local_auth_enabled: p.child('local_auth_enabled').out,
      location: p.child('location').out,
      messaging_logs_enabled: p.child('messaging_logs_enabled').out,
      name: p.child('name').out,
      primary_access_key: p.child('primary_access_key').out,
      primary_connection_string: p.child('primary_connection_string').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      public_port: p.child('public_port').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      server_port: p.child('server_port').out,
      serverless_connection_timeout_in_seconds: p.child('serverless_connection_timeout_in_seconds').out,
      service_mode: p.child('service_mode').out,
      tags: p.child('tags').out,
      tls_client_cert_enabled: p.child('tls_client_cert_enabled').out,
    },
    signalr_service_custom_certificate(name, block): {
      local p = path(['azurerm_signalr_service_custom_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_signalr_service_custom_certificate: {
              [name]: std.prune({
                custom_certificate_id: build.template(block.custom_certificate_id),
                name: build.template(block.name),
                signalr_service_id: build.template(block.signalr_service_id),
              }),
            },
          },
        },
      },
      certificate_version: p.child('certificate_version').out,
      custom_certificate_id: p.child('custom_certificate_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      signalr_service_id: p.child('signalr_service_id').out,
    },
    signalr_service_custom_domain(name, block): {
      local p = path(['azurerm_signalr_service_custom_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_signalr_service_custom_domain: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                name: build.template(block.name),
                signalr_custom_certificate_id: build.template(block.signalr_custom_certificate_id),
                signalr_service_id: build.template(block.signalr_service_id),
              }),
            },
          },
        },
      },
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      signalr_custom_certificate_id: p.child('signalr_custom_certificate_id').out,
      signalr_service_id: p.child('signalr_service_id').out,
    },
    signalr_service_network_acl(name, block): {
      local p = path(['azurerm_signalr_service_network_acl', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_signalr_service_network_acl: {
              [name]: std.prune({
                default_action: build.template(block.default_action),
                signalr_service_id: build.template(block.signalr_service_id),
              }),
            },
          },
        },
      },
      default_action: p.child('default_action').out,
      id: p.child('id').out,
      signalr_service_id: p.child('signalr_service_id').out,
    },
    signalr_shared_private_link_resource(name, block): {
      local p = path(['azurerm_signalr_shared_private_link_resource', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_signalr_shared_private_link_resource: {
              [name]: std.prune({
                name: build.template(block.name),
                request_message: build.template(std.get(block, 'request_message', null, true)),
                signalr_service_id: build.template(block.signalr_service_id),
                sub_resource_name: build.template(block.sub_resource_name),
                target_resource_id: build.template(block.target_resource_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      request_message: p.child('request_message').out,
      signalr_service_id: p.child('signalr_service_id').out,
      status: p.child('status').out,
      sub_resource_name: p.child('sub_resource_name').out,
      target_resource_id: p.child('target_resource_id').out,
    },
    site_recovery_fabric(name, block): {
      local p = path(['azurerm_site_recovery_fabric', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_fabric: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    site_recovery_hyperv_network_mapping(name, block): {
      local p = path(['azurerm_site_recovery_hyperv_network_mapping', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_hyperv_network_mapping: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_vault_id: build.template(block.recovery_vault_id),
                source_network_name: build.template(block.source_network_name),
                source_system_center_virtual_machine_manager_name: build.template(block.source_system_center_virtual_machine_manager_name),
                target_network_id: build.template(block.target_network_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_vault_id: p.child('recovery_vault_id').out,
      source_network_name: p.child('source_network_name').out,
      source_system_center_virtual_machine_manager_name: p.child('source_system_center_virtual_machine_manager_name').out,
      target_network_id: p.child('target_network_id').out,
    },
    site_recovery_hyperv_replication_policy(name, block): {
      local p = path(['azurerm_site_recovery_hyperv_replication_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_hyperv_replication_policy: {
              [name]: std.prune({
                application_consistent_snapshot_frequency_in_hours: build.template(block.application_consistent_snapshot_frequency_in_hours),
                name: build.template(block.name),
                recovery_point_retention_in_hours: build.template(block.recovery_point_retention_in_hours),
                recovery_vault_id: build.template(block.recovery_vault_id),
                replication_interval_in_seconds: build.template(block.replication_interval_in_seconds),
              }),
            },
          },
        },
      },
      application_consistent_snapshot_frequency_in_hours: p.child('application_consistent_snapshot_frequency_in_hours').out,
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_point_retention_in_hours: p.child('recovery_point_retention_in_hours').out,
      recovery_vault_id: p.child('recovery_vault_id').out,
      replication_interval_in_seconds: p.child('replication_interval_in_seconds').out,
    },
    site_recovery_hyperv_replication_policy_association(name, block): {
      local p = path(['azurerm_site_recovery_hyperv_replication_policy_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_hyperv_replication_policy_association: {
              [name]: std.prune({
                hyperv_site_id: build.template(block.hyperv_site_id),
                name: build.template(block.name),
                policy_id: build.template(block.policy_id),
              }),
            },
          },
        },
      },
      hyperv_site_id: p.child('hyperv_site_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      policy_id: p.child('policy_id').out,
    },
    site_recovery_network_mapping(name, block): {
      local p = path(['azurerm_site_recovery_network_mapping', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_network_mapping: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
                source_network_id: build.template(block.source_network_id),
                source_recovery_fabric_name: build.template(block.source_recovery_fabric_name),
                target_network_id: build.template(block.target_network_id),
                target_recovery_fabric_name: build.template(block.target_recovery_fabric_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
      source_network_id: p.child('source_network_id').out,
      source_recovery_fabric_name: p.child('source_recovery_fabric_name').out,
      target_network_id: p.child('target_network_id').out,
      target_recovery_fabric_name: p.child('target_recovery_fabric_name').out,
    },
    site_recovery_protection_container(name, block): {
      local p = path(['azurerm_site_recovery_protection_container', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_protection_container: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_fabric_name: build.template(block.recovery_fabric_name),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_fabric_name: p.child('recovery_fabric_name').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    site_recovery_protection_container_mapping(name, block): {
      local p = path(['azurerm_site_recovery_protection_container_mapping', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_protection_container_mapping: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_fabric_name: build.template(block.recovery_fabric_name),
                recovery_replication_policy_id: build.template(block.recovery_replication_policy_id),
                recovery_source_protection_container_name: build.template(block.recovery_source_protection_container_name),
                recovery_target_protection_container_id: build.template(block.recovery_target_protection_container_id),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_fabric_name: p.child('recovery_fabric_name').out,
      recovery_replication_policy_id: p.child('recovery_replication_policy_id').out,
      recovery_source_protection_container_name: p.child('recovery_source_protection_container_name').out,
      recovery_target_protection_container_id: p.child('recovery_target_protection_container_id').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    site_recovery_replicated_vm(name, block): {
      local p = path(['azurerm_site_recovery_replicated_vm', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_replicated_vm: {
              [name]: std.prune({
                multi_vm_group_name: build.template(std.get(block, 'multi_vm_group_name', null, true)),
                name: build.template(block.name),
                recovery_replication_policy_id: build.template(block.recovery_replication_policy_id),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
                source_recovery_fabric_name: build.template(block.source_recovery_fabric_name),
                source_recovery_protection_container_name: build.template(block.source_recovery_protection_container_name),
                source_vm_id: build.template(block.source_vm_id),
                target_availability_set_id: build.template(std.get(block, 'target_availability_set_id', null, true)),
                target_boot_diagnostic_storage_account_id: build.template(std.get(block, 'target_boot_diagnostic_storage_account_id', null, true)),
                target_capacity_reservation_group_id: build.template(std.get(block, 'target_capacity_reservation_group_id', null, true)),
                target_edge_zone: build.template(std.get(block, 'target_edge_zone', null, true)),
                target_proximity_placement_group_id: build.template(std.get(block, 'target_proximity_placement_group_id', null, true)),
                target_recovery_fabric_id: build.template(block.target_recovery_fabric_id),
                target_recovery_protection_container_id: build.template(block.target_recovery_protection_container_id),
                target_resource_group_id: build.template(block.target_resource_group_id),
                target_virtual_machine_scale_set_id: build.template(std.get(block, 'target_virtual_machine_scale_set_id', null, true)),
                target_zone: build.template(std.get(block, 'target_zone', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      managed_disk: p.child('managed_disk').out,
      multi_vm_group_name: p.child('multi_vm_group_name').out,
      name: p.child('name').out,
      network_interface: p.child('network_interface').out,
      recovery_replication_policy_id: p.child('recovery_replication_policy_id').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
      source_recovery_fabric_name: p.child('source_recovery_fabric_name').out,
      source_recovery_protection_container_name: p.child('source_recovery_protection_container_name').out,
      source_vm_id: p.child('source_vm_id').out,
      target_availability_set_id: p.child('target_availability_set_id').out,
      target_boot_diagnostic_storage_account_id: p.child('target_boot_diagnostic_storage_account_id').out,
      target_capacity_reservation_group_id: p.child('target_capacity_reservation_group_id').out,
      target_edge_zone: p.child('target_edge_zone').out,
      target_network_id: p.child('target_network_id').out,
      target_proximity_placement_group_id: p.child('target_proximity_placement_group_id').out,
      target_recovery_fabric_id: p.child('target_recovery_fabric_id').out,
      target_recovery_protection_container_id: p.child('target_recovery_protection_container_id').out,
      target_resource_group_id: p.child('target_resource_group_id').out,
      target_virtual_machine_scale_set_id: p.child('target_virtual_machine_scale_set_id').out,
      target_virtual_machine_size: p.child('target_virtual_machine_size').out,
      target_zone: p.child('target_zone').out,
      test_network_id: p.child('test_network_id').out,
      unmanaged_disk: p.child('unmanaged_disk').out,
    },
    site_recovery_replication_policy(name, block): {
      local p = path(['azurerm_site_recovery_replication_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_replication_policy: {
              [name]: std.prune({
                application_consistent_snapshot_frequency_in_minutes: build.template(block.application_consistent_snapshot_frequency_in_minutes),
                name: build.template(block.name),
                recovery_point_retention_in_minutes: build.template(block.recovery_point_retention_in_minutes),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      application_consistent_snapshot_frequency_in_minutes: p.child('application_consistent_snapshot_frequency_in_minutes').out,
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_point_retention_in_minutes: p.child('recovery_point_retention_in_minutes').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    site_recovery_replication_recovery_plan(name, block): {
      local p = path(['azurerm_site_recovery_replication_recovery_plan', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_replication_recovery_plan: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_vault_id: build.template(block.recovery_vault_id),
                source_recovery_fabric_id: build.template(block.source_recovery_fabric_id),
                target_recovery_fabric_id: build.template(block.target_recovery_fabric_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_vault_id: p.child('recovery_vault_id').out,
      source_recovery_fabric_id: p.child('source_recovery_fabric_id').out,
      target_recovery_fabric_id: p.child('target_recovery_fabric_id').out,
    },
    site_recovery_services_vault_hyperv_site(name, block): {
      local p = path(['azurerm_site_recovery_services_vault_hyperv_site', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_services_vault_hyperv_site: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_vault_id: build.template(block.recovery_vault_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_vault_id: p.child('recovery_vault_id').out,
    },
    site_recovery_vmware_replicated_vm(name, block): {
      local p = path(['azurerm_site_recovery_vmware_replicated_vm', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_vmware_replicated_vm: {
              [name]: std.prune({
                appliance_name: build.template(block.appliance_name),
                default_log_storage_account_id: build.template(std.get(block, 'default_log_storage_account_id', null, true)),
                default_recovery_disk_type: build.template(std.get(block, 'default_recovery_disk_type', null, true)),
                default_target_disk_encryption_set_id: build.template(std.get(block, 'default_target_disk_encryption_set_id', null, true)),
                license_type: build.template(std.get(block, 'license_type', null, true)),
                multi_vm_group_name: build.template(std.get(block, 'multi_vm_group_name', null, true)),
                name: build.template(block.name),
                physical_server_credential_name: build.template(block.physical_server_credential_name),
                recovery_replication_policy_id: build.template(block.recovery_replication_policy_id),
                recovery_vault_id: build.template(block.recovery_vault_id),
                source_vm_name: build.template(block.source_vm_name),
                target_availability_set_id: build.template(std.get(block, 'target_availability_set_id', null, true)),
                target_boot_diagnostics_storage_account_id: build.template(std.get(block, 'target_boot_diagnostics_storage_account_id', null, true)),
                target_network_id: build.template(std.get(block, 'target_network_id', null, true)),
                target_proximity_placement_group_id: build.template(std.get(block, 'target_proximity_placement_group_id', null, true)),
                target_resource_group_id: build.template(block.target_resource_group_id),
                target_vm_name: build.template(block.target_vm_name),
                target_vm_size: build.template(std.get(block, 'target_vm_size', null, true)),
                target_zone: build.template(std.get(block, 'target_zone', null, true)),
                test_network_id: build.template(std.get(block, 'test_network_id', null, true)),
              }),
            },
          },
        },
      },
      appliance_name: p.child('appliance_name').out,
      default_log_storage_account_id: p.child('default_log_storage_account_id').out,
      default_recovery_disk_type: p.child('default_recovery_disk_type').out,
      default_target_disk_encryption_set_id: p.child('default_target_disk_encryption_set_id').out,
      id: p.child('id').out,
      license_type: p.child('license_type').out,
      multi_vm_group_name: p.child('multi_vm_group_name').out,
      name: p.child('name').out,
      physical_server_credential_name: p.child('physical_server_credential_name').out,
      recovery_replication_policy_id: p.child('recovery_replication_policy_id').out,
      recovery_vault_id: p.child('recovery_vault_id').out,
      source_vm_name: p.child('source_vm_name').out,
      target_availability_set_id: p.child('target_availability_set_id').out,
      target_boot_diagnostics_storage_account_id: p.child('target_boot_diagnostics_storage_account_id').out,
      target_network_id: p.child('target_network_id').out,
      target_proximity_placement_group_id: p.child('target_proximity_placement_group_id').out,
      target_resource_group_id: p.child('target_resource_group_id').out,
      target_vm_name: p.child('target_vm_name').out,
      target_vm_size: p.child('target_vm_size').out,
      target_zone: p.child('target_zone').out,
      test_network_id: p.child('test_network_id').out,
    },
    site_recovery_vmware_replication_policy(name, block): {
      local p = path(['azurerm_site_recovery_vmware_replication_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_vmware_replication_policy: {
              [name]: std.prune({
                application_consistent_snapshot_frequency_in_minutes: build.template(block.application_consistent_snapshot_frequency_in_minutes),
                name: build.template(block.name),
                recovery_point_retention_in_minutes: build.template(block.recovery_point_retention_in_minutes),
                recovery_vault_id: build.template(block.recovery_vault_id),
              }),
            },
          },
        },
      },
      application_consistent_snapshot_frequency_in_minutes: p.child('application_consistent_snapshot_frequency_in_minutes').out,
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_point_retention_in_minutes: p.child('recovery_point_retention_in_minutes').out,
      recovery_vault_id: p.child('recovery_vault_id').out,
    },
    site_recovery_vmware_replication_policy_association(name, block): {
      local p = path(['azurerm_site_recovery_vmware_replication_policy_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_site_recovery_vmware_replication_policy_association: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_id: build.template(block.policy_id),
                recovery_vault_id: build.template(block.recovery_vault_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      policy_id: p.child('policy_id').out,
      recovery_vault_id: p.child('recovery_vault_id').out,
    },
    snapshot(name, block): {
      local p = path(['azurerm_snapshot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_snapshot: {
              [name]: std.prune({
                create_option: build.template(block.create_option),
                disk_access_id: build.template(std.get(block, 'disk_access_id', null, true)),
                incremental_enabled: build.template(std.get(block, 'incremental_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                network_access_policy: build.template(std.get(block, 'network_access_policy', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                source_resource_id: build.template(std.get(block, 'source_resource_id', null, true)),
                source_uri: build.template(std.get(block, 'source_uri', null, true)),
                storage_account_id: build.template(std.get(block, 'storage_account_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      create_option: p.child('create_option').out,
      disk_access_id: p.child('disk_access_id').out,
      disk_size_gb: p.child('disk_size_gb').out,
      id: p.child('id').out,
      incremental_enabled: p.child('incremental_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      network_access_policy: p.child('network_access_policy').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      source_resource_id: p.child('source_resource_id').out,
      source_uri: p.child('source_uri').out,
      storage_account_id: p.child('storage_account_id').out,
      tags: p.child('tags').out,
      trusted_launch_enabled: p.child('trusted_launch_enabled').out,
    },
    source_control_token(name, block): {
      local p = path(['azurerm_source_control_token', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_source_control_token: {
              [name]: std.prune({
                token: build.template(block.token),
                token_secret: build.template(std.get(block, 'token_secret', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      token: p.child('token').out,
      token_secret: p.child('token_secret').out,
      type: p.child('type').out,
    },
    spatial_anchors_account(name, block): {
      local p = path(['azurerm_spatial_anchors_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spatial_anchors_account: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      account_domain: p.child('account_domain').out,
      account_id: p.child('account_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    spring_cloud_accelerator(name, block): {
      local p = path(['azurerm_spring_cloud_accelerator', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_accelerator: {
              [name]: std.prune({
                name: build.template(block.name),
                spring_cloud_service_id: build.template(block.spring_cloud_service_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      spring_cloud_service_id: p.child('spring_cloud_service_id').out,
    },
    spring_cloud_active_deployment(name, block): {
      local p = path(['azurerm_spring_cloud_active_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_active_deployment: {
              [name]: std.prune({
                deployment_name: build.template(block.deployment_name),
                spring_cloud_app_id: build.template(block.spring_cloud_app_id),
              }),
            },
          },
        },
      },
      deployment_name: p.child('deployment_name').out,
      id: p.child('id').out,
      spring_cloud_app_id: p.child('spring_cloud_app_id').out,
    },
    spring_cloud_api_portal(name, block): {
      local p = path(['azurerm_spring_cloud_api_portal', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_api_portal: {
              [name]: std.prune({
                api_try_out_enabled: build.template(std.get(block, 'api_try_out_enabled', null, true)),
                gateway_ids: build.template(std.get(block, 'gateway_ids', null, true)),
                https_only_enabled: build.template(std.get(block, 'https_only_enabled', null, true)),
                instance_count: build.template(std.get(block, 'instance_count', null, true)),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                spring_cloud_service_id: build.template(block.spring_cloud_service_id),
              }),
            },
          },
        },
      },
      api_try_out_enabled: p.child('api_try_out_enabled').out,
      gateway_ids: p.child('gateway_ids').out,
      https_only_enabled: p.child('https_only_enabled').out,
      id: p.child('id').out,
      instance_count: p.child('instance_count').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      spring_cloud_service_id: p.child('spring_cloud_service_id').out,
      url: p.child('url').out,
    },
    spring_cloud_api_portal_custom_domain(name, block): {
      local p = path(['azurerm_spring_cloud_api_portal_custom_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_api_portal_custom_domain: {
              [name]: std.prune({
                name: build.template(block.name),
                spring_cloud_api_portal_id: build.template(block.spring_cloud_api_portal_id),
                thumbprint: build.template(std.get(block, 'thumbprint', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      spring_cloud_api_portal_id: p.child('spring_cloud_api_portal_id').out,
      thumbprint: p.child('thumbprint').out,
    },
    spring_cloud_app(name, block): {
      local p = path(['azurerm_spring_cloud_app', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_app: {
              [name]: std.prune({
                https_only: build.template(std.get(block, 'https_only', null, true)),
                is_public: build.template(std.get(block, 'is_public', null, true)),
                name: build.template(block.name),
                public_endpoint_enabled: build.template(std.get(block, 'public_endpoint_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                service_name: build.template(block.service_name),
                tls_enabled: build.template(std.get(block, 'tls_enabled', null, true)),
              }),
            },
          },
        },
      },
      addon_json: p.child('addon_json').out,
      fqdn: p.child('fqdn').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      is_public: p.child('is_public').out,
      name: p.child('name').out,
      public_endpoint_enabled: p.child('public_endpoint_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      service_name: p.child('service_name').out,
      tls_enabled: p.child('tls_enabled').out,
      url: p.child('url').out,
    },
    spring_cloud_app_cosmosdb_association(name, block): {
      local p = path(['azurerm_spring_cloud_app_cosmosdb_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_app_cosmosdb_association: {
              [name]: std.prune({
                api_type: build.template(block.api_type),
                cosmosdb_access_key: build.template(block.cosmosdb_access_key),
                cosmosdb_account_id: build.template(block.cosmosdb_account_id),
                cosmosdb_cassandra_keyspace_name: build.template(std.get(block, 'cosmosdb_cassandra_keyspace_name', null, true)),
                cosmosdb_gremlin_database_name: build.template(std.get(block, 'cosmosdb_gremlin_database_name', null, true)),
                cosmosdb_gremlin_graph_name: build.template(std.get(block, 'cosmosdb_gremlin_graph_name', null, true)),
                cosmosdb_mongo_database_name: build.template(std.get(block, 'cosmosdb_mongo_database_name', null, true)),
                cosmosdb_sql_database_name: build.template(std.get(block, 'cosmosdb_sql_database_name', null, true)),
                name: build.template(block.name),
                spring_cloud_app_id: build.template(block.spring_cloud_app_id),
              }),
            },
          },
        },
      },
      api_type: p.child('api_type').out,
      cosmosdb_access_key: p.child('cosmosdb_access_key').out,
      cosmosdb_account_id: p.child('cosmosdb_account_id').out,
      cosmosdb_cassandra_keyspace_name: p.child('cosmosdb_cassandra_keyspace_name').out,
      cosmosdb_gremlin_database_name: p.child('cosmosdb_gremlin_database_name').out,
      cosmosdb_gremlin_graph_name: p.child('cosmosdb_gremlin_graph_name').out,
      cosmosdb_mongo_database_name: p.child('cosmosdb_mongo_database_name').out,
      cosmosdb_sql_database_name: p.child('cosmosdb_sql_database_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      spring_cloud_app_id: p.child('spring_cloud_app_id').out,
    },
    spring_cloud_app_dynamics_application_performance_monitoring(name, block): {
      local p = path(['azurerm_spring_cloud_app_dynamics_application_performance_monitoring', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_app_dynamics_application_performance_monitoring: {
              [name]: std.prune({
                agent_account_access_key: build.template(block.agent_account_access_key),
                agent_account_name: build.template(block.agent_account_name),
                agent_application_name: build.template(std.get(block, 'agent_application_name', null, true)),
                agent_node_name: build.template(std.get(block, 'agent_node_name', null, true)),
                agent_tier_name: build.template(std.get(block, 'agent_tier_name', null, true)),
                agent_unique_host_id: build.template(std.get(block, 'agent_unique_host_id', null, true)),
                controller_host_name: build.template(block.controller_host_name),
                controller_port: build.template(std.get(block, 'controller_port', null, true)),
                controller_ssl_enabled: build.template(std.get(block, 'controller_ssl_enabled', null, true)),
                globally_enabled: build.template(std.get(block, 'globally_enabled', null, true)),
                name: build.template(block.name),
                spring_cloud_service_id: build.template(block.spring_cloud_service_id),
              }),
            },
          },
        },
      },
      agent_account_access_key: p.child('agent_account_access_key').out,
      agent_account_name: p.child('agent_account_name').out,
      agent_application_name: p.child('agent_application_name').out,
      agent_node_name: p.child('agent_node_name').out,
      agent_tier_name: p.child('agent_tier_name').out,
      agent_unique_host_id: p.child('agent_unique_host_id').out,
      controller_host_name: p.child('controller_host_name').out,
      controller_port: p.child('controller_port').out,
      controller_ssl_enabled: p.child('controller_ssl_enabled').out,
      globally_enabled: p.child('globally_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      spring_cloud_service_id: p.child('spring_cloud_service_id').out,
    },
    spring_cloud_app_mysql_association(name, block): {
      local p = path(['azurerm_spring_cloud_app_mysql_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_app_mysql_association: {
              [name]: std.prune({
                database_name: build.template(block.database_name),
                mysql_server_id: build.template(block.mysql_server_id),
                name: build.template(block.name),
                password: build.template(block.password),
                spring_cloud_app_id: build.template(block.spring_cloud_app_id),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      database_name: p.child('database_name').out,
      id: p.child('id').out,
      mysql_server_id: p.child('mysql_server_id').out,
      name: p.child('name').out,
      password: p.child('password').out,
      spring_cloud_app_id: p.child('spring_cloud_app_id').out,
      username: p.child('username').out,
    },
    spring_cloud_app_redis_association(name, block): {
      local p = path(['azurerm_spring_cloud_app_redis_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_app_redis_association: {
              [name]: std.prune({
                name: build.template(block.name),
                redis_access_key: build.template(block.redis_access_key),
                redis_cache_id: build.template(block.redis_cache_id),
                spring_cloud_app_id: build.template(block.spring_cloud_app_id),
                ssl_enabled: build.template(std.get(block, 'ssl_enabled', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      redis_access_key: p.child('redis_access_key').out,
      redis_cache_id: p.child('redis_cache_id').out,
      spring_cloud_app_id: p.child('spring_cloud_app_id').out,
      ssl_enabled: p.child('ssl_enabled').out,
    },
    spring_cloud_application_insights_application_performance_monitoring(name, block): {
      local p = path(['azurerm_spring_cloud_application_insights_application_performance_monitoring', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_application_insights_application_performance_monitoring: {
              [name]: std.prune({
                connection_string: build.template(std.get(block, 'connection_string', null, true)),
                globally_enabled: build.template(std.get(block, 'globally_enabled', null, true)),
                name: build.template(block.name),
                role_instance: build.template(std.get(block, 'role_instance', null, true)),
                role_name: build.template(std.get(block, 'role_name', null, true)),
                sampling_percentage: build.template(std.get(block, 'sampling_percentage', null, true)),
                sampling_requests_per_second: build.template(std.get(block, 'sampling_requests_per_second', null, true)),
                spring_cloud_service_id: build.template(block.spring_cloud_service_id),
              }),
            },
          },
        },
      },
      connection_string: p.child('connection_string').out,
      globally_enabled: p.child('globally_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      role_instance: p.child('role_instance').out,
      role_name: p.child('role_name').out,
      sampling_percentage: p.child('sampling_percentage').out,
      sampling_requests_per_second: p.child('sampling_requests_per_second').out,
      spring_cloud_service_id: p.child('spring_cloud_service_id').out,
    },
    spring_cloud_application_live_view(name, block): {
      local p = path(['azurerm_spring_cloud_application_live_view', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_application_live_view: {
              [name]: std.prune({
                name: build.template(block.name),
                spring_cloud_service_id: build.template(block.spring_cloud_service_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      spring_cloud_service_id: p.child('spring_cloud_service_id').out,
    },
    spring_cloud_build_deployment(name, block): {
      local p = path(['azurerm_spring_cloud_build_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_build_deployment: {
              [name]: std.prune({
                application_performance_monitoring_ids: build.template(std.get(block, 'application_performance_monitoring_ids', null, true)),
                build_result_id: build.template(block.build_result_id),
                environment_variables: build.template(std.get(block, 'environment_variables', null, true)),
                instance_count: build.template(std.get(block, 'instance_count', null, true)),
                name: build.template(block.name),
                spring_cloud_app_id: build.template(block.spring_cloud_app_id),
              }),
            },
          },
        },
      },
      addon_json: p.child('addon_json').out,
      application_performance_monitoring_ids: p.child('application_performance_monitoring_ids').out,
      build_result_id: p.child('build_result_id').out,
      environment_variables: p.child('environment_variables').out,
      id: p.child('id').out,
      instance_count: p.child('instance_count').out,
      name: p.child('name').out,
      spring_cloud_app_id: p.child('spring_cloud_app_id').out,
    },
    spring_cloud_build_pack_binding(name, block): {
      local p = path(['azurerm_spring_cloud_build_pack_binding', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_build_pack_binding: {
              [name]: std.prune({
                binding_type: build.template(std.get(block, 'binding_type', null, true)),
                name: build.template(block.name),
                spring_cloud_builder_id: build.template(block.spring_cloud_builder_id),
              }),
            },
          },
        },
      },
      binding_type: p.child('binding_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      spring_cloud_builder_id: p.child('spring_cloud_builder_id').out,
    },
    spring_cloud_builder(name, block): {
      local p = path(['azurerm_spring_cloud_builder', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_builder: {
              [name]: std.prune({
                name: build.template(block.name),
                spring_cloud_service_id: build.template(block.spring_cloud_service_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      spring_cloud_service_id: p.child('spring_cloud_service_id').out,
    },
    spring_cloud_certificate(name, block): {
      local p = path(['azurerm_spring_cloud_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_certificate: {
              [name]: std.prune({
                certificate_content: build.template(std.get(block, 'certificate_content', null, true)),
                exclude_private_key: build.template(std.get(block, 'exclude_private_key', null, true)),
                key_vault_certificate_id: build.template(std.get(block, 'key_vault_certificate_id', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      certificate_content: p.child('certificate_content').out,
      exclude_private_key: p.child('exclude_private_key').out,
      id: p.child('id').out,
      key_vault_certificate_id: p.child('key_vault_certificate_id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      service_name: p.child('service_name').out,
      thumbprint: p.child('thumbprint').out,
    },
    spring_cloud_configuration_service(name, block): {
      local p = path(['azurerm_spring_cloud_configuration_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_configuration_service: {
              [name]: std.prune({
                generation: build.template(std.get(block, 'generation', null, true)),
                name: build.template(block.name),
                refresh_interval_in_seconds: build.template(std.get(block, 'refresh_interval_in_seconds', null, true)),
                spring_cloud_service_id: build.template(block.spring_cloud_service_id),
              }),
            },
          },
        },
      },
      generation: p.child('generation').out,
      id: p.child('id').out,
      name: p.child('name').out,
      refresh_interval_in_seconds: p.child('refresh_interval_in_seconds').out,
      spring_cloud_service_id: p.child('spring_cloud_service_id').out,
    },
    spring_cloud_connection(name, block): {
      local p = path(['azurerm_spring_cloud_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_connection: {
              [name]: std.prune({
                client_type: build.template(std.get(block, 'client_type', null, true)),
                name: build.template(block.name),
                spring_cloud_id: build.template(block.spring_cloud_id),
                target_resource_id: build.template(block.target_resource_id),
                vnet_solution: build.template(std.get(block, 'vnet_solution', null, true)),
              }),
            },
          },
        },
      },
      client_type: p.child('client_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      spring_cloud_id: p.child('spring_cloud_id').out,
      target_resource_id: p.child('target_resource_id').out,
      vnet_solution: p.child('vnet_solution').out,
    },
    spring_cloud_container_deployment(name, block): {
      local p = path(['azurerm_spring_cloud_container_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_container_deployment: {
              [name]: std.prune({
                application_performance_monitoring_ids: build.template(std.get(block, 'application_performance_monitoring_ids', null, true)),
                arguments: build.template(std.get(block, 'arguments', null, true)),
                commands: build.template(std.get(block, 'commands', null, true)),
                environment_variables: build.template(std.get(block, 'environment_variables', null, true)),
                image: build.template(block.image),
                instance_count: build.template(std.get(block, 'instance_count', null, true)),
                language_framework: build.template(std.get(block, 'language_framework', null, true)),
                name: build.template(block.name),
                server: build.template(block.server),
                spring_cloud_app_id: build.template(block.spring_cloud_app_id),
              }),
            },
          },
        },
      },
      addon_json: p.child('addon_json').out,
      application_performance_monitoring_ids: p.child('application_performance_monitoring_ids').out,
      arguments: p.child('arguments').out,
      commands: p.child('commands').out,
      environment_variables: p.child('environment_variables').out,
      id: p.child('id').out,
      image: p.child('image').out,
      instance_count: p.child('instance_count').out,
      language_framework: p.child('language_framework').out,
      name: p.child('name').out,
      server: p.child('server').out,
      spring_cloud_app_id: p.child('spring_cloud_app_id').out,
    },
    spring_cloud_custom_domain(name, block): {
      local p = path(['azurerm_spring_cloud_custom_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_custom_domain: {
              [name]: std.prune({
                certificate_name: build.template(std.get(block, 'certificate_name', null, true)),
                name: build.template(block.name),
                spring_cloud_app_id: build.template(block.spring_cloud_app_id),
                thumbprint: build.template(std.get(block, 'thumbprint', null, true)),
              }),
            },
          },
        },
      },
      certificate_name: p.child('certificate_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      spring_cloud_app_id: p.child('spring_cloud_app_id').out,
      thumbprint: p.child('thumbprint').out,
    },
    spring_cloud_customized_accelerator(name, block): {
      local p = path(['azurerm_spring_cloud_customized_accelerator', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_customized_accelerator: {
              [name]: std.prune({
                accelerator_tags: build.template(std.get(block, 'accelerator_tags', null, true)),
                accelerator_type: build.template(std.get(block, 'accelerator_type', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                icon_url: build.template(std.get(block, 'icon_url', null, true)),
                name: build.template(block.name),
                spring_cloud_accelerator_id: build.template(block.spring_cloud_accelerator_id),
              }),
            },
          },
        },
      },
      accelerator_tags: p.child('accelerator_tags').out,
      accelerator_type: p.child('accelerator_type').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      icon_url: p.child('icon_url').out,
      id: p.child('id').out,
      name: p.child('name').out,
      spring_cloud_accelerator_id: p.child('spring_cloud_accelerator_id').out,
    },
    spring_cloud_dev_tool_portal(name, block): {
      local p = path(['azurerm_spring_cloud_dev_tool_portal', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_dev_tool_portal: {
              [name]: std.prune({
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                spring_cloud_service_id: build.template(block.spring_cloud_service_id),
              }),
            },
          },
        },
      },
      application_accelerator_enabled: p.child('application_accelerator_enabled').out,
      application_live_view_enabled: p.child('application_live_view_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      spring_cloud_service_id: p.child('spring_cloud_service_id').out,
    },
    spring_cloud_dynatrace_application_performance_monitoring(name, block): {
      local p = path(['azurerm_spring_cloud_dynatrace_application_performance_monitoring', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_dynatrace_application_performance_monitoring: {
              [name]: std.prune({
                api_token: build.template(std.get(block, 'api_token', null, true)),
                api_url: build.template(std.get(block, 'api_url', null, true)),
                connection_point: build.template(block.connection_point),
                environment_id: build.template(std.get(block, 'environment_id', null, true)),
                globally_enabled: build.template(std.get(block, 'globally_enabled', null, true)),
                name: build.template(block.name),
                spring_cloud_service_id: build.template(block.spring_cloud_service_id),
                tenant: build.template(block.tenant),
                tenant_token: build.template(block.tenant_token),
              }),
            },
          },
        },
      },
      api_token: p.child('api_token').out,
      api_url: p.child('api_url').out,
      connection_point: p.child('connection_point').out,
      environment_id: p.child('environment_id').out,
      globally_enabled: p.child('globally_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      spring_cloud_service_id: p.child('spring_cloud_service_id').out,
      tenant: p.child('tenant').out,
      tenant_token: p.child('tenant_token').out,
    },
    spring_cloud_elastic_application_performance_monitoring(name, block): {
      local p = path(['azurerm_spring_cloud_elastic_application_performance_monitoring', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_elastic_application_performance_monitoring: {
              [name]: std.prune({
                application_packages: build.template(block.application_packages),
                globally_enabled: build.template(std.get(block, 'globally_enabled', null, true)),
                name: build.template(block.name),
                server_url: build.template(block.server_url),
                service_name: build.template(block.service_name),
                spring_cloud_service_id: build.template(block.spring_cloud_service_id),
              }),
            },
          },
        },
      },
      application_packages: p.child('application_packages').out,
      globally_enabled: p.child('globally_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      server_url: p.child('server_url').out,
      service_name: p.child('service_name').out,
      spring_cloud_service_id: p.child('spring_cloud_service_id').out,
    },
    spring_cloud_gateway(name, block): {
      local p = path(['azurerm_spring_cloud_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_gateway: {
              [name]: std.prune({
                application_performance_monitoring_ids: build.template(std.get(block, 'application_performance_monitoring_ids', null, true)),
                application_performance_monitoring_types: build.template(std.get(block, 'application_performance_monitoring_types', null, true)),
                environment_variables: build.template(std.get(block, 'environment_variables', null, true)),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                instance_count: build.template(std.get(block, 'instance_count', null, true)),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                sensitive_environment_variables: build.template(std.get(block, 'sensitive_environment_variables', null, true)),
                spring_cloud_service_id: build.template(block.spring_cloud_service_id),
              }),
            },
          },
        },
      },
      application_performance_monitoring_ids: p.child('application_performance_monitoring_ids').out,
      application_performance_monitoring_types: p.child('application_performance_monitoring_types').out,
      environment_variables: p.child('environment_variables').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      instance_count: p.child('instance_count').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      sensitive_environment_variables: p.child('sensitive_environment_variables').out,
      spring_cloud_service_id: p.child('spring_cloud_service_id').out,
      url: p.child('url').out,
    },
    spring_cloud_gateway_custom_domain(name, block): {
      local p = path(['azurerm_spring_cloud_gateway_custom_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_gateway_custom_domain: {
              [name]: std.prune({
                name: build.template(block.name),
                spring_cloud_gateway_id: build.template(block.spring_cloud_gateway_id),
                thumbprint: build.template(std.get(block, 'thumbprint', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      spring_cloud_gateway_id: p.child('spring_cloud_gateway_id').out,
      thumbprint: p.child('thumbprint').out,
    },
    spring_cloud_gateway_route_config(name, block): {
      local p = path(['azurerm_spring_cloud_gateway_route_config', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_gateway_route_config: {
              [name]: std.prune({
                filters: build.template(std.get(block, 'filters', null, true)),
                name: build.template(block.name),
                predicates: build.template(std.get(block, 'predicates', null, true)),
                protocol: build.template(block.protocol),
                spring_cloud_app_id: build.template(std.get(block, 'spring_cloud_app_id', null, true)),
                spring_cloud_gateway_id: build.template(block.spring_cloud_gateway_id),
                sso_validation_enabled: build.template(std.get(block, 'sso_validation_enabled', null, true)),
              }),
            },
          },
        },
      },
      filters: p.child('filters').out,
      id: p.child('id').out,
      name: p.child('name').out,
      predicates: p.child('predicates').out,
      protocol: p.child('protocol').out,
      spring_cloud_app_id: p.child('spring_cloud_app_id').out,
      spring_cloud_gateway_id: p.child('spring_cloud_gateway_id').out,
      sso_validation_enabled: p.child('sso_validation_enabled').out,
    },
    spring_cloud_java_deployment(name, block): {
      local p = path(['azurerm_spring_cloud_java_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_java_deployment: {
              [name]: std.prune({
                environment_variables: build.template(std.get(block, 'environment_variables', null, true)),
                instance_count: build.template(std.get(block, 'instance_count', null, true)),
                jvm_options: build.template(std.get(block, 'jvm_options', null, true)),
                name: build.template(block.name),
                runtime_version: build.template(std.get(block, 'runtime_version', null, true)),
                spring_cloud_app_id: build.template(block.spring_cloud_app_id),
              }),
            },
          },
        },
      },
      environment_variables: p.child('environment_variables').out,
      id: p.child('id').out,
      instance_count: p.child('instance_count').out,
      jvm_options: p.child('jvm_options').out,
      name: p.child('name').out,
      runtime_version: p.child('runtime_version').out,
      spring_cloud_app_id: p.child('spring_cloud_app_id').out,
    },
    spring_cloud_new_relic_application_performance_monitoring(name, block): {
      local p = path(['azurerm_spring_cloud_new_relic_application_performance_monitoring', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_new_relic_application_performance_monitoring: {
              [name]: std.prune({
                agent_enabled: build.template(std.get(block, 'agent_enabled', null, true)),
                app_name: build.template(block.app_name),
                app_server_port: build.template(std.get(block, 'app_server_port', null, true)),
                audit_mode_enabled: build.template(std.get(block, 'audit_mode_enabled', null, true)),
                auto_app_naming_enabled: build.template(std.get(block, 'auto_app_naming_enabled', null, true)),
                auto_transaction_naming_enabled: build.template(std.get(block, 'auto_transaction_naming_enabled', null, true)),
                custom_tracing_enabled: build.template(std.get(block, 'custom_tracing_enabled', null, true)),
                globally_enabled: build.template(std.get(block, 'globally_enabled', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                license_key: build.template(block.license_key),
                name: build.template(block.name),
                spring_cloud_service_id: build.template(block.spring_cloud_service_id),
              }),
            },
          },
        },
      },
      agent_enabled: p.child('agent_enabled').out,
      app_name: p.child('app_name').out,
      app_server_port: p.child('app_server_port').out,
      audit_mode_enabled: p.child('audit_mode_enabled').out,
      auto_app_naming_enabled: p.child('auto_app_naming_enabled').out,
      auto_transaction_naming_enabled: p.child('auto_transaction_naming_enabled').out,
      custom_tracing_enabled: p.child('custom_tracing_enabled').out,
      globally_enabled: p.child('globally_enabled').out,
      id: p.child('id').out,
      labels: p.child('labels').out,
      license_key: p.child('license_key').out,
      name: p.child('name').out,
      spring_cloud_service_id: p.child('spring_cloud_service_id').out,
    },
    spring_cloud_service(name, block): {
      local p = path(['azurerm_spring_cloud_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_service: {
              [name]: std.prune({
                build_agent_pool_size: build.template(std.get(block, 'build_agent_pool_size', null, true)),
                location: build.template(block.location),
                log_stream_public_endpoint_enabled: build.template(std.get(block, 'log_stream_public_endpoint_enabled', null, true)),
                managed_environment_id: build.template(std.get(block, 'managed_environment_id', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                service_registry_enabled: build.template(std.get(block, 'service_registry_enabled', null, true)),
                sku_name: build.template(std.get(block, 'sku_name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                zone_redundant: build.template(std.get(block, 'zone_redundant', null, true)),
              }),
            },
          },
        },
      },
      build_agent_pool_size: p.child('build_agent_pool_size').out,
      id: p.child('id').out,
      location: p.child('location').out,
      log_stream_public_endpoint_enabled: p.child('log_stream_public_endpoint_enabled').out,
      managed_environment_id: p.child('managed_environment_id').out,
      name: p.child('name').out,
      outbound_public_ip_addresses: p.child('outbound_public_ip_addresses').out,
      required_network_traffic_rules: p.child('required_network_traffic_rules').out,
      resource_group_name: p.child('resource_group_name').out,
      service_registry_enabled: p.child('service_registry_enabled').out,
      service_registry_id: p.child('service_registry_id').out,
      sku_name: p.child('sku_name').out,
      sku_tier: p.child('sku_tier').out,
      tags: p.child('tags').out,
      zone_redundant: p.child('zone_redundant').out,
    },
    spring_cloud_storage(name, block): {
      local p = path(['azurerm_spring_cloud_storage', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_spring_cloud_storage: {
              [name]: std.prune({
                name: build.template(block.name),
                spring_cloud_service_id: build.template(block.spring_cloud_service_id),
                storage_account_key: build.template(block.storage_account_key),
                storage_account_name: build.template(block.storage_account_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      spring_cloud_service_id: p.child('spring_cloud_service_id').out,
      storage_account_key: p.child('storage_account_key').out,
      storage_account_name: p.child('storage_account_name').out,
    },
    ssh_public_key(name, block): {
      local p = path(['azurerm_ssh_public_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_ssh_public_key: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                public_key: build.template(block.public_key),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_key: p.child('public_key').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    stack_hci_cluster(name, block): {
      local p = path(['azurerm_stack_hci_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stack_hci_cluster: {
              [name]: std.prune({
                automanage_configuration_id: build.template(std.get(block, 'automanage_configuration_id', null, true)),
                client_id: build.template(std.get(block, 'client_id', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      automanage_configuration_id: p.child('automanage_configuration_id').out,
      client_id: p.child('client_id').out,
      cloud_id: p.child('cloud_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      resource_provider_object_id: p.child('resource_provider_object_id').out,
      service_endpoint: p.child('service_endpoint').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
    },
    stack_hci_deployment_setting(name, block): {
      local p = path(['azurerm_stack_hci_deployment_setting', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stack_hci_deployment_setting: {
              [name]: std.prune({
                arc_resource_ids: build.template(block.arc_resource_ids),
                stack_hci_cluster_id: build.template(block.stack_hci_cluster_id),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      arc_resource_ids: p.child('arc_resource_ids').out,
      id: p.child('id').out,
      stack_hci_cluster_id: p.child('stack_hci_cluster_id').out,
      version: p.child('version').out,
    },
    stack_hci_extension(name, block): {
      local p = path(['azurerm_stack_hci_extension', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stack_hci_extension: {
              [name]: std.prune({
                arc_setting_id: build.template(block.arc_setting_id),
                auto_upgrade_minor_version_enabled: build.template(std.get(block, 'auto_upgrade_minor_version_enabled', null, true)),
                automatic_upgrade_enabled: build.template(std.get(block, 'automatic_upgrade_enabled', null, true)),
                name: build.template(block.name),
                protected_settings: build.template(std.get(block, 'protected_settings', null, true)),
                publisher: build.template(block.publisher),
                settings: build.template(std.get(block, 'settings', null, true)),
                type: build.template(block.type),
                type_handler_version: build.template(std.get(block, 'type_handler_version', null, true)),
              }),
            },
          },
        },
      },
      arc_setting_id: p.child('arc_setting_id').out,
      auto_upgrade_minor_version_enabled: p.child('auto_upgrade_minor_version_enabled').out,
      automatic_upgrade_enabled: p.child('automatic_upgrade_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      protected_settings: p.child('protected_settings').out,
      publisher: p.child('publisher').out,
      settings: p.child('settings').out,
      type: p.child('type').out,
      type_handler_version: p.child('type_handler_version').out,
    },
    stack_hci_logical_network(name, block): {
      local p = path(['azurerm_stack_hci_logical_network', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stack_hci_logical_network: {
              [name]: std.prune({
                custom_location_id: build.template(block.custom_location_id),
                dns_servers: build.template(std.get(block, 'dns_servers', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_switch_name: build.template(block.virtual_switch_name),
              }),
            },
          },
        },
      },
      custom_location_id: p.child('custom_location_id').out,
      dns_servers: p.child('dns_servers').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      virtual_switch_name: p.child('virtual_switch_name').out,
    },
    stack_hci_marketplace_gallery_image(name, block): {
      local p = path(['azurerm_stack_hci_marketplace_gallery_image', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stack_hci_marketplace_gallery_image: {
              [name]: std.prune({
                custom_location_id: build.template(block.custom_location_id),
                hyperv_generation: build.template(block.hyperv_generation),
                location: build.template(block.location),
                name: build.template(block.name),
                os_type: build.template(block.os_type),
                resource_group_name: build.template(block.resource_group_name),
                storage_path_id: build.template(std.get(block, 'storage_path_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      custom_location_id: p.child('custom_location_id').out,
      hyperv_generation: p.child('hyperv_generation').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      os_type: p.child('os_type').out,
      resource_group_name: p.child('resource_group_name').out,
      storage_path_id: p.child('storage_path_id').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    stack_hci_storage_path(name, block): {
      local p = path(['azurerm_stack_hci_storage_path', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stack_hci_storage_path: {
              [name]: std.prune({
                custom_location_id: build.template(block.custom_location_id),
                location: build.template(block.location),
                name: build.template(block.name),
                path: build.template(block.path),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      custom_location_id: p.child('custom_location_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      path: p.child('path').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    stack_hci_virtual_hard_disk(name, block): {
      local p = path(['azurerm_stack_hci_virtual_hard_disk', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stack_hci_virtual_hard_disk: {
              [name]: std.prune({
                block_size_in_bytes: build.template(std.get(block, 'block_size_in_bytes', null, true)),
                custom_location_id: build.template(block.custom_location_id),
                disk_file_format: build.template(std.get(block, 'disk_file_format', null, true)),
                disk_size_in_gb: build.template(block.disk_size_in_gb),
                dynamic_enabled: build.template(std.get(block, 'dynamic_enabled', null, true)),
                hyperv_generation: build.template(std.get(block, 'hyperv_generation', null, true)),
                location: build.template(block.location),
                logical_sector_in_bytes: build.template(std.get(block, 'logical_sector_in_bytes', null, true)),
                name: build.template(block.name),
                physical_sector_in_bytes: build.template(std.get(block, 'physical_sector_in_bytes', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                storage_path_id: build.template(std.get(block, 'storage_path_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      block_size_in_bytes: p.child('block_size_in_bytes').out,
      custom_location_id: p.child('custom_location_id').out,
      disk_file_format: p.child('disk_file_format').out,
      disk_size_in_gb: p.child('disk_size_in_gb').out,
      dynamic_enabled: p.child('dynamic_enabled').out,
      hyperv_generation: p.child('hyperv_generation').out,
      id: p.child('id').out,
      location: p.child('location').out,
      logical_sector_in_bytes: p.child('logical_sector_in_bytes').out,
      name: p.child('name').out,
      physical_sector_in_bytes: p.child('physical_sector_in_bytes').out,
      resource_group_name: p.child('resource_group_name').out,
      storage_path_id: p.child('storage_path_id').out,
      tags: p.child('tags').out,
    },
    static_site(name, block): {
      local p = path(['azurerm_static_site', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_static_site: {
              [name]: std.prune({
                app_settings: build.template(std.get(block, 'app_settings', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_size: build.template(std.get(block, 'sku_size', null, true)),
                sku_tier: build.template(std.get(block, 'sku_tier', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      api_key: p.child('api_key').out,
      app_settings: p.child('app_settings').out,
      default_host_name: p.child('default_host_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_size: p.child('sku_size').out,
      sku_tier: p.child('sku_tier').out,
      tags: p.child('tags').out,
    },
    static_site_custom_domain(name, block): {
      local p = path(['azurerm_static_site_custom_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_static_site_custom_domain: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                static_site_id: build.template(block.static_site_id),
                validation_type: build.template(std.get(block, 'validation_type', null, true)),
              }),
            },
          },
        },
      },
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      static_site_id: p.child('static_site_id').out,
      validation_token: p.child('validation_token').out,
      validation_type: p.child('validation_type').out,
    },
    static_web_app(name, block): {
      local p = path(['azurerm_static_web_app', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_static_web_app: {
              [name]: std.prune({
                app_settings: build.template(std.get(block, 'app_settings', null, true)),
                configuration_file_changes_enabled: build.template(std.get(block, 'configuration_file_changes_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                preview_environments_enabled: build.template(std.get(block, 'preview_environments_enabled', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku_size: build.template(std.get(block, 'sku_size', null, true)),
                sku_tier: build.template(std.get(block, 'sku_tier', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      api_key: p.child('api_key').out,
      app_settings: p.child('app_settings').out,
      configuration_file_changes_enabled: p.child('configuration_file_changes_enabled').out,
      default_host_name: p.child('default_host_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      preview_environments_enabled: p.child('preview_environments_enabled').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_size: p.child('sku_size').out,
      sku_tier: p.child('sku_tier').out,
      tags: p.child('tags').out,
    },
    static_web_app_custom_domain(name, block): {
      local p = path(['azurerm_static_web_app_custom_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_static_web_app_custom_domain: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                static_web_app_id: build.template(block.static_web_app_id),
                validation_type: build.template(block.validation_type),
              }),
            },
          },
        },
      },
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      static_web_app_id: p.child('static_web_app_id').out,
      validation_token: p.child('validation_token').out,
      validation_type: p.child('validation_type').out,
    },
    static_web_app_function_app_registration(name, block): {
      local p = path(['azurerm_static_web_app_function_app_registration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_static_web_app_function_app_registration: {
              [name]: std.prune({
                function_app_id: build.template(block.function_app_id),
                static_web_app_id: build.template(block.static_web_app_id),
              }),
            },
          },
        },
      },
      function_app_id: p.child('function_app_id').out,
      id: p.child('id').out,
      static_web_app_id: p.child('static_web_app_id').out,
    },
    storage_account(name, block): {
      local p = path(['azurerm_storage_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_account: {
              [name]: std.prune({
                account_kind: build.template(std.get(block, 'account_kind', null, true)),
                account_replication_type: build.template(block.account_replication_type),
                account_tier: build.template(block.account_tier),
                allow_nested_items_to_be_public: build.template(std.get(block, 'allow_nested_items_to_be_public', null, true)),
                allowed_copy_scope: build.template(std.get(block, 'allowed_copy_scope', null, true)),
                cross_tenant_replication_enabled: build.template(std.get(block, 'cross_tenant_replication_enabled', null, true)),
                default_to_oauth_authentication: build.template(std.get(block, 'default_to_oauth_authentication', null, true)),
                dns_endpoint_type: build.template(std.get(block, 'dns_endpoint_type', null, true)),
                edge_zone: build.template(std.get(block, 'edge_zone', null, true)),
                https_traffic_only_enabled: build.template(std.get(block, 'https_traffic_only_enabled', null, true)),
                infrastructure_encryption_enabled: build.template(std.get(block, 'infrastructure_encryption_enabled', null, true)),
                is_hns_enabled: build.template(std.get(block, 'is_hns_enabled', null, true)),
                local_user_enabled: build.template(std.get(block, 'local_user_enabled', null, true)),
                location: build.template(block.location),
                min_tls_version: build.template(std.get(block, 'min_tls_version', null, true)),
                name: build.template(block.name),
                nfsv3_enabled: build.template(std.get(block, 'nfsv3_enabled', null, true)),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                queue_encryption_key_type: build.template(std.get(block, 'queue_encryption_key_type', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sftp_enabled: build.template(std.get(block, 'sftp_enabled', null, true)),
                shared_access_key_enabled: build.template(std.get(block, 'shared_access_key_enabled', null, true)),
                table_encryption_key_type: build.template(std.get(block, 'table_encryption_key_type', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_tier: p.child('access_tier').out,
      account_kind: p.child('account_kind').out,
      account_replication_type: p.child('account_replication_type').out,
      account_tier: p.child('account_tier').out,
      allow_nested_items_to_be_public: p.child('allow_nested_items_to_be_public').out,
      allowed_copy_scope: p.child('allowed_copy_scope').out,
      cross_tenant_replication_enabled: p.child('cross_tenant_replication_enabled').out,
      default_to_oauth_authentication: p.child('default_to_oauth_authentication').out,
      dns_endpoint_type: p.child('dns_endpoint_type').out,
      edge_zone: p.child('edge_zone').out,
      https_traffic_only_enabled: p.child('https_traffic_only_enabled').out,
      id: p.child('id').out,
      infrastructure_encryption_enabled: p.child('infrastructure_encryption_enabled').out,
      is_hns_enabled: p.child('is_hns_enabled').out,
      large_file_share_enabled: p.child('large_file_share_enabled').out,
      local_user_enabled: p.child('local_user_enabled').out,
      location: p.child('location').out,
      min_tls_version: p.child('min_tls_version').out,
      name: p.child('name').out,
      nfsv3_enabled: p.child('nfsv3_enabled').out,
      primary_access_key: p.child('primary_access_key').out,
      primary_blob_connection_string: p.child('primary_blob_connection_string').out,
      primary_blob_endpoint: p.child('primary_blob_endpoint').out,
      primary_blob_host: p.child('primary_blob_host').out,
      primary_blob_internet_endpoint: p.child('primary_blob_internet_endpoint').out,
      primary_blob_internet_host: p.child('primary_blob_internet_host').out,
      primary_blob_microsoft_endpoint: p.child('primary_blob_microsoft_endpoint').out,
      primary_blob_microsoft_host: p.child('primary_blob_microsoft_host').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_dfs_endpoint: p.child('primary_dfs_endpoint').out,
      primary_dfs_host: p.child('primary_dfs_host').out,
      primary_dfs_internet_endpoint: p.child('primary_dfs_internet_endpoint').out,
      primary_dfs_internet_host: p.child('primary_dfs_internet_host').out,
      primary_dfs_microsoft_endpoint: p.child('primary_dfs_microsoft_endpoint').out,
      primary_dfs_microsoft_host: p.child('primary_dfs_microsoft_host').out,
      primary_file_endpoint: p.child('primary_file_endpoint').out,
      primary_file_host: p.child('primary_file_host').out,
      primary_file_internet_endpoint: p.child('primary_file_internet_endpoint').out,
      primary_file_internet_host: p.child('primary_file_internet_host').out,
      primary_file_microsoft_endpoint: p.child('primary_file_microsoft_endpoint').out,
      primary_file_microsoft_host: p.child('primary_file_microsoft_host').out,
      primary_location: p.child('primary_location').out,
      primary_queue_endpoint: p.child('primary_queue_endpoint').out,
      primary_queue_host: p.child('primary_queue_host').out,
      primary_queue_microsoft_endpoint: p.child('primary_queue_microsoft_endpoint').out,
      primary_queue_microsoft_host: p.child('primary_queue_microsoft_host').out,
      primary_table_endpoint: p.child('primary_table_endpoint').out,
      primary_table_host: p.child('primary_table_host').out,
      primary_table_microsoft_endpoint: p.child('primary_table_microsoft_endpoint').out,
      primary_table_microsoft_host: p.child('primary_table_microsoft_host').out,
      primary_web_endpoint: p.child('primary_web_endpoint').out,
      primary_web_host: p.child('primary_web_host').out,
      primary_web_internet_endpoint: p.child('primary_web_internet_endpoint').out,
      primary_web_internet_host: p.child('primary_web_internet_host').out,
      primary_web_microsoft_endpoint: p.child('primary_web_microsoft_endpoint').out,
      primary_web_microsoft_host: p.child('primary_web_microsoft_host').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      queue_encryption_key_type: p.child('queue_encryption_key_type').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      secondary_blob_connection_string: p.child('secondary_blob_connection_string').out,
      secondary_blob_endpoint: p.child('secondary_blob_endpoint').out,
      secondary_blob_host: p.child('secondary_blob_host').out,
      secondary_blob_internet_endpoint: p.child('secondary_blob_internet_endpoint').out,
      secondary_blob_internet_host: p.child('secondary_blob_internet_host').out,
      secondary_blob_microsoft_endpoint: p.child('secondary_blob_microsoft_endpoint').out,
      secondary_blob_microsoft_host: p.child('secondary_blob_microsoft_host').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_dfs_endpoint: p.child('secondary_dfs_endpoint').out,
      secondary_dfs_host: p.child('secondary_dfs_host').out,
      secondary_dfs_internet_endpoint: p.child('secondary_dfs_internet_endpoint').out,
      secondary_dfs_internet_host: p.child('secondary_dfs_internet_host').out,
      secondary_dfs_microsoft_endpoint: p.child('secondary_dfs_microsoft_endpoint').out,
      secondary_dfs_microsoft_host: p.child('secondary_dfs_microsoft_host').out,
      secondary_file_endpoint: p.child('secondary_file_endpoint').out,
      secondary_file_host: p.child('secondary_file_host').out,
      secondary_file_internet_endpoint: p.child('secondary_file_internet_endpoint').out,
      secondary_file_internet_host: p.child('secondary_file_internet_host').out,
      secondary_file_microsoft_endpoint: p.child('secondary_file_microsoft_endpoint').out,
      secondary_file_microsoft_host: p.child('secondary_file_microsoft_host').out,
      secondary_location: p.child('secondary_location').out,
      secondary_queue_endpoint: p.child('secondary_queue_endpoint').out,
      secondary_queue_host: p.child('secondary_queue_host').out,
      secondary_queue_microsoft_endpoint: p.child('secondary_queue_microsoft_endpoint').out,
      secondary_queue_microsoft_host: p.child('secondary_queue_microsoft_host').out,
      secondary_table_endpoint: p.child('secondary_table_endpoint').out,
      secondary_table_host: p.child('secondary_table_host').out,
      secondary_table_microsoft_endpoint: p.child('secondary_table_microsoft_endpoint').out,
      secondary_table_microsoft_host: p.child('secondary_table_microsoft_host').out,
      secondary_web_endpoint: p.child('secondary_web_endpoint').out,
      secondary_web_host: p.child('secondary_web_host').out,
      secondary_web_internet_endpoint: p.child('secondary_web_internet_endpoint').out,
      secondary_web_internet_host: p.child('secondary_web_internet_host').out,
      secondary_web_microsoft_endpoint: p.child('secondary_web_microsoft_endpoint').out,
      secondary_web_microsoft_host: p.child('secondary_web_microsoft_host').out,
      sftp_enabled: p.child('sftp_enabled').out,
      shared_access_key_enabled: p.child('shared_access_key_enabled').out,
      table_encryption_key_type: p.child('table_encryption_key_type').out,
      tags: p.child('tags').out,
    },
    storage_account_customer_managed_key(name, block): {
      local p = path(['azurerm_storage_account_customer_managed_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_account_customer_managed_key: {
              [name]: std.prune({
                federated_identity_client_id: build.template(std.get(block, 'federated_identity_client_id', null, true)),
                key_name: build.template(block.key_name),
                key_vault_id: build.template(std.get(block, 'key_vault_id', null, true)),
                key_version: build.template(std.get(block, 'key_version', null, true)),
                managed_hsm_key_id: build.template(std.get(block, 'managed_hsm_key_id', null, true)),
                storage_account_id: build.template(block.storage_account_id),
                user_assigned_identity_id: build.template(std.get(block, 'user_assigned_identity_id', null, true)),
              }),
            },
          },
        },
      },
      federated_identity_client_id: p.child('federated_identity_client_id').out,
      id: p.child('id').out,
      key_name: p.child('key_name').out,
      key_vault_id: p.child('key_vault_id').out,
      key_vault_uri: p.child('key_vault_uri').out,
      key_version: p.child('key_version').out,
      managed_hsm_key_id: p.child('managed_hsm_key_id').out,
      storage_account_id: p.child('storage_account_id').out,
      user_assigned_identity_id: p.child('user_assigned_identity_id').out,
    },
    storage_account_local_user(name, block): {
      local p = path(['azurerm_storage_account_local_user', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_account_local_user: {
              [name]: std.prune({
                home_directory: build.template(std.get(block, 'home_directory', null, true)),
                name: build.template(block.name),
                ssh_key_enabled: build.template(std.get(block, 'ssh_key_enabled', null, true)),
                ssh_password_enabled: build.template(std.get(block, 'ssh_password_enabled', null, true)),
                storage_account_id: build.template(block.storage_account_id),
              }),
            },
          },
        },
      },
      home_directory: p.child('home_directory').out,
      id: p.child('id').out,
      name: p.child('name').out,
      password: p.child('password').out,
      sid: p.child('sid').out,
      ssh_key_enabled: p.child('ssh_key_enabled').out,
      ssh_password_enabled: p.child('ssh_password_enabled').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    storage_account_network_rules(name, block): {
      local p = path(['azurerm_storage_account_network_rules', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_account_network_rules: {
              [name]: std.prune({
                default_action: build.template(block.default_action),
                ip_rules: build.template(std.get(block, 'ip_rules', null, true)),
                storage_account_id: build.template(block.storage_account_id),
                virtual_network_subnet_ids: build.template(std.get(block, 'virtual_network_subnet_ids', null, true)),
              }),
            },
          },
        },
      },
      bypass: p.child('bypass').out,
      default_action: p.child('default_action').out,
      id: p.child('id').out,
      ip_rules: p.child('ip_rules').out,
      storage_account_id: p.child('storage_account_id').out,
      virtual_network_subnet_ids: p.child('virtual_network_subnet_ids').out,
    },
    storage_blob(name, block): {
      local p = path(['azurerm_storage_blob', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_blob: {
              [name]: std.prune({
                cache_control: build.template(std.get(block, 'cache_control', null, true)),
                content_md5: build.template(std.get(block, 'content_md5', null, true)),
                content_type: build.template(std.get(block, 'content_type', null, true)),
                encryption_scope: build.template(std.get(block, 'encryption_scope', null, true)),
                name: build.template(block.name),
                parallelism: build.template(std.get(block, 'parallelism', null, true)),
                size: build.template(std.get(block, 'size', null, true)),
                source: build.template(std.get(block, 'source', null, true)),
                source_content: build.template(std.get(block, 'source_content', null, true)),
                source_uri: build.template(std.get(block, 'source_uri', null, true)),
                storage_account_name: build.template(block.storage_account_name),
                storage_container_name: build.template(block.storage_container_name),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      access_tier: p.child('access_tier').out,
      cache_control: p.child('cache_control').out,
      content_md5: p.child('content_md5').out,
      content_type: p.child('content_type').out,
      encryption_scope: p.child('encryption_scope').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      parallelism: p.child('parallelism').out,
      size: p.child('size').out,
      source: p.child('source').out,
      source_content: p.child('source_content').out,
      source_uri: p.child('source_uri').out,
      storage_account_name: p.child('storage_account_name').out,
      storage_container_name: p.child('storage_container_name').out,
      type: p.child('type').out,
      url: p.child('url').out,
    },
    storage_blob_inventory_policy(name, block): {
      local p = path(['azurerm_storage_blob_inventory_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_blob_inventory_policy: {
              [name]: std.prune({
                storage_account_id: build.template(block.storage_account_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    storage_container(name, block): {
      local p = path(['azurerm_storage_container', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_container: {
              [name]: std.prune({
                container_access_type: build.template(std.get(block, 'container_access_type', null, true)),
                encryption_scope_override_enabled: build.template(std.get(block, 'encryption_scope_override_enabled', null, true)),
                name: build.template(block.name),
                storage_account_name: build.template(block.storage_account_name),
              }),
            },
          },
        },
      },
      container_access_type: p.child('container_access_type').out,
      default_encryption_scope: p.child('default_encryption_scope').out,
      encryption_scope_override_enabled: p.child('encryption_scope_override_enabled').out,
      has_immutability_policy: p.child('has_immutability_policy').out,
      has_legal_hold: p.child('has_legal_hold').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      resource_manager_id: p.child('resource_manager_id').out,
      storage_account_name: p.child('storage_account_name').out,
    },
    storage_container_immutability_policy(name, block): {
      local p = path(['azurerm_storage_container_immutability_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_container_immutability_policy: {
              [name]: std.prune({
                immutability_period_in_days: build.template(block.immutability_period_in_days),
                locked: build.template(std.get(block, 'locked', null, true)),
                protected_append_writes_all_enabled: build.template(std.get(block, 'protected_append_writes_all_enabled', null, true)),
                protected_append_writes_enabled: build.template(std.get(block, 'protected_append_writes_enabled', null, true)),
                storage_container_resource_manager_id: build.template(block.storage_container_resource_manager_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      immutability_period_in_days: p.child('immutability_period_in_days').out,
      locked: p.child('locked').out,
      protected_append_writes_all_enabled: p.child('protected_append_writes_all_enabled').out,
      protected_append_writes_enabled: p.child('protected_append_writes_enabled').out,
      storage_container_resource_manager_id: p.child('storage_container_resource_manager_id').out,
    },
    storage_data_lake_gen2_filesystem(name, block): {
      local p = path(['azurerm_storage_data_lake_gen2_filesystem', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_data_lake_gen2_filesystem: {
              [name]: std.prune({
                name: build.template(block.name),
                properties: build.template(std.get(block, 'properties', null, true)),
                storage_account_id: build.template(block.storage_account_id),
              }),
            },
          },
        },
      },
      default_encryption_scope: p.child('default_encryption_scope').out,
      group: p.child('group').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      properties: p.child('properties').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    storage_data_lake_gen2_path(name, block): {
      local p = path(['azurerm_storage_data_lake_gen2_path', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_data_lake_gen2_path: {
              [name]: std.prune({
                filesystem_name: build.template(block.filesystem_name),
                path: build.template(block.path),
                resource: build.template(block.resource),
                storage_account_id: build.template(block.storage_account_id),
              }),
            },
          },
        },
      },
      filesystem_name: p.child('filesystem_name').out,
      group: p.child('group').out,
      id: p.child('id').out,
      owner: p.child('owner').out,
      path: p.child('path').out,
      resource: p.child('resource').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    storage_encryption_scope(name, block): {
      local p = path(['azurerm_storage_encryption_scope', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_encryption_scope: {
              [name]: std.prune({
                infrastructure_encryption_required: build.template(std.get(block, 'infrastructure_encryption_required', null, true)),
                key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null, true)),
                name: build.template(block.name),
                source: build.template(block.source),
                storage_account_id: build.template(block.storage_account_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      infrastructure_encryption_required: p.child('infrastructure_encryption_required').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      name: p.child('name').out,
      source: p.child('source').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    storage_management_policy(name, block): {
      local p = path(['azurerm_storage_management_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_management_policy: {
              [name]: std.prune({
                storage_account_id: build.template(block.storage_account_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    storage_mover(name, block): {
      local p = path(['azurerm_storage_mover', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_mover: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    storage_mover_agent(name, block): {
      local p = path(['azurerm_storage_mover_agent', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_mover_agent: {
              [name]: std.prune({
                arc_virtual_machine_id: build.template(block.arc_virtual_machine_id),
                arc_virtual_machine_uuid: build.template(block.arc_virtual_machine_uuid),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                storage_mover_id: build.template(block.storage_mover_id),
              }),
            },
          },
        },
      },
      arc_virtual_machine_id: p.child('arc_virtual_machine_id').out,
      arc_virtual_machine_uuid: p.child('arc_virtual_machine_uuid').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      storage_mover_id: p.child('storage_mover_id').out,
    },
    storage_mover_job_definition(name, block): {
      local p = path(['azurerm_storage_mover_job_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_mover_job_definition: {
              [name]: std.prune({
                agent_name: build.template(std.get(block, 'agent_name', null, true)),
                copy_mode: build.template(block.copy_mode),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                source_name: build.template(block.source_name),
                source_sub_path: build.template(std.get(block, 'source_sub_path', null, true)),
                storage_mover_project_id: build.template(block.storage_mover_project_id),
                target_name: build.template(block.target_name),
                target_sub_path: build.template(std.get(block, 'target_sub_path', null, true)),
              }),
            },
          },
        },
      },
      agent_name: p.child('agent_name').out,
      copy_mode: p.child('copy_mode').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      source_name: p.child('source_name').out,
      source_sub_path: p.child('source_sub_path').out,
      storage_mover_project_id: p.child('storage_mover_project_id').out,
      target_name: p.child('target_name').out,
      target_sub_path: p.child('target_sub_path').out,
    },
    storage_mover_project(name, block): {
      local p = path(['azurerm_storage_mover_project', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_mover_project: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                storage_mover_id: build.template(block.storage_mover_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      storage_mover_id: p.child('storage_mover_id').out,
    },
    storage_mover_source_endpoint(name, block): {
      local p = path(['azurerm_storage_mover_source_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_mover_source_endpoint: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                export: build.template(std.get(block, 'export', null, true)),
                host: build.template(block.host),
                name: build.template(block.name),
                nfs_version: build.template(std.get(block, 'nfs_version', null, true)),
                storage_mover_id: build.template(block.storage_mover_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      export: p.child('export').out,
      host: p.child('host').out,
      id: p.child('id').out,
      name: p.child('name').out,
      nfs_version: p.child('nfs_version').out,
      storage_mover_id: p.child('storage_mover_id').out,
    },
    storage_mover_target_endpoint(name, block): {
      local p = path(['azurerm_storage_mover_target_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_mover_target_endpoint: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                storage_account_id: build.template(block.storage_account_id),
                storage_container_name: build.template(block.storage_container_name),
                storage_mover_id: build.template(block.storage_mover_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      storage_account_id: p.child('storage_account_id').out,
      storage_container_name: p.child('storage_container_name').out,
      storage_mover_id: p.child('storage_mover_id').out,
    },
    storage_object_replication(name, block): {
      local p = path(['azurerm_storage_object_replication', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_object_replication: {
              [name]: std.prune({
                destination_storage_account_id: build.template(block.destination_storage_account_id),
                source_storage_account_id: build.template(block.source_storage_account_id),
              }),
            },
          },
        },
      },
      destination_object_replication_id: p.child('destination_object_replication_id').out,
      destination_storage_account_id: p.child('destination_storage_account_id').out,
      id: p.child('id').out,
      source_object_replication_id: p.child('source_object_replication_id').out,
      source_storage_account_id: p.child('source_storage_account_id').out,
    },
    storage_queue(name, block): {
      local p = path(['azurerm_storage_queue', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_queue: {
              [name]: std.prune({
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                storage_account_name: build.template(block.storage_account_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      resource_manager_id: p.child('resource_manager_id').out,
      storage_account_name: p.child('storage_account_name').out,
    },
    storage_share(name, block): {
      local p = path(['azurerm_storage_share', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_share: {
              [name]: std.prune({
                enabled_protocol: build.template(std.get(block, 'enabled_protocol', null, true)),
                name: build.template(block.name),
                quota: build.template(block.quota),
                storage_account_name: build.template(block.storage_account_name),
              }),
            },
          },
        },
      },
      access_tier: p.child('access_tier').out,
      enabled_protocol: p.child('enabled_protocol').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      quota: p.child('quota').out,
      resource_manager_id: p.child('resource_manager_id').out,
      storage_account_name: p.child('storage_account_name').out,
      url: p.child('url').out,
    },
    storage_share_directory(name, block): {
      local p = path(['azurerm_storage_share_directory', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_share_directory: {
              [name]: std.prune({
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                storage_share_id: build.template(block.storage_share_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      storage_share_id: p.child('storage_share_id').out,
    },
    storage_share_file(name, block): {
      local p = path(['azurerm_storage_share_file', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_share_file: {
              [name]: std.prune({
                content_disposition: build.template(std.get(block, 'content_disposition', null, true)),
                content_encoding: build.template(std.get(block, 'content_encoding', null, true)),
                content_md5: build.template(std.get(block, 'content_md5', null, true)),
                content_type: build.template(std.get(block, 'content_type', null, true)),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                name: build.template(block.name),
                path: build.template(std.get(block, 'path', null, true)),
                source: build.template(std.get(block, 'source', null, true)),
                storage_share_id: build.template(block.storage_share_id),
              }),
            },
          },
        },
      },
      content_disposition: p.child('content_disposition').out,
      content_encoding: p.child('content_encoding').out,
      content_length: p.child('content_length').out,
      content_md5: p.child('content_md5').out,
      content_type: p.child('content_type').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      path: p.child('path').out,
      source: p.child('source').out,
      storage_share_id: p.child('storage_share_id').out,
    },
    storage_sync(name, block): {
      local p = path(['azurerm_storage_sync', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_sync: {
              [name]: std.prune({
                incoming_traffic_policy: build.template(std.get(block, 'incoming_traffic_policy', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      incoming_traffic_policy: p.child('incoming_traffic_policy').out,
      location: p.child('location').out,
      name: p.child('name').out,
      registered_servers: p.child('registered_servers').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    storage_sync_cloud_endpoint(name, block): {
      local p = path(['azurerm_storage_sync_cloud_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_sync_cloud_endpoint: {
              [name]: std.prune({
                file_share_name: build.template(block.file_share_name),
                name: build.template(block.name),
                storage_account_id: build.template(block.storage_account_id),
                storage_sync_group_id: build.template(block.storage_sync_group_id),
              }),
            },
          },
        },
      },
      file_share_name: p.child('file_share_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      storage_account_id: p.child('storage_account_id').out,
      storage_account_tenant_id: p.child('storage_account_tenant_id').out,
      storage_sync_group_id: p.child('storage_sync_group_id').out,
    },
    storage_sync_group(name, block): {
      local p = path(['azurerm_storage_sync_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_sync_group: {
              [name]: std.prune({
                name: build.template(block.name),
                storage_sync_id: build.template(block.storage_sync_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      storage_sync_id: p.child('storage_sync_id').out,
    },
    storage_sync_server_endpoint(name, block): {
      local p = path(['azurerm_storage_sync_server_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_sync_server_endpoint: {
              [name]: std.prune({
                cloud_tiering_enabled: build.template(std.get(block, 'cloud_tiering_enabled', null, true)),
                initial_download_policy: build.template(std.get(block, 'initial_download_policy', null, true)),
                local_cache_mode: build.template(std.get(block, 'local_cache_mode', null, true)),
                name: build.template(block.name),
                registered_server_id: build.template(block.registered_server_id),
                server_local_path: build.template(block.server_local_path),
                storage_sync_group_id: build.template(block.storage_sync_group_id),
                tier_files_older_than_days: build.template(std.get(block, 'tier_files_older_than_days', null, true)),
                volume_free_space_percent: build.template(std.get(block, 'volume_free_space_percent', null, true)),
              }),
            },
          },
        },
      },
      cloud_tiering_enabled: p.child('cloud_tiering_enabled').out,
      id: p.child('id').out,
      initial_download_policy: p.child('initial_download_policy').out,
      local_cache_mode: p.child('local_cache_mode').out,
      name: p.child('name').out,
      registered_server_id: p.child('registered_server_id').out,
      server_local_path: p.child('server_local_path').out,
      storage_sync_group_id: p.child('storage_sync_group_id').out,
      tier_files_older_than_days: p.child('tier_files_older_than_days').out,
      volume_free_space_percent: p.child('volume_free_space_percent').out,
    },
    storage_table(name, block): {
      local p = path(['azurerm_storage_table', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_table: {
              [name]: std.prune({
                name: build.template(block.name),
                storage_account_name: build.template(block.storage_account_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      storage_account_name: p.child('storage_account_name').out,
    },
    storage_table_entity(name, block): {
      local p = path(['azurerm_storage_table_entity', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_storage_table_entity: {
              [name]: std.prune({
                entity: build.template(block.entity),
                partition_key: build.template(block.partition_key),
                row_key: build.template(block.row_key),
                storage_table_id: build.template(block.storage_table_id),
              }),
            },
          },
        },
      },
      entity: p.child('entity').out,
      id: p.child('id').out,
      partition_key: p.child('partition_key').out,
      row_key: p.child('row_key').out,
      storage_table_id: p.child('storage_table_id').out,
    },
    stream_analytics_cluster(name, block): {
      local p = path(['azurerm_stream_analytics_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_cluster: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                streaming_capacity: build.template(block.streaming_capacity),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      streaming_capacity: p.child('streaming_capacity').out,
      tags: p.child('tags').out,
    },
    stream_analytics_function_javascript_uda(name, block): {
      local p = path(['azurerm_stream_analytics_function_javascript_uda', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_function_javascript_uda: {
              [name]: std.prune({
                name: build.template(block.name),
                script: build.template(block.script),
                stream_analytics_job_id: build.template(block.stream_analytics_job_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      script: p.child('script').out,
      stream_analytics_job_id: p.child('stream_analytics_job_id').out,
    },
    stream_analytics_function_javascript_udf(name, block): {
      local p = path(['azurerm_stream_analytics_function_javascript_udf', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_function_javascript_udf: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                script: build.template(block.script),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      script: p.child('script').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
    },
    stream_analytics_job(name, block): {
      local p = path(['azurerm_stream_analytics_job', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_job: {
              [name]: std.prune({
                content_storage_policy: build.template(std.get(block, 'content_storage_policy', null, true)),
                data_locale: build.template(std.get(block, 'data_locale', null, true)),
                events_late_arrival_max_delay_in_seconds: build.template(std.get(block, 'events_late_arrival_max_delay_in_seconds', null, true)),
                events_out_of_order_max_delay_in_seconds: build.template(std.get(block, 'events_out_of_order_max_delay_in_seconds', null, true)),
                events_out_of_order_policy: build.template(std.get(block, 'events_out_of_order_policy', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                output_error_policy: build.template(std.get(block, 'output_error_policy', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(std.get(block, 'sku_name', null, true)),
                stream_analytics_cluster_id: build.template(std.get(block, 'stream_analytics_cluster_id', null, true)),
                streaming_units: build.template(std.get(block, 'streaming_units', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                transformation_query: build.template(block.transformation_query),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      compatibility_level: p.child('compatibility_level').out,
      content_storage_policy: p.child('content_storage_policy').out,
      data_locale: p.child('data_locale').out,
      events_late_arrival_max_delay_in_seconds: p.child('events_late_arrival_max_delay_in_seconds').out,
      events_out_of_order_max_delay_in_seconds: p.child('events_out_of_order_max_delay_in_seconds').out,
      events_out_of_order_policy: p.child('events_out_of_order_policy').out,
      id: p.child('id').out,
      job_id: p.child('job_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      output_error_policy: p.child('output_error_policy').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      stream_analytics_cluster_id: p.child('stream_analytics_cluster_id').out,
      streaming_units: p.child('streaming_units').out,
      tags: p.child('tags').out,
      transformation_query: p.child('transformation_query').out,
      type: p.child('type').out,
    },
    stream_analytics_job_schedule(name, block): {
      local p = path(['azurerm_stream_analytics_job_schedule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_job_schedule: {
              [name]: std.prune({
                start_mode: build.template(block.start_mode),
                stream_analytics_job_id: build.template(block.stream_analytics_job_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      last_output_time: p.child('last_output_time').out,
      start_mode: p.child('start_mode').out,
      start_time: p.child('start_time').out,
      stream_analytics_job_id: p.child('stream_analytics_job_id').out,
    },
    stream_analytics_managed_private_endpoint(name, block): {
      local p = path(['azurerm_stream_analytics_managed_private_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_managed_private_endpoint: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                stream_analytics_cluster_name: build.template(block.stream_analytics_cluster_name),
                subresource_name: build.template(block.subresource_name),
                target_resource_id: build.template(block.target_resource_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      stream_analytics_cluster_name: p.child('stream_analytics_cluster_name').out,
      subresource_name: p.child('subresource_name').out,
      target_resource_id: p.child('target_resource_id').out,
    },
    stream_analytics_output_blob(name, block): {
      local p = path(['azurerm_stream_analytics_output_blob', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_output_blob: {
              [name]: std.prune({
                authentication_mode: build.template(std.get(block, 'authentication_mode', null, true)),
                batch_max_wait_time: build.template(std.get(block, 'batch_max_wait_time', null, true)),
                batch_min_rows: build.template(std.get(block, 'batch_min_rows', null, true)),
                blob_write_mode: build.template(std.get(block, 'blob_write_mode', null, true)),
                date_format: build.template(block.date_format),
                name: build.template(block.name),
                path_pattern: build.template(block.path_pattern),
                resource_group_name: build.template(block.resource_group_name),
                storage_account_key: build.template(std.get(block, 'storage_account_key', null, true)),
                storage_account_name: build.template(block.storage_account_name),
                storage_container_name: build.template(block.storage_container_name),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
                time_format: build.template(block.time_format),
              }),
            },
          },
        },
      },
      authentication_mode: p.child('authentication_mode').out,
      batch_max_wait_time: p.child('batch_max_wait_time').out,
      batch_min_rows: p.child('batch_min_rows').out,
      blob_write_mode: p.child('blob_write_mode').out,
      date_format: p.child('date_format').out,
      id: p.child('id').out,
      name: p.child('name').out,
      path_pattern: p.child('path_pattern').out,
      resource_group_name: p.child('resource_group_name').out,
      storage_account_key: p.child('storage_account_key').out,
      storage_account_name: p.child('storage_account_name').out,
      storage_container_name: p.child('storage_container_name').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
      time_format: p.child('time_format').out,
    },
    stream_analytics_output_cosmosdb(name, block): {
      local p = path(['azurerm_stream_analytics_output_cosmosdb', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_output_cosmosdb: {
              [name]: std.prune({
                container_name: build.template(block.container_name),
                cosmosdb_account_key: build.template(block.cosmosdb_account_key),
                cosmosdb_sql_database_id: build.template(block.cosmosdb_sql_database_id),
                document_id: build.template(std.get(block, 'document_id', null, true)),
                name: build.template(block.name),
                partition_key: build.template(std.get(block, 'partition_key', null, true)),
                stream_analytics_job_id: build.template(block.stream_analytics_job_id),
              }),
            },
          },
        },
      },
      container_name: p.child('container_name').out,
      cosmosdb_account_key: p.child('cosmosdb_account_key').out,
      cosmosdb_sql_database_id: p.child('cosmosdb_sql_database_id').out,
      document_id: p.child('document_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      partition_key: p.child('partition_key').out,
      stream_analytics_job_id: p.child('stream_analytics_job_id').out,
    },
    stream_analytics_output_eventhub(name, block): {
      local p = path(['azurerm_stream_analytics_output_eventhub', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_output_eventhub: {
              [name]: std.prune({
                authentication_mode: build.template(std.get(block, 'authentication_mode', null, true)),
                eventhub_name: build.template(block.eventhub_name),
                name: build.template(block.name),
                partition_key: build.template(std.get(block, 'partition_key', null, true)),
                property_columns: build.template(std.get(block, 'property_columns', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                servicebus_namespace: build.template(block.servicebus_namespace),
                shared_access_policy_key: build.template(std.get(block, 'shared_access_policy_key', null, true)),
                shared_access_policy_name: build.template(std.get(block, 'shared_access_policy_name', null, true)),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
              }),
            },
          },
        },
      },
      authentication_mode: p.child('authentication_mode').out,
      eventhub_name: p.child('eventhub_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      partition_key: p.child('partition_key').out,
      property_columns: p.child('property_columns').out,
      resource_group_name: p.child('resource_group_name').out,
      servicebus_namespace: p.child('servicebus_namespace').out,
      shared_access_policy_key: p.child('shared_access_policy_key').out,
      shared_access_policy_name: p.child('shared_access_policy_name').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
    },
    stream_analytics_output_function(name, block): {
      local p = path(['azurerm_stream_analytics_output_function', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_output_function: {
              [name]: std.prune({
                api_key: build.template(block.api_key),
                batch_max_count: build.template(std.get(block, 'batch_max_count', null, true)),
                batch_max_in_bytes: build.template(std.get(block, 'batch_max_in_bytes', null, true)),
                function_app: build.template(block.function_app),
                function_name: build.template(block.function_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
              }),
            },
          },
        },
      },
      api_key: p.child('api_key').out,
      batch_max_count: p.child('batch_max_count').out,
      batch_max_in_bytes: p.child('batch_max_in_bytes').out,
      function_app: p.child('function_app').out,
      function_name: p.child('function_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
    },
    stream_analytics_output_mssql(name, block): {
      local p = path(['azurerm_stream_analytics_output_mssql', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_output_mssql: {
              [name]: std.prune({
                authentication_mode: build.template(std.get(block, 'authentication_mode', null, true)),
                database: build.template(block.database),
                max_batch_count: build.template(std.get(block, 'max_batch_count', null, true)),
                max_writer_count: build.template(std.get(block, 'max_writer_count', null, true)),
                name: build.template(block.name),
                password: build.template(std.get(block, 'password', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                server: build.template(block.server),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
                table: build.template(block.table),
                user: build.template(std.get(block, 'user', null, true)),
              }),
            },
          },
        },
      },
      authentication_mode: p.child('authentication_mode').out,
      database: p.child('database').out,
      id: p.child('id').out,
      max_batch_count: p.child('max_batch_count').out,
      max_writer_count: p.child('max_writer_count').out,
      name: p.child('name').out,
      password: p.child('password').out,
      resource_group_name: p.child('resource_group_name').out,
      server: p.child('server').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
      table: p.child('table').out,
      user: p.child('user').out,
    },
    stream_analytics_output_powerbi(name, block): {
      local p = path(['azurerm_stream_analytics_output_powerbi', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_output_powerbi: {
              [name]: std.prune({
                dataset: build.template(block.dataset),
                group_id: build.template(block.group_id),
                group_name: build.template(block.group_name),
                name: build.template(block.name),
                stream_analytics_job_id: build.template(block.stream_analytics_job_id),
                table: build.template(block.table),
                token_user_display_name: build.template(std.get(block, 'token_user_display_name', null, true)),
                token_user_principal_name: build.template(std.get(block, 'token_user_principal_name', null, true)),
              }),
            },
          },
        },
      },
      dataset: p.child('dataset').out,
      group_id: p.child('group_id').out,
      group_name: p.child('group_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      stream_analytics_job_id: p.child('stream_analytics_job_id').out,
      table: p.child('table').out,
      token_user_display_name: p.child('token_user_display_name').out,
      token_user_principal_name: p.child('token_user_principal_name').out,
    },
    stream_analytics_output_servicebus_queue(name, block): {
      local p = path(['azurerm_stream_analytics_output_servicebus_queue', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_output_servicebus_queue: {
              [name]: std.prune({
                authentication_mode: build.template(std.get(block, 'authentication_mode', null, true)),
                name: build.template(block.name),
                property_columns: build.template(std.get(block, 'property_columns', null, true)),
                queue_name: build.template(block.queue_name),
                resource_group_name: build.template(block.resource_group_name),
                servicebus_namespace: build.template(block.servicebus_namespace),
                shared_access_policy_key: build.template(std.get(block, 'shared_access_policy_key', null, true)),
                shared_access_policy_name: build.template(std.get(block, 'shared_access_policy_name', null, true)),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
                system_property_columns: build.template(std.get(block, 'system_property_columns', null, true)),
              }),
            },
          },
        },
      },
      authentication_mode: p.child('authentication_mode').out,
      id: p.child('id').out,
      name: p.child('name').out,
      property_columns: p.child('property_columns').out,
      queue_name: p.child('queue_name').out,
      resource_group_name: p.child('resource_group_name').out,
      servicebus_namespace: p.child('servicebus_namespace').out,
      shared_access_policy_key: p.child('shared_access_policy_key').out,
      shared_access_policy_name: p.child('shared_access_policy_name').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
      system_property_columns: p.child('system_property_columns').out,
    },
    stream_analytics_output_servicebus_topic(name, block): {
      local p = path(['azurerm_stream_analytics_output_servicebus_topic', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_output_servicebus_topic: {
              [name]: std.prune({
                authentication_mode: build.template(std.get(block, 'authentication_mode', null, true)),
                name: build.template(block.name),
                property_columns: build.template(std.get(block, 'property_columns', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                servicebus_namespace: build.template(block.servicebus_namespace),
                shared_access_policy_key: build.template(std.get(block, 'shared_access_policy_key', null, true)),
                shared_access_policy_name: build.template(std.get(block, 'shared_access_policy_name', null, true)),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
                system_property_columns: build.template(std.get(block, 'system_property_columns', null, true)),
                topic_name: build.template(block.topic_name),
              }),
            },
          },
        },
      },
      authentication_mode: p.child('authentication_mode').out,
      id: p.child('id').out,
      name: p.child('name').out,
      property_columns: p.child('property_columns').out,
      resource_group_name: p.child('resource_group_name').out,
      servicebus_namespace: p.child('servicebus_namespace').out,
      shared_access_policy_key: p.child('shared_access_policy_key').out,
      shared_access_policy_name: p.child('shared_access_policy_name').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
      system_property_columns: p.child('system_property_columns').out,
      topic_name: p.child('topic_name').out,
    },
    stream_analytics_output_synapse(name, block): {
      local p = path(['azurerm_stream_analytics_output_synapse', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_output_synapse: {
              [name]: std.prune({
                database: build.template(block.database),
                name: build.template(block.name),
                password: build.template(block.password),
                resource_group_name: build.template(block.resource_group_name),
                server: build.template(block.server),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
                table: build.template(block.table),
                user: build.template(block.user),
              }),
            },
          },
        },
      },
      database: p.child('database').out,
      id: p.child('id').out,
      name: p.child('name').out,
      password: p.child('password').out,
      resource_group_name: p.child('resource_group_name').out,
      server: p.child('server').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
      table: p.child('table').out,
      user: p.child('user').out,
    },
    stream_analytics_output_table(name, block): {
      local p = path(['azurerm_stream_analytics_output_table', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_output_table: {
              [name]: std.prune({
                batch_size: build.template(block.batch_size),
                columns_to_remove: build.template(std.get(block, 'columns_to_remove', null, true)),
                name: build.template(block.name),
                partition_key: build.template(block.partition_key),
                resource_group_name: build.template(block.resource_group_name),
                row_key: build.template(block.row_key),
                storage_account_key: build.template(block.storage_account_key),
                storage_account_name: build.template(block.storage_account_name),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
                table: build.template(block.table),
              }),
            },
          },
        },
      },
      batch_size: p.child('batch_size').out,
      columns_to_remove: p.child('columns_to_remove').out,
      id: p.child('id').out,
      name: p.child('name').out,
      partition_key: p.child('partition_key').out,
      resource_group_name: p.child('resource_group_name').out,
      row_key: p.child('row_key').out,
      storage_account_key: p.child('storage_account_key').out,
      storage_account_name: p.child('storage_account_name').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
      table: p.child('table').out,
    },
    stream_analytics_reference_input_blob(name, block): {
      local p = path(['azurerm_stream_analytics_reference_input_blob', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_reference_input_blob: {
              [name]: std.prune({
                authentication_mode: build.template(std.get(block, 'authentication_mode', null, true)),
                date_format: build.template(block.date_format),
                name: build.template(block.name),
                path_pattern: build.template(block.path_pattern),
                resource_group_name: build.template(block.resource_group_name),
                storage_account_key: build.template(std.get(block, 'storage_account_key', null, true)),
                storage_account_name: build.template(block.storage_account_name),
                storage_container_name: build.template(block.storage_container_name),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
                time_format: build.template(block.time_format),
              }),
            },
          },
        },
      },
      authentication_mode: p.child('authentication_mode').out,
      date_format: p.child('date_format').out,
      id: p.child('id').out,
      name: p.child('name').out,
      path_pattern: p.child('path_pattern').out,
      resource_group_name: p.child('resource_group_name').out,
      storage_account_key: p.child('storage_account_key').out,
      storage_account_name: p.child('storage_account_name').out,
      storage_container_name: p.child('storage_container_name').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
      time_format: p.child('time_format').out,
    },
    stream_analytics_reference_input_mssql(name, block): {
      local p = path(['azurerm_stream_analytics_reference_input_mssql', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_reference_input_mssql: {
              [name]: std.prune({
                database: build.template(block.database),
                delta_snapshot_query: build.template(std.get(block, 'delta_snapshot_query', null, true)),
                full_snapshot_query: build.template(block.full_snapshot_query),
                name: build.template(block.name),
                password: build.template(block.password),
                refresh_interval_duration: build.template(std.get(block, 'refresh_interval_duration', null, true)),
                refresh_type: build.template(block.refresh_type),
                resource_group_name: build.template(block.resource_group_name),
                server: build.template(block.server),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
                table: build.template(std.get(block, 'table', null, true)),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      database: p.child('database').out,
      delta_snapshot_query: p.child('delta_snapshot_query').out,
      full_snapshot_query: p.child('full_snapshot_query').out,
      id: p.child('id').out,
      name: p.child('name').out,
      password: p.child('password').out,
      refresh_interval_duration: p.child('refresh_interval_duration').out,
      refresh_type: p.child('refresh_type').out,
      resource_group_name: p.child('resource_group_name').out,
      server: p.child('server').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
      table: p.child('table').out,
      username: p.child('username').out,
    },
    stream_analytics_stream_input_blob(name, block): {
      local p = path(['azurerm_stream_analytics_stream_input_blob', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_stream_input_blob: {
              [name]: std.prune({
                date_format: build.template(block.date_format),
                name: build.template(block.name),
                path_pattern: build.template(block.path_pattern),
                resource_group_name: build.template(block.resource_group_name),
                storage_account_key: build.template(block.storage_account_key),
                storage_account_name: build.template(block.storage_account_name),
                storage_container_name: build.template(block.storage_container_name),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
                time_format: build.template(block.time_format),
              }),
            },
          },
        },
      },
      date_format: p.child('date_format').out,
      id: p.child('id').out,
      name: p.child('name').out,
      path_pattern: p.child('path_pattern').out,
      resource_group_name: p.child('resource_group_name').out,
      storage_account_key: p.child('storage_account_key').out,
      storage_account_name: p.child('storage_account_name').out,
      storage_container_name: p.child('storage_container_name').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
      time_format: p.child('time_format').out,
    },
    stream_analytics_stream_input_eventhub(name, block): {
      local p = path(['azurerm_stream_analytics_stream_input_eventhub', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_stream_input_eventhub: {
              [name]: std.prune({
                authentication_mode: build.template(std.get(block, 'authentication_mode', null, true)),
                eventhub_consumer_group_name: build.template(std.get(block, 'eventhub_consumer_group_name', null, true)),
                eventhub_name: build.template(block.eventhub_name),
                name: build.template(block.name),
                partition_key: build.template(std.get(block, 'partition_key', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                servicebus_namespace: build.template(block.servicebus_namespace),
                shared_access_policy_key: build.template(std.get(block, 'shared_access_policy_key', null, true)),
                shared_access_policy_name: build.template(std.get(block, 'shared_access_policy_name', null, true)),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
              }),
            },
          },
        },
      },
      authentication_mode: p.child('authentication_mode').out,
      eventhub_consumer_group_name: p.child('eventhub_consumer_group_name').out,
      eventhub_name: p.child('eventhub_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      partition_key: p.child('partition_key').out,
      resource_group_name: p.child('resource_group_name').out,
      servicebus_namespace: p.child('servicebus_namespace').out,
      shared_access_policy_key: p.child('shared_access_policy_key').out,
      shared_access_policy_name: p.child('shared_access_policy_name').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
    },
    stream_analytics_stream_input_eventhub_v2(name, block): {
      local p = path(['azurerm_stream_analytics_stream_input_eventhub_v2', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_stream_input_eventhub_v2: {
              [name]: std.prune({
                authentication_mode: build.template(std.get(block, 'authentication_mode', null, true)),
                eventhub_consumer_group_name: build.template(std.get(block, 'eventhub_consumer_group_name', null, true)),
                eventhub_name: build.template(block.eventhub_name),
                name: build.template(block.name),
                partition_key: build.template(std.get(block, 'partition_key', null, true)),
                servicebus_namespace: build.template(block.servicebus_namespace),
                shared_access_policy_key: build.template(std.get(block, 'shared_access_policy_key', null, true)),
                shared_access_policy_name: build.template(std.get(block, 'shared_access_policy_name', null, true)),
                stream_analytics_job_id: build.template(block.stream_analytics_job_id),
              }),
            },
          },
        },
      },
      authentication_mode: p.child('authentication_mode').out,
      eventhub_consumer_group_name: p.child('eventhub_consumer_group_name').out,
      eventhub_name: p.child('eventhub_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      partition_key: p.child('partition_key').out,
      servicebus_namespace: p.child('servicebus_namespace').out,
      shared_access_policy_key: p.child('shared_access_policy_key').out,
      shared_access_policy_name: p.child('shared_access_policy_name').out,
      stream_analytics_job_id: p.child('stream_analytics_job_id').out,
    },
    stream_analytics_stream_input_iothub(name, block): {
      local p = path(['azurerm_stream_analytics_stream_input_iothub', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_stream_analytics_stream_input_iothub: {
              [name]: std.prune({
                endpoint: build.template(block.endpoint),
                eventhub_consumer_group_name: build.template(block.eventhub_consumer_group_name),
                iothub_namespace: build.template(block.iothub_namespace),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                shared_access_policy_key: build.template(block.shared_access_policy_key),
                shared_access_policy_name: build.template(block.shared_access_policy_name),
                stream_analytics_job_name: build.template(block.stream_analytics_job_name),
              }),
            },
          },
        },
      },
      endpoint: p.child('endpoint').out,
      eventhub_consumer_group_name: p.child('eventhub_consumer_group_name').out,
      id: p.child('id').out,
      iothub_namespace: p.child('iothub_namespace').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      shared_access_policy_key: p.child('shared_access_policy_key').out,
      shared_access_policy_name: p.child('shared_access_policy_name').out,
      stream_analytics_job_name: p.child('stream_analytics_job_name').out,
    },
    subnet(name, block): {
      local p = path(['azurerm_subnet', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_subnet: {
              [name]: std.prune({
                address_prefixes: build.template(block.address_prefixes),
                default_outbound_access_enabled: build.template(std.get(block, 'default_outbound_access_enabled', null, true)),
                name: build.template(block.name),
                private_endpoint_network_policies: build.template(std.get(block, 'private_endpoint_network_policies', null, true)),
                private_link_service_network_policies_enabled: build.template(std.get(block, 'private_link_service_network_policies_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                service_endpoint_policy_ids: build.template(std.get(block, 'service_endpoint_policy_ids', null, true)),
                service_endpoints: build.template(std.get(block, 'service_endpoints', null, true)),
                virtual_network_name: build.template(block.virtual_network_name),
              }),
            },
          },
        },
      },
      address_prefixes: p.child('address_prefixes').out,
      default_outbound_access_enabled: p.child('default_outbound_access_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      private_endpoint_network_policies: p.child('private_endpoint_network_policies').out,
      private_link_service_network_policies_enabled: p.child('private_link_service_network_policies_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      service_endpoint_policy_ids: p.child('service_endpoint_policy_ids').out,
      service_endpoints: p.child('service_endpoints').out,
      virtual_network_name: p.child('virtual_network_name').out,
    },
    subnet_nat_gateway_association(name, block): {
      local p = path(['azurerm_subnet_nat_gateway_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_subnet_nat_gateway_association: {
              [name]: std.prune({
                nat_gateway_id: build.template(block.nat_gateway_id),
                subnet_id: build.template(block.subnet_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      nat_gateway_id: p.child('nat_gateway_id').out,
      subnet_id: p.child('subnet_id').out,
    },
    subnet_network_security_group_association(name, block): {
      local p = path(['azurerm_subnet_network_security_group_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_subnet_network_security_group_association: {
              [name]: std.prune({
                network_security_group_id: build.template(block.network_security_group_id),
                subnet_id: build.template(block.subnet_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      network_security_group_id: p.child('network_security_group_id').out,
      subnet_id: p.child('subnet_id').out,
    },
    subnet_route_table_association(name, block): {
      local p = path(['azurerm_subnet_route_table_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_subnet_route_table_association: {
              [name]: std.prune({
                route_table_id: build.template(block.route_table_id),
                subnet_id: build.template(block.subnet_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      route_table_id: p.child('route_table_id').out,
      subnet_id: p.child('subnet_id').out,
    },
    subnet_service_endpoint_storage_policy(name, block): {
      local p = path(['azurerm_subnet_service_endpoint_storage_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_subnet_service_endpoint_storage_policy: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    subscription(name, block): {
      local p = path(['azurerm_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_subscription: {
              [name]: std.prune({
                billing_scope_id: build.template(std.get(block, 'billing_scope_id', null, true)),
                subscription_name: build.template(block.subscription_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                workload: build.template(std.get(block, 'workload', null, true)),
              }),
            },
          },
        },
      },
      alias: p.child('alias').out,
      billing_scope_id: p.child('billing_scope_id').out,
      id: p.child('id').out,
      subscription_id: p.child('subscription_id').out,
      subscription_name: p.child('subscription_name').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
      workload: p.child('workload').out,
    },
    subscription_cost_management_export(name, block): {
      local p = path(['azurerm_subscription_cost_management_export', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_subscription_cost_management_export: {
              [name]: std.prune({
                active: build.template(std.get(block, 'active', null, true)),
                name: build.template(block.name),
                recurrence_period_end_date: build.template(block.recurrence_period_end_date),
                recurrence_period_start_date: build.template(block.recurrence_period_start_date),
                recurrence_type: build.template(block.recurrence_type),
                subscription_id: build.template(block.subscription_id),
              }),
            },
          },
        },
      },
      active: p.child('active').out,
      id: p.child('id').out,
      name: p.child('name').out,
      recurrence_period_end_date: p.child('recurrence_period_end_date').out,
      recurrence_period_start_date: p.child('recurrence_period_start_date').out,
      recurrence_type: p.child('recurrence_type').out,
      subscription_id: p.child('subscription_id').out,
    },
    subscription_cost_management_view(name, block): {
      local p = path(['azurerm_subscription_cost_management_view', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_subscription_cost_management_view: {
              [name]: std.prune({
                accumulated: build.template(block.accumulated),
                chart_type: build.template(block.chart_type),
                display_name: build.template(block.display_name),
                name: build.template(block.name),
                report_type: build.template(block.report_type),
                subscription_id: build.template(block.subscription_id),
                timeframe: build.template(block.timeframe),
              }),
            },
          },
        },
      },
      accumulated: p.child('accumulated').out,
      chart_type: p.child('chart_type').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      report_type: p.child('report_type').out,
      subscription_id: p.child('subscription_id').out,
      timeframe: p.child('timeframe').out,
    },
    subscription_policy_assignment(name, block): {
      local p = path(['azurerm_subscription_policy_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_subscription_policy_assignment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                enforce: build.template(std.get(block, 'enforce', null, true)),
                location: build.template(std.get(block, 'location', null, true)),
                name: build.template(block.name),
                not_scopes: build.template(std.get(block, 'not_scopes', null, true)),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                policy_definition_id: build.template(block.policy_definition_id),
                subscription_id: build.template(block.subscription_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      enforce: p.child('enforce').out,
      id: p.child('id').out,
      location: p.child('location').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      not_scopes: p.child('not_scopes').out,
      parameters: p.child('parameters').out,
      policy_definition_id: p.child('policy_definition_id').out,
      subscription_id: p.child('subscription_id').out,
    },
    subscription_policy_exemption(name, block): {
      local p = path(['azurerm_subscription_policy_exemption', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_subscription_policy_exemption: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                exemption_category: build.template(block.exemption_category),
                expires_on: build.template(std.get(block, 'expires_on', null, true)),
                name: build.template(block.name),
                policy_assignment_id: build.template(block.policy_assignment_id),
                policy_definition_reference_ids: build.template(std.get(block, 'policy_definition_reference_ids', null, true)),
                subscription_id: build.template(block.subscription_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      exemption_category: p.child('exemption_category').out,
      expires_on: p.child('expires_on').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      policy_assignment_id: p.child('policy_assignment_id').out,
      policy_definition_reference_ids: p.child('policy_definition_reference_ids').out,
      subscription_id: p.child('subscription_id').out,
    },
    subscription_policy_remediation(name, block): {
      local p = path(['azurerm_subscription_policy_remediation', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_subscription_policy_remediation: {
              [name]: std.prune({
                failure_percentage: build.template(std.get(block, 'failure_percentage', null, true)),
                location_filters: build.template(std.get(block, 'location_filters', null, true)),
                name: build.template(block.name),
                parallel_deployments: build.template(std.get(block, 'parallel_deployments', null, true)),
                policy_assignment_id: build.template(block.policy_assignment_id),
                policy_definition_reference_id: build.template(std.get(block, 'policy_definition_reference_id', null, true)),
                resource_count: build.template(std.get(block, 'resource_count', null, true)),
                resource_discovery_mode: build.template(std.get(block, 'resource_discovery_mode', null, true)),
                subscription_id: build.template(block.subscription_id),
              }),
            },
          },
        },
      },
      failure_percentage: p.child('failure_percentage').out,
      id: p.child('id').out,
      location_filters: p.child('location_filters').out,
      name: p.child('name').out,
      parallel_deployments: p.child('parallel_deployments').out,
      policy_assignment_id: p.child('policy_assignment_id').out,
      policy_definition_reference_id: p.child('policy_definition_reference_id').out,
      resource_count: p.child('resource_count').out,
      resource_discovery_mode: p.child('resource_discovery_mode').out,
      subscription_id: p.child('subscription_id').out,
    },
    subscription_template_deployment(name, block): {
      local p = path(['azurerm_subscription_template_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_subscription_template_deployment: {
              [name]: std.prune({
                debug_level: build.template(std.get(block, 'debug_level', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                template_spec_version_id: build.template(std.get(block, 'template_spec_version_id', null, true)),
              }),
            },
          },
        },
      },
      debug_level: p.child('debug_level').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      output_content: p.child('output_content').out,
      parameters_content: p.child('parameters_content').out,
      tags: p.child('tags').out,
      template_content: p.child('template_content').out,
      template_spec_version_id: p.child('template_spec_version_id').out,
    },
    synapse_firewall_rule(name, block): {
      local p = path(['azurerm_synapse_firewall_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_firewall_rule: {
              [name]: std.prune({
                end_ip_address: build.template(block.end_ip_address),
                name: build.template(block.name),
                start_ip_address: build.template(block.start_ip_address),
                synapse_workspace_id: build.template(block.synapse_workspace_id),
              }),
            },
          },
        },
      },
      end_ip_address: p.child('end_ip_address').out,
      id: p.child('id').out,
      name: p.child('name').out,
      start_ip_address: p.child('start_ip_address').out,
      synapse_workspace_id: p.child('synapse_workspace_id').out,
    },
    synapse_integration_runtime_azure(name, block): {
      local p = path(['azurerm_synapse_integration_runtime_azure', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_integration_runtime_azure: {
              [name]: std.prune({
                compute_type: build.template(std.get(block, 'compute_type', null, true)),
                core_count: build.template(std.get(block, 'core_count', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                synapse_workspace_id: build.template(block.synapse_workspace_id),
                time_to_live_min: build.template(std.get(block, 'time_to_live_min', null, true)),
              }),
            },
          },
        },
      },
      compute_type: p.child('compute_type').out,
      core_count: p.child('core_count').out,
      description: p.child('description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      synapse_workspace_id: p.child('synapse_workspace_id').out,
      time_to_live_min: p.child('time_to_live_min').out,
    },
    synapse_integration_runtime_self_hosted(name, block): {
      local p = path(['azurerm_synapse_integration_runtime_self_hosted', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_integration_runtime_self_hosted: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                synapse_workspace_id: build.template(block.synapse_workspace_id),
              }),
            },
          },
        },
      },
      authorization_key_primary: p.child('authorization_key_primary').out,
      authorization_key_secondary: p.child('authorization_key_secondary').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      synapse_workspace_id: p.child('synapse_workspace_id').out,
    },
    synapse_linked_service(name, block): {
      local p = path(['azurerm_synapse_linked_service', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_linked_service: {
              [name]: std.prune({
                additional_properties: build.template(std.get(block, 'additional_properties', null, true)),
                annotations: build.template(std.get(block, 'annotations', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                synapse_workspace_id: build.template(block.synapse_workspace_id),
                type: build.template(block.type),
                type_properties_json: build.template(block.type_properties_json),
              }),
            },
          },
        },
      },
      additional_properties: p.child('additional_properties').out,
      annotations: p.child('annotations').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      synapse_workspace_id: p.child('synapse_workspace_id').out,
      type: p.child('type').out,
      type_properties_json: p.child('type_properties_json').out,
    },
    synapse_managed_private_endpoint(name, block): {
      local p = path(['azurerm_synapse_managed_private_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_managed_private_endpoint: {
              [name]: std.prune({
                name: build.template(block.name),
                subresource_name: build.template(block.subresource_name),
                synapse_workspace_id: build.template(block.synapse_workspace_id),
                target_resource_id: build.template(block.target_resource_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      subresource_name: p.child('subresource_name').out,
      synapse_workspace_id: p.child('synapse_workspace_id').out,
      target_resource_id: p.child('target_resource_id').out,
    },
    synapse_private_link_hub(name, block): {
      local p = path(['azurerm_synapse_private_link_hub', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_private_link_hub: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    synapse_role_assignment(name, block): {
      local p = path(['azurerm_synapse_role_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_role_assignment: {
              [name]: std.prune({
                principal_id: build.template(block.principal_id),
                principal_type: build.template(std.get(block, 'principal_type', null, true)),
                role_name: build.template(block.role_name),
                synapse_spark_pool_id: build.template(std.get(block, 'synapse_spark_pool_id', null, true)),
                synapse_workspace_id: build.template(std.get(block, 'synapse_workspace_id', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      principal_id: p.child('principal_id').out,
      principal_type: p.child('principal_type').out,
      role_name: p.child('role_name').out,
      synapse_spark_pool_id: p.child('synapse_spark_pool_id').out,
      synapse_workspace_id: p.child('synapse_workspace_id').out,
    },
    synapse_spark_pool(name, block): {
      local p = path(['azurerm_synapse_spark_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_spark_pool: {
              [name]: std.prune({
                cache_size: build.template(std.get(block, 'cache_size', null, true)),
                compute_isolation_enabled: build.template(std.get(block, 'compute_isolation_enabled', null, true)),
                dynamic_executor_allocation_enabled: build.template(std.get(block, 'dynamic_executor_allocation_enabled', null, true)),
                max_executors: build.template(std.get(block, 'max_executors', null, true)),
                min_executors: build.template(std.get(block, 'min_executors', null, true)),
                name: build.template(block.name),
                node_size: build.template(block.node_size),
                node_size_family: build.template(block.node_size_family),
                session_level_packages_enabled: build.template(std.get(block, 'session_level_packages_enabled', null, true)),
                spark_events_folder: build.template(std.get(block, 'spark_events_folder', null, true)),
                spark_log_folder: build.template(std.get(block, 'spark_log_folder', null, true)),
                spark_version: build.template(block.spark_version),
                synapse_workspace_id: build.template(block.synapse_workspace_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      cache_size: p.child('cache_size').out,
      compute_isolation_enabled: p.child('compute_isolation_enabled').out,
      dynamic_executor_allocation_enabled: p.child('dynamic_executor_allocation_enabled').out,
      id: p.child('id').out,
      max_executors: p.child('max_executors').out,
      min_executors: p.child('min_executors').out,
      name: p.child('name').out,
      node_count: p.child('node_count').out,
      node_size: p.child('node_size').out,
      node_size_family: p.child('node_size_family').out,
      session_level_packages_enabled: p.child('session_level_packages_enabled').out,
      spark_events_folder: p.child('spark_events_folder').out,
      spark_log_folder: p.child('spark_log_folder').out,
      spark_version: p.child('spark_version').out,
      synapse_workspace_id: p.child('synapse_workspace_id').out,
      tags: p.child('tags').out,
    },
    synapse_sql_pool(name, block): {
      local p = path(['azurerm_synapse_sql_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_sql_pool: {
              [name]: std.prune({
                create_mode: build.template(std.get(block, 'create_mode', null, true)),
                data_encrypted: build.template(std.get(block, 'data_encrypted', null, true)),
                geo_backup_policy_enabled: build.template(std.get(block, 'geo_backup_policy_enabled', null, true)),
                name: build.template(block.name),
                recovery_database_id: build.template(std.get(block, 'recovery_database_id', null, true)),
                sku_name: build.template(block.sku_name),
                storage_account_type: build.template(block.storage_account_type),
                synapse_workspace_id: build.template(block.synapse_workspace_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      collation: p.child('collation').out,
      create_mode: p.child('create_mode').out,
      data_encrypted: p.child('data_encrypted').out,
      geo_backup_policy_enabled: p.child('geo_backup_policy_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_database_id: p.child('recovery_database_id').out,
      sku_name: p.child('sku_name').out,
      storage_account_type: p.child('storage_account_type').out,
      synapse_workspace_id: p.child('synapse_workspace_id').out,
      tags: p.child('tags').out,
    },
    synapse_sql_pool_extended_auditing_policy(name, block): {
      local p = path(['azurerm_synapse_sql_pool_extended_auditing_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_sql_pool_extended_auditing_policy: {
              [name]: std.prune({
                log_monitoring_enabled: build.template(std.get(block, 'log_monitoring_enabled', null, true)),
                retention_in_days: build.template(std.get(block, 'retention_in_days', null, true)),
                sql_pool_id: build.template(block.sql_pool_id),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_account_access_key_is_secondary: build.template(std.get(block, 'storage_account_access_key_is_secondary', null, true)),
                storage_endpoint: build.template(std.get(block, 'storage_endpoint', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_monitoring_enabled: p.child('log_monitoring_enabled').out,
      retention_in_days: p.child('retention_in_days').out,
      sql_pool_id: p.child('sql_pool_id').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_access_key_is_secondary: p.child('storage_account_access_key_is_secondary').out,
      storage_endpoint: p.child('storage_endpoint').out,
    },
    synapse_sql_pool_security_alert_policy(name, block): {
      local p = path(['azurerm_synapse_sql_pool_security_alert_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_sql_pool_security_alert_policy: {
              [name]: std.prune({
                disabled_alerts: build.template(std.get(block, 'disabled_alerts', null, true)),
                email_account_admins_enabled: build.template(std.get(block, 'email_account_admins_enabled', null, true)),
                email_addresses: build.template(std.get(block, 'email_addresses', null, true)),
                policy_state: build.template(block.policy_state),
                retention_days: build.template(std.get(block, 'retention_days', null, true)),
                sql_pool_id: build.template(block.sql_pool_id),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_endpoint: build.template(std.get(block, 'storage_endpoint', null, true)),
              }),
            },
          },
        },
      },
      disabled_alerts: p.child('disabled_alerts').out,
      email_account_admins_enabled: p.child('email_account_admins_enabled').out,
      email_addresses: p.child('email_addresses').out,
      id: p.child('id').out,
      policy_state: p.child('policy_state').out,
      retention_days: p.child('retention_days').out,
      sql_pool_id: p.child('sql_pool_id').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_endpoint: p.child('storage_endpoint').out,
    },
    synapse_sql_pool_vulnerability_assessment(name, block): {
      local p = path(['azurerm_synapse_sql_pool_vulnerability_assessment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_sql_pool_vulnerability_assessment: {
              [name]: std.prune({
                sql_pool_security_alert_policy_id: build.template(block.sql_pool_security_alert_policy_id),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_container_path: build.template(block.storage_container_path),
                storage_container_sas_key: build.template(std.get(block, 'storage_container_sas_key', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      sql_pool_security_alert_policy_id: p.child('sql_pool_security_alert_policy_id').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_container_path: p.child('storage_container_path').out,
      storage_container_sas_key: p.child('storage_container_sas_key').out,
    },
    synapse_sql_pool_vulnerability_assessment_baseline(name, block): {
      local p = path(['azurerm_synapse_sql_pool_vulnerability_assessment_baseline', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_sql_pool_vulnerability_assessment_baseline: {
              [name]: std.prune({
                name: build.template(block.name),
                rule_name: build.template(block.rule_name),
                sql_pool_vulnerability_assessment_id: build.template(block.sql_pool_vulnerability_assessment_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      rule_name: p.child('rule_name').out,
      sql_pool_vulnerability_assessment_id: p.child('sql_pool_vulnerability_assessment_id').out,
    },
    synapse_sql_pool_workload_classifier(name, block): {
      local p = path(['azurerm_synapse_sql_pool_workload_classifier', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_sql_pool_workload_classifier: {
              [name]: std.prune({
                context: build.template(std.get(block, 'context', null, true)),
                end_time: build.template(std.get(block, 'end_time', null, true)),
                importance: build.template(std.get(block, 'importance', null, true)),
                label: build.template(std.get(block, 'label', null, true)),
                member_name: build.template(block.member_name),
                name: build.template(block.name),
                start_time: build.template(std.get(block, 'start_time', null, true)),
                workload_group_id: build.template(block.workload_group_id),
              }),
            },
          },
        },
      },
      context: p.child('context').out,
      end_time: p.child('end_time').out,
      id: p.child('id').out,
      importance: p.child('importance').out,
      label: p.child('label').out,
      member_name: p.child('member_name').out,
      name: p.child('name').out,
      start_time: p.child('start_time').out,
      workload_group_id: p.child('workload_group_id').out,
    },
    synapse_sql_pool_workload_group(name, block): {
      local p = path(['azurerm_synapse_sql_pool_workload_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_sql_pool_workload_group: {
              [name]: std.prune({
                importance: build.template(std.get(block, 'importance', null, true)),
                max_resource_percent: build.template(block.max_resource_percent),
                max_resource_percent_per_request: build.template(std.get(block, 'max_resource_percent_per_request', null, true)),
                min_resource_percent: build.template(block.min_resource_percent),
                min_resource_percent_per_request: build.template(std.get(block, 'min_resource_percent_per_request', null, true)),
                name: build.template(block.name),
                query_execution_timeout_in_seconds: build.template(std.get(block, 'query_execution_timeout_in_seconds', null, true)),
                sql_pool_id: build.template(block.sql_pool_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      importance: p.child('importance').out,
      max_resource_percent: p.child('max_resource_percent').out,
      max_resource_percent_per_request: p.child('max_resource_percent_per_request').out,
      min_resource_percent: p.child('min_resource_percent').out,
      min_resource_percent_per_request: p.child('min_resource_percent_per_request').out,
      name: p.child('name').out,
      query_execution_timeout_in_seconds: p.child('query_execution_timeout_in_seconds').out,
      sql_pool_id: p.child('sql_pool_id').out,
    },
    synapse_workspace(name, block): {
      local p = path(['azurerm_synapse_workspace', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_workspace: {
              [name]: std.prune({
                azuread_authentication_only: build.template(std.get(block, 'azuread_authentication_only', null, true)),
                compute_subnet_id: build.template(std.get(block, 'compute_subnet_id', null, true)),
                data_exfiltration_protection_enabled: build.template(std.get(block, 'data_exfiltration_protection_enabled', null, true)),
                linking_allowed_for_aad_tenant_ids: build.template(std.get(block, 'linking_allowed_for_aad_tenant_ids', null, true)),
                location: build.template(block.location),
                managed_virtual_network_enabled: build.template(std.get(block, 'managed_virtual_network_enabled', null, true)),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                purview_id: build.template(std.get(block, 'purview_id', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sql_administrator_login: build.template(std.get(block, 'sql_administrator_login', null, true)),
                sql_administrator_login_password: build.template(std.get(block, 'sql_administrator_login_password', null, true)),
                sql_identity_control_enabled: build.template(std.get(block, 'sql_identity_control_enabled', null, true)),
                storage_data_lake_gen2_filesystem_id: build.template(block.storage_data_lake_gen2_filesystem_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      azuread_authentication_only: p.child('azuread_authentication_only').out,
      compute_subnet_id: p.child('compute_subnet_id').out,
      connectivity_endpoints: p.child('connectivity_endpoints').out,
      data_exfiltration_protection_enabled: p.child('data_exfiltration_protection_enabled').out,
      id: p.child('id').out,
      linking_allowed_for_aad_tenant_ids: p.child('linking_allowed_for_aad_tenant_ids').out,
      location: p.child('location').out,
      managed_resource_group_name: p.child('managed_resource_group_name').out,
      managed_virtual_network_enabled: p.child('managed_virtual_network_enabled').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      purview_id: p.child('purview_id').out,
      resource_group_name: p.child('resource_group_name').out,
      sql_administrator_login: p.child('sql_administrator_login').out,
      sql_administrator_login_password: p.child('sql_administrator_login_password').out,
      sql_identity_control_enabled: p.child('sql_identity_control_enabled').out,
      storage_data_lake_gen2_filesystem_id: p.child('storage_data_lake_gen2_filesystem_id').out,
      tags: p.child('tags').out,
    },
    synapse_workspace_aad_admin(name, block): {
      local p = path(['azurerm_synapse_workspace_aad_admin', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_workspace_aad_admin: {
              [name]: std.prune({
                login: build.template(block.login),
                object_id: build.template(block.object_id),
                synapse_workspace_id: build.template(block.synapse_workspace_id),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      login: p.child('login').out,
      object_id: p.child('object_id').out,
      synapse_workspace_id: p.child('synapse_workspace_id').out,
      tenant_id: p.child('tenant_id').out,
    },
    synapse_workspace_extended_auditing_policy(name, block): {
      local p = path(['azurerm_synapse_workspace_extended_auditing_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_workspace_extended_auditing_policy: {
              [name]: std.prune({
                log_monitoring_enabled: build.template(std.get(block, 'log_monitoring_enabled', null, true)),
                retention_in_days: build.template(std.get(block, 'retention_in_days', null, true)),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_account_access_key_is_secondary: build.template(std.get(block, 'storage_account_access_key_is_secondary', null, true)),
                storage_endpoint: build.template(std.get(block, 'storage_endpoint', null, true)),
                synapse_workspace_id: build.template(block.synapse_workspace_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_monitoring_enabled: p.child('log_monitoring_enabled').out,
      retention_in_days: p.child('retention_in_days').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_access_key_is_secondary: p.child('storage_account_access_key_is_secondary').out,
      storage_endpoint: p.child('storage_endpoint').out,
      synapse_workspace_id: p.child('synapse_workspace_id').out,
    },
    synapse_workspace_key(name, block): {
      local p = path(['azurerm_synapse_workspace_key', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_workspace_key: {
              [name]: std.prune({
                active: build.template(block.active),
                customer_managed_key_name: build.template(block.customer_managed_key_name),
                customer_managed_key_versionless_id: build.template(std.get(block, 'customer_managed_key_versionless_id', null, true)),
                synapse_workspace_id: build.template(block.synapse_workspace_id),
              }),
            },
          },
        },
      },
      active: p.child('active').out,
      customer_managed_key_name: p.child('customer_managed_key_name').out,
      customer_managed_key_versionless_id: p.child('customer_managed_key_versionless_id').out,
      id: p.child('id').out,
      synapse_workspace_id: p.child('synapse_workspace_id').out,
    },
    synapse_workspace_security_alert_policy(name, block): {
      local p = path(['azurerm_synapse_workspace_security_alert_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_workspace_security_alert_policy: {
              [name]: std.prune({
                disabled_alerts: build.template(std.get(block, 'disabled_alerts', null, true)),
                email_account_admins_enabled: build.template(std.get(block, 'email_account_admins_enabled', null, true)),
                email_addresses: build.template(std.get(block, 'email_addresses', null, true)),
                policy_state: build.template(block.policy_state),
                retention_days: build.template(std.get(block, 'retention_days', null, true)),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_endpoint: build.template(std.get(block, 'storage_endpoint', null, true)),
                synapse_workspace_id: build.template(block.synapse_workspace_id),
              }),
            },
          },
        },
      },
      disabled_alerts: p.child('disabled_alerts').out,
      email_account_admins_enabled: p.child('email_account_admins_enabled').out,
      email_addresses: p.child('email_addresses').out,
      id: p.child('id').out,
      policy_state: p.child('policy_state').out,
      retention_days: p.child('retention_days').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_endpoint: p.child('storage_endpoint').out,
      synapse_workspace_id: p.child('synapse_workspace_id').out,
    },
    synapse_workspace_sql_aad_admin(name, block): {
      local p = path(['azurerm_synapse_workspace_sql_aad_admin', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_workspace_sql_aad_admin: {
              [name]: std.prune({
                login: build.template(block.login),
                object_id: build.template(block.object_id),
                synapse_workspace_id: build.template(block.synapse_workspace_id),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      login: p.child('login').out,
      object_id: p.child('object_id').out,
      synapse_workspace_id: p.child('synapse_workspace_id').out,
      tenant_id: p.child('tenant_id').out,
    },
    synapse_workspace_vulnerability_assessment(name, block): {
      local p = path(['azurerm_synapse_workspace_vulnerability_assessment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_synapse_workspace_vulnerability_assessment: {
              [name]: std.prune({
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_container_path: build.template(block.storage_container_path),
                storage_container_sas_key: build.template(std.get(block, 'storage_container_sas_key', null, true)),
                workspace_security_alert_policy_id: build.template(block.workspace_security_alert_policy_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_container_path: p.child('storage_container_path').out,
      storage_container_sas_key: p.child('storage_container_sas_key').out,
      workspace_security_alert_policy_id: p.child('workspace_security_alert_policy_id').out,
    },
    system_center_virtual_machine_manager_availability_set(name, block): {
      local p = path(['azurerm_system_center_virtual_machine_manager_availability_set', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_system_center_virtual_machine_manager_availability_set: {
              [name]: std.prune({
                custom_location_id: build.template(block.custom_location_id),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                system_center_virtual_machine_manager_server_id: build.template(block.system_center_virtual_machine_manager_server_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      custom_location_id: p.child('custom_location_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      system_center_virtual_machine_manager_server_id: p.child('system_center_virtual_machine_manager_server_id').out,
      tags: p.child('tags').out,
    },
    system_center_virtual_machine_manager_cloud(name, block): {
      local p = path(['azurerm_system_center_virtual_machine_manager_cloud', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_system_center_virtual_machine_manager_cloud: {
              [name]: std.prune({
                custom_location_id: build.template(block.custom_location_id),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                system_center_virtual_machine_manager_server_inventory_item_id: build.template(block.system_center_virtual_machine_manager_server_inventory_item_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      custom_location_id: p.child('custom_location_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      system_center_virtual_machine_manager_server_inventory_item_id: p.child('system_center_virtual_machine_manager_server_inventory_item_id').out,
      tags: p.child('tags').out,
    },
    system_center_virtual_machine_manager_server(name, block): {
      local p = path(['azurerm_system_center_virtual_machine_manager_server', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_system_center_virtual_machine_manager_server: {
              [name]: std.prune({
                custom_location_id: build.template(block.custom_location_id),
                fqdn: build.template(block.fqdn),
                location: build.template(block.location),
                name: build.template(block.name),
                password: build.template(block.password),
                port: build.template(std.get(block, 'port', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      custom_location_id: p.child('custom_location_id').out,
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      password: p.child('password').out,
      port: p.child('port').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      username: p.child('username').out,
    },
    system_center_virtual_machine_manager_virtual_machine_template(name, block): {
      local p = path(['azurerm_system_center_virtual_machine_manager_virtual_machine_template', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_system_center_virtual_machine_manager_virtual_machine_template: {
              [name]: std.prune({
                custom_location_id: build.template(block.custom_location_id),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                system_center_virtual_machine_manager_server_inventory_item_id: build.template(block.system_center_virtual_machine_manager_server_inventory_item_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      custom_location_id: p.child('custom_location_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      system_center_virtual_machine_manager_server_inventory_item_id: p.child('system_center_virtual_machine_manager_server_inventory_item_id').out,
      tags: p.child('tags').out,
    },
    system_center_virtual_machine_manager_virtual_network(name, block): {
      local p = path(['azurerm_system_center_virtual_machine_manager_virtual_network', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_system_center_virtual_machine_manager_virtual_network: {
              [name]: std.prune({
                custom_location_id: build.template(block.custom_location_id),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                system_center_virtual_machine_manager_server_inventory_item_id: build.template(block.system_center_virtual_machine_manager_server_inventory_item_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      custom_location_id: p.child('custom_location_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      system_center_virtual_machine_manager_server_inventory_item_id: p.child('system_center_virtual_machine_manager_server_inventory_item_id').out,
      tags: p.child('tags').out,
    },
    tenant_template_deployment(name, block): {
      local p = path(['azurerm_tenant_template_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_tenant_template_deployment: {
              [name]: std.prune({
                debug_level: build.template(std.get(block, 'debug_level', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                template_spec_version_id: build.template(std.get(block, 'template_spec_version_id', null, true)),
              }),
            },
          },
        },
      },
      debug_level: p.child('debug_level').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      output_content: p.child('output_content').out,
      parameters_content: p.child('parameters_content').out,
      tags: p.child('tags').out,
      template_content: p.child('template_content').out,
      template_spec_version_id: p.child('template_spec_version_id').out,
    },
    traffic_manager_azure_endpoint(name, block): {
      local p = path(['azurerm_traffic_manager_azure_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_traffic_manager_azure_endpoint: {
              [name]: std.prune({
                always_serve_enabled: build.template(std.get(block, 'always_serve_enabled', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                geo_mappings: build.template(std.get(block, 'geo_mappings', null, true)),
                name: build.template(block.name),
                priority: build.template(std.get(block, 'priority', null, true)),
                profile_id: build.template(block.profile_id),
                target_resource_id: build.template(block.target_resource_id),
                weight: build.template(std.get(block, 'weight', null, true)),
              }),
            },
          },
        },
      },
      always_serve_enabled: p.child('always_serve_enabled').out,
      enabled: p.child('enabled').out,
      geo_mappings: p.child('geo_mappings').out,
      id: p.child('id').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      profile_id: p.child('profile_id').out,
      target_resource_id: p.child('target_resource_id').out,
      weight: p.child('weight').out,
    },
    traffic_manager_external_endpoint(name, block): {
      local p = path(['azurerm_traffic_manager_external_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_traffic_manager_external_endpoint: {
              [name]: std.prune({
                always_serve_enabled: build.template(std.get(block, 'always_serve_enabled', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                geo_mappings: build.template(std.get(block, 'geo_mappings', null, true)),
                name: build.template(block.name),
                priority: build.template(std.get(block, 'priority', null, true)),
                profile_id: build.template(block.profile_id),
                target: build.template(block.target),
                weight: build.template(std.get(block, 'weight', null, true)),
              }),
            },
          },
        },
      },
      always_serve_enabled: p.child('always_serve_enabled').out,
      enabled: p.child('enabled').out,
      endpoint_location: p.child('endpoint_location').out,
      geo_mappings: p.child('geo_mappings').out,
      id: p.child('id').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      profile_id: p.child('profile_id').out,
      target: p.child('target').out,
      weight: p.child('weight').out,
    },
    traffic_manager_nested_endpoint(name, block): {
      local p = path(['azurerm_traffic_manager_nested_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_traffic_manager_nested_endpoint: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                geo_mappings: build.template(std.get(block, 'geo_mappings', null, true)),
                minimum_child_endpoints: build.template(block.minimum_child_endpoints),
                minimum_required_child_endpoints_ipv4: build.template(std.get(block, 'minimum_required_child_endpoints_ipv4', null, true)),
                minimum_required_child_endpoints_ipv6: build.template(std.get(block, 'minimum_required_child_endpoints_ipv6', null, true)),
                name: build.template(block.name),
                priority: build.template(std.get(block, 'priority', null, true)),
                profile_id: build.template(block.profile_id),
                target_resource_id: build.template(block.target_resource_id),
                weight: build.template(std.get(block, 'weight', null, true)),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      endpoint_location: p.child('endpoint_location').out,
      geo_mappings: p.child('geo_mappings').out,
      id: p.child('id').out,
      minimum_child_endpoints: p.child('minimum_child_endpoints').out,
      minimum_required_child_endpoints_ipv4: p.child('minimum_required_child_endpoints_ipv4').out,
      minimum_required_child_endpoints_ipv6: p.child('minimum_required_child_endpoints_ipv6').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      profile_id: p.child('profile_id').out,
      target_resource_id: p.child('target_resource_id').out,
      weight: p.child('weight').out,
    },
    traffic_manager_profile(name, block): {
      local p = path(['azurerm_traffic_manager_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_traffic_manager_profile: {
              [name]: std.prune({
                max_return: build.template(std.get(block, 'max_return', null, true)),
                name: build.template(block.name),
                profile_status: build.template(std.get(block, 'profile_status', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                traffic_routing_method: build.template(block.traffic_routing_method),
                traffic_view_enabled: build.template(std.get(block, 'traffic_view_enabled', null, true)),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      max_return: p.child('max_return').out,
      name: p.child('name').out,
      profile_status: p.child('profile_status').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      traffic_routing_method: p.child('traffic_routing_method').out,
      traffic_view_enabled: p.child('traffic_view_enabled').out,
    },
    trusted_signing_account(name, block): {
      local p = path(['azurerm_trusted_signing_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_trusted_signing_account: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      account_uri: p.child('account_uri').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    user_assigned_identity(name, block): {
      local p = path(['azurerm_user_assigned_identity', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_user_assigned_identity: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      client_id: p.child('client_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      principal_id: p.child('principal_id').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
    },
    video_indexer_account(name, block): {
      local p = path(['azurerm_video_indexer_account', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_video_indexer_account: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    virtual_desktop_application(name, block): {
      local p = path(['azurerm_virtual_desktop_application', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_desktop_application: {
              [name]: std.prune({
                application_group_id: build.template(block.application_group_id),
                command_line_argument_policy: build.template(block.command_line_argument_policy),
                command_line_arguments: build.template(std.get(block, 'command_line_arguments', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                icon_index: build.template(std.get(block, 'icon_index', null, true)),
                name: build.template(block.name),
                path: build.template(block.path),
                show_in_portal: build.template(std.get(block, 'show_in_portal', null, true)),
              }),
            },
          },
        },
      },
      application_group_id: p.child('application_group_id').out,
      command_line_argument_policy: p.child('command_line_argument_policy').out,
      command_line_arguments: p.child('command_line_arguments').out,
      description: p.child('description').out,
      friendly_name: p.child('friendly_name').out,
      icon_index: p.child('icon_index').out,
      icon_path: p.child('icon_path').out,
      id: p.child('id').out,
      name: p.child('name').out,
      path: p.child('path').out,
      show_in_portal: p.child('show_in_portal').out,
    },
    virtual_desktop_application_group(name, block): {
      local p = path(['azurerm_virtual_desktop_application_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_desktop_application_group: {
              [name]: std.prune({
                default_desktop_display_name: build.template(std.get(block, 'default_desktop_display_name', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                friendly_name: build.template(std.get(block, 'friendly_name', null, true)),
                host_pool_id: build.template(block.host_pool_id),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      default_desktop_display_name: p.child('default_desktop_display_name').out,
      description: p.child('description').out,
      friendly_name: p.child('friendly_name').out,
      host_pool_id: p.child('host_pool_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
    },
    virtual_desktop_host_pool(name, block): {
      local p = path(['azurerm_virtual_desktop_host_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_desktop_host_pool: {
              [name]: std.prune({
                custom_rdp_properties: build.template(std.get(block, 'custom_rdp_properties', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                friendly_name: build.template(std.get(block, 'friendly_name', null, true)),
                load_balancer_type: build.template(block.load_balancer_type),
                location: build.template(block.location),
                maximum_sessions_allowed: build.template(std.get(block, 'maximum_sessions_allowed', null, true)),
                name: build.template(block.name),
                personal_desktop_assignment_type: build.template(std.get(block, 'personal_desktop_assignment_type', null, true)),
                preferred_app_group_type: build.template(std.get(block, 'preferred_app_group_type', null, true)),
                public_network_access: build.template(std.get(block, 'public_network_access', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                start_vm_on_connect: build.template(std.get(block, 'start_vm_on_connect', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
                validate_environment: build.template(std.get(block, 'validate_environment', null, true)),
                vm_template: build.template(std.get(block, 'vm_template', null, true)),
              }),
            },
          },
        },
      },
      custom_rdp_properties: p.child('custom_rdp_properties').out,
      description: p.child('description').out,
      friendly_name: p.child('friendly_name').out,
      id: p.child('id').out,
      load_balancer_type: p.child('load_balancer_type').out,
      location: p.child('location').out,
      maximum_sessions_allowed: p.child('maximum_sessions_allowed').out,
      name: p.child('name').out,
      personal_desktop_assignment_type: p.child('personal_desktop_assignment_type').out,
      preferred_app_group_type: p.child('preferred_app_group_type').out,
      public_network_access: p.child('public_network_access').out,
      resource_group_name: p.child('resource_group_name').out,
      start_vm_on_connect: p.child('start_vm_on_connect').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      validate_environment: p.child('validate_environment').out,
      vm_template: p.child('vm_template').out,
    },
    virtual_desktop_host_pool_registration_info(name, block): {
      local p = path(['azurerm_virtual_desktop_host_pool_registration_info', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_desktop_host_pool_registration_info: {
              [name]: std.prune({
                expiration_date: build.template(block.expiration_date),
                hostpool_id: build.template(block.hostpool_id),
              }),
            },
          },
        },
      },
      expiration_date: p.child('expiration_date').out,
      hostpool_id: p.child('hostpool_id').out,
      id: p.child('id').out,
      token: p.child('token').out,
    },
    virtual_desktop_scaling_plan(name, block): {
      local p = path(['azurerm_virtual_desktop_scaling_plan', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_desktop_scaling_plan: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                exclusion_tag: build.template(std.get(block, 'exclusion_tag', null, true)),
                friendly_name: build.template(std.get(block, 'friendly_name', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                time_zone: build.template(block.time_zone),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      exclusion_tag: p.child('exclusion_tag').out,
      friendly_name: p.child('friendly_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      time_zone: p.child('time_zone').out,
    },
    virtual_desktop_scaling_plan_host_pool_association(name, block): {
      local p = path(['azurerm_virtual_desktop_scaling_plan_host_pool_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_desktop_scaling_plan_host_pool_association: {
              [name]: std.prune({
                enabled: build.template(block.enabled),
                host_pool_id: build.template(block.host_pool_id),
                scaling_plan_id: build.template(block.scaling_plan_id),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      host_pool_id: p.child('host_pool_id').out,
      id: p.child('id').out,
      scaling_plan_id: p.child('scaling_plan_id').out,
    },
    virtual_desktop_workspace(name, block): {
      local p = path(['azurerm_virtual_desktop_workspace', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_desktop_workspace: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                friendly_name: build.template(std.get(block, 'friendly_name', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      friendly_name: p.child('friendly_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    virtual_desktop_workspace_application_group_association(name, block): {
      local p = path(['azurerm_virtual_desktop_workspace_application_group_association', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_desktop_workspace_application_group_association: {
              [name]: std.prune({
                application_group_id: build.template(block.application_group_id),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      application_group_id: p.child('application_group_id').out,
      id: p.child('id').out,
      workspace_id: p.child('workspace_id').out,
    },
    virtual_hub(name, block): {
      local p = path(['azurerm_virtual_hub', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_hub: {
              [name]: std.prune({
                address_prefix: build.template(std.get(block, 'address_prefix', null, true)),
                hub_routing_preference: build.template(std.get(block, 'hub_routing_preference', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(std.get(block, 'sku', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_router_auto_scale_min_capacity: build.template(std.get(block, 'virtual_router_auto_scale_min_capacity', null, true)),
                virtual_wan_id: build.template(std.get(block, 'virtual_wan_id', null, true)),
              }),
            },
          },
        },
      },
      address_prefix: p.child('address_prefix').out,
      default_route_table_id: p.child('default_route_table_id').out,
      hub_routing_preference: p.child('hub_routing_preference').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      virtual_router_asn: p.child('virtual_router_asn').out,
      virtual_router_auto_scale_min_capacity: p.child('virtual_router_auto_scale_min_capacity').out,
      virtual_router_ips: p.child('virtual_router_ips').out,
      virtual_wan_id: p.child('virtual_wan_id').out,
    },
    virtual_hub_bgp_connection(name, block): {
      local p = path(['azurerm_virtual_hub_bgp_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_hub_bgp_connection: {
              [name]: std.prune({
                name: build.template(block.name),
                peer_asn: build.template(block.peer_asn),
                peer_ip: build.template(block.peer_ip),
                virtual_hub_id: build.template(block.virtual_hub_id),
                virtual_network_connection_id: build.template(std.get(block, 'virtual_network_connection_id', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      peer_asn: p.child('peer_asn').out,
      peer_ip: p.child('peer_ip').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
      virtual_network_connection_id: p.child('virtual_network_connection_id').out,
    },
    virtual_hub_connection(name, block): {
      local p = path(['azurerm_virtual_hub_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_hub_connection: {
              [name]: std.prune({
                internet_security_enabled: build.template(std.get(block, 'internet_security_enabled', null, true)),
                name: build.template(block.name),
                remote_virtual_network_id: build.template(block.remote_virtual_network_id),
                virtual_hub_id: build.template(block.virtual_hub_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      internet_security_enabled: p.child('internet_security_enabled').out,
      name: p.child('name').out,
      remote_virtual_network_id: p.child('remote_virtual_network_id').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
    },
    virtual_hub_ip(name, block): {
      local p = path(['azurerm_virtual_hub_ip', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_hub_ip: {
              [name]: std.prune({
                name: build.template(block.name),
                private_ip_address: build.template(std.get(block, 'private_ip_address', null, true)),
                private_ip_allocation_method: build.template(std.get(block, 'private_ip_allocation_method', null, true)),
                public_ip_address_id: build.template(block.public_ip_address_id),
                subnet_id: build.template(block.subnet_id),
                virtual_hub_id: build.template(block.virtual_hub_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      private_ip_address: p.child('private_ip_address').out,
      private_ip_allocation_method: p.child('private_ip_allocation_method').out,
      public_ip_address_id: p.child('public_ip_address_id').out,
      subnet_id: p.child('subnet_id').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
    },
    virtual_hub_route_table(name, block): {
      local p = path(['azurerm_virtual_hub_route_table', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_hub_route_table: {
              [name]: std.prune({
                labels: build.template(std.get(block, 'labels', null, true)),
                name: build.template(block.name),
                virtual_hub_id: build.template(block.virtual_hub_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      labels: p.child('labels').out,
      name: p.child('name').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
    },
    virtual_hub_route_table_route(name, block): {
      local p = path(['azurerm_virtual_hub_route_table_route', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_hub_route_table_route: {
              [name]: std.prune({
                destinations: build.template(block.destinations),
                destinations_type: build.template(block.destinations_type),
                name: build.template(block.name),
                next_hop: build.template(block.next_hop),
                next_hop_type: build.template(std.get(block, 'next_hop_type', null, true)),
                route_table_id: build.template(block.route_table_id),
              }),
            },
          },
        },
      },
      destinations: p.child('destinations').out,
      destinations_type: p.child('destinations_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      next_hop: p.child('next_hop').out,
      next_hop_type: p.child('next_hop_type').out,
      route_table_id: p.child('route_table_id').out,
    },
    virtual_hub_routing_intent(name, block): {
      local p = path(['azurerm_virtual_hub_routing_intent', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_hub_routing_intent: {
              [name]: std.prune({
                name: build.template(block.name),
                virtual_hub_id: build.template(block.virtual_hub_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
    },
    virtual_hub_security_partner_provider(name, block): {
      local p = path(['azurerm_virtual_hub_security_partner_provider', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_hub_security_partner_provider: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                security_provider_name: build.template(block.security_provider_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_hub_id: build.template(std.get(block, 'virtual_hub_id', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      security_provider_name: p.child('security_provider_name').out,
      tags: p.child('tags').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
    },
    virtual_machine(name, block): {
      local p = path(['azurerm_virtual_machine', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_machine: {
              [name]: std.prune({
                delete_data_disks_on_termination: build.template(std.get(block, 'delete_data_disks_on_termination', null, true)),
                delete_os_disk_on_termination: build.template(std.get(block, 'delete_os_disk_on_termination', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                network_interface_ids: build.template(block.network_interface_ids),
                primary_network_interface_id: build.template(std.get(block, 'primary_network_interface_id', null, true)),
                proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                vm_size: build.template(block.vm_size),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      availability_set_id: p.child('availability_set_id').out,
      delete_data_disks_on_termination: p.child('delete_data_disks_on_termination').out,
      delete_os_disk_on_termination: p.child('delete_os_disk_on_termination').out,
      id: p.child('id').out,
      license_type: p.child('license_type').out,
      location: p.child('location').out,
      name: p.child('name').out,
      network_interface_ids: p.child('network_interface_ids').out,
      primary_network_interface_id: p.child('primary_network_interface_id').out,
      proximity_placement_group_id: p.child('proximity_placement_group_id').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      vm_size: p.child('vm_size').out,
      zones: p.child('zones').out,
    },
    virtual_machine_automanage_configuration_assignment(name, block): {
      local p = path(['azurerm_virtual_machine_automanage_configuration_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_machine_automanage_configuration_assignment: {
              [name]: std.prune({
                configuration_id: build.template(block.configuration_id),
                virtual_machine_id: build.template(block.virtual_machine_id),
              }),
            },
          },
        },
      },
      configuration_id: p.child('configuration_id').out,
      id: p.child('id').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
    },
    virtual_machine_data_disk_attachment(name, block): {
      local p = path(['azurerm_virtual_machine_data_disk_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_machine_data_disk_attachment: {
              [name]: std.prune({
                caching: build.template(block.caching),
                create_option: build.template(std.get(block, 'create_option', null, true)),
                lun: build.template(block.lun),
                managed_disk_id: build.template(block.managed_disk_id),
                virtual_machine_id: build.template(block.virtual_machine_id),
                write_accelerator_enabled: build.template(std.get(block, 'write_accelerator_enabled', null, true)),
              }),
            },
          },
        },
      },
      caching: p.child('caching').out,
      create_option: p.child('create_option').out,
      id: p.child('id').out,
      lun: p.child('lun').out,
      managed_disk_id: p.child('managed_disk_id').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
      write_accelerator_enabled: p.child('write_accelerator_enabled').out,
    },
    virtual_machine_extension(name, block): {
      local p = path(['azurerm_virtual_machine_extension', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_machine_extension: {
              [name]: std.prune({
                auto_upgrade_minor_version: build.template(std.get(block, 'auto_upgrade_minor_version', null, true)),
                automatic_upgrade_enabled: build.template(std.get(block, 'automatic_upgrade_enabled', null, true)),
                failure_suppression_enabled: build.template(std.get(block, 'failure_suppression_enabled', null, true)),
                name: build.template(block.name),
                protected_settings: build.template(std.get(block, 'protected_settings', null, true)),
                provision_after_extensions: build.template(std.get(block, 'provision_after_extensions', null, true)),
                publisher: build.template(block.publisher),
                settings: build.template(std.get(block, 'settings', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
                type_handler_version: build.template(block.type_handler_version),
                virtual_machine_id: build.template(block.virtual_machine_id),
              }),
            },
          },
        },
      },
      auto_upgrade_minor_version: p.child('auto_upgrade_minor_version').out,
      automatic_upgrade_enabled: p.child('automatic_upgrade_enabled').out,
      failure_suppression_enabled: p.child('failure_suppression_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      protected_settings: p.child('protected_settings').out,
      provision_after_extensions: p.child('provision_after_extensions').out,
      publisher: p.child('publisher').out,
      settings: p.child('settings').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      type_handler_version: p.child('type_handler_version').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
    },
    virtual_machine_gallery_application_assignment(name, block): {
      local p = path(['azurerm_virtual_machine_gallery_application_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_machine_gallery_application_assignment: {
              [name]: std.prune({
                configuration_blob_uri: build.template(std.get(block, 'configuration_blob_uri', null, true)),
                gallery_application_version_id: build.template(block.gallery_application_version_id),
                order: build.template(std.get(block, 'order', null, true)),
                tag: build.template(std.get(block, 'tag', null, true)),
                virtual_machine_id: build.template(block.virtual_machine_id),
              }),
            },
          },
        },
      },
      configuration_blob_uri: p.child('configuration_blob_uri').out,
      gallery_application_version_id: p.child('gallery_application_version_id').out,
      id: p.child('id').out,
      order: p.child('order').out,
      tag: p.child('tag').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
    },
    virtual_machine_implicit_data_disk_from_source(name, block): {
      local p = path(['azurerm_virtual_machine_implicit_data_disk_from_source', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_machine_implicit_data_disk_from_source: {
              [name]: std.prune({
                caching: build.template(std.get(block, 'caching', null, true)),
                create_option: build.template(block.create_option),
                disk_size_gb: build.template(block.disk_size_gb),
                lun: build.template(block.lun),
                name: build.template(block.name),
                source_resource_id: build.template(block.source_resource_id),
                virtual_machine_id: build.template(block.virtual_machine_id),
                write_accelerator_enabled: build.template(std.get(block, 'write_accelerator_enabled', null, true)),
              }),
            },
          },
        },
      },
      caching: p.child('caching').out,
      create_option: p.child('create_option').out,
      disk_size_gb: p.child('disk_size_gb').out,
      id: p.child('id').out,
      lun: p.child('lun').out,
      name: p.child('name').out,
      source_resource_id: p.child('source_resource_id').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
      write_accelerator_enabled: p.child('write_accelerator_enabled').out,
    },
    virtual_machine_packet_capture(name, block): {
      local p = path(['azurerm_virtual_machine_packet_capture', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_machine_packet_capture: {
              [name]: std.prune({
                maximum_bytes_per_packet: build.template(std.get(block, 'maximum_bytes_per_packet', null, true)),
                maximum_bytes_per_session: build.template(std.get(block, 'maximum_bytes_per_session', null, true)),
                maximum_capture_duration_in_seconds: build.template(std.get(block, 'maximum_capture_duration_in_seconds', null, true)),
                name: build.template(block.name),
                network_watcher_id: build.template(block.network_watcher_id),
                virtual_machine_id: build.template(block.virtual_machine_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      maximum_bytes_per_packet: p.child('maximum_bytes_per_packet').out,
      maximum_bytes_per_session: p.child('maximum_bytes_per_session').out,
      maximum_capture_duration_in_seconds: p.child('maximum_capture_duration_in_seconds').out,
      name: p.child('name').out,
      network_watcher_id: p.child('network_watcher_id').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
    },
    virtual_machine_restore_point(name, block): {
      local p = path(['azurerm_virtual_machine_restore_point', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_machine_restore_point: {
              [name]: std.prune({
                crash_consistency_mode_enabled: build.template(std.get(block, 'crash_consistency_mode_enabled', null, true)),
                excluded_disks: build.template(std.get(block, 'excluded_disks', null, true)),
                name: build.template(block.name),
                virtual_machine_restore_point_collection_id: build.template(block.virtual_machine_restore_point_collection_id),
              }),
            },
          },
        },
      },
      crash_consistency_mode_enabled: p.child('crash_consistency_mode_enabled').out,
      excluded_disks: p.child('excluded_disks').out,
      id: p.child('id').out,
      name: p.child('name').out,
      virtual_machine_restore_point_collection_id: p.child('virtual_machine_restore_point_collection_id').out,
    },
    virtual_machine_restore_point_collection(name, block): {
      local p = path(['azurerm_virtual_machine_restore_point_collection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_machine_restore_point_collection: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                source_virtual_machine_id: build.template(block.source_virtual_machine_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      source_virtual_machine_id: p.child('source_virtual_machine_id').out,
      tags: p.child('tags').out,
    },
    virtual_machine_run_command(name, block): {
      local p = path(['azurerm_virtual_machine_run_command', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_machine_run_command: {
              [name]: std.prune({
                error_blob_uri: build.template(std.get(block, 'error_blob_uri', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                output_blob_uri: build.template(std.get(block, 'output_blob_uri', null, true)),
                run_as_password: build.template(std.get(block, 'run_as_password', null, true)),
                run_as_user: build.template(std.get(block, 'run_as_user', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_machine_id: build.template(block.virtual_machine_id),
              }),
            },
          },
        },
      },
      error_blob_uri: p.child('error_blob_uri').out,
      id: p.child('id').out,
      instance_view: p.child('instance_view').out,
      location: p.child('location').out,
      name: p.child('name').out,
      output_blob_uri: p.child('output_blob_uri').out,
      run_as_password: p.child('run_as_password').out,
      run_as_user: p.child('run_as_user').out,
      tags: p.child('tags').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
    },
    virtual_machine_scale_set(name, block): {
      local p = path(['azurerm_virtual_machine_scale_set', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_machine_scale_set: {
              [name]: std.prune({
                automatic_os_upgrade: build.template(std.get(block, 'automatic_os_upgrade', null, true)),
                eviction_policy: build.template(std.get(block, 'eviction_policy', null, true)),
                health_probe_id: build.template(std.get(block, 'health_probe_id', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                overprovision: build.template(std.get(block, 'overprovision', null, true)),
                priority: build.template(std.get(block, 'priority', null, true)),
                proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                single_placement_group: build.template(std.get(block, 'single_placement_group', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                upgrade_policy_mode: build.template(block.upgrade_policy_mode),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      automatic_os_upgrade: p.child('automatic_os_upgrade').out,
      eviction_policy: p.child('eviction_policy').out,
      health_probe_id: p.child('health_probe_id').out,
      id: p.child('id').out,
      license_type: p.child('license_type').out,
      location: p.child('location').out,
      name: p.child('name').out,
      overprovision: p.child('overprovision').out,
      priority: p.child('priority').out,
      proximity_placement_group_id: p.child('proximity_placement_group_id').out,
      resource_group_name: p.child('resource_group_name').out,
      single_placement_group: p.child('single_placement_group').out,
      tags: p.child('tags').out,
      upgrade_policy_mode: p.child('upgrade_policy_mode').out,
      zones: p.child('zones').out,
    },
    virtual_machine_scale_set_extension(name, block): {
      local p = path(['azurerm_virtual_machine_scale_set_extension', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_machine_scale_set_extension: {
              [name]: std.prune({
                auto_upgrade_minor_version: build.template(std.get(block, 'auto_upgrade_minor_version', null, true)),
                automatic_upgrade_enabled: build.template(std.get(block, 'automatic_upgrade_enabled', null, true)),
                failure_suppression_enabled: build.template(std.get(block, 'failure_suppression_enabled', null, true)),
                force_update_tag: build.template(std.get(block, 'force_update_tag', null, true)),
                name: build.template(block.name),
                protected_settings: build.template(std.get(block, 'protected_settings', null, true)),
                provision_after_extensions: build.template(std.get(block, 'provision_after_extensions', null, true)),
                publisher: build.template(block.publisher),
                settings: build.template(std.get(block, 'settings', null, true)),
                type: build.template(block.type),
                type_handler_version: build.template(block.type_handler_version),
                virtual_machine_scale_set_id: build.template(block.virtual_machine_scale_set_id),
              }),
            },
          },
        },
      },
      auto_upgrade_minor_version: p.child('auto_upgrade_minor_version').out,
      automatic_upgrade_enabled: p.child('automatic_upgrade_enabled').out,
      failure_suppression_enabled: p.child('failure_suppression_enabled').out,
      force_update_tag: p.child('force_update_tag').out,
      id: p.child('id').out,
      name: p.child('name').out,
      protected_settings: p.child('protected_settings').out,
      provision_after_extensions: p.child('provision_after_extensions').out,
      publisher: p.child('publisher').out,
      settings: p.child('settings').out,
      type: p.child('type').out,
      type_handler_version: p.child('type_handler_version').out,
      virtual_machine_scale_set_id: p.child('virtual_machine_scale_set_id').out,
    },
    virtual_machine_scale_set_packet_capture(name, block): {
      local p = path(['azurerm_virtual_machine_scale_set_packet_capture', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_machine_scale_set_packet_capture: {
              [name]: std.prune({
                maximum_bytes_per_packet: build.template(std.get(block, 'maximum_bytes_per_packet', null, true)),
                maximum_bytes_per_session: build.template(std.get(block, 'maximum_bytes_per_session', null, true)),
                maximum_capture_duration_in_seconds: build.template(std.get(block, 'maximum_capture_duration_in_seconds', null, true)),
                name: build.template(block.name),
                network_watcher_id: build.template(block.network_watcher_id),
                virtual_machine_scale_set_id: build.template(block.virtual_machine_scale_set_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      maximum_bytes_per_packet: p.child('maximum_bytes_per_packet').out,
      maximum_bytes_per_session: p.child('maximum_bytes_per_session').out,
      maximum_capture_duration_in_seconds: p.child('maximum_capture_duration_in_seconds').out,
      name: p.child('name').out,
      network_watcher_id: p.child('network_watcher_id').out,
      virtual_machine_scale_set_id: p.child('virtual_machine_scale_set_id').out,
    },
    virtual_network(name, block): {
      local p = path(['azurerm_virtual_network', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_network: {
              [name]: std.prune({
                address_space: build.template(block.address_space),
                bgp_community: build.template(std.get(block, 'bgp_community', null, true)),
                edge_zone: build.template(std.get(block, 'edge_zone', null, true)),
                flow_timeout_in_minutes: build.template(std.get(block, 'flow_timeout_in_minutes', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      address_space: p.child('address_space').out,
      bgp_community: p.child('bgp_community').out,
      dns_servers: p.child('dns_servers').out,
      edge_zone: p.child('edge_zone').out,
      flow_timeout_in_minutes: p.child('flow_timeout_in_minutes').out,
      guid: p.child('guid').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      subnet: p.child('subnet').out,
      tags: p.child('tags').out,
    },
    virtual_network_dns_servers(name, block): {
      local p = path(['azurerm_virtual_network_dns_servers', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_network_dns_servers: {
              [name]: std.prune({
                dns_servers: build.template(std.get(block, 'dns_servers', null, true)),
                virtual_network_id: build.template(block.virtual_network_id),
              }),
            },
          },
        },
      },
      dns_servers: p.child('dns_servers').out,
      id: p.child('id').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    virtual_network_gateway(name, block): {
      local p = path(['azurerm_virtual_network_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_network_gateway: {
              [name]: std.prune({
                bgp_route_translation_for_nat_enabled: build.template(std.get(block, 'bgp_route_translation_for_nat_enabled', null, true)),
                default_local_network_gateway_id: build.template(std.get(block, 'default_local_network_gateway_id', null, true)),
                dns_forwarding_enabled: build.template(std.get(block, 'dns_forwarding_enabled', null, true)),
                edge_zone: build.template(std.get(block, 'edge_zone', null, true)),
                ip_sec_replay_protection_enabled: build.template(std.get(block, 'ip_sec_replay_protection_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                private_ip_address_enabled: build.template(std.get(block, 'private_ip_address_enabled', null, true)),
                remote_vnet_traffic_enabled: build.template(std.get(block, 'remote_vnet_traffic_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
                virtual_wan_traffic_enabled: build.template(std.get(block, 'virtual_wan_traffic_enabled', null, true)),
                vpn_type: build.template(std.get(block, 'vpn_type', null, true)),
              }),
            },
          },
        },
      },
      active_active: p.child('active_active').out,
      bgp_route_translation_for_nat_enabled: p.child('bgp_route_translation_for_nat_enabled').out,
      default_local_network_gateway_id: p.child('default_local_network_gateway_id').out,
      dns_forwarding_enabled: p.child('dns_forwarding_enabled').out,
      edge_zone: p.child('edge_zone').out,
      enable_bgp: p.child('enable_bgp').out,
      generation: p.child('generation').out,
      id: p.child('id').out,
      ip_sec_replay_protection_enabled: p.child('ip_sec_replay_protection_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_ip_address_enabled: p.child('private_ip_address_enabled').out,
      remote_vnet_traffic_enabled: p.child('remote_vnet_traffic_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      virtual_wan_traffic_enabled: p.child('virtual_wan_traffic_enabled').out,
      vpn_type: p.child('vpn_type').out,
    },
    virtual_network_gateway_connection(name, block): {
      local p = path(['azurerm_virtual_network_gateway_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_network_gateway_connection: {
              [name]: std.prune({
                authorization_key: build.template(std.get(block, 'authorization_key', null, true)),
                connection_mode: build.template(std.get(block, 'connection_mode', null, true)),
                dpd_timeout_seconds: build.template(std.get(block, 'dpd_timeout_seconds', null, true)),
                egress_nat_rule_ids: build.template(std.get(block, 'egress_nat_rule_ids', null, true)),
                express_route_circuit_id: build.template(std.get(block, 'express_route_circuit_id', null, true)),
                ingress_nat_rule_ids: build.template(std.get(block, 'ingress_nat_rule_ids', null, true)),
                local_azure_ip_address_enabled: build.template(std.get(block, 'local_azure_ip_address_enabled', null, true)),
                local_network_gateway_id: build.template(std.get(block, 'local_network_gateway_id', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                peer_virtual_network_gateway_id: build.template(std.get(block, 'peer_virtual_network_gateway_id', null, true)),
                private_link_fast_path_enabled: build.template(std.get(block, 'private_link_fast_path_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
                virtual_network_gateway_id: build.template(block.virtual_network_gateway_id),
              }),
            },
          },
        },
      },
      authorization_key: p.child('authorization_key').out,
      connection_mode: p.child('connection_mode').out,
      connection_protocol: p.child('connection_protocol').out,
      dpd_timeout_seconds: p.child('dpd_timeout_seconds').out,
      egress_nat_rule_ids: p.child('egress_nat_rule_ids').out,
      enable_bgp: p.child('enable_bgp').out,
      express_route_circuit_id: p.child('express_route_circuit_id').out,
      express_route_gateway_bypass: p.child('express_route_gateway_bypass').out,
      id: p.child('id').out,
      ingress_nat_rule_ids: p.child('ingress_nat_rule_ids').out,
      local_azure_ip_address_enabled: p.child('local_azure_ip_address_enabled').out,
      local_network_gateway_id: p.child('local_network_gateway_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      peer_virtual_network_gateway_id: p.child('peer_virtual_network_gateway_id').out,
      private_link_fast_path_enabled: p.child('private_link_fast_path_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      routing_weight: p.child('routing_weight').out,
      shared_key: p.child('shared_key').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      use_policy_based_traffic_selectors: p.child('use_policy_based_traffic_selectors').out,
      virtual_network_gateway_id: p.child('virtual_network_gateway_id').out,
    },
    virtual_network_gateway_nat_rule(name, block): {
      local p = path(['azurerm_virtual_network_gateway_nat_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_network_gateway_nat_rule: {
              [name]: std.prune({
                ip_configuration_id: build.template(std.get(block, 'ip_configuration_id', null, true)),
                mode: build.template(std.get(block, 'mode', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                type: build.template(std.get(block, 'type', null, true)),
                virtual_network_gateway_id: build.template(block.virtual_network_gateway_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ip_configuration_id: p.child('ip_configuration_id').out,
      mode: p.child('mode').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      type: p.child('type').out,
      virtual_network_gateway_id: p.child('virtual_network_gateway_id').out,
    },
    virtual_network_peering(name, block): {
      local p = path(['azurerm_virtual_network_peering', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_network_peering: {
              [name]: std.prune({
                allow_forwarded_traffic: build.template(std.get(block, 'allow_forwarded_traffic', null, true)),
                allow_gateway_transit: build.template(std.get(block, 'allow_gateway_transit', null, true)),
                allow_virtual_network_access: build.template(std.get(block, 'allow_virtual_network_access', null, true)),
                local_subnet_names: build.template(std.get(block, 'local_subnet_names', null, true)),
                name: build.template(block.name),
                only_ipv6_peering_enabled: build.template(std.get(block, 'only_ipv6_peering_enabled', null, true)),
                peer_complete_virtual_networks_enabled: build.template(std.get(block, 'peer_complete_virtual_networks_enabled', null, true)),
                remote_subnet_names: build.template(std.get(block, 'remote_subnet_names', null, true)),
                remote_virtual_network_id: build.template(block.remote_virtual_network_id),
                resource_group_name: build.template(block.resource_group_name),
                triggers: build.template(std.get(block, 'triggers', null, true)),
                use_remote_gateways: build.template(std.get(block, 'use_remote_gateways', null, true)),
                virtual_network_name: build.template(block.virtual_network_name),
              }),
            },
          },
        },
      },
      allow_forwarded_traffic: p.child('allow_forwarded_traffic').out,
      allow_gateway_transit: p.child('allow_gateway_transit').out,
      allow_virtual_network_access: p.child('allow_virtual_network_access').out,
      id: p.child('id').out,
      local_subnet_names: p.child('local_subnet_names').out,
      name: p.child('name').out,
      only_ipv6_peering_enabled: p.child('only_ipv6_peering_enabled').out,
      peer_complete_virtual_networks_enabled: p.child('peer_complete_virtual_networks_enabled').out,
      remote_subnet_names: p.child('remote_subnet_names').out,
      remote_virtual_network_id: p.child('remote_virtual_network_id').out,
      resource_group_name: p.child('resource_group_name').out,
      triggers: p.child('triggers').out,
      use_remote_gateways: p.child('use_remote_gateways').out,
      virtual_network_name: p.child('virtual_network_name').out,
    },
    virtual_wan(name, block): {
      local p = path(['azurerm_virtual_wan', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_virtual_wan: {
              [name]: std.prune({
                allow_branch_to_branch_traffic: build.template(std.get(block, 'allow_branch_to_branch_traffic', null, true)),
                disable_vpn_encryption: build.template(std.get(block, 'disable_vpn_encryption', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                office365_local_breakout_category: build.template(std.get(block, 'office365_local_breakout_category', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      allow_branch_to_branch_traffic: p.child('allow_branch_to_branch_traffic').out,
      disable_vpn_encryption: p.child('disable_vpn_encryption').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      office365_local_breakout_category: p.child('office365_local_breakout_category').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
    },
    vmware_cluster(name, block): {
      local p = path(['azurerm_vmware_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_vmware_cluster: {
              [name]: std.prune({
                cluster_node_count: build.template(block.cluster_node_count),
                name: build.template(block.name),
                sku_name: build.template(block.sku_name),
                vmware_cloud_id: build.template(block.vmware_cloud_id),
              }),
            },
          },
        },
      },
      cluster_node_count: p.child('cluster_node_count').out,
      cluster_number: p.child('cluster_number').out,
      hosts: p.child('hosts').out,
      id: p.child('id').out,
      name: p.child('name').out,
      sku_name: p.child('sku_name').out,
      vmware_cloud_id: p.child('vmware_cloud_id').out,
    },
    vmware_express_route_authorization(name, block): {
      local p = path(['azurerm_vmware_express_route_authorization', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_vmware_express_route_authorization: {
              [name]: std.prune({
                name: build.template(block.name),
                private_cloud_id: build.template(block.private_cloud_id),
              }),
            },
          },
        },
      },
      express_route_authorization_id: p.child('express_route_authorization_id').out,
      express_route_authorization_key: p.child('express_route_authorization_key').out,
      id: p.child('id').out,
      name: p.child('name').out,
      private_cloud_id: p.child('private_cloud_id').out,
    },
    vmware_netapp_volume_attachment(name, block): {
      local p = path(['azurerm_vmware_netapp_volume_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_vmware_netapp_volume_attachment: {
              [name]: std.prune({
                name: build.template(block.name),
                netapp_volume_id: build.template(block.netapp_volume_id),
                vmware_cluster_id: build.template(block.vmware_cluster_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      netapp_volume_id: p.child('netapp_volume_id').out,
      vmware_cluster_id: p.child('vmware_cluster_id').out,
    },
    vmware_private_cloud(name, block): {
      local p = path(['azurerm_vmware_private_cloud', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_vmware_private_cloud: {
              [name]: std.prune({
                internet_connection_enabled: build.template(std.get(block, 'internet_connection_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                network_subnet_cidr: build.template(block.network_subnet_cidr),
                nsxt_password: build.template(std.get(block, 'nsxt_password', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku_name: build.template(block.sku_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                vcenter_password: build.template(std.get(block, 'vcenter_password', null, true)),
              }),
            },
          },
        },
      },
      circuit: p.child('circuit').out,
      hcx_cloud_manager_endpoint: p.child('hcx_cloud_manager_endpoint').out,
      id: p.child('id').out,
      internet_connection_enabled: p.child('internet_connection_enabled').out,
      location: p.child('location').out,
      management_subnet_cidr: p.child('management_subnet_cidr').out,
      name: p.child('name').out,
      network_subnet_cidr: p.child('network_subnet_cidr').out,
      nsxt_certificate_thumbprint: p.child('nsxt_certificate_thumbprint').out,
      nsxt_manager_endpoint: p.child('nsxt_manager_endpoint').out,
      nsxt_password: p.child('nsxt_password').out,
      provisioning_subnet_cidr: p.child('provisioning_subnet_cidr').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      vcenter_certificate_thumbprint: p.child('vcenter_certificate_thumbprint').out,
      vcenter_password: p.child('vcenter_password').out,
      vcsa_endpoint: p.child('vcsa_endpoint').out,
      vmotion_subnet_cidr: p.child('vmotion_subnet_cidr').out,
    },
    voice_services_communications_gateway(name, block): {
      local p = path(['azurerm_voice_services_communications_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_voice_services_communications_gateway: {
              [name]: std.prune({
                api_bridge: build.template(std.get(block, 'api_bridge', null, true)),
                auto_generated_domain_name_label_scope: build.template(std.get(block, 'auto_generated_domain_name_label_scope', null, true)),
                codecs: build.template(block.codecs),
                connectivity: build.template(block.connectivity),
                e911_type: build.template(block.e911_type),
                emergency_dial_strings: build.template(std.get(block, 'emergency_dial_strings', null, true)),
                location: build.template(block.location),
                microsoft_teams_voicemail_pilot_number: build.template(std.get(block, 'microsoft_teams_voicemail_pilot_number', null, true)),
                name: build.template(block.name),
                on_prem_mcp_enabled: build.template(std.get(block, 'on_prem_mcp_enabled', null, true)),
                platforms: build.template(block.platforms),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      api_bridge: p.child('api_bridge').out,
      auto_generated_domain_name_label_scope: p.child('auto_generated_domain_name_label_scope').out,
      codecs: p.child('codecs').out,
      connectivity: p.child('connectivity').out,
      e911_type: p.child('e911_type').out,
      emergency_dial_strings: p.child('emergency_dial_strings').out,
      id: p.child('id').out,
      location: p.child('location').out,
      microsoft_teams_voicemail_pilot_number: p.child('microsoft_teams_voicemail_pilot_number').out,
      name: p.child('name').out,
      on_prem_mcp_enabled: p.child('on_prem_mcp_enabled').out,
      platforms: p.child('platforms').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    voice_services_communications_gateway_test_line(name, block): {
      local p = path(['azurerm_voice_services_communications_gateway_test_line', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_voice_services_communications_gateway_test_line: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                phone_number: build.template(block.phone_number),
                purpose: build.template(block.purpose),
                tags: build.template(std.get(block, 'tags', null, true)),
                voice_services_communications_gateway_id: build.template(block.voice_services_communications_gateway_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      phone_number: p.child('phone_number').out,
      purpose: p.child('purpose').out,
      tags: p.child('tags').out,
      voice_services_communications_gateway_id: p.child('voice_services_communications_gateway_id').out,
    },
    vpn_gateway(name, block): {
      local p = path(['azurerm_vpn_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_vpn_gateway: {
              [name]: std.prune({
                bgp_route_translation_for_nat_enabled: build.template(std.get(block, 'bgp_route_translation_for_nat_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                routing_preference: build.template(std.get(block, 'routing_preference', null, true)),
                scale_unit: build.template(std.get(block, 'scale_unit', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_hub_id: build.template(block.virtual_hub_id),
              }),
            },
          },
        },
      },
      bgp_route_translation_for_nat_enabled: p.child('bgp_route_translation_for_nat_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      routing_preference: p.child('routing_preference').out,
      scale_unit: p.child('scale_unit').out,
      tags: p.child('tags').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
    },
    vpn_gateway_connection(name, block): {
      local p = path(['azurerm_vpn_gateway_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_vpn_gateway_connection: {
              [name]: std.prune({
                internet_security_enabled: build.template(std.get(block, 'internet_security_enabled', null, true)),
                name: build.template(block.name),
                remote_vpn_site_id: build.template(block.remote_vpn_site_id),
                vpn_gateway_id: build.template(block.vpn_gateway_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      internet_security_enabled: p.child('internet_security_enabled').out,
      name: p.child('name').out,
      remote_vpn_site_id: p.child('remote_vpn_site_id').out,
      vpn_gateway_id: p.child('vpn_gateway_id').out,
    },
    vpn_gateway_nat_rule(name, block): {
      local p = path(['azurerm_vpn_gateway_nat_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_vpn_gateway_nat_rule: {
              [name]: std.prune({
                ip_configuration_id: build.template(std.get(block, 'ip_configuration_id', null, true)),
                mode: build.template(std.get(block, 'mode', null, true)),
                name: build.template(block.name),
                type: build.template(std.get(block, 'type', null, true)),
                vpn_gateway_id: build.template(block.vpn_gateway_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ip_configuration_id: p.child('ip_configuration_id').out,
      mode: p.child('mode').out,
      name: p.child('name').out,
      type: p.child('type').out,
      vpn_gateway_id: p.child('vpn_gateway_id').out,
    },
    vpn_server_configuration(name, block): {
      local p = path(['azurerm_vpn_server_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_vpn_server_configuration: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpn_authentication_types: build.template(block.vpn_authentication_types),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      vpn_authentication_types: p.child('vpn_authentication_types').out,
      vpn_protocols: p.child('vpn_protocols').out,
    },
    vpn_server_configuration_policy_group(name, block): {
      local p = path(['azurerm_vpn_server_configuration_policy_group', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_vpn_server_configuration_policy_group: {
              [name]: std.prune({
                is_default: build.template(std.get(block, 'is_default', null, true)),
                name: build.template(block.name),
                priority: build.template(std.get(block, 'priority', null, true)),
                vpn_server_configuration_id: build.template(block.vpn_server_configuration_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      is_default: p.child('is_default').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      vpn_server_configuration_id: p.child('vpn_server_configuration_id').out,
    },
    vpn_site(name, block): {
      local p = path(['azurerm_vpn_site', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_vpn_site: {
              [name]: std.prune({
                address_cidrs: build.template(std.get(block, 'address_cidrs', null, true)),
                device_model: build.template(std.get(block, 'device_model', null, true)),
                device_vendor: build.template(std.get(block, 'device_vendor', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_wan_id: build.template(block.virtual_wan_id),
              }),
            },
          },
        },
      },
      address_cidrs: p.child('address_cidrs').out,
      device_model: p.child('device_model').out,
      device_vendor: p.child('device_vendor').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      virtual_wan_id: p.child('virtual_wan_id').out,
    },
    web_app_active_slot(name, block): {
      local p = path(['azurerm_web_app_active_slot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_web_app_active_slot: {
              [name]: std.prune({
                overwrite_network_config: build.template(std.get(block, 'overwrite_network_config', null, true)),
                slot_id: build.template(block.slot_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      last_successful_swap: p.child('last_successful_swap').out,
      overwrite_network_config: p.child('overwrite_network_config').out,
      slot_id: p.child('slot_id').out,
    },
    web_app_hybrid_connection(name, block): {
      local p = path(['azurerm_web_app_hybrid_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_web_app_hybrid_connection: {
              [name]: std.prune({
                hostname: build.template(block.hostname),
                port: build.template(block.port),
                relay_id: build.template(block.relay_id),
                send_key_name: build.template(std.get(block, 'send_key_name', null, true)),
                web_app_id: build.template(block.web_app_id),
              }),
            },
          },
        },
      },
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      namespace_name: p.child('namespace_name').out,
      port: p.child('port').out,
      relay_id: p.child('relay_id').out,
      relay_name: p.child('relay_name').out,
      send_key_name: p.child('send_key_name').out,
      send_key_value: p.child('send_key_value').out,
      service_bus_namespace: p.child('service_bus_namespace').out,
      service_bus_suffix: p.child('service_bus_suffix').out,
      web_app_id: p.child('web_app_id').out,
    },
    web_application_firewall_policy(name, block): {
      local p = path(['azurerm_web_application_firewall_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_web_application_firewall_policy: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      http_listener_ids: p.child('http_listener_ids').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      path_based_rule_ids: p.child('path_based_rule_ids').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    web_pubsub(name, block): {
      local p = path(['azurerm_web_pubsub', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_web_pubsub: {
              [name]: std.prune({
                aad_auth_enabled: build.template(std.get(block, 'aad_auth_enabled', null, true)),
                capacity: build.template(std.get(block, 'capacity', null, true)),
                local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sku: build.template(block.sku),
                tags: build.template(std.get(block, 'tags', null, true)),
                tls_client_cert_enabled: build.template(std.get(block, 'tls_client_cert_enabled', null, true)),
              }),
            },
          },
        },
      },
      aad_auth_enabled: p.child('aad_auth_enabled').out,
      capacity: p.child('capacity').out,
      external_ip: p.child('external_ip').out,
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      local_auth_enabled: p.child('local_auth_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_access_key: p.child('primary_access_key').out,
      primary_connection_string: p.child('primary_connection_string').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      public_port: p.child('public_port').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      server_port: p.child('server_port').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      tls_client_cert_enabled: p.child('tls_client_cert_enabled').out,
      version: p.child('version').out,
    },
    web_pubsub_custom_certificate(name, block): {
      local p = path(['azurerm_web_pubsub_custom_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_web_pubsub_custom_certificate: {
              [name]: std.prune({
                custom_certificate_id: build.template(block.custom_certificate_id),
                name: build.template(block.name),
                web_pubsub_id: build.template(block.web_pubsub_id),
              }),
            },
          },
        },
      },
      certificate_version: p.child('certificate_version').out,
      custom_certificate_id: p.child('custom_certificate_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      web_pubsub_id: p.child('web_pubsub_id').out,
    },
    web_pubsub_custom_domain(name, block): {
      local p = path(['azurerm_web_pubsub_custom_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_web_pubsub_custom_domain: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                name: build.template(block.name),
                web_pubsub_custom_certificate_id: build.template(block.web_pubsub_custom_certificate_id),
                web_pubsub_id: build.template(block.web_pubsub_id),
              }),
            },
          },
        },
      },
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      web_pubsub_custom_certificate_id: p.child('web_pubsub_custom_certificate_id').out,
      web_pubsub_id: p.child('web_pubsub_id').out,
    },
    web_pubsub_hub(name, block): {
      local p = path(['azurerm_web_pubsub_hub', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_web_pubsub_hub: {
              [name]: std.prune({
                anonymous_connections_enabled: build.template(std.get(block, 'anonymous_connections_enabled', null, true)),
                name: build.template(block.name),
                web_pubsub_id: build.template(block.web_pubsub_id),
              }),
            },
          },
        },
      },
      anonymous_connections_enabled: p.child('anonymous_connections_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      web_pubsub_id: p.child('web_pubsub_id').out,
    },
    web_pubsub_network_acl(name, block): {
      local p = path(['azurerm_web_pubsub_network_acl', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_web_pubsub_network_acl: {
              [name]: std.prune({
                default_action: build.template(std.get(block, 'default_action', null, true)),
                web_pubsub_id: build.template(block.web_pubsub_id),
              }),
            },
          },
        },
      },
      default_action: p.child('default_action').out,
      id: p.child('id').out,
      web_pubsub_id: p.child('web_pubsub_id').out,
    },
    web_pubsub_shared_private_link_resource(name, block): {
      local p = path(['azurerm_web_pubsub_shared_private_link_resource', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_web_pubsub_shared_private_link_resource: {
              [name]: std.prune({
                name: build.template(block.name),
                request_message: build.template(std.get(block, 'request_message', null, true)),
                subresource_name: build.template(block.subresource_name),
                target_resource_id: build.template(block.target_resource_id),
                web_pubsub_id: build.template(block.web_pubsub_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      request_message: p.child('request_message').out,
      status: p.child('status').out,
      subresource_name: p.child('subresource_name').out,
      target_resource_id: p.child('target_resource_id').out,
      web_pubsub_id: p.child('web_pubsub_id').out,
    },
    windows_function_app(name, block): {
      local p = path(['azurerm_windows_function_app', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_windows_function_app: {
              [name]: std.prune({
                app_settings: build.template(std.get(block, 'app_settings', null, true)),
                builtin_logging_enabled: build.template(std.get(block, 'builtin_logging_enabled', null, true)),
                client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null, true)),
                client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null, true)),
                client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null, true)),
                content_share_force_disabled: build.template(std.get(block, 'content_share_force_disabled', null, true)),
                daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null, true)),
                functions_extension_version: build.template(std.get(block, 'functions_extension_version', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                service_plan_id: build.template(block.service_plan_id),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_account_name: build.template(std.get(block, 'storage_account_name', null, true)),
                storage_key_vault_secret_id: build.template(std.get(block, 'storage_key_vault_secret_id', null, true)),
                storage_uses_managed_identity: build.template(std.get(block, 'storage_uses_managed_identity', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null, true)),
                vnet_image_pull_enabled: build.template(std.get(block, 'vnet_image_pull_enabled', null, true)),
                webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null, true)),
              }),
            },
          },
        },
      },
      app_settings: p.child('app_settings').out,
      builtin_logging_enabled: p.child('builtin_logging_enabled').out,
      client_certificate_enabled: p.child('client_certificate_enabled').out,
      client_certificate_exclusion_paths: p.child('client_certificate_exclusion_paths').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      content_share_force_disabled: p.child('content_share_force_disabled').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      daily_memory_time_quota: p.child('daily_memory_time_quota').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      ftp_publish_basic_authentication_enabled: p.child('ftp_publish_basic_authentication_enabled').out,
      functions_extension_version: p.child('functions_extension_version').out,
      hosting_environment_id: p.child('hosting_environment_id').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      key_vault_reference_identity_id: p.child('key_vault_reference_identity_id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      service_plan_id: p.child('service_plan_id').out,
      site_credential: p.child('site_credential').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_name: p.child('storage_account_name').out,
      storage_key_vault_secret_id: p.child('storage_key_vault_secret_id').out,
      storage_uses_managed_identity: p.child('storage_uses_managed_identity').out,
      tags: p.child('tags').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
      vnet_image_pull_enabled: p.child('vnet_image_pull_enabled').out,
      webdeploy_publish_basic_authentication_enabled: p.child('webdeploy_publish_basic_authentication_enabled').out,
      zip_deploy_file: p.child('zip_deploy_file').out,
    },
    windows_function_app_slot(name, block): {
      local p = path(['azurerm_windows_function_app_slot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_windows_function_app_slot: {
              [name]: std.prune({
                app_settings: build.template(std.get(block, 'app_settings', null, true)),
                builtin_logging_enabled: build.template(std.get(block, 'builtin_logging_enabled', null, true)),
                client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null, true)),
                client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null, true)),
                client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null, true)),
                content_share_force_disabled: build.template(std.get(block, 'content_share_force_disabled', null, true)),
                daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null, true)),
                function_app_id: build.template(block.function_app_id),
                functions_extension_version: build.template(std.get(block, 'functions_extension_version', null, true)),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                service_plan_id: build.template(std.get(block, 'service_plan_id', null, true)),
                storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null, true)),
                storage_account_name: build.template(std.get(block, 'storage_account_name', null, true)),
                storage_key_vault_secret_id: build.template(std.get(block, 'storage_key_vault_secret_id', null, true)),
                storage_uses_managed_identity: build.template(std.get(block, 'storage_uses_managed_identity', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null, true)),
                vnet_image_pull_enabled: build.template(std.get(block, 'vnet_image_pull_enabled', null, true)),
                webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null, true)),
              }),
            },
          },
        },
      },
      app_settings: p.child('app_settings').out,
      builtin_logging_enabled: p.child('builtin_logging_enabled').out,
      client_certificate_enabled: p.child('client_certificate_enabled').out,
      client_certificate_exclusion_paths: p.child('client_certificate_exclusion_paths').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      content_share_force_disabled: p.child('content_share_force_disabled').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      daily_memory_time_quota: p.child('daily_memory_time_quota').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      ftp_publish_basic_authentication_enabled: p.child('ftp_publish_basic_authentication_enabled').out,
      function_app_id: p.child('function_app_id').out,
      functions_extension_version: p.child('functions_extension_version').out,
      hosting_environment_id: p.child('hosting_environment_id').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      key_vault_reference_identity_id: p.child('key_vault_reference_identity_id').out,
      kind: p.child('kind').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      service_plan_id: p.child('service_plan_id').out,
      site_credential: p.child('site_credential').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_name: p.child('storage_account_name').out,
      storage_key_vault_secret_id: p.child('storage_key_vault_secret_id').out,
      storage_uses_managed_identity: p.child('storage_uses_managed_identity').out,
      tags: p.child('tags').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
      vnet_image_pull_enabled: p.child('vnet_image_pull_enabled').out,
      webdeploy_publish_basic_authentication_enabled: p.child('webdeploy_publish_basic_authentication_enabled').out,
    },
    windows_virtual_machine(name, block): {
      local p = path(['azurerm_windows_virtual_machine', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_windows_virtual_machine: {
              [name]: std.prune({
                admin_password: build.template(block.admin_password),
                admin_username: build.template(block.admin_username),
                allow_extension_operations: build.template(std.get(block, 'allow_extension_operations', null, true)),
                availability_set_id: build.template(std.get(block, 'availability_set_id', null, true)),
                bypass_platform_safety_checks_on_user_schedule_enabled: build.template(std.get(block, 'bypass_platform_safety_checks_on_user_schedule_enabled', null, true)),
                capacity_reservation_group_id: build.template(std.get(block, 'capacity_reservation_group_id', null, true)),
                custom_data: build.template(std.get(block, 'custom_data', null, true)),
                dedicated_host_group_id: build.template(std.get(block, 'dedicated_host_group_id', null, true)),
                dedicated_host_id: build.template(std.get(block, 'dedicated_host_id', null, true)),
                edge_zone: build.template(std.get(block, 'edge_zone', null, true)),
                enable_automatic_updates: build.template(std.get(block, 'enable_automatic_updates', null, true)),
                encryption_at_host_enabled: build.template(std.get(block, 'encryption_at_host_enabled', null, true)),
                eviction_policy: build.template(std.get(block, 'eviction_policy', null, true)),
                extensions_time_budget: build.template(std.get(block, 'extensions_time_budget', null, true)),
                hotpatching_enabled: build.template(std.get(block, 'hotpatching_enabled', null, true)),
                license_type: build.template(std.get(block, 'license_type', null, true)),
                location: build.template(block.location),
                max_bid_price: build.template(std.get(block, 'max_bid_price', null, true)),
                name: build.template(block.name),
                network_interface_ids: build.template(block.network_interface_ids),
                patch_assessment_mode: build.template(std.get(block, 'patch_assessment_mode', null, true)),
                patch_mode: build.template(std.get(block, 'patch_mode', null, true)),
                platform_fault_domain: build.template(std.get(block, 'platform_fault_domain', null, true)),
                priority: build.template(std.get(block, 'priority', null, true)),
                provision_vm_agent: build.template(std.get(block, 'provision_vm_agent', null, true)),
                proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null, true)),
                reboot_setting: build.template(std.get(block, 'reboot_setting', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                secure_boot_enabled: build.template(std.get(block, 'secure_boot_enabled', null, true)),
                size: build.template(block.size),
                source_image_id: build.template(std.get(block, 'source_image_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                timezone: build.template(std.get(block, 'timezone', null, true)),
                user_data: build.template(std.get(block, 'user_data', null, true)),
                virtual_machine_scale_set_id: build.template(std.get(block, 'virtual_machine_scale_set_id', null, true)),
                vm_agent_platform_updates_enabled: build.template(std.get(block, 'vm_agent_platform_updates_enabled', null, true)),
                vtpm_enabled: build.template(std.get(block, 'vtpm_enabled', null, true)),
                zone: build.template(std.get(block, 'zone', null, true)),
              }),
            },
          },
        },
      },
      admin_password: p.child('admin_password').out,
      admin_username: p.child('admin_username').out,
      allow_extension_operations: p.child('allow_extension_operations').out,
      availability_set_id: p.child('availability_set_id').out,
      bypass_platform_safety_checks_on_user_schedule_enabled: p.child('bypass_platform_safety_checks_on_user_schedule_enabled').out,
      capacity_reservation_group_id: p.child('capacity_reservation_group_id').out,
      computer_name: p.child('computer_name').out,
      custom_data: p.child('custom_data').out,
      dedicated_host_group_id: p.child('dedicated_host_group_id').out,
      dedicated_host_id: p.child('dedicated_host_id').out,
      disk_controller_type: p.child('disk_controller_type').out,
      edge_zone: p.child('edge_zone').out,
      enable_automatic_updates: p.child('enable_automatic_updates').out,
      encryption_at_host_enabled: p.child('encryption_at_host_enabled').out,
      eviction_policy: p.child('eviction_policy').out,
      extensions_time_budget: p.child('extensions_time_budget').out,
      hotpatching_enabled: p.child('hotpatching_enabled').out,
      id: p.child('id').out,
      license_type: p.child('license_type').out,
      location: p.child('location').out,
      max_bid_price: p.child('max_bid_price').out,
      name: p.child('name').out,
      network_interface_ids: p.child('network_interface_ids').out,
      patch_assessment_mode: p.child('patch_assessment_mode').out,
      patch_mode: p.child('patch_mode').out,
      platform_fault_domain: p.child('platform_fault_domain').out,
      priority: p.child('priority').out,
      private_ip_address: p.child('private_ip_address').out,
      private_ip_addresses: p.child('private_ip_addresses').out,
      provision_vm_agent: p.child('provision_vm_agent').out,
      proximity_placement_group_id: p.child('proximity_placement_group_id').out,
      public_ip_address: p.child('public_ip_address').out,
      public_ip_addresses: p.child('public_ip_addresses').out,
      reboot_setting: p.child('reboot_setting').out,
      resource_group_name: p.child('resource_group_name').out,
      secure_boot_enabled: p.child('secure_boot_enabled').out,
      size: p.child('size').out,
      source_image_id: p.child('source_image_id').out,
      tags: p.child('tags').out,
      timezone: p.child('timezone').out,
      user_data: p.child('user_data').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
      virtual_machine_scale_set_id: p.child('virtual_machine_scale_set_id').out,
      vm_agent_platform_updates_enabled: p.child('vm_agent_platform_updates_enabled').out,
      vtpm_enabled: p.child('vtpm_enabled').out,
      zone: p.child('zone').out,
    },
    windows_virtual_machine_scale_set(name, block): {
      local p = path(['azurerm_windows_virtual_machine_scale_set', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_windows_virtual_machine_scale_set: {
              [name]: std.prune({
                admin_password: build.template(block.admin_password),
                admin_username: build.template(block.admin_username),
                capacity_reservation_group_id: build.template(std.get(block, 'capacity_reservation_group_id', null, true)),
                custom_data: build.template(std.get(block, 'custom_data', null, true)),
                do_not_run_extensions_on_overprovisioned_machines: build.template(std.get(block, 'do_not_run_extensions_on_overprovisioned_machines', null, true)),
                edge_zone: build.template(std.get(block, 'edge_zone', null, true)),
                enable_automatic_updates: build.template(std.get(block, 'enable_automatic_updates', null, true)),
                encryption_at_host_enabled: build.template(std.get(block, 'encryption_at_host_enabled', null, true)),
                eviction_policy: build.template(std.get(block, 'eviction_policy', null, true)),
                extension_operations_enabled: build.template(std.get(block, 'extension_operations_enabled', null, true)),
                extensions_time_budget: build.template(std.get(block, 'extensions_time_budget', null, true)),
                health_probe_id: build.template(std.get(block, 'health_probe_id', null, true)),
                host_group_id: build.template(std.get(block, 'host_group_id', null, true)),
                instances: build.template(block.instances),
                license_type: build.template(std.get(block, 'license_type', null, true)),
                location: build.template(block.location),
                max_bid_price: build.template(std.get(block, 'max_bid_price', null, true)),
                name: build.template(block.name),
                overprovision: build.template(std.get(block, 'overprovision', null, true)),
                priority: build.template(std.get(block, 'priority', null, true)),
                provision_vm_agent: build.template(std.get(block, 'provision_vm_agent', null, true)),
                proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                secure_boot_enabled: build.template(std.get(block, 'secure_boot_enabled', null, true)),
                single_placement_group: build.template(std.get(block, 'single_placement_group', null, true)),
                sku: build.template(block.sku),
                source_image_id: build.template(std.get(block, 'source_image_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                timezone: build.template(std.get(block, 'timezone', null, true)),
                upgrade_mode: build.template(std.get(block, 'upgrade_mode', null, true)),
                user_data: build.template(std.get(block, 'user_data', null, true)),
                vtpm_enabled: build.template(std.get(block, 'vtpm_enabled', null, true)),
                zone_balance: build.template(std.get(block, 'zone_balance', null, true)),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      admin_password: p.child('admin_password').out,
      admin_username: p.child('admin_username').out,
      capacity_reservation_group_id: p.child('capacity_reservation_group_id').out,
      computer_name_prefix: p.child('computer_name_prefix').out,
      custom_data: p.child('custom_data').out,
      do_not_run_extensions_on_overprovisioned_machines: p.child('do_not_run_extensions_on_overprovisioned_machines').out,
      edge_zone: p.child('edge_zone').out,
      enable_automatic_updates: p.child('enable_automatic_updates').out,
      encryption_at_host_enabled: p.child('encryption_at_host_enabled').out,
      eviction_policy: p.child('eviction_policy').out,
      extension_operations_enabled: p.child('extension_operations_enabled').out,
      extensions_time_budget: p.child('extensions_time_budget').out,
      health_probe_id: p.child('health_probe_id').out,
      host_group_id: p.child('host_group_id').out,
      id: p.child('id').out,
      instances: p.child('instances').out,
      license_type: p.child('license_type').out,
      location: p.child('location').out,
      max_bid_price: p.child('max_bid_price').out,
      name: p.child('name').out,
      overprovision: p.child('overprovision').out,
      platform_fault_domain_count: p.child('platform_fault_domain_count').out,
      priority: p.child('priority').out,
      provision_vm_agent: p.child('provision_vm_agent').out,
      proximity_placement_group_id: p.child('proximity_placement_group_id').out,
      resource_group_name: p.child('resource_group_name').out,
      secure_boot_enabled: p.child('secure_boot_enabled').out,
      single_placement_group: p.child('single_placement_group').out,
      sku: p.child('sku').out,
      source_image_id: p.child('source_image_id').out,
      tags: p.child('tags').out,
      timezone: p.child('timezone').out,
      unique_id: p.child('unique_id').out,
      upgrade_mode: p.child('upgrade_mode').out,
      user_data: p.child('user_data').out,
      vtpm_enabled: p.child('vtpm_enabled').out,
      zone_balance: p.child('zone_balance').out,
      zones: p.child('zones').out,
    },
    windows_web_app(name, block): {
      local p = path(['azurerm_windows_web_app', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_windows_web_app: {
              [name]: std.prune({
                app_settings: build.template(std.get(block, 'app_settings', null, true)),
                client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null, true)),
                client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null, true)),
                client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null, true)),
                client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null, true)),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                service_plan_id: build.template(block.service_plan_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null, true)),
                webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null, true)),
              }),
            },
          },
        },
      },
      app_settings: p.child('app_settings').out,
      client_affinity_enabled: p.child('client_affinity_enabled').out,
      client_certificate_enabled: p.child('client_certificate_enabled').out,
      client_certificate_exclusion_paths: p.child('client_certificate_exclusion_paths').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      ftp_publish_basic_authentication_enabled: p.child('ftp_publish_basic_authentication_enabled').out,
      hosting_environment_id: p.child('hosting_environment_id').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      key_vault_reference_identity_id: p.child('key_vault_reference_identity_id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      service_plan_id: p.child('service_plan_id').out,
      site_credential: p.child('site_credential').out,
      tags: p.child('tags').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
      webdeploy_publish_basic_authentication_enabled: p.child('webdeploy_publish_basic_authentication_enabled').out,
      zip_deploy_file: p.child('zip_deploy_file').out,
    },
    windows_web_app_slot(name, block): {
      local p = path(['azurerm_windows_web_app_slot', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_windows_web_app_slot: {
              [name]: std.prune({
                app_service_id: build.template(block.app_service_id),
                app_settings: build.template(std.get(block, 'app_settings', null, true)),
                client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null, true)),
                client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null, true)),
                client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null, true)),
                client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null, true)),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                name: build.template(block.name),
                public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null, true)),
                service_plan_id: build.template(std.get(block, 'service_plan_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null, true)),
                webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null, true)),
              }),
            },
          },
        },
      },
      app_service_id: p.child('app_service_id').out,
      app_settings: p.child('app_settings').out,
      client_affinity_enabled: p.child('client_affinity_enabled').out,
      client_certificate_enabled: p.child('client_certificate_enabled').out,
      client_certificate_exclusion_paths: p.child('client_certificate_exclusion_paths').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      ftp_publish_basic_authentication_enabled: p.child('ftp_publish_basic_authentication_enabled').out,
      hosting_environment_id: p.child('hosting_environment_id').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      key_vault_reference_identity_id: p.child('key_vault_reference_identity_id').out,
      kind: p.child('kind').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      service_plan_id: p.child('service_plan_id').out,
      site_credential: p.child('site_credential').out,
      tags: p.child('tags').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
      webdeploy_publish_basic_authentication_enabled: p.child('webdeploy_publish_basic_authentication_enabled').out,
      zip_deploy_file: p.child('zip_deploy_file').out,
    },
    workloads_sap_discovery_virtual_instance(name, block): {
      local p = path(['azurerm_workloads_sap_discovery_virtual_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_workloads_sap_discovery_virtual_instance: {
              [name]: std.prune({
                central_server_virtual_machine_id: build.template(block.central_server_virtual_machine_id),
                environment: build.template(block.environment),
                location: build.template(block.location),
                managed_resource_group_name: build.template(std.get(block, 'managed_resource_group_name', null, true)),
                managed_storage_account_name: build.template(std.get(block, 'managed_storage_account_name', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sap_product: build.template(block.sap_product),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      central_server_virtual_machine_id: p.child('central_server_virtual_machine_id').out,
      environment: p.child('environment').out,
      id: p.child('id').out,
      location: p.child('location').out,
      managed_resource_group_name: p.child('managed_resource_group_name').out,
      managed_storage_account_name: p.child('managed_storage_account_name').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sap_product: p.child('sap_product').out,
      tags: p.child('tags').out,
    },
    workloads_sap_single_node_virtual_instance(name, block): {
      local p = path(['azurerm_workloads_sap_single_node_virtual_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_workloads_sap_single_node_virtual_instance: {
              [name]: std.prune({
                app_location: build.template(block.app_location),
                environment: build.template(block.environment),
                location: build.template(block.location),
                managed_resource_group_name: build.template(std.get(block, 'managed_resource_group_name', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sap_fqdn: build.template(block.sap_fqdn),
                sap_product: build.template(block.sap_product),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      app_location: p.child('app_location').out,
      environment: p.child('environment').out,
      id: p.child('id').out,
      location: p.child('location').out,
      managed_resource_group_name: p.child('managed_resource_group_name').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sap_fqdn: p.child('sap_fqdn').out,
      sap_product: p.child('sap_product').out,
      tags: p.child('tags').out,
    },
    workloads_sap_three_tier_virtual_instance(name, block): {
      local p = path(['azurerm_workloads_sap_three_tier_virtual_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            azurerm_workloads_sap_three_tier_virtual_instance: {
              [name]: std.prune({
                app_location: build.template(block.app_location),
                environment: build.template(block.environment),
                location: build.template(block.location),
                managed_resource_group_name: build.template(std.get(block, 'managed_resource_group_name', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sap_fqdn: build.template(block.sap_fqdn),
                sap_product: build.template(block.sap_product),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      app_location: p.child('app_location').out,
      environment: p.child('environment').out,
      id: p.child('id').out,
      location: p.child('location').out,
      managed_resource_group_name: p.child('managed_resource_group_name').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sap_fqdn: p.child('sap_fqdn').out,
      sap_product: p.child('sap_product').out,
      tags: p.child('tags').out,
    },
  },
  data: {
    aadb2c_directory(name, block): {
      local p = path(['data', 'azurerm_aadb2c_directory', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_aadb2c_directory: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      billing_type: p.child('billing_type').out,
      data_residency_location: p.child('data_residency_location').out,
      domain_name: p.child('domain_name').out,
      effective_start_date: p.child('effective_start_date').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
    },
    active_directory_domain_service(name, block): {
      local p = path(['data', 'azurerm_active_directory_domain_service', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_active_directory_domain_service: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      deployment_id: p.child('deployment_id').out,
      domain_configuration_type: p.child('domain_configuration_type').out,
      domain_name: p.child('domain_name').out,
      filtered_sync_enabled: p.child('filtered_sync_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      notifications: p.child('notifications').out,
      replica_sets: p.child('replica_sets').out,
      resource_group_name: p.child('resource_group_name').out,
      resource_id: p.child('resource_id').out,
      secure_ldap: p.child('secure_ldap').out,
      security: p.child('security').out,
      sku: p.child('sku').out,
      sync_owner: p.child('sync_owner').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
      version: p.child('version').out,
    },
    advisor_recommendations(name, block): {
      local p = path(['data', 'azurerm_advisor_recommendations', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_advisor_recommendations: {
              [name]: std.prune({
                filter_by_category: build.template(std.get(block, 'filter_by_category', null, true)),
                filter_by_resource_groups: build.template(std.get(block, 'filter_by_resource_groups', null, true)),
              }),
            },
          },
        },
      },
      filter_by_category: p.child('filter_by_category').out,
      filter_by_resource_groups: p.child('filter_by_resource_groups').out,
      id: p.child('id').out,
      recommendations: p.child('recommendations').out,
    },
    api_management(name, block): {
      local p = path(['data', 'azurerm_api_management', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_api_management: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      additional_location: p.child('additional_location').out,
      developer_portal_url: p.child('developer_portal_url').out,
      gateway_regional_url: p.child('gateway_regional_url').out,
      gateway_url: p.child('gateway_url').out,
      hostname_configuration: p.child('hostname_configuration').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      management_api_url: p.child('management_api_url').out,
      name: p.child('name').out,
      notification_sender_email: p.child('notification_sender_email').out,
      portal_url: p.child('portal_url').out,
      private_ip_addresses: p.child('private_ip_addresses').out,
      public_ip_address_id: p.child('public_ip_address_id').out,
      public_ip_addresses: p.child('public_ip_addresses').out,
      publisher_email: p.child('publisher_email').out,
      publisher_name: p.child('publisher_name').out,
      resource_group_name: p.child('resource_group_name').out,
      scm_url: p.child('scm_url').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      tenant_access: p.child('tenant_access').out,
    },
    api_management_api(name, block): {
      local p = path(['data', 'azurerm_api_management_api', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_api_management_api: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                revision: build.template(block.revision),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      is_current: p.child('is_current').out,
      is_online: p.child('is_online').out,
      name: p.child('name').out,
      path: p.child('path').out,
      protocols: p.child('protocols').out,
      resource_group_name: p.child('resource_group_name').out,
      revision: p.child('revision').out,
      service_url: p.child('service_url').out,
      soap_pass_through: p.child('soap_pass_through').out,
      subscription_key_parameter_names: p.child('subscription_key_parameter_names').out,
      subscription_required: p.child('subscription_required').out,
      version: p.child('version').out,
      version_set_id: p.child('version_set_id').out,
    },
    api_management_api_version_set(name, block): {
      local p = path(['data', 'azurerm_api_management_api_version_set', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_api_management_api_version_set: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      version_header_name: p.child('version_header_name').out,
      version_query_name: p.child('version_query_name').out,
      versioning_scheme: p.child('versioning_scheme').out,
    },
    api_management_gateway(name, block): {
      local p = path(['data', 'azurerm_api_management_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_api_management_gateway: {
              [name]: std.prune({
                api_management_id: build.template(block.api_management_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      api_management_id: p.child('api_management_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      location_data: p.child('location_data').out,
      name: p.child('name').out,
    },
    api_management_gateway_host_name_configuration(name, block): {
      local p = path(['data', 'azurerm_api_management_gateway_host_name_configuration', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_api_management_gateway_host_name_configuration: {
              [name]: std.prune({
                api_management_id: build.template(block.api_management_id),
                gateway_name: build.template(block.gateway_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      api_management_id: p.child('api_management_id').out,
      certificate_id: p.child('certificate_id').out,
      gateway_name: p.child('gateway_name').out,
      host_name: p.child('host_name').out,
      http2_enabled: p.child('http2_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      request_client_certificate_enabled: p.child('request_client_certificate_enabled').out,
      tls10_enabled: p.child('tls10_enabled').out,
      tls11_enabled: p.child('tls11_enabled').out,
    },
    api_management_group(name, block): {
      local p = path(['data', 'azurerm_api_management_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_api_management_group: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      external_id: p.child('external_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      type: p.child('type').out,
    },
    api_management_product(name, block): {
      local p = path(['data', 'azurerm_api_management_product', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_api_management_product: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                product_id: build.template(block.product_id),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      approval_required: p.child('approval_required').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      product_id: p.child('product_id').out,
      published: p.child('published').out,
      resource_group_name: p.child('resource_group_name').out,
      subscription_required: p.child('subscription_required').out,
      subscriptions_limit: p.child('subscriptions_limit').out,
      terms: p.child('terms').out,
    },
    api_management_user(name, block): {
      local p = path(['data', 'azurerm_api_management_user', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_api_management_user: {
              [name]: std.prune({
                api_management_name: build.template(block.api_management_name),
                resource_group_name: build.template(block.resource_group_name),
                user_id: build.template(block.user_id),
              }),
            },
          },
        },
      },
      api_management_name: p.child('api_management_name').out,
      email: p.child('email').out,
      first_name: p.child('first_name').out,
      id: p.child('id').out,
      last_name: p.child('last_name').out,
      note: p.child('note').out,
      resource_group_name: p.child('resource_group_name').out,
      state: p.child('state').out,
      user_id: p.child('user_id').out,
    },
    app_configuration(name, block): {
      local p = path(['data', 'azurerm_app_configuration', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_app_configuration: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      encryption: p.child('encryption').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      local_auth_enabled: p.child('local_auth_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_read_key: p.child('primary_read_key').out,
      primary_write_key: p.child('primary_write_key').out,
      public_network_access: p.child('public_network_access').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      purge_protection_enabled: p.child('purge_protection_enabled').out,
      replica: p.child('replica').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_read_key: p.child('secondary_read_key').out,
      secondary_write_key: p.child('secondary_write_key').out,
      sku: p.child('sku').out,
      soft_delete_retention_days: p.child('soft_delete_retention_days').out,
      tags: p.child('tags').out,
    },
    app_configuration_key(name, block): {
      local p = path(['data', 'azurerm_app_configuration_key', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_app_configuration_key: {
              [name]: std.prune({
                configuration_store_id: build.template(block.configuration_store_id),
                key: build.template(block.key),
                label: build.template(std.get(block, 'label', null, true)),
              }),
            },
          },
        },
      },
      configuration_store_id: p.child('configuration_store_id').out,
      content_type: p.child('content_type').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      key: p.child('key').out,
      label: p.child('label').out,
      locked: p.child('locked').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      value: p.child('value').out,
      vault_key_reference: p.child('vault_key_reference').out,
    },
    app_configuration_keys(name, block): {
      local p = path(['data', 'azurerm_app_configuration_keys', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_app_configuration_keys: {
              [name]: std.prune({
                configuration_store_id: build.template(block.configuration_store_id),
                key: build.template(std.get(block, 'key', null, true)),
                label: build.template(std.get(block, 'label', null, true)),
              }),
            },
          },
        },
      },
      configuration_store_id: p.child('configuration_store_id').out,
      id: p.child('id').out,
      items: p.child('items').out,
      key: p.child('key').out,
      label: p.child('label').out,
    },
    app_service(name, block): {
      local p = path(['data', 'azurerm_app_service', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_app_service: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      app_service_plan_id: p.child('app_service_plan_id').out,
      app_settings: p.child('app_settings').out,
      client_affinity_enabled: p.child('client_affinity_enabled').out,
      client_cert_enabled: p.child('client_cert_enabled').out,
      connection_string: p.child('connection_string').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      default_site_hostname: p.child('default_site_hostname').out,
      enabled: p.child('enabled').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      resource_group_name: p.child('resource_group_name').out,
      site_config: p.child('site_config').out,
      site_credential: p.child('site_credential').out,
      source_control: p.child('source_control').out,
      tags: p.child('tags').out,
    },
    app_service_certificate(name, block): {
      local p = path(['data', 'azurerm_app_service_certificate', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_app_service_certificate: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      expiration_date: p.child('expiration_date').out,
      friendly_name: p.child('friendly_name').out,
      host_names: p.child('host_names').out,
      id: p.child('id').out,
      issue_date: p.child('issue_date').out,
      issuer: p.child('issuer').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      subject_name: p.child('subject_name').out,
      tags: p.child('tags').out,
      thumbprint: p.child('thumbprint').out,
    },
    app_service_certificate_order(name, block): {
      local p = path(['data', 'azurerm_app_service_certificate_order', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_app_service_certificate_order: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      app_service_certificate_not_renewable_reasons: p.child('app_service_certificate_not_renewable_reasons').out,
      auto_renew: p.child('auto_renew').out,
      certificates: p.child('certificates').out,
      csr: p.child('csr').out,
      distinguished_name: p.child('distinguished_name').out,
      domain_verification_token: p.child('domain_verification_token').out,
      expiration_time: p.child('expiration_time').out,
      id: p.child('id').out,
      intermediate_thumbprint: p.child('intermediate_thumbprint').out,
      is_private_key_external: p.child('is_private_key_external').out,
      key_size: p.child('key_size').out,
      location: p.child('location').out,
      name: p.child('name').out,
      product_type: p.child('product_type').out,
      resource_group_name: p.child('resource_group_name').out,
      root_thumbprint: p.child('root_thumbprint').out,
      signed_certificate_thumbprint: p.child('signed_certificate_thumbprint').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      validity_in_years: p.child('validity_in_years').out,
    },
    app_service_environment_v3(name, block): {
      local p = path(['data', 'azurerm_app_service_environment_v3', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_app_service_environment_v3: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      allow_new_private_endpoint_connections: p.child('allow_new_private_endpoint_connections').out,
      cluster_setting: p.child('cluster_setting').out,
      dedicated_host_count: p.child('dedicated_host_count').out,
      dns_suffix: p.child('dns_suffix').out,
      external_inbound_ip_addresses: p.child('external_inbound_ip_addresses').out,
      id: p.child('id').out,
      inbound_network_dependencies: p.child('inbound_network_dependencies').out,
      internal_inbound_ip_addresses: p.child('internal_inbound_ip_addresses').out,
      internal_load_balancing_mode: p.child('internal_load_balancing_mode').out,
      ip_ssl_address_count: p.child('ip_ssl_address_count').out,
      linux_outbound_ip_addresses: p.child('linux_outbound_ip_addresses').out,
      location: p.child('location').out,
      name: p.child('name').out,
      pricing_tier: p.child('pricing_tier').out,
      remote_debugging_enabled: p.child('remote_debugging_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      windows_outbound_ip_addresses: p.child('windows_outbound_ip_addresses').out,
      zone_redundant: p.child('zone_redundant').out,
    },
    app_service_plan(name, block): {
      local p = path(['data', 'azurerm_app_service_plan', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_app_service_plan: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      app_service_environment_id: p.child('app_service_environment_id').out,
      id: p.child('id').out,
      is_xenon: p.child('is_xenon').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      maximum_elastic_worker_count: p.child('maximum_elastic_worker_count').out,
      maximum_number_of_workers: p.child('maximum_number_of_workers').out,
      name: p.child('name').out,
      per_site_scaling: p.child('per_site_scaling').out,
      reserved: p.child('reserved').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      zone_redundant: p.child('zone_redundant').out,
    },
    application_gateway(name, block): {
      local p = path(['data', 'azurerm_application_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_application_gateway: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      authentication_certificate: p.child('authentication_certificate').out,
      autoscale_configuration: p.child('autoscale_configuration').out,
      backend_address_pool: p.child('backend_address_pool').out,
      backend_http_settings: p.child('backend_http_settings').out,
      custom_error_configuration: p.child('custom_error_configuration').out,
      fips_enabled: p.child('fips_enabled').out,
      firewall_policy_id: p.child('firewall_policy_id').out,
      force_firewall_policy_association: p.child('force_firewall_policy_association').out,
      frontend_ip_configuration: p.child('frontend_ip_configuration').out,
      frontend_port: p.child('frontend_port').out,
      gateway_ip_configuration: p.child('gateway_ip_configuration').out,
      global: p.child('global').out,
      http2_enabled: p.child('http2_enabled').out,
      http_listener: p.child('http_listener').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_endpoint_connection: p.child('private_endpoint_connection').out,
      private_link_configuration: p.child('private_link_configuration').out,
      probe: p.child('probe').out,
      redirect_configuration: p.child('redirect_configuration').out,
      request_routing_rule: p.child('request_routing_rule').out,
      resource_group_name: p.child('resource_group_name').out,
      rewrite_rule_set: p.child('rewrite_rule_set').out,
      sku: p.child('sku').out,
      ssl_certificate: p.child('ssl_certificate').out,
      ssl_policy: p.child('ssl_policy').out,
      ssl_profile: p.child('ssl_profile').out,
      tags: p.child('tags').out,
      trusted_client_certificate: p.child('trusted_client_certificate').out,
      trusted_root_certificate: p.child('trusted_root_certificate').out,
      url_path_map: p.child('url_path_map').out,
      waf_configuration: p.child('waf_configuration').out,
      zones: p.child('zones').out,
    },
    application_insights(name, block): {
      local p = path(['data', 'azurerm_application_insights', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_application_insights: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').out,
      application_type: p.child('application_type').out,
      connection_string: p.child('connection_string').out,
      id: p.child('id').out,
      instrumentation_key: p.child('instrumentation_key').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      retention_in_days: p.child('retention_in_days').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
    },
    application_security_group(name, block): {
      local p = path(['data', 'azurerm_application_security_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_application_security_group: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    arc_machine(name, block): {
      local p = path(['data', 'azurerm_arc_machine', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_arc_machine: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      active_directory_fqdn: p.child('active_directory_fqdn').out,
      agent: p.child('agent').out,
      agent_version: p.child('agent_version').out,
      client_public_key: p.child('client_public_key').out,
      cloud_metadata: p.child('cloud_metadata').out,
      detected_properties: p.child('detected_properties').out,
      display_name: p.child('display_name').out,
      dns_fqdn: p.child('dns_fqdn').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      last_status_change_time: p.child('last_status_change_time').out,
      location: p.child('location').out,
      location_data: p.child('location_data').out,
      machine_fqdn: p.child('machine_fqdn').out,
      mssql_discovered: p.child('mssql_discovered').out,
      name: p.child('name').out,
      os_name: p.child('os_name').out,
      os_profile: p.child('os_profile').out,
      os_sku: p.child('os_sku').out,
      os_type: p.child('os_type').out,
      os_version: p.child('os_version').out,
      parent_cluster_resource_id: p.child('parent_cluster_resource_id').out,
      private_link_scope_resource_id: p.child('private_link_scope_resource_id').out,
      resource_group_name: p.child('resource_group_name').out,
      service_status: p.child('service_status').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      vm_id: p.child('vm_id').out,
      vm_uuid: p.child('vm_uuid').out,
    },
    arc_resource_bridge_appliance(name, block): {
      local p = path(['data', 'azurerm_arc_resource_bridge_appliance', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_arc_resource_bridge_appliance: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      distro: p.child('distro').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      infrastructure_provider: p.child('infrastructure_provider').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_key_base64: p.child('public_key_base64').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    attestation_provider(name, block): {
      local p = path(['data', 'azurerm_attestation_provider', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_attestation_provider: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      attestation_uri: p.child('attestation_uri').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      trust_model: p.child('trust_model').out,
    },
    automation_account(name, block): {
      local p = path(['data', 'azurerm_automation_account', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_automation_account: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      endpoint: p.child('endpoint').out,
      hybrid_service_url: p.child('hybrid_service_url').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      name: p.child('name').out,
      primary_key: p.child('primary_key').out,
      private_endpoint_connection: p.child('private_endpoint_connection').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_key: p.child('secondary_key').out,
    },
    automation_runbook(name, block): {
      local p = path(['data', 'azurerm_automation_runbook', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_automation_runbook: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      content: p.child('content').out,
      description: p.child('description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      log_activity_trace_level: p.child('log_activity_trace_level').out,
      log_progress: p.child('log_progress').out,
      log_verbose: p.child('log_verbose').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      runbook_type: p.child('runbook_type').out,
      tags: p.child('tags').out,
    },
    automation_variable_bool(name, block): {
      local p = path(['data', 'azurerm_automation_variable_bool', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_automation_variable_bool: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      value: p.child('value').out,
    },
    automation_variable_datetime(name, block): {
      local p = path(['data', 'azurerm_automation_variable_datetime', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_automation_variable_datetime: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      value: p.child('value').out,
    },
    automation_variable_int(name, block): {
      local p = path(['data', 'azurerm_automation_variable_int', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_automation_variable_int: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      value: p.child('value').out,
    },
    automation_variable_object(name, block): {
      local p = path(['data', 'azurerm_automation_variable_object', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_automation_variable_object: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      value: p.child('value').out,
    },
    automation_variable_string(name, block): {
      local p = path(['data', 'azurerm_automation_variable_string', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_automation_variable_string: {
              [name]: std.prune({
                automation_account_name: build.template(block.automation_account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automation_account_name: p.child('automation_account_name').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      value: p.child('value').out,
    },
    automation_variables(name, block): {
      local p = path(['data', 'azurerm_automation_variables', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_automation_variables: {
              [name]: std.prune({
                automation_account_id: build.template(block.automation_account_id),
              }),
            },
          },
        },
      },
      automation_account_id: p.child('automation_account_id').out,
      bool: p.child('bool').out,
      datetime: p.child('datetime').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      int: p.child('int').out,
      'null': p.child('null').out,
      object: p.child('object').out,
      string: p.child('string').out,
    },
    availability_set(name, block): {
      local p = path(['data', 'azurerm_availability_set', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_availability_set: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      managed: p.child('managed').out,
      name: p.child('name').out,
      platform_fault_domain_count: p.child('platform_fault_domain_count').out,
      platform_update_domain_count: p.child('platform_update_domain_count').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    backup_policy_file_share(name, block): {
      local p = path(['data', 'azurerm_backup_policy_file_share', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_backup_policy_file_share: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    backup_policy_vm(name, block): {
      local p = path(['data', 'azurerm_backup_policy_vm', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_backup_policy_vm: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    bastion_host(name, block): {
      local p = path(['data', 'azurerm_bastion_host', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_bastion_host: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      copy_paste_enabled: p.child('copy_paste_enabled').out,
      dns_name: p.child('dns_name').out,
      file_copy_enabled: p.child('file_copy_enabled').out,
      id: p.child('id').out,
      ip_configuration: p.child('ip_configuration').out,
      ip_connect_enabled: p.child('ip_connect_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scale_units: p.child('scale_units').out,
      session_recording_enabled: p.child('session_recording_enabled').out,
      shareable_link_enabled: p.child('shareable_link_enabled').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      tunneling_enabled: p.child('tunneling_enabled').out,
    },
    batch_account(name, block): {
      local p = path(['data', 'azurerm_batch_account', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_batch_account: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_endpoint: p.child('account_endpoint').out,
      encryption: p.child('encryption').out,
      id: p.child('id').out,
      key_vault_reference: p.child('key_vault_reference').out,
      location: p.child('location').out,
      name: p.child('name').out,
      pool_allocation_mode: p.child('pool_allocation_mode').out,
      primary_access_key: p.child('primary_access_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      storage_account_id: p.child('storage_account_id').out,
      tags: p.child('tags').out,
    },
    batch_application(name, block): {
      local p = path(['data', 'azurerm_batch_application', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_batch_application: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      allow_updates: p.child('allow_updates').out,
      default_version: p.child('default_version').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    batch_certificate(name, block): {
      local p = path(['data', 'azurerm_batch_certificate', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_batch_certificate: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      format: p.child('format').out,
      id: p.child('id').out,
      name: p.child('name').out,
      public_data: p.child('public_data').out,
      resource_group_name: p.child('resource_group_name').out,
      thumbprint: p.child('thumbprint').out,
      thumbprint_algorithm: p.child('thumbprint_algorithm').out,
    },
    batch_pool(name, block): {
      local p = path(['data', 'azurerm_batch_pool', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_batch_pool: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      auto_scale: p.child('auto_scale').out,
      certificate: p.child('certificate').out,
      container_configuration: p.child('container_configuration').out,
      data_disks: p.child('data_disks').out,
      disk_encryption: p.child('disk_encryption').out,
      display_name: p.child('display_name').out,
      extensions: p.child('extensions').out,
      fixed_scale: p.child('fixed_scale').out,
      id: p.child('id').out,
      inter_node_communication: p.child('inter_node_communication').out,
      license_type: p.child('license_type').out,
      max_tasks_per_node: p.child('max_tasks_per_node').out,
      metadata: p.child('metadata').out,
      mount: p.child('mount').out,
      name: p.child('name').out,
      network_configuration: p.child('network_configuration').out,
      node_agent_sku_id: p.child('node_agent_sku_id').out,
      node_placement: p.child('node_placement').out,
      os_disk_placement: p.child('os_disk_placement').out,
      resource_group_name: p.child('resource_group_name').out,
      start_task: p.child('start_task').out,
      storage_image_reference: p.child('storage_image_reference').out,
      task_scheduling_policy: p.child('task_scheduling_policy').out,
      user_accounts: p.child('user_accounts').out,
      vm_size: p.child('vm_size').out,
      windows: p.child('windows').out,
    },
    billing_enrollment_account_scope(name, block): {
      local p = path(['data', 'azurerm_billing_enrollment_account_scope', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_billing_enrollment_account_scope: {
              [name]: std.prune({
                billing_account_name: build.template(block.billing_account_name),
                enrollment_account_name: build.template(block.enrollment_account_name),
              }),
            },
          },
        },
      },
      billing_account_name: p.child('billing_account_name').out,
      enrollment_account_name: p.child('enrollment_account_name').out,
      id: p.child('id').out,
    },
    billing_mca_account_scope(name, block): {
      local p = path(['data', 'azurerm_billing_mca_account_scope', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_billing_mca_account_scope: {
              [name]: std.prune({
                billing_account_name: build.template(block.billing_account_name),
                billing_profile_name: build.template(block.billing_profile_name),
                invoice_section_name: build.template(block.invoice_section_name),
              }),
            },
          },
        },
      },
      billing_account_name: p.child('billing_account_name').out,
      billing_profile_name: p.child('billing_profile_name').out,
      id: p.child('id').out,
      invoice_section_name: p.child('invoice_section_name').out,
    },
    billing_mpa_account_scope(name, block): {
      local p = path(['data', 'azurerm_billing_mpa_account_scope', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_billing_mpa_account_scope: {
              [name]: std.prune({
                billing_account_name: build.template(block.billing_account_name),
                customer_name: build.template(block.customer_name),
              }),
            },
          },
        },
      },
      billing_account_name: p.child('billing_account_name').out,
      customer_name: p.child('customer_name').out,
      id: p.child('id').out,
    },
    blueprint_definition(name, block): {
      local p = path(['data', 'azurerm_blueprint_definition', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_blueprint_definition: {
              [name]: std.prune({
                name: build.template(block.name),
                scope_id: build.template(block.scope_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      last_modified: p.child('last_modified').out,
      name: p.child('name').out,
      scope_id: p.child('scope_id').out,
      target_scope: p.child('target_scope').out,
      time_created: p.child('time_created').out,
      versions: p.child('versions').out,
    },
    blueprint_published_version(name, block): {
      local p = path(['data', 'azurerm_blueprint_published_version', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_blueprint_published_version: {
              [name]: std.prune({
                blueprint_name: build.template(block.blueprint_name),
                scope_id: build.template(block.scope_id),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      blueprint_name: p.child('blueprint_name').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      last_modified: p.child('last_modified').out,
      scope_id: p.child('scope_id').out,
      target_scope: p.child('target_scope').out,
      time_created: p.child('time_created').out,
      type: p.child('type').out,
      version: p.child('version').out,
    },
    cdn_frontdoor_custom_domain(name, block): {
      local p = path(['data', 'azurerm_cdn_frontdoor_custom_domain', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cdn_frontdoor_custom_domain: {
              [name]: std.prune({
                name: build.template(block.name),
                profile_name: build.template(block.profile_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      cdn_frontdoor_profile_id: p.child('cdn_frontdoor_profile_id').out,
      dns_zone_id: p.child('dns_zone_id').out,
      expiration_date: p.child('expiration_date').out,
      host_name: p.child('host_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      profile_name: p.child('profile_name').out,
      resource_group_name: p.child('resource_group_name').out,
      tls: p.child('tls').out,
      validation_token: p.child('validation_token').out,
    },
    cdn_frontdoor_endpoint(name, block): {
      local p = path(['data', 'azurerm_cdn_frontdoor_endpoint', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cdn_frontdoor_endpoint: {
              [name]: std.prune({
                name: build.template(block.name),
                profile_name: build.template(block.profile_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      host_name: p.child('host_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      profile_name: p.child('profile_name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    cdn_frontdoor_firewall_policy(name, block): {
      local p = path(['data', 'azurerm_cdn_frontdoor_firewall_policy', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cdn_frontdoor_firewall_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      frontend_endpoint_ids: p.child('frontend_endpoint_ids').out,
      id: p.child('id').out,
      mode: p.child('mode').out,
      name: p.child('name').out,
      redirect_url: p.child('redirect_url').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
    },
    cdn_frontdoor_origin_group(name, block): {
      local p = path(['data', 'azurerm_cdn_frontdoor_origin_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cdn_frontdoor_origin_group: {
              [name]: std.prune({
                name: build.template(block.name),
                profile_name: build.template(block.profile_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      cdn_frontdoor_profile_id: p.child('cdn_frontdoor_profile_id').out,
      health_probe: p.child('health_probe').out,
      id: p.child('id').out,
      load_balancing: p.child('load_balancing').out,
      name: p.child('name').out,
      profile_name: p.child('profile_name').out,
      resource_group_name: p.child('resource_group_name').out,
      restore_traffic_time_to_healed_or_new_endpoint_in_minutes: p.child('restore_traffic_time_to_healed_or_new_endpoint_in_minutes').out,
      session_affinity_enabled: p.child('session_affinity_enabled').out,
    },
    cdn_frontdoor_profile(name, block): {
      local p = path(['data', 'azurerm_cdn_frontdoor_profile', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cdn_frontdoor_profile: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      resource_guid: p.child('resource_guid').out,
      response_timeout_seconds: p.child('response_timeout_seconds').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    cdn_frontdoor_rule_set(name, block): {
      local p = path(['data', 'azurerm_cdn_frontdoor_rule_set', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cdn_frontdoor_rule_set: {
              [name]: std.prune({
                name: build.template(block.name),
                profile_name: build.template(block.profile_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      cdn_frontdoor_profile_id: p.child('cdn_frontdoor_profile_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      profile_name: p.child('profile_name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    cdn_frontdoor_secret(name, block): {
      local p = path(['data', 'azurerm_cdn_frontdoor_secret', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cdn_frontdoor_secret: {
              [name]: std.prune({
                name: build.template(block.name),
                profile_name: build.template(block.profile_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      cdn_frontdoor_profile_id: p.child('cdn_frontdoor_profile_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      profile_name: p.child('profile_name').out,
      resource_group_name: p.child('resource_group_name').out,
      secret: p.child('secret').out,
    },
    cdn_profile(name, block): {
      local p = path(['data', 'azurerm_cdn_profile', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cdn_profile: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    client_config(name, block): {
      local p = path(['data', 'azurerm_client_config', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_client_config: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      client_id: p.child('client_id').out,
      id: p.child('id').out,
      object_id: p.child('object_id').out,
      subscription_id: p.child('subscription_id').out,
      tenant_id: p.child('tenant_id').out,
    },
    cognitive_account(name, block): {
      local p = path(['data', 'azurerm_cognitive_account', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cognitive_account: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_access_key: p.child('primary_access_key').out,
      qna_runtime_endpoint: p.child('qna_runtime_endpoint').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    communication_service(name, block): {
      local p = path(['data', 'azurerm_communication_service', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_communication_service: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      data_location: p.child('data_location').out,
      id: p.child('id').out,
      name: p.child('name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_key: p.child('secondary_key').out,
      tags: p.child('tags').out,
    },
    confidential_ledger(name, block): {
      local p = path(['data', 'azurerm_confidential_ledger', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_confidential_ledger: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      azuread_based_service_principal: p.child('azuread_based_service_principal').out,
      certificate_based_security_principal: p.child('certificate_based_security_principal').out,
      id: p.child('id').out,
      identity_service_endpoint: p.child('identity_service_endpoint').out,
      ledger_endpoint: p.child('ledger_endpoint').out,
      ledger_type: p.child('ledger_type').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    consumption_budget_resource_group(name, block): {
      local p = path(['data', 'azurerm_consumption_budget_resource_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_consumption_budget_resource_group: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_id: build.template(block.resource_group_id),
              }),
            },
          },
        },
      },
      amount: p.child('amount').out,
      filter: p.child('filter').out,
      id: p.child('id').out,
      name: p.child('name').out,
      notification: p.child('notification').out,
      resource_group_id: p.child('resource_group_id').out,
      time_grain: p.child('time_grain').out,
      time_period: p.child('time_period').out,
    },
    consumption_budget_subscription(name, block): {
      local p = path(['data', 'azurerm_consumption_budget_subscription', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_consumption_budget_subscription: {
              [name]: std.prune({
                name: build.template(block.name),
                subscription_id: build.template(block.subscription_id),
              }),
            },
          },
        },
      },
      amount: p.child('amount').out,
      filter: p.child('filter').out,
      id: p.child('id').out,
      name: p.child('name').out,
      notification: p.child('notification').out,
      subscription_id: p.child('subscription_id').out,
      time_grain: p.child('time_grain').out,
      time_period: p.child('time_period').out,
    },
    container_app(name, block): {
      local p = path(['data', 'azurerm_container_app', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_container_app: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      container_app_environment_id: p.child('container_app_environment_id').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      dapr: p.child('dapr').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      ingress: p.child('ingress').out,
      latest_revision_fqdn: p.child('latest_revision_fqdn').out,
      latest_revision_name: p.child('latest_revision_name').out,
      location: p.child('location').out,
      max_inactive_revisions: p.child('max_inactive_revisions').out,
      name: p.child('name').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      registry: p.child('registry').out,
      resource_group_name: p.child('resource_group_name').out,
      revision_mode: p.child('revision_mode').out,
      secret: p.child('secret').out,
      tags: p.child('tags').out,
      template: p.child('template').out,
      workload_profile_name: p.child('workload_profile_name').out,
    },
    container_app_environment(name, block): {
      local p = path(['data', 'azurerm_container_app_environment', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_container_app_environment: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      default_domain: p.child('default_domain').out,
      docker_bridge_cidr: p.child('docker_bridge_cidr').out,
      id: p.child('id').out,
      infrastructure_subnet_id: p.child('infrastructure_subnet_id').out,
      internal_load_balancer_enabled: p.child('internal_load_balancer_enabled').out,
      location: p.child('location').out,
      log_analytics_workspace_name: p.child('log_analytics_workspace_name').out,
      name: p.child('name').out,
      platform_reserved_cidr: p.child('platform_reserved_cidr').out,
      platform_reserved_dns_ip_address: p.child('platform_reserved_dns_ip_address').out,
      resource_group_name: p.child('resource_group_name').out,
      static_ip_address: p.child('static_ip_address').out,
      tags: p.child('tags').out,
    },
    container_app_environment_certificate(name, block): {
      local p = path(['data', 'azurerm_container_app_environment_certificate', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_container_app_environment_certificate: {
              [name]: std.prune({
                container_app_environment_id: build.template(block.container_app_environment_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      container_app_environment_id: p.child('container_app_environment_id').out,
      expiration_date: p.child('expiration_date').out,
      id: p.child('id').out,
      issue_date: p.child('issue_date').out,
      issuer: p.child('issuer').out,
      name: p.child('name').out,
      subject_name: p.child('subject_name').out,
      tags: p.child('tags').out,
      thumbprint: p.child('thumbprint').out,
    },
    container_group(name, block): {
      local p = path(['data', 'azurerm_container_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_container_group: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zones: build.template(std.get(block, 'zones', null, true)),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      ip_address: p.child('ip_address').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    container_registry(name, block): {
      local p = path(['data', 'azurerm_container_registry', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_container_registry: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      admin_enabled: p.child('admin_enabled').out,
      admin_password: p.child('admin_password').out,
      admin_username: p.child('admin_username').out,
      data_endpoint_enabled: p.child('data_endpoint_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      login_server: p.child('login_server').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    container_registry_cache_rule(name, block): {
      local p = path(['data', 'azurerm_container_registry_cache_rule', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_container_registry_cache_rule: {
              [name]: std.prune({
                container_registry_id: build.template(block.container_registry_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      container_registry_id: p.child('container_registry_id').out,
      credential_set_id: p.child('credential_set_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      source_repo: p.child('source_repo').out,
      target_repo: p.child('target_repo').out,
    },
    container_registry_scope_map(name, block): {
      local p = path(['data', 'azurerm_container_registry_scope_map', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_container_registry_scope_map: {
              [name]: std.prune({
                container_registry_name: build.template(block.container_registry_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      actions: p.child('actions').out,
      container_registry_name: p.child('container_registry_name').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    container_registry_token(name, block): {
      local p = path(['data', 'azurerm_container_registry_token', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_container_registry_token: {
              [name]: std.prune({
                container_registry_name: build.template(block.container_registry_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      container_registry_name: p.child('container_registry_name').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scope_map_id: p.child('scope_map_id').out,
    },
    cosmosdb_account(name, block): {
      local p = path(['data', 'azurerm_cosmosdb_account', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cosmosdb_account: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automatic_failover_enabled: p.child('automatic_failover_enabled').out,
      capabilities: p.child('capabilities').out,
      consistency_policy: p.child('consistency_policy').out,
      endpoint: p.child('endpoint').out,
      free_tier_enabled: p.child('free_tier_enabled').out,
      geo_location: p.child('geo_location').out,
      id: p.child('id').out,
      ip_range_filter: p.child('ip_range_filter').out,
      is_virtual_network_filter_enabled: p.child('is_virtual_network_filter_enabled').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      multiple_write_locations_enabled: p.child('multiple_write_locations_enabled').out,
      name: p.child('name').out,
      offer_type: p.child('offer_type').out,
      primary_key: p.child('primary_key').out,
      primary_mongodb_connection_string: p.child('primary_mongodb_connection_string').out,
      primary_readonly_key: p.child('primary_readonly_key').out,
      primary_readonly_mongodb_connection_string: p.child('primary_readonly_mongodb_connection_string').out,
      primary_readonly_sql_connection_string: p.child('primary_readonly_sql_connection_string').out,
      primary_sql_connection_string: p.child('primary_sql_connection_string').out,
      read_endpoints: p.child('read_endpoints').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_key: p.child('secondary_key').out,
      secondary_mongodb_connection_string: p.child('secondary_mongodb_connection_string').out,
      secondary_readonly_key: p.child('secondary_readonly_key').out,
      secondary_readonly_mongodb_connection_string: p.child('secondary_readonly_mongodb_connection_string').out,
      secondary_readonly_sql_connection_string: p.child('secondary_readonly_sql_connection_string').out,
      secondary_sql_connection_string: p.child('secondary_sql_connection_string').out,
      tags: p.child('tags').out,
      virtual_network_rule: p.child('virtual_network_rule').out,
      write_endpoints: p.child('write_endpoints').out,
    },
    cosmosdb_mongo_database(name, block): {
      local p = path(['data', 'azurerm_cosmosdb_mongo_database', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cosmosdb_mongo_database: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    cosmosdb_restorable_database_accounts(name, block): {
      local p = path(['data', 'azurerm_cosmosdb_restorable_database_accounts', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cosmosdb_restorable_database_accounts: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      accounts: p.child('accounts').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
    },
    cosmosdb_sql_database(name, block): {
      local p = path(['data', 'azurerm_cosmosdb_sql_database', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cosmosdb_sql_database: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      autoscale_settings: p.child('autoscale_settings').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      throughput: p.child('throughput').out,
    },
    cosmosdb_sql_role_definition(name, block): {
      local p = path(['data', 'azurerm_cosmosdb_sql_role_definition', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_cosmosdb_sql_role_definition: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                resource_group_name: build.template(block.resource_group_name),
                role_definition_id: build.template(block.role_definition_id),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      assignable_scopes: p.child('assignable_scopes').out,
      id: p.child('id').out,
      name: p.child('name').out,
      permissions: p.child('permissions').out,
      resource_group_name: p.child('resource_group_name').out,
      role_definition_id: p.child('role_definition_id').out,
      type: p.child('type').out,
    },
    dashboard_grafana(name, block): {
      local p = path(['data', 'azurerm_dashboard_grafana', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dashboard_grafana: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_key_enabled: p.child('api_key_enabled').out,
      auto_generated_domain_name_label_scope: p.child('auto_generated_domain_name_label_scope').out,
      azure_monitor_workspace_integrations: p.child('azure_monitor_workspace_integrations').out,
      deterministic_outbound_ip_enabled: p.child('deterministic_outbound_ip_enabled').out,
      endpoint: p.child('endpoint').out,
      grafana_major_version: p.child('grafana_major_version').out,
      grafana_version: p.child('grafana_version').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_ips: p.child('outbound_ips').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      zone_redundancy_enabled: p.child('zone_redundancy_enabled').out,
    },
    data_factory(name, block): {
      local p = path(['data', 'azurerm_data_factory', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_data_factory: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      github_configuration: p.child('github_configuration').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      vsts_configuration: p.child('vsts_configuration').out,
    },
    data_factory_trigger_schedule(name, block): {
      local p = path(['data', 'azurerm_data_factory_trigger_schedule', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_data_factory_trigger_schedule: {
              [name]: std.prune({
                data_factory_id: build.template(block.data_factory_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      activated: p.child('activated').out,
      annotations: p.child('annotations').out,
      data_factory_id: p.child('data_factory_id').out,
      description: p.child('description').out,
      end_time: p.child('end_time').out,
      frequency: p.child('frequency').out,
      id: p.child('id').out,
      interval: p.child('interval').out,
      name: p.child('name').out,
      pipeline_name: p.child('pipeline_name').out,
      schedule: p.child('schedule').out,
      start_time: p.child('start_time').out,
      time_zone: p.child('time_zone').out,
    },
    data_factory_trigger_schedules(name, block): {
      local p = path(['data', 'azurerm_data_factory_trigger_schedules', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_data_factory_trigger_schedules: {
              [name]: std.prune({
                data_factory_id: build.template(block.data_factory_id),
              }),
            },
          },
        },
      },
      data_factory_id: p.child('data_factory_id').out,
      id: p.child('id').out,
      items: p.child('items').out,
    },
    data_protection_backup_vault(name, block): {
      local p = path(['data', 'azurerm_data_protection_backup_vault', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_data_protection_backup_vault: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      datastore_type: p.child('datastore_type').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      redundancy: p.child('redundancy').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    data_share(name, block): {
      local p = path(['data', 'azurerm_data_share', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_data_share: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      name: p.child('name').out,
      snapshot_schedule: p.child('snapshot_schedule').out,
      terms: p.child('terms').out,
    },
    data_share_account(name, block): {
      local p = path(['data', 'azurerm_data_share_account', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_data_share_account: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity: p.child('identity').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    data_share_dataset_blob_storage(name, block): {
      local p = path(['data', 'azurerm_data_share_dataset_blob_storage', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_data_share_dataset_blob_storage: {
              [name]: std.prune({
                data_share_id: build.template(block.data_share_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      container_name: p.child('container_name').out,
      data_share_id: p.child('data_share_id').out,
      display_name: p.child('display_name').out,
      file_path: p.child('file_path').out,
      folder_path: p.child('folder_path').out,
      id: p.child('id').out,
      name: p.child('name').out,
      storage_account: p.child('storage_account').out,
    },
    data_share_dataset_data_lake_gen2(name, block): {
      local p = path(['data', 'azurerm_data_share_dataset_data_lake_gen2', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_data_share_dataset_data_lake_gen2: {
              [name]: std.prune({
                name: build.template(block.name),
                share_id: build.template(block.share_id),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      file_path: p.child('file_path').out,
      file_system_name: p.child('file_system_name').out,
      folder_path: p.child('folder_path').out,
      id: p.child('id').out,
      name: p.child('name').out,
      share_id: p.child('share_id').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    data_share_dataset_kusto_cluster(name, block): {
      local p = path(['data', 'azurerm_data_share_dataset_kusto_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_data_share_dataset_kusto_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
                share_id: build.template(block.share_id),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      kusto_cluster_id: p.child('kusto_cluster_id').out,
      kusto_cluster_location: p.child('kusto_cluster_location').out,
      name: p.child('name').out,
      share_id: p.child('share_id').out,
    },
    data_share_dataset_kusto_database(name, block): {
      local p = path(['data', 'azurerm_data_share_dataset_kusto_database', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_data_share_dataset_kusto_database: {
              [name]: std.prune({
                name: build.template(block.name),
                share_id: build.template(block.share_id),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      kusto_cluster_location: p.child('kusto_cluster_location').out,
      kusto_database_id: p.child('kusto_database_id').out,
      name: p.child('name').out,
      share_id: p.child('share_id').out,
    },
    database_migration_project(name, block): {
      local p = path(['data', 'azurerm_database_migration_project', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_database_migration_project: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      service_name: p.child('service_name').out,
      source_platform: p.child('source_platform').out,
      tags: p.child('tags').out,
      target_platform: p.child('target_platform').out,
    },
    database_migration_service(name, block): {
      local p = path(['data', 'azurerm_database_migration_service', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_database_migration_service: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
    },
    databox_edge_device(name, block): {
      local p = path(['data', 'azurerm_databox_edge_device', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_databox_edge_device: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      device_properties: p.child('device_properties').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    databricks_access_connector(name, block): {
      local p = path(['data', 'azurerm_databricks_access_connector', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_databricks_access_connector: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    databricks_workspace(name, block): {
      local p = path(['data', 'azurerm_databricks_workspace', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_databricks_workspace: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      managed_disk_identity: p.child('managed_disk_identity').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      storage_account_identity: p.child('storage_account_identity').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
      workspace_url: p.child('workspace_url').out,
    },
    databricks_workspace_private_endpoint_connection(name, block): {
      local p = path(['data', 'azurerm_databricks_workspace_private_endpoint_connection', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_databricks_workspace_private_endpoint_connection: {
              [name]: std.prune({
                private_endpoint_id: build.template(block.private_endpoint_id),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      connections: p.child('connections').out,
      id: p.child('id').out,
      private_endpoint_id: p.child('private_endpoint_id').out,
      workspace_id: p.child('workspace_id').out,
    },
    dedicated_host(name, block): {
      local p = path(['data', 'azurerm_dedicated_host', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dedicated_host: {
              [name]: std.prune({
                dedicated_host_group_name: build.template(block.dedicated_host_group_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      dedicated_host_group_name: p.child('dedicated_host_group_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    dedicated_host_group(name, block): {
      local p = path(['data', 'azurerm_dedicated_host_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dedicated_host_group: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automatic_placement_enabled: p.child('automatic_placement_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      platform_fault_domain_count: p.child('platform_fault_domain_count').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    dev_test_lab(name, block): {
      local p = path(['data', 'azurerm_dev_test_lab', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dev_test_lab: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      artifacts_storage_account_id: p.child('artifacts_storage_account_id').out,
      default_premium_storage_account_id: p.child('default_premium_storage_account_id').out,
      default_storage_account_id: p.child('default_storage_account_id').out,
      id: p.child('id').out,
      key_vault_id: p.child('key_vault_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      premium_data_disk_storage_account_id: p.child('premium_data_disk_storage_account_id').out,
      resource_group_name: p.child('resource_group_name').out,
      storage_type: p.child('storage_type').out,
      tags: p.child('tags').out,
      unique_identifier: p.child('unique_identifier').out,
    },
    dev_test_virtual_network(name, block): {
      local p = path(['data', 'azurerm_dev_test_virtual_network', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dev_test_virtual_network: {
              [name]: std.prune({
                lab_name: build.template(block.lab_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      allowed_subnets: p.child('allowed_subnets').out,
      id: p.child('id').out,
      lab_name: p.child('lab_name').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      subnet_overrides: p.child('subnet_overrides').out,
      unique_identifier: p.child('unique_identifier').out,
    },
    digital_twins_instance(name, block): {
      local p = path(['data', 'azurerm_digital_twins_instance', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_digital_twins_instance: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      host_name: p.child('host_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    disk_access(name, block): {
      local p = path(['data', 'azurerm_disk_access', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_disk_access: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    disk_encryption_set(name, block): {
      local p = path(['data', 'azurerm_disk_encryption_set', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_disk_encryption_set: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      auto_key_rotation_enabled: p.child('auto_key_rotation_enabled').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      key_vault_key_url: p.child('key_vault_key_url').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    dns_a_record(name, block): {
      local p = path(['data', 'azurerm_dns_a_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dns_a_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      target_resource_id: p.child('target_resource_id').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_aaaa_record(name, block): {
      local p = path(['data', 'azurerm_dns_aaaa_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dns_aaaa_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      target_resource_id: p.child('target_resource_id').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_caa_record(name, block): {
      local p = path(['data', 'azurerm_dns_caa_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dns_caa_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      record: p.child('record').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_cname_record(name, block): {
      local p = path(['data', 'azurerm_dns_cname_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dns_cname_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      record: p.child('record').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      target_resource_id: p.child('target_resource_id').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_mx_record(name, block): {
      local p = path(['data', 'azurerm_dns_mx_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dns_mx_record: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      record: p.child('record').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_ns_record(name, block): {
      local p = path(['data', 'azurerm_dns_ns_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dns_ns_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_ptr_record(name, block): {
      local p = path(['data', 'azurerm_dns_ptr_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dns_ptr_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_soa_record(name, block): {
      local p = path(['data', 'azurerm_dns_soa_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dns_soa_record: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      email: p.child('email').out,
      expire_time: p.child('expire_time').out,
      fqdn: p.child('fqdn').out,
      host_name: p.child('host_name').out,
      id: p.child('id').out,
      minimum_ttl: p.child('minimum_ttl').out,
      name: p.child('name').out,
      refresh_time: p.child('refresh_time').out,
      resource_group_name: p.child('resource_group_name').out,
      retry_time: p.child('retry_time').out,
      serial_number: p.child('serial_number').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_srv_record(name, block): {
      local p = path(['data', 'azurerm_dns_srv_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dns_srv_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      record: p.child('record').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_txt_record(name, block): {
      local p = path(['data', 'azurerm_dns_txt_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dns_txt_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      record: p.child('record').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    dns_zone(name, block): {
      local p = path(['data', 'azurerm_dns_zone', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_dns_zone: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      max_number_of_record_sets: p.child('max_number_of_record_sets').out,
      name: p.child('name').out,
      name_servers: p.child('name_servers').out,
      number_of_record_sets: p.child('number_of_record_sets').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    elastic_cloud_elasticsearch(name, block): {
      local p = path(['data', 'azurerm_elastic_cloud_elasticsearch', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_elastic_cloud_elasticsearch: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      elastic_cloud_deployment_id: p.child('elastic_cloud_deployment_id').out,
      elastic_cloud_email_address: p.child('elastic_cloud_email_address').out,
      elastic_cloud_sso_default_url: p.child('elastic_cloud_sso_default_url').out,
      elastic_cloud_user_id: p.child('elastic_cloud_user_id').out,
      elasticsearch_service_url: p.child('elasticsearch_service_url').out,
      id: p.child('id').out,
      kibana_service_url: p.child('kibana_service_url').out,
      kibana_sso_uri: p.child('kibana_sso_uri').out,
      location: p.child('location').out,
      monitoring_enabled: p.child('monitoring_enabled').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    elastic_san(name, block): {
      local p = path(['data', 'azurerm_elastic_san', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_elastic_san: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      base_size_in_tib: p.child('base_size_in_tib').out,
      extended_size_in_tib: p.child('extended_size_in_tib').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      total_iops: p.child('total_iops').out,
      total_mbps: p.child('total_mbps').out,
      total_size_in_tib: p.child('total_size_in_tib').out,
      total_volume_size_in_gib: p.child('total_volume_size_in_gib').out,
      volume_group_count: p.child('volume_group_count').out,
      zones: p.child('zones').out,
    },
    elastic_san_volume_group(name, block): {
      local p = path(['data', 'azurerm_elastic_san_volume_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_elastic_san_volume_group: {
              [name]: std.prune({
                elastic_san_id: build.template(block.elastic_san_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      elastic_san_id: p.child('elastic_san_id').out,
      encryption: p.child('encryption').out,
      encryption_type: p.child('encryption_type').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      name: p.child('name').out,
      network_rule: p.child('network_rule').out,
      protocol_type: p.child('protocol_type').out,
    },
    elastic_san_volume_snapshot(name, block): {
      local p = path(['data', 'azurerm_elastic_san_volume_snapshot', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_elastic_san_volume_snapshot: {
              [name]: std.prune({
                name: build.template(block.name),
                volume_group_id: build.template(block.volume_group_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      source_id: p.child('source_id').out,
      source_volume_size_in_gib: p.child('source_volume_size_in_gib').out,
      volume_group_id: p.child('volume_group_id').out,
      volume_name: p.child('volume_name').out,
    },
    eventgrid_domain(name, block): {
      local p = path(['data', 'azurerm_eventgrid_domain', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_eventgrid_domain: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      inbound_ip_rule: p.child('inbound_ip_rule').out,
      input_mapping_default_values: p.child('input_mapping_default_values').out,
      input_mapping_fields: p.child('input_mapping_fields').out,
      input_schema: p.child('input_schema').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_access_key: p.child('primary_access_key').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      tags: p.child('tags').out,
    },
    eventgrid_domain_topic(name, block): {
      local p = path(['data', 'azurerm_eventgrid_domain_topic', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_eventgrid_domain_topic: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    eventgrid_system_topic(name, block): {
      local p = path(['data', 'azurerm_eventgrid_system_topic', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_eventgrid_system_topic: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      metric_arm_resource_id: p.child('metric_arm_resource_id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      source_arm_resource_id: p.child('source_arm_resource_id').out,
      tags: p.child('tags').out,
      topic_type: p.child('topic_type').out,
    },
    eventgrid_topic(name, block): {
      local p = path(['data', 'azurerm_eventgrid_topic', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_eventgrid_topic: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_access_key: p.child('primary_access_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      tags: p.child('tags').out,
    },
    eventhub(name, block): {
      local p = path(['data', 'azurerm_eventhub', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_eventhub: {
              [name]: std.prune({
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      partition_count: p.child('partition_count').out,
      partition_ids: p.child('partition_ids').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    eventhub_authorization_rule(name, block): {
      local p = path(['data', 'azurerm_eventhub_authorization_rule', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_eventhub_authorization_rule: {
              [name]: std.prune({
                eventhub_name: build.template(block.eventhub_name),
                listen: build.template(std.get(block, 'listen', null, true)),
                manage: build.template(std.get(block, 'manage', null, true)),
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                resource_group_name: build.template(block.resource_group_name),
                send: build.template(std.get(block, 'send', null, true)),
              }),
            },
          },
        },
      },
      eventhub_name: p.child('eventhub_name').out,
      id: p.child('id').out,
      listen: p.child('listen').out,
      manage: p.child('manage').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_connection_string_alias: p.child('primary_connection_string_alias').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_connection_string_alias: p.child('secondary_connection_string_alias').out,
      secondary_key: p.child('secondary_key').out,
      send: p.child('send').out,
    },
    eventhub_cluster(name, block): {
      local p = path(['data', 'azurerm_eventhub_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_eventhub_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
    },
    eventhub_consumer_group(name, block): {
      local p = path(['data', 'azurerm_eventhub_consumer_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_eventhub_consumer_group: {
              [name]: std.prune({
                eventhub_name: build.template(block.eventhub_name),
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      eventhub_name: p.child('eventhub_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      resource_group_name: p.child('resource_group_name').out,
      user_metadata: p.child('user_metadata').out,
    },
    eventhub_namespace(name, block): {
      local p = path(['data', 'azurerm_eventhub_namespace', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_eventhub_namespace: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      auto_inflate_enabled: p.child('auto_inflate_enabled').out,
      capacity: p.child('capacity').out,
      dedicated_cluster_id: p.child('dedicated_cluster_id').out,
      default_primary_connection_string: p.child('default_primary_connection_string').out,
      default_primary_connection_string_alias: p.child('default_primary_connection_string_alias').out,
      default_primary_key: p.child('default_primary_key').out,
      default_secondary_connection_string: p.child('default_secondary_connection_string').out,
      default_secondary_connection_string_alias: p.child('default_secondary_connection_string_alias').out,
      default_secondary_key: p.child('default_secondary_key').out,
      id: p.child('id').out,
      kafka_enabled: p.child('kafka_enabled').out,
      location: p.child('location').out,
      maximum_throughput_units: p.child('maximum_throughput_units').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    eventhub_namespace_authorization_rule(name, block): {
      local p = path(['data', 'azurerm_eventhub_namespace_authorization_rule', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_eventhub_namespace_authorization_rule: {
              [name]: std.prune({
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      listen: p.child('listen').out,
      manage: p.child('manage').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_connection_string_alias: p.child('primary_connection_string_alias').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_connection_string_alias: p.child('secondary_connection_string_alias').out,
      secondary_key: p.child('secondary_key').out,
      send: p.child('send').out,
    },
    eventhub_sas(name, block): {
      local p = path(['data', 'azurerm_eventhub_sas', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_eventhub_sas: {
              [name]: std.prune({
                connection_string: build.template(block.connection_string),
                expiry: build.template(block.expiry),
              }),
            },
          },
        },
      },
      connection_string: p.child('connection_string').out,
      expiry: p.child('expiry').out,
      id: p.child('id').out,
      sas: p.child('sas').out,
    },
    express_route_circuit(name, block): {
      local p = path(['data', 'azurerm_express_route_circuit', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_express_route_circuit: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      peerings: p.child('peerings').out,
      resource_group_name: p.child('resource_group_name').out,
      service_key: p.child('service_key').out,
      service_provider_properties: p.child('service_provider_properties').out,
      service_provider_provisioning_state: p.child('service_provider_provisioning_state').out,
      sku: p.child('sku').out,
    },
    express_route_circuit_peering(name, block): {
      local p = path(['data', 'azurerm_express_route_circuit_peering', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_express_route_circuit_peering: {
              [name]: std.prune({
                express_route_circuit_name: build.template(block.express_route_circuit_name),
                peering_type: build.template(block.peering_type),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      azure_asn: p.child('azure_asn').out,
      express_route_circuit_name: p.child('express_route_circuit_name').out,
      gateway_manager_etag: p.child('gateway_manager_etag').out,
      id: p.child('id').out,
      ipv4_enabled: p.child('ipv4_enabled').out,
      peer_asn: p.child('peer_asn').out,
      peering_type: p.child('peering_type').out,
      primary_azure_port: p.child('primary_azure_port').out,
      primary_peer_address_prefix: p.child('primary_peer_address_prefix').out,
      resource_group_name: p.child('resource_group_name').out,
      route_filter_id: p.child('route_filter_id').out,
      secondary_azure_port: p.child('secondary_azure_port').out,
      secondary_peer_address_prefix: p.child('secondary_peer_address_prefix').out,
      shared_key: p.child('shared_key').out,
      vlan_id: p.child('vlan_id').out,
    },
    extended_locations(name, block): {
      local p = path(['data', 'azurerm_extended_locations', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_extended_locations: {
              [name]: std.prune({
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      extended_locations: p.child('extended_locations').out,
      id: p.child('id').out,
      location: p.child('location').out,
    },
    firewall(name, block): {
      local p = path(['data', 'azurerm_firewall', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_firewall: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      dns_proxy_enabled: p.child('dns_proxy_enabled').out,
      dns_servers: p.child('dns_servers').out,
      firewall_policy_id: p.child('firewall_policy_id').out,
      id: p.child('id').out,
      ip_configuration: p.child('ip_configuration').out,
      location: p.child('location').out,
      management_ip_configuration: p.child('management_ip_configuration').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      sku_tier: p.child('sku_tier').out,
      tags: p.child('tags').out,
      threat_intel_mode: p.child('threat_intel_mode').out,
      virtual_hub: p.child('virtual_hub').out,
      zones: p.child('zones').out,
    },
    firewall_policy(name, block): {
      local p = path(['data', 'azurerm_firewall_policy', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_firewall_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      base_policy_id: p.child('base_policy_id').out,
      child_policies: p.child('child_policies').out,
      dns: p.child('dns').out,
      firewalls: p.child('firewalls').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      rule_collection_groups: p.child('rule_collection_groups').out,
      tags: p.child('tags').out,
      threat_intelligence_allowlist: p.child('threat_intelligence_allowlist').out,
      threat_intelligence_mode: p.child('threat_intelligence_mode').out,
    },
    function_app(name, block): {
      local p = path(['data', 'azurerm_function_app', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_function_app: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      app_service_plan_id: p.child('app_service_plan_id').out,
      app_settings: p.child('app_settings').out,
      client_cert_mode: p.child('client_cert_mode').out,
      connection_string: p.child('connection_string').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      os_type: p.child('os_type').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      resource_group_name: p.child('resource_group_name').out,
      site_config: p.child('site_config').out,
      site_credential: p.child('site_credential').out,
      source_control: p.child('source_control').out,
      tags: p.child('tags').out,
    },
    function_app_host_keys(name, block): {
      local p = path(['data', 'azurerm_function_app_host_keys', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_function_app_host_keys: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      blobs_extension_key: p.child('blobs_extension_key').out,
      default_function_key: p.child('default_function_key').out,
      durabletask_extension_key: p.child('durabletask_extension_key').out,
      event_grid_extension_config_key: p.child('event_grid_extension_config_key').out,
      event_grid_extension_key: p.child('event_grid_extension_key').out,
      id: p.child('id').out,
      name: p.child('name').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      signalr_extension_key: p.child('signalr_extension_key').out,
      webpubsub_extension_key: p.child('webpubsub_extension_key').out,
    },
    hdinsight_cluster(name, block): {
      local p = path(['data', 'azurerm_hdinsight_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_hdinsight_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').out,
      cluster_version: p.child('cluster_version').out,
      component_versions: p.child('component_versions').out,
      edge_ssh_endpoint: p.child('edge_ssh_endpoint').out,
      gateway: p.child('gateway').out,
      https_endpoint: p.child('https_endpoint').out,
      id: p.child('id').out,
      kafka_rest_proxy_endpoint: p.child('kafka_rest_proxy_endpoint').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      ssh_endpoint: p.child('ssh_endpoint').out,
      tags: p.child('tags').out,
      tier: p.child('tier').out,
      tls_min_version: p.child('tls_min_version').out,
    },
    healthcare_dicom_service(name, block): {
      local p = path(['data', 'azurerm_healthcare_dicom_service', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_healthcare_dicom_service: {
              [name]: std.prune({
                name: build.template(block.name),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      authentication: p.child('authentication').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_endpoint: p.child('private_endpoint').out,
      service_url: p.child('service_url').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
    },
    healthcare_fhir_service(name, block): {
      local p = path(['data', 'azurerm_healthcare_fhir_service', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_healthcare_fhir_service: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      access_policy_object_ids: p.child('access_policy_object_ids').out,
      authentication: p.child('authentication').out,
      configuration_export_storage_account_name: p.child('configuration_export_storage_account_name').out,
      container_registry_login_server_url: p.child('container_registry_login_server_url').out,
      cors: p.child('cors').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
    },
    healthcare_medtech_service(name, block): {
      local p = path(['data', 'azurerm_healthcare_medtech_service', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_healthcare_medtech_service: {
              [name]: std.prune({
                name: build.template(block.name),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      device_mapping_json: p.child('device_mapping_json').out,
      eventhub_consumer_group_name: p.child('eventhub_consumer_group_name').out,
      eventhub_name: p.child('eventhub_name').out,
      eventhub_namespace_name: p.child('eventhub_namespace_name').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      name: p.child('name').out,
      workspace_id: p.child('workspace_id').out,
    },
    healthcare_service(name, block): {
      local p = path(['data', 'azurerm_healthcare_service', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_healthcare_service: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      access_policy_object_ids: p.child('access_policy_object_ids').out,
      authentication_configuration: p.child('authentication_configuration').out,
      cors_configuration: p.child('cors_configuration').out,
      cosmosdb_key_vault_key_versionless_id: p.child('cosmosdb_key_vault_key_versionless_id').out,
      cosmosdb_throughput: p.child('cosmosdb_throughput').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    healthcare_workspace(name, block): {
      local p = path(['data', 'azurerm_healthcare_workspace', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_healthcare_workspace: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    image(name, block): {
      local p = path(['data', 'azurerm_image', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_image: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                name_regex: build.template(std.get(block, 'name_regex', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                sort_descending: build.template(std.get(block, 'sort_descending', null, true)),
              }),
            },
          },
        },
      },
      data_disk: p.child('data_disk').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      name_regex: p.child('name_regex').out,
      os_disk: p.child('os_disk').out,
      resource_group_name: p.child('resource_group_name').out,
      sort_descending: p.child('sort_descending').out,
      tags: p.child('tags').out,
      zone_resilient: p.child('zone_resilient').out,
    },
    images(name, block): {
      local p = path(['data', 'azurerm_images', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_images: {
              [name]: std.prune({
                resource_group_name: build.template(block.resource_group_name),
                tags_filter: build.template(std.get(block, 'tags_filter', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      images: p.child('images').out,
      resource_group_name: p.child('resource_group_name').out,
      tags_filter: p.child('tags_filter').out,
    },
    iothub(name, block): {
      local p = path(['data', 'azurerm_iothub', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_iothub: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    iothub_dps(name, block): {
      local p = path(['data', 'azurerm_iothub_dps', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_iothub_dps: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allocation_policy: p.child('allocation_policy').out,
      device_provisioning_host_name: p.child('device_provisioning_host_name').out,
      id: p.child('id').out,
      id_scope: p.child('id_scope').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      service_operations_host_name: p.child('service_operations_host_name').out,
      tags: p.child('tags').out,
    },
    iothub_dps_shared_access_policy(name, block): {
      local p = path(['data', 'azurerm_iothub_dps_shared_access_policy', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_iothub_dps_shared_access_policy: {
              [name]: std.prune({
                iothub_dps_name: build.template(block.iothub_dps_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      iothub_dps_name: p.child('iothub_dps_name').out,
      name: p.child('name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_key: p.child('secondary_key').out,
    },
    iothub_shared_access_policy(name, block): {
      local p = path(['data', 'azurerm_iothub_shared_access_policy', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_iothub_shared_access_policy: {
              [name]: std.prune({
                iothub_name: build.template(block.iothub_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      iothub_name: p.child('iothub_name').out,
      name: p.child('name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_key: p.child('secondary_key').out,
    },
    ip_group(name, block): {
      local p = path(['data', 'azurerm_ip_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_ip_group: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      cidrs: p.child('cidrs').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    ip_groups(name, block): {
      local p = path(['data', 'azurerm_ip_groups', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_ip_groups: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      location: p.child('location').out,
      name: p.child('name').out,
      names: p.child('names').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    key_vault(name, block): {
      local p = path(['data', 'azurerm_key_vault', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_key_vault: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      access_policy: p.child('access_policy').out,
      enable_rbac_authorization: p.child('enable_rbac_authorization').out,
      enabled_for_deployment: p.child('enabled_for_deployment').out,
      enabled_for_disk_encryption: p.child('enabled_for_disk_encryption').out,
      enabled_for_template_deployment: p.child('enabled_for_template_deployment').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      network_acls: p.child('network_acls').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      purge_protection_enabled: p.child('purge_protection_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
      vault_uri: p.child('vault_uri').out,
    },
    key_vault_access_policy(name, block): {
      local p = path(['data', 'azurerm_key_vault_access_policy', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_key_vault_access_policy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      certificate_permissions: p.child('certificate_permissions').out,
      id: p.child('id').out,
      key_permissions: p.child('key_permissions').out,
      name: p.child('name').out,
      secret_permissions: p.child('secret_permissions').out,
    },
    key_vault_certificate(name, block): {
      local p = path(['data', 'azurerm_key_vault_certificate', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_key_vault_certificate: {
              [name]: std.prune({
                key_vault_id: build.template(block.key_vault_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      certificate_data: p.child('certificate_data').out,
      certificate_data_base64: p.child('certificate_data_base64').out,
      certificate_policy: p.child('certificate_policy').out,
      expires: p.child('expires').out,
      id: p.child('id').out,
      key_vault_id: p.child('key_vault_id').out,
      name: p.child('name').out,
      not_before: p.child('not_before').out,
      resource_manager_id: p.child('resource_manager_id').out,
      resource_manager_versionless_id: p.child('resource_manager_versionless_id').out,
      secret_id: p.child('secret_id').out,
      tags: p.child('tags').out,
      thumbprint: p.child('thumbprint').out,
      version: p.child('version').out,
      versionless_id: p.child('versionless_id').out,
      versionless_secret_id: p.child('versionless_secret_id').out,
    },
    key_vault_certificate_data(name, block): {
      local p = path(['data', 'azurerm_key_vault_certificate_data', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_key_vault_certificate_data: {
              [name]: std.prune({
                key_vault_id: build.template(block.key_vault_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      certificates_count: p.child('certificates_count').out,
      expires: p.child('expires').out,
      hex: p.child('hex').out,
      id: p.child('id').out,
      key: p.child('key').out,
      key_vault_id: p.child('key_vault_id').out,
      name: p.child('name').out,
      not_before: p.child('not_before').out,
      pem: p.child('pem').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    key_vault_certificate_issuer(name, block): {
      local p = path(['data', 'azurerm_key_vault_certificate_issuer', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_key_vault_certificate_issuer: {
              [name]: std.prune({
                key_vault_id: build.template(block.key_vault_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      admin: p.child('admin').out,
      id: p.child('id').out,
      key_vault_id: p.child('key_vault_id').out,
      name: p.child('name').out,
      org_id: p.child('org_id').out,
      provider_name: p.child('provider_name').out,
    },
    key_vault_certificates(name, block): {
      local p = path(['data', 'azurerm_key_vault_certificates', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_key_vault_certificates: {
              [name]: std.prune({
                include_pending: build.template(std.get(block, 'include_pending', null, true)),
                key_vault_id: build.template(block.key_vault_id),
              }),
            },
          },
        },
      },
      certificates: p.child('certificates').out,
      id: p.child('id').out,
      include_pending: p.child('include_pending').out,
      key_vault_id: p.child('key_vault_id').out,
      names: p.child('names').out,
    },
    key_vault_encrypted_value(name, block): {
      local p = path(['data', 'azurerm_key_vault_encrypted_value', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_key_vault_encrypted_value: {
              [name]: std.prune({
                algorithm: build.template(block.algorithm),
                encrypted_data: build.template(std.get(block, 'encrypted_data', null, true)),
                key_vault_key_id: build.template(block.key_vault_key_id),
                plain_text_value: build.template(std.get(block, 'plain_text_value', null, true)),
              }),
            },
          },
        },
      },
      algorithm: p.child('algorithm').out,
      decoded_plain_text_value: p.child('decoded_plain_text_value').out,
      encrypted_data: p.child('encrypted_data').out,
      id: p.child('id').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      plain_text_value: p.child('plain_text_value').out,
    },
    key_vault_key(name, block): {
      local p = path(['data', 'azurerm_key_vault_key', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_key_vault_key: {
              [name]: std.prune({
                key_vault_id: build.template(block.key_vault_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      curve: p.child('curve').out,
      e: p.child('e').out,
      id: p.child('id').out,
      key_opts: p.child('key_opts').out,
      key_size: p.child('key_size').out,
      key_type: p.child('key_type').out,
      key_vault_id: p.child('key_vault_id').out,
      n: p.child('n').out,
      name: p.child('name').out,
      public_key_openssh: p.child('public_key_openssh').out,
      public_key_pem: p.child('public_key_pem').out,
      resource_id: p.child('resource_id').out,
      resource_versionless_id: p.child('resource_versionless_id').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
      versionless_id: p.child('versionless_id').out,
      x: p.child('x').out,
      y: p.child('y').out,
    },
    key_vault_managed_hardware_security_module(name, block): {
      local p = path(['data', 'azurerm_key_vault_managed_hardware_security_module', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_key_vault_managed_hardware_security_module: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      admin_object_ids: p.child('admin_object_ids').out,
      hsm_uri: p.child('hsm_uri').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      purge_protection_enabled: p.child('purge_protection_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      soft_delete_retention_days: p.child('soft_delete_retention_days').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
    },
    key_vault_managed_hardware_security_module_role_definition(name, block): {
      local p = path(['data', 'azurerm_key_vault_managed_hardware_security_module_role_definition', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_key_vault_managed_hardware_security_module_role_definition: {
              [name]: std.prune({
                managed_hsm_id: build.template(block.managed_hsm_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      assignable_scopes: p.child('assignable_scopes').out,
      description: p.child('description').out,
      id: p.child('id').out,
      managed_hsm_id: p.child('managed_hsm_id').out,
      name: p.child('name').out,
      permission: p.child('permission').out,
      resource_manager_id: p.child('resource_manager_id').out,
      role_name: p.child('role_name').out,
      role_type: p.child('role_type').out,
    },
    key_vault_secret(name, block): {
      local p = path(['data', 'azurerm_key_vault_secret', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_key_vault_secret: {
              [name]: std.prune({
                key_vault_id: build.template(block.key_vault_id),
                name: build.template(block.name),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      content_type: p.child('content_type').out,
      expiration_date: p.child('expiration_date').out,
      id: p.child('id').out,
      key_vault_id: p.child('key_vault_id').out,
      name: p.child('name').out,
      not_before_date: p.child('not_before_date').out,
      resource_id: p.child('resource_id').out,
      resource_versionless_id: p.child('resource_versionless_id').out,
      tags: p.child('tags').out,
      value: p.child('value').out,
      version: p.child('version').out,
      versionless_id: p.child('versionless_id').out,
    },
    key_vault_secrets(name, block): {
      local p = path(['data', 'azurerm_key_vault_secrets', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_key_vault_secrets: {
              [name]: std.prune({
                key_vault_id: build.template(block.key_vault_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key_vault_id: p.child('key_vault_id').out,
      names: p.child('names').out,
      secrets: p.child('secrets').out,
    },
    kubernetes_cluster(name, block): {
      local p = path(['data', 'azurerm_kubernetes_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_kubernetes_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      aci_connector_linux: p.child('aci_connector_linux').out,
      agent_pool_profile: p.child('agent_pool_profile').out,
      api_server_authorized_ip_ranges: p.child('api_server_authorized_ip_ranges').out,
      azure_active_directory_role_based_access_control: p.child('azure_active_directory_role_based_access_control').out,
      azure_policy_enabled: p.child('azure_policy_enabled').out,
      current_kubernetes_version: p.child('current_kubernetes_version').out,
      disk_encryption_set_id: p.child('disk_encryption_set_id').out,
      dns_prefix: p.child('dns_prefix').out,
      fqdn: p.child('fqdn').out,
      http_application_routing_enabled: p.child('http_application_routing_enabled').out,
      http_application_routing_zone_name: p.child('http_application_routing_zone_name').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      ingress_application_gateway: p.child('ingress_application_gateway').out,
      key_management_service: p.child('key_management_service').out,
      key_vault_secrets_provider: p.child('key_vault_secrets_provider').out,
      kube_admin_config: p.child('kube_admin_config').out,
      kube_admin_config_raw: p.child('kube_admin_config_raw').out,
      kube_config: p.child('kube_config').out,
      kube_config_raw: p.child('kube_config_raw').out,
      kubelet_identity: p.child('kubelet_identity').out,
      kubernetes_version: p.child('kubernetes_version').out,
      linux_profile: p.child('linux_profile').out,
      location: p.child('location').out,
      microsoft_defender: p.child('microsoft_defender').out,
      name: p.child('name').out,
      network_profile: p.child('network_profile').out,
      node_resource_group: p.child('node_resource_group').out,
      node_resource_group_id: p.child('node_resource_group_id').out,
      oidc_issuer_enabled: p.child('oidc_issuer_enabled').out,
      oidc_issuer_url: p.child('oidc_issuer_url').out,
      oms_agent: p.child('oms_agent').out,
      open_service_mesh_enabled: p.child('open_service_mesh_enabled').out,
      private_cluster_enabled: p.child('private_cluster_enabled').out,
      private_fqdn: p.child('private_fqdn').out,
      resource_group_name: p.child('resource_group_name').out,
      role_based_access_control_enabled: p.child('role_based_access_control_enabled').out,
      service_mesh_profile: p.child('service_mesh_profile').out,
      service_principal: p.child('service_principal').out,
      storage_profile: p.child('storage_profile').out,
      tags: p.child('tags').out,
      windows_profile: p.child('windows_profile').out,
    },
    kubernetes_cluster_node_pool(name, block): {
      local p = path(['data', 'azurerm_kubernetes_cluster_node_pool', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_kubernetes_cluster_node_pool: {
              [name]: std.prune({
                kubernetes_cluster_name: build.template(block.kubernetes_cluster_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      auto_scaling_enabled: p.child('auto_scaling_enabled').out,
      eviction_policy: p.child('eviction_policy').out,
      id: p.child('id').out,
      kubernetes_cluster_name: p.child('kubernetes_cluster_name').out,
      max_count: p.child('max_count').out,
      max_pods: p.child('max_pods').out,
      min_count: p.child('min_count').out,
      mode: p.child('mode').out,
      name: p.child('name').out,
      node_count: p.child('node_count').out,
      node_labels: p.child('node_labels').out,
      node_public_ip_enabled: p.child('node_public_ip_enabled').out,
      node_public_ip_prefix_id: p.child('node_public_ip_prefix_id').out,
      node_taints: p.child('node_taints').out,
      orchestrator_version: p.child('orchestrator_version').out,
      os_disk_size_gb: p.child('os_disk_size_gb').out,
      os_disk_type: p.child('os_disk_type').out,
      os_type: p.child('os_type').out,
      priority: p.child('priority').out,
      proximity_placement_group_id: p.child('proximity_placement_group_id').out,
      resource_group_name: p.child('resource_group_name').out,
      spot_max_price: p.child('spot_max_price').out,
      tags: p.child('tags').out,
      upgrade_settings: p.child('upgrade_settings').out,
      vm_size: p.child('vm_size').out,
      vnet_subnet_id: p.child('vnet_subnet_id').out,
      zones: p.child('zones').out,
    },
    kubernetes_node_pool_snapshot(name, block): {
      local p = path(['data', 'azurerm_kubernetes_node_pool_snapshot', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_kubernetes_node_pool_snapshot: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      source_node_pool_id: p.child('source_node_pool_id').out,
      tags: p.child('tags').out,
    },
    kubernetes_service_versions(name, block): {
      local p = path(['data', 'azurerm_kubernetes_service_versions', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_kubernetes_service_versions: {
              [name]: std.prune({
                include_preview: build.template(std.get(block, 'include_preview', null, true)),
                location: build.template(block.location),
                version_prefix: build.template(std.get(block, 'version_prefix', null, true)),
              }),
            },
          },
        },
      },
      default_version: p.child('default_version').out,
      id: p.child('id').out,
      include_preview: p.child('include_preview').out,
      latest_version: p.child('latest_version').out,
      location: p.child('location').out,
      version_prefix: p.child('version_prefix').out,
      versions: p.child('versions').out,
    },
    kusto_cluster(name, block): {
      local p = path(['data', 'azurerm_kusto_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_kusto_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      data_ingestion_uri: p.child('data_ingestion_uri').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      uri: p.child('uri').out,
    },
    kusto_database(name, block): {
      local p = path(['data', 'azurerm_kusto_database', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_kusto_database: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      cluster_name: p.child('cluster_name').out,
      hot_cache_period: p.child('hot_cache_period').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      size: p.child('size').out,
      soft_delete_period: p.child('soft_delete_period').out,
    },
    lb(name, block): {
      local p = path(['data', 'azurerm_lb', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_lb: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      frontend_ip_configuration: p.child('frontend_ip_configuration').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_ip_address: p.child('private_ip_address').out,
      private_ip_addresses: p.child('private_ip_addresses').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    lb_backend_address_pool(name, block): {
      local p = path(['data', 'azurerm_lb_backend_address_pool', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_lb_backend_address_pool: {
              [name]: std.prune({
                loadbalancer_id: build.template(block.loadbalancer_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      backend_address: p.child('backend_address').out,
      backend_ip_configurations: p.child('backend_ip_configurations').out,
      id: p.child('id').out,
      inbound_nat_rules: p.child('inbound_nat_rules').out,
      load_balancing_rules: p.child('load_balancing_rules').out,
      loadbalancer_id: p.child('loadbalancer_id').out,
      name: p.child('name').out,
      outbound_rules: p.child('outbound_rules').out,
    },
    lb_outbound_rule(name, block): {
      local p = path(['data', 'azurerm_lb_outbound_rule', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_lb_outbound_rule: {
              [name]: std.prune({
                loadbalancer_id: build.template(block.loadbalancer_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      allocated_outbound_ports: p.child('allocated_outbound_ports').out,
      backend_address_pool_id: p.child('backend_address_pool_id').out,
      frontend_ip_configuration: p.child('frontend_ip_configuration').out,
      id: p.child('id').out,
      idle_timeout_in_minutes: p.child('idle_timeout_in_minutes').out,
      loadbalancer_id: p.child('loadbalancer_id').out,
      name: p.child('name').out,
      protocol: p.child('protocol').out,
      tcp_reset_enabled: p.child('tcp_reset_enabled').out,
    },
    lb_rule(name, block): {
      local p = path(['data', 'azurerm_lb_rule', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_lb_rule: {
              [name]: std.prune({
                loadbalancer_id: build.template(block.loadbalancer_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      backend_address_pool_id: p.child('backend_address_pool_id').out,
      backend_port: p.child('backend_port').out,
      disable_outbound_snat: p.child('disable_outbound_snat').out,
      enable_floating_ip: p.child('enable_floating_ip').out,
      enable_tcp_reset: p.child('enable_tcp_reset').out,
      frontend_ip_configuration_name: p.child('frontend_ip_configuration_name').out,
      frontend_port: p.child('frontend_port').out,
      id: p.child('id').out,
      idle_timeout_in_minutes: p.child('idle_timeout_in_minutes').out,
      load_distribution: p.child('load_distribution').out,
      loadbalancer_id: p.child('loadbalancer_id').out,
      name: p.child('name').out,
      probe_id: p.child('probe_id').out,
      protocol: p.child('protocol').out,
    },
    linux_function_app(name, block): {
      local p = path(['data', 'azurerm_linux_function_app', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_linux_function_app: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      app_settings: p.child('app_settings').out,
      auth_settings: p.child('auth_settings').out,
      auth_settings_v2: p.child('auth_settings_v2').out,
      availability: p.child('availability').out,
      backup: p.child('backup').out,
      builtin_logging_enabled: p.child('builtin_logging_enabled').out,
      client_certificate_enabled: p.child('client_certificate_enabled').out,
      client_certificate_exclusion_paths: p.child('client_certificate_exclusion_paths').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      connection_string: p.child('connection_string').out,
      content_share_force_disabled: p.child('content_share_force_disabled').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      daily_memory_time_quota: p.child('daily_memory_time_quota').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      ftp_publish_basic_authentication_enabled: p.child('ftp_publish_basic_authentication_enabled').out,
      functions_extension_version: p.child('functions_extension_version').out,
      hosting_environment_id: p.child('hosting_environment_id').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      service_plan_id: p.child('service_plan_id').out,
      site_config: p.child('site_config').out,
      site_credential: p.child('site_credential').out,
      sticky_settings: p.child('sticky_settings').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_name: p.child('storage_account_name').out,
      storage_key_vault_secret_id: p.child('storage_key_vault_secret_id').out,
      storage_uses_managed_identity: p.child('storage_uses_managed_identity').out,
      tags: p.child('tags').out,
      usage: p.child('usage').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
      webdeploy_publish_basic_authentication_enabled: p.child('webdeploy_publish_basic_authentication_enabled').out,
    },
    linux_web_app(name, block): {
      local p = path(['data', 'azurerm_linux_web_app', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_linux_web_app: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      app_metadata: p.child('app_metadata').out,
      app_settings: p.child('app_settings').out,
      auth_settings: p.child('auth_settings').out,
      auth_settings_v2: p.child('auth_settings_v2').out,
      availability: p.child('availability').out,
      backup: p.child('backup').out,
      client_affinity_enabled: p.child('client_affinity_enabled').out,
      client_certificate_enabled: p.child('client_certificate_enabled').out,
      client_certificate_exclusion_paths: p.child('client_certificate_exclusion_paths').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      connection_string: p.child('connection_string').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      ftp_publish_basic_authentication_enabled: p.child('ftp_publish_basic_authentication_enabled').out,
      hosting_environment_id: p.child('hosting_environment_id').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      key_vault_reference_identity_id: p.child('key_vault_reference_identity_id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      logs: p.child('logs').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      service_plan_id: p.child('service_plan_id').out,
      site_config: p.child('site_config').out,
      site_credential: p.child('site_credential').out,
      sticky_settings: p.child('sticky_settings').out,
      storage_account: p.child('storage_account').out,
      tags: p.child('tags').out,
      usage: p.child('usage').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
      webdeploy_publish_basic_authentication_enabled: p.child('webdeploy_publish_basic_authentication_enabled').out,
    },
    load_test(name, block): {
      local p = path(['data', 'azurerm_load_test', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_load_test: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      data_plane_uri: p.child('data_plane_uri').out,
      description: p.child('description').out,
      encryption: p.child('encryption').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    local_network_gateway(name, block): {
      local p = path(['data', 'azurerm_local_network_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_local_network_gateway: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      address_space: p.child('address_space').out,
      bgp_settings: p.child('bgp_settings').out,
      gateway_address: p.child('gateway_address').out,
      gateway_fqdn: p.child('gateway_fqdn').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    location(name, block): {
      local p = path(['data', 'azurerm_location', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_location: {
              [name]: std.prune({
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      zone_mappings: p.child('zone_mappings').out,
    },
    log_analytics_workspace(name, block): {
      local p = path(['data', 'azurerm_log_analytics_workspace', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_log_analytics_workspace: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      daily_quota_gb: p.child('daily_quota_gb').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_shared_key: p.child('primary_shared_key').out,
      resource_group_name: p.child('resource_group_name').out,
      retention_in_days: p.child('retention_in_days').out,
      secondary_shared_key: p.child('secondary_shared_key').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
    },
    logic_app_integration_account(name, block): {
      local p = path(['data', 'azurerm_logic_app_integration_account', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_logic_app_integration_account: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
    },
    logic_app_standard(name, block): {
      local p = path(['data', 'azurerm_logic_app_standard', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_logic_app_standard: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      app_service_plan_id: p.child('app_service_plan_id').out,
      app_settings: p.child('app_settings').out,
      bundle_version: p.child('bundle_version').out,
      client_affinity_enabled: p.child('client_affinity_enabled').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      connection_string: p.child('connection_string').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      resource_group_name: p.child('resource_group_name').out,
      site_credential: p.child('site_credential').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_name: p.child('storage_account_name').out,
      storage_account_share_name: p.child('storage_account_share_name').out,
      tags: p.child('tags').out,
      use_extension_bundle: p.child('use_extension_bundle').out,
      version: p.child('version').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
    },
    logic_app_workflow(name, block): {
      local p = path(['data', 'azurerm_logic_app_workflow', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_logic_app_workflow: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      access_endpoint: p.child('access_endpoint').out,
      connector_endpoint_ip_addresses: p.child('connector_endpoint_ip_addresses').out,
      connector_outbound_ip_addresses: p.child('connector_outbound_ip_addresses').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      logic_app_integration_account_id: p.child('logic_app_integration_account_id').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      workflow_endpoint_ip_addresses: p.child('workflow_endpoint_ip_addresses').out,
      workflow_outbound_ip_addresses: p.child('workflow_outbound_ip_addresses').out,
      workflow_schema: p.child('workflow_schema').out,
      workflow_version: p.child('workflow_version').out,
    },
    machine_learning_workspace(name, block): {
      local p = path(['data', 'azurerm_machine_learning_workspace', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_machine_learning_workspace: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    maintenance_configuration(name, block): {
      local p = path(['data', 'azurerm_maintenance_configuration', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_maintenance_configuration: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      in_guest_user_patch_mode: p.child('in_guest_user_patch_mode').out,
      install_patches: p.child('install_patches').out,
      location: p.child('location').out,
      name: p.child('name').out,
      properties: p.child('properties').out,
      resource_group_name: p.child('resource_group_name').out,
      scope: p.child('scope').out,
      tags: p.child('tags').out,
      visibility: p.child('visibility').out,
      window: p.child('window').out,
    },
    managed_api(name, block): {
      local p = path(['data', 'azurerm_managed_api', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_managed_api: {
              [name]: std.prune({
                location: build.template(block.location),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    managed_application_definition(name, block): {
      local p = path(['data', 'azurerm_managed_application_definition', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_managed_application_definition: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    managed_disk(name, block): {
      local p = path(['data', 'azurerm_managed_disk', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_managed_disk: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      create_option: p.child('create_option').out,
      disk_access_id: p.child('disk_access_id').out,
      disk_encryption_set_id: p.child('disk_encryption_set_id').out,
      disk_iops_read_write: p.child('disk_iops_read_write').out,
      disk_mbps_read_write: p.child('disk_mbps_read_write').out,
      disk_size_gb: p.child('disk_size_gb').out,
      encryption_settings: p.child('encryption_settings').out,
      id: p.child('id').out,
      image_reference_id: p.child('image_reference_id').out,
      name: p.child('name').out,
      network_access_policy: p.child('network_access_policy').out,
      os_type: p.child('os_type').out,
      resource_group_name: p.child('resource_group_name').out,
      source_resource_id: p.child('source_resource_id').out,
      source_uri: p.child('source_uri').out,
      storage_account_id: p.child('storage_account_id').out,
      storage_account_type: p.child('storage_account_type').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    management_group(name, block): {
      local p = path(['data', 'azurerm_management_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_management_group: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      all_management_group_ids: p.child('all_management_group_ids').out,
      all_subscription_ids: p.child('all_subscription_ids').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      management_group_ids: p.child('management_group_ids').out,
      name: p.child('name').out,
      parent_management_group_id: p.child('parent_management_group_id').out,
      subscription_ids: p.child('subscription_ids').out,
      tenant_scoped_id: p.child('tenant_scoped_id').out,
    },
    management_group_template_deployment(name, block): {
      local p = path(['data', 'azurerm_management_group_template_deployment', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_management_group_template_deployment: {
              [name]: std.prune({
                management_group_id: build.template(block.management_group_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      management_group_id: p.child('management_group_id').out,
      name: p.child('name').out,
      output_content: p.child('output_content').out,
    },
    maps_account(name, block): {
      local p = path(['data', 'azurerm_maps_account', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_maps_account: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      primary_access_key: p.child('primary_access_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      x_ms_client_id: p.child('x_ms_client_id').out,
    },
    marketplace_agreement(name, block): {
      local p = path(['data', 'azurerm_marketplace_agreement', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_marketplace_agreement: {
              [name]: std.prune({
                offer: build.template(block.offer),
                plan: build.template(block.plan),
                publisher: build.template(block.publisher),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      license_text_link: p.child('license_text_link').out,
      offer: p.child('offer').out,
      plan: p.child('plan').out,
      privacy_policy_link: p.child('privacy_policy_link').out,
      publisher: p.child('publisher').out,
    },
    mobile_network(name, block): {
      local p = path(['data', 'azurerm_mobile_network', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mobile_network: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_country_code: p.child('mobile_country_code').out,
      mobile_network_code: p.child('mobile_network_code').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      service_key: p.child('service_key').out,
      tags: p.child('tags').out,
    },
    mobile_network_attached_data_network(name, block): {
      local p = path(['data', 'azurerm_mobile_network_attached_data_network', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mobile_network_attached_data_network: {
              [name]: std.prune({
                mobile_network_data_network_name: build.template(block.mobile_network_data_network_name),
                mobile_network_packet_core_data_plane_id: build.template(block.mobile_network_packet_core_data_plane_id),
              }),
            },
          },
        },
      },
      dns_addresses: p.child('dns_addresses').out,
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_data_network_name: p.child('mobile_network_data_network_name').out,
      mobile_network_packet_core_data_plane_id: p.child('mobile_network_packet_core_data_plane_id').out,
      network_address_port_translation: p.child('network_address_port_translation').out,
      tags: p.child('tags').out,
      user_equipment_address_pool_prefixes: p.child('user_equipment_address_pool_prefixes').out,
      user_equipment_static_address_pool_prefixes: p.child('user_equipment_static_address_pool_prefixes').out,
      user_plane_access_ipv4_address: p.child('user_plane_access_ipv4_address').out,
      user_plane_access_ipv4_gateway: p.child('user_plane_access_ipv4_gateway').out,
      user_plane_access_ipv4_subnet: p.child('user_plane_access_ipv4_subnet').out,
      user_plane_access_name: p.child('user_plane_access_name').out,
    },
    mobile_network_data_network(name, block): {
      local p = path(['data', 'azurerm_mobile_network_data_network', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mobile_network_data_network: {
              [name]: std.prune({
                mobile_network_id: build.template(block.mobile_network_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_id: p.child('mobile_network_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    mobile_network_packet_core_control_plane(name, block): {
      local p = path(['data', 'azurerm_mobile_network_packet_core_control_plane', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mobile_network_packet_core_control_plane: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      control_plane_access_ipv4_address: p.child('control_plane_access_ipv4_address').out,
      control_plane_access_ipv4_gateway: p.child('control_plane_access_ipv4_gateway').out,
      control_plane_access_ipv4_subnet: p.child('control_plane_access_ipv4_subnet').out,
      control_plane_access_name: p.child('control_plane_access_name').out,
      core_network_technology: p.child('core_network_technology').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      interoperability_settings_json: p.child('interoperability_settings_json').out,
      local_diagnostics_access: p.child('local_diagnostics_access').out,
      location: p.child('location').out,
      name: p.child('name').out,
      platform: p.child('platform').out,
      resource_group_name: p.child('resource_group_name').out,
      site_ids: p.child('site_ids').out,
      sku: p.child('sku').out,
      software_version: p.child('software_version').out,
      tags: p.child('tags').out,
      user_equipment_mtu_in_bytes: p.child('user_equipment_mtu_in_bytes').out,
    },
    mobile_network_packet_core_data_plane(name, block): {
      local p = path(['data', 'azurerm_mobile_network_packet_core_data_plane', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mobile_network_packet_core_data_plane: {
              [name]: std.prune({
                mobile_network_packet_core_control_plane_id: build.template(block.mobile_network_packet_core_control_plane_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_packet_core_control_plane_id: p.child('mobile_network_packet_core_control_plane_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      user_plane_access_ipv4_address: p.child('user_plane_access_ipv4_address').out,
      user_plane_access_ipv4_gateway: p.child('user_plane_access_ipv4_gateway').out,
      user_plane_access_ipv4_subnet: p.child('user_plane_access_ipv4_subnet').out,
      user_plane_access_name: p.child('user_plane_access_name').out,
    },
    mobile_network_service(name, block): {
      local p = path(['data', 'azurerm_mobile_network_service', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mobile_network_service: {
              [name]: std.prune({
                mobile_network_id: build.template(block.mobile_network_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_id: p.child('mobile_network_id').out,
      name: p.child('name').out,
      pcc_rule: p.child('pcc_rule').out,
      service_precedence: p.child('service_precedence').out,
      service_qos_policy: p.child('service_qos_policy').out,
      tags: p.child('tags').out,
    },
    mobile_network_sim(name, block): {
      local p = path(['data', 'azurerm_mobile_network_sim', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mobile_network_sim: {
              [name]: std.prune({
                mobile_network_sim_group_id: build.template(block.mobile_network_sim_group_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      device_type: p.child('device_type').out,
      id: p.child('id').out,
      integrated_circuit_card_identifier: p.child('integrated_circuit_card_identifier').out,
      international_mobile_subscriber_identity: p.child('international_mobile_subscriber_identity').out,
      mobile_network_sim_group_id: p.child('mobile_network_sim_group_id').out,
      name: p.child('name').out,
      sim_policy_id: p.child('sim_policy_id').out,
      sim_state: p.child('sim_state').out,
      static_ip_configuration: p.child('static_ip_configuration').out,
      vendor_key_fingerprint: p.child('vendor_key_fingerprint').out,
      vendor_name: p.child('vendor_name').out,
    },
    mobile_network_sim_group(name, block): {
      local p = path(['data', 'azurerm_mobile_network_sim_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mobile_network_sim_group: {
              [name]: std.prune({
                mobile_network_id: build.template(block.mobile_network_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      encryption_key_url: p.child('encryption_key_url').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      mobile_network_id: p.child('mobile_network_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    mobile_network_sim_policy(name, block): {
      local p = path(['data', 'azurerm_mobile_network_sim_policy', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mobile_network_sim_policy: {
              [name]: std.prune({
                mobile_network_id: build.template(block.mobile_network_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      default_slice_id: p.child('default_slice_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_id: p.child('mobile_network_id').out,
      name: p.child('name').out,
      rat_frequency_selection_priority_index: p.child('rat_frequency_selection_priority_index').out,
      registration_timer_in_seconds: p.child('registration_timer_in_seconds').out,
      slice: p.child('slice').out,
      tags: p.child('tags').out,
      user_equipment_aggregate_maximum_bit_rate: p.child('user_equipment_aggregate_maximum_bit_rate').out,
    },
    mobile_network_site(name, block): {
      local p = path(['data', 'azurerm_mobile_network_site', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mobile_network_site: {
              [name]: std.prune({
                mobile_network_id: build.template(block.mobile_network_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_id: p.child('mobile_network_id').out,
      name: p.child('name').out,
      network_function_ids: p.child('network_function_ids').out,
      tags: p.child('tags').out,
    },
    mobile_network_slice(name, block): {
      local p = path(['data', 'azurerm_mobile_network_slice', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mobile_network_slice: {
              [name]: std.prune({
                mobile_network_id: build.template(block.mobile_network_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      mobile_network_id: p.child('mobile_network_id').out,
      name: p.child('name').out,
      single_network_slice_selection_assistance_information: p.child('single_network_slice_selection_assistance_information').out,
      tags: p.child('tags').out,
    },
    monitor_action_group(name, block): {
      local p = path(['data', 'azurerm_monitor_action_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_monitor_action_group: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      arm_role_receiver: p.child('arm_role_receiver').out,
      automation_runbook_receiver: p.child('automation_runbook_receiver').out,
      azure_app_push_receiver: p.child('azure_app_push_receiver').out,
      azure_function_receiver: p.child('azure_function_receiver').out,
      email_receiver: p.child('email_receiver').out,
      enabled: p.child('enabled').out,
      event_hub_receiver: p.child('event_hub_receiver').out,
      id: p.child('id').out,
      itsm_receiver: p.child('itsm_receiver').out,
      logic_app_receiver: p.child('logic_app_receiver').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      short_name: p.child('short_name').out,
      sms_receiver: p.child('sms_receiver').out,
      voice_receiver: p.child('voice_receiver').out,
      webhook_receiver: p.child('webhook_receiver').out,
    },
    monitor_data_collection_endpoint(name, block): {
      local p = path(['data', 'azurerm_monitor_data_collection_endpoint', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_monitor_data_collection_endpoint: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      configuration_access_endpoint: p.child('configuration_access_endpoint').out,
      description: p.child('description').out,
      id: p.child('id').out,
      immutable_id: p.child('immutable_id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      logs_ingestion_endpoint: p.child('logs_ingestion_endpoint').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    monitor_data_collection_rule(name, block): {
      local p = path(['data', 'azurerm_monitor_data_collection_rule', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_monitor_data_collection_rule: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      data_collection_endpoint_id: p.child('data_collection_endpoint_id').out,
      data_flow: p.child('data_flow').out,
      data_sources: p.child('data_sources').out,
      description: p.child('description').out,
      destinations: p.child('destinations').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      immutable_id: p.child('immutable_id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      stream_declaration: p.child('stream_declaration').out,
      tags: p.child('tags').out,
    },
    monitor_diagnostic_categories(name, block): {
      local p = path(['data', 'azurerm_monitor_diagnostic_categories', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_monitor_diagnostic_categories: {
              [name]: std.prune({
                resource_id: build.template(block.resource_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_category_groups: p.child('log_category_groups').out,
      log_category_types: p.child('log_category_types').out,
      metrics: p.child('metrics').out,
      resource_id: p.child('resource_id').out,
    },
    monitor_scheduled_query_rules_alert(name, block): {
      local p = path(['data', 'azurerm_monitor_scheduled_query_rules_alert', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_monitor_scheduled_query_rules_alert: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      authorized_resource_ids: p.child('authorized_resource_ids').out,
      data_source_id: p.child('data_source_id').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      frequency: p.child('frequency').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      query: p.child('query').out,
      query_type: p.child('query_type').out,
      resource_group_name: p.child('resource_group_name').out,
      severity: p.child('severity').out,
      tags: p.child('tags').out,
      throttling: p.child('throttling').out,
      time_window: p.child('time_window').out,
      trigger: p.child('trigger').out,
    },
    monitor_scheduled_query_rules_log(name, block): {
      local p = path(['data', 'azurerm_monitor_scheduled_query_rules_log', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_monitor_scheduled_query_rules_log: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      authorized_resource_ids: p.child('authorized_resource_ids').out,
      criteria: p.child('criteria').out,
      data_source_id: p.child('data_source_id').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    monitor_workspace(name, block): {
      local p = path(['data', 'azurerm_monitor_workspace', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_monitor_workspace: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      default_data_collection_endpoint_id: p.child('default_data_collection_endpoint_id').out,
      default_data_collection_rule_id: p.child('default_data_collection_rule_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      query_endpoint: p.child('query_endpoint').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    mssql_database(name, block): {
      local p = path(['data', 'azurerm_mssql_database', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mssql_database: {
              [name]: std.prune({
                name: build.template(block.name),
                server_id: build.template(block.server_id),
              }),
            },
          },
        },
      },
      collation: p.child('collation').out,
      elastic_pool_id: p.child('elastic_pool_id').out,
      enclave_type: p.child('enclave_type').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      license_type: p.child('license_type').out,
      max_size_gb: p.child('max_size_gb').out,
      name: p.child('name').out,
      read_replica_count: p.child('read_replica_count').out,
      read_scale: p.child('read_scale').out,
      server_id: p.child('server_id').out,
      sku_name: p.child('sku_name').out,
      storage_account_type: p.child('storage_account_type').out,
      tags: p.child('tags').out,
      transparent_data_encryption_enabled: p.child('transparent_data_encryption_enabled').out,
      transparent_data_encryption_key_automatic_rotation_enabled: p.child('transparent_data_encryption_key_automatic_rotation_enabled').out,
      transparent_data_encryption_key_vault_key_id: p.child('transparent_data_encryption_key_vault_key_id').out,
      zone_redundant: p.child('zone_redundant').out,
    },
    mssql_elasticpool(name, block): {
      local p = path(['data', 'azurerm_mssql_elasticpool', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mssql_elasticpool: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                server_name: build.template(block.server_name),
              }),
            },
          },
        },
      },
      enclave_type: p.child('enclave_type').out,
      id: p.child('id').out,
      license_type: p.child('license_type').out,
      location: p.child('location').out,
      max_size_bytes: p.child('max_size_bytes').out,
      max_size_gb: p.child('max_size_gb').out,
      name: p.child('name').out,
      per_db_max_capacity: p.child('per_db_max_capacity').out,
      per_db_min_capacity: p.child('per_db_min_capacity').out,
      resource_group_name: p.child('resource_group_name').out,
      server_name: p.child('server_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      zone_redundant: p.child('zone_redundant').out,
    },
    mssql_managed_instance(name, block): {
      local p = path(['data', 'azurerm_mssql_managed_instance', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mssql_managed_instance: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      administrator_login: p.child('administrator_login').out,
      collation: p.child('collation').out,
      customer_managed_key_id: p.child('customer_managed_key_id').out,
      dns_zone: p.child('dns_zone').out,
      dns_zone_partner_id: p.child('dns_zone_partner_id').out,
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      license_type: p.child('license_type').out,
      location: p.child('location').out,
      minimum_tls_version: p.child('minimum_tls_version').out,
      name: p.child('name').out,
      proxy_override: p.child('proxy_override').out,
      public_data_endpoint_enabled: p.child('public_data_endpoint_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      storage_account_type: p.child('storage_account_type').out,
      storage_size_in_gb: p.child('storage_size_in_gb').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      timezone_id: p.child('timezone_id').out,
      vcores: p.child('vcores').out,
    },
    mssql_server(name, block): {
      local p = path(['data', 'azurerm_mssql_server', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mssql_server: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      administrator_login: p.child('administrator_login').out,
      fully_qualified_domain_name: p.child('fully_qualified_domain_name').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      restorable_dropped_database_ids: p.child('restorable_dropped_database_ids').out,
      tags: p.child('tags').out,
      transparent_data_encryption_key_vault_key_id: p.child('transparent_data_encryption_key_vault_key_id').out,
      version: p.child('version').out,
    },
    mysql_flexible_server(name, block): {
      local p = path(['data', 'azurerm_mysql_flexible_server', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_mysql_flexible_server: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      administrator_login: p.child('administrator_login').out,
      backup_retention_days: p.child('backup_retention_days').out,
      delegated_subnet_id: p.child('delegated_subnet_id').out,
      fqdn: p.child('fqdn').out,
      geo_redundant_backup_enabled: p.child('geo_redundant_backup_enabled').out,
      high_availability: p.child('high_availability').out,
      id: p.child('id').out,
      location: p.child('location').out,
      maintenance_window: p.child('maintenance_window').out,
      name: p.child('name').out,
      private_dns_zone_id: p.child('private_dns_zone_id').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      replica_capacity: p.child('replica_capacity').out,
      replication_role: p.child('replication_role').out,
      resource_group_name: p.child('resource_group_name').out,
      restore_point_in_time: p.child('restore_point_in_time').out,
      sku_name: p.child('sku_name').out,
      storage: p.child('storage').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
      zone: p.child('zone').out,
    },
    nat_gateway(name, block): {
      local p = path(['data', 'azurerm_nat_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_nat_gateway: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      idle_timeout_in_minutes: p.child('idle_timeout_in_minutes').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_ip_address_ids: p.child('public_ip_address_ids').out,
      public_ip_prefix_ids: p.child('public_ip_prefix_ids').out,
      resource_group_name: p.child('resource_group_name').out,
      resource_guid: p.child('resource_guid').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    netapp_account(name, block): {
      local p = path(['data', 'azurerm_netapp_account', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_netapp_account: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    netapp_account_encryption(name, block): {
      local p = path(['data', 'azurerm_netapp_account_encryption', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_netapp_account_encryption: {
              [name]: std.prune({
                encryption_key: build.template(std.get(block, 'encryption_key', null, true)),
                netapp_account_id: build.template(block.netapp_account_id),
                system_assigned_identity_principal_id: build.template(std.get(block, 'system_assigned_identity_principal_id', null, true)),
                user_assigned_identity_id: build.template(std.get(block, 'user_assigned_identity_id', null, true)),
              }),
            },
          },
        },
      },
      encryption_key: p.child('encryption_key').out,
      id: p.child('id').out,
      netapp_account_id: p.child('netapp_account_id').out,
      system_assigned_identity_principal_id: p.child('system_assigned_identity_principal_id').out,
      user_assigned_identity_id: p.child('user_assigned_identity_id').out,
    },
    netapp_pool(name, block): {
      local p = path(['data', 'azurerm_netapp_pool', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_netapp_pool: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      encryption_type: p.child('encryption_type').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      service_level: p.child('service_level').out,
      size_in_tb: p.child('size_in_tb').out,
    },
    netapp_snapshot(name, block): {
      local p = path(['data', 'azurerm_netapp_snapshot', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_netapp_snapshot: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                pool_name: build.template(block.pool_name),
                resource_group_name: build.template(block.resource_group_name),
                volume_name: build.template(block.volume_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      pool_name: p.child('pool_name').out,
      resource_group_name: p.child('resource_group_name').out,
      volume_name: p.child('volume_name').out,
    },
    netapp_snapshot_policy(name, block): {
      local p = path(['data', 'azurerm_netapp_snapshot_policy', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_netapp_snapshot_policy: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      daily_schedule: p.child('daily_schedule').out,
      enabled: p.child('enabled').out,
      hourly_schedule: p.child('hourly_schedule').out,
      id: p.child('id').out,
      location: p.child('location').out,
      monthly_schedule: p.child('monthly_schedule').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      weekly_schedule: p.child('weekly_schedule').out,
    },
    netapp_volume(name, block): {
      local p = path(['data', 'azurerm_netapp_volume', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_netapp_volume: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                pool_name: build.template(block.pool_name),
                resource_group_name: build.template(block.resource_group_name),
                security_style: build.template(std.get(block, 'security_style', null, true)),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      data_protection_replication: p.child('data_protection_replication').out,
      encryption_key_source: p.child('encryption_key_source').out,
      id: p.child('id').out,
      key_vault_private_endpoint_id: p.child('key_vault_private_endpoint_id').out,
      location: p.child('location').out,
      mount_ip_addresses: p.child('mount_ip_addresses').out,
      name: p.child('name').out,
      network_features: p.child('network_features').out,
      pool_name: p.child('pool_name').out,
      protocols: p.child('protocols').out,
      resource_group_name: p.child('resource_group_name').out,
      security_style: p.child('security_style').out,
      service_level: p.child('service_level').out,
      smb_access_based_enumeration_enabled: p.child('smb_access_based_enumeration_enabled').out,
      smb_non_browsable_enabled: p.child('smb_non_browsable_enabled').out,
      storage_quota_in_gb: p.child('storage_quota_in_gb').out,
      subnet_id: p.child('subnet_id').out,
      volume_path: p.child('volume_path').out,
      zone: p.child('zone').out,
    },
    netapp_volume_group_sap_hana(name, block): {
      local p = path(['data', 'azurerm_netapp_volume_group_sap_hana', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_netapp_volume_group_sap_hana: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      application_identifier: p.child('application_identifier').out,
      group_description: p.child('group_description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      volume: p.child('volume').out,
    },
    netapp_volume_quota_rule(name, block): {
      local p = path(['data', 'azurerm_netapp_volume_quota_rule', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_netapp_volume_quota_rule: {
              [name]: std.prune({
                name: build.template(block.name),
                volume_id: build.template(block.volume_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      quota_size_in_kib: p.child('quota_size_in_kib').out,
      quota_target: p.child('quota_target').out,
      quota_type: p.child('quota_type').out,
      volume_id: p.child('volume_id').out,
    },
    network_ddos_protection_plan(name, block): {
      local p = path(['data', 'azurerm_network_ddos_protection_plan', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_network_ddos_protection_plan: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      virtual_network_ids: p.child('virtual_network_ids').out,
    },
    network_interface(name, block): {
      local p = path(['data', 'azurerm_network_interface', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_network_interface: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      accelerated_networking_enabled: p.child('accelerated_networking_enabled').out,
      applied_dns_servers: p.child('applied_dns_servers').out,
      dns_servers: p.child('dns_servers').out,
      id: p.child('id').out,
      internal_dns_name_label: p.child('internal_dns_name_label').out,
      ip_configuration: p.child('ip_configuration').out,
      ip_forwarding_enabled: p.child('ip_forwarding_enabled').out,
      location: p.child('location').out,
      mac_address: p.child('mac_address').out,
      name: p.child('name').out,
      network_security_group_id: p.child('network_security_group_id').out,
      private_ip_address: p.child('private_ip_address').out,
      private_ip_addresses: p.child('private_ip_addresses').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      virtual_machine_id: p.child('virtual_machine_id').out,
    },
    network_manager(name, block): {
      local p = path(['data', 'azurerm_network_manager', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_network_manager: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      cross_tenant_scopes: p.child('cross_tenant_scopes').out,
      description: p.child('description').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scope: p.child('scope').out,
      scope_accesses: p.child('scope_accesses').out,
      tags: p.child('tags').out,
    },
    network_manager_connectivity_configuration(name, block): {
      local p = path(['data', 'azurerm_network_manager_connectivity_configuration', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_network_manager_connectivity_configuration: {
              [name]: std.prune({
                name: build.template(block.name),
                network_manager_id: build.template(block.network_manager_id),
              }),
            },
          },
        },
      },
      applies_to_group: p.child('applies_to_group').out,
      connectivity_topology: p.child('connectivity_topology').out,
      delete_existing_peering_enabled: p.child('delete_existing_peering_enabled').out,
      description: p.child('description').out,
      global_mesh_enabled: p.child('global_mesh_enabled').out,
      hub: p.child('hub').out,
      id: p.child('id').out,
      name: p.child('name').out,
      network_manager_id: p.child('network_manager_id').out,
    },
    network_manager_network_group(name, block): {
      local p = path(['data', 'azurerm_network_manager_network_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_network_manager_network_group: {
              [name]: std.prune({
                name: build.template(block.name),
                network_manager_id: build.template(block.network_manager_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      network_manager_id: p.child('network_manager_id').out,
    },
    network_security_group(name, block): {
      local p = path(['data', 'azurerm_network_security_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_network_security_group: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      security_rule: p.child('security_rule').out,
      tags: p.child('tags').out,
    },
    network_service_tags(name, block): {
      local p = path(['data', 'azurerm_network_service_tags', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_network_service_tags: {
              [name]: std.prune({
                location: build.template(block.location),
                location_filter: build.template(std.get(block, 'location_filter', null, true)),
                service: build.template(block.service),
              }),
            },
          },
        },
      },
      address_prefixes: p.child('address_prefixes').out,
      id: p.child('id').out,
      ipv4_cidrs: p.child('ipv4_cidrs').out,
      ipv6_cidrs: p.child('ipv6_cidrs').out,
      location: p.child('location').out,
      location_filter: p.child('location_filter').out,
      name: p.child('name').out,
      service: p.child('service').out,
    },
    network_watcher(name, block): {
      local p = path(['data', 'azurerm_network_watcher', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_network_watcher: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    nginx_certificate(name, block): {
      local p = path(['data', 'azurerm_nginx_certificate', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_nginx_certificate: {
              [name]: std.prune({
                name: build.template(block.name),
                nginx_deployment_id: build.template(block.nginx_deployment_id),
              }),
            },
          },
        },
      },
      certificate_virtual_path: p.child('certificate_virtual_path').out,
      error_code: p.child('error_code').out,
      error_message: p.child('error_message').out,
      id: p.child('id').out,
      key_vault_secret_creation_date: p.child('key_vault_secret_creation_date').out,
      key_vault_secret_id: p.child('key_vault_secret_id').out,
      key_vault_secret_version: p.child('key_vault_secret_version').out,
      key_virtual_path: p.child('key_virtual_path').out,
      name: p.child('name').out,
      nginx_deployment_id: p.child('nginx_deployment_id').out,
      sha1_thumbprint: p.child('sha1_thumbprint').out,
    },
    nginx_configuration(name, block): {
      local p = path(['data', 'azurerm_nginx_configuration', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_nginx_configuration: {
              [name]: std.prune({
                nginx_deployment_id: build.template(block.nginx_deployment_id),
              }),
            },
          },
        },
      },
      config_file: p.child('config_file').out,
      id: p.child('id').out,
      nginx_deployment_id: p.child('nginx_deployment_id').out,
      package_data: p.child('package_data').out,
      protected_file: p.child('protected_file').out,
      root_file: p.child('root_file').out,
    },
    nginx_deployment(name, block): {
      local p = path(['data', 'azurerm_nginx_deployment', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_nginx_deployment: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      auto_scale_profile: p.child('auto_scale_profile').out,
      automatic_upgrade_channel: p.child('automatic_upgrade_channel').out,
      capacity: p.child('capacity').out,
      diagnose_support_enabled: p.child('diagnose_support_enabled').out,
      email: p.child('email').out,
      frontend_private: p.child('frontend_private').out,
      frontend_public: p.child('frontend_public').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      ip_address: p.child('ip_address').out,
      location: p.child('location').out,
      logging_storage_account: p.child('logging_storage_account').out,
      managed_resource_group: p.child('managed_resource_group').out,
      name: p.child('name').out,
      network_interface: p.child('network_interface').out,
      nginx_version: p.child('nginx_version').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    notification_hub(name, block): {
      local p = path(['data', 'azurerm_notification_hub', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_notification_hub: {
              [name]: std.prune({
                name: build.template(block.name),
                namespace_name: build.template(block.namespace_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      apns_credential: p.child('apns_credential').out,
      gcm_credential: p.child('gcm_credential').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    notification_hub_namespace(name, block): {
      local p = path(['data', 'azurerm_notification_hub_namespace', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_notification_hub_namespace: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      namespace_type: p.child('namespace_type').out,
      resource_group_name: p.child('resource_group_name').out,
      servicebus_endpoint: p.child('servicebus_endpoint').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    oracle_adbs_character_sets(name, block): {
      local p = path(['data', 'azurerm_oracle_adbs_character_sets', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_oracle_adbs_character_sets: {
              [name]: std.prune({
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      character_sets: p.child('character_sets').out,
      id: p.child('id').out,
      location: p.child('location').out,
    },
    oracle_adbs_national_character_sets(name, block): {
      local p = path(['data', 'azurerm_oracle_adbs_national_character_sets', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_oracle_adbs_national_character_sets: {
              [name]: std.prune({
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      character_sets: p.child('character_sets').out,
      id: p.child('id').out,
      location: p.child('location').out,
    },
    oracle_autonomous_database(name, block): {
      local p = path(['data', 'azurerm_oracle_autonomous_database', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_oracle_autonomous_database: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      actual_used_data_storage_size_in_tbs: p.child('actual_used_data_storage_size_in_tbs').out,
      allocated_storage_size_in_tbs: p.child('allocated_storage_size_in_tbs').out,
      allowed_ips: p.child('allowed_ips').out,
      auto_scaling_enabled: p.child('auto_scaling_enabled').out,
      auto_scaling_for_storage_enabled: p.child('auto_scaling_for_storage_enabled').out,
      autonomous_database_id: p.child('autonomous_database_id').out,
      available_upgrade_versions: p.child('available_upgrade_versions').out,
      backup_retention_period_in_days: p.child('backup_retention_period_in_days').out,
      character_set: p.child('character_set').out,
      compute_count: p.child('compute_count').out,
      cpu_core_count: p.child('cpu_core_count').out,
      data_storage_size_in_gbs: p.child('data_storage_size_in_gbs').out,
      data_storage_size_in_tbs: p.child('data_storage_size_in_tbs').out,
      db_node_storage_size_in_gbs: p.child('db_node_storage_size_in_gbs').out,
      db_version: p.child('db_version').out,
      display_name: p.child('display_name').out,
      failed_data_recovery_in_seconds: p.child('failed_data_recovery_in_seconds').out,
      id: p.child('id').out,
      in_memory_area_in_gbs: p.child('in_memory_area_in_gbs').out,
      lifecycle_details: p.child('lifecycle_details').out,
      local_adg_auto_failover_max_data_loss_limit: p.child('local_adg_auto_failover_max_data_loss_limit').out,
      local_data_guard_enabled: p.child('local_data_guard_enabled').out,
      location: p.child('location').out,
      memory_per_oracle_compute_unit_in_gbs: p.child('memory_per_oracle_compute_unit_in_gbs').out,
      mtls_connection_required: p.child('mtls_connection_required').out,
      name: p.child('name').out,
      national_character_set: p.child('national_character_set').out,
      next_long_term_backup_time_stamp: p.child('next_long_term_backup_time_stamp').out,
      oci_url: p.child('oci_url').out,
      ocid: p.child('ocid').out,
      peer_db_id: p.child('peer_db_id').out,
      peer_db_ids: p.child('peer_db_ids').out,
      preview: p.child('preview').out,
      preview_version_with_service_terms_accepted: p.child('preview_version_with_service_terms_accepted').out,
      private_endpoint: p.child('private_endpoint').out,
      private_endpoint_ip: p.child('private_endpoint_ip').out,
      private_endpoint_label: p.child('private_endpoint_label').out,
      provisionable_cpus: p.child('provisionable_cpus').out,
      remote_data_guard_enabled: p.child('remote_data_guard_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      service_console_url: p.child('service_console_url').out,
      sql_web_developer_url: p.child('sql_web_developer_url').out,
      subnet_id: p.child('subnet_id').out,
      supported_regions_to_clone_to: p.child('supported_regions_to_clone_to').out,
      tags: p.child('tags').out,
      time_created: p.child('time_created').out,
      time_data_guard_role_changed: p.child('time_data_guard_role_changed').out,
      time_deletion_of_free_autonomous_database: p.child('time_deletion_of_free_autonomous_database').out,
      time_local_data_guard_enabled_on: p.child('time_local_data_guard_enabled_on').out,
      time_maintenance_begin: p.child('time_maintenance_begin').out,
      time_maintenance_end: p.child('time_maintenance_end').out,
      time_of_last_failover: p.child('time_of_last_failover').out,
      time_of_last_refresh: p.child('time_of_last_refresh').out,
      time_of_last_refresh_point: p.child('time_of_last_refresh_point').out,
      time_of_last_switchover: p.child('time_of_last_switchover').out,
      time_reclamation_of_free_autonomous_database: p.child('time_reclamation_of_free_autonomous_database').out,
      used_data_storage_size_in_gbs: p.child('used_data_storage_size_in_gbs').out,
      used_data_storage_size_in_tbs: p.child('used_data_storage_size_in_tbs').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    oracle_cloud_vm_cluster(name, block): {
      local p = path(['data', 'azurerm_oracle_cloud_vm_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_oracle_cloud_vm_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      backup_subnet_cidr: p.child('backup_subnet_cidr').out,
      cloud_exadata_infrastructure_id: p.child('cloud_exadata_infrastructure_id').out,
      cluster_name: p.child('cluster_name').out,
      compartment_id: p.child('compartment_id').out,
      compute_nodes: p.child('compute_nodes').out,
      cpu_core_count: p.child('cpu_core_count').out,
      data_collection_options: p.child('data_collection_options').out,
      data_storage_percentage: p.child('data_storage_percentage').out,
      data_storage_size_in_tbs: p.child('data_storage_size_in_tbs').out,
      db_node_storage_size_in_gbs: p.child('db_node_storage_size_in_gbs').out,
      db_servers: p.child('db_servers').out,
      disk_redundancy: p.child('disk_redundancy').out,
      display_name: p.child('display_name').out,
      domain: p.child('domain').out,
      gi_version: p.child('gi_version').out,
      hostname: p.child('hostname').out,
      hostname_actual: p.child('hostname_actual').out,
      id: p.child('id').out,
      iorm_config_cache: p.child('iorm_config_cache').out,
      last_update_history_entry_id: p.child('last_update_history_entry_id').out,
      license_model: p.child('license_model').out,
      lifecycle_details: p.child('lifecycle_details').out,
      lifecycle_state: p.child('lifecycle_state').out,
      listener_port: p.child('listener_port').out,
      local_backup_enabled: p.child('local_backup_enabled').out,
      location: p.child('location').out,
      memory_size_in_gbs: p.child('memory_size_in_gbs').out,
      name: p.child('name').out,
      node_count: p.child('node_count').out,
      nsg_url: p.child('nsg_url').out,
      oci_url: p.child('oci_url').out,
      ocid: p.child('ocid').out,
      ocpu_count: p.child('ocpu_count').out,
      resource_group_name: p.child('resource_group_name').out,
      scan_dns_name: p.child('scan_dns_name').out,
      scan_dns_record_id: p.child('scan_dns_record_id').out,
      scan_ip_ids: p.child('scan_ip_ids').out,
      scan_listener_port_tcp: p.child('scan_listener_port_tcp').out,
      scan_listener_port_tcp_ssl: p.child('scan_listener_port_tcp_ssl').out,
      shape: p.child('shape').out,
      sparse_diskgroup_enabled: p.child('sparse_diskgroup_enabled').out,
      ssh_public_keys: p.child('ssh_public_keys').out,
      storage_size_in_gbs: p.child('storage_size_in_gbs').out,
      subnet_id: p.child('subnet_id').out,
      subnet_ocid: p.child('subnet_ocid').out,
      system_version: p.child('system_version').out,
      tags: p.child('tags').out,
      time_created: p.child('time_created').out,
      time_zone: p.child('time_zone').out,
      vip_ods: p.child('vip_ods').out,
      virtual_network_id: p.child('virtual_network_id').out,
      zone_id: p.child('zone_id').out,
    },
    oracle_db_nodes(name, block): {
      local p = path(['data', 'azurerm_oracle_db_nodes', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_oracle_db_nodes: {
              [name]: std.prune({
                cloud_vm_cluster_id: build.template(block.cloud_vm_cluster_id),
              }),
            },
          },
        },
      },
      cloud_vm_cluster_id: p.child('cloud_vm_cluster_id').out,
      db_nodes: p.child('db_nodes').out,
      id: p.child('id').out,
    },
    oracle_db_servers(name, block): {
      local p = path(['data', 'azurerm_oracle_db_servers', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_oracle_db_servers: {
              [name]: std.prune({
                cloud_exadata_infrastructure_name: build.template(block.cloud_exadata_infrastructure_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      cloud_exadata_infrastructure_name: p.child('cloud_exadata_infrastructure_name').out,
      db_servers: p.child('db_servers').out,
      id: p.child('id').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    oracle_db_system_shapes(name, block): {
      local p = path(['data', 'azurerm_oracle_db_system_shapes', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_oracle_db_system_shapes: {
              [name]: std.prune({
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      db_system_shapes: p.child('db_system_shapes').out,
      id: p.child('id').out,
      location: p.child('location').out,
    },
    oracle_exadata_infrastructure(name, block): {
      local p = path(['data', 'azurerm_oracle_exadata_infrastructure', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_oracle_exadata_infrastructure: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      activated_storage_count: p.child('activated_storage_count').out,
      additional_storage_count: p.child('additional_storage_count').out,
      available_storage_size_in_gbs: p.child('available_storage_size_in_gbs').out,
      compute_count: p.child('compute_count').out,
      cpu_count: p.child('cpu_count').out,
      customer_contacts: p.child('customer_contacts').out,
      data_storage_size_in_tbs: p.child('data_storage_size_in_tbs').out,
      db_node_storage_size_in_gbs: p.child('db_node_storage_size_in_gbs').out,
      db_server_version: p.child('db_server_version').out,
      display_name: p.child('display_name').out,
      estimated_patching_time: p.child('estimated_patching_time').out,
      id: p.child('id').out,
      last_maintenance_run_id: p.child('last_maintenance_run_id').out,
      lifecycle_details: p.child('lifecycle_details').out,
      lifecycle_state: p.child('lifecycle_state').out,
      location: p.child('location').out,
      maintenance_window: p.child('maintenance_window').out,
      max_cpu_count: p.child('max_cpu_count').out,
      max_data_storage_in_tbs: p.child('max_data_storage_in_tbs').out,
      max_db_node_storage_size_in_gbs: p.child('max_db_node_storage_size_in_gbs').out,
      max_memory_in_gbs: p.child('max_memory_in_gbs').out,
      memory_size_in_gbs: p.child('memory_size_in_gbs').out,
      monthly_db_server_version: p.child('monthly_db_server_version').out,
      monthly_storage_server_version: p.child('monthly_storage_server_version').out,
      name: p.child('name').out,
      next_maintenance_run_id: p.child('next_maintenance_run_id').out,
      oci_url: p.child('oci_url').out,
      ocid: p.child('ocid').out,
      resource_group_name: p.child('resource_group_name').out,
      shape: p.child('shape').out,
      storage_count: p.child('storage_count').out,
      storage_server_version: p.child('storage_server_version').out,
      tags: p.child('tags').out,
      time_created: p.child('time_created').out,
      total_storage_size_in_gbs: p.child('total_storage_size_in_gbs').out,
      zones: p.child('zones').out,
    },
    oracle_gi_versions(name, block): {
      local p = path(['data', 'azurerm_oracle_gi_versions', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_oracle_gi_versions: {
              [name]: std.prune({
                location: build.template(block.location),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      versions: p.child('versions').out,
    },
    orchestrated_virtual_machine_scale_set(name, block): {
      local p = path(['data', 'azurerm_orchestrated_virtual_machine_scale_set', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_orchestrated_virtual_machine_scale_set: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      network_interface: p.child('network_interface').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    palo_alto_local_rulestack(name, block): {
      local p = path(['data', 'azurerm_palo_alto_local_rulestack', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_palo_alto_local_rulestack: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      anti_spyware_profile: p.child('anti_spyware_profile').out,
      anti_virus_profile: p.child('anti_virus_profile').out,
      description: p.child('description').out,
      dns_subscription: p.child('dns_subscription').out,
      file_blocking_profile: p.child('file_blocking_profile').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_trust_certificate: p.child('outbound_trust_certificate').out,
      outbound_untrust_certificate: p.child('outbound_untrust_certificate').out,
      resource_group_name: p.child('resource_group_name').out,
      url_filtering_profile: p.child('url_filtering_profile').out,
      vulnerability_profile: p.child('vulnerability_profile').out,
    },
    platform_image(name, block): {
      local p = path(['data', 'azurerm_platform_image', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_platform_image: {
              [name]: std.prune({
                location: build.template(block.location),
                offer: build.template(block.offer),
                publisher: build.template(block.publisher),
                sku: build.template(block.sku),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      offer: p.child('offer').out,
      publisher: p.child('publisher').out,
      sku: p.child('sku').out,
      version: p.child('version').out,
    },
    policy_assignment(name, block): {
      local p = path(['data', 'azurerm_policy_assignment', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_policy_assignment: {
              [name]: std.prune({
                name: build.template(block.name),
                scope_id: build.template(block.scope_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      enforce: p.child('enforce').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      non_compliance_message: p.child('non_compliance_message').out,
      not_scopes: p.child('not_scopes').out,
      parameters: p.child('parameters').out,
      policy_definition_id: p.child('policy_definition_id').out,
      scope_id: p.child('scope_id').out,
    },
    policy_definition(name, block): {
      local p = path(['data', 'azurerm_policy_definition', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_policy_definition: {
              [name]: std.prune({
                management_group_name: build.template(std.get(block, 'management_group_name', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      management_group_name: p.child('management_group_name').out,
      metadata: p.child('metadata').out,
      mode: p.child('mode').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      policy_rule: p.child('policy_rule').out,
      policy_type: p.child('policy_type').out,
      role_definition_ids: p.child('role_definition_ids').out,
      type: p.child('type').out,
    },
    policy_definition_built_in(name, block): {
      local p = path(['data', 'azurerm_policy_definition_built_in', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_policy_definition_built_in: {
              [name]: std.prune({
                management_group_name: build.template(std.get(block, 'management_group_name', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      management_group_name: p.child('management_group_name').out,
      metadata: p.child('metadata').out,
      mode: p.child('mode').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      policy_rule: p.child('policy_rule').out,
      policy_type: p.child('policy_type').out,
      role_definition_ids: p.child('role_definition_ids').out,
      type: p.child('type').out,
    },
    policy_set_definition(name, block): {
      local p = path(['data', 'azurerm_policy_set_definition', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_policy_set_definition: {
              [name]: std.prune({
                management_group_name: build.template(std.get(block, 'management_group_name', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      management_group_name: p.child('management_group_name').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      policy_definition_group: p.child('policy_definition_group').out,
      policy_definition_reference: p.child('policy_definition_reference').out,
      policy_definitions: p.child('policy_definitions').out,
      policy_type: p.child('policy_type').out,
    },
    policy_virtual_machine_configuration_assignment(name, block): {
      local p = path(['data', 'azurerm_policy_virtual_machine_configuration_assignment', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_policy_virtual_machine_configuration_assignment: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                virtual_machine_name: build.template(block.virtual_machine_name),
              }),
            },
          },
        },
      },
      assignment_hash: p.child('assignment_hash').out,
      compliance_status: p.child('compliance_status').out,
      content_hash: p.child('content_hash').out,
      content_uri: p.child('content_uri').out,
      id: p.child('id').out,
      last_compliance_status_checked: p.child('last_compliance_status_checked').out,
      latest_report_id: p.child('latest_report_id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      virtual_machine_name: p.child('virtual_machine_name').out,
    },
    portal_dashboard(name, block): {
      local p = path(['data', 'azurerm_portal_dashboard', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_portal_dashboard: {
              [name]: std.prune({
                display_name: build.template(std.get(block, 'display_name', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      dashboard_properties: p.child('dashboard_properties').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    postgresql_flexible_server(name, block): {
      local p = path(['data', 'azurerm_postgresql_flexible_server', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_postgresql_flexible_server: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      administrator_login: p.child('administrator_login').out,
      auto_grow_enabled: p.child('auto_grow_enabled').out,
      backup_retention_days: p.child('backup_retention_days').out,
      delegated_subnet_id: p.child('delegated_subnet_id').out,
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      storage_mb: p.child('storage_mb').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    postgresql_server(name, block): {
      local p = path(['data', 'azurerm_postgresql_server', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_postgresql_server: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      administrator_login: p.child('administrator_login').out,
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    private_dns_a_record(name, block): {
      local p = path(['data', 'azurerm_private_dns_a_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_a_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_aaaa_record(name, block): {
      local p = path(['data', 'azurerm_private_dns_aaaa_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_aaaa_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_cname_record(name, block): {
      local p = path(['data', 'azurerm_private_dns_cname_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_cname_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      record: p.child('record').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      target_resource_id: p.child('target_resource_id').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_mx_record(name, block): {
      local p = path(['data', 'azurerm_private_dns_mx_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_mx_record: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      record: p.child('record').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_ptr_record(name, block): {
      local p = path(['data', 'azurerm_private_dns_ptr_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_ptr_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      records: p.child('records').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_resolver(name, block): {
      local p = path(['data', 'azurerm_private_dns_resolver', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_resolver: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    private_dns_resolver_dns_forwarding_ruleset(name, block): {
      local p = path(['data', 'azurerm_private_dns_resolver_dns_forwarding_ruleset', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_resolver_dns_forwarding_ruleset: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_dns_resolver_outbound_endpoint_ids: p.child('private_dns_resolver_outbound_endpoint_ids').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    private_dns_resolver_forwarding_rule(name, block): {
      local p = path(['data', 'azurerm_private_dns_resolver_forwarding_rule', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_resolver_forwarding_rule: {
              [name]: std.prune({
                dns_forwarding_ruleset_id: build.template(block.dns_forwarding_ruleset_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      dns_forwarding_ruleset_id: p.child('dns_forwarding_ruleset_id').out,
      domain_name: p.child('domain_name').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      target_dns_servers: p.child('target_dns_servers').out,
    },
    private_dns_resolver_inbound_endpoint(name, block): {
      local p = path(['data', 'azurerm_private_dns_resolver_inbound_endpoint', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_resolver_inbound_endpoint: {
              [name]: std.prune({
                name: build.template(block.name),
                private_dns_resolver_id: build.template(block.private_dns_resolver_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ip_configurations: p.child('ip_configurations').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_dns_resolver_id: p.child('private_dns_resolver_id').out,
      tags: p.child('tags').out,
    },
    private_dns_resolver_outbound_endpoint(name, block): {
      local p = path(['data', 'azurerm_private_dns_resolver_outbound_endpoint', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_resolver_outbound_endpoint: {
              [name]: std.prune({
                name: build.template(block.name),
                private_dns_resolver_id: build.template(block.private_dns_resolver_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_dns_resolver_id: p.child('private_dns_resolver_id').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
    },
    private_dns_resolver_virtual_network_link(name, block): {
      local p = path(['data', 'azurerm_private_dns_resolver_virtual_network_link', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_resolver_virtual_network_link: {
              [name]: std.prune({
                dns_forwarding_ruleset_id: build.template(block.dns_forwarding_ruleset_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      dns_forwarding_ruleset_id: p.child('dns_forwarding_ruleset_id').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    private_dns_soa_record(name, block): {
      local p = path(['data', 'azurerm_private_dns_soa_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_soa_record: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      email: p.child('email').out,
      expire_time: p.child('expire_time').out,
      fqdn: p.child('fqdn').out,
      host_name: p.child('host_name').out,
      id: p.child('id').out,
      minimum_ttl: p.child('minimum_ttl').out,
      name: p.child('name').out,
      refresh_time: p.child('refresh_time').out,
      resource_group_name: p.child('resource_group_name').out,
      retry_time: p.child('retry_time').out,
      serial_number: p.child('serial_number').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_srv_record(name, block): {
      local p = path(['data', 'azurerm_private_dns_srv_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_srv_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      record: p.child('record').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_txt_record(name, block): {
      local p = path(['data', 'azurerm_private_dns_txt_record', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_txt_record: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                zone_name: build.template(block.zone_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      record: p.child('record').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      zone_name: p.child('zone_name').out,
    },
    private_dns_zone(name, block): {
      local p = path(['data', 'azurerm_private_dns_zone', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_zone: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      max_number_of_record_sets: p.child('max_number_of_record_sets').out,
      max_number_of_virtual_network_links: p.child('max_number_of_virtual_network_links').out,
      max_number_of_virtual_network_links_with_registration: p.child('max_number_of_virtual_network_links_with_registration').out,
      name: p.child('name').out,
      number_of_record_sets: p.child('number_of_record_sets').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    private_dns_zone_virtual_network_link(name, block): {
      local p = path(['data', 'azurerm_private_dns_zone_virtual_network_link', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_dns_zone_virtual_network_link: {
              [name]: std.prune({
                name: build.template(block.name),
                private_dns_zone_name: build.template(block.private_dns_zone_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      private_dns_zone_name: p.child('private_dns_zone_name').out,
      registration_enabled: p.child('registration_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    private_endpoint_connection(name, block): {
      local p = path(['data', 'azurerm_private_endpoint_connection', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_endpoint_connection: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      network_interface: p.child('network_interface').out,
      private_service_connection: p.child('private_service_connection').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    private_link_service(name, block): {
      local p = path(['data', 'azurerm_private_link_service', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_link_service: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      alias: p.child('alias').out,
      auto_approval_subscription_ids: p.child('auto_approval_subscription_ids').out,
      enable_proxy_protocol: p.child('enable_proxy_protocol').out,
      id: p.child('id').out,
      load_balancer_frontend_ip_configuration_ids: p.child('load_balancer_frontend_ip_configuration_ids').out,
      location: p.child('location').out,
      name: p.child('name').out,
      nat_ip_configuration: p.child('nat_ip_configuration').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      visibility_subscription_ids: p.child('visibility_subscription_ids').out,
    },
    private_link_service_endpoint_connections(name, block): {
      local p = path(['data', 'azurerm_private_link_service_endpoint_connections', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_private_link_service_endpoint_connections: {
              [name]: std.prune({
                resource_group_name: build.template(block.resource_group_name),
                service_id: build.template(block.service_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      private_endpoint_connections: p.child('private_endpoint_connections').out,
      resource_group_name: p.child('resource_group_name').out,
      service_id: p.child('service_id').out,
      service_name: p.child('service_name').out,
    },
    proximity_placement_group(name, block): {
      local p = path(['data', 'azurerm_proximity_placement_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_proximity_placement_group: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    public_ip(name, block): {
      local p = path(['data', 'azurerm_public_ip', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_public_ip: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      allocation_method: p.child('allocation_method').out,
      ddos_protection_mode: p.child('ddos_protection_mode').out,
      ddos_protection_plan_id: p.child('ddos_protection_plan_id').out,
      domain_name_label: p.child('domain_name_label').out,
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      idle_timeout_in_minutes: p.child('idle_timeout_in_minutes').out,
      ip_address: p.child('ip_address').out,
      ip_tags: p.child('ip_tags').out,
      ip_version: p.child('ip_version').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      reverse_fqdn: p.child('reverse_fqdn').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    public_ip_prefix(name, block): {
      local p = path(['data', 'azurerm_public_ip_prefix', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_public_ip_prefix: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ip_prefix: p.child('ip_prefix').out,
      location: p.child('location').out,
      name: p.child('name').out,
      prefix_length: p.child('prefix_length').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    public_ips(name, block): {
      local p = path(['data', 'azurerm_public_ips', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_public_ips: {
              [name]: std.prune({
                allocation_type: build.template(std.get(block, 'allocation_type', null, true)),
                attachment_status: build.template(std.get(block, 'attachment_status', null, true)),
                name_prefix: build.template(std.get(block, 'name_prefix', null, true)),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      allocation_type: p.child('allocation_type').out,
      attachment_status: p.child('attachment_status').out,
      id: p.child('id').out,
      name_prefix: p.child('name_prefix').out,
      public_ips: p.child('public_ips').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    public_maintenance_configurations(name, block): {
      local p = path(['data', 'azurerm_public_maintenance_configurations', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_public_maintenance_configurations: {
              [name]: std.prune({
                location: build.template(std.get(block, 'location', null, true)),
                recur_every: build.template(std.get(block, 'recur_every', null, true)),
                scope: build.template(std.get(block, 'scope', null, true)),
              }),
            },
          },
        },
      },
      configs: p.child('configs').out,
      id: p.child('id').out,
      location: p.child('location').out,
      recur_every: p.child('recur_every').out,
      scope: p.child('scope').out,
    },
    recovery_services_vault(name, block): {
      local p = path(['data', 'azurerm_recovery_services_vault', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_recovery_services_vault: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    redis_cache(name, block): {
      local p = path(['data', 'azurerm_redis_cache', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_redis_cache: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      access_keys_authentication_enabled: p.child('access_keys_authentication_enabled').out,
      capacity: p.child('capacity').out,
      family: p.child('family').out,
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      location: p.child('location').out,
      minimum_tls_version: p.child('minimum_tls_version').out,
      name: p.child('name').out,
      non_ssl_port_enabled: p.child('non_ssl_port_enabled').out,
      patch_schedule: p.child('patch_schedule').out,
      port: p.child('port').out,
      primary_access_key: p.child('primary_access_key').out,
      primary_connection_string: p.child('primary_connection_string').out,
      private_static_ip_address: p.child('private_static_ip_address').out,
      redis_configuration: p.child('redis_configuration').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      shard_count: p.child('shard_count').out,
      sku_name: p.child('sku_name').out,
      ssl_port: p.child('ssl_port').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      zones: p.child('zones').out,
    },
    redis_enterprise_database(name, block): {
      local p = path(['data', 'azurerm_redis_enterprise_database', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_redis_enterprise_database: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').out,
      id: p.child('id').out,
      linked_database_group_nickname: p.child('linked_database_group_nickname').out,
      linked_database_id: p.child('linked_database_id').out,
      name: p.child('name').out,
      primary_access_key: p.child('primary_access_key').out,
      secondary_access_key: p.child('secondary_access_key').out,
    },
    resource_group(name, block): {
      local p = path(['data', 'azurerm_resource_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_resource_group: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      managed_by: p.child('managed_by').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    resource_group_template_deployment(name, block): {
      local p = path(['data', 'azurerm_resource_group_template_deployment', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_resource_group_template_deployment: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      output_content: p.child('output_content').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    resources(name, block): {
      local p = path(['data', 'azurerm_resources', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_resources: {
              [name]: std.prune({
                required_tags: build.template(std.get(block, 'required_tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      required_tags: p.child('required_tags').out,
      resource_group_name: p.child('resource_group_name').out,
      resources: p.child('resources').out,
      type: p.child('type').out,
    },
    role_definition(name, block): {
      local p = path(['data', 'azurerm_role_definition', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_role_definition: {
              [name]: std.prune({
                scope: build.template(std.get(block, 'scope', null, true)),
              }),
            },
          },
        },
      },
      assignable_scopes: p.child('assignable_scopes').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      permissions: p.child('permissions').out,
      role_definition_id: p.child('role_definition_id').out,
      scope: p.child('scope').out,
      type: p.child('type').out,
    },
    role_management_policy(name, block): {
      local p = path(['data', 'azurerm_role_management_policy', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_role_management_policy: {
              [name]: std.prune({
                role_definition_id: build.template(block.role_definition_id),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      activation_rules: p.child('activation_rules').out,
      active_assignment_rules: p.child('active_assignment_rules').out,
      description: p.child('description').out,
      eligible_assignment_rules: p.child('eligible_assignment_rules').out,
      id: p.child('id').out,
      name: p.child('name').out,
      notification_rules: p.child('notification_rules').out,
      role_definition_id: p.child('role_definition_id').out,
      scope: p.child('scope').out,
    },
    route_filter(name, block): {
      local p = path(['data', 'azurerm_route_filter', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_route_filter: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      rule: p.child('rule').out,
      tags: p.child('tags').out,
    },
    route_table(name, block): {
      local p = path(['data', 'azurerm_route_table', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_route_table: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      bgp_route_propagation_enabled: p.child('bgp_route_propagation_enabled').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      route: p.child('route').out,
      subnets: p.child('subnets').out,
      tags: p.child('tags').out,
    },
    search_service(name, block): {
      local p = path(['data', 'azurerm_search_service', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_search_service: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity: p.child('identity').out,
      name: p.child('name').out,
      partition_count: p.child('partition_count').out,
      primary_key: p.child('primary_key').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      query_keys: p.child('query_keys').out,
      replica_count: p.child('replica_count').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_key: p.child('secondary_key').out,
      tags: p.child('tags').out,
    },
    sentinel_alert_rule(name, block): {
      local p = path(['data', 'azurerm_sentinel_alert_rule', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_sentinel_alert_rule: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
    },
    sentinel_alert_rule_anomaly(name, block): {
      local p = path(['data', 'azurerm_sentinel_alert_rule_anomaly', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_sentinel_alert_rule_anomaly: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
              }),
            },
          },
        },
      },
      anomaly_settings_version: p.child('anomaly_settings_version').out,
      anomaly_version: p.child('anomaly_version').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      enabled: p.child('enabled').out,
      frequency: p.child('frequency').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      mode: p.child('mode').out,
      multi_select_observation: p.child('multi_select_observation').out,
      name: p.child('name').out,
      prioritized_exclude_observation: p.child('prioritized_exclude_observation').out,
      required_data_connector: p.child('required_data_connector').out,
      settings_definition_id: p.child('settings_definition_id').out,
      single_select_observation: p.child('single_select_observation').out,
      tactics: p.child('tactics').out,
      techniques: p.child('techniques').out,
      threshold_observation: p.child('threshold_observation').out,
    },
    sentinel_alert_rule_template(name, block): {
      local p = path(['data', 'azurerm_sentinel_alert_rule_template', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_sentinel_alert_rule_template: {
              [name]: std.prune({
                log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      log_analytics_workspace_id: p.child('log_analytics_workspace_id').out,
      name: p.child('name').out,
      nrt_template: p.child('nrt_template').out,
      scheduled_template: p.child('scheduled_template').out,
      security_incident_template: p.child('security_incident_template').out,
    },
    service_plan(name, block): {
      local p = path(['data', 'azurerm_service_plan', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_service_plan: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      app_service_environment_id: p.child('app_service_environment_id').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      maximum_elastic_worker_count: p.child('maximum_elastic_worker_count').out,
      name: p.child('name').out,
      os_type: p.child('os_type').out,
      per_site_scaling_enabled: p.child('per_site_scaling_enabled').out,
      reserved: p.child('reserved').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      worker_count: p.child('worker_count').out,
      zone_balancing_enabled: p.child('zone_balancing_enabled').out,
    },
    servicebus_namespace(name, block): {
      local p = path(['data', 'azurerm_servicebus_namespace', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_servicebus_namespace: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      capacity: p.child('capacity').out,
      default_primary_connection_string: p.child('default_primary_connection_string').out,
      default_primary_key: p.child('default_primary_key').out,
      default_secondary_connection_string: p.child('default_secondary_connection_string').out,
      default_secondary_key: p.child('default_secondary_key').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      premium_messaging_partitions: p.child('premium_messaging_partitions').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
    },
    servicebus_namespace_authorization_rule(name, block): {
      local p = path(['data', 'azurerm_servicebus_namespace_authorization_rule', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_servicebus_namespace_authorization_rule: {
              [name]: std.prune({
                name: build.template(block.name),
                namespace_id: build.template(std.get(block, 'namespace_id', null, true)),
                namespace_name: build.template(std.get(block, 'namespace_name', null, true)),
                resource_group_name: build.template(std.get(block, 'resource_group_name', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      namespace_id: p.child('namespace_id').out,
      namespace_name: p.child('namespace_name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_connection_string_alias: p.child('primary_connection_string_alias').out,
      primary_key: p.child('primary_key').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_connection_string_alias: p.child('secondary_connection_string_alias').out,
      secondary_key: p.child('secondary_key').out,
    },
    servicebus_namespace_disaster_recovery_config(name, block): {
      local p = path(['data', 'azurerm_servicebus_namespace_disaster_recovery_config', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_servicebus_namespace_disaster_recovery_config: {
              [name]: std.prune({
                alias_authorization_rule_id: build.template(std.get(block, 'alias_authorization_rule_id', null, true)),
                name: build.template(block.name),
                namespace_id: build.template(std.get(block, 'namespace_id', null, true)),
                namespace_name: build.template(std.get(block, 'namespace_name', null, true)),
                resource_group_name: build.template(std.get(block, 'resource_group_name', null, true)),
              }),
            },
          },
        },
      },
      alias_authorization_rule_id: p.child('alias_authorization_rule_id').out,
      default_primary_key: p.child('default_primary_key').out,
      default_secondary_key: p.child('default_secondary_key').out,
      id: p.child('id').out,
      name: p.child('name').out,
      namespace_id: p.child('namespace_id').out,
      namespace_name: p.child('namespace_name').out,
      partner_namespace_id: p.child('partner_namespace_id').out,
      primary_connection_string_alias: p.child('primary_connection_string_alias').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string_alias: p.child('secondary_connection_string_alias').out,
    },
    servicebus_queue(name, block): {
      local p = path(['data', 'azurerm_servicebus_queue', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_servicebus_queue: {
              [name]: std.prune({
                name: build.template(block.name),
                namespace_id: build.template(std.get(block, 'namespace_id', null, true)),
                namespace_name: build.template(std.get(block, 'namespace_name', null, true)),
                resource_group_name: build.template(std.get(block, 'resource_group_name', null, true)),
              }),
            },
          },
        },
      },
      auto_delete_on_idle: p.child('auto_delete_on_idle').out,
      dead_lettering_on_message_expiration: p.child('dead_lettering_on_message_expiration').out,
      default_message_ttl: p.child('default_message_ttl').out,
      duplicate_detection_history_time_window: p.child('duplicate_detection_history_time_window').out,
      enable_batched_operations: p.child('enable_batched_operations').out,
      enable_express: p.child('enable_express').out,
      enable_partitioning: p.child('enable_partitioning').out,
      forward_dead_lettered_messages_to: p.child('forward_dead_lettered_messages_to').out,
      forward_to: p.child('forward_to').out,
      id: p.child('id').out,
      lock_duration: p.child('lock_duration').out,
      max_delivery_count: p.child('max_delivery_count').out,
      max_size_in_megabytes: p.child('max_size_in_megabytes').out,
      name: p.child('name').out,
      namespace_id: p.child('namespace_id').out,
      namespace_name: p.child('namespace_name').out,
      requires_duplicate_detection: p.child('requires_duplicate_detection').out,
      requires_session: p.child('requires_session').out,
      resource_group_name: p.child('resource_group_name').out,
      status: p.child('status').out,
    },
    servicebus_queue_authorization_rule(name, block): {
      local p = path(['data', 'azurerm_servicebus_queue_authorization_rule', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_servicebus_queue_authorization_rule: {
              [name]: std.prune({
                name: build.template(block.name),
                namespace_name: build.template(std.get(block, 'namespace_name', null, true)),
                queue_id: build.template(std.get(block, 'queue_id', null, true)),
                queue_name: build.template(std.get(block, 'queue_name', null, true)),
                resource_group_name: build.template(std.get(block, 'resource_group_name', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      listen: p.child('listen').out,
      manage: p.child('manage').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_connection_string_alias: p.child('primary_connection_string_alias').out,
      primary_key: p.child('primary_key').out,
      queue_id: p.child('queue_id').out,
      queue_name: p.child('queue_name').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_connection_string_alias: p.child('secondary_connection_string_alias').out,
      secondary_key: p.child('secondary_key').out,
      send: p.child('send').out,
    },
    servicebus_subscription(name, block): {
      local p = path(['data', 'azurerm_servicebus_subscription', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_servicebus_subscription: {
              [name]: std.prune({
                name: build.template(block.name),
                namespace_name: build.template(std.get(block, 'namespace_name', null, true)),
                resource_group_name: build.template(std.get(block, 'resource_group_name', null, true)),
                topic_id: build.template(std.get(block, 'topic_id', null, true)),
                topic_name: build.template(std.get(block, 'topic_name', null, true)),
              }),
            },
          },
        },
      },
      auto_delete_on_idle: p.child('auto_delete_on_idle').out,
      dead_lettering_on_filter_evaluation_error: p.child('dead_lettering_on_filter_evaluation_error').out,
      dead_lettering_on_message_expiration: p.child('dead_lettering_on_message_expiration').out,
      default_message_ttl: p.child('default_message_ttl').out,
      enable_batched_operations: p.child('enable_batched_operations').out,
      forward_dead_lettered_messages_to: p.child('forward_dead_lettered_messages_to').out,
      forward_to: p.child('forward_to').out,
      id: p.child('id').out,
      lock_duration: p.child('lock_duration').out,
      max_delivery_count: p.child('max_delivery_count').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      requires_session: p.child('requires_session').out,
      resource_group_name: p.child('resource_group_name').out,
      topic_id: p.child('topic_id').out,
      topic_name: p.child('topic_name').out,
    },
    servicebus_topic(name, block): {
      local p = path(['data', 'azurerm_servicebus_topic', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_servicebus_topic: {
              [name]: std.prune({
                name: build.template(block.name),
                namespace_id: build.template(std.get(block, 'namespace_id', null, true)),
                namespace_name: build.template(std.get(block, 'namespace_name', null, true)),
                resource_group_name: build.template(std.get(block, 'resource_group_name', null, true)),
              }),
            },
          },
        },
      },
      auto_delete_on_idle: p.child('auto_delete_on_idle').out,
      default_message_ttl: p.child('default_message_ttl').out,
      duplicate_detection_history_time_window: p.child('duplicate_detection_history_time_window').out,
      enable_batched_operations: p.child('enable_batched_operations').out,
      enable_express: p.child('enable_express').out,
      enable_partitioning: p.child('enable_partitioning').out,
      id: p.child('id').out,
      max_size_in_megabytes: p.child('max_size_in_megabytes').out,
      name: p.child('name').out,
      namespace_id: p.child('namespace_id').out,
      namespace_name: p.child('namespace_name').out,
      requires_duplicate_detection: p.child('requires_duplicate_detection').out,
      resource_group_name: p.child('resource_group_name').out,
      status: p.child('status').out,
      support_ordering: p.child('support_ordering').out,
    },
    servicebus_topic_authorization_rule(name, block): {
      local p = path(['data', 'azurerm_servicebus_topic_authorization_rule', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_servicebus_topic_authorization_rule: {
              [name]: std.prune({
                name: build.template(block.name),
                namespace_name: build.template(std.get(block, 'namespace_name', null, true)),
                queue_name: build.template(std.get(block, 'queue_name', null, true)),
                resource_group_name: build.template(std.get(block, 'resource_group_name', null, true)),
                topic_id: build.template(std.get(block, 'topic_id', null, true)),
                topic_name: build.template(std.get(block, 'topic_name', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      listen: p.child('listen').out,
      manage: p.child('manage').out,
      name: p.child('name').out,
      namespace_name: p.child('namespace_name').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_connection_string_alias: p.child('primary_connection_string_alias').out,
      primary_key: p.child('primary_key').out,
      queue_name: p.child('queue_name').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_connection_string_alias: p.child('secondary_connection_string_alias').out,
      secondary_key: p.child('secondary_key').out,
      send: p.child('send').out,
      topic_id: p.child('topic_id').out,
      topic_name: p.child('topic_name').out,
    },
    shared_image(name, block): {
      local p = path(['data', 'azurerm_shared_image', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_shared_image: {
              [name]: std.prune({
                gallery_name: build.template(block.gallery_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      accelerated_network_support_enabled: p.child('accelerated_network_support_enabled').out,
      architecture: p.child('architecture').out,
      confidential_vm_enabled: p.child('confidential_vm_enabled').out,
      confidential_vm_supported: p.child('confidential_vm_supported').out,
      description: p.child('description').out,
      eula: p.child('eula').out,
      gallery_name: p.child('gallery_name').out,
      hibernation_enabled: p.child('hibernation_enabled').out,
      hyper_v_generation: p.child('hyper_v_generation').out,
      id: p.child('id').out,
      identifier: p.child('identifier').out,
      location: p.child('location').out,
      name: p.child('name').out,
      os_type: p.child('os_type').out,
      privacy_statement_uri: p.child('privacy_statement_uri').out,
      purchase_plan: p.child('purchase_plan').out,
      release_note_uri: p.child('release_note_uri').out,
      resource_group_name: p.child('resource_group_name').out,
      specialized: p.child('specialized').out,
      tags: p.child('tags').out,
      trusted_launch_enabled: p.child('trusted_launch_enabled').out,
      trusted_launch_supported: p.child('trusted_launch_supported').out,
    },
    shared_image_gallery(name, block): {
      local p = path(['data', 'azurerm_shared_image_gallery', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_shared_image_gallery: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      image_names: p.child('image_names').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      unique_name: p.child('unique_name').out,
    },
    shared_image_version(name, block): {
      local p = path(['data', 'azurerm_shared_image_version', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_shared_image_version: {
              [name]: std.prune({
                gallery_name: build.template(block.gallery_name),
                image_name: build.template(block.image_name),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                sort_versions_by_semver: build.template(std.get(block, 'sort_versions_by_semver', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      exclude_from_latest: p.child('exclude_from_latest').out,
      gallery_name: p.child('gallery_name').out,
      id: p.child('id').out,
      image_name: p.child('image_name').out,
      location: p.child('location').out,
      managed_image_id: p.child('managed_image_id').out,
      name: p.child('name').out,
      os_disk_image_size_gb: p.child('os_disk_image_size_gb').out,
      os_disk_snapshot_id: p.child('os_disk_snapshot_id').out,
      resource_group_name: p.child('resource_group_name').out,
      sort_versions_by_semver: p.child('sort_versions_by_semver').out,
      tags: p.child('tags').out,
      target_region: p.child('target_region').out,
    },
    shared_image_versions(name, block): {
      local p = path(['data', 'azurerm_shared_image_versions', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_shared_image_versions: {
              [name]: std.prune({
                gallery_name: build.template(block.gallery_name),
                image_name: build.template(block.image_name),
                resource_group_name: build.template(block.resource_group_name),
                tags_filter: build.template(std.get(block, 'tags_filter', null, true)),
              }),
            },
          },
        },
      },
      gallery_name: p.child('gallery_name').out,
      id: p.child('id').out,
      image_name: p.child('image_name').out,
      images: p.child('images').out,
      resource_group_name: p.child('resource_group_name').out,
      tags_filter: p.child('tags_filter').out,
    },
    signalr_service(name, block): {
      local p = path(['data', 'azurerm_signalr_service', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_signalr_service: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      aad_auth_enabled: p.child('aad_auth_enabled').out,
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      local_auth_enabled: p.child('local_auth_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_access_key: p.child('primary_access_key').out,
      primary_connection_string: p.child('primary_connection_string').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      public_port: p.child('public_port').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      server_port: p.child('server_port').out,
      serverless_connection_timeout_in_seconds: p.child('serverless_connection_timeout_in_seconds').out,
      tags: p.child('tags').out,
      tls_client_cert_enabled: p.child('tls_client_cert_enabled').out,
    },
    site_recovery_fabric(name, block): {
      local p = path(['data', 'azurerm_site_recovery_fabric', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_site_recovery_fabric: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    site_recovery_protection_container(name, block): {
      local p = path(['data', 'azurerm_site_recovery_protection_container', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_site_recovery_protection_container: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_fabric_name: build.template(block.recovery_fabric_name),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_fabric_name: p.child('recovery_fabric_name').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    site_recovery_replication_policy(name, block): {
      local p = path(['data', 'azurerm_site_recovery_replication_policy', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_site_recovery_replication_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_vault_name: build.template(block.recovery_vault_name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      application_consistent_snapshot_frequency_in_minutes: p.child('application_consistent_snapshot_frequency_in_minutes').out,
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_point_retention_in_minutes: p.child('recovery_point_retention_in_minutes').out,
      recovery_vault_name: p.child('recovery_vault_name').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    site_recovery_replication_recovery_plan(name, block): {
      local p = path(['data', 'azurerm_site_recovery_replication_recovery_plan', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_site_recovery_replication_recovery_plan: {
              [name]: std.prune({
                name: build.template(block.name),
                recovery_vault_id: build.template(block.recovery_vault_id),
              }),
            },
          },
        },
      },
      azure_to_azure_settings: p.child('azure_to_azure_settings').out,
      failover_deployment_model: p.child('failover_deployment_model').out,
      id: p.child('id').out,
      name: p.child('name').out,
      recovery_group: p.child('recovery_group').out,
      recovery_vault_id: p.child('recovery_vault_id').out,
      source_recovery_fabric_id: p.child('source_recovery_fabric_id').out,
      target_recovery_fabric_id: p.child('target_recovery_fabric_id').out,
    },
    snapshot(name, block): {
      local p = path(['data', 'azurerm_snapshot', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_snapshot: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      creation_option: p.child('creation_option').out,
      disk_size_gb: p.child('disk_size_gb').out,
      encryption_settings: p.child('encryption_settings').out,
      id: p.child('id').out,
      name: p.child('name').out,
      os_type: p.child('os_type').out,
      resource_group_name: p.child('resource_group_name').out,
      source_resource_id: p.child('source_resource_id').out,
      source_uri: p.child('source_uri').out,
      storage_account_id: p.child('storage_account_id').out,
      time_created: p.child('time_created').out,
      trusted_launch_enabled: p.child('trusted_launch_enabled').out,
    },
    source_control_token(name, block): {
      local p = path(['data', 'azurerm_source_control_token', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_source_control_token: {
              [name]: std.prune({
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      token: p.child('token').out,
      token_secret: p.child('token_secret').out,
      type: p.child('type').out,
    },
    spatial_anchors_account(name, block): {
      local p = path(['data', 'azurerm_spatial_anchors_account', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_spatial_anchors_account: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      account_domain: p.child('account_domain').out,
      account_id: p.child('account_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    spring_cloud_app(name, block): {
      local p = path(['data', 'azurerm_spring_cloud_app', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_spring_cloud_app: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      fqdn: p.child('fqdn').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      is_public: p.child('is_public').out,
      name: p.child('name').out,
      persistent_disk: p.child('persistent_disk').out,
      resource_group_name: p.child('resource_group_name').out,
      service_name: p.child('service_name').out,
      tls_enabled: p.child('tls_enabled').out,
      url: p.child('url').out,
    },
    spring_cloud_service(name, block): {
      local p = path(['data', 'azurerm_spring_cloud_service', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_spring_cloud_service: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      config_server_git_setting: p.child('config_server_git_setting').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_public_ip_addresses: p.child('outbound_public_ip_addresses').out,
      required_network_traffic_rules: p.child('required_network_traffic_rules').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    ssh_public_key(name, block): {
      local p = path(['data', 'azurerm_ssh_public_key', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_ssh_public_key: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      public_key: p.child('public_key').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    stack_hci_cluster(name, block): {
      local p = path(['data', 'azurerm_stack_hci_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_stack_hci_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      automanage_configuration_id: p.child('automanage_configuration_id').out,
      client_id: p.child('client_id').out,
      cloud_id: p.child('cloud_id').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      resource_provider_object_id: p.child('resource_provider_object_id').out,
      service_endpoint: p.child('service_endpoint').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
    },
    static_web_app(name, block): {
      local p = path(['data', 'azurerm_static_web_app', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_static_web_app: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      api_key: p.child('api_key').out,
      app_settings: p.child('app_settings').out,
      basic_auth: p.child('basic_auth').out,
      configuration_file_changes_enabled: p.child('configuration_file_changes_enabled').out,
      default_host_name: p.child('default_host_name').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      preview_environments_enabled: p.child('preview_environments_enabled').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_size: p.child('sku_size').out,
      sku_tier: p.child('sku_tier').out,
      tags: p.child('tags').out,
    },
    storage_account(name, block): {
      local p = path(['data', 'azurerm_storage_account', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_account: {
              [name]: std.prune({
                min_tls_version: build.template(std.get(block, 'min_tls_version', null, true)),
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      access_tier: p.child('access_tier').out,
      account_kind: p.child('account_kind').out,
      account_replication_type: p.child('account_replication_type').out,
      account_tier: p.child('account_tier').out,
      allow_nested_items_to_be_public: p.child('allow_nested_items_to_be_public').out,
      azure_files_authentication: p.child('azure_files_authentication').out,
      custom_domain: p.child('custom_domain').out,
      dns_endpoint_type: p.child('dns_endpoint_type').out,
      https_traffic_only_enabled: p.child('https_traffic_only_enabled').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      infrastructure_encryption_enabled: p.child('infrastructure_encryption_enabled').out,
      is_hns_enabled: p.child('is_hns_enabled').out,
      location: p.child('location').out,
      min_tls_version: p.child('min_tls_version').out,
      name: p.child('name').out,
      nfsv3_enabled: p.child('nfsv3_enabled').out,
      primary_access_key: p.child('primary_access_key').out,
      primary_blob_connection_string: p.child('primary_blob_connection_string').out,
      primary_blob_endpoint: p.child('primary_blob_endpoint').out,
      primary_blob_host: p.child('primary_blob_host').out,
      primary_blob_internet_endpoint: p.child('primary_blob_internet_endpoint').out,
      primary_blob_internet_host: p.child('primary_blob_internet_host').out,
      primary_blob_microsoft_endpoint: p.child('primary_blob_microsoft_endpoint').out,
      primary_blob_microsoft_host: p.child('primary_blob_microsoft_host').out,
      primary_connection_string: p.child('primary_connection_string').out,
      primary_dfs_endpoint: p.child('primary_dfs_endpoint').out,
      primary_dfs_host: p.child('primary_dfs_host').out,
      primary_dfs_internet_endpoint: p.child('primary_dfs_internet_endpoint').out,
      primary_dfs_internet_host: p.child('primary_dfs_internet_host').out,
      primary_dfs_microsoft_endpoint: p.child('primary_dfs_microsoft_endpoint').out,
      primary_dfs_microsoft_host: p.child('primary_dfs_microsoft_host').out,
      primary_file_endpoint: p.child('primary_file_endpoint').out,
      primary_file_host: p.child('primary_file_host').out,
      primary_file_internet_endpoint: p.child('primary_file_internet_endpoint').out,
      primary_file_internet_host: p.child('primary_file_internet_host').out,
      primary_file_microsoft_endpoint: p.child('primary_file_microsoft_endpoint').out,
      primary_file_microsoft_host: p.child('primary_file_microsoft_host').out,
      primary_location: p.child('primary_location').out,
      primary_queue_endpoint: p.child('primary_queue_endpoint').out,
      primary_queue_host: p.child('primary_queue_host').out,
      primary_queue_microsoft_endpoint: p.child('primary_queue_microsoft_endpoint').out,
      primary_queue_microsoft_host: p.child('primary_queue_microsoft_host').out,
      primary_table_endpoint: p.child('primary_table_endpoint').out,
      primary_table_host: p.child('primary_table_host').out,
      primary_table_microsoft_endpoint: p.child('primary_table_microsoft_endpoint').out,
      primary_table_microsoft_host: p.child('primary_table_microsoft_host').out,
      primary_web_endpoint: p.child('primary_web_endpoint').out,
      primary_web_host: p.child('primary_web_host').out,
      primary_web_internet_endpoint: p.child('primary_web_internet_endpoint').out,
      primary_web_internet_host: p.child('primary_web_internet_host').out,
      primary_web_microsoft_endpoint: p.child('primary_web_microsoft_endpoint').out,
      primary_web_microsoft_host: p.child('primary_web_microsoft_host').out,
      queue_encryption_key_type: p.child('queue_encryption_key_type').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      secondary_blob_connection_string: p.child('secondary_blob_connection_string').out,
      secondary_blob_endpoint: p.child('secondary_blob_endpoint').out,
      secondary_blob_host: p.child('secondary_blob_host').out,
      secondary_blob_internet_endpoint: p.child('secondary_blob_internet_endpoint').out,
      secondary_blob_internet_host: p.child('secondary_blob_internet_host').out,
      secondary_blob_microsoft_endpoint: p.child('secondary_blob_microsoft_endpoint').out,
      secondary_blob_microsoft_host: p.child('secondary_blob_microsoft_host').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      secondary_dfs_endpoint: p.child('secondary_dfs_endpoint').out,
      secondary_dfs_host: p.child('secondary_dfs_host').out,
      secondary_dfs_internet_endpoint: p.child('secondary_dfs_internet_endpoint').out,
      secondary_dfs_internet_host: p.child('secondary_dfs_internet_host').out,
      secondary_dfs_microsoft_endpoint: p.child('secondary_dfs_microsoft_endpoint').out,
      secondary_dfs_microsoft_host: p.child('secondary_dfs_microsoft_host').out,
      secondary_file_endpoint: p.child('secondary_file_endpoint').out,
      secondary_file_host: p.child('secondary_file_host').out,
      secondary_file_internet_endpoint: p.child('secondary_file_internet_endpoint').out,
      secondary_file_internet_host: p.child('secondary_file_internet_host').out,
      secondary_file_microsoft_endpoint: p.child('secondary_file_microsoft_endpoint').out,
      secondary_file_microsoft_host: p.child('secondary_file_microsoft_host').out,
      secondary_location: p.child('secondary_location').out,
      secondary_queue_endpoint: p.child('secondary_queue_endpoint').out,
      secondary_queue_host: p.child('secondary_queue_host').out,
      secondary_queue_microsoft_endpoint: p.child('secondary_queue_microsoft_endpoint').out,
      secondary_queue_microsoft_host: p.child('secondary_queue_microsoft_host').out,
      secondary_table_endpoint: p.child('secondary_table_endpoint').out,
      secondary_table_host: p.child('secondary_table_host').out,
      secondary_table_microsoft_endpoint: p.child('secondary_table_microsoft_endpoint').out,
      secondary_table_microsoft_host: p.child('secondary_table_microsoft_host').out,
      secondary_web_endpoint: p.child('secondary_web_endpoint').out,
      secondary_web_host: p.child('secondary_web_host').out,
      secondary_web_internet_endpoint: p.child('secondary_web_internet_endpoint').out,
      secondary_web_internet_host: p.child('secondary_web_internet_host').out,
      secondary_web_microsoft_endpoint: p.child('secondary_web_microsoft_endpoint').out,
      secondary_web_microsoft_host: p.child('secondary_web_microsoft_host').out,
      table_encryption_key_type: p.child('table_encryption_key_type').out,
      tags: p.child('tags').out,
    },
    storage_account_blob_container_sas(name, block): {
      local p = path(['data', 'azurerm_storage_account_blob_container_sas', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_account_blob_container_sas: {
              [name]: std.prune({
                cache_control: build.template(std.get(block, 'cache_control', null, true)),
                connection_string: build.template(block.connection_string),
                container_name: build.template(block.container_name),
                content_disposition: build.template(std.get(block, 'content_disposition', null, true)),
                content_encoding: build.template(std.get(block, 'content_encoding', null, true)),
                content_language: build.template(std.get(block, 'content_language', null, true)),
                content_type: build.template(std.get(block, 'content_type', null, true)),
                expiry: build.template(block.expiry),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                ip_address: build.template(std.get(block, 'ip_address', null, true)),
                start: build.template(block.start),
              }),
            },
          },
        },
      },
      cache_control: p.child('cache_control').out,
      connection_string: p.child('connection_string').out,
      container_name: p.child('container_name').out,
      content_disposition: p.child('content_disposition').out,
      content_encoding: p.child('content_encoding').out,
      content_language: p.child('content_language').out,
      content_type: p.child('content_type').out,
      expiry: p.child('expiry').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      sas: p.child('sas').out,
      start: p.child('start').out,
    },
    storage_account_sas(name, block): {
      local p = path(['data', 'azurerm_storage_account_sas', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_account_sas: {
              [name]: std.prune({
                connection_string: build.template(block.connection_string),
                expiry: build.template(block.expiry),
                https_only: build.template(std.get(block, 'https_only', null, true)),
                ip_addresses: build.template(std.get(block, 'ip_addresses', null, true)),
                signed_version: build.template(std.get(block, 'signed_version', null, true)),
                start: build.template(block.start),
              }),
            },
          },
        },
      },
      connection_string: p.child('connection_string').out,
      expiry: p.child('expiry').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      ip_addresses: p.child('ip_addresses').out,
      sas: p.child('sas').out,
      signed_version: p.child('signed_version').out,
      start: p.child('start').out,
    },
    storage_blob(name, block): {
      local p = path(['data', 'azurerm_storage_blob', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_blob: {
              [name]: std.prune({
                name: build.template(block.name),
                storage_account_name: build.template(block.storage_account_name),
                storage_container_name: build.template(block.storage_container_name),
              }),
            },
          },
        },
      },
      access_tier: p.child('access_tier').out,
      content_md5: p.child('content_md5').out,
      content_type: p.child('content_type').out,
      encryption_scope: p.child('encryption_scope').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      storage_account_name: p.child('storage_account_name').out,
      storage_container_name: p.child('storage_container_name').out,
      type: p.child('type').out,
      url: p.child('url').out,
    },
    storage_container(name, block): {
      local p = path(['data', 'azurerm_storage_container', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_container: {
              [name]: std.prune({
                name: build.template(block.name),
                storage_account_name: build.template(block.storage_account_name),
              }),
            },
          },
        },
      },
      container_access_type: p.child('container_access_type').out,
      default_encryption_scope: p.child('default_encryption_scope').out,
      encryption_scope_override_enabled: p.child('encryption_scope_override_enabled').out,
      has_immutability_policy: p.child('has_immutability_policy').out,
      has_legal_hold: p.child('has_legal_hold').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      resource_manager_id: p.child('resource_manager_id').out,
      storage_account_name: p.child('storage_account_name').out,
    },
    storage_containers(name, block): {
      local p = path(['data', 'azurerm_storage_containers', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_containers: {
              [name]: std.prune({
                name_prefix: build.template(std.get(block, 'name_prefix', null, true)),
                storage_account_id: build.template(block.storage_account_id),
              }),
            },
          },
        },
      },
      containers: p.child('containers').out,
      id: p.child('id').out,
      name_prefix: p.child('name_prefix').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    storage_encryption_scope(name, block): {
      local p = path(['data', 'azurerm_storage_encryption_scope', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_encryption_scope: {
              [name]: std.prune({
                name: build.template(block.name),
                storage_account_id: build.template(block.storage_account_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key_vault_key_id: p.child('key_vault_key_id').out,
      name: p.child('name').out,
      source: p.child('source').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    storage_management_policy(name, block): {
      local p = path(['data', 'azurerm_storage_management_policy', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_management_policy: {
              [name]: std.prune({
                storage_account_id: build.template(block.storage_account_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      rule: p.child('rule').out,
      storage_account_id: p.child('storage_account_id').out,
    },
    storage_queue(name, block): {
      local p = path(['data', 'azurerm_storage_queue', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_queue: {
              [name]: std.prune({
                name: build.template(block.name),
                storage_account_name: build.template(block.storage_account_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      resource_manager_id: p.child('resource_manager_id').out,
      storage_account_name: p.child('storage_account_name').out,
    },
    storage_share(name, block): {
      local p = path(['data', 'azurerm_storage_share', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_share: {
              [name]: std.prune({
                name: build.template(block.name),
                storage_account_name: build.template(block.storage_account_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      quota: p.child('quota').out,
      resource_manager_id: p.child('resource_manager_id').out,
      storage_account_name: p.child('storage_account_name').out,
    },
    storage_sync(name, block): {
      local p = path(['data', 'azurerm_storage_sync', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_sync: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      incoming_traffic_policy: p.child('incoming_traffic_policy').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    storage_sync_group(name, block): {
      local p = path(['data', 'azurerm_storage_sync_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_sync_group: {
              [name]: std.prune({
                name: build.template(block.name),
                storage_sync_id: build.template(block.storage_sync_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      storage_sync_id: p.child('storage_sync_id').out,
    },
    storage_table(name, block): {
      local p = path(['data', 'azurerm_storage_table', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_table: {
              [name]: std.prune({
                name: build.template(block.name),
                storage_account_name: build.template(block.storage_account_name),
              }),
            },
          },
        },
      },
      acl: p.child('acl').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_manager_id: p.child('resource_manager_id').out,
      storage_account_name: p.child('storage_account_name').out,
    },
    storage_table_entities(name, block): {
      local p = path(['data', 'azurerm_storage_table_entities', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_table_entities: {
              [name]: std.prune({
                filter: build.template(block.filter),
                select: build.template(std.get(block, 'select', null, true)),
                storage_table_id: build.template(block.storage_table_id),
              }),
            },
          },
        },
      },
      filter: p.child('filter').out,
      id: p.child('id').out,
      items: p.child('items').out,
      select: p.child('select').out,
      storage_table_id: p.child('storage_table_id').out,
    },
    storage_table_entity(name, block): {
      local p = path(['data', 'azurerm_storage_table_entity', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_storage_table_entity: {
              [name]: std.prune({
                partition_key: build.template(block.partition_key),
                row_key: build.template(block.row_key),
                storage_table_id: build.template(block.storage_table_id),
              }),
            },
          },
        },
      },
      entity: p.child('entity').out,
      id: p.child('id').out,
      partition_key: p.child('partition_key').out,
      row_key: p.child('row_key').out,
      storage_table_id: p.child('storage_table_id').out,
    },
    stream_analytics_job(name, block): {
      local p = path(['data', 'azurerm_stream_analytics_job', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_stream_analytics_job: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      compatibility_level: p.child('compatibility_level').out,
      data_locale: p.child('data_locale').out,
      events_late_arrival_max_delay_in_seconds: p.child('events_late_arrival_max_delay_in_seconds').out,
      events_out_of_order_max_delay_in_seconds: p.child('events_out_of_order_max_delay_in_seconds').out,
      events_out_of_order_policy: p.child('events_out_of_order_policy').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      job_id: p.child('job_id').out,
      last_output_time: p.child('last_output_time').out,
      location: p.child('location').out,
      name: p.child('name').out,
      output_error_policy: p.child('output_error_policy').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      start_mode: p.child('start_mode').out,
      start_time: p.child('start_time').out,
      streaming_units: p.child('streaming_units').out,
      transformation_query: p.child('transformation_query').out,
    },
    subnet(name, block): {
      local p = path(['data', 'azurerm_subnet', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_subnet: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                virtual_network_name: build.template(block.virtual_network_name),
              }),
            },
          },
        },
      },
      address_prefix: p.child('address_prefix').out,
      address_prefixes: p.child('address_prefixes').out,
      default_outbound_access_enabled: p.child('default_outbound_access_enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      network_security_group_id: p.child('network_security_group_id').out,
      private_endpoint_network_policies: p.child('private_endpoint_network_policies').out,
      private_link_service_network_policies_enabled: p.child('private_link_service_network_policies_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      route_table_id: p.child('route_table_id').out,
      service_endpoints: p.child('service_endpoints').out,
      virtual_network_name: p.child('virtual_network_name').out,
    },
    subscription(name, block): {
      local p = path(['data', 'azurerm_subscription', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_subscription: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      location_placement_id: p.child('location_placement_id').out,
      quota_id: p.child('quota_id').out,
      spending_limit: p.child('spending_limit').out,
      state: p.child('state').out,
      subscription_id: p.child('subscription_id').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
    },
    subscription_template_deployment(name, block): {
      local p = path(['data', 'azurerm_subscription_template_deployment', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_subscription_template_deployment: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      output_content: p.child('output_content').out,
    },
    subscriptions(name, block): {
      local p = path(['data', 'azurerm_subscriptions', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_subscriptions: {
              [name]: std.prune({
                display_name_contains: build.template(std.get(block, 'display_name_contains', null, true)),
                display_name_prefix: build.template(std.get(block, 'display_name_prefix', null, true)),
              }),
            },
          },
        },
      },
      display_name_contains: p.child('display_name_contains').out,
      display_name_prefix: p.child('display_name_prefix').out,
      id: p.child('id').out,
      subscriptions: p.child('subscriptions').out,
    },
    synapse_workspace(name, block): {
      local p = path(['data', 'azurerm_synapse_workspace', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_synapse_workspace: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      connectivity_endpoints: p.child('connectivity_endpoints').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    system_center_virtual_machine_manager_inventory_items(name, block): {
      local p = path(['data', 'azurerm_system_center_virtual_machine_manager_inventory_items', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_system_center_virtual_machine_manager_inventory_items: {
              [name]: std.prune({
                inventory_type: build.template(block.inventory_type),
                system_center_virtual_machine_manager_server_id: build.template(block.system_center_virtual_machine_manager_server_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      inventory_items: p.child('inventory_items').out,
      inventory_type: p.child('inventory_type').out,
      system_center_virtual_machine_manager_server_id: p.child('system_center_virtual_machine_manager_server_id').out,
    },
    template_spec_version(name, block): {
      local p = path(['data', 'azurerm_template_spec_version', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_template_spec_version: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      template_body: p.child('template_body').out,
      version: p.child('version').out,
    },
    tenant_template_deployment(name, block): {
      local p = path(['data', 'azurerm_tenant_template_deployment', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_tenant_template_deployment: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      output_content: p.child('output_content').out,
    },
    traffic_manager_geographical_location(name, block): {
      local p = path(['data', 'azurerm_traffic_manager_geographical_location', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_traffic_manager_geographical_location: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    traffic_manager_profile(name, block): {
      local p = path(['data', 'azurerm_traffic_manager_profile', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_traffic_manager_profile: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                traffic_view_enabled: build.template(std.get(block, 'traffic_view_enabled', null, true)),
              }),
            },
          },
        },
      },
      dns_config: p.child('dns_config').out,
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      monitor_config: p.child('monitor_config').out,
      name: p.child('name').out,
      profile_status: p.child('profile_status').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      traffic_routing_method: p.child('traffic_routing_method').out,
      traffic_view_enabled: p.child('traffic_view_enabled').out,
    },
    user_assigned_identity(name, block): {
      local p = path(['data', 'azurerm_user_assigned_identity', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_user_assigned_identity: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      client_id: p.child('client_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      principal_id: p.child('principal_id').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      tenant_id: p.child('tenant_id').out,
    },
    virtual_desktop_application_group(name, block): {
      local p = path(['data', 'azurerm_virtual_desktop_application_group', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_virtual_desktop_application_group: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      friendly_name: p.child('friendly_name').out,
      host_pool_id: p.child('host_pool_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      workspace_id: p.child('workspace_id').out,
    },
    virtual_desktop_host_pool(name, block): {
      local p = path(['data', 'azurerm_virtual_desktop_host_pool', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_virtual_desktop_host_pool: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      custom_rdp_properties: p.child('custom_rdp_properties').out,
      description: p.child('description').out,
      friendly_name: p.child('friendly_name').out,
      id: p.child('id').out,
      load_balancer_type: p.child('load_balancer_type').out,
      location: p.child('location').out,
      maximum_sessions_allowed: p.child('maximum_sessions_allowed').out,
      name: p.child('name').out,
      personal_desktop_assignment_type: p.child('personal_desktop_assignment_type').out,
      preferred_app_group_type: p.child('preferred_app_group_type').out,
      resource_group_name: p.child('resource_group_name').out,
      scheduled_agent_updates: p.child('scheduled_agent_updates').out,
      start_vm_on_connect: p.child('start_vm_on_connect').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      validate_environment: p.child('validate_environment').out,
    },
    virtual_desktop_workspace(name, block): {
      local p = path(['data', 'azurerm_virtual_desktop_workspace', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_virtual_desktop_workspace: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      friendly_name: p.child('friendly_name').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    virtual_hub(name, block): {
      local p = path(['data', 'azurerm_virtual_hub', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_virtual_hub: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      address_prefix: p.child('address_prefix').out,
      default_route_table_id: p.child('default_route_table_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      virtual_router_asn: p.child('virtual_router_asn').out,
      virtual_router_ips: p.child('virtual_router_ips').out,
      virtual_wan_id: p.child('virtual_wan_id').out,
    },
    virtual_hub_connection(name, block): {
      local p = path(['data', 'azurerm_virtual_hub_connection', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_virtual_hub_connection: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                virtual_hub_name: build.template(block.virtual_hub_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      internet_security_enabled: p.child('internet_security_enabled').out,
      name: p.child('name').out,
      remote_virtual_network_id: p.child('remote_virtual_network_id').out,
      resource_group_name: p.child('resource_group_name').out,
      routing: p.child('routing').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
      virtual_hub_name: p.child('virtual_hub_name').out,
    },
    virtual_hub_route_table(name, block): {
      local p = path(['data', 'azurerm_virtual_hub_route_table', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_virtual_hub_route_table: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                virtual_hub_name: build.template(block.virtual_hub_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      labels: p.child('labels').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      route: p.child('route').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
      virtual_hub_name: p.child('virtual_hub_name').out,
    },
    virtual_machine(name, block): {
      local p = path(['data', 'azurerm_virtual_machine', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_virtual_machine: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity: p.child('identity').out,
      location: p.child('location').out,
      name: p.child('name').out,
      power_state: p.child('power_state').out,
      private_ip_address: p.child('private_ip_address').out,
      private_ip_addresses: p.child('private_ip_addresses').out,
      public_ip_address: p.child('public_ip_address').out,
      public_ip_addresses: p.child('public_ip_addresses').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    virtual_machine_scale_set(name, block): {
      local p = path(['data', 'azurerm_virtual_machine_scale_set', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_virtual_machine_scale_set: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity: p.child('identity').out,
      instances: p.child('instances').out,
      location: p.child('location').out,
      name: p.child('name').out,
      network_interface: p.child('network_interface').out,
      resource_group_name: p.child('resource_group_name').out,
    },
    virtual_network(name, block): {
      local p = path(['data', 'azurerm_virtual_network', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_virtual_network: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      address_space: p.child('address_space').out,
      dns_servers: p.child('dns_servers').out,
      guid: p.child('guid').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      subnets: p.child('subnets').out,
      tags: p.child('tags').out,
      vnet_peerings: p.child('vnet_peerings').out,
      vnet_peerings_addresses: p.child('vnet_peerings_addresses').out,
    },
    virtual_network_gateway(name, block): {
      local p = path(['data', 'azurerm_virtual_network_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_virtual_network_gateway: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      active_active: p.child('active_active').out,
      bgp_settings: p.child('bgp_settings').out,
      custom_route: p.child('custom_route').out,
      default_local_network_gateway_id: p.child('default_local_network_gateway_id').out,
      enable_bgp: p.child('enable_bgp').out,
      generation: p.child('generation').out,
      id: p.child('id').out,
      ip_configuration: p.child('ip_configuration').out,
      location: p.child('location').out,
      name: p.child('name').out,
      private_ip_address_enabled: p.child('private_ip_address_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      vpn_client_configuration: p.child('vpn_client_configuration').out,
      vpn_type: p.child('vpn_type').out,
    },
    virtual_network_gateway_connection(name, block): {
      local p = path(['data', 'azurerm_virtual_network_gateway_connection', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_virtual_network_gateway_connection: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      authorization_key: p.child('authorization_key').out,
      connection_protocol: p.child('connection_protocol').out,
      dpd_timeout_seconds: p.child('dpd_timeout_seconds').out,
      egress_bytes_transferred: p.child('egress_bytes_transferred').out,
      enable_bgp: p.child('enable_bgp').out,
      express_route_circuit_id: p.child('express_route_circuit_id').out,
      express_route_gateway_bypass: p.child('express_route_gateway_bypass').out,
      id: p.child('id').out,
      ingress_bytes_transferred: p.child('ingress_bytes_transferred').out,
      ipsec_policy: p.child('ipsec_policy').out,
      local_azure_ip_address_enabled: p.child('local_azure_ip_address_enabled').out,
      local_network_gateway_id: p.child('local_network_gateway_id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      peer_virtual_network_gateway_id: p.child('peer_virtual_network_gateway_id').out,
      private_link_fast_path_enabled: p.child('private_link_fast_path_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      resource_guid: p.child('resource_guid').out,
      routing_weight: p.child('routing_weight').out,
      shared_key: p.child('shared_key').out,
      tags: p.child('tags').out,
      traffic_selector_policy: p.child('traffic_selector_policy').out,
      type: p.child('type').out,
      use_policy_based_traffic_selectors: p.child('use_policy_based_traffic_selectors').out,
      virtual_network_gateway_id: p.child('virtual_network_gateway_id').out,
    },
    virtual_network_peering(name, block): {
      local p = path(['data', 'azurerm_virtual_network_peering', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_virtual_network_peering: {
              [name]: std.prune({
                name: build.template(block.name),
                virtual_network_id: build.template(block.virtual_network_id),
              }),
            },
          },
        },
      },
      allow_forwarded_traffic: p.child('allow_forwarded_traffic').out,
      allow_gateway_transit: p.child('allow_gateway_transit').out,
      allow_virtual_network_access: p.child('allow_virtual_network_access').out,
      id: p.child('id').out,
      name: p.child('name').out,
      only_ipv6_peering_enabled: p.child('only_ipv6_peering_enabled').out,
      peer_complete_virtual_networks_enabled: p.child('peer_complete_virtual_networks_enabled').out,
      remote_virtual_network_id: p.child('remote_virtual_network_id').out,
      use_remote_gateways: p.child('use_remote_gateways').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    virtual_wan(name, block): {
      local p = path(['data', 'azurerm_virtual_wan', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_virtual_wan: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      allow_branch_to_branch_traffic: p.child('allow_branch_to_branch_traffic').out,
      disable_vpn_encryption: p.child('disable_vpn_encryption').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      office365_local_breakout_category: p.child('office365_local_breakout_category').out,
      resource_group_name: p.child('resource_group_name').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      virtual_hub_ids: p.child('virtual_hub_ids').out,
      vpn_site_ids: p.child('vpn_site_ids').out,
    },
    vmware_private_cloud(name, block): {
      local p = path(['data', 'azurerm_vmware_private_cloud', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_vmware_private_cloud: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      circuit: p.child('circuit').out,
      hcx_cloud_manager_endpoint: p.child('hcx_cloud_manager_endpoint').out,
      id: p.child('id').out,
      internet_connection_enabled: p.child('internet_connection_enabled').out,
      location: p.child('location').out,
      management_cluster: p.child('management_cluster').out,
      management_subnet_cidr: p.child('management_subnet_cidr').out,
      name: p.child('name').out,
      network_subnet_cidr: p.child('network_subnet_cidr').out,
      nsxt_certificate_thumbprint: p.child('nsxt_certificate_thumbprint').out,
      nsxt_manager_endpoint: p.child('nsxt_manager_endpoint').out,
      provisioning_subnet_cidr: p.child('provisioning_subnet_cidr').out,
      resource_group_name: p.child('resource_group_name').out,
      sku_name: p.child('sku_name').out,
      tags: p.child('tags').out,
      vcenter_certificate_thumbprint: p.child('vcenter_certificate_thumbprint').out,
      vcsa_endpoint: p.child('vcsa_endpoint').out,
      vmotion_subnet_cidr: p.child('vmotion_subnet_cidr').out,
    },
    vpn_gateway(name, block): {
      local p = path(['data', 'azurerm_vpn_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_vpn_gateway: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      bgp_settings: p.child('bgp_settings').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      scale_unit: p.child('scale_unit').out,
      tags: p.child('tags').out,
      virtual_hub_id: p.child('virtual_hub_id').out,
    },
    vpn_server_configuration(name, block): {
      local p = path(['data', 'azurerm_vpn_server_configuration', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_vpn_server_configuration: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      azure_active_directory_authentication: p.child('azure_active_directory_authentication').out,
      client_revoked_certificate: p.child('client_revoked_certificate').out,
      client_root_certificate: p.child('client_root_certificate').out,
      id: p.child('id').out,
      ipsec_policy: p.child('ipsec_policy').out,
      location: p.child('location').out,
      name: p.child('name').out,
      radius: p.child('radius').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      vpn_authentication_types: p.child('vpn_authentication_types').out,
      vpn_protocols: p.child('vpn_protocols').out,
    },
    web_application_firewall_policy(name, block): {
      local p = path(['data', 'azurerm_web_application_firewall_policy', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_web_application_firewall_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
    },
    web_pubsub(name, block): {
      local p = path(['data', 'azurerm_web_pubsub', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_web_pubsub: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      aad_auth_enabled: p.child('aad_auth_enabled').out,
      capacity: p.child('capacity').out,
      external_ip: p.child('external_ip').out,
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      local_auth_enabled: p.child('local_auth_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      primary_access_key: p.child('primary_access_key').out,
      primary_connection_string: p.child('primary_connection_string').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      public_port: p.child('public_port').out,
      resource_group_name: p.child('resource_group_name').out,
      secondary_access_key: p.child('secondary_access_key').out,
      secondary_connection_string: p.child('secondary_connection_string').out,
      server_port: p.child('server_port').out,
      sku: p.child('sku').out,
      tags: p.child('tags').out,
      tls_client_cert_enabled: p.child('tls_client_cert_enabled').out,
      version: p.child('version').out,
    },
    web_pubsub_private_link_resource(name, block): {
      local p = path(['data', 'azurerm_web_pubsub_private_link_resource', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_web_pubsub_private_link_resource: {
              [name]: std.prune({
                web_pubsub_id: build.template(block.web_pubsub_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      shared_private_link_resource_types: p.child('shared_private_link_resource_types').out,
      web_pubsub_id: p.child('web_pubsub_id').out,
    },
    windows_function_app(name, block): {
      local p = path(['data', 'azurerm_windows_function_app', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_windows_function_app: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      app_settings: p.child('app_settings').out,
      auth_settings: p.child('auth_settings').out,
      auth_settings_v2: p.child('auth_settings_v2').out,
      backup: p.child('backup').out,
      builtin_logging_enabled: p.child('builtin_logging_enabled').out,
      client_certificate_enabled: p.child('client_certificate_enabled').out,
      client_certificate_exclusion_paths: p.child('client_certificate_exclusion_paths').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      connection_string: p.child('connection_string').out,
      content_share_force_disabled: p.child('content_share_force_disabled').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      daily_memory_time_quota: p.child('daily_memory_time_quota').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      ftp_publish_basic_authentication_enabled: p.child('ftp_publish_basic_authentication_enabled').out,
      functions_extension_version: p.child('functions_extension_version').out,
      hosting_environment_id: p.child('hosting_environment_id').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      service_plan_id: p.child('service_plan_id').out,
      site_config: p.child('site_config').out,
      site_credential: p.child('site_credential').out,
      sticky_settings: p.child('sticky_settings').out,
      storage_account_access_key: p.child('storage_account_access_key').out,
      storage_account_name: p.child('storage_account_name').out,
      storage_key_vault_secret_id: p.child('storage_key_vault_secret_id').out,
      storage_uses_managed_identity: p.child('storage_uses_managed_identity').out,
      tags: p.child('tags').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
      webdeploy_publish_basic_authentication_enabled: p.child('webdeploy_publish_basic_authentication_enabled').out,
    },
    windows_web_app(name, block): {
      local p = path(['data', 'azurerm_windows_web_app', name]),
      _: p.out._ {
        block: {
          data: {
            azurerm_windows_web_app: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_name: build.template(block.resource_group_name),
              }),
            },
          },
        },
      },
      app_settings: p.child('app_settings').out,
      auth_settings: p.child('auth_settings').out,
      auth_settings_v2: p.child('auth_settings_v2').out,
      backup: p.child('backup').out,
      client_affinity_enabled: p.child('client_affinity_enabled').out,
      client_certificate_enabled: p.child('client_certificate_enabled').out,
      client_certificate_exclusion_paths: p.child('client_certificate_exclusion_paths').out,
      client_certificate_mode: p.child('client_certificate_mode').out,
      connection_string: p.child('connection_string').out,
      custom_domain_verification_id: p.child('custom_domain_verification_id').out,
      default_hostname: p.child('default_hostname').out,
      enabled: p.child('enabled').out,
      ftp_publish_basic_authentication_enabled: p.child('ftp_publish_basic_authentication_enabled').out,
      hosting_environment_id: p.child('hosting_environment_id').out,
      https_only: p.child('https_only').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      kind: p.child('kind').out,
      location: p.child('location').out,
      logs: p.child('logs').out,
      name: p.child('name').out,
      outbound_ip_address_list: p.child('outbound_ip_address_list').out,
      outbound_ip_addresses: p.child('outbound_ip_addresses').out,
      possible_outbound_ip_address_list: p.child('possible_outbound_ip_address_list').out,
      possible_outbound_ip_addresses: p.child('possible_outbound_ip_addresses').out,
      public_network_access_enabled: p.child('public_network_access_enabled').out,
      resource_group_name: p.child('resource_group_name').out,
      service_plan_id: p.child('service_plan_id').out,
      site_config: p.child('site_config').out,
      site_credential: p.child('site_credential').out,
      sticky_settings: p.child('sticky_settings').out,
      storage_account: p.child('storage_account').out,
      tags: p.child('tags').out,
      virtual_network_subnet_id: p.child('virtual_network_subnet_id').out,
      webdeploy_publish_basic_authentication_enabled: p.child('webdeploy_publish_basic_authentication_enabled').out,
    },
  },
  func: {
    normalise_resource_id(id): func('provider::azurerm::normalise_resource_id', [id]),
    parse_resource_id(id): func('provider::azurerm::parse_resource_id', [id]),
  },
};

provider
