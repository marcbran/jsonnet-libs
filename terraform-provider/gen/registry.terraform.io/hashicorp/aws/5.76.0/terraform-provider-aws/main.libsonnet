local build = {
  expression(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then if std.objectHas(val._, 'ref') then val._.ref else '"%s"' % [std.strReplace(val._.str, '\n', '\\n')] else std.mapWithKey(function(key, value) self.expression(value), val) else if std.type(val) == 'array' then std.map(function(element) self.expression(element), val) else if std.type(val) == 'string' then '"%s"' % [std.strReplace(val, '\n', '\\n')] else val,
  template(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then if std.objectHas(val._, 'ref') then '${%s}' % [val._.ref] else val._.str else std.mapWithKey(function(key, value) self.template(value), val) else if std.type(val) == 'array' then std.map(function(element) self.template(element), val) else if std.type(val) == 'string' then val else val,
  providerRequirements(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then val._.providerRequirements else std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.providerRequirements(val[key]), std.objectFields(val)), {}) else if std.type(val) == 'array' then std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.providerRequirements(val[key]), val), {}) else {},
};

local providerTemplate(provider, requirements, configuration) = {
  local providerRequirements = { [provider]: requirements },
  local providerAlias = if configuration == null then null else configuration.alias,
  local providerWithAlias = if configuration == null then null else '%s.%s' % [provider, providerAlias],
  local providerConfiguration = if configuration == null then {} else { [providerWithAlias]: { provider: { [provider]: configuration } } },
  local providerReference = if configuration == null then {} else { provider: providerWithAlias },
  blockType(blockType): {
    local blockTypePath = if blockType == 'resource' then [] else ['data'],
    resource(type, name): {
      local resourceType = std.substr(type, std.length(provider) + 1, std.length(type)),
      local resourcePath = blockTypePath + [type, name],
      _(rawBlock, block): {
        local metaBlock = {
          depends_on: build.template(std.get(rawBlock, 'depends_on', null)),
          count: build.template(std.get(rawBlock, 'count', null)),
          for_each: build.template(std.get(rawBlock, 'for_each', null)),
        },
        providerRequirements: providerRequirements,
        providerConfiguration: providerConfiguration,
        provider: provider,
        providerAlias: providerAlias,
        resourceType: resourceType,
        name: name,
        ref: std.join('.', resourcePath),
        block: {
          [blockType]: {
            [type]: {
              [name]: std.prune(metaBlock + block + providerReference),
            },
          },
        },
      },
      field(fieldName): {
        local fieldPath = resourcePath + [fieldName],
        _: {
          ref: std.join('.', fieldPath),
        },
      },
    },
  },
  func(name, parameters=[]): {
    local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]),
    _: {
      providerRequirements: providerRequirements,
      providerConfiguration: providerConfiguration,
      ref: 'provider::%s::%s(%s)' % [provider, name, parameterString],
    },
  },
};

local provider(configuration) = {
  local requirements = {
    source: 'registry.terraform.io/hashicorp/aws',
    version: '5.76.0',
  },
  local provider = providerTemplate('aws', requirements, configuration),
  resource: {
    local blockType = provider.blockType('resource'),
    accessanalyzer_analyzer(name, block): {
      local resource = blockType.resource('aws_accessanalyzer_analyzer', name),
      _: resource._(block, {
        analyzer_name: build.template(block.analyzer_name),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      analyzer_name: resource.field('analyzer_name'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    accessanalyzer_archive_rule(name, block): {
      local resource = blockType.resource('aws_accessanalyzer_archive_rule', name),
      _: resource._(block, {
        analyzer_name: build.template(block.analyzer_name),
        id: build.template(std.get(block, 'id', null)),
        rule_name: build.template(block.rule_name),
      }),
      analyzer_name: resource.field('analyzer_name'),
      id: resource.field('id'),
      rule_name: resource.field('rule_name'),
    },
    account_alternate_contact(name, block): {
      local resource = blockType.resource('aws_account_alternate_contact', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        alternate_contact_type: build.template(block.alternate_contact_type),
        email_address: build.template(block.email_address),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        phone_number: build.template(block.phone_number),
        title: build.template(block.title),
      }),
      account_id: resource.field('account_id'),
      alternate_contact_type: resource.field('alternate_contact_type'),
      email_address: resource.field('email_address'),
      id: resource.field('id'),
      name: resource.field('name'),
      phone_number: resource.field('phone_number'),
      title: resource.field('title'),
    },
    account_primary_contact(name, block): {
      local resource = blockType.resource('aws_account_primary_contact', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        address_line_1: build.template(block.address_line_1),
        address_line_2: build.template(std.get(block, 'address_line_2', null)),
        address_line_3: build.template(std.get(block, 'address_line_3', null)),
        city: build.template(block.city),
        company_name: build.template(std.get(block, 'company_name', null)),
        country_code: build.template(block.country_code),
        district_or_county: build.template(std.get(block, 'district_or_county', null)),
        full_name: build.template(block.full_name),
        id: build.template(std.get(block, 'id', null)),
        phone_number: build.template(block.phone_number),
        postal_code: build.template(block.postal_code),
        state_or_region: build.template(std.get(block, 'state_or_region', null)),
        website_url: build.template(std.get(block, 'website_url', null)),
      }),
      account_id: resource.field('account_id'),
      address_line_1: resource.field('address_line_1'),
      address_line_2: resource.field('address_line_2'),
      address_line_3: resource.field('address_line_3'),
      city: resource.field('city'),
      company_name: resource.field('company_name'),
      country_code: resource.field('country_code'),
      district_or_county: resource.field('district_or_county'),
      full_name: resource.field('full_name'),
      id: resource.field('id'),
      phone_number: resource.field('phone_number'),
      postal_code: resource.field('postal_code'),
      state_or_region: resource.field('state_or_region'),
      website_url: resource.field('website_url'),
    },
    account_region(name, block): {
      local resource = blockType.resource('aws_account_region', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
        opt_status: build.template(std.get(block, 'opt_status', null)),
        region_name: build.template(block.region_name),
      }),
      account_id: resource.field('account_id'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      opt_status: resource.field('opt_status'),
      region_name: resource.field('region_name'),
    },
    acm_certificate(name, block): {
      local resource = blockType.resource('aws_acm_certificate', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        certificate_authority_arn: build.template(std.get(block, 'certificate_authority_arn', null)),
        certificate_body: build.template(std.get(block, 'certificate_body', null)),
        certificate_chain: build.template(std.get(block, 'certificate_chain', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        domain_validation_options: build.template(std.get(block, 'domain_validation_options', null)),
        early_renewal_duration: build.template(std.get(block, 'early_renewal_duration', null)),
        id: build.template(std.get(block, 'id', null)),
        key_algorithm: build.template(std.get(block, 'key_algorithm', null)),
        not_after: build.template(std.get(block, 'not_after', null)),
        not_before: build.template(std.get(block, 'not_before', null)),
        pending_renewal: build.template(std.get(block, 'pending_renewal', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        renewal_eligibility: build.template(std.get(block, 'renewal_eligibility', null)),
        renewal_summary: build.template(std.get(block, 'renewal_summary', null)),
        status: build.template(std.get(block, 'status', null)),
        subject_alternative_names: build.template(std.get(block, 'subject_alternative_names', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
        validation_emails: build.template(std.get(block, 'validation_emails', null)),
        validation_method: build.template(std.get(block, 'validation_method', null)),
      }),
      arn: resource.field('arn'),
      certificate_authority_arn: resource.field('certificate_authority_arn'),
      certificate_body: resource.field('certificate_body'),
      certificate_chain: resource.field('certificate_chain'),
      domain_name: resource.field('domain_name'),
      domain_validation_options: resource.field('domain_validation_options'),
      early_renewal_duration: resource.field('early_renewal_duration'),
      id: resource.field('id'),
      key_algorithm: resource.field('key_algorithm'),
      not_after: resource.field('not_after'),
      not_before: resource.field('not_before'),
      pending_renewal: resource.field('pending_renewal'),
      private_key: resource.field('private_key'),
      renewal_eligibility: resource.field('renewal_eligibility'),
      renewal_summary: resource.field('renewal_summary'),
      status: resource.field('status'),
      subject_alternative_names: resource.field('subject_alternative_names'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      validation_emails: resource.field('validation_emails'),
      validation_method: resource.field('validation_method'),
    },
    acm_certificate_validation(name, block): {
      local resource = blockType.resource('aws_acm_certificate_validation', name),
      _: resource._(block, {
        certificate_arn: build.template(block.certificate_arn),
        id: build.template(std.get(block, 'id', null)),
        validation_record_fqdns: build.template(std.get(block, 'validation_record_fqdns', null)),
      }),
      certificate_arn: resource.field('certificate_arn'),
      id: resource.field('id'),
      validation_record_fqdns: resource.field('validation_record_fqdns'),
    },
    acmpca_certificate(name, block): {
      local resource = blockType.resource('aws_acmpca_certificate', name),
      _: resource._(block, {
        api_passthrough: build.template(std.get(block, 'api_passthrough', null)),
        arn: build.template(std.get(block, 'arn', null)),
        certificate: build.template(std.get(block, 'certificate', null)),
        certificate_authority_arn: build.template(block.certificate_authority_arn),
        certificate_chain: build.template(std.get(block, 'certificate_chain', null)),
        certificate_signing_request: build.template(block.certificate_signing_request),
        id: build.template(std.get(block, 'id', null)),
        signing_algorithm: build.template(block.signing_algorithm),
        template_arn: build.template(std.get(block, 'template_arn', null)),
      }),
      api_passthrough: resource.field('api_passthrough'),
      arn: resource.field('arn'),
      certificate: resource.field('certificate'),
      certificate_authority_arn: resource.field('certificate_authority_arn'),
      certificate_chain: resource.field('certificate_chain'),
      certificate_signing_request: resource.field('certificate_signing_request'),
      id: resource.field('id'),
      signing_algorithm: resource.field('signing_algorithm'),
      template_arn: resource.field('template_arn'),
    },
    acmpca_certificate_authority(name, block): {
      local resource = blockType.resource('aws_acmpca_certificate_authority', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        certificate: build.template(std.get(block, 'certificate', null)),
        certificate_chain: build.template(std.get(block, 'certificate_chain', null)),
        certificate_signing_request: build.template(std.get(block, 'certificate_signing_request', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        key_storage_security_standard: build.template(std.get(block, 'key_storage_security_standard', null)),
        not_after: build.template(std.get(block, 'not_after', null)),
        not_before: build.template(std.get(block, 'not_before', null)),
        permanent_deletion_time_in_days: build.template(std.get(block, 'permanent_deletion_time_in_days', null)),
        serial: build.template(std.get(block, 'serial', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
        usage_mode: build.template(std.get(block, 'usage_mode', null)),
      }),
      arn: resource.field('arn'),
      certificate: resource.field('certificate'),
      certificate_chain: resource.field('certificate_chain'),
      certificate_signing_request: resource.field('certificate_signing_request'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      key_storage_security_standard: resource.field('key_storage_security_standard'),
      not_after: resource.field('not_after'),
      not_before: resource.field('not_before'),
      permanent_deletion_time_in_days: resource.field('permanent_deletion_time_in_days'),
      serial: resource.field('serial'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      usage_mode: resource.field('usage_mode'),
    },
    acmpca_certificate_authority_certificate(name, block): {
      local resource = blockType.resource('aws_acmpca_certificate_authority_certificate', name),
      _: resource._(block, {
        certificate: build.template(block.certificate),
        certificate_authority_arn: build.template(block.certificate_authority_arn),
        certificate_chain: build.template(std.get(block, 'certificate_chain', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      certificate: resource.field('certificate'),
      certificate_authority_arn: resource.field('certificate_authority_arn'),
      certificate_chain: resource.field('certificate_chain'),
      id: resource.field('id'),
    },
    acmpca_permission(name, block): {
      local resource = blockType.resource('aws_acmpca_permission', name),
      _: resource._(block, {
        actions: build.template(block.actions),
        certificate_authority_arn: build.template(block.certificate_authority_arn),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(std.get(block, 'policy', null)),
        principal: build.template(block.principal),
        source_account: build.template(std.get(block, 'source_account', null)),
      }),
      actions: resource.field('actions'),
      certificate_authority_arn: resource.field('certificate_authority_arn'),
      id: resource.field('id'),
      policy: resource.field('policy'),
      principal: resource.field('principal'),
      source_account: resource.field('source_account'),
    },
    acmpca_policy(name, block): {
      local resource = blockType.resource('aws_acmpca_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        resource_arn: build.template(block.resource_arn),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      resource_arn: resource.field('resource_arn'),
    },
    alb(name, block): {
      local resource = blockType.resource('aws_alb', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        arn_suffix: build.template(std.get(block, 'arn_suffix', null)),
        client_keep_alive: build.template(std.get(block, 'client_keep_alive', null)),
        customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null)),
        desync_mitigation_mode: build.template(std.get(block, 'desync_mitigation_mode', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        dns_record_client_routing_policy: build.template(std.get(block, 'dns_record_client_routing_policy', null)),
        drop_invalid_header_fields: build.template(std.get(block, 'drop_invalid_header_fields', null)),
        enable_cross_zone_load_balancing: build.template(std.get(block, 'enable_cross_zone_load_balancing', null)),
        enable_deletion_protection: build.template(std.get(block, 'enable_deletion_protection', null)),
        enable_http2: build.template(std.get(block, 'enable_http2', null)),
        enable_tls_version_and_cipher_suite_headers: build.template(std.get(block, 'enable_tls_version_and_cipher_suite_headers', null)),
        enable_waf_fail_open: build.template(std.get(block, 'enable_waf_fail_open', null)),
        enable_xff_client_port: build.template(std.get(block, 'enable_xff_client_port', null)),
        enable_zonal_shift: build.template(std.get(block, 'enable_zonal_shift', null)),
        enforce_security_group_inbound_rules_on_private_link_traffic: build.template(std.get(block, 'enforce_security_group_inbound_rules_on_private_link_traffic', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout: build.template(std.get(block, 'idle_timeout', null)),
        internal: build.template(std.get(block, 'internal', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        load_balancer_type: build.template(std.get(block, 'load_balancer_type', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        preserve_host_header: build.template(std.get(block, 'preserve_host_header', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        subnets: build.template(std.get(block, 'subnets', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        xff_header_processing_mode: build.template(std.get(block, 'xff_header_processing_mode', null)),
        zone_id: build.template(std.get(block, 'zone_id', null)),
      }),
      arn: resource.field('arn'),
      arn_suffix: resource.field('arn_suffix'),
      client_keep_alive: resource.field('client_keep_alive'),
      customer_owned_ipv4_pool: resource.field('customer_owned_ipv4_pool'),
      desync_mitigation_mode: resource.field('desync_mitigation_mode'),
      dns_name: resource.field('dns_name'),
      dns_record_client_routing_policy: resource.field('dns_record_client_routing_policy'),
      drop_invalid_header_fields: resource.field('drop_invalid_header_fields'),
      enable_cross_zone_load_balancing: resource.field('enable_cross_zone_load_balancing'),
      enable_deletion_protection: resource.field('enable_deletion_protection'),
      enable_http2: resource.field('enable_http2'),
      enable_tls_version_and_cipher_suite_headers: resource.field('enable_tls_version_and_cipher_suite_headers'),
      enable_waf_fail_open: resource.field('enable_waf_fail_open'),
      enable_xff_client_port: resource.field('enable_xff_client_port'),
      enable_zonal_shift: resource.field('enable_zonal_shift'),
      enforce_security_group_inbound_rules_on_private_link_traffic: resource.field('enforce_security_group_inbound_rules_on_private_link_traffic'),
      id: resource.field('id'),
      idle_timeout: resource.field('idle_timeout'),
      internal: resource.field('internal'),
      ip_address_type: resource.field('ip_address_type'),
      load_balancer_type: resource.field('load_balancer_type'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      preserve_host_header: resource.field('preserve_host_header'),
      security_groups: resource.field('security_groups'),
      subnets: resource.field('subnets'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
      xff_header_processing_mode: resource.field('xff_header_processing_mode'),
      zone_id: resource.field('zone_id'),
    },
    alb_listener(name, block): {
      local resource = blockType.resource('aws_alb_listener', name),
      _: resource._(block, {
        alpn_policy: build.template(std.get(block, 'alpn_policy', null)),
        arn: build.template(std.get(block, 'arn', null)),
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        load_balancer_arn: build.template(block.load_balancer_arn),
        port: build.template(std.get(block, 'port', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        ssl_policy: build.template(std.get(block, 'ssl_policy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tcp_idle_timeout_seconds: build.template(std.get(block, 'tcp_idle_timeout_seconds', null)),
      }),
      alpn_policy: resource.field('alpn_policy'),
      arn: resource.field('arn'),
      certificate_arn: resource.field('certificate_arn'),
      id: resource.field('id'),
      load_balancer_arn: resource.field('load_balancer_arn'),
      port: resource.field('port'),
      protocol: resource.field('protocol'),
      ssl_policy: resource.field('ssl_policy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tcp_idle_timeout_seconds: resource.field('tcp_idle_timeout_seconds'),
    },
    alb_listener_certificate(name, block): {
      local resource = blockType.resource('aws_alb_listener_certificate', name),
      _: resource._(block, {
        certificate_arn: build.template(block.certificate_arn),
        id: build.template(std.get(block, 'id', null)),
        listener_arn: build.template(block.listener_arn),
      }),
      certificate_arn: resource.field('certificate_arn'),
      id: resource.field('id'),
      listener_arn: resource.field('listener_arn'),
    },
    alb_listener_rule(name, block): {
      local resource = blockType.resource('aws_alb_listener_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        listener_arn: build.template(block.listener_arn),
        priority: build.template(std.get(block, 'priority', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      listener_arn: resource.field('listener_arn'),
      priority: resource.field('priority'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    alb_target_group(name, block): {
      local resource = blockType.resource('aws_alb_target_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        arn_suffix: build.template(std.get(block, 'arn_suffix', null)),
        connection_termination: build.template(std.get(block, 'connection_termination', null)),
        deregistration_delay: build.template(std.get(block, 'deregistration_delay', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        lambda_multi_value_headers_enabled: build.template(std.get(block, 'lambda_multi_value_headers_enabled', null)),
        load_balancer_arns: build.template(std.get(block, 'load_balancer_arns', null)),
        load_balancing_algorithm_type: build.template(std.get(block, 'load_balancing_algorithm_type', null)),
        load_balancing_anomaly_mitigation: build.template(std.get(block, 'load_balancing_anomaly_mitigation', null)),
        load_balancing_cross_zone_enabled: build.template(std.get(block, 'load_balancing_cross_zone_enabled', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        port: build.template(std.get(block, 'port', null)),
        preserve_client_ip: build.template(std.get(block, 'preserve_client_ip', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        protocol_version: build.template(std.get(block, 'protocol_version', null)),
        proxy_protocol_v2: build.template(std.get(block, 'proxy_protocol_v2', null)),
        slow_start: build.template(std.get(block, 'slow_start', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_type: build.template(std.get(block, 'target_type', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      arn_suffix: resource.field('arn_suffix'),
      connection_termination: resource.field('connection_termination'),
      deregistration_delay: resource.field('deregistration_delay'),
      id: resource.field('id'),
      ip_address_type: resource.field('ip_address_type'),
      lambda_multi_value_headers_enabled: resource.field('lambda_multi_value_headers_enabled'),
      load_balancer_arns: resource.field('load_balancer_arns'),
      load_balancing_algorithm_type: resource.field('load_balancing_algorithm_type'),
      load_balancing_anomaly_mitigation: resource.field('load_balancing_anomaly_mitigation'),
      load_balancing_cross_zone_enabled: resource.field('load_balancing_cross_zone_enabled'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      port: resource.field('port'),
      preserve_client_ip: resource.field('preserve_client_ip'),
      protocol: resource.field('protocol'),
      protocol_version: resource.field('protocol_version'),
      proxy_protocol_v2: resource.field('proxy_protocol_v2'),
      slow_start: resource.field('slow_start'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_type: resource.field('target_type'),
      vpc_id: resource.field('vpc_id'),
    },
    alb_target_group_attachment(name, block): {
      local resource = blockType.resource('aws_alb_target_group_attachment', name),
      _: resource._(block, {
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        port: build.template(std.get(block, 'port', null)),
        target_group_arn: build.template(block.target_group_arn),
        target_id: build.template(block.target_id),
      }),
      availability_zone: resource.field('availability_zone'),
      id: resource.field('id'),
      port: resource.field('port'),
      target_group_arn: resource.field('target_group_arn'),
      target_id: resource.field('target_id'),
    },
    ami(name, block): {
      local resource = blockType.resource('aws_ami', name),
      _: resource._(block, {
        architecture: build.template(std.get(block, 'architecture', null)),
        arn: build.template(std.get(block, 'arn', null)),
        boot_mode: build.template(std.get(block, 'boot_mode', null)),
        deprecation_time: build.template(std.get(block, 'deprecation_time', null)),
        description: build.template(std.get(block, 'description', null)),
        ena_support: build.template(std.get(block, 'ena_support', null)),
        hypervisor: build.template(std.get(block, 'hypervisor', null)),
        id: build.template(std.get(block, 'id', null)),
        image_location: build.template(std.get(block, 'image_location', null)),
        image_owner_alias: build.template(std.get(block, 'image_owner_alias', null)),
        image_type: build.template(std.get(block, 'image_type', null)),
        imds_support: build.template(std.get(block, 'imds_support', null)),
        kernel_id: build.template(std.get(block, 'kernel_id', null)),
        manage_ebs_snapshots: build.template(std.get(block, 'manage_ebs_snapshots', null)),
        name: build.template(block.name),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        platform: build.template(std.get(block, 'platform', null)),
        platform_details: build.template(std.get(block, 'platform_details', null)),
        public: build.template(std.get(block, 'public', null)),
        ramdisk_id: build.template(std.get(block, 'ramdisk_id', null)),
        root_device_name: build.template(std.get(block, 'root_device_name', null)),
        root_snapshot_id: build.template(std.get(block, 'root_snapshot_id', null)),
        sriov_net_support: build.template(std.get(block, 'sriov_net_support', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tpm_support: build.template(std.get(block, 'tpm_support', null)),
        usage_operation: build.template(std.get(block, 'usage_operation', null)),
        virtualization_type: build.template(std.get(block, 'virtualization_type', null)),
      }),
      architecture: resource.field('architecture'),
      arn: resource.field('arn'),
      boot_mode: resource.field('boot_mode'),
      deprecation_time: resource.field('deprecation_time'),
      description: resource.field('description'),
      ena_support: resource.field('ena_support'),
      hypervisor: resource.field('hypervisor'),
      id: resource.field('id'),
      image_location: resource.field('image_location'),
      image_owner_alias: resource.field('image_owner_alias'),
      image_type: resource.field('image_type'),
      imds_support: resource.field('imds_support'),
      kernel_id: resource.field('kernel_id'),
      manage_ebs_snapshots: resource.field('manage_ebs_snapshots'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      platform: resource.field('platform'),
      platform_details: resource.field('platform_details'),
      public: resource.field('public'),
      ramdisk_id: resource.field('ramdisk_id'),
      root_device_name: resource.field('root_device_name'),
      root_snapshot_id: resource.field('root_snapshot_id'),
      sriov_net_support: resource.field('sriov_net_support'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tpm_support: resource.field('tpm_support'),
      usage_operation: resource.field('usage_operation'),
      virtualization_type: resource.field('virtualization_type'),
    },
    ami_copy(name, block): {
      local resource = blockType.resource('aws_ami_copy', name),
      _: resource._(block, {
        architecture: build.template(std.get(block, 'architecture', null)),
        arn: build.template(std.get(block, 'arn', null)),
        boot_mode: build.template(std.get(block, 'boot_mode', null)),
        deprecation_time: build.template(std.get(block, 'deprecation_time', null)),
        description: build.template(std.get(block, 'description', null)),
        destination_outpost_arn: build.template(std.get(block, 'destination_outpost_arn', null)),
        ena_support: build.template(std.get(block, 'ena_support', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        hypervisor: build.template(std.get(block, 'hypervisor', null)),
        id: build.template(std.get(block, 'id', null)),
        image_location: build.template(std.get(block, 'image_location', null)),
        image_owner_alias: build.template(std.get(block, 'image_owner_alias', null)),
        image_type: build.template(std.get(block, 'image_type', null)),
        imds_support: build.template(std.get(block, 'imds_support', null)),
        kernel_id: build.template(std.get(block, 'kernel_id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        manage_ebs_snapshots: build.template(std.get(block, 'manage_ebs_snapshots', null)),
        name: build.template(block.name),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        platform: build.template(std.get(block, 'platform', null)),
        platform_details: build.template(std.get(block, 'platform_details', null)),
        public: build.template(std.get(block, 'public', null)),
        ramdisk_id: build.template(std.get(block, 'ramdisk_id', null)),
        root_device_name: build.template(std.get(block, 'root_device_name', null)),
        root_snapshot_id: build.template(std.get(block, 'root_snapshot_id', null)),
        source_ami_id: build.template(block.source_ami_id),
        source_ami_region: build.template(block.source_ami_region),
        sriov_net_support: build.template(std.get(block, 'sriov_net_support', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tpm_support: build.template(std.get(block, 'tpm_support', null)),
        usage_operation: build.template(std.get(block, 'usage_operation', null)),
        virtualization_type: build.template(std.get(block, 'virtualization_type', null)),
      }),
      architecture: resource.field('architecture'),
      arn: resource.field('arn'),
      boot_mode: resource.field('boot_mode'),
      deprecation_time: resource.field('deprecation_time'),
      description: resource.field('description'),
      destination_outpost_arn: resource.field('destination_outpost_arn'),
      ena_support: resource.field('ena_support'),
      encrypted: resource.field('encrypted'),
      hypervisor: resource.field('hypervisor'),
      id: resource.field('id'),
      image_location: resource.field('image_location'),
      image_owner_alias: resource.field('image_owner_alias'),
      image_type: resource.field('image_type'),
      imds_support: resource.field('imds_support'),
      kernel_id: resource.field('kernel_id'),
      kms_key_id: resource.field('kms_key_id'),
      manage_ebs_snapshots: resource.field('manage_ebs_snapshots'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      platform: resource.field('platform'),
      platform_details: resource.field('platform_details'),
      public: resource.field('public'),
      ramdisk_id: resource.field('ramdisk_id'),
      root_device_name: resource.field('root_device_name'),
      root_snapshot_id: resource.field('root_snapshot_id'),
      source_ami_id: resource.field('source_ami_id'),
      source_ami_region: resource.field('source_ami_region'),
      sriov_net_support: resource.field('sriov_net_support'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tpm_support: resource.field('tpm_support'),
      usage_operation: resource.field('usage_operation'),
      virtualization_type: resource.field('virtualization_type'),
    },
    ami_from_instance(name, block): {
      local resource = blockType.resource('aws_ami_from_instance', name),
      _: resource._(block, {
        architecture: build.template(std.get(block, 'architecture', null)),
        arn: build.template(std.get(block, 'arn', null)),
        boot_mode: build.template(std.get(block, 'boot_mode', null)),
        deprecation_time: build.template(std.get(block, 'deprecation_time', null)),
        description: build.template(std.get(block, 'description', null)),
        ena_support: build.template(std.get(block, 'ena_support', null)),
        hypervisor: build.template(std.get(block, 'hypervisor', null)),
        id: build.template(std.get(block, 'id', null)),
        image_location: build.template(std.get(block, 'image_location', null)),
        image_owner_alias: build.template(std.get(block, 'image_owner_alias', null)),
        image_type: build.template(std.get(block, 'image_type', null)),
        imds_support: build.template(std.get(block, 'imds_support', null)),
        kernel_id: build.template(std.get(block, 'kernel_id', null)),
        manage_ebs_snapshots: build.template(std.get(block, 'manage_ebs_snapshots', null)),
        name: build.template(block.name),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        platform: build.template(std.get(block, 'platform', null)),
        platform_details: build.template(std.get(block, 'platform_details', null)),
        public: build.template(std.get(block, 'public', null)),
        ramdisk_id: build.template(std.get(block, 'ramdisk_id', null)),
        root_device_name: build.template(std.get(block, 'root_device_name', null)),
        root_snapshot_id: build.template(std.get(block, 'root_snapshot_id', null)),
        snapshot_without_reboot: build.template(std.get(block, 'snapshot_without_reboot', null)),
        source_instance_id: build.template(block.source_instance_id),
        sriov_net_support: build.template(std.get(block, 'sriov_net_support', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tpm_support: build.template(std.get(block, 'tpm_support', null)),
        usage_operation: build.template(std.get(block, 'usage_operation', null)),
        virtualization_type: build.template(std.get(block, 'virtualization_type', null)),
      }),
      architecture: resource.field('architecture'),
      arn: resource.field('arn'),
      boot_mode: resource.field('boot_mode'),
      deprecation_time: resource.field('deprecation_time'),
      description: resource.field('description'),
      ena_support: resource.field('ena_support'),
      hypervisor: resource.field('hypervisor'),
      id: resource.field('id'),
      image_location: resource.field('image_location'),
      image_owner_alias: resource.field('image_owner_alias'),
      image_type: resource.field('image_type'),
      imds_support: resource.field('imds_support'),
      kernel_id: resource.field('kernel_id'),
      manage_ebs_snapshots: resource.field('manage_ebs_snapshots'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      platform: resource.field('platform'),
      platform_details: resource.field('platform_details'),
      public: resource.field('public'),
      ramdisk_id: resource.field('ramdisk_id'),
      root_device_name: resource.field('root_device_name'),
      root_snapshot_id: resource.field('root_snapshot_id'),
      snapshot_without_reboot: resource.field('snapshot_without_reboot'),
      source_instance_id: resource.field('source_instance_id'),
      sriov_net_support: resource.field('sriov_net_support'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tpm_support: resource.field('tpm_support'),
      usage_operation: resource.field('usage_operation'),
      virtualization_type: resource.field('virtualization_type'),
    },
    ami_launch_permission(name, block): {
      local resource = blockType.resource('aws_ami_launch_permission', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        group: build.template(std.get(block, 'group', null)),
        id: build.template(std.get(block, 'id', null)),
        image_id: build.template(block.image_id),
        organization_arn: build.template(std.get(block, 'organization_arn', null)),
        organizational_unit_arn: build.template(std.get(block, 'organizational_unit_arn', null)),
      }),
      account_id: resource.field('account_id'),
      group: resource.field('group'),
      id: resource.field('id'),
      image_id: resource.field('image_id'),
      organization_arn: resource.field('organization_arn'),
      organizational_unit_arn: resource.field('organizational_unit_arn'),
    },
    amplify_app(name, block): {
      local resource = blockType.resource('aws_amplify_app', name),
      _: resource._(block, {
        access_token: build.template(std.get(block, 'access_token', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_branch_creation_patterns: build.template(std.get(block, 'auto_branch_creation_patterns', null)),
        basic_auth_credentials: build.template(std.get(block, 'basic_auth_credentials', null)),
        build_spec: build.template(std.get(block, 'build_spec', null)),
        custom_headers: build.template(std.get(block, 'custom_headers', null)),
        default_domain: build.template(std.get(block, 'default_domain', null)),
        description: build.template(std.get(block, 'description', null)),
        enable_auto_branch_creation: build.template(std.get(block, 'enable_auto_branch_creation', null)),
        enable_basic_auth: build.template(std.get(block, 'enable_basic_auth', null)),
        enable_branch_auto_build: build.template(std.get(block, 'enable_branch_auto_build', null)),
        enable_branch_auto_deletion: build.template(std.get(block, 'enable_branch_auto_deletion', null)),
        environment_variables: build.template(std.get(block, 'environment_variables', null)),
        iam_service_role_arn: build.template(std.get(block, 'iam_service_role_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        oauth_token: build.template(std.get(block, 'oauth_token', null)),
        platform: build.template(std.get(block, 'platform', null)),
        production_branch: build.template(std.get(block, 'production_branch', null)),
        repository: build.template(std.get(block, 'repository', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      access_token: resource.field('access_token'),
      arn: resource.field('arn'),
      auto_branch_creation_patterns: resource.field('auto_branch_creation_patterns'),
      basic_auth_credentials: resource.field('basic_auth_credentials'),
      build_spec: resource.field('build_spec'),
      custom_headers: resource.field('custom_headers'),
      default_domain: resource.field('default_domain'),
      description: resource.field('description'),
      enable_auto_branch_creation: resource.field('enable_auto_branch_creation'),
      enable_basic_auth: resource.field('enable_basic_auth'),
      enable_branch_auto_build: resource.field('enable_branch_auto_build'),
      enable_branch_auto_deletion: resource.field('enable_branch_auto_deletion'),
      environment_variables: resource.field('environment_variables'),
      iam_service_role_arn: resource.field('iam_service_role_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      oauth_token: resource.field('oauth_token'),
      platform: resource.field('platform'),
      production_branch: resource.field('production_branch'),
      repository: resource.field('repository'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    amplify_backend_environment(name, block): {
      local resource = blockType.resource('aws_amplify_backend_environment', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        arn: build.template(std.get(block, 'arn', null)),
        deployment_artifacts: build.template(std.get(block, 'deployment_artifacts', null)),
        environment_name: build.template(block.environment_name),
        id: build.template(std.get(block, 'id', null)),
        stack_name: build.template(std.get(block, 'stack_name', null)),
      }),
      app_id: resource.field('app_id'),
      arn: resource.field('arn'),
      deployment_artifacts: resource.field('deployment_artifacts'),
      environment_name: resource.field('environment_name'),
      id: resource.field('id'),
      stack_name: resource.field('stack_name'),
    },
    amplify_branch(name, block): {
      local resource = blockType.resource('aws_amplify_branch', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        arn: build.template(std.get(block, 'arn', null)),
        associated_resources: build.template(std.get(block, 'associated_resources', null)),
        backend_environment_arn: build.template(std.get(block, 'backend_environment_arn', null)),
        basic_auth_credentials: build.template(std.get(block, 'basic_auth_credentials', null)),
        branch_name: build.template(block.branch_name),
        custom_domains: build.template(std.get(block, 'custom_domains', null)),
        description: build.template(std.get(block, 'description', null)),
        destination_branch: build.template(std.get(block, 'destination_branch', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enable_auto_build: build.template(std.get(block, 'enable_auto_build', null)),
        enable_basic_auth: build.template(std.get(block, 'enable_basic_auth', null)),
        enable_notification: build.template(std.get(block, 'enable_notification', null)),
        enable_performance_mode: build.template(std.get(block, 'enable_performance_mode', null)),
        enable_pull_request_preview: build.template(std.get(block, 'enable_pull_request_preview', null)),
        environment_variables: build.template(std.get(block, 'environment_variables', null)),
        framework: build.template(std.get(block, 'framework', null)),
        id: build.template(std.get(block, 'id', null)),
        pull_request_environment_name: build.template(std.get(block, 'pull_request_environment_name', null)),
        source_branch: build.template(std.get(block, 'source_branch', null)),
        stage: build.template(std.get(block, 'stage', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
      }),
      app_id: resource.field('app_id'),
      arn: resource.field('arn'),
      associated_resources: resource.field('associated_resources'),
      backend_environment_arn: resource.field('backend_environment_arn'),
      basic_auth_credentials: resource.field('basic_auth_credentials'),
      branch_name: resource.field('branch_name'),
      custom_domains: resource.field('custom_domains'),
      description: resource.field('description'),
      destination_branch: resource.field('destination_branch'),
      display_name: resource.field('display_name'),
      enable_auto_build: resource.field('enable_auto_build'),
      enable_basic_auth: resource.field('enable_basic_auth'),
      enable_notification: resource.field('enable_notification'),
      enable_performance_mode: resource.field('enable_performance_mode'),
      enable_pull_request_preview: resource.field('enable_pull_request_preview'),
      environment_variables: resource.field('environment_variables'),
      framework: resource.field('framework'),
      id: resource.field('id'),
      pull_request_environment_name: resource.field('pull_request_environment_name'),
      source_branch: resource.field('source_branch'),
      stage: resource.field('stage'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      ttl: resource.field('ttl'),
    },
    amplify_domain_association(name, block): {
      local resource = blockType.resource('aws_amplify_domain_association', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        arn: build.template(std.get(block, 'arn', null)),
        certificate_verification_dns_record: build.template(std.get(block, 'certificate_verification_dns_record', null)),
        domain_name: build.template(block.domain_name),
        enable_auto_sub_domain: build.template(std.get(block, 'enable_auto_sub_domain', null)),
        id: build.template(std.get(block, 'id', null)),
        wait_for_verification: build.template(std.get(block, 'wait_for_verification', null)),
      }),
      app_id: resource.field('app_id'),
      arn: resource.field('arn'),
      certificate_verification_dns_record: resource.field('certificate_verification_dns_record'),
      domain_name: resource.field('domain_name'),
      enable_auto_sub_domain: resource.field('enable_auto_sub_domain'),
      id: resource.field('id'),
      wait_for_verification: resource.field('wait_for_verification'),
    },
    amplify_webhook(name, block): {
      local resource = blockType.resource('aws_amplify_webhook', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        arn: build.template(std.get(block, 'arn', null)),
        branch_name: build.template(block.branch_name),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      app_id: resource.field('app_id'),
      arn: resource.field('arn'),
      branch_name: resource.field('branch_name'),
      description: resource.field('description'),
      id: resource.field('id'),
      url: resource.field('url'),
    },
    api_gateway_account(name, block): {
      local resource = blockType.resource('aws_api_gateway_account', name),
      _: resource._(block, {
        api_key_version: build.template(std.get(block, 'api_key_version', null)),
        cloudwatch_role_arn: build.template(std.get(block, 'cloudwatch_role_arn', null)),
        features: build.template(std.get(block, 'features', null)),
        id: build.template(std.get(block, 'id', null)),
        reset_on_delete: build.template(std.get(block, 'reset_on_delete', null)),
        throttle_settings: build.template(std.get(block, 'throttle_settings', null)),
      }),
      api_key_version: resource.field('api_key_version'),
      cloudwatch_role_arn: resource.field('cloudwatch_role_arn'),
      features: resource.field('features'),
      id: resource.field('id'),
      reset_on_delete: resource.field('reset_on_delete'),
      throttle_settings: resource.field('throttle_settings'),
    },
    api_gateway_api_key(name, block): {
      local resource = blockType.resource('aws_api_gateway_api_key', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        customer_id: build.template(std.get(block, 'customer_id', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        value: build.template(std.get(block, 'value', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      customer_id: resource.field('customer_id'),
      description: resource.field('description'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      value: resource.field('value'),
    },
    api_gateway_authorizer(name, block): {
      local resource = blockType.resource('aws_api_gateway_authorizer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        authorizer_credentials: build.template(std.get(block, 'authorizer_credentials', null)),
        authorizer_result_ttl_in_seconds: build.template(std.get(block, 'authorizer_result_ttl_in_seconds', null)),
        authorizer_uri: build.template(std.get(block, 'authorizer_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_source: build.template(std.get(block, 'identity_source', null)),
        identity_validation_expression: build.template(std.get(block, 'identity_validation_expression', null)),
        name: build.template(block.name),
        provider_arns: build.template(std.get(block, 'provider_arns', null)),
        rest_api_id: build.template(block.rest_api_id),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      authorizer_credentials: resource.field('authorizer_credentials'),
      authorizer_result_ttl_in_seconds: resource.field('authorizer_result_ttl_in_seconds'),
      authorizer_uri: resource.field('authorizer_uri'),
      id: resource.field('id'),
      identity_source: resource.field('identity_source'),
      identity_validation_expression: resource.field('identity_validation_expression'),
      name: resource.field('name'),
      provider_arns: resource.field('provider_arns'),
      rest_api_id: resource.field('rest_api_id'),
      type: resource.field('type'),
    },
    api_gateway_base_path_mapping(name, block): {
      local resource = blockType.resource('aws_api_gateway_base_path_mapping', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        base_path: build.template(std.get(block, 'base_path', null)),
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        stage_name: build.template(std.get(block, 'stage_name', null)),
      }),
      api_id: resource.field('api_id'),
      base_path: resource.field('base_path'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      stage_name: resource.field('stage_name'),
    },
    api_gateway_client_certificate(name, block): {
      local resource = blockType.resource('aws_api_gateway_client_certificate', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        id: build.template(std.get(block, 'id', null)),
        pem_encoded_certificate: build.template(std.get(block, 'pem_encoded_certificate', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      expiration_date: resource.field('expiration_date'),
      id: resource.field('id'),
      pem_encoded_certificate: resource.field('pem_encoded_certificate'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    api_gateway_deployment(name, block): {
      local resource = blockType.resource('aws_api_gateway_deployment', name),
      _: resource._(block, {
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        execution_arn: build.template(std.get(block, 'execution_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        invoke_url: build.template(std.get(block, 'invoke_url', null)),
        rest_api_id: build.template(block.rest_api_id),
        stage_description: build.template(std.get(block, 'stage_description', null)),
        stage_name: build.template(std.get(block, 'stage_name', null)),
        triggers: build.template(std.get(block, 'triggers', null)),
        variables: build.template(std.get(block, 'variables', null)),
      }),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      execution_arn: resource.field('execution_arn'),
      id: resource.field('id'),
      invoke_url: resource.field('invoke_url'),
      rest_api_id: resource.field('rest_api_id'),
      stage_description: resource.field('stage_description'),
      stage_name: resource.field('stage_name'),
      triggers: resource.field('triggers'),
      variables: resource.field('variables'),
    },
    api_gateway_documentation_part(name, block): {
      local resource = blockType.resource('aws_api_gateway_documentation_part', name),
      _: resource._(block, {
        documentation_part_id: build.template(std.get(block, 'documentation_part_id', null)),
        id: build.template(std.get(block, 'id', null)),
        properties: build.template(block.properties),
        rest_api_id: build.template(block.rest_api_id),
      }),
      documentation_part_id: resource.field('documentation_part_id'),
      id: resource.field('id'),
      properties: resource.field('properties'),
      rest_api_id: resource.field('rest_api_id'),
    },
    api_gateway_documentation_version(name, block): {
      local resource = blockType.resource('aws_api_gateway_documentation_version', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        rest_api_id: build.template(block.rest_api_id),
        version: build.template(block.version),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      rest_api_id: resource.field('rest_api_id'),
      version: resource.field('version'),
    },
    api_gateway_domain_name(name, block): {
      local resource = blockType.resource('aws_api_gateway_domain_name', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        certificate_body: build.template(std.get(block, 'certificate_body', null)),
        certificate_chain: build.template(std.get(block, 'certificate_chain', null)),
        certificate_name: build.template(std.get(block, 'certificate_name', null)),
        certificate_private_key: build.template(std.get(block, 'certificate_private_key', null)),
        certificate_upload_date: build.template(std.get(block, 'certificate_upload_date', null)),
        cloudfront_domain_name: build.template(std.get(block, 'cloudfront_domain_name', null)),
        cloudfront_zone_id: build.template(std.get(block, 'cloudfront_zone_id', null)),
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        ownership_verification_certificate_arn: build.template(std.get(block, 'ownership_verification_certificate_arn', null)),
        regional_certificate_arn: build.template(std.get(block, 'regional_certificate_arn', null)),
        regional_certificate_name: build.template(std.get(block, 'regional_certificate_name', null)),
        regional_domain_name: build.template(std.get(block, 'regional_domain_name', null)),
        regional_zone_id: build.template(std.get(block, 'regional_zone_id', null)),
        security_policy: build.template(std.get(block, 'security_policy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      certificate_arn: resource.field('certificate_arn'),
      certificate_body: resource.field('certificate_body'),
      certificate_chain: resource.field('certificate_chain'),
      certificate_name: resource.field('certificate_name'),
      certificate_private_key: resource.field('certificate_private_key'),
      certificate_upload_date: resource.field('certificate_upload_date'),
      cloudfront_domain_name: resource.field('cloudfront_domain_name'),
      cloudfront_zone_id: resource.field('cloudfront_zone_id'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      ownership_verification_certificate_arn: resource.field('ownership_verification_certificate_arn'),
      regional_certificate_arn: resource.field('regional_certificate_arn'),
      regional_certificate_name: resource.field('regional_certificate_name'),
      regional_domain_name: resource.field('regional_domain_name'),
      regional_zone_id: resource.field('regional_zone_id'),
      security_policy: resource.field('security_policy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    api_gateway_gateway_response(name, block): {
      local resource = blockType.resource('aws_api_gateway_gateway_response', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        response_parameters: build.template(std.get(block, 'response_parameters', null)),
        response_templates: build.template(std.get(block, 'response_templates', null)),
        response_type: build.template(block.response_type),
        rest_api_id: build.template(block.rest_api_id),
        status_code: build.template(std.get(block, 'status_code', null)),
      }),
      id: resource.field('id'),
      response_parameters: resource.field('response_parameters'),
      response_templates: resource.field('response_templates'),
      response_type: resource.field('response_type'),
      rest_api_id: resource.field('rest_api_id'),
      status_code: resource.field('status_code'),
    },
    api_gateway_integration(name, block): {
      local resource = blockType.resource('aws_api_gateway_integration', name),
      _: resource._(block, {
        cache_key_parameters: build.template(std.get(block, 'cache_key_parameters', null)),
        cache_namespace: build.template(std.get(block, 'cache_namespace', null)),
        connection_id: build.template(std.get(block, 'connection_id', null)),
        connection_type: build.template(std.get(block, 'connection_type', null)),
        content_handling: build.template(std.get(block, 'content_handling', null)),
        credentials: build.template(std.get(block, 'credentials', null)),
        http_method: build.template(block.http_method),
        id: build.template(std.get(block, 'id', null)),
        integration_http_method: build.template(std.get(block, 'integration_http_method', null)),
        passthrough_behavior: build.template(std.get(block, 'passthrough_behavior', null)),
        request_parameters: build.template(std.get(block, 'request_parameters', null)),
        request_templates: build.template(std.get(block, 'request_templates', null)),
        resource_id: build.template(block.resource_id),
        rest_api_id: build.template(block.rest_api_id),
        timeout_milliseconds: build.template(std.get(block, 'timeout_milliseconds', null)),
        type: build.template(block.type),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      cache_key_parameters: resource.field('cache_key_parameters'),
      cache_namespace: resource.field('cache_namespace'),
      connection_id: resource.field('connection_id'),
      connection_type: resource.field('connection_type'),
      content_handling: resource.field('content_handling'),
      credentials: resource.field('credentials'),
      http_method: resource.field('http_method'),
      id: resource.field('id'),
      integration_http_method: resource.field('integration_http_method'),
      passthrough_behavior: resource.field('passthrough_behavior'),
      request_parameters: resource.field('request_parameters'),
      request_templates: resource.field('request_templates'),
      resource_id: resource.field('resource_id'),
      rest_api_id: resource.field('rest_api_id'),
      timeout_milliseconds: resource.field('timeout_milliseconds'),
      type: resource.field('type'),
      uri: resource.field('uri'),
    },
    api_gateway_integration_response(name, block): {
      local resource = blockType.resource('aws_api_gateway_integration_response', name),
      _: resource._(block, {
        content_handling: build.template(std.get(block, 'content_handling', null)),
        http_method: build.template(block.http_method),
        id: build.template(std.get(block, 'id', null)),
        resource_id: build.template(block.resource_id),
        response_parameters: build.template(std.get(block, 'response_parameters', null)),
        response_templates: build.template(std.get(block, 'response_templates', null)),
        rest_api_id: build.template(block.rest_api_id),
        selection_pattern: build.template(std.get(block, 'selection_pattern', null)),
        status_code: build.template(block.status_code),
      }),
      content_handling: resource.field('content_handling'),
      http_method: resource.field('http_method'),
      id: resource.field('id'),
      resource_id: resource.field('resource_id'),
      response_parameters: resource.field('response_parameters'),
      response_templates: resource.field('response_templates'),
      rest_api_id: resource.field('rest_api_id'),
      selection_pattern: resource.field('selection_pattern'),
      status_code: resource.field('status_code'),
    },
    api_gateway_method(name, block): {
      local resource = blockType.resource('aws_api_gateway_method', name),
      _: resource._(block, {
        api_key_required: build.template(std.get(block, 'api_key_required', null)),
        authorization: build.template(block.authorization),
        authorization_scopes: build.template(std.get(block, 'authorization_scopes', null)),
        authorizer_id: build.template(std.get(block, 'authorizer_id', null)),
        http_method: build.template(block.http_method),
        id: build.template(std.get(block, 'id', null)),
        operation_name: build.template(std.get(block, 'operation_name', null)),
        request_models: build.template(std.get(block, 'request_models', null)),
        request_parameters: build.template(std.get(block, 'request_parameters', null)),
        request_validator_id: build.template(std.get(block, 'request_validator_id', null)),
        resource_id: build.template(block.resource_id),
        rest_api_id: build.template(block.rest_api_id),
      }),
      api_key_required: resource.field('api_key_required'),
      authorization: resource.field('authorization'),
      authorization_scopes: resource.field('authorization_scopes'),
      authorizer_id: resource.field('authorizer_id'),
      http_method: resource.field('http_method'),
      id: resource.field('id'),
      operation_name: resource.field('operation_name'),
      request_models: resource.field('request_models'),
      request_parameters: resource.field('request_parameters'),
      request_validator_id: resource.field('request_validator_id'),
      resource_id: resource.field('resource_id'),
      rest_api_id: resource.field('rest_api_id'),
    },
    api_gateway_method_response(name, block): {
      local resource = blockType.resource('aws_api_gateway_method_response', name),
      _: resource._(block, {
        http_method: build.template(block.http_method),
        id: build.template(std.get(block, 'id', null)),
        resource_id: build.template(block.resource_id),
        response_models: build.template(std.get(block, 'response_models', null)),
        response_parameters: build.template(std.get(block, 'response_parameters', null)),
        rest_api_id: build.template(block.rest_api_id),
        status_code: build.template(block.status_code),
      }),
      http_method: resource.field('http_method'),
      id: resource.field('id'),
      resource_id: resource.field('resource_id'),
      response_models: resource.field('response_models'),
      response_parameters: resource.field('response_parameters'),
      rest_api_id: resource.field('rest_api_id'),
      status_code: resource.field('status_code'),
    },
    api_gateway_method_settings(name, block): {
      local resource = blockType.resource('aws_api_gateway_method_settings', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        method_path: build.template(block.method_path),
        rest_api_id: build.template(block.rest_api_id),
        stage_name: build.template(block.stage_name),
      }),
      id: resource.field('id'),
      method_path: resource.field('method_path'),
      rest_api_id: resource.field('rest_api_id'),
      stage_name: resource.field('stage_name'),
    },
    api_gateway_model(name, block): {
      local resource = blockType.resource('aws_api_gateway_model', name),
      _: resource._(block, {
        content_type: build.template(block.content_type),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        rest_api_id: build.template(block.rest_api_id),
        schema: build.template(std.get(block, 'schema', null)),
      }),
      content_type: resource.field('content_type'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      rest_api_id: resource.field('rest_api_id'),
      schema: resource.field('schema'),
    },
    api_gateway_request_validator(name, block): {
      local resource = blockType.resource('aws_api_gateway_request_validator', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        rest_api_id: build.template(block.rest_api_id),
        validate_request_body: build.template(std.get(block, 'validate_request_body', null)),
        validate_request_parameters: build.template(std.get(block, 'validate_request_parameters', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      rest_api_id: resource.field('rest_api_id'),
      validate_request_body: resource.field('validate_request_body'),
      validate_request_parameters: resource.field('validate_request_parameters'),
    },
    api_gateway_resource(name, block): {
      local resource = blockType.resource('aws_api_gateway_resource', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        parent_id: build.template(block.parent_id),
        path: build.template(std.get(block, 'path', null)),
        path_part: build.template(block.path_part),
        rest_api_id: build.template(block.rest_api_id),
      }),
      id: resource.field('id'),
      parent_id: resource.field('parent_id'),
      path: resource.field('path'),
      path_part: resource.field('path_part'),
      rest_api_id: resource.field('rest_api_id'),
    },
    api_gateway_rest_api(name, block): {
      local resource = blockType.resource('aws_api_gateway_rest_api', name),
      _: resource._(block, {
        api_key_source: build.template(std.get(block, 'api_key_source', null)),
        arn: build.template(std.get(block, 'arn', null)),
        binary_media_types: build.template(std.get(block, 'binary_media_types', null)),
        body: build.template(std.get(block, 'body', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        disable_execute_api_endpoint: build.template(std.get(block, 'disable_execute_api_endpoint', null)),
        execution_arn: build.template(std.get(block, 'execution_arn', null)),
        fail_on_warnings: build.template(std.get(block, 'fail_on_warnings', null)),
        id: build.template(std.get(block, 'id', null)),
        minimum_compression_size: build.template(std.get(block, 'minimum_compression_size', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        policy: build.template(std.get(block, 'policy', null)),
        put_rest_api_mode: build.template(std.get(block, 'put_rest_api_mode', null)),
        root_resource_id: build.template(std.get(block, 'root_resource_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      api_key_source: resource.field('api_key_source'),
      arn: resource.field('arn'),
      binary_media_types: resource.field('binary_media_types'),
      body: resource.field('body'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      disable_execute_api_endpoint: resource.field('disable_execute_api_endpoint'),
      execution_arn: resource.field('execution_arn'),
      fail_on_warnings: resource.field('fail_on_warnings'),
      id: resource.field('id'),
      minimum_compression_size: resource.field('minimum_compression_size'),
      name: resource.field('name'),
      parameters: resource.field('parameters'),
      policy: resource.field('policy'),
      put_rest_api_mode: resource.field('put_rest_api_mode'),
      root_resource_id: resource.field('root_resource_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    api_gateway_rest_api_policy(name, block): {
      local resource = blockType.resource('aws_api_gateway_rest_api_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        rest_api_id: build.template(block.rest_api_id),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      rest_api_id: resource.field('rest_api_id'),
    },
    api_gateway_stage(name, block): {
      local resource = blockType.resource('aws_api_gateway_stage', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cache_cluster_enabled: build.template(std.get(block, 'cache_cluster_enabled', null)),
        cache_cluster_size: build.template(std.get(block, 'cache_cluster_size', null)),
        client_certificate_id: build.template(std.get(block, 'client_certificate_id', null)),
        deployment_id: build.template(block.deployment_id),
        description: build.template(std.get(block, 'description', null)),
        documentation_version: build.template(std.get(block, 'documentation_version', null)),
        execution_arn: build.template(std.get(block, 'execution_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        invoke_url: build.template(std.get(block, 'invoke_url', null)),
        rest_api_id: build.template(block.rest_api_id),
        stage_name: build.template(block.stage_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        variables: build.template(std.get(block, 'variables', null)),
        web_acl_arn: build.template(std.get(block, 'web_acl_arn', null)),
        xray_tracing_enabled: build.template(std.get(block, 'xray_tracing_enabled', null)),
      }),
      arn: resource.field('arn'),
      cache_cluster_enabled: resource.field('cache_cluster_enabled'),
      cache_cluster_size: resource.field('cache_cluster_size'),
      client_certificate_id: resource.field('client_certificate_id'),
      deployment_id: resource.field('deployment_id'),
      description: resource.field('description'),
      documentation_version: resource.field('documentation_version'),
      execution_arn: resource.field('execution_arn'),
      id: resource.field('id'),
      invoke_url: resource.field('invoke_url'),
      rest_api_id: resource.field('rest_api_id'),
      stage_name: resource.field('stage_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      variables: resource.field('variables'),
      web_acl_arn: resource.field('web_acl_arn'),
      xray_tracing_enabled: resource.field('xray_tracing_enabled'),
    },
    api_gateway_usage_plan(name, block): {
      local resource = blockType.resource('aws_api_gateway_usage_plan', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        product_code: build.template(std.get(block, 'product_code', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      product_code: resource.field('product_code'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    api_gateway_usage_plan_key(name, block): {
      local resource = blockType.resource('aws_api_gateway_usage_plan_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_id: build.template(block.key_id),
        key_type: build.template(block.key_type),
        name: build.template(std.get(block, 'name', null)),
        usage_plan_id: build.template(block.usage_plan_id),
        value: build.template(std.get(block, 'value', null)),
      }),
      id: resource.field('id'),
      key_id: resource.field('key_id'),
      key_type: resource.field('key_type'),
      name: resource.field('name'),
      usage_plan_id: resource.field('usage_plan_id'),
      value: resource.field('value'),
    },
    api_gateway_vpc_link(name, block): {
      local resource = blockType.resource('aws_api_gateway_vpc_link', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_arns: build.template(block.target_arns),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_arns: resource.field('target_arns'),
    },
    apigatewayv2_api(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_api', name),
      _: resource._(block, {
        api_endpoint: build.template(std.get(block, 'api_endpoint', null)),
        api_key_selection_expression: build.template(std.get(block, 'api_key_selection_expression', null)),
        arn: build.template(std.get(block, 'arn', null)),
        body: build.template(std.get(block, 'body', null)),
        credentials_arn: build.template(std.get(block, 'credentials_arn', null)),
        description: build.template(std.get(block, 'description', null)),
        disable_execute_api_endpoint: build.template(std.get(block, 'disable_execute_api_endpoint', null)),
        execution_arn: build.template(std.get(block, 'execution_arn', null)),
        fail_on_warnings: build.template(std.get(block, 'fail_on_warnings', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        protocol_type: build.template(block.protocol_type),
        route_key: build.template(std.get(block, 'route_key', null)),
        route_selection_expression: build.template(std.get(block, 'route_selection_expression', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target: build.template(std.get(block, 'target', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      api_endpoint: resource.field('api_endpoint'),
      api_key_selection_expression: resource.field('api_key_selection_expression'),
      arn: resource.field('arn'),
      body: resource.field('body'),
      credentials_arn: resource.field('credentials_arn'),
      description: resource.field('description'),
      disable_execute_api_endpoint: resource.field('disable_execute_api_endpoint'),
      execution_arn: resource.field('execution_arn'),
      fail_on_warnings: resource.field('fail_on_warnings'),
      id: resource.field('id'),
      name: resource.field('name'),
      protocol_type: resource.field('protocol_type'),
      route_key: resource.field('route_key'),
      route_selection_expression: resource.field('route_selection_expression'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target: resource.field('target'),
      version: resource.field('version'),
    },
    apigatewayv2_api_mapping(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_api_mapping', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        api_mapping_key: build.template(std.get(block, 'api_mapping_key', null)),
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        stage: build.template(block.stage),
      }),
      api_id: resource.field('api_id'),
      api_mapping_key: resource.field('api_mapping_key'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      stage: resource.field('stage'),
    },
    apigatewayv2_authorizer(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_authorizer', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        authorizer_credentials_arn: build.template(std.get(block, 'authorizer_credentials_arn', null)),
        authorizer_payload_format_version: build.template(std.get(block, 'authorizer_payload_format_version', null)),
        authorizer_result_ttl_in_seconds: build.template(std.get(block, 'authorizer_result_ttl_in_seconds', null)),
        authorizer_type: build.template(block.authorizer_type),
        authorizer_uri: build.template(std.get(block, 'authorizer_uri', null)),
        enable_simple_responses: build.template(std.get(block, 'enable_simple_responses', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_sources: build.template(std.get(block, 'identity_sources', null)),
        name: build.template(block.name),
      }),
      api_id: resource.field('api_id'),
      authorizer_credentials_arn: resource.field('authorizer_credentials_arn'),
      authorizer_payload_format_version: resource.field('authorizer_payload_format_version'),
      authorizer_result_ttl_in_seconds: resource.field('authorizer_result_ttl_in_seconds'),
      authorizer_type: resource.field('authorizer_type'),
      authorizer_uri: resource.field('authorizer_uri'),
      enable_simple_responses: resource.field('enable_simple_responses'),
      id: resource.field('id'),
      identity_sources: resource.field('identity_sources'),
      name: resource.field('name'),
    },
    apigatewayv2_deployment(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_deployment', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        auto_deployed: build.template(std.get(block, 'auto_deployed', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        triggers: build.template(std.get(block, 'triggers', null)),
      }),
      api_id: resource.field('api_id'),
      auto_deployed: resource.field('auto_deployed'),
      description: resource.field('description'),
      id: resource.field('id'),
      triggers: resource.field('triggers'),
    },
    apigatewayv2_domain_name(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_domain_name', name),
      _: resource._(block, {
        api_mapping_selection_expression: build.template(std.get(block, 'api_mapping_selection_expression', null)),
        arn: build.template(std.get(block, 'arn', null)),
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      api_mapping_selection_expression: resource.field('api_mapping_selection_expression'),
      arn: resource.field('arn'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    apigatewayv2_integration(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_integration', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        connection_id: build.template(std.get(block, 'connection_id', null)),
        connection_type: build.template(std.get(block, 'connection_type', null)),
        content_handling_strategy: build.template(std.get(block, 'content_handling_strategy', null)),
        credentials_arn: build.template(std.get(block, 'credentials_arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_method: build.template(std.get(block, 'integration_method', null)),
        integration_response_selection_expression: build.template(std.get(block, 'integration_response_selection_expression', null)),
        integration_subtype: build.template(std.get(block, 'integration_subtype', null)),
        integration_type: build.template(block.integration_type),
        integration_uri: build.template(std.get(block, 'integration_uri', null)),
        passthrough_behavior: build.template(std.get(block, 'passthrough_behavior', null)),
        payload_format_version: build.template(std.get(block, 'payload_format_version', null)),
        request_parameters: build.template(std.get(block, 'request_parameters', null)),
        request_templates: build.template(std.get(block, 'request_templates', null)),
        template_selection_expression: build.template(std.get(block, 'template_selection_expression', null)),
        timeout_milliseconds: build.template(std.get(block, 'timeout_milliseconds', null)),
      }),
      api_id: resource.field('api_id'),
      connection_id: resource.field('connection_id'),
      connection_type: resource.field('connection_type'),
      content_handling_strategy: resource.field('content_handling_strategy'),
      credentials_arn: resource.field('credentials_arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      integration_method: resource.field('integration_method'),
      integration_response_selection_expression: resource.field('integration_response_selection_expression'),
      integration_subtype: resource.field('integration_subtype'),
      integration_type: resource.field('integration_type'),
      integration_uri: resource.field('integration_uri'),
      passthrough_behavior: resource.field('passthrough_behavior'),
      payload_format_version: resource.field('payload_format_version'),
      request_parameters: resource.field('request_parameters'),
      request_templates: resource.field('request_templates'),
      template_selection_expression: resource.field('template_selection_expression'),
      timeout_milliseconds: resource.field('timeout_milliseconds'),
    },
    apigatewayv2_integration_response(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_integration_response', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        content_handling_strategy: build.template(std.get(block, 'content_handling_strategy', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_id: build.template(block.integration_id),
        integration_response_key: build.template(block.integration_response_key),
        response_templates: build.template(std.get(block, 'response_templates', null)),
        template_selection_expression: build.template(std.get(block, 'template_selection_expression', null)),
      }),
      api_id: resource.field('api_id'),
      content_handling_strategy: resource.field('content_handling_strategy'),
      id: resource.field('id'),
      integration_id: resource.field('integration_id'),
      integration_response_key: resource.field('integration_response_key'),
      response_templates: resource.field('response_templates'),
      template_selection_expression: resource.field('template_selection_expression'),
    },
    apigatewayv2_model(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_model', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        content_type: build.template(block.content_type),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        schema: build.template(block.schema),
      }),
      api_id: resource.field('api_id'),
      content_type: resource.field('content_type'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      schema: resource.field('schema'),
    },
    apigatewayv2_route(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_route', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        api_key_required: build.template(std.get(block, 'api_key_required', null)),
        authorization_scopes: build.template(std.get(block, 'authorization_scopes', null)),
        authorization_type: build.template(std.get(block, 'authorization_type', null)),
        authorizer_id: build.template(std.get(block, 'authorizer_id', null)),
        id: build.template(std.get(block, 'id', null)),
        model_selection_expression: build.template(std.get(block, 'model_selection_expression', null)),
        operation_name: build.template(std.get(block, 'operation_name', null)),
        request_models: build.template(std.get(block, 'request_models', null)),
        route_key: build.template(block.route_key),
        route_response_selection_expression: build.template(std.get(block, 'route_response_selection_expression', null)),
        target: build.template(std.get(block, 'target', null)),
      }),
      api_id: resource.field('api_id'),
      api_key_required: resource.field('api_key_required'),
      authorization_scopes: resource.field('authorization_scopes'),
      authorization_type: resource.field('authorization_type'),
      authorizer_id: resource.field('authorizer_id'),
      id: resource.field('id'),
      model_selection_expression: resource.field('model_selection_expression'),
      operation_name: resource.field('operation_name'),
      request_models: resource.field('request_models'),
      route_key: resource.field('route_key'),
      route_response_selection_expression: resource.field('route_response_selection_expression'),
      target: resource.field('target'),
    },
    apigatewayv2_route_response(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_route_response', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        id: build.template(std.get(block, 'id', null)),
        model_selection_expression: build.template(std.get(block, 'model_selection_expression', null)),
        response_models: build.template(std.get(block, 'response_models', null)),
        route_id: build.template(block.route_id),
        route_response_key: build.template(block.route_response_key),
      }),
      api_id: resource.field('api_id'),
      id: resource.field('id'),
      model_selection_expression: resource.field('model_selection_expression'),
      response_models: resource.field('response_models'),
      route_id: resource.field('route_id'),
      route_response_key: resource.field('route_response_key'),
    },
    apigatewayv2_stage(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_stage', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        arn: build.template(std.get(block, 'arn', null)),
        auto_deploy: build.template(std.get(block, 'auto_deploy', null)),
        client_certificate_id: build.template(std.get(block, 'client_certificate_id', null)),
        deployment_id: build.template(std.get(block, 'deployment_id', null)),
        description: build.template(std.get(block, 'description', null)),
        execution_arn: build.template(std.get(block, 'execution_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        invoke_url: build.template(std.get(block, 'invoke_url', null)),
        name: build.template(block.name),
        stage_variables: build.template(std.get(block, 'stage_variables', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      api_id: resource.field('api_id'),
      arn: resource.field('arn'),
      auto_deploy: resource.field('auto_deploy'),
      client_certificate_id: resource.field('client_certificate_id'),
      deployment_id: resource.field('deployment_id'),
      description: resource.field('description'),
      execution_arn: resource.field('execution_arn'),
      id: resource.field('id'),
      invoke_url: resource.field('invoke_url'),
      name: resource.field('name'),
      stage_variables: resource.field('stage_variables'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    apigatewayv2_vpc_link(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_vpc_link', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        security_group_ids: build.template(block.security_group_ids),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      security_group_ids: resource.field('security_group_ids'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    app_cookie_stickiness_policy(name, block): {
      local resource = blockType.resource('aws_app_cookie_stickiness_policy', name),
      _: resource._(block, {
        cookie_name: build.template(block.cookie_name),
        id: build.template(std.get(block, 'id', null)),
        lb_port: build.template(block.lb_port),
        load_balancer: build.template(block.load_balancer),
        name: build.template(block.name),
      }),
      cookie_name: resource.field('cookie_name'),
      id: resource.field('id'),
      lb_port: resource.field('lb_port'),
      load_balancer: resource.field('load_balancer'),
      name: resource.field('name'),
    },
    appautoscaling_policy(name, block): {
      local resource = blockType.resource('aws_appautoscaling_policy', name),
      _: resource._(block, {
        alarm_arns: build.template(std.get(block, 'alarm_arns', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_type: build.template(std.get(block, 'policy_type', null)),
        resource_id: build.template(block.resource_id),
        scalable_dimension: build.template(block.scalable_dimension),
        service_namespace: build.template(block.service_namespace),
      }),
      alarm_arns: resource.field('alarm_arns'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_type: resource.field('policy_type'),
      resource_id: resource.field('resource_id'),
      scalable_dimension: resource.field('scalable_dimension'),
      service_namespace: resource.field('service_namespace'),
    },
    appautoscaling_scheduled_action(name, block): {
      local resource = blockType.resource('aws_appautoscaling_scheduled_action', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        end_time: build.template(std.get(block, 'end_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_id: build.template(block.resource_id),
        scalable_dimension: build.template(block.scalable_dimension),
        schedule: build.template(block.schedule),
        service_namespace: build.template(block.service_namespace),
        start_time: build.template(std.get(block, 'start_time', null)),
        timezone: build.template(std.get(block, 'timezone', null)),
      }),
      arn: resource.field('arn'),
      end_time: resource.field('end_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      resource_id: resource.field('resource_id'),
      scalable_dimension: resource.field('scalable_dimension'),
      schedule: resource.field('schedule'),
      service_namespace: resource.field('service_namespace'),
      start_time: resource.field('start_time'),
      timezone: resource.field('timezone'),
    },
    appautoscaling_target(name, block): {
      local resource = blockType.resource('aws_appautoscaling_target', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        max_capacity: build.template(block.max_capacity),
        min_capacity: build.template(block.min_capacity),
        resource_id: build.template(block.resource_id),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        scalable_dimension: build.template(block.scalable_dimension),
        service_namespace: build.template(block.service_namespace),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      max_capacity: resource.field('max_capacity'),
      min_capacity: resource.field('min_capacity'),
      resource_id: resource.field('resource_id'),
      role_arn: resource.field('role_arn'),
      scalable_dimension: resource.field('scalable_dimension'),
      service_namespace: resource.field('service_namespace'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appconfig_application(name, block): {
      local resource = blockType.resource('aws_appconfig_application', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appconfig_configuration_profile(name, block): {
      local resource = blockType.resource('aws_appconfig_configuration_profile', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        arn: build.template(std.get(block, 'arn', null)),
        configuration_profile_id: build.template(std.get(block, 'configuration_profile_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_identifier: build.template(std.get(block, 'kms_key_identifier', null)),
        location_uri: build.template(block.location_uri),
        name: build.template(block.name),
        retrieval_role_arn: build.template(std.get(block, 'retrieval_role_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      application_id: resource.field('application_id'),
      arn: resource.field('arn'),
      configuration_profile_id: resource.field('configuration_profile_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      kms_key_identifier: resource.field('kms_key_identifier'),
      location_uri: resource.field('location_uri'),
      name: resource.field('name'),
      retrieval_role_arn: resource.field('retrieval_role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    appconfig_deployment(name, block): {
      local resource = blockType.resource('aws_appconfig_deployment', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        arn: build.template(std.get(block, 'arn', null)),
        configuration_profile_id: build.template(block.configuration_profile_id),
        configuration_version: build.template(block.configuration_version),
        deployment_number: build.template(std.get(block, 'deployment_number', null)),
        deployment_strategy_id: build.template(block.deployment_strategy_id),
        description: build.template(std.get(block, 'description', null)),
        environment_id: build.template(block.environment_id),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        kms_key_identifier: build.template(std.get(block, 'kms_key_identifier', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      application_id: resource.field('application_id'),
      arn: resource.field('arn'),
      configuration_profile_id: resource.field('configuration_profile_id'),
      configuration_version: resource.field('configuration_version'),
      deployment_number: resource.field('deployment_number'),
      deployment_strategy_id: resource.field('deployment_strategy_id'),
      description: resource.field('description'),
      environment_id: resource.field('environment_id'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      kms_key_identifier: resource.field('kms_key_identifier'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appconfig_deployment_strategy(name, block): {
      local resource = blockType.resource('aws_appconfig_deployment_strategy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        deployment_duration_in_minutes: build.template(block.deployment_duration_in_minutes),
        description: build.template(std.get(block, 'description', null)),
        final_bake_time_in_minutes: build.template(std.get(block, 'final_bake_time_in_minutes', null)),
        growth_factor: build.template(block.growth_factor),
        growth_type: build.template(std.get(block, 'growth_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        replicate_to: build.template(block.replicate_to),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      deployment_duration_in_minutes: resource.field('deployment_duration_in_minutes'),
      description: resource.field('description'),
      final_bake_time_in_minutes: resource.field('final_bake_time_in_minutes'),
      growth_factor: resource.field('growth_factor'),
      growth_type: resource.field('growth_type'),
      id: resource.field('id'),
      name: resource.field('name'),
      replicate_to: resource.field('replicate_to'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appconfig_environment(name, block): {
      local resource = blockType.resource('aws_appconfig_environment', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        environment_id: build.template(std.get(block, 'environment_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      application_id: resource.field('application_id'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      environment_id: resource.field('environment_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appconfig_extension(name, block): {
      local resource = blockType.resource('aws_appconfig_extension', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    appconfig_extension_association(name, block): {
      local resource = blockType.resource('aws_appconfig_extension_association', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        extension_arn: build.template(block.extension_arn),
        extension_version: build.template(std.get(block, 'extension_version', null)),
        id: build.template(std.get(block, 'id', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        resource_arn: build.template(block.resource_arn),
      }),
      arn: resource.field('arn'),
      extension_arn: resource.field('extension_arn'),
      extension_version: resource.field('extension_version'),
      id: resource.field('id'),
      parameters: resource.field('parameters'),
      resource_arn: resource.field('resource_arn'),
    },
    appconfig_hosted_configuration_version(name, block): {
      local resource = blockType.resource('aws_appconfig_hosted_configuration_version', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        arn: build.template(std.get(block, 'arn', null)),
        configuration_profile_id: build.template(block.configuration_profile_id),
        content: build.template(block.content),
        content_type: build.template(block.content_type),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        version_number: build.template(std.get(block, 'version_number', null)),
      }),
      application_id: resource.field('application_id'),
      arn: resource.field('arn'),
      configuration_profile_id: resource.field('configuration_profile_id'),
      content: resource.field('content'),
      content_type: resource.field('content_type'),
      description: resource.field('description'),
      id: resource.field('id'),
      version_number: resource.field('version_number'),
    },
    appfabric_app_authorization(name, block): {
      local resource = blockType.resource('aws_appfabric_app_authorization', name),
      _: resource._(block, {
        app: build.template(block.app),
        app_bundle_arn: build.template(block.app_bundle_arn),
        arn: build.template(std.get(block, 'arn', null)),
        auth_type: build.template(block.auth_type),
        auth_url: build.template(std.get(block, 'auth_url', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        persona: build.template(std.get(block, 'persona', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      app: resource.field('app'),
      app_bundle_arn: resource.field('app_bundle_arn'),
      arn: resource.field('arn'),
      auth_type: resource.field('auth_type'),
      auth_url: resource.field('auth_url'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      persona: resource.field('persona'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      updated_at: resource.field('updated_at'),
    },
    appfabric_app_authorization_connection(name, block): {
      local resource = blockType.resource('aws_appfabric_app_authorization_connection', name),
      _: resource._(block, {
        app: build.template(std.get(block, 'app', null)),
        app_authorization_arn: build.template(block.app_authorization_arn),
        app_bundle_arn: build.template(block.app_bundle_arn),
        id: build.template(std.get(block, 'id', null)),
        tenant: build.template(std.get(block, 'tenant', null)),
      }),
      app: resource.field('app'),
      app_authorization_arn: resource.field('app_authorization_arn'),
      app_bundle_arn: resource.field('app_bundle_arn'),
      id: resource.field('id'),
      tenant: resource.field('tenant'),
    },
    appfabric_app_bundle(name, block): {
      local resource = blockType.resource('aws_appfabric_app_bundle', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        customer_managed_key_arn: build.template(std.get(block, 'customer_managed_key_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      customer_managed_key_arn: resource.field('customer_managed_key_arn'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appfabric_ingestion(name, block): {
      local resource = blockType.resource('aws_appfabric_ingestion', name),
      _: resource._(block, {
        app: build.template(block.app),
        app_bundle_arn: build.template(block.app_bundle_arn),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        ingestion_type: build.template(block.ingestion_type),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tenant_id: build.template(block.tenant_id),
      }),
      app: resource.field('app'),
      app_bundle_arn: resource.field('app_bundle_arn'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      ingestion_type: resource.field('ingestion_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tenant_id: resource.field('tenant_id'),
    },
    appfabric_ingestion_destination(name, block): {
      local resource = blockType.resource('aws_appfabric_ingestion_destination', name),
      _: resource._(block, {
        app_bundle_arn: build.template(block.app_bundle_arn),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        ingestion_arn: build.template(block.ingestion_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      app_bundle_arn: resource.field('app_bundle_arn'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      ingestion_arn: resource.field('ingestion_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appflow_connector_profile(name, block): {
      local resource = blockType.resource('aws_appflow_connector_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        connection_mode: build.template(block.connection_mode),
        connector_label: build.template(std.get(block, 'connector_label', null)),
        connector_type: build.template(block.connector_type),
        credentials_arn: build.template(std.get(block, 'credentials_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_arn: build.template(std.get(block, 'kms_arn', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      connection_mode: resource.field('connection_mode'),
      connector_label: resource.field('connector_label'),
      connector_type: resource.field('connector_type'),
      credentials_arn: resource.field('credentials_arn'),
      id: resource.field('id'),
      kms_arn: resource.field('kms_arn'),
      name: resource.field('name'),
    },
    appflow_flow(name, block): {
      local resource = blockType.resource('aws_appflow_flow', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        flow_status: build.template(std.get(block, 'flow_status', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_arn: build.template(std.get(block, 'kms_arn', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      flow_status: resource.field('flow_status'),
      id: resource.field('id'),
      kms_arn: resource.field('kms_arn'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appintegrations_data_integration(name, block): {
      local resource = blockType.resource('aws_appintegrations_data_integration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key: build.template(block.kms_key),
        name: build.template(block.name),
        source_uri: build.template(block.source_uri),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      kms_key: resource.field('kms_key'),
      name: resource.field('name'),
      source_uri: resource.field('source_uri'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appintegrations_event_integration(name, block): {
      local resource = blockType.resource('aws_appintegrations_event_integration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        eventbridge_bus: build.template(block.eventbridge_bus),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      eventbridge_bus: resource.field('eventbridge_bus'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    applicationinsights_application(name, block): {
      local resource = blockType.resource('aws_applicationinsights_application', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_config_enabled: build.template(std.get(block, 'auto_config_enabled', null)),
        auto_create: build.template(std.get(block, 'auto_create', null)),
        cwe_monitor_enabled: build.template(std.get(block, 'cwe_monitor_enabled', null)),
        grouping_type: build.template(std.get(block, 'grouping_type', null)),
        id: build.template(std.get(block, 'id', null)),
        ops_center_enabled: build.template(std.get(block, 'ops_center_enabled', null)),
        ops_item_sns_topic_arn: build.template(std.get(block, 'ops_item_sns_topic_arn', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      auto_config_enabled: resource.field('auto_config_enabled'),
      auto_create: resource.field('auto_create'),
      cwe_monitor_enabled: resource.field('cwe_monitor_enabled'),
      grouping_type: resource.field('grouping_type'),
      id: resource.field('id'),
      ops_center_enabled: resource.field('ops_center_enabled'),
      ops_item_sns_topic_arn: resource.field('ops_item_sns_topic_arn'),
      resource_group_name: resource.field('resource_group_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appmesh_gateway_route(name, block): {
      local resource = blockType.resource('aws_appmesh_gateway_route', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_name: build.template(block.mesh_name),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        virtual_gateway_name: build.template(block.virtual_gateway_name),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_name: resource.field('mesh_name'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      virtual_gateway_name: resource.field('virtual_gateway_name'),
    },
    appmesh_mesh(name, block): {
      local resource = blockType.resource('aws_appmesh_mesh', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appmesh_route(name, block): {
      local resource = blockType.resource('aws_appmesh_route', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_name: build.template(block.mesh_name),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        virtual_router_name: build.template(block.virtual_router_name),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_name: resource.field('mesh_name'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      virtual_router_name: resource.field('virtual_router_name'),
    },
    appmesh_virtual_gateway(name, block): {
      local resource = blockType.resource('aws_appmesh_virtual_gateway', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_name: build.template(block.mesh_name),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_name: resource.field('mesh_name'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appmesh_virtual_node(name, block): {
      local resource = blockType.resource('aws_appmesh_virtual_node', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_name: build.template(block.mesh_name),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_name: resource.field('mesh_name'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appmesh_virtual_router(name, block): {
      local resource = blockType.resource('aws_appmesh_virtual_router', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_name: build.template(block.mesh_name),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_name: resource.field('mesh_name'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appmesh_virtual_service(name, block): {
      local resource = blockType.resource('aws_appmesh_virtual_service', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_name: build.template(block.mesh_name),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_name: resource.field('mesh_name'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    apprunner_auto_scaling_configuration_version(name, block): {
      local resource = blockType.resource('aws_apprunner_auto_scaling_configuration_version', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_scaling_configuration_name: build.template(block.auto_scaling_configuration_name),
        auto_scaling_configuration_revision: build.template(std.get(block, 'auto_scaling_configuration_revision', null)),
        has_associated_service: build.template(std.get(block, 'has_associated_service', null)),
        id: build.template(std.get(block, 'id', null)),
        is_default: build.template(std.get(block, 'is_default', null)),
        latest: build.template(std.get(block, 'latest', null)),
        max_concurrency: build.template(std.get(block, 'max_concurrency', null)),
        max_size: build.template(std.get(block, 'max_size', null)),
        min_size: build.template(std.get(block, 'min_size', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      auto_scaling_configuration_name: resource.field('auto_scaling_configuration_name'),
      auto_scaling_configuration_revision: resource.field('auto_scaling_configuration_revision'),
      has_associated_service: resource.field('has_associated_service'),
      id: resource.field('id'),
      is_default: resource.field('is_default'),
      latest: resource.field('latest'),
      max_concurrency: resource.field('max_concurrency'),
      max_size: resource.field('max_size'),
      min_size: resource.field('min_size'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    apprunner_connection(name, block): {
      local resource = blockType.resource('aws_apprunner_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        connection_name: build.template(block.connection_name),
        id: build.template(std.get(block, 'id', null)),
        provider_type: build.template(block.provider_type),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      connection_name: resource.field('connection_name'),
      id: resource.field('id'),
      provider_type: resource.field('provider_type'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    apprunner_custom_domain_association(name, block): {
      local resource = blockType.resource('aws_apprunner_custom_domain_association', name),
      _: resource._(block, {
        certificate_validation_records: build.template(std.get(block, 'certificate_validation_records', null)),
        dns_target: build.template(std.get(block, 'dns_target', null)),
        domain_name: build.template(block.domain_name),
        enable_www_subdomain: build.template(std.get(block, 'enable_www_subdomain', null)),
        id: build.template(std.get(block, 'id', null)),
        service_arn: build.template(block.service_arn),
        status: build.template(std.get(block, 'status', null)),
      }),
      certificate_validation_records: resource.field('certificate_validation_records'),
      dns_target: resource.field('dns_target'),
      domain_name: resource.field('domain_name'),
      enable_www_subdomain: resource.field('enable_www_subdomain'),
      id: resource.field('id'),
      service_arn: resource.field('service_arn'),
      status: resource.field('status'),
    },
    apprunner_default_auto_scaling_configuration_version(name, block): {
      local resource = blockType.resource('aws_apprunner_default_auto_scaling_configuration_version', name),
      _: resource._(block, {
        auto_scaling_configuration_arn: build.template(block.auto_scaling_configuration_arn),
        id: build.template(std.get(block, 'id', null)),
      }),
      auto_scaling_configuration_arn: resource.field('auto_scaling_configuration_arn'),
      id: resource.field('id'),
    },
    apprunner_deployment(name, block): {
      local resource = blockType.resource('aws_apprunner_deployment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        operation_id: build.template(std.get(block, 'operation_id', null)),
        service_arn: build.template(block.service_arn),
        status: build.template(std.get(block, 'status', null)),
      }),
      id: resource.field('id'),
      operation_id: resource.field('operation_id'),
      service_arn: resource.field('service_arn'),
      status: resource.field('status'),
    },
    apprunner_observability_configuration(name, block): {
      local resource = blockType.resource('aws_apprunner_observability_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        latest: build.template(std.get(block, 'latest', null)),
        observability_configuration_name: build.template(block.observability_configuration_name),
        observability_configuration_revision: build.template(std.get(block, 'observability_configuration_revision', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      latest: resource.field('latest'),
      observability_configuration_name: resource.field('observability_configuration_name'),
      observability_configuration_revision: resource.field('observability_configuration_revision'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    apprunner_service(name, block): {
      local resource = blockType.resource('aws_apprunner_service', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_scaling_configuration_arn: build.template(std.get(block, 'auto_scaling_configuration_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        service_id: build.template(std.get(block, 'service_id', null)),
        service_name: build.template(block.service_name),
        service_url: build.template(std.get(block, 'service_url', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      auto_scaling_configuration_arn: resource.field('auto_scaling_configuration_arn'),
      id: resource.field('id'),
      service_id: resource.field('service_id'),
      service_name: resource.field('service_name'),
      service_url: resource.field('service_url'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    apprunner_vpc_connector(name, block): {
      local resource = blockType.resource('aws_apprunner_vpc_connector', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        security_groups: build.template(block.security_groups),
        status: build.template(std.get(block, 'status', null)),
        subnets: build.template(block.subnets),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_connector_name: build.template(block.vpc_connector_name),
        vpc_connector_revision: build.template(std.get(block, 'vpc_connector_revision', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      security_groups: resource.field('security_groups'),
      status: resource.field('status'),
      subnets: resource.field('subnets'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_connector_name: resource.field('vpc_connector_name'),
      vpc_connector_revision: resource.field('vpc_connector_revision'),
    },
    apprunner_vpc_ingress_connection(name, block): {
      local resource = blockType.resource('aws_apprunner_vpc_ingress_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        service_arn: build.template(block.service_arn),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      service_arn: resource.field('service_arn'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appstream_directory_config(name, block): {
      local resource = blockType.resource('aws_appstream_directory_config', name),
      _: resource._(block, {
        created_time: build.template(std.get(block, 'created_time', null)),
        directory_name: build.template(block.directory_name),
        id: build.template(std.get(block, 'id', null)),
        organizational_unit_distinguished_names: build.template(block.organizational_unit_distinguished_names),
      }),
      created_time: resource.field('created_time'),
      directory_name: resource.field('directory_name'),
      id: resource.field('id'),
      organizational_unit_distinguished_names: resource.field('organizational_unit_distinguished_names'),
    },
    appstream_fleet(name, block): {
      local resource = blockType.resource('aws_appstream_fleet', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        description: build.template(std.get(block, 'description', null)),
        disconnect_timeout_in_seconds: build.template(std.get(block, 'disconnect_timeout_in_seconds', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enable_default_internet_access: build.template(std.get(block, 'enable_default_internet_access', null)),
        fleet_type: build.template(std.get(block, 'fleet_type', null)),
        iam_role_arn: build.template(std.get(block, 'iam_role_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_disconnect_timeout_in_seconds: build.template(std.get(block, 'idle_disconnect_timeout_in_seconds', null)),
        image_arn: build.template(std.get(block, 'image_arn', null)),
        image_name: build.template(std.get(block, 'image_name', null)),
        instance_type: build.template(block.instance_type),
        max_sessions_per_instance: build.template(std.get(block, 'max_sessions_per_instance', null)),
        max_user_duration_in_seconds: build.template(std.get(block, 'max_user_duration_in_seconds', null)),
        name: build.template(block.name),
        state: build.template(std.get(block, 'state', null)),
        stream_view: build.template(std.get(block, 'stream_view', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_time: resource.field('created_time'),
      description: resource.field('description'),
      disconnect_timeout_in_seconds: resource.field('disconnect_timeout_in_seconds'),
      display_name: resource.field('display_name'),
      enable_default_internet_access: resource.field('enable_default_internet_access'),
      fleet_type: resource.field('fleet_type'),
      iam_role_arn: resource.field('iam_role_arn'),
      id: resource.field('id'),
      idle_disconnect_timeout_in_seconds: resource.field('idle_disconnect_timeout_in_seconds'),
      image_arn: resource.field('image_arn'),
      image_name: resource.field('image_name'),
      instance_type: resource.field('instance_type'),
      max_sessions_per_instance: resource.field('max_sessions_per_instance'),
      max_user_duration_in_seconds: resource.field('max_user_duration_in_seconds'),
      name: resource.field('name'),
      state: resource.field('state'),
      stream_view: resource.field('stream_view'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appstream_fleet_stack_association(name, block): {
      local resource = blockType.resource('aws_appstream_fleet_stack_association', name),
      _: resource._(block, {
        fleet_name: build.template(block.fleet_name),
        id: build.template(std.get(block, 'id', null)),
        stack_name: build.template(block.stack_name),
      }),
      fleet_name: resource.field('fleet_name'),
      id: resource.field('id'),
      stack_name: resource.field('stack_name'),
    },
    appstream_image_builder(name, block): {
      local resource = blockType.resource('aws_appstream_image_builder', name),
      _: resource._(block, {
        appstream_agent_version: build.template(std.get(block, 'appstream_agent_version', null)),
        arn: build.template(std.get(block, 'arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enable_default_internet_access: build.template(std.get(block, 'enable_default_internet_access', null)),
        iam_role_arn: build.template(std.get(block, 'iam_role_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        image_arn: build.template(std.get(block, 'image_arn', null)),
        image_name: build.template(std.get(block, 'image_name', null)),
        instance_type: build.template(block.instance_type),
        name: build.template(block.name),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      appstream_agent_version: resource.field('appstream_agent_version'),
      arn: resource.field('arn'),
      created_time: resource.field('created_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      enable_default_internet_access: resource.field('enable_default_internet_access'),
      iam_role_arn: resource.field('iam_role_arn'),
      id: resource.field('id'),
      image_arn: resource.field('image_arn'),
      image_name: resource.field('image_name'),
      instance_type: resource.field('instance_type'),
      name: resource.field('name'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appstream_stack(name, block): {
      local resource = blockType.resource('aws_appstream_stack', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        embed_host_domains: build.template(std.get(block, 'embed_host_domains', null)),
        feedback_url: build.template(std.get(block, 'feedback_url', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        redirect_url: build.template(std.get(block, 'redirect_url', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_time: resource.field('created_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      embed_host_domains: resource.field('embed_host_domains'),
      feedback_url: resource.field('feedback_url'),
      id: resource.field('id'),
      name: resource.field('name'),
      redirect_url: resource.field('redirect_url'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    appstream_user(name, block): {
      local resource = blockType.resource('aws_appstream_user', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        authentication_type: build.template(block.authentication_type),
        created_time: build.template(std.get(block, 'created_time', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        first_name: build.template(std.get(block, 'first_name', null)),
        id: build.template(std.get(block, 'id', null)),
        last_name: build.template(std.get(block, 'last_name', null)),
        send_email_notification: build.template(std.get(block, 'send_email_notification', null)),
        user_name: build.template(block.user_name),
      }),
      arn: resource.field('arn'),
      authentication_type: resource.field('authentication_type'),
      created_time: resource.field('created_time'),
      enabled: resource.field('enabled'),
      first_name: resource.field('first_name'),
      id: resource.field('id'),
      last_name: resource.field('last_name'),
      send_email_notification: resource.field('send_email_notification'),
      user_name: resource.field('user_name'),
    },
    appstream_user_stack_association(name, block): {
      local resource = blockType.resource('aws_appstream_user_stack_association', name),
      _: resource._(block, {
        authentication_type: build.template(block.authentication_type),
        id: build.template(std.get(block, 'id', null)),
        send_email_notification: build.template(std.get(block, 'send_email_notification', null)),
        stack_name: build.template(block.stack_name),
        user_name: build.template(block.user_name),
      }),
      authentication_type: resource.field('authentication_type'),
      id: resource.field('id'),
      send_email_notification: resource.field('send_email_notification'),
      stack_name: resource.field('stack_name'),
      user_name: resource.field('user_name'),
    },
    appsync_api_cache(name, block): {
      local resource = blockType.resource('aws_appsync_api_cache', name),
      _: resource._(block, {
        api_caching_behavior: build.template(block.api_caching_behavior),
        api_id: build.template(block.api_id),
        at_rest_encryption_enabled: build.template(std.get(block, 'at_rest_encryption_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        transit_encryption_enabled: build.template(std.get(block, 'transit_encryption_enabled', null)),
        ttl: build.template(block.ttl),
        type: build.template(block.type),
      }),
      api_caching_behavior: resource.field('api_caching_behavior'),
      api_id: resource.field('api_id'),
      at_rest_encryption_enabled: resource.field('at_rest_encryption_enabled'),
      id: resource.field('id'),
      transit_encryption_enabled: resource.field('transit_encryption_enabled'),
      ttl: resource.field('ttl'),
      type: resource.field('type'),
    },
    appsync_api_key(name, block): {
      local resource = blockType.resource('aws_appsync_api_key', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        api_key_id: build.template(std.get(block, 'api_key_id', null)),
        description: build.template(std.get(block, 'description', null)),
        expires: build.template(std.get(block, 'expires', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
      }),
      api_id: resource.field('api_id'),
      api_key_id: resource.field('api_key_id'),
      description: resource.field('description'),
      expires: resource.field('expires'),
      id: resource.field('id'),
      key: resource.field('key'),
    },
    appsync_datasource(name, block): {
      local resource = blockType.resource('aws_appsync_datasource', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        service_role_arn: build.template(std.get(block, 'service_role_arn', null)),
        type: build.template(block.type),
      }),
      api_id: resource.field('api_id'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      service_role_arn: resource.field('service_role_arn'),
      type: resource.field('type'),
    },
    appsync_domain_name(name, block): {
      local resource = blockType.resource('aws_appsync_domain_name', name),
      _: resource._(block, {
        appsync_domain_name: build.template(std.get(block, 'appsync_domain_name', null)),
        certificate_arn: build.template(block.certificate_arn),
        description: build.template(std.get(block, 'description', null)),
        domain_name: build.template(block.domain_name),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      appsync_domain_name: resource.field('appsync_domain_name'),
      certificate_arn: resource.field('certificate_arn'),
      description: resource.field('description'),
      domain_name: resource.field('domain_name'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      id: resource.field('id'),
    },
    appsync_domain_name_api_association(name, block): {
      local resource = blockType.resource('aws_appsync_domain_name_api_association', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      api_id: resource.field('api_id'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
    },
    appsync_function(name, block): {
      local resource = blockType.resource('aws_appsync_function', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        arn: build.template(std.get(block, 'arn', null)),
        code: build.template(std.get(block, 'code', null)),
        data_source: build.template(block.data_source),
        description: build.template(std.get(block, 'description', null)),
        function_id: build.template(std.get(block, 'function_id', null)),
        function_version: build.template(std.get(block, 'function_version', null)),
        id: build.template(std.get(block, 'id', null)),
        max_batch_size: build.template(std.get(block, 'max_batch_size', null)),
        name: build.template(block.name),
        request_mapping_template: build.template(std.get(block, 'request_mapping_template', null)),
        response_mapping_template: build.template(std.get(block, 'response_mapping_template', null)),
      }),
      api_id: resource.field('api_id'),
      arn: resource.field('arn'),
      code: resource.field('code'),
      data_source: resource.field('data_source'),
      description: resource.field('description'),
      function_id: resource.field('function_id'),
      function_version: resource.field('function_version'),
      id: resource.field('id'),
      max_batch_size: resource.field('max_batch_size'),
      name: resource.field('name'),
      request_mapping_template: resource.field('request_mapping_template'),
      response_mapping_template: resource.field('response_mapping_template'),
    },
    appsync_graphql_api(name, block): {
      local resource = blockType.resource('aws_appsync_graphql_api', name),
      _: resource._(block, {
        api_type: build.template(std.get(block, 'api_type', null)),
        arn: build.template(std.get(block, 'arn', null)),
        authentication_type: build.template(block.authentication_type),
        id: build.template(std.get(block, 'id', null)),
        introspection_config: build.template(std.get(block, 'introspection_config', null)),
        merged_api_execution_role_arn: build.template(std.get(block, 'merged_api_execution_role_arn', null)),
        name: build.template(block.name),
        query_depth_limit: build.template(std.get(block, 'query_depth_limit', null)),
        resolver_count_limit: build.template(std.get(block, 'resolver_count_limit', null)),
        schema: build.template(std.get(block, 'schema', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uris: build.template(std.get(block, 'uris', null)),
        visibility: build.template(std.get(block, 'visibility', null)),
        xray_enabled: build.template(std.get(block, 'xray_enabled', null)),
      }),
      api_type: resource.field('api_type'),
      arn: resource.field('arn'),
      authentication_type: resource.field('authentication_type'),
      id: resource.field('id'),
      introspection_config: resource.field('introspection_config'),
      merged_api_execution_role_arn: resource.field('merged_api_execution_role_arn'),
      name: resource.field('name'),
      query_depth_limit: resource.field('query_depth_limit'),
      resolver_count_limit: resource.field('resolver_count_limit'),
      schema: resource.field('schema'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uris: resource.field('uris'),
      visibility: resource.field('visibility'),
      xray_enabled: resource.field('xray_enabled'),
    },
    appsync_resolver(name, block): {
      local resource = blockType.resource('aws_appsync_resolver', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        arn: build.template(std.get(block, 'arn', null)),
        code: build.template(std.get(block, 'code', null)),
        data_source: build.template(std.get(block, 'data_source', null)),
        field: build.template(block.field),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        max_batch_size: build.template(std.get(block, 'max_batch_size', null)),
        request_template: build.template(std.get(block, 'request_template', null)),
        response_template: build.template(std.get(block, 'response_template', null)),
        type: build.template(block.type),
      }),
      api_id: resource.field('api_id'),
      arn: resource.field('arn'),
      code: resource.field('code'),
      data_source: resource.field('data_source'),
      field: resource.field('field'),
      id: resource.field('id'),
      kind: resource.field('kind'),
      max_batch_size: resource.field('max_batch_size'),
      request_template: resource.field('request_template'),
      response_template: resource.field('response_template'),
      type: resource.field('type'),
    },
    appsync_source_api_association(name, block): {
      local resource = blockType.resource('aws_appsync_source_api_association', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        association_id: build.template(std.get(block, 'association_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        merged_api_arn: build.template(std.get(block, 'merged_api_arn', null)),
        merged_api_id: build.template(std.get(block, 'merged_api_id', null)),
        source_api_arn: build.template(std.get(block, 'source_api_arn', null)),
        source_api_association_config: build.template(std.get(block, 'source_api_association_config', null)),
        source_api_id: build.template(std.get(block, 'source_api_id', null)),
      }),
      arn: resource.field('arn'),
      association_id: resource.field('association_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      merged_api_arn: resource.field('merged_api_arn'),
      merged_api_id: resource.field('merged_api_id'),
      source_api_arn: resource.field('source_api_arn'),
      source_api_association_config: resource.field('source_api_association_config'),
      source_api_id: resource.field('source_api_id'),
    },
    appsync_type(name, block): {
      local resource = blockType.resource('aws_appsync_type', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        arn: build.template(std.get(block, 'arn', null)),
        definition: build.template(block.definition),
        description: build.template(std.get(block, 'description', null)),
        format: build.template(block.format),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      api_id: resource.field('api_id'),
      arn: resource.field('arn'),
      definition: resource.field('definition'),
      description: resource.field('description'),
      format: resource.field('format'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    athena_data_catalog(name, block): {
      local resource = blockType.resource('aws_athena_data_catalog', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(block.description),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parameters: build.template(block.parameters),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      parameters: resource.field('parameters'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    athena_database(name, block): {
      local resource = blockType.resource('aws_athena_database', name),
      _: resource._(block, {
        bucket: build.template(std.get(block, 'bucket', null)),
        comment: build.template(std.get(block, 'comment', null)),
        expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        properties: build.template(std.get(block, 'properties', null)),
      }),
      bucket: resource.field('bucket'),
      comment: resource.field('comment'),
      expected_bucket_owner: resource.field('expected_bucket_owner'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      name: resource.field('name'),
      properties: resource.field('properties'),
    },
    athena_named_query(name, block): {
      local resource = blockType.resource('aws_athena_named_query', name),
      _: resource._(block, {
        database: build.template(block.database),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        query: build.template(block.query),
        workgroup: build.template(std.get(block, 'workgroup', null)),
      }),
      database: resource.field('database'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      query: resource.field('query'),
      workgroup: resource.field('workgroup'),
    },
    athena_prepared_statement(name, block): {
      local resource = blockType.resource('aws_athena_prepared_statement', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        query_statement: build.template(block.query_statement),
        workgroup: build.template(block.workgroup),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      query_statement: resource.field('query_statement'),
      workgroup: resource.field('workgroup'),
    },
    athena_workgroup(name, block): {
      local resource = blockType.resource('aws_athena_workgroup', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      name: resource.field('name'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    auditmanager_account_registration(name, block): {
      local resource = blockType.resource('aws_auditmanager_account_registration', name),
      _: resource._(block, {
        delegated_admin_account: build.template(std.get(block, 'delegated_admin_account', null)),
        deregister_on_destroy: build.template(std.get(block, 'deregister_on_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key: build.template(std.get(block, 'kms_key', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      delegated_admin_account: resource.field('delegated_admin_account'),
      deregister_on_destroy: resource.field('deregister_on_destroy'),
      id: resource.field('id'),
      kms_key: resource.field('kms_key'),
      status: resource.field('status'),
    },
    auditmanager_assessment(name, block): {
      local resource = blockType.resource('aws_auditmanager_assessment', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        framework_id: build.template(block.framework_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        roles: build.template(block.roles),
        roles_all: build.template(std.get(block, 'roles_all', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      framework_id: resource.field('framework_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      roles: resource.field('roles'),
      roles_all: resource.field('roles_all'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    auditmanager_assessment_delegation(name, block): {
      local resource = blockType.resource('aws_auditmanager_assessment_delegation', name),
      _: resource._(block, {
        assessment_id: build.template(block.assessment_id),
        comment: build.template(std.get(block, 'comment', null)),
        control_set_id: build.template(block.control_set_id),
        delegation_id: build.template(std.get(block, 'delegation_id', null)),
        id: build.template(std.get(block, 'id', null)),
        role_arn: build.template(block.role_arn),
        role_type: build.template(block.role_type),
        status: build.template(std.get(block, 'status', null)),
      }),
      assessment_id: resource.field('assessment_id'),
      comment: resource.field('comment'),
      control_set_id: resource.field('control_set_id'),
      delegation_id: resource.field('delegation_id'),
      id: resource.field('id'),
      role_arn: resource.field('role_arn'),
      role_type: resource.field('role_type'),
      status: resource.field('status'),
    },
    auditmanager_assessment_report(name, block): {
      local resource = blockType.resource('aws_auditmanager_assessment_report', name),
      _: resource._(block, {
        assessment_id: build.template(block.assessment_id),
        author: build.template(std.get(block, 'author', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
      }),
      assessment_id: resource.field('assessment_id'),
      author: resource.field('author'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
    },
    auditmanager_control(name, block): {
      local resource = blockType.resource('aws_auditmanager_control', name),
      _: resource._(block, {
        action_plan_instructions: build.template(std.get(block, 'action_plan_instructions', null)),
        action_plan_title: build.template(std.get(block, 'action_plan_title', null)),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        testing_information: build.template(std.get(block, 'testing_information', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      action_plan_instructions: resource.field('action_plan_instructions'),
      action_plan_title: resource.field('action_plan_title'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      testing_information: resource.field('testing_information'),
      type: resource.field('type'),
    },
    auditmanager_framework(name, block): {
      local resource = blockType.resource('aws_auditmanager_framework', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        compliance_type: build.template(std.get(block, 'compliance_type', null)),
        description: build.template(std.get(block, 'description', null)),
        framework_type: build.template(std.get(block, 'framework_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      compliance_type: resource.field('compliance_type'),
      description: resource.field('description'),
      framework_type: resource.field('framework_type'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    auditmanager_framework_share(name, block): {
      local resource = blockType.resource('aws_auditmanager_framework_share', name),
      _: resource._(block, {
        comment: build.template(std.get(block, 'comment', null)),
        destination_account: build.template(block.destination_account),
        destination_region: build.template(block.destination_region),
        framework_id: build.template(block.framework_id),
        id: build.template(std.get(block, 'id', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      comment: resource.field('comment'),
      destination_account: resource.field('destination_account'),
      destination_region: resource.field('destination_region'),
      framework_id: resource.field('framework_id'),
      id: resource.field('id'),
      status: resource.field('status'),
    },
    auditmanager_organization_admin_account_registration(name, block): {
      local resource = blockType.resource('aws_auditmanager_organization_admin_account_registration', name),
      _: resource._(block, {
        admin_account_id: build.template(block.admin_account_id),
        id: build.template(std.get(block, 'id', null)),
        organization_id: build.template(std.get(block, 'organization_id', null)),
      }),
      admin_account_id: resource.field('admin_account_id'),
      id: resource.field('id'),
      organization_id: resource.field('organization_id'),
    },
    autoscaling_attachment(name, block): {
      local resource = blockType.resource('aws_autoscaling_attachment', name),
      _: resource._(block, {
        autoscaling_group_name: build.template(block.autoscaling_group_name),
        elb: build.template(std.get(block, 'elb', null)),
        id: build.template(std.get(block, 'id', null)),
        lb_target_group_arn: build.template(std.get(block, 'lb_target_group_arn', null)),
      }),
      autoscaling_group_name: resource.field('autoscaling_group_name'),
      elb: resource.field('elb'),
      id: resource.field('id'),
      lb_target_group_arn: resource.field('lb_target_group_arn'),
    },
    autoscaling_group(name, block): {
      local resource = blockType.resource('aws_autoscaling_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        capacity_rebalance: build.template(std.get(block, 'capacity_rebalance', null)),
        context: build.template(std.get(block, 'context', null)),
        default_cooldown: build.template(std.get(block, 'default_cooldown', null)),
        default_instance_warmup: build.template(std.get(block, 'default_instance_warmup', null)),
        desired_capacity: build.template(std.get(block, 'desired_capacity', null)),
        desired_capacity_type: build.template(std.get(block, 'desired_capacity_type', null)),
        enabled_metrics: build.template(std.get(block, 'enabled_metrics', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        force_delete_warm_pool: build.template(std.get(block, 'force_delete_warm_pool', null)),
        health_check_grace_period: build.template(std.get(block, 'health_check_grace_period', null)),
        health_check_type: build.template(std.get(block, 'health_check_type', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_failed_scaling_activities: build.template(std.get(block, 'ignore_failed_scaling_activities', null)),
        launch_configuration: build.template(std.get(block, 'launch_configuration', null)),
        load_balancers: build.template(std.get(block, 'load_balancers', null)),
        max_instance_lifetime: build.template(std.get(block, 'max_instance_lifetime', null)),
        max_size: build.template(block.max_size),
        metrics_granularity: build.template(std.get(block, 'metrics_granularity', null)),
        min_elb_capacity: build.template(std.get(block, 'min_elb_capacity', null)),
        min_size: build.template(block.min_size),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        placement_group: build.template(std.get(block, 'placement_group', null)),
        predicted_capacity: build.template(std.get(block, 'predicted_capacity', null)),
        protect_from_scale_in: build.template(std.get(block, 'protect_from_scale_in', null)),
        service_linked_role_arn: build.template(std.get(block, 'service_linked_role_arn', null)),
        suspended_processes: build.template(std.get(block, 'suspended_processes', null)),
        target_group_arns: build.template(std.get(block, 'target_group_arns', null)),
        termination_policies: build.template(std.get(block, 'termination_policies', null)),
        vpc_zone_identifier: build.template(std.get(block, 'vpc_zone_identifier', null)),
        wait_for_capacity_timeout: build.template(std.get(block, 'wait_for_capacity_timeout', null)),
        wait_for_elb_capacity: build.template(std.get(block, 'wait_for_elb_capacity', null)),
        warm_pool_size: build.template(std.get(block, 'warm_pool_size', null)),
      }),
      arn: resource.field('arn'),
      availability_zones: resource.field('availability_zones'),
      capacity_rebalance: resource.field('capacity_rebalance'),
      context: resource.field('context'),
      default_cooldown: resource.field('default_cooldown'),
      default_instance_warmup: resource.field('default_instance_warmup'),
      desired_capacity: resource.field('desired_capacity'),
      desired_capacity_type: resource.field('desired_capacity_type'),
      enabled_metrics: resource.field('enabled_metrics'),
      force_delete: resource.field('force_delete'),
      force_delete_warm_pool: resource.field('force_delete_warm_pool'),
      health_check_grace_period: resource.field('health_check_grace_period'),
      health_check_type: resource.field('health_check_type'),
      id: resource.field('id'),
      ignore_failed_scaling_activities: resource.field('ignore_failed_scaling_activities'),
      launch_configuration: resource.field('launch_configuration'),
      load_balancers: resource.field('load_balancers'),
      max_instance_lifetime: resource.field('max_instance_lifetime'),
      max_size: resource.field('max_size'),
      metrics_granularity: resource.field('metrics_granularity'),
      min_elb_capacity: resource.field('min_elb_capacity'),
      min_size: resource.field('min_size'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      placement_group: resource.field('placement_group'),
      predicted_capacity: resource.field('predicted_capacity'),
      protect_from_scale_in: resource.field('protect_from_scale_in'),
      service_linked_role_arn: resource.field('service_linked_role_arn'),
      suspended_processes: resource.field('suspended_processes'),
      target_group_arns: resource.field('target_group_arns'),
      termination_policies: resource.field('termination_policies'),
      vpc_zone_identifier: resource.field('vpc_zone_identifier'),
      wait_for_capacity_timeout: resource.field('wait_for_capacity_timeout'),
      wait_for_elb_capacity: resource.field('wait_for_elb_capacity'),
      warm_pool_size: resource.field('warm_pool_size'),
    },
    autoscaling_group_tag(name, block): {
      local resource = blockType.resource('aws_autoscaling_group_tag', name),
      _: resource._(block, {
        autoscaling_group_name: build.template(block.autoscaling_group_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      autoscaling_group_name: resource.field('autoscaling_group_name'),
      id: resource.field('id'),
    },
    autoscaling_lifecycle_hook(name, block): {
      local resource = blockType.resource('aws_autoscaling_lifecycle_hook', name),
      _: resource._(block, {
        autoscaling_group_name: build.template(block.autoscaling_group_name),
        default_result: build.template(std.get(block, 'default_result', null)),
        heartbeat_timeout: build.template(std.get(block, 'heartbeat_timeout', null)),
        id: build.template(std.get(block, 'id', null)),
        lifecycle_transition: build.template(block.lifecycle_transition),
        name: build.template(block.name),
        notification_metadata: build.template(std.get(block, 'notification_metadata', null)),
        notification_target_arn: build.template(std.get(block, 'notification_target_arn', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
      }),
      autoscaling_group_name: resource.field('autoscaling_group_name'),
      default_result: resource.field('default_result'),
      heartbeat_timeout: resource.field('heartbeat_timeout'),
      id: resource.field('id'),
      lifecycle_transition: resource.field('lifecycle_transition'),
      name: resource.field('name'),
      notification_metadata: resource.field('notification_metadata'),
      notification_target_arn: resource.field('notification_target_arn'),
      role_arn: resource.field('role_arn'),
    },
    autoscaling_notification(name, block): {
      local resource = blockType.resource('aws_autoscaling_notification', name),
      _: resource._(block, {
        group_names: build.template(block.group_names),
        id: build.template(std.get(block, 'id', null)),
        notifications: build.template(block.notifications),
        topic_arn: build.template(block.topic_arn),
      }),
      group_names: resource.field('group_names'),
      id: resource.field('id'),
      notifications: resource.field('notifications'),
      topic_arn: resource.field('topic_arn'),
    },
    autoscaling_policy(name, block): {
      local resource = blockType.resource('aws_autoscaling_policy', name),
      _: resource._(block, {
        adjustment_type: build.template(std.get(block, 'adjustment_type', null)),
        arn: build.template(std.get(block, 'arn', null)),
        autoscaling_group_name: build.template(block.autoscaling_group_name),
        cooldown: build.template(std.get(block, 'cooldown', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        estimated_instance_warmup: build.template(std.get(block, 'estimated_instance_warmup', null)),
        id: build.template(std.get(block, 'id', null)),
        metric_aggregation_type: build.template(std.get(block, 'metric_aggregation_type', null)),
        min_adjustment_magnitude: build.template(std.get(block, 'min_adjustment_magnitude', null)),
        name: build.template(block.name),
        policy_type: build.template(std.get(block, 'policy_type', null)),
        scaling_adjustment: build.template(std.get(block, 'scaling_adjustment', null)),
      }),
      adjustment_type: resource.field('adjustment_type'),
      arn: resource.field('arn'),
      autoscaling_group_name: resource.field('autoscaling_group_name'),
      cooldown: resource.field('cooldown'),
      enabled: resource.field('enabled'),
      estimated_instance_warmup: resource.field('estimated_instance_warmup'),
      id: resource.field('id'),
      metric_aggregation_type: resource.field('metric_aggregation_type'),
      min_adjustment_magnitude: resource.field('min_adjustment_magnitude'),
      name: resource.field('name'),
      policy_type: resource.field('policy_type'),
      scaling_adjustment: resource.field('scaling_adjustment'),
    },
    autoscaling_schedule(name, block): {
      local resource = blockType.resource('aws_autoscaling_schedule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        autoscaling_group_name: build.template(block.autoscaling_group_name),
        desired_capacity: build.template(std.get(block, 'desired_capacity', null)),
        end_time: build.template(std.get(block, 'end_time', null)),
        id: build.template(std.get(block, 'id', null)),
        max_size: build.template(std.get(block, 'max_size', null)),
        min_size: build.template(std.get(block, 'min_size', null)),
        recurrence: build.template(std.get(block, 'recurrence', null)),
        scheduled_action_name: build.template(block.scheduled_action_name),
        start_time: build.template(std.get(block, 'start_time', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
      }),
      arn: resource.field('arn'),
      autoscaling_group_name: resource.field('autoscaling_group_name'),
      desired_capacity: resource.field('desired_capacity'),
      end_time: resource.field('end_time'),
      id: resource.field('id'),
      max_size: resource.field('max_size'),
      min_size: resource.field('min_size'),
      recurrence: resource.field('recurrence'),
      scheduled_action_name: resource.field('scheduled_action_name'),
      start_time: resource.field('start_time'),
      time_zone: resource.field('time_zone'),
    },
    autoscaling_traffic_source_attachment(name, block): {
      local resource = blockType.resource('aws_autoscaling_traffic_source_attachment', name),
      _: resource._(block, {
        autoscaling_group_name: build.template(block.autoscaling_group_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      autoscaling_group_name: resource.field('autoscaling_group_name'),
      id: resource.field('id'),
    },
    autoscalingplans_scaling_plan(name, block): {
      local resource = blockType.resource('aws_autoscalingplans_scaling_plan', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        scaling_plan_version: build.template(std.get(block, 'scaling_plan_version', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      scaling_plan_version: resource.field('scaling_plan_version'),
    },
    backup_framework(name, block): {
      local resource = blockType.resource('aws_backup_framework', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        deployment_status: build.template(std.get(block, 'deployment_status', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      deployment_status: resource.field('deployment_status'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    backup_global_settings(name, block): {
      local resource = blockType.resource('aws_backup_global_settings', name),
      _: resource._(block, {
        global_settings: build.template(block.global_settings),
        id: build.template(std.get(block, 'id', null)),
      }),
      global_settings: resource.field('global_settings'),
      id: resource.field('id'),
    },
    backup_logically_air_gapped_vault(name, block): {
      local resource = blockType.resource('aws_backup_logically_air_gapped_vault', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        max_retention_days: build.template(block.max_retention_days),
        min_retention_days: build.template(block.min_retention_days),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      max_retention_days: resource.field('max_retention_days'),
      min_retention_days: resource.field('min_retention_days'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    backup_plan(name, block): {
      local resource = blockType.resource('aws_backup_plan', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    backup_region_settings(name, block): {
      local resource = blockType.resource('aws_backup_region_settings', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        resource_type_management_preference: build.template(std.get(block, 'resource_type_management_preference', null)),
        resource_type_opt_in_preference: build.template(block.resource_type_opt_in_preference),
      }),
      id: resource.field('id'),
      resource_type_management_preference: resource.field('resource_type_management_preference'),
      resource_type_opt_in_preference: resource.field('resource_type_opt_in_preference'),
    },
    backup_report_plan(name, block): {
      local resource = blockType.resource('aws_backup_report_plan', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        deployment_status: build.template(std.get(block, 'deployment_status', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      deployment_status: resource.field('deployment_status'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    backup_restore_testing_plan(name, block): {
      local resource = blockType.resource('aws_backup_restore_testing_plan', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        name: build.template(block.name),
        schedule_expression: build.template(block.schedule_expression),
        schedule_expression_timezone: build.template(std.get(block, 'schedule_expression_timezone', null)),
        start_window_hours: build.template(std.get(block, 'start_window_hours', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      name: resource.field('name'),
      schedule_expression: resource.field('schedule_expression'),
      schedule_expression_timezone: resource.field('schedule_expression_timezone'),
      start_window_hours: resource.field('start_window_hours'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    backup_restore_testing_selection(name, block): {
      local resource = blockType.resource('aws_backup_restore_testing_selection', name),
      _: resource._(block, {
        iam_role_arn: build.template(block.iam_role_arn),
        name: build.template(block.name),
        protected_resource_arns: build.template(std.get(block, 'protected_resource_arns', null)),
        protected_resource_type: build.template(block.protected_resource_type),
        restore_metadata_overrides: build.template(std.get(block, 'restore_metadata_overrides', null)),
        restore_testing_plan_name: build.template(block.restore_testing_plan_name),
        validation_window_hours: build.template(std.get(block, 'validation_window_hours', null)),
      }),
      iam_role_arn: resource.field('iam_role_arn'),
      name: resource.field('name'),
      protected_resource_arns: resource.field('protected_resource_arns'),
      protected_resource_type: resource.field('protected_resource_type'),
      restore_metadata_overrides: resource.field('restore_metadata_overrides'),
      restore_testing_plan_name: resource.field('restore_testing_plan_name'),
      validation_window_hours: resource.field('validation_window_hours'),
    },
    backup_selection(name, block): {
      local resource = blockType.resource('aws_backup_selection', name),
      _: resource._(block, {
        iam_role_arn: build.template(block.iam_role_arn),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        not_resources: build.template(std.get(block, 'not_resources', null)),
        plan_id: build.template(block.plan_id),
        resources: build.template(std.get(block, 'resources', null)),
      }),
      iam_role_arn: resource.field('iam_role_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      not_resources: resource.field('not_resources'),
      plan_id: resource.field('plan_id'),
      resources: resource.field('resources'),
    },
    backup_vault(name, block): {
      local resource = blockType.resource('aws_backup_vault', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        name: build.template(block.name),
        recovery_points: build.template(std.get(block, 'recovery_points', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      name: resource.field('name'),
      recovery_points: resource.field('recovery_points'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    backup_vault_lock_configuration(name, block): {
      local resource = blockType.resource('aws_backup_vault_lock_configuration', name),
      _: resource._(block, {
        backup_vault_arn: build.template(std.get(block, 'backup_vault_arn', null)),
        backup_vault_name: build.template(block.backup_vault_name),
        changeable_for_days: build.template(std.get(block, 'changeable_for_days', null)),
        id: build.template(std.get(block, 'id', null)),
        max_retention_days: build.template(std.get(block, 'max_retention_days', null)),
        min_retention_days: build.template(std.get(block, 'min_retention_days', null)),
      }),
      backup_vault_arn: resource.field('backup_vault_arn'),
      backup_vault_name: resource.field('backup_vault_name'),
      changeable_for_days: resource.field('changeable_for_days'),
      id: resource.field('id'),
      max_retention_days: resource.field('max_retention_days'),
      min_retention_days: resource.field('min_retention_days'),
    },
    backup_vault_notifications(name, block): {
      local resource = blockType.resource('aws_backup_vault_notifications', name),
      _: resource._(block, {
        backup_vault_arn: build.template(std.get(block, 'backup_vault_arn', null)),
        backup_vault_events: build.template(block.backup_vault_events),
        backup_vault_name: build.template(block.backup_vault_name),
        id: build.template(std.get(block, 'id', null)),
        sns_topic_arn: build.template(block.sns_topic_arn),
      }),
      backup_vault_arn: resource.field('backup_vault_arn'),
      backup_vault_events: resource.field('backup_vault_events'),
      backup_vault_name: resource.field('backup_vault_name'),
      id: resource.field('id'),
      sns_topic_arn: resource.field('sns_topic_arn'),
    },
    backup_vault_policy(name, block): {
      local resource = blockType.resource('aws_backup_vault_policy', name),
      _: resource._(block, {
        backup_vault_arn: build.template(std.get(block, 'backup_vault_arn', null)),
        backup_vault_name: build.template(block.backup_vault_name),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
      }),
      backup_vault_arn: resource.field('backup_vault_arn'),
      backup_vault_name: resource.field('backup_vault_name'),
      id: resource.field('id'),
      policy: resource.field('policy'),
    },
    batch_compute_environment(name, block): {
      local resource = blockType.resource('aws_batch_compute_environment', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        compute_environment_name: build.template(std.get(block, 'compute_environment_name', null)),
        compute_environment_name_prefix: build.template(std.get(block, 'compute_environment_name_prefix', null)),
        ecs_cluster_arn: build.template(std.get(block, 'ecs_cluster_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        service_role: build.template(std.get(block, 'service_role', null)),
        state: build.template(std.get(block, 'state', null)),
        status: build.template(std.get(block, 'status', null)),
        status_reason: build.template(std.get(block, 'status_reason', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      compute_environment_name: resource.field('compute_environment_name'),
      compute_environment_name_prefix: resource.field('compute_environment_name_prefix'),
      ecs_cluster_arn: resource.field('ecs_cluster_arn'),
      id: resource.field('id'),
      service_role: resource.field('service_role'),
      state: resource.field('state'),
      status: resource.field('status'),
      status_reason: resource.field('status_reason'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    batch_job_definition(name, block): {
      local resource = blockType.resource('aws_batch_job_definition', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        arn_prefix: build.template(std.get(block, 'arn_prefix', null)),
        container_properties: build.template(std.get(block, 'container_properties', null)),
        deregister_on_new_revision: build.template(std.get(block, 'deregister_on_new_revision', null)),
        ecs_properties: build.template(std.get(block, 'ecs_properties', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        node_properties: build.template(std.get(block, 'node_properties', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        platform_capabilities: build.template(std.get(block, 'platform_capabilities', null)),
        propagate_tags: build.template(std.get(block, 'propagate_tags', null)),
        revision: build.template(std.get(block, 'revision', null)),
        scheduling_priority: build.template(std.get(block, 'scheduling_priority', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      arn_prefix: resource.field('arn_prefix'),
      container_properties: resource.field('container_properties'),
      deregister_on_new_revision: resource.field('deregister_on_new_revision'),
      ecs_properties: resource.field('ecs_properties'),
      id: resource.field('id'),
      name: resource.field('name'),
      node_properties: resource.field('node_properties'),
      parameters: resource.field('parameters'),
      platform_capabilities: resource.field('platform_capabilities'),
      propagate_tags: resource.field('propagate_tags'),
      revision: resource.field('revision'),
      scheduling_priority: resource.field('scheduling_priority'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    batch_job_queue(name, block): {
      local resource = blockType.resource('aws_batch_job_queue', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        compute_environments: build.template(std.get(block, 'compute_environments', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        priority: build.template(block.priority),
        scheduling_policy_arn: build.template(std.get(block, 'scheduling_policy_arn', null)),
        state: build.template(block.state),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      compute_environments: resource.field('compute_environments'),
      id: resource.field('id'),
      name: resource.field('name'),
      priority: resource.field('priority'),
      scheduling_policy_arn: resource.field('scheduling_policy_arn'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    batch_scheduling_policy(name, block): {
      local resource = blockType.resource('aws_batch_scheduling_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    bcmdataexports_export(name, block): {
      local resource = blockType.resource('aws_bcmdataexports_export', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    bedrock_custom_model(name, block): {
      local resource = blockType.resource('aws_bedrock_custom_model', name),
      _: resource._(block, {
        base_model_identifier: build.template(block.base_model_identifier),
        custom_model_arn: build.template(std.get(block, 'custom_model_arn', null)),
        custom_model_kms_key_id: build.template(std.get(block, 'custom_model_kms_key_id', null)),
        custom_model_name: build.template(block.custom_model_name),
        customization_type: build.template(std.get(block, 'customization_type', null)),
        hyperparameters: build.template(block.hyperparameters),
        id: build.template(std.get(block, 'id', null)),
        job_arn: build.template(std.get(block, 'job_arn', null)),
        job_name: build.template(block.job_name),
        job_status: build.template(std.get(block, 'job_status', null)),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        training_metrics: build.template(std.get(block, 'training_metrics', null)),
        validation_metrics: build.template(std.get(block, 'validation_metrics', null)),
      }),
      base_model_identifier: resource.field('base_model_identifier'),
      custom_model_arn: resource.field('custom_model_arn'),
      custom_model_kms_key_id: resource.field('custom_model_kms_key_id'),
      custom_model_name: resource.field('custom_model_name'),
      customization_type: resource.field('customization_type'),
      hyperparameters: resource.field('hyperparameters'),
      id: resource.field('id'),
      job_arn: resource.field('job_arn'),
      job_name: resource.field('job_name'),
      job_status: resource.field('job_status'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      training_metrics: resource.field('training_metrics'),
      validation_metrics: resource.field('validation_metrics'),
    },
    bedrock_guardrail(name, block): {
      local resource = blockType.resource('aws_bedrock_guardrail', name),
      _: resource._(block, {
        blocked_input_messaging: build.template(block.blocked_input_messaging),
        blocked_outputs_messaging: build.template(block.blocked_outputs_messaging),
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        guardrail_arn: build.template(std.get(block, 'guardrail_arn', null)),
        guardrail_id: build.template(std.get(block, 'guardrail_id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      blocked_input_messaging: resource.field('blocked_input_messaging'),
      blocked_outputs_messaging: resource.field('blocked_outputs_messaging'),
      created_at: resource.field('created_at'),
      description: resource.field('description'),
      guardrail_arn: resource.field('guardrail_arn'),
      guardrail_id: resource.field('guardrail_id'),
      kms_key_arn: resource.field('kms_key_arn'),
      name: resource.field('name'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    bedrock_guardrail_version(name, block): {
      local resource = blockType.resource('aws_bedrock_guardrail_version', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        guardrail_arn: build.template(block.guardrail_arn),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      description: resource.field('description'),
      guardrail_arn: resource.field('guardrail_arn'),
      skip_destroy: resource.field('skip_destroy'),
      version: resource.field('version'),
    },
    bedrock_model_invocation_logging_configuration(name, block): {
      local resource = blockType.resource('aws_bedrock_model_invocation_logging_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    bedrock_provisioned_model_throughput(name, block): {
      local resource = blockType.resource('aws_bedrock_provisioned_model_throughput', name),
      _: resource._(block, {
        commitment_duration: build.template(std.get(block, 'commitment_duration', null)),
        id: build.template(std.get(block, 'id', null)),
        model_arn: build.template(block.model_arn),
        model_units: build.template(block.model_units),
        provisioned_model_arn: build.template(std.get(block, 'provisioned_model_arn', null)),
        provisioned_model_name: build.template(block.provisioned_model_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      commitment_duration: resource.field('commitment_duration'),
      id: resource.field('id'),
      model_arn: resource.field('model_arn'),
      model_units: resource.field('model_units'),
      provisioned_model_arn: resource.field('provisioned_model_arn'),
      provisioned_model_name: resource.field('provisioned_model_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    bedrockagent_agent(name, block): {
      local resource = blockType.resource('aws_bedrockagent_agent', name),
      _: resource._(block, {
        agent_arn: build.template(std.get(block, 'agent_arn', null)),
        agent_id: build.template(std.get(block, 'agent_id', null)),
        agent_name: build.template(block.agent_name),
        agent_resource_role_arn: build.template(block.agent_resource_role_arn),
        agent_version: build.template(std.get(block, 'agent_version', null)),
        customer_encryption_key_arn: build.template(std.get(block, 'customer_encryption_key_arn', null)),
        description: build.template(std.get(block, 'description', null)),
        foundation_model: build.template(block.foundation_model),
        guardrail_configuration: build.template(std.get(block, 'guardrail_configuration', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_session_ttl_in_seconds: build.template(std.get(block, 'idle_session_ttl_in_seconds', null)),
        instruction: build.template(std.get(block, 'instruction', null)),
        prepare_agent: build.template(std.get(block, 'prepare_agent', null)),
        prompt_override_configuration: build.template(std.get(block, 'prompt_override_configuration', null)),
        skip_resource_in_use_check: build.template(std.get(block, 'skip_resource_in_use_check', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      agent_arn: resource.field('agent_arn'),
      agent_id: resource.field('agent_id'),
      agent_name: resource.field('agent_name'),
      agent_resource_role_arn: resource.field('agent_resource_role_arn'),
      agent_version: resource.field('agent_version'),
      customer_encryption_key_arn: resource.field('customer_encryption_key_arn'),
      description: resource.field('description'),
      foundation_model: resource.field('foundation_model'),
      guardrail_configuration: resource.field('guardrail_configuration'),
      id: resource.field('id'),
      idle_session_ttl_in_seconds: resource.field('idle_session_ttl_in_seconds'),
      instruction: resource.field('instruction'),
      prepare_agent: resource.field('prepare_agent'),
      prompt_override_configuration: resource.field('prompt_override_configuration'),
      skip_resource_in_use_check: resource.field('skip_resource_in_use_check'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    bedrockagent_agent_action_group(name, block): {
      local resource = blockType.resource('aws_bedrockagent_agent_action_group', name),
      _: resource._(block, {
        action_group_id: build.template(std.get(block, 'action_group_id', null)),
        action_group_name: build.template(block.action_group_name),
        action_group_state: build.template(std.get(block, 'action_group_state', null)),
        agent_id: build.template(block.agent_id),
        agent_version: build.template(block.agent_version),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        parent_action_group_signature: build.template(std.get(block, 'parent_action_group_signature', null)),
        prepare_agent: build.template(std.get(block, 'prepare_agent', null)),
        skip_resource_in_use_check: build.template(std.get(block, 'skip_resource_in_use_check', null)),
      }),
      action_group_id: resource.field('action_group_id'),
      action_group_name: resource.field('action_group_name'),
      action_group_state: resource.field('action_group_state'),
      agent_id: resource.field('agent_id'),
      agent_version: resource.field('agent_version'),
      description: resource.field('description'),
      id: resource.field('id'),
      parent_action_group_signature: resource.field('parent_action_group_signature'),
      prepare_agent: resource.field('prepare_agent'),
      skip_resource_in_use_check: resource.field('skip_resource_in_use_check'),
    },
    bedrockagent_agent_alias(name, block): {
      local resource = blockType.resource('aws_bedrockagent_agent_alias', name),
      _: resource._(block, {
        agent_alias_arn: build.template(std.get(block, 'agent_alias_arn', null)),
        agent_alias_id: build.template(std.get(block, 'agent_alias_id', null)),
        agent_alias_name: build.template(block.agent_alias_name),
        agent_id: build.template(block.agent_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        routing_configuration: build.template(std.get(block, 'routing_configuration', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      agent_alias_arn: resource.field('agent_alias_arn'),
      agent_alias_id: resource.field('agent_alias_id'),
      agent_alias_name: resource.field('agent_alias_name'),
      agent_id: resource.field('agent_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      routing_configuration: resource.field('routing_configuration'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    bedrockagent_agent_knowledge_base_association(name, block): {
      local resource = blockType.resource('aws_bedrockagent_agent_knowledge_base_association', name),
      _: resource._(block, {
        agent_id: build.template(block.agent_id),
        agent_version: build.template(std.get(block, 'agent_version', null)),
        description: build.template(block.description),
        id: build.template(std.get(block, 'id', null)),
        knowledge_base_id: build.template(block.knowledge_base_id),
        knowledge_base_state: build.template(block.knowledge_base_state),
      }),
      agent_id: resource.field('agent_id'),
      agent_version: resource.field('agent_version'),
      description: resource.field('description'),
      id: resource.field('id'),
      knowledge_base_id: resource.field('knowledge_base_id'),
      knowledge_base_state: resource.field('knowledge_base_state'),
    },
    bedrockagent_data_source(name, block): {
      local resource = blockType.resource('aws_bedrockagent_data_source', name),
      _: resource._(block, {
        data_deletion_policy: build.template(std.get(block, 'data_deletion_policy', null)),
        data_source_id: build.template(std.get(block, 'data_source_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        knowledge_base_id: build.template(block.knowledge_base_id),
        name: build.template(block.name),
      }),
      data_deletion_policy: resource.field('data_deletion_policy'),
      data_source_id: resource.field('data_source_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      knowledge_base_id: resource.field('knowledge_base_id'),
      name: resource.field('name'),
    },
    bedrockagent_knowledge_base(name, block): {
      local resource = blockType.resource('aws_bedrockagent_knowledge_base', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        failure_reasons: build.template(std.get(block, 'failure_reasons', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      description: resource.field('description'),
      failure_reasons: resource.field('failure_reasons'),
      id: resource.field('id'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      updated_at: resource.field('updated_at'),
    },
    budgets_budget(name, block): {
      local resource = blockType.resource('aws_budgets_budget', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        budget_type: build.template(block.budget_type),
        id: build.template(std.get(block, 'id', null)),
        limit_amount: build.template(std.get(block, 'limit_amount', null)),
        limit_unit: build.template(std.get(block, 'limit_unit', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        time_period_end: build.template(std.get(block, 'time_period_end', null)),
        time_period_start: build.template(std.get(block, 'time_period_start', null)),
        time_unit: build.template(block.time_unit),
      }),
      account_id: resource.field('account_id'),
      arn: resource.field('arn'),
      budget_type: resource.field('budget_type'),
      id: resource.field('id'),
      limit_amount: resource.field('limit_amount'),
      limit_unit: resource.field('limit_unit'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      time_period_end: resource.field('time_period_end'),
      time_period_start: resource.field('time_period_start'),
      time_unit: resource.field('time_unit'),
    },
    budgets_budget_action(name, block): {
      local resource = blockType.resource('aws_budgets_budget_action', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        action_id: build.template(std.get(block, 'action_id', null)),
        action_type: build.template(block.action_type),
        approval_model: build.template(block.approval_model),
        arn: build.template(std.get(block, 'arn', null)),
        budget_name: build.template(block.budget_name),
        execution_role_arn: build.template(block.execution_role_arn),
        id: build.template(std.get(block, 'id', null)),
        notification_type: build.template(block.notification_type),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      account_id: resource.field('account_id'),
      action_id: resource.field('action_id'),
      action_type: resource.field('action_type'),
      approval_model: resource.field('approval_model'),
      arn: resource.field('arn'),
      budget_name: resource.field('budget_name'),
      execution_role_arn: resource.field('execution_role_arn'),
      id: resource.field('id'),
      notification_type: resource.field('notification_type'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ce_anomaly_monitor(name, block): {
      local resource = blockType.resource('aws_ce_anomaly_monitor', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        monitor_dimension: build.template(std.get(block, 'monitor_dimension', null)),
        monitor_specification: build.template(std.get(block, 'monitor_specification', null)),
        monitor_type: build.template(block.monitor_type),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      monitor_dimension: resource.field('monitor_dimension'),
      monitor_specification: resource.field('monitor_specification'),
      monitor_type: resource.field('monitor_type'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ce_anomaly_subscription(name, block): {
      local resource = blockType.resource('aws_ce_anomaly_subscription', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        frequency: build.template(block.frequency),
        id: build.template(std.get(block, 'id', null)),
        monitor_arn_list: build.template(block.monitor_arn_list),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      account_id: resource.field('account_id'),
      arn: resource.field('arn'),
      frequency: resource.field('frequency'),
      id: resource.field('id'),
      monitor_arn_list: resource.field('monitor_arn_list'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ce_cost_allocation_tag(name, block): {
      local resource = blockType.resource('aws_ce_cost_allocation_tag', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        status: build.template(block.status),
        tag_key: build.template(block.tag_key),
        type: build.template(std.get(block, 'type', null)),
      }),
      id: resource.field('id'),
      status: resource.field('status'),
      tag_key: resource.field('tag_key'),
      type: resource.field('type'),
    },
    ce_cost_category(name, block): {
      local resource = blockType.resource('aws_ce_cost_category', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_value: build.template(std.get(block, 'default_value', null)),
        effective_end: build.template(std.get(block, 'effective_end', null)),
        effective_start: build.template(std.get(block, 'effective_start', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        rule_version: build.template(block.rule_version),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      default_value: resource.field('default_value'),
      effective_end: resource.field('effective_end'),
      effective_start: resource.field('effective_start'),
      id: resource.field('id'),
      name: resource.field('name'),
      rule_version: resource.field('rule_version'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    chatbot_slack_channel_configuration(name, block): {
      local resource = blockType.resource('aws_chatbot_slack_channel_configuration', name),
      _: resource._(block, {
        chat_configuration_arn: build.template(std.get(block, 'chat_configuration_arn', null)),
        configuration_name: build.template(block.configuration_name),
        guardrail_policy_arns: build.template(std.get(block, 'guardrail_policy_arns', null)),
        iam_role_arn: build.template(block.iam_role_arn),
        logging_level: build.template(std.get(block, 'logging_level', null)),
        slack_channel_id: build.template(block.slack_channel_id),
        slack_channel_name: build.template(std.get(block, 'slack_channel_name', null)),
        slack_team_id: build.template(block.slack_team_id),
        slack_team_name: build.template(std.get(block, 'slack_team_name', null)),
        sns_topic_arns: build.template(std.get(block, 'sns_topic_arns', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_authorization_required: build.template(std.get(block, 'user_authorization_required', null)),
      }),
      chat_configuration_arn: resource.field('chat_configuration_arn'),
      configuration_name: resource.field('configuration_name'),
      guardrail_policy_arns: resource.field('guardrail_policy_arns'),
      iam_role_arn: resource.field('iam_role_arn'),
      logging_level: resource.field('logging_level'),
      slack_channel_id: resource.field('slack_channel_id'),
      slack_channel_name: resource.field('slack_channel_name'),
      slack_team_id: resource.field('slack_team_id'),
      slack_team_name: resource.field('slack_team_name'),
      sns_topic_arns: resource.field('sns_topic_arns'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_authorization_required: resource.field('user_authorization_required'),
    },
    chatbot_teams_channel_configuration(name, block): {
      local resource = blockType.resource('aws_chatbot_teams_channel_configuration', name),
      _: resource._(block, {
        channel_id: build.template(block.channel_id),
        channel_name: build.template(std.get(block, 'channel_name', null)),
        chat_configuration_arn: build.template(std.get(block, 'chat_configuration_arn', null)),
        configuration_name: build.template(block.configuration_name),
        guardrail_policy_arns: build.template(std.get(block, 'guardrail_policy_arns', null)),
        iam_role_arn: build.template(block.iam_role_arn),
        logging_level: build.template(std.get(block, 'logging_level', null)),
        sns_topic_arns: build.template(std.get(block, 'sns_topic_arns', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        team_id: build.template(block.team_id),
        team_name: build.template(std.get(block, 'team_name', null)),
        tenant_id: build.template(block.tenant_id),
        user_authorization_required: build.template(std.get(block, 'user_authorization_required', null)),
      }),
      channel_id: resource.field('channel_id'),
      channel_name: resource.field('channel_name'),
      chat_configuration_arn: resource.field('chat_configuration_arn'),
      configuration_name: resource.field('configuration_name'),
      guardrail_policy_arns: resource.field('guardrail_policy_arns'),
      iam_role_arn: resource.field('iam_role_arn'),
      logging_level: resource.field('logging_level'),
      sns_topic_arns: resource.field('sns_topic_arns'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      team_id: resource.field('team_id'),
      team_name: resource.field('team_name'),
      tenant_id: resource.field('tenant_id'),
      user_authorization_required: resource.field('user_authorization_required'),
    },
    chime_voice_connector(name, block): {
      local resource = blockType.resource('aws_chime_voice_connector', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_region: build.template(std.get(block, 'aws_region', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        outbound_host_name: build.template(std.get(block, 'outbound_host_name', null)),
        require_encryption: build.template(block.require_encryption),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      aws_region: resource.field('aws_region'),
      id: resource.field('id'),
      name: resource.field('name'),
      outbound_host_name: resource.field('outbound_host_name'),
      require_encryption: resource.field('require_encryption'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    chime_voice_connector_group(name, block): {
      local resource = blockType.resource('aws_chime_voice_connector_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    chime_voice_connector_logging(name, block): {
      local resource = blockType.resource('aws_chime_voice_connector_logging', name),
      _: resource._(block, {
        enable_media_metric_logs: build.template(std.get(block, 'enable_media_metric_logs', null)),
        enable_sip_logs: build.template(std.get(block, 'enable_sip_logs', null)),
        id: build.template(std.get(block, 'id', null)),
        voice_connector_id: build.template(block.voice_connector_id),
      }),
      enable_media_metric_logs: resource.field('enable_media_metric_logs'),
      enable_sip_logs: resource.field('enable_sip_logs'),
      id: resource.field('id'),
      voice_connector_id: resource.field('voice_connector_id'),
    },
    chime_voice_connector_origination(name, block): {
      local resource = blockType.resource('aws_chime_voice_connector_origination', name),
      _: resource._(block, {
        disabled: build.template(std.get(block, 'disabled', null)),
        id: build.template(std.get(block, 'id', null)),
        voice_connector_id: build.template(block.voice_connector_id),
      }),
      disabled: resource.field('disabled'),
      id: resource.field('id'),
      voice_connector_id: resource.field('voice_connector_id'),
    },
    chime_voice_connector_streaming(name, block): {
      local resource = blockType.resource('aws_chime_voice_connector_streaming', name),
      _: resource._(block, {
        data_retention: build.template(block.data_retention),
        disabled: build.template(std.get(block, 'disabled', null)),
        id: build.template(std.get(block, 'id', null)),
        streaming_notification_targets: build.template(std.get(block, 'streaming_notification_targets', null)),
        voice_connector_id: build.template(block.voice_connector_id),
      }),
      data_retention: resource.field('data_retention'),
      disabled: resource.field('disabled'),
      id: resource.field('id'),
      streaming_notification_targets: resource.field('streaming_notification_targets'),
      voice_connector_id: resource.field('voice_connector_id'),
    },
    chime_voice_connector_termination(name, block): {
      local resource = blockType.resource('aws_chime_voice_connector_termination', name),
      _: resource._(block, {
        calling_regions: build.template(block.calling_regions),
        cidr_allow_list: build.template(block.cidr_allow_list),
        cps_limit: build.template(std.get(block, 'cps_limit', null)),
        default_phone_number: build.template(std.get(block, 'default_phone_number', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        id: build.template(std.get(block, 'id', null)),
        voice_connector_id: build.template(block.voice_connector_id),
      }),
      calling_regions: resource.field('calling_regions'),
      cidr_allow_list: resource.field('cidr_allow_list'),
      cps_limit: resource.field('cps_limit'),
      default_phone_number: resource.field('default_phone_number'),
      disabled: resource.field('disabled'),
      id: resource.field('id'),
      voice_connector_id: resource.field('voice_connector_id'),
    },
    chime_voice_connector_termination_credentials(name, block): {
      local resource = blockType.resource('aws_chime_voice_connector_termination_credentials', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        voice_connector_id: build.template(block.voice_connector_id),
      }),
      id: resource.field('id'),
      voice_connector_id: resource.field('voice_connector_id'),
    },
    chimesdkmediapipelines_media_insights_pipeline_configuration(name, block): {
      local resource = blockType.resource('aws_chimesdkmediapipelines_media_insights_pipeline_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_access_role_arn: build.template(block.resource_access_role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      resource_access_role_arn: resource.field('resource_access_role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    chimesdkvoice_global_settings(name, block): {
      local resource = blockType.resource('aws_chimesdkvoice_global_settings', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    chimesdkvoice_sip_media_application(name, block): {
      local resource = blockType.resource('aws_chimesdkvoice_sip_media_application', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_region: build.template(block.aws_region),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      aws_region: resource.field('aws_region'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    chimesdkvoice_sip_rule(name, block): {
      local resource = blockType.resource('aws_chimesdkvoice_sip_rule', name),
      _: resource._(block, {
        disabled: build.template(std.get(block, 'disabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        trigger_type: build.template(block.trigger_type),
        trigger_value: build.template(block.trigger_value),
      }),
      disabled: resource.field('disabled'),
      id: resource.field('id'),
      name: resource.field('name'),
      trigger_type: resource.field('trigger_type'),
      trigger_value: resource.field('trigger_value'),
    },
    chimesdkvoice_voice_profile_domain(name, block): {
      local resource = blockType.resource('aws_chimesdkvoice_voice_profile_domain', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    cleanrooms_collaboration(name, block): {
      local resource = blockType.resource('aws_cleanrooms_collaboration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        creator_display_name: build.template(block.creator_display_name),
        creator_member_abilities: build.template(block.creator_member_abilities),
        description: build.template(block.description),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        query_log_status: build.template(block.query_log_status),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      arn: resource.field('arn'),
      create_time: resource.field('create_time'),
      creator_display_name: resource.field('creator_display_name'),
      creator_member_abilities: resource.field('creator_member_abilities'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      query_log_status: resource.field('query_log_status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      update_time: resource.field('update_time'),
    },
    cleanrooms_configured_table(name, block): {
      local resource = blockType.resource('aws_cleanrooms_configured_table', name),
      _: resource._(block, {
        allowed_columns: build.template(block.allowed_columns),
        analysis_method: build.template(block.analysis_method),
        arn: build.template(std.get(block, 'arn', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      allowed_columns: resource.field('allowed_columns'),
      analysis_method: resource.field('analysis_method'),
      arn: resource.field('arn'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      update_time: resource.field('update_time'),
    },
    cloud9_environment_ec2(name, block): {
      local resource = blockType.resource('aws_cloud9_environment_ec2', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        automatic_stop_time_minutes: build.template(std.get(block, 'automatic_stop_time_minutes', null)),
        connection_type: build.template(std.get(block, 'connection_type', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        image_id: build.template(block.image_id),
        instance_type: build.template(block.instance_type),
        name: build.template(block.name),
        owner_arn: build.template(std.get(block, 'owner_arn', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      automatic_stop_time_minutes: resource.field('automatic_stop_time_minutes'),
      connection_type: resource.field('connection_type'),
      description: resource.field('description'),
      id: resource.field('id'),
      image_id: resource.field('image_id'),
      instance_type: resource.field('instance_type'),
      name: resource.field('name'),
      owner_arn: resource.field('owner_arn'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    cloud9_environment_membership(name, block): {
      local resource = blockType.resource('aws_cloud9_environment_membership', name),
      _: resource._(block, {
        environment_id: build.template(block.environment_id),
        id: build.template(std.get(block, 'id', null)),
        permissions: build.template(block.permissions),
        user_arn: build.template(block.user_arn),
        user_id: build.template(std.get(block, 'user_id', null)),
      }),
      environment_id: resource.field('environment_id'),
      id: resource.field('id'),
      permissions: resource.field('permissions'),
      user_arn: resource.field('user_arn'),
      user_id: resource.field('user_id'),
    },
    cloudcontrolapi_resource(name, block): {
      local resource = blockType.resource('aws_cloudcontrolapi_resource', name),
      _: resource._(block, {
        desired_state: build.template(block.desired_state),
        id: build.template(std.get(block, 'id', null)),
        properties: build.template(std.get(block, 'properties', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        schema: build.template(std.get(block, 'schema', null)),
        type_name: build.template(block.type_name),
        type_version_id: build.template(std.get(block, 'type_version_id', null)),
      }),
      desired_state: resource.field('desired_state'),
      id: resource.field('id'),
      properties: resource.field('properties'),
      role_arn: resource.field('role_arn'),
      schema: resource.field('schema'),
      type_name: resource.field('type_name'),
      type_version_id: resource.field('type_version_id'),
    },
    cloudformation_stack(name, block): {
      local resource = blockType.resource('aws_cloudformation_stack', name),
      _: resource._(block, {
        capabilities: build.template(std.get(block, 'capabilities', null)),
        disable_rollback: build.template(std.get(block, 'disable_rollback', null)),
        iam_role_arn: build.template(std.get(block, 'iam_role_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        notification_arns: build.template(std.get(block, 'notification_arns', null)),
        on_failure: build.template(std.get(block, 'on_failure', null)),
        outputs: build.template(std.get(block, 'outputs', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        policy_body: build.template(std.get(block, 'policy_body', null)),
        policy_url: build.template(std.get(block, 'policy_url', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        template_body: build.template(std.get(block, 'template_body', null)),
        template_url: build.template(std.get(block, 'template_url', null)),
        timeout_in_minutes: build.template(std.get(block, 'timeout_in_minutes', null)),
      }),
      capabilities: resource.field('capabilities'),
      disable_rollback: resource.field('disable_rollback'),
      iam_role_arn: resource.field('iam_role_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      notification_arns: resource.field('notification_arns'),
      on_failure: resource.field('on_failure'),
      outputs: resource.field('outputs'),
      parameters: resource.field('parameters'),
      policy_body: resource.field('policy_body'),
      policy_url: resource.field('policy_url'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      template_body: resource.field('template_body'),
      template_url: resource.field('template_url'),
      timeout_in_minutes: resource.field('timeout_in_minutes'),
    },
    cloudformation_stack_instances(name, block): {
      local resource = blockType.resource('aws_cloudformation_stack_instances', name),
      _: resource._(block, {
        accounts: build.template(std.get(block, 'accounts', null)),
        call_as: build.template(std.get(block, 'call_as', null)),
        id: build.template(std.get(block, 'id', null)),
        parameter_overrides: build.template(std.get(block, 'parameter_overrides', null)),
        regions: build.template(std.get(block, 'regions', null)),
        retain_stacks: build.template(std.get(block, 'retain_stacks', null)),
        stack_instance_summaries: build.template(std.get(block, 'stack_instance_summaries', null)),
        stack_set_id: build.template(std.get(block, 'stack_set_id', null)),
        stack_set_name: build.template(block.stack_set_name),
      }),
      accounts: resource.field('accounts'),
      call_as: resource.field('call_as'),
      id: resource.field('id'),
      parameter_overrides: resource.field('parameter_overrides'),
      regions: resource.field('regions'),
      retain_stacks: resource.field('retain_stacks'),
      stack_instance_summaries: resource.field('stack_instance_summaries'),
      stack_set_id: resource.field('stack_set_id'),
      stack_set_name: resource.field('stack_set_name'),
    },
    cloudformation_stack_set(name, block): {
      local resource = blockType.resource('aws_cloudformation_stack_set', name),
      _: resource._(block, {
        administration_role_arn: build.template(std.get(block, 'administration_role_arn', null)),
        arn: build.template(std.get(block, 'arn', null)),
        call_as: build.template(std.get(block, 'call_as', null)),
        capabilities: build.template(std.get(block, 'capabilities', null)),
        description: build.template(std.get(block, 'description', null)),
        execution_role_name: build.template(std.get(block, 'execution_role_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        permission_model: build.template(std.get(block, 'permission_model', null)),
        stack_set_id: build.template(std.get(block, 'stack_set_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        template_body: build.template(std.get(block, 'template_body', null)),
        template_url: build.template(std.get(block, 'template_url', null)),
      }),
      administration_role_arn: resource.field('administration_role_arn'),
      arn: resource.field('arn'),
      call_as: resource.field('call_as'),
      capabilities: resource.field('capabilities'),
      description: resource.field('description'),
      execution_role_name: resource.field('execution_role_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      parameters: resource.field('parameters'),
      permission_model: resource.field('permission_model'),
      stack_set_id: resource.field('stack_set_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      template_body: resource.field('template_body'),
      template_url: resource.field('template_url'),
    },
    cloudformation_stack_set_instance(name, block): {
      local resource = blockType.resource('aws_cloudformation_stack_set_instance', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        call_as: build.template(std.get(block, 'call_as', null)),
        id: build.template(std.get(block, 'id', null)),
        organizational_unit_id: build.template(std.get(block, 'organizational_unit_id', null)),
        parameter_overrides: build.template(std.get(block, 'parameter_overrides', null)),
        region: build.template(std.get(block, 'region', null)),
        retain_stack: build.template(std.get(block, 'retain_stack', null)),
        stack_id: build.template(std.get(block, 'stack_id', null)),
        stack_instance_summaries: build.template(std.get(block, 'stack_instance_summaries', null)),
        stack_set_name: build.template(block.stack_set_name),
      }),
      account_id: resource.field('account_id'),
      call_as: resource.field('call_as'),
      id: resource.field('id'),
      organizational_unit_id: resource.field('organizational_unit_id'),
      parameter_overrides: resource.field('parameter_overrides'),
      region: resource.field('region'),
      retain_stack: resource.field('retain_stack'),
      stack_id: resource.field('stack_id'),
      stack_instance_summaries: resource.field('stack_instance_summaries'),
      stack_set_name: resource.field('stack_set_name'),
    },
    cloudformation_type(name, block): {
      local resource = blockType.resource('aws_cloudformation_type', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_version_id: build.template(std.get(block, 'default_version_id', null)),
        deprecated_status: build.template(std.get(block, 'deprecated_status', null)),
        description: build.template(std.get(block, 'description', null)),
        documentation_url: build.template(std.get(block, 'documentation_url', null)),
        execution_role_arn: build.template(std.get(block, 'execution_role_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        is_default_version: build.template(std.get(block, 'is_default_version', null)),
        provisioning_type: build.template(std.get(block, 'provisioning_type', null)),
        schema: build.template(std.get(block, 'schema', null)),
        schema_handler_package: build.template(block.schema_handler_package),
        source_url: build.template(std.get(block, 'source_url', null)),
        type: build.template(std.get(block, 'type', null)),
        type_arn: build.template(std.get(block, 'type_arn', null)),
        type_name: build.template(block.type_name),
        version_id: build.template(std.get(block, 'version_id', null)),
        visibility: build.template(std.get(block, 'visibility', null)),
      }),
      arn: resource.field('arn'),
      default_version_id: resource.field('default_version_id'),
      deprecated_status: resource.field('deprecated_status'),
      description: resource.field('description'),
      documentation_url: resource.field('documentation_url'),
      execution_role_arn: resource.field('execution_role_arn'),
      id: resource.field('id'),
      is_default_version: resource.field('is_default_version'),
      provisioning_type: resource.field('provisioning_type'),
      schema: resource.field('schema'),
      schema_handler_package: resource.field('schema_handler_package'),
      source_url: resource.field('source_url'),
      type: resource.field('type'),
      type_arn: resource.field('type_arn'),
      type_name: resource.field('type_name'),
      version_id: resource.field('version_id'),
      visibility: resource.field('visibility'),
    },
    cloudfront_cache_policy(name, block): {
      local resource = blockType.resource('aws_cloudfront_cache_policy', name),
      _: resource._(block, {
        comment: build.template(std.get(block, 'comment', null)),
        default_ttl: build.template(std.get(block, 'default_ttl', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        max_ttl: build.template(std.get(block, 'max_ttl', null)),
        min_ttl: build.template(std.get(block, 'min_ttl', null)),
        name: build.template(block.name),
      }),
      comment: resource.field('comment'),
      default_ttl: resource.field('default_ttl'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      max_ttl: resource.field('max_ttl'),
      min_ttl: resource.field('min_ttl'),
      name: resource.field('name'),
    },
    cloudfront_continuous_deployment_policy(name, block): {
      local resource = blockType.resource('aws_cloudfront_continuous_deployment_policy', name),
      _: resource._(block, {
        enabled: build.template(block.enabled),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified_time: build.template(std.get(block, 'last_modified_time', null)),
      }),
      enabled: resource.field('enabled'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      last_modified_time: resource.field('last_modified_time'),
    },
    cloudfront_distribution(name, block): {
      local resource = blockType.resource('aws_cloudfront_distribution', name),
      _: resource._(block, {
        aliases: build.template(std.get(block, 'aliases', null)),
        arn: build.template(std.get(block, 'arn', null)),
        caller_reference: build.template(std.get(block, 'caller_reference', null)),
        comment: build.template(std.get(block, 'comment', null)),
        continuous_deployment_policy_id: build.template(std.get(block, 'continuous_deployment_policy_id', null)),
        default_root_object: build.template(std.get(block, 'default_root_object', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        enabled: build.template(block.enabled),
        etag: build.template(std.get(block, 'etag', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        http_version: build.template(std.get(block, 'http_version', null)),
        id: build.template(std.get(block, 'id', null)),
        in_progress_validation_batches: build.template(std.get(block, 'in_progress_validation_batches', null)),
        is_ipv6_enabled: build.template(std.get(block, 'is_ipv6_enabled', null)),
        last_modified_time: build.template(std.get(block, 'last_modified_time', null)),
        price_class: build.template(std.get(block, 'price_class', null)),
        retain_on_delete: build.template(std.get(block, 'retain_on_delete', null)),
        staging: build.template(std.get(block, 'staging', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        trusted_key_groups: build.template(std.get(block, 'trusted_key_groups', null)),
        trusted_signers: build.template(std.get(block, 'trusted_signers', null)),
        wait_for_deployment: build.template(std.get(block, 'wait_for_deployment', null)),
        web_acl_id: build.template(std.get(block, 'web_acl_id', null)),
      }),
      aliases: resource.field('aliases'),
      arn: resource.field('arn'),
      caller_reference: resource.field('caller_reference'),
      comment: resource.field('comment'),
      continuous_deployment_policy_id: resource.field('continuous_deployment_policy_id'),
      default_root_object: resource.field('default_root_object'),
      domain_name: resource.field('domain_name'),
      enabled: resource.field('enabled'),
      etag: resource.field('etag'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      http_version: resource.field('http_version'),
      id: resource.field('id'),
      in_progress_validation_batches: resource.field('in_progress_validation_batches'),
      is_ipv6_enabled: resource.field('is_ipv6_enabled'),
      last_modified_time: resource.field('last_modified_time'),
      price_class: resource.field('price_class'),
      retain_on_delete: resource.field('retain_on_delete'),
      staging: resource.field('staging'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      trusted_key_groups: resource.field('trusted_key_groups'),
      trusted_signers: resource.field('trusted_signers'),
      wait_for_deployment: resource.field('wait_for_deployment'),
      web_acl_id: resource.field('web_acl_id'),
    },
    cloudfront_field_level_encryption_config(name, block): {
      local resource = blockType.resource('aws_cloudfront_field_level_encryption_config', name),
      _: resource._(block, {
        caller_reference: build.template(std.get(block, 'caller_reference', null)),
        comment: build.template(std.get(block, 'comment', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      caller_reference: resource.field('caller_reference'),
      comment: resource.field('comment'),
      etag: resource.field('etag'),
      id: resource.field('id'),
    },
    cloudfront_field_level_encryption_profile(name, block): {
      local resource = blockType.resource('aws_cloudfront_field_level_encryption_profile', name),
      _: resource._(block, {
        caller_reference: build.template(std.get(block, 'caller_reference', null)),
        comment: build.template(std.get(block, 'comment', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      caller_reference: resource.field('caller_reference'),
      comment: resource.field('comment'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    cloudfront_function(name, block): {
      local resource = blockType.resource('aws_cloudfront_function', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        code: build.template(block.code),
        comment: build.template(std.get(block, 'comment', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key_value_store_associations: build.template(std.get(block, 'key_value_store_associations', null)),
        live_stage_etag: build.template(std.get(block, 'live_stage_etag', null)),
        name: build.template(block.name),
        publish: build.template(std.get(block, 'publish', null)),
        runtime: build.template(block.runtime),
        status: build.template(std.get(block, 'status', null)),
      }),
      arn: resource.field('arn'),
      code: resource.field('code'),
      comment: resource.field('comment'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      key_value_store_associations: resource.field('key_value_store_associations'),
      live_stage_etag: resource.field('live_stage_etag'),
      name: resource.field('name'),
      publish: resource.field('publish'),
      runtime: resource.field('runtime'),
      status: resource.field('status'),
    },
    cloudfront_key_group(name, block): {
      local resource = blockType.resource('aws_cloudfront_key_group', name),
      _: resource._(block, {
        comment: build.template(std.get(block, 'comment', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        items: build.template(block.items),
        name: build.template(block.name),
      }),
      comment: resource.field('comment'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      items: resource.field('items'),
      name: resource.field('name'),
    },
    cloudfront_key_value_store(name, block): {
      local resource = blockType.resource('aws_cloudfront_key_value_store', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        comment: build.template(std.get(block, 'comment', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified_time: build.template(std.get(block, 'last_modified_time', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      comment: resource.field('comment'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      last_modified_time: resource.field('last_modified_time'),
      name: resource.field('name'),
    },
    cloudfront_monitoring_subscription(name, block): {
      local resource = blockType.resource('aws_cloudfront_monitoring_subscription', name),
      _: resource._(block, {
        distribution_id: build.template(block.distribution_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      distribution_id: resource.field('distribution_id'),
      id: resource.field('id'),
    },
    cloudfront_origin_access_control(name, block): {
      local resource = blockType.resource('aws_cloudfront_origin_access_control', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        origin_access_control_origin_type: build.template(block.origin_access_control_origin_type),
        signing_behavior: build.template(block.signing_behavior),
        signing_protocol: build.template(block.signing_protocol),
      }),
      description: resource.field('description'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      origin_access_control_origin_type: resource.field('origin_access_control_origin_type'),
      signing_behavior: resource.field('signing_behavior'),
      signing_protocol: resource.field('signing_protocol'),
    },
    cloudfront_origin_access_identity(name, block): {
      local resource = blockType.resource('aws_cloudfront_origin_access_identity', name),
      _: resource._(block, {
        caller_reference: build.template(std.get(block, 'caller_reference', null)),
        cloudfront_access_identity_path: build.template(std.get(block, 'cloudfront_access_identity_path', null)),
        comment: build.template(std.get(block, 'comment', null)),
        etag: build.template(std.get(block, 'etag', null)),
        iam_arn: build.template(std.get(block, 'iam_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        s3_canonical_user_id: build.template(std.get(block, 's3_canonical_user_id', null)),
      }),
      caller_reference: resource.field('caller_reference'),
      cloudfront_access_identity_path: resource.field('cloudfront_access_identity_path'),
      comment: resource.field('comment'),
      etag: resource.field('etag'),
      iam_arn: resource.field('iam_arn'),
      id: resource.field('id'),
      s3_canonical_user_id: resource.field('s3_canonical_user_id'),
    },
    cloudfront_origin_request_policy(name, block): {
      local resource = blockType.resource('aws_cloudfront_origin_request_policy', name),
      _: resource._(block, {
        comment: build.template(std.get(block, 'comment', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      comment: resource.field('comment'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    cloudfront_public_key(name, block): {
      local resource = blockType.resource('aws_cloudfront_public_key', name),
      _: resource._(block, {
        caller_reference: build.template(std.get(block, 'caller_reference', null)),
        comment: build.template(std.get(block, 'comment', null)),
        encoded_key: build.template(block.encoded_key),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
      }),
      caller_reference: resource.field('caller_reference'),
      comment: resource.field('comment'),
      encoded_key: resource.field('encoded_key'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
    },
    cloudfront_realtime_log_config(name, block): {
      local resource = blockType.resource('aws_cloudfront_realtime_log_config', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        fields: build.template(block.fields),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        sampling_rate: build.template(block.sampling_rate),
      }),
      arn: resource.field('arn'),
      fields: resource.field('fields'),
      id: resource.field('id'),
      name: resource.field('name'),
      sampling_rate: resource.field('sampling_rate'),
    },
    cloudfront_response_headers_policy(name, block): {
      local resource = blockType.resource('aws_cloudfront_response_headers_policy', name),
      _: resource._(block, {
        comment: build.template(std.get(block, 'comment', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      comment: resource.field('comment'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    cloudfrontkeyvaluestore_key(name, block): {
      local resource = blockType.resource('aws_cloudfrontkeyvaluestore_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        key_value_store_arn: build.template(block.key_value_store_arn),
        total_size_in_bytes: build.template(std.get(block, 'total_size_in_bytes', null)),
        value: build.template(block.value),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      key_value_store_arn: resource.field('key_value_store_arn'),
      total_size_in_bytes: resource.field('total_size_in_bytes'),
      value: resource.field('value'),
    },
    cloudhsm_v2_cluster(name, block): {
      local resource = blockType.resource('aws_cloudhsm_v2_cluster', name),
      _: resource._(block, {
        cluster_certificates: build.template(std.get(block, 'cluster_certificates', null)),
        cluster_id: build.template(std.get(block, 'cluster_id', null)),
        cluster_state: build.template(std.get(block, 'cluster_state', null)),
        hsm_type: build.template(block.hsm_type),
        id: build.template(std.get(block, 'id', null)),
        mode: build.template(std.get(block, 'mode', null)),
        security_group_id: build.template(std.get(block, 'security_group_id', null)),
        source_backup_identifier: build.template(std.get(block, 'source_backup_identifier', null)),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      cluster_certificates: resource.field('cluster_certificates'),
      cluster_id: resource.field('cluster_id'),
      cluster_state: resource.field('cluster_state'),
      hsm_type: resource.field('hsm_type'),
      id: resource.field('id'),
      mode: resource.field('mode'),
      security_group_id: resource.field('security_group_id'),
      source_backup_identifier: resource.field('source_backup_identifier'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    cloudhsm_v2_hsm(name, block): {
      local resource = blockType.resource('aws_cloudhsm_v2_hsm', name),
      _: resource._(block, {
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        cluster_id: build.template(block.cluster_id),
        hsm_eni_id: build.template(std.get(block, 'hsm_eni_id', null)),
        hsm_id: build.template(std.get(block, 'hsm_id', null)),
        hsm_state: build.template(std.get(block, 'hsm_state', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
      }),
      availability_zone: resource.field('availability_zone'),
      cluster_id: resource.field('cluster_id'),
      hsm_eni_id: resource.field('hsm_eni_id'),
      hsm_id: resource.field('hsm_id'),
      hsm_state: resource.field('hsm_state'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      subnet_id: resource.field('subnet_id'),
    },
    cloudsearch_domain(name, block): {
      local resource = blockType.resource('aws_cloudsearch_domain', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        document_service_endpoint: build.template(std.get(block, 'document_service_endpoint', null)),
        domain_id: build.template(std.get(block, 'domain_id', null)),
        id: build.template(std.get(block, 'id', null)),
        multi_az: build.template(std.get(block, 'multi_az', null)),
        name: build.template(block.name),
        search_service_endpoint: build.template(std.get(block, 'search_service_endpoint', null)),
      }),
      arn: resource.field('arn'),
      document_service_endpoint: resource.field('document_service_endpoint'),
      domain_id: resource.field('domain_id'),
      id: resource.field('id'),
      multi_az: resource.field('multi_az'),
      name: resource.field('name'),
      search_service_endpoint: resource.field('search_service_endpoint'),
    },
    cloudsearch_domain_service_access_policy(name, block): {
      local resource = blockType.resource('aws_cloudsearch_domain_service_access_policy', name),
      _: resource._(block, {
        access_policy: build.template(block.access_policy),
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      access_policy: resource.field('access_policy'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
    },
    cloudtrail(name, block): {
      local resource = blockType.resource('aws_cloudtrail', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cloud_watch_logs_group_arn: build.template(std.get(block, 'cloud_watch_logs_group_arn', null)),
        cloud_watch_logs_role_arn: build.template(std.get(block, 'cloud_watch_logs_role_arn', null)),
        enable_log_file_validation: build.template(std.get(block, 'enable_log_file_validation', null)),
        enable_logging: build.template(std.get(block, 'enable_logging', null)),
        home_region: build.template(std.get(block, 'home_region', null)),
        id: build.template(std.get(block, 'id', null)),
        include_global_service_events: build.template(std.get(block, 'include_global_service_events', null)),
        is_multi_region_trail: build.template(std.get(block, 'is_multi_region_trail', null)),
        is_organization_trail: build.template(std.get(block, 'is_organization_trail', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        name: build.template(block.name),
        s3_bucket_name: build.template(block.s3_bucket_name),
        s3_key_prefix: build.template(std.get(block, 's3_key_prefix', null)),
        sns_topic_name: build.template(std.get(block, 'sns_topic_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      cloud_watch_logs_group_arn: resource.field('cloud_watch_logs_group_arn'),
      cloud_watch_logs_role_arn: resource.field('cloud_watch_logs_role_arn'),
      enable_log_file_validation: resource.field('enable_log_file_validation'),
      enable_logging: resource.field('enable_logging'),
      home_region: resource.field('home_region'),
      id: resource.field('id'),
      include_global_service_events: resource.field('include_global_service_events'),
      is_multi_region_trail: resource.field('is_multi_region_trail'),
      is_organization_trail: resource.field('is_organization_trail'),
      kms_key_id: resource.field('kms_key_id'),
      name: resource.field('name'),
      s3_bucket_name: resource.field('s3_bucket_name'),
      s3_key_prefix: resource.field('s3_key_prefix'),
      sns_topic_name: resource.field('sns_topic_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    cloudtrail_event_data_store(name, block): {
      local resource = blockType.resource('aws_cloudtrail_event_data_store', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        billing_mode: build.template(std.get(block, 'billing_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        multi_region_enabled: build.template(std.get(block, 'multi_region_enabled', null)),
        name: build.template(block.name),
        organization_enabled: build.template(std.get(block, 'organization_enabled', null)),
        retention_period: build.template(std.get(block, 'retention_period', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        termination_protection_enabled: build.template(std.get(block, 'termination_protection_enabled', null)),
      }),
      arn: resource.field('arn'),
      billing_mode: resource.field('billing_mode'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      multi_region_enabled: resource.field('multi_region_enabled'),
      name: resource.field('name'),
      organization_enabled: resource.field('organization_enabled'),
      retention_period: resource.field('retention_period'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      termination_protection_enabled: resource.field('termination_protection_enabled'),
    },
    cloudtrail_organization_delegated_admin_account(name, block): {
      local resource = blockType.resource('aws_cloudtrail_organization_delegated_admin_account', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        arn: build.template(std.get(block, 'arn', null)),
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        service_principal: build.template(std.get(block, 'service_principal', null)),
      }),
      account_id: resource.field('account_id'),
      arn: resource.field('arn'),
      email: resource.field('email'),
      id: resource.field('id'),
      name: resource.field('name'),
      service_principal: resource.field('service_principal'),
    },
    cloudwatch_composite_alarm(name, block): {
      local resource = blockType.resource('aws_cloudwatch_composite_alarm', name),
      _: resource._(block, {
        actions_enabled: build.template(std.get(block, 'actions_enabled', null)),
        alarm_actions: build.template(std.get(block, 'alarm_actions', null)),
        alarm_description: build.template(std.get(block, 'alarm_description', null)),
        alarm_name: build.template(block.alarm_name),
        alarm_rule: build.template(block.alarm_rule),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        insufficient_data_actions: build.template(std.get(block, 'insufficient_data_actions', null)),
        ok_actions: build.template(std.get(block, 'ok_actions', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      actions_enabled: resource.field('actions_enabled'),
      alarm_actions: resource.field('alarm_actions'),
      alarm_description: resource.field('alarm_description'),
      alarm_name: resource.field('alarm_name'),
      alarm_rule: resource.field('alarm_rule'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      insufficient_data_actions: resource.field('insufficient_data_actions'),
      ok_actions: resource.field('ok_actions'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    cloudwatch_dashboard(name, block): {
      local resource = blockType.resource('aws_cloudwatch_dashboard', name),
      _: resource._(block, {
        dashboard_arn: build.template(std.get(block, 'dashboard_arn', null)),
        dashboard_body: build.template(block.dashboard_body),
        dashboard_name: build.template(block.dashboard_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      dashboard_arn: resource.field('dashboard_arn'),
      dashboard_body: resource.field('dashboard_body'),
      dashboard_name: resource.field('dashboard_name'),
      id: resource.field('id'),
    },
    cloudwatch_event_api_destination(name, block): {
      local resource = blockType.resource('aws_cloudwatch_event_api_destination', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        connection_arn: build.template(block.connection_arn),
        description: build.template(std.get(block, 'description', null)),
        http_method: build.template(block.http_method),
        id: build.template(std.get(block, 'id', null)),
        invocation_endpoint: build.template(block.invocation_endpoint),
        invocation_rate_limit_per_second: build.template(std.get(block, 'invocation_rate_limit_per_second', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      connection_arn: resource.field('connection_arn'),
      description: resource.field('description'),
      http_method: resource.field('http_method'),
      id: resource.field('id'),
      invocation_endpoint: resource.field('invocation_endpoint'),
      invocation_rate_limit_per_second: resource.field('invocation_rate_limit_per_second'),
      name: resource.field('name'),
    },
    cloudwatch_event_archive(name, block): {
      local resource = blockType.resource('aws_cloudwatch_event_archive', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        event_pattern: build.template(std.get(block, 'event_pattern', null)),
        event_source_arn: build.template(block.event_source_arn),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        retention_days: build.template(std.get(block, 'retention_days', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      event_pattern: resource.field('event_pattern'),
      event_source_arn: resource.field('event_source_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      retention_days: resource.field('retention_days'),
    },
    cloudwatch_event_bus(name, block): {
      local resource = blockType.resource('aws_cloudwatch_event_bus', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        event_source_name: build.template(std.get(block, 'event_source_name', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_identifier: build.template(std.get(block, 'kms_key_identifier', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      event_source_name: resource.field('event_source_name'),
      id: resource.field('id'),
      kms_key_identifier: resource.field('kms_key_identifier'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    cloudwatch_event_bus_policy(name, block): {
      local resource = blockType.resource('aws_cloudwatch_event_bus_policy', name),
      _: resource._(block, {
        event_bus_name: build.template(std.get(block, 'event_bus_name', null)),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
      }),
      event_bus_name: resource.field('event_bus_name'),
      id: resource.field('id'),
      policy: resource.field('policy'),
    },
    cloudwatch_event_connection(name, block): {
      local resource = blockType.resource('aws_cloudwatch_event_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        authorization_type: build.template(block.authorization_type),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        secret_arn: build.template(std.get(block, 'secret_arn', null)),
      }),
      arn: resource.field('arn'),
      authorization_type: resource.field('authorization_type'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      secret_arn: resource.field('secret_arn'),
    },
    cloudwatch_event_endpoint(name, block): {
      local resource = blockType.resource('aws_cloudwatch_event_endpoint', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        endpoint_url: build.template(std.get(block, 'endpoint_url', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        role_arn: build.template(std.get(block, 'role_arn', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      endpoint_url: resource.field('endpoint_url'),
      id: resource.field('id'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
    },
    cloudwatch_event_permission(name, block): {
      local resource = blockType.resource('aws_cloudwatch_event_permission', name),
      _: resource._(block, {
        action: build.template(std.get(block, 'action', null)),
        event_bus_name: build.template(std.get(block, 'event_bus_name', null)),
        id: build.template(std.get(block, 'id', null)),
        principal: build.template(block.principal),
        statement_id: build.template(block.statement_id),
      }),
      action: resource.field('action'),
      event_bus_name: resource.field('event_bus_name'),
      id: resource.field('id'),
      principal: resource.field('principal'),
      statement_id: resource.field('statement_id'),
    },
    cloudwatch_event_rule(name, block): {
      local resource = blockType.resource('aws_cloudwatch_event_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        event_bus_name: build.template(std.get(block, 'event_bus_name', null)),
        event_pattern: build.template(std.get(block, 'event_pattern', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        is_enabled: build.template(std.get(block, 'is_enabled', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        schedule_expression: build.template(std.get(block, 'schedule_expression', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      event_bus_name: resource.field('event_bus_name'),
      event_pattern: resource.field('event_pattern'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      is_enabled: resource.field('is_enabled'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      role_arn: resource.field('role_arn'),
      schedule_expression: resource.field('schedule_expression'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    cloudwatch_event_target(name, block): {
      local resource = blockType.resource('aws_cloudwatch_event_target', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        event_bus_name: build.template(std.get(block, 'event_bus_name', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        input: build.template(std.get(block, 'input', null)),
        input_path: build.template(std.get(block, 'input_path', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        rule: build.template(block.rule),
        target_id: build.template(std.get(block, 'target_id', null)),
      }),
      arn: resource.field('arn'),
      event_bus_name: resource.field('event_bus_name'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      input: resource.field('input'),
      input_path: resource.field('input_path'),
      role_arn: resource.field('role_arn'),
      rule: resource.field('rule'),
      target_id: resource.field('target_id'),
    },
    cloudwatch_log_account_policy(name, block): {
      local resource = blockType.resource('aws_cloudwatch_log_account_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy_document: build.template(block.policy_document),
        policy_name: build.template(block.policy_name),
        policy_type: build.template(block.policy_type),
        scope: build.template(std.get(block, 'scope', null)),
        selection_criteria: build.template(std.get(block, 'selection_criteria', null)),
      }),
      id: resource.field('id'),
      policy_document: resource.field('policy_document'),
      policy_name: resource.field('policy_name'),
      policy_type: resource.field('policy_type'),
      scope: resource.field('scope'),
      selection_criteria: resource.field('selection_criteria'),
    },
    cloudwatch_log_data_protection_policy(name, block): {
      local resource = blockType.resource('aws_cloudwatch_log_data_protection_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_group_name: build.template(block.log_group_name),
        policy_document: build.template(block.policy_document),
      }),
      id: resource.field('id'),
      log_group_name: resource.field('log_group_name'),
      policy_document: resource.field('policy_document'),
    },
    cloudwatch_log_destination(name, block): {
      local resource = blockType.resource('aws_cloudwatch_log_destination', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_arn: build.template(block.target_arn),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_arn: resource.field('target_arn'),
    },
    cloudwatch_log_destination_policy(name, block): {
      local resource = blockType.resource('aws_cloudwatch_log_destination_policy', name),
      _: resource._(block, {
        access_policy: build.template(block.access_policy),
        destination_name: build.template(block.destination_name),
        force_update: build.template(std.get(block, 'force_update', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      access_policy: resource.field('access_policy'),
      destination_name: resource.field('destination_name'),
      force_update: resource.field('force_update'),
      id: resource.field('id'),
    },
    cloudwatch_log_group(name, block): {
      local resource = blockType.resource('aws_cloudwatch_log_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        log_group_class: build.template(std.get(block, 'log_group_class', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        retention_in_days: build.template(std.get(block, 'retention_in_days', null)),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      log_group_class: resource.field('log_group_class'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      retention_in_days: resource.field('retention_in_days'),
      skip_destroy: resource.field('skip_destroy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    cloudwatch_log_metric_filter(name, block): {
      local resource = blockType.resource('aws_cloudwatch_log_metric_filter', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_group_name: build.template(block.log_group_name),
        name: build.template(block.name),
        pattern: build.template(block.pattern),
      }),
      id: resource.field('id'),
      log_group_name: resource.field('log_group_name'),
      name: resource.field('name'),
      pattern: resource.field('pattern'),
    },
    cloudwatch_log_resource_policy(name, block): {
      local resource = blockType.resource('aws_cloudwatch_log_resource_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy_document: build.template(block.policy_document),
        policy_name: build.template(block.policy_name),
      }),
      id: resource.field('id'),
      policy_document: resource.field('policy_document'),
      policy_name: resource.field('policy_name'),
    },
    cloudwatch_log_stream(name, block): {
      local resource = blockType.resource('aws_cloudwatch_log_stream', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        log_group_name: build.template(block.log_group_name),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      log_group_name: resource.field('log_group_name'),
      name: resource.field('name'),
    },
    cloudwatch_log_subscription_filter(name, block): {
      local resource = blockType.resource('aws_cloudwatch_log_subscription_filter', name),
      _: resource._(block, {
        destination_arn: build.template(block.destination_arn),
        distribution: build.template(std.get(block, 'distribution', null)),
        filter_pattern: build.template(block.filter_pattern),
        id: build.template(std.get(block, 'id', null)),
        log_group_name: build.template(block.log_group_name),
        name: build.template(block.name),
        role_arn: build.template(std.get(block, 'role_arn', null)),
      }),
      destination_arn: resource.field('destination_arn'),
      distribution: resource.field('distribution'),
      filter_pattern: resource.field('filter_pattern'),
      id: resource.field('id'),
      log_group_name: resource.field('log_group_name'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
    },
    cloudwatch_metric_alarm(name, block): {
      local resource = blockType.resource('aws_cloudwatch_metric_alarm', name),
      _: resource._(block, {
        actions_enabled: build.template(std.get(block, 'actions_enabled', null)),
        alarm_actions: build.template(std.get(block, 'alarm_actions', null)),
        alarm_description: build.template(std.get(block, 'alarm_description', null)),
        alarm_name: build.template(block.alarm_name),
        arn: build.template(std.get(block, 'arn', null)),
        comparison_operator: build.template(block.comparison_operator),
        datapoints_to_alarm: build.template(std.get(block, 'datapoints_to_alarm', null)),
        dimensions: build.template(std.get(block, 'dimensions', null)),
        evaluate_low_sample_count_percentiles: build.template(std.get(block, 'evaluate_low_sample_count_percentiles', null)),
        evaluation_periods: build.template(block.evaluation_periods),
        extended_statistic: build.template(std.get(block, 'extended_statistic', null)),
        id: build.template(std.get(block, 'id', null)),
        insufficient_data_actions: build.template(std.get(block, 'insufficient_data_actions', null)),
        metric_name: build.template(std.get(block, 'metric_name', null)),
        namespace: build.template(std.get(block, 'namespace', null)),
        ok_actions: build.template(std.get(block, 'ok_actions', null)),
        period: build.template(std.get(block, 'period', null)),
        statistic: build.template(std.get(block, 'statistic', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        threshold: build.template(std.get(block, 'threshold', null)),
        threshold_metric_id: build.template(std.get(block, 'threshold_metric_id', null)),
        treat_missing_data: build.template(std.get(block, 'treat_missing_data', null)),
        unit: build.template(std.get(block, 'unit', null)),
      }),
      actions_enabled: resource.field('actions_enabled'),
      alarm_actions: resource.field('alarm_actions'),
      alarm_description: resource.field('alarm_description'),
      alarm_name: resource.field('alarm_name'),
      arn: resource.field('arn'),
      comparison_operator: resource.field('comparison_operator'),
      datapoints_to_alarm: resource.field('datapoints_to_alarm'),
      dimensions: resource.field('dimensions'),
      evaluate_low_sample_count_percentiles: resource.field('evaluate_low_sample_count_percentiles'),
      evaluation_periods: resource.field('evaluation_periods'),
      extended_statistic: resource.field('extended_statistic'),
      id: resource.field('id'),
      insufficient_data_actions: resource.field('insufficient_data_actions'),
      metric_name: resource.field('metric_name'),
      namespace: resource.field('namespace'),
      ok_actions: resource.field('ok_actions'),
      period: resource.field('period'),
      statistic: resource.field('statistic'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      threshold: resource.field('threshold'),
      threshold_metric_id: resource.field('threshold_metric_id'),
      treat_missing_data: resource.field('treat_missing_data'),
      unit: resource.field('unit'),
    },
    cloudwatch_metric_stream(name, block): {
      local resource = blockType.resource('aws_cloudwatch_metric_stream', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        firehose_arn: build.template(block.firehose_arn),
        id: build.template(std.get(block, 'id', null)),
        include_linked_accounts_metrics: build.template(std.get(block, 'include_linked_accounts_metrics', null)),
        last_update_date: build.template(std.get(block, 'last_update_date', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        output_format: build.template(block.output_format),
        role_arn: build.template(block.role_arn),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      creation_date: resource.field('creation_date'),
      firehose_arn: resource.field('firehose_arn'),
      id: resource.field('id'),
      include_linked_accounts_metrics: resource.field('include_linked_accounts_metrics'),
      last_update_date: resource.field('last_update_date'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      output_format: resource.field('output_format'),
      role_arn: resource.field('role_arn'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    cloudwatch_query_definition(name, block): {
      local resource = blockType.resource('aws_cloudwatch_query_definition', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_group_names: build.template(std.get(block, 'log_group_names', null)),
        name: build.template(block.name),
        query_definition_id: build.template(std.get(block, 'query_definition_id', null)),
        query_string: build.template(block.query_string),
      }),
      id: resource.field('id'),
      log_group_names: resource.field('log_group_names'),
      name: resource.field('name'),
      query_definition_id: resource.field('query_definition_id'),
      query_string: resource.field('query_string'),
    },
    codeartifact_domain(name, block): {
      local resource = blockType.resource('aws_codeartifact_domain', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        asset_size_bytes: build.template(std.get(block, 'asset_size_bytes', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        domain: build.template(block.domain),
        encryption_key: build.template(std.get(block, 'encryption_key', null)),
        id: build.template(std.get(block, 'id', null)),
        owner: build.template(std.get(block, 'owner', null)),
        repository_count: build.template(std.get(block, 'repository_count', null)),
        s3_bucket_arn: build.template(std.get(block, 's3_bucket_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      asset_size_bytes: resource.field('asset_size_bytes'),
      created_time: resource.field('created_time'),
      domain: resource.field('domain'),
      encryption_key: resource.field('encryption_key'),
      id: resource.field('id'),
      owner: resource.field('owner'),
      repository_count: resource.field('repository_count'),
      s3_bucket_arn: resource.field('s3_bucket_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    codeartifact_domain_permissions_policy(name, block): {
      local resource = blockType.resource('aws_codeartifact_domain_permissions_policy', name),
      _: resource._(block, {
        domain: build.template(block.domain),
        domain_owner: build.template(std.get(block, 'domain_owner', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_document: build.template(block.policy_document),
        policy_revision: build.template(std.get(block, 'policy_revision', null)),
        resource_arn: build.template(std.get(block, 'resource_arn', null)),
      }),
      domain: resource.field('domain'),
      domain_owner: resource.field('domain_owner'),
      id: resource.field('id'),
      policy_document: resource.field('policy_document'),
      policy_revision: resource.field('policy_revision'),
      resource_arn: resource.field('resource_arn'),
    },
    codeartifact_repository(name, block): {
      local resource = blockType.resource('aws_codeartifact_repository', name),
      _: resource._(block, {
        administrator_account: build.template(std.get(block, 'administrator_account', null)),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        domain: build.template(block.domain),
        domain_owner: build.template(std.get(block, 'domain_owner', null)),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      administrator_account: resource.field('administrator_account'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      domain: resource.field('domain'),
      domain_owner: resource.field('domain_owner'),
      id: resource.field('id'),
      repository: resource.field('repository'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    codeartifact_repository_permissions_policy(name, block): {
      local resource = blockType.resource('aws_codeartifact_repository_permissions_policy', name),
      _: resource._(block, {
        domain: build.template(block.domain),
        domain_owner: build.template(std.get(block, 'domain_owner', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_document: build.template(block.policy_document),
        policy_revision: build.template(std.get(block, 'policy_revision', null)),
        repository: build.template(block.repository),
        resource_arn: build.template(std.get(block, 'resource_arn', null)),
      }),
      domain: resource.field('domain'),
      domain_owner: resource.field('domain_owner'),
      id: resource.field('id'),
      policy_document: resource.field('policy_document'),
      policy_revision: resource.field('policy_revision'),
      repository: resource.field('repository'),
      resource_arn: resource.field('resource_arn'),
    },
    codebuild_fleet(name, block): {
      local resource = blockType.resource('aws_codebuild_fleet', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        base_capacity: build.template(block.base_capacity),
        compute_type: build.template(block.compute_type),
        created: build.template(std.get(block, 'created', null)),
        environment_type: build.template(block.environment_type),
        fleet_service_role: build.template(std.get(block, 'fleet_service_role', null)),
        id: build.template(std.get(block, 'id', null)),
        image_id: build.template(std.get(block, 'image_id', null)),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        name: build.template(block.name),
        overflow_behavior: build.template(std.get(block, 'overflow_behavior', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      base_capacity: resource.field('base_capacity'),
      compute_type: resource.field('compute_type'),
      created: resource.field('created'),
      environment_type: resource.field('environment_type'),
      fleet_service_role: resource.field('fleet_service_role'),
      id: resource.field('id'),
      image_id: resource.field('image_id'),
      last_modified: resource.field('last_modified'),
      name: resource.field('name'),
      overflow_behavior: resource.field('overflow_behavior'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    codebuild_project(name, block): {
      local resource = blockType.resource('aws_codebuild_project', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        badge_enabled: build.template(std.get(block, 'badge_enabled', null)),
        badge_url: build.template(std.get(block, 'badge_url', null)),
        build_timeout: build.template(std.get(block, 'build_timeout', null)),
        concurrent_build_limit: build.template(std.get(block, 'concurrent_build_limit', null)),
        description: build.template(std.get(block, 'description', null)),
        encryption_key: build.template(std.get(block, 'encryption_key', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project_visibility: build.template(std.get(block, 'project_visibility', null)),
        public_project_alias: build.template(std.get(block, 'public_project_alias', null)),
        queued_timeout: build.template(std.get(block, 'queued_timeout', null)),
        resource_access_role: build.template(std.get(block, 'resource_access_role', null)),
        service_role: build.template(block.service_role),
        source_version: build.template(std.get(block, 'source_version', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      badge_enabled: resource.field('badge_enabled'),
      badge_url: resource.field('badge_url'),
      build_timeout: resource.field('build_timeout'),
      concurrent_build_limit: resource.field('concurrent_build_limit'),
      description: resource.field('description'),
      encryption_key: resource.field('encryption_key'),
      id: resource.field('id'),
      name: resource.field('name'),
      project_visibility: resource.field('project_visibility'),
      public_project_alias: resource.field('public_project_alias'),
      queued_timeout: resource.field('queued_timeout'),
      resource_access_role: resource.field('resource_access_role'),
      service_role: resource.field('service_role'),
      source_version: resource.field('source_version'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    codebuild_report_group(name, block): {
      local resource = blockType.resource('aws_codebuild_report_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created: build.template(std.get(block, 'created', null)),
        delete_reports: build.template(std.get(block, 'delete_reports', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      created: resource.field('created'),
      delete_reports: resource.field('delete_reports'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    codebuild_resource_policy(name, block): {
      local resource = blockType.resource('aws_codebuild_resource_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        resource_arn: build.template(block.resource_arn),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      resource_arn: resource.field('resource_arn'),
    },
    codebuild_source_credential(name, block): {
      local resource = blockType.resource('aws_codebuild_source_credential', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auth_type: build.template(block.auth_type),
        id: build.template(std.get(block, 'id', null)),
        server_type: build.template(block.server_type),
        token: build.template(block.token),
        user_name: build.template(std.get(block, 'user_name', null)),
      }),
      arn: resource.field('arn'),
      auth_type: resource.field('auth_type'),
      id: resource.field('id'),
      server_type: resource.field('server_type'),
      token: resource.field('token'),
      user_name: resource.field('user_name'),
    },
    codebuild_webhook(name, block): {
      local resource = blockType.resource('aws_codebuild_webhook', name),
      _: resource._(block, {
        branch_filter: build.template(std.get(block, 'branch_filter', null)),
        build_type: build.template(std.get(block, 'build_type', null)),
        id: build.template(std.get(block, 'id', null)),
        payload_url: build.template(std.get(block, 'payload_url', null)),
        project_name: build.template(block.project_name),
        secret: build.template(std.get(block, 'secret', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      branch_filter: resource.field('branch_filter'),
      build_type: resource.field('build_type'),
      id: resource.field('id'),
      payload_url: resource.field('payload_url'),
      project_name: resource.field('project_name'),
      secret: resource.field('secret'),
      url: resource.field('url'),
    },
    codecatalyst_dev_environment(name, block): {
      local resource = blockType.resource('aws_codecatalyst_dev_environment', name),
      _: resource._(block, {
        alias: build.template(std.get(block, 'alias', null)),
        id: build.template(std.get(block, 'id', null)),
        inactivity_timeout_minutes: build.template(std.get(block, 'inactivity_timeout_minutes', null)),
        instance_type: build.template(block.instance_type),
        project_name: build.template(block.project_name),
        space_name: build.template(block.space_name),
      }),
      alias: resource.field('alias'),
      id: resource.field('id'),
      inactivity_timeout_minutes: resource.field('inactivity_timeout_minutes'),
      instance_type: resource.field('instance_type'),
      project_name: resource.field('project_name'),
      space_name: resource.field('space_name'),
    },
    codecatalyst_project(name, block): {
      local resource = blockType.resource('aws_codecatalyst_project', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        space_name: build.template(block.space_name),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      space_name: resource.field('space_name'),
    },
    codecatalyst_source_repository(name, block): {
      local resource = blockType.resource('aws_codecatalyst_source_repository', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project_name: build.template(block.project_name),
        space_name: build.template(block.space_name),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      project_name: resource.field('project_name'),
      space_name: resource.field('space_name'),
    },
    codecommit_approval_rule_template(name, block): {
      local resource = blockType.resource('aws_codecommit_approval_rule_template', name),
      _: resource._(block, {
        approval_rule_template_id: build.template(std.get(block, 'approval_rule_template_id', null)),
        content: build.template(block.content),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified_date: build.template(std.get(block, 'last_modified_date', null)),
        last_modified_user: build.template(std.get(block, 'last_modified_user', null)),
        name: build.template(block.name),
        rule_content_sha256: build.template(std.get(block, 'rule_content_sha256', null)),
      }),
      approval_rule_template_id: resource.field('approval_rule_template_id'),
      content: resource.field('content'),
      creation_date: resource.field('creation_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_modified_date: resource.field('last_modified_date'),
      last_modified_user: resource.field('last_modified_user'),
      name: resource.field('name'),
      rule_content_sha256: resource.field('rule_content_sha256'),
    },
    codecommit_approval_rule_template_association(name, block): {
      local resource = blockType.resource('aws_codecommit_approval_rule_template_association', name),
      _: resource._(block, {
        approval_rule_template_name: build.template(block.approval_rule_template_name),
        id: build.template(std.get(block, 'id', null)),
        repository_name: build.template(block.repository_name),
      }),
      approval_rule_template_name: resource.field('approval_rule_template_name'),
      id: resource.field('id'),
      repository_name: resource.field('repository_name'),
    },
    codecommit_repository(name, block): {
      local resource = blockType.resource('aws_codecommit_repository', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        clone_url_http: build.template(std.get(block, 'clone_url_http', null)),
        clone_url_ssh: build.template(std.get(block, 'clone_url_ssh', null)),
        default_branch: build.template(std.get(block, 'default_branch', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        repository_id: build.template(std.get(block, 'repository_id', null)),
        repository_name: build.template(block.repository_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      clone_url_http: resource.field('clone_url_http'),
      clone_url_ssh: resource.field('clone_url_ssh'),
      default_branch: resource.field('default_branch'),
      description: resource.field('description'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      repository_id: resource.field('repository_id'),
      repository_name: resource.field('repository_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    codecommit_trigger(name, block): {
      local resource = blockType.resource('aws_codecommit_trigger', name),
      _: resource._(block, {
        configuration_id: build.template(std.get(block, 'configuration_id', null)),
        id: build.template(std.get(block, 'id', null)),
        repository_name: build.template(block.repository_name),
      }),
      configuration_id: resource.field('configuration_id'),
      id: resource.field('id'),
      repository_name: resource.field('repository_name'),
    },
    codedeploy_app(name, block): {
      local resource = blockType.resource('aws_codedeploy_app', name),
      _: resource._(block, {
        application_id: build.template(std.get(block, 'application_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        compute_platform: build.template(std.get(block, 'compute_platform', null)),
        github_account_name: build.template(std.get(block, 'github_account_name', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_to_github: build.template(std.get(block, 'linked_to_github', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      application_id: resource.field('application_id'),
      arn: resource.field('arn'),
      compute_platform: resource.field('compute_platform'),
      github_account_name: resource.field('github_account_name'),
      id: resource.field('id'),
      linked_to_github: resource.field('linked_to_github'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    codedeploy_deployment_config(name, block): {
      local resource = blockType.resource('aws_codedeploy_deployment_config', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        compute_platform: build.template(std.get(block, 'compute_platform', null)),
        deployment_config_id: build.template(std.get(block, 'deployment_config_id', null)),
        deployment_config_name: build.template(block.deployment_config_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      arn: resource.field('arn'),
      compute_platform: resource.field('compute_platform'),
      deployment_config_id: resource.field('deployment_config_id'),
      deployment_config_name: resource.field('deployment_config_name'),
      id: resource.field('id'),
    },
    codedeploy_deployment_group(name, block): {
      local resource = blockType.resource('aws_codedeploy_deployment_group', name),
      _: resource._(block, {
        app_name: build.template(block.app_name),
        arn: build.template(std.get(block, 'arn', null)),
        autoscaling_groups: build.template(std.get(block, 'autoscaling_groups', null)),
        compute_platform: build.template(std.get(block, 'compute_platform', null)),
        deployment_config_name: build.template(std.get(block, 'deployment_config_name', null)),
        deployment_group_id: build.template(std.get(block, 'deployment_group_id', null)),
        deployment_group_name: build.template(block.deployment_group_name),
        id: build.template(std.get(block, 'id', null)),
        outdated_instances_strategy: build.template(std.get(block, 'outdated_instances_strategy', null)),
        service_role_arn: build.template(block.service_role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        termination_hook_enabled: build.template(std.get(block, 'termination_hook_enabled', null)),
      }),
      app_name: resource.field('app_name'),
      arn: resource.field('arn'),
      autoscaling_groups: resource.field('autoscaling_groups'),
      compute_platform: resource.field('compute_platform'),
      deployment_config_name: resource.field('deployment_config_name'),
      deployment_group_id: resource.field('deployment_group_id'),
      deployment_group_name: resource.field('deployment_group_name'),
      id: resource.field('id'),
      outdated_instances_strategy: resource.field('outdated_instances_strategy'),
      service_role_arn: resource.field('service_role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      termination_hook_enabled: resource.field('termination_hook_enabled'),
    },
    codeguruprofiler_profiling_group(name, block): {
      local resource = blockType.resource('aws_codeguruprofiler_profiling_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        compute_platform: build.template(std.get(block, 'compute_platform', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      compute_platform: resource.field('compute_platform'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    codegurureviewer_repository_association(name, block): {
      local resource = blockType.resource('aws_codegurureviewer_repository_association', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        association_id: build.template(std.get(block, 'association_id', null)),
        connection_arn: build.template(std.get(block, 'connection_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        owner: build.template(std.get(block, 'owner', null)),
        provider_type: build.template(std.get(block, 'provider_type', null)),
        s3_repository_details: build.template(std.get(block, 's3_repository_details', null)),
        state: build.template(std.get(block, 'state', null)),
        state_reason: build.template(std.get(block, 'state_reason', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      association_id: resource.field('association_id'),
      connection_arn: resource.field('connection_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      provider_type: resource.field('provider_type'),
      s3_repository_details: resource.field('s3_repository_details'),
      state: resource.field('state'),
      state_reason: resource.field('state_reason'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    codepipeline(name, block): {
      local resource = blockType.resource('aws_codepipeline', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        execution_mode: build.template(std.get(block, 'execution_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        pipeline_type: build.template(std.get(block, 'pipeline_type', null)),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      execution_mode: resource.field('execution_mode'),
      id: resource.field('id'),
      name: resource.field('name'),
      pipeline_type: resource.field('pipeline_type'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    codepipeline_custom_action_type(name, block): {
      local resource = blockType.resource('aws_codepipeline_custom_action_type', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        category: build.template(block.category),
        id: build.template(std.get(block, 'id', null)),
        owner: build.template(std.get(block, 'owner', null)),
        provider_name: build.template(block.provider_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(block.version),
      }),
      arn: resource.field('arn'),
      category: resource.field('category'),
      id: resource.field('id'),
      owner: resource.field('owner'),
      provider_name: resource.field('provider_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    codepipeline_webhook(name, block): {
      local resource = blockType.resource('aws_codepipeline_webhook', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        authentication: build.template(block.authentication),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_action: build.template(block.target_action),
        target_pipeline: build.template(block.target_pipeline),
        url: build.template(std.get(block, 'url', null)),
      }),
      arn: resource.field('arn'),
      authentication: resource.field('authentication'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_action: resource.field('target_action'),
      target_pipeline: resource.field('target_pipeline'),
      url: resource.field('url'),
    },
    codestarconnections_connection(name, block): {
      local resource = blockType.resource('aws_codestarconnections_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        connection_status: build.template(std.get(block, 'connection_status', null)),
        host_arn: build.template(std.get(block, 'host_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        provider_type: build.template(std.get(block, 'provider_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      connection_status: resource.field('connection_status'),
      host_arn: resource.field('host_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      provider_type: resource.field('provider_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    codestarconnections_host(name, block): {
      local resource = blockType.resource('aws_codestarconnections_host', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        provider_endpoint: build.template(block.provider_endpoint),
        provider_type: build.template(block.provider_type),
        status: build.template(std.get(block, 'status', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      provider_endpoint: resource.field('provider_endpoint'),
      provider_type: resource.field('provider_type'),
      status: resource.field('status'),
    },
    codestarnotifications_notification_rule(name, block): {
      local resource = blockType.resource('aws_codestarnotifications_notification_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        detail_type: build.template(block.detail_type),
        event_type_ids: build.template(block.event_type_ids),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource: build.template(block.resource),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      detail_type: resource.field('detail_type'),
      event_type_ids: resource.field('event_type_ids'),
      id: resource.field('id'),
      name: resource.field('name'),
      resource: resource.field('resource'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    cognito_identity_pool(name, block): {
      local resource = blockType.resource('aws_cognito_identity_pool', name),
      _: resource._(block, {
        allow_classic_flow: build.template(std.get(block, 'allow_classic_flow', null)),
        allow_unauthenticated_identities: build.template(std.get(block, 'allow_unauthenticated_identities', null)),
        arn: build.template(std.get(block, 'arn', null)),
        developer_provider_name: build.template(std.get(block, 'developer_provider_name', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_pool_name: build.template(block.identity_pool_name),
        openid_connect_provider_arns: build.template(std.get(block, 'openid_connect_provider_arns', null)),
        saml_provider_arns: build.template(std.get(block, 'saml_provider_arns', null)),
        supported_login_providers: build.template(std.get(block, 'supported_login_providers', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      allow_classic_flow: resource.field('allow_classic_flow'),
      allow_unauthenticated_identities: resource.field('allow_unauthenticated_identities'),
      arn: resource.field('arn'),
      developer_provider_name: resource.field('developer_provider_name'),
      id: resource.field('id'),
      identity_pool_name: resource.field('identity_pool_name'),
      openid_connect_provider_arns: resource.field('openid_connect_provider_arns'),
      saml_provider_arns: resource.field('saml_provider_arns'),
      supported_login_providers: resource.field('supported_login_providers'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    cognito_identity_pool_provider_principal_tag(name, block): {
      local resource = blockType.resource('aws_cognito_identity_pool_provider_principal_tag', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity_pool_id: build.template(block.identity_pool_id),
        identity_provider_name: build.template(block.identity_provider_name),
        principal_tags: build.template(std.get(block, 'principal_tags', null)),
        use_defaults: build.template(std.get(block, 'use_defaults', null)),
      }),
      id: resource.field('id'),
      identity_pool_id: resource.field('identity_pool_id'),
      identity_provider_name: resource.field('identity_provider_name'),
      principal_tags: resource.field('principal_tags'),
      use_defaults: resource.field('use_defaults'),
    },
    cognito_identity_pool_roles_attachment(name, block): {
      local resource = blockType.resource('aws_cognito_identity_pool_roles_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity_pool_id: build.template(block.identity_pool_id),
        roles: build.template(block.roles),
      }),
      id: resource.field('id'),
      identity_pool_id: resource.field('identity_pool_id'),
      roles: resource.field('roles'),
    },
    cognito_identity_provider(name, block): {
      local resource = blockType.resource('aws_cognito_identity_provider', name),
      _: resource._(block, {
        attribute_mapping: build.template(std.get(block, 'attribute_mapping', null)),
        id: build.template(std.get(block, 'id', null)),
        idp_identifiers: build.template(std.get(block, 'idp_identifiers', null)),
        provider_details: build.template(block.provider_details),
        provider_name: build.template(block.provider_name),
        provider_type: build.template(block.provider_type),
        user_pool_id: build.template(block.user_pool_id),
      }),
      attribute_mapping: resource.field('attribute_mapping'),
      id: resource.field('id'),
      idp_identifiers: resource.field('idp_identifiers'),
      provider_details: resource.field('provider_details'),
      provider_name: resource.field('provider_name'),
      provider_type: resource.field('provider_type'),
      user_pool_id: resource.field('user_pool_id'),
    },
    cognito_managed_user_pool_client(name, block): {
      local resource = blockType.resource('aws_cognito_managed_user_pool_client', name),
      _: resource._(block, {
        access_token_validity: build.template(std.get(block, 'access_token_validity', null)),
        allowed_oauth_flows: build.template(std.get(block, 'allowed_oauth_flows', null)),
        allowed_oauth_flows_user_pool_client: build.template(std.get(block, 'allowed_oauth_flows_user_pool_client', null)),
        allowed_oauth_scopes: build.template(std.get(block, 'allowed_oauth_scopes', null)),
        auth_session_validity: build.template(std.get(block, 'auth_session_validity', null)),
        callback_urls: build.template(std.get(block, 'callback_urls', null)),
        client_secret: build.template(std.get(block, 'client_secret', null)),
        default_redirect_uri: build.template(std.get(block, 'default_redirect_uri', null)),
        enable_propagate_additional_user_context_data: build.template(std.get(block, 'enable_propagate_additional_user_context_data', null)),
        enable_token_revocation: build.template(std.get(block, 'enable_token_revocation', null)),
        explicit_auth_flows: build.template(std.get(block, 'explicit_auth_flows', null)),
        id: build.template(std.get(block, 'id', null)),
        id_token_validity: build.template(std.get(block, 'id_token_validity', null)),
        logout_urls: build.template(std.get(block, 'logout_urls', null)),
        name: build.template(std.get(block, 'name', null)),
        name_pattern: build.template(std.get(block, 'name_pattern', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        prevent_user_existence_errors: build.template(std.get(block, 'prevent_user_existence_errors', null)),
        read_attributes: build.template(std.get(block, 'read_attributes', null)),
        refresh_token_validity: build.template(std.get(block, 'refresh_token_validity', null)),
        supported_identity_providers: build.template(std.get(block, 'supported_identity_providers', null)),
        user_pool_id: build.template(block.user_pool_id),
        write_attributes: build.template(std.get(block, 'write_attributes', null)),
      }),
      access_token_validity: resource.field('access_token_validity'),
      allowed_oauth_flows: resource.field('allowed_oauth_flows'),
      allowed_oauth_flows_user_pool_client: resource.field('allowed_oauth_flows_user_pool_client'),
      allowed_oauth_scopes: resource.field('allowed_oauth_scopes'),
      auth_session_validity: resource.field('auth_session_validity'),
      callback_urls: resource.field('callback_urls'),
      client_secret: resource.field('client_secret'),
      default_redirect_uri: resource.field('default_redirect_uri'),
      enable_propagate_additional_user_context_data: resource.field('enable_propagate_additional_user_context_data'),
      enable_token_revocation: resource.field('enable_token_revocation'),
      explicit_auth_flows: resource.field('explicit_auth_flows'),
      id: resource.field('id'),
      id_token_validity: resource.field('id_token_validity'),
      logout_urls: resource.field('logout_urls'),
      name: resource.field('name'),
      name_pattern: resource.field('name_pattern'),
      name_prefix: resource.field('name_prefix'),
      prevent_user_existence_errors: resource.field('prevent_user_existence_errors'),
      read_attributes: resource.field('read_attributes'),
      refresh_token_validity: resource.field('refresh_token_validity'),
      supported_identity_providers: resource.field('supported_identity_providers'),
      user_pool_id: resource.field('user_pool_id'),
      write_attributes: resource.field('write_attributes'),
    },
    cognito_resource_server(name, block): {
      local resource = blockType.resource('aws_cognito_resource_server', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identifier: build.template(block.identifier),
        name: build.template(block.name),
        scope_identifiers: build.template(std.get(block, 'scope_identifiers', null)),
        user_pool_id: build.template(block.user_pool_id),
      }),
      id: resource.field('id'),
      identifier: resource.field('identifier'),
      name: resource.field('name'),
      scope_identifiers: resource.field('scope_identifiers'),
      user_pool_id: resource.field('user_pool_id'),
    },
    cognito_risk_configuration(name, block): {
      local resource = blockType.resource('aws_cognito_risk_configuration', name),
      _: resource._(block, {
        client_id: build.template(std.get(block, 'client_id', null)),
        id: build.template(std.get(block, 'id', null)),
        user_pool_id: build.template(block.user_pool_id),
      }),
      client_id: resource.field('client_id'),
      id: resource.field('id'),
      user_pool_id: resource.field('user_pool_id'),
    },
    cognito_user(name, block): {
      local resource = blockType.resource('aws_cognito_user', name),
      _: resource._(block, {
        attributes: build.template(std.get(block, 'attributes', null)),
        client_metadata: build.template(std.get(block, 'client_metadata', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        desired_delivery_mediums: build.template(std.get(block, 'desired_delivery_mediums', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        force_alias_creation: build.template(std.get(block, 'force_alias_creation', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified_date: build.template(std.get(block, 'last_modified_date', null)),
        message_action: build.template(std.get(block, 'message_action', null)),
        mfa_setting_list: build.template(std.get(block, 'mfa_setting_list', null)),
        password: build.template(std.get(block, 'password', null)),
        preferred_mfa_setting: build.template(std.get(block, 'preferred_mfa_setting', null)),
        status: build.template(std.get(block, 'status', null)),
        sub: build.template(std.get(block, 'sub', null)),
        temporary_password: build.template(std.get(block, 'temporary_password', null)),
        user_pool_id: build.template(block.user_pool_id),
        username: build.template(block.username),
        validation_data: build.template(std.get(block, 'validation_data', null)),
      }),
      attributes: resource.field('attributes'),
      client_metadata: resource.field('client_metadata'),
      creation_date: resource.field('creation_date'),
      desired_delivery_mediums: resource.field('desired_delivery_mediums'),
      enabled: resource.field('enabled'),
      force_alias_creation: resource.field('force_alias_creation'),
      id: resource.field('id'),
      last_modified_date: resource.field('last_modified_date'),
      message_action: resource.field('message_action'),
      mfa_setting_list: resource.field('mfa_setting_list'),
      password: resource.field('password'),
      preferred_mfa_setting: resource.field('preferred_mfa_setting'),
      status: resource.field('status'),
      sub: resource.field('sub'),
      temporary_password: resource.field('temporary_password'),
      user_pool_id: resource.field('user_pool_id'),
      username: resource.field('username'),
      validation_data: resource.field('validation_data'),
    },
    cognito_user_group(name, block): {
      local resource = blockType.resource('aws_cognito_user_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        precedence: build.template(std.get(block, 'precedence', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        user_pool_id: build.template(block.user_pool_id),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      precedence: resource.field('precedence'),
      role_arn: resource.field('role_arn'),
      user_pool_id: resource.field('user_pool_id'),
    },
    cognito_user_in_group(name, block): {
      local resource = blockType.resource('aws_cognito_user_in_group', name),
      _: resource._(block, {
        group_name: build.template(block.group_name),
        id: build.template(std.get(block, 'id', null)),
        user_pool_id: build.template(block.user_pool_id),
        username: build.template(block.username),
      }),
      group_name: resource.field('group_name'),
      id: resource.field('id'),
      user_pool_id: resource.field('user_pool_id'),
      username: resource.field('username'),
    },
    cognito_user_pool(name, block): {
      local resource = blockType.resource('aws_cognito_user_pool', name),
      _: resource._(block, {
        alias_attributes: build.template(std.get(block, 'alias_attributes', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_verified_attributes: build.template(std.get(block, 'auto_verified_attributes', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        custom_domain: build.template(std.get(block, 'custom_domain', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        domain: build.template(std.get(block, 'domain', null)),
        email_verification_message: build.template(std.get(block, 'email_verification_message', null)),
        email_verification_subject: build.template(std.get(block, 'email_verification_subject', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        estimated_number_of_users: build.template(std.get(block, 'estimated_number_of_users', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified_date: build.template(std.get(block, 'last_modified_date', null)),
        mfa_configuration: build.template(std.get(block, 'mfa_configuration', null)),
        name: build.template(block.name),
        sms_authentication_message: build.template(std.get(block, 'sms_authentication_message', null)),
        sms_verification_message: build.template(std.get(block, 'sms_verification_message', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        username_attributes: build.template(std.get(block, 'username_attributes', null)),
      }),
      alias_attributes: resource.field('alias_attributes'),
      arn: resource.field('arn'),
      auto_verified_attributes: resource.field('auto_verified_attributes'),
      creation_date: resource.field('creation_date'),
      custom_domain: resource.field('custom_domain'),
      deletion_protection: resource.field('deletion_protection'),
      domain: resource.field('domain'),
      email_verification_message: resource.field('email_verification_message'),
      email_verification_subject: resource.field('email_verification_subject'),
      endpoint: resource.field('endpoint'),
      estimated_number_of_users: resource.field('estimated_number_of_users'),
      id: resource.field('id'),
      last_modified_date: resource.field('last_modified_date'),
      mfa_configuration: resource.field('mfa_configuration'),
      name: resource.field('name'),
      sms_authentication_message: resource.field('sms_authentication_message'),
      sms_verification_message: resource.field('sms_verification_message'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      username_attributes: resource.field('username_attributes'),
    },
    cognito_user_pool_client(name, block): {
      local resource = blockType.resource('aws_cognito_user_pool_client', name),
      _: resource._(block, {
        access_token_validity: build.template(std.get(block, 'access_token_validity', null)),
        allowed_oauth_flows: build.template(std.get(block, 'allowed_oauth_flows', null)),
        allowed_oauth_flows_user_pool_client: build.template(std.get(block, 'allowed_oauth_flows_user_pool_client', null)),
        allowed_oauth_scopes: build.template(std.get(block, 'allowed_oauth_scopes', null)),
        auth_session_validity: build.template(std.get(block, 'auth_session_validity', null)),
        callback_urls: build.template(std.get(block, 'callback_urls', null)),
        client_secret: build.template(std.get(block, 'client_secret', null)),
        default_redirect_uri: build.template(std.get(block, 'default_redirect_uri', null)),
        enable_propagate_additional_user_context_data: build.template(std.get(block, 'enable_propagate_additional_user_context_data', null)),
        enable_token_revocation: build.template(std.get(block, 'enable_token_revocation', null)),
        explicit_auth_flows: build.template(std.get(block, 'explicit_auth_flows', null)),
        generate_secret: build.template(std.get(block, 'generate_secret', null)),
        id: build.template(std.get(block, 'id', null)),
        id_token_validity: build.template(std.get(block, 'id_token_validity', null)),
        logout_urls: build.template(std.get(block, 'logout_urls', null)),
        name: build.template(block.name),
        prevent_user_existence_errors: build.template(std.get(block, 'prevent_user_existence_errors', null)),
        read_attributes: build.template(std.get(block, 'read_attributes', null)),
        refresh_token_validity: build.template(std.get(block, 'refresh_token_validity', null)),
        supported_identity_providers: build.template(std.get(block, 'supported_identity_providers', null)),
        user_pool_id: build.template(block.user_pool_id),
        write_attributes: build.template(std.get(block, 'write_attributes', null)),
      }),
      access_token_validity: resource.field('access_token_validity'),
      allowed_oauth_flows: resource.field('allowed_oauth_flows'),
      allowed_oauth_flows_user_pool_client: resource.field('allowed_oauth_flows_user_pool_client'),
      allowed_oauth_scopes: resource.field('allowed_oauth_scopes'),
      auth_session_validity: resource.field('auth_session_validity'),
      callback_urls: resource.field('callback_urls'),
      client_secret: resource.field('client_secret'),
      default_redirect_uri: resource.field('default_redirect_uri'),
      enable_propagate_additional_user_context_data: resource.field('enable_propagate_additional_user_context_data'),
      enable_token_revocation: resource.field('enable_token_revocation'),
      explicit_auth_flows: resource.field('explicit_auth_flows'),
      generate_secret: resource.field('generate_secret'),
      id: resource.field('id'),
      id_token_validity: resource.field('id_token_validity'),
      logout_urls: resource.field('logout_urls'),
      name: resource.field('name'),
      prevent_user_existence_errors: resource.field('prevent_user_existence_errors'),
      read_attributes: resource.field('read_attributes'),
      refresh_token_validity: resource.field('refresh_token_validity'),
      supported_identity_providers: resource.field('supported_identity_providers'),
      user_pool_id: resource.field('user_pool_id'),
      write_attributes: resource.field('write_attributes'),
    },
    cognito_user_pool_domain(name, block): {
      local resource = blockType.resource('aws_cognito_user_pool_domain', name),
      _: resource._(block, {
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        cloudfront_distribution: build.template(std.get(block, 'cloudfront_distribution', null)),
        cloudfront_distribution_arn: build.template(std.get(block, 'cloudfront_distribution_arn', null)),
        cloudfront_distribution_zone_id: build.template(std.get(block, 'cloudfront_distribution_zone_id', null)),
        domain: build.template(block.domain),
        id: build.template(std.get(block, 'id', null)),
        s3_bucket: build.template(std.get(block, 's3_bucket', null)),
        user_pool_id: build.template(block.user_pool_id),
        version: build.template(std.get(block, 'version', null)),
      }),
      aws_account_id: resource.field('aws_account_id'),
      certificate_arn: resource.field('certificate_arn'),
      cloudfront_distribution: resource.field('cloudfront_distribution'),
      cloudfront_distribution_arn: resource.field('cloudfront_distribution_arn'),
      cloudfront_distribution_zone_id: resource.field('cloudfront_distribution_zone_id'),
      domain: resource.field('domain'),
      id: resource.field('id'),
      s3_bucket: resource.field('s3_bucket'),
      user_pool_id: resource.field('user_pool_id'),
      version: resource.field('version'),
    },
    cognito_user_pool_ui_customization(name, block): {
      local resource = blockType.resource('aws_cognito_user_pool_ui_customization', name),
      _: resource._(block, {
        client_id: build.template(std.get(block, 'client_id', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        css: build.template(std.get(block, 'css', null)),
        css_version: build.template(std.get(block, 'css_version', null)),
        id: build.template(std.get(block, 'id', null)),
        image_file: build.template(std.get(block, 'image_file', null)),
        image_url: build.template(std.get(block, 'image_url', null)),
        last_modified_date: build.template(std.get(block, 'last_modified_date', null)),
        user_pool_id: build.template(block.user_pool_id),
      }),
      client_id: resource.field('client_id'),
      creation_date: resource.field('creation_date'),
      css: resource.field('css'),
      css_version: resource.field('css_version'),
      id: resource.field('id'),
      image_file: resource.field('image_file'),
      image_url: resource.field('image_url'),
      last_modified_date: resource.field('last_modified_date'),
      user_pool_id: resource.field('user_pool_id'),
    },
    comprehend_document_classifier(name, block): {
      local resource = blockType.resource('aws_comprehend_document_classifier', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        data_access_role_arn: build.template(block.data_access_role_arn),
        id: build.template(std.get(block, 'id', null)),
        language_code: build.template(block.language_code),
        mode: build.template(std.get(block, 'mode', null)),
        model_kms_key_id: build.template(std.get(block, 'model_kms_key_id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version_name: build.template(std.get(block, 'version_name', null)),
        version_name_prefix: build.template(std.get(block, 'version_name_prefix', null)),
        volume_kms_key_id: build.template(std.get(block, 'volume_kms_key_id', null)),
      }),
      arn: resource.field('arn'),
      data_access_role_arn: resource.field('data_access_role_arn'),
      id: resource.field('id'),
      language_code: resource.field('language_code'),
      mode: resource.field('mode'),
      model_kms_key_id: resource.field('model_kms_key_id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version_name: resource.field('version_name'),
      version_name_prefix: resource.field('version_name_prefix'),
      volume_kms_key_id: resource.field('volume_kms_key_id'),
    },
    comprehend_entity_recognizer(name, block): {
      local resource = blockType.resource('aws_comprehend_entity_recognizer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        data_access_role_arn: build.template(block.data_access_role_arn),
        id: build.template(std.get(block, 'id', null)),
        language_code: build.template(block.language_code),
        model_kms_key_id: build.template(std.get(block, 'model_kms_key_id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version_name: build.template(std.get(block, 'version_name', null)),
        version_name_prefix: build.template(std.get(block, 'version_name_prefix', null)),
        volume_kms_key_id: build.template(std.get(block, 'volume_kms_key_id', null)),
      }),
      arn: resource.field('arn'),
      data_access_role_arn: resource.field('data_access_role_arn'),
      id: resource.field('id'),
      language_code: resource.field('language_code'),
      model_kms_key_id: resource.field('model_kms_key_id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version_name: resource.field('version_name'),
      version_name_prefix: resource.field('version_name_prefix'),
      volume_kms_key_id: resource.field('volume_kms_key_id'),
    },
    computeoptimizer_enrollment_status(name, block): {
      local resource = blockType.resource('aws_computeoptimizer_enrollment_status', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        include_member_accounts: build.template(std.get(block, 'include_member_accounts', null)),
        number_of_member_accounts_opted_in: build.template(std.get(block, 'number_of_member_accounts_opted_in', null)),
        status: build.template(block.status),
      }),
      id: resource.field('id'),
      include_member_accounts: resource.field('include_member_accounts'),
      number_of_member_accounts_opted_in: resource.field('number_of_member_accounts_opted_in'),
      status: resource.field('status'),
    },
    computeoptimizer_recommendation_preferences(name, block): {
      local resource = blockType.resource('aws_computeoptimizer_recommendation_preferences', name),
      _: resource._(block, {
        enhanced_infrastructure_metrics: build.template(std.get(block, 'enhanced_infrastructure_metrics', null)),
        id: build.template(std.get(block, 'id', null)),
        inferred_workload_types: build.template(std.get(block, 'inferred_workload_types', null)),
        look_back_period: build.template(std.get(block, 'look_back_period', null)),
        resource_type: build.template(block.resource_type),
        savings_estimation_mode: build.template(std.get(block, 'savings_estimation_mode', null)),
      }),
      enhanced_infrastructure_metrics: resource.field('enhanced_infrastructure_metrics'),
      id: resource.field('id'),
      inferred_workload_types: resource.field('inferred_workload_types'),
      look_back_period: resource.field('look_back_period'),
      resource_type: resource.field('resource_type'),
      savings_estimation_mode: resource.field('savings_estimation_mode'),
    },
    config_aggregate_authorization(name, block): {
      local resource = blockType.resource('aws_config_aggregate_authorization', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        region: build.template(block.region),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      account_id: resource.field('account_id'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      region: resource.field('region'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    config_config_rule(name, block): {
      local resource = blockType.resource('aws_config_config_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        input_parameters: build.template(std.get(block, 'input_parameters', null)),
        maximum_execution_frequency: build.template(std.get(block, 'maximum_execution_frequency', null)),
        name: build.template(block.name),
        rule_id: build.template(std.get(block, 'rule_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      input_parameters: resource.field('input_parameters'),
      maximum_execution_frequency: resource.field('maximum_execution_frequency'),
      name: resource.field('name'),
      rule_id: resource.field('rule_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    config_configuration_aggregator(name, block): {
      local resource = blockType.resource('aws_config_configuration_aggregator', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    config_configuration_recorder(name, block): {
      local resource = blockType.resource('aws_config_configuration_recorder', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        role_arn: build.template(block.role_arn),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
    },
    config_configuration_recorder_status(name, block): {
      local resource = blockType.resource('aws_config_configuration_recorder_status', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        is_enabled: build.template(block.is_enabled),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      is_enabled: resource.field('is_enabled'),
      name: resource.field('name'),
    },
    config_conformance_pack(name, block): {
      local resource = blockType.resource('aws_config_conformance_pack', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        delivery_s3_bucket: build.template(std.get(block, 'delivery_s3_bucket', null)),
        delivery_s3_key_prefix: build.template(std.get(block, 'delivery_s3_key_prefix', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        template_body: build.template(std.get(block, 'template_body', null)),
        template_s3_uri: build.template(std.get(block, 'template_s3_uri', null)),
      }),
      arn: resource.field('arn'),
      delivery_s3_bucket: resource.field('delivery_s3_bucket'),
      delivery_s3_key_prefix: resource.field('delivery_s3_key_prefix'),
      id: resource.field('id'),
      name: resource.field('name'),
      template_body: resource.field('template_body'),
      template_s3_uri: resource.field('template_s3_uri'),
    },
    config_delivery_channel(name, block): {
      local resource = blockType.resource('aws_config_delivery_channel', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        s3_bucket_name: build.template(block.s3_bucket_name),
        s3_key_prefix: build.template(std.get(block, 's3_key_prefix', null)),
        s3_kms_key_arn: build.template(std.get(block, 's3_kms_key_arn', null)),
        sns_topic_arn: build.template(std.get(block, 'sns_topic_arn', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      s3_bucket_name: resource.field('s3_bucket_name'),
      s3_key_prefix: resource.field('s3_key_prefix'),
      s3_kms_key_arn: resource.field('s3_kms_key_arn'),
      sns_topic_arn: resource.field('sns_topic_arn'),
    },
    config_organization_conformance_pack(name, block): {
      local resource = blockType.resource('aws_config_organization_conformance_pack', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        delivery_s3_bucket: build.template(std.get(block, 'delivery_s3_bucket', null)),
        delivery_s3_key_prefix: build.template(std.get(block, 'delivery_s3_key_prefix', null)),
        excluded_accounts: build.template(std.get(block, 'excluded_accounts', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        template_body: build.template(std.get(block, 'template_body', null)),
        template_s3_uri: build.template(std.get(block, 'template_s3_uri', null)),
      }),
      arn: resource.field('arn'),
      delivery_s3_bucket: resource.field('delivery_s3_bucket'),
      delivery_s3_key_prefix: resource.field('delivery_s3_key_prefix'),
      excluded_accounts: resource.field('excluded_accounts'),
      id: resource.field('id'),
      name: resource.field('name'),
      template_body: resource.field('template_body'),
      template_s3_uri: resource.field('template_s3_uri'),
    },
    config_organization_custom_policy_rule(name, block): {
      local resource = blockType.resource('aws_config_organization_custom_policy_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        debug_log_delivery_accounts: build.template(std.get(block, 'debug_log_delivery_accounts', null)),
        description: build.template(std.get(block, 'description', null)),
        excluded_accounts: build.template(std.get(block, 'excluded_accounts', null)),
        id: build.template(std.get(block, 'id', null)),
        input_parameters: build.template(std.get(block, 'input_parameters', null)),
        maximum_execution_frequency: build.template(std.get(block, 'maximum_execution_frequency', null)),
        name: build.template(block.name),
        policy_runtime: build.template(block.policy_runtime),
        policy_text: build.template(block.policy_text),
        resource_id_scope: build.template(std.get(block, 'resource_id_scope', null)),
        resource_types_scope: build.template(std.get(block, 'resource_types_scope', null)),
        tag_key_scope: build.template(std.get(block, 'tag_key_scope', null)),
        tag_value_scope: build.template(std.get(block, 'tag_value_scope', null)),
        trigger_types: build.template(block.trigger_types),
      }),
      arn: resource.field('arn'),
      debug_log_delivery_accounts: resource.field('debug_log_delivery_accounts'),
      description: resource.field('description'),
      excluded_accounts: resource.field('excluded_accounts'),
      id: resource.field('id'),
      input_parameters: resource.field('input_parameters'),
      maximum_execution_frequency: resource.field('maximum_execution_frequency'),
      name: resource.field('name'),
      policy_runtime: resource.field('policy_runtime'),
      policy_text: resource.field('policy_text'),
      resource_id_scope: resource.field('resource_id_scope'),
      resource_types_scope: resource.field('resource_types_scope'),
      tag_key_scope: resource.field('tag_key_scope'),
      tag_value_scope: resource.field('tag_value_scope'),
      trigger_types: resource.field('trigger_types'),
    },
    config_organization_custom_rule(name, block): {
      local resource = blockType.resource('aws_config_organization_custom_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        excluded_accounts: build.template(std.get(block, 'excluded_accounts', null)),
        id: build.template(std.get(block, 'id', null)),
        input_parameters: build.template(std.get(block, 'input_parameters', null)),
        lambda_function_arn: build.template(block.lambda_function_arn),
        maximum_execution_frequency: build.template(std.get(block, 'maximum_execution_frequency', null)),
        name: build.template(block.name),
        resource_id_scope: build.template(std.get(block, 'resource_id_scope', null)),
        resource_types_scope: build.template(std.get(block, 'resource_types_scope', null)),
        tag_key_scope: build.template(std.get(block, 'tag_key_scope', null)),
        tag_value_scope: build.template(std.get(block, 'tag_value_scope', null)),
        trigger_types: build.template(block.trigger_types),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      excluded_accounts: resource.field('excluded_accounts'),
      id: resource.field('id'),
      input_parameters: resource.field('input_parameters'),
      lambda_function_arn: resource.field('lambda_function_arn'),
      maximum_execution_frequency: resource.field('maximum_execution_frequency'),
      name: resource.field('name'),
      resource_id_scope: resource.field('resource_id_scope'),
      resource_types_scope: resource.field('resource_types_scope'),
      tag_key_scope: resource.field('tag_key_scope'),
      tag_value_scope: resource.field('tag_value_scope'),
      trigger_types: resource.field('trigger_types'),
    },
    config_organization_managed_rule(name, block): {
      local resource = blockType.resource('aws_config_organization_managed_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        excluded_accounts: build.template(std.get(block, 'excluded_accounts', null)),
        id: build.template(std.get(block, 'id', null)),
        input_parameters: build.template(std.get(block, 'input_parameters', null)),
        maximum_execution_frequency: build.template(std.get(block, 'maximum_execution_frequency', null)),
        name: build.template(block.name),
        resource_id_scope: build.template(std.get(block, 'resource_id_scope', null)),
        resource_types_scope: build.template(std.get(block, 'resource_types_scope', null)),
        rule_identifier: build.template(block.rule_identifier),
        tag_key_scope: build.template(std.get(block, 'tag_key_scope', null)),
        tag_value_scope: build.template(std.get(block, 'tag_value_scope', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      excluded_accounts: resource.field('excluded_accounts'),
      id: resource.field('id'),
      input_parameters: resource.field('input_parameters'),
      maximum_execution_frequency: resource.field('maximum_execution_frequency'),
      name: resource.field('name'),
      resource_id_scope: resource.field('resource_id_scope'),
      resource_types_scope: resource.field('resource_types_scope'),
      rule_identifier: resource.field('rule_identifier'),
      tag_key_scope: resource.field('tag_key_scope'),
      tag_value_scope: resource.field('tag_value_scope'),
    },
    config_remediation_configuration(name, block): {
      local resource = blockType.resource('aws_config_remediation_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        automatic: build.template(std.get(block, 'automatic', null)),
        config_rule_name: build.template(block.config_rule_name),
        id: build.template(std.get(block, 'id', null)),
        maximum_automatic_attempts: build.template(std.get(block, 'maximum_automatic_attempts', null)),
        resource_type: build.template(std.get(block, 'resource_type', null)),
        retry_attempt_seconds: build.template(std.get(block, 'retry_attempt_seconds', null)),
        target_id: build.template(block.target_id),
        target_type: build.template(block.target_type),
        target_version: build.template(std.get(block, 'target_version', null)),
      }),
      arn: resource.field('arn'),
      automatic: resource.field('automatic'),
      config_rule_name: resource.field('config_rule_name'),
      id: resource.field('id'),
      maximum_automatic_attempts: resource.field('maximum_automatic_attempts'),
      resource_type: resource.field('resource_type'),
      retry_attempt_seconds: resource.field('retry_attempt_seconds'),
      target_id: resource.field('target_id'),
      target_type: resource.field('target_type'),
      target_version: resource.field('target_version'),
    },
    config_retention_configuration(name, block): {
      local resource = blockType.resource('aws_config_retention_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        retention_period_in_days: build.template(block.retention_period_in_days),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      retention_period_in_days: resource.field('retention_period_in_days'),
    },
    connect_bot_association(name, block): {
      local resource = blockType.resource('aws_connect_bot_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
      }),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
    },
    connect_contact_flow(name, block): {
      local resource = blockType.resource('aws_connect_contact_flow', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        contact_flow_id: build.template(std.get(block, 'contact_flow_id', null)),
        content: build.template(std.get(block, 'content', null)),
        content_hash: build.template(std.get(block, 'content_hash', null)),
        description: build.template(std.get(block, 'description', null)),
        filename: build.template(std.get(block, 'filename', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      contact_flow_id: resource.field('contact_flow_id'),
      content: resource.field('content'),
      content_hash: resource.field('content_hash'),
      description: resource.field('description'),
      filename: resource.field('filename'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    connect_contact_flow_module(name, block): {
      local resource = blockType.resource('aws_connect_contact_flow_module', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        contact_flow_module_id: build.template(std.get(block, 'contact_flow_module_id', null)),
        content: build.template(std.get(block, 'content', null)),
        content_hash: build.template(std.get(block, 'content_hash', null)),
        description: build.template(std.get(block, 'description', null)),
        filename: build.template(std.get(block, 'filename', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      contact_flow_module_id: resource.field('contact_flow_module_id'),
      content: resource.field('content'),
      content_hash: resource.field('content_hash'),
      description: resource.field('description'),
      filename: resource.field('filename'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    connect_hours_of_operation(name, block): {
      local resource = blockType.resource('aws_connect_hours_of_operation', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        hours_of_operation_id: build.template(std.get(block, 'hours_of_operation_id', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        time_zone: build.template(block.time_zone),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      hours_of_operation_id: resource.field('hours_of_operation_id'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      time_zone: resource.field('time_zone'),
    },
    connect_instance(name, block): {
      local resource = blockType.resource('aws_connect_instance', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_resolve_best_voices_enabled: build.template(std.get(block, 'auto_resolve_best_voices_enabled', null)),
        contact_flow_logs_enabled: build.template(std.get(block, 'contact_flow_logs_enabled', null)),
        contact_lens_enabled: build.template(std.get(block, 'contact_lens_enabled', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        directory_id: build.template(std.get(block, 'directory_id', null)),
        early_media_enabled: build.template(std.get(block, 'early_media_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_management_type: build.template(block.identity_management_type),
        inbound_calls_enabled: build.template(block.inbound_calls_enabled),
        instance_alias: build.template(std.get(block, 'instance_alias', null)),
        multi_party_conference_enabled: build.template(std.get(block, 'multi_party_conference_enabled', null)),
        outbound_calls_enabled: build.template(block.outbound_calls_enabled),
        service_role: build.template(std.get(block, 'service_role', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      auto_resolve_best_voices_enabled: resource.field('auto_resolve_best_voices_enabled'),
      contact_flow_logs_enabled: resource.field('contact_flow_logs_enabled'),
      contact_lens_enabled: resource.field('contact_lens_enabled'),
      created_time: resource.field('created_time'),
      directory_id: resource.field('directory_id'),
      early_media_enabled: resource.field('early_media_enabled'),
      id: resource.field('id'),
      identity_management_type: resource.field('identity_management_type'),
      inbound_calls_enabled: resource.field('inbound_calls_enabled'),
      instance_alias: resource.field('instance_alias'),
      multi_party_conference_enabled: resource.field('multi_party_conference_enabled'),
      outbound_calls_enabled: resource.field('outbound_calls_enabled'),
      service_role: resource.field('service_role'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    connect_instance_storage_config(name, block): {
      local resource = blockType.resource('aws_connect_instance_storage_config', name),
      _: resource._(block, {
        association_id: build.template(std.get(block, 'association_id', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        resource_type: build.template(block.resource_type),
      }),
      association_id: resource.field('association_id'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      resource_type: resource.field('resource_type'),
    },
    connect_lambda_function_association(name, block): {
      local resource = blockType.resource('aws_connect_lambda_function_association', name),
      _: resource._(block, {
        function_arn: build.template(block.function_arn),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
      }),
      function_arn: resource.field('function_arn'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
    },
    connect_phone_number(name, block): {
      local resource = blockType.resource('aws_connect_phone_number', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        country_code: build.template(block.country_code),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        phone_number: build.template(std.get(block, 'phone_number', null)),
        prefix: build.template(std.get(block, 'prefix', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_arn: build.template(block.target_arn),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      country_code: resource.field('country_code'),
      description: resource.field('description'),
      id: resource.field('id'),
      phone_number: resource.field('phone_number'),
      prefix: resource.field('prefix'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_arn: resource.field('target_arn'),
      type: resource.field('type'),
    },
    connect_queue(name, block): {
      local resource = blockType.resource('aws_connect_queue', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        hours_of_operation_id: build.template(block.hours_of_operation_id),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        max_contacts: build.template(std.get(block, 'max_contacts', null)),
        name: build.template(block.name),
        queue_id: build.template(std.get(block, 'queue_id', null)),
        quick_connect_ids: build.template(std.get(block, 'quick_connect_ids', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      hours_of_operation_id: resource.field('hours_of_operation_id'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      max_contacts: resource.field('max_contacts'),
      name: resource.field('name'),
      queue_id: resource.field('queue_id'),
      quick_connect_ids: resource.field('quick_connect_ids'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    connect_quick_connect(name, block): {
      local resource = blockType.resource('aws_connect_quick_connect', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(block.name),
        quick_connect_id: build.template(std.get(block, 'quick_connect_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      quick_connect_id: resource.field('quick_connect_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    connect_routing_profile(name, block): {
      local resource = blockType.resource('aws_connect_routing_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_outbound_queue_id: build.template(block.default_outbound_queue_id),
        description: build.template(block.description),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(block.name),
        routing_profile_id: build.template(std.get(block, 'routing_profile_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      default_outbound_queue_id: resource.field('default_outbound_queue_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      routing_profile_id: resource.field('routing_profile_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    connect_security_profile(name, block): {
      local resource = blockType.resource('aws_connect_security_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(block.name),
        organization_resource_id: build.template(std.get(block, 'organization_resource_id', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
        security_profile_id: build.template(std.get(block, 'security_profile_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      organization_resource_id: resource.field('organization_resource_id'),
      permissions: resource.field('permissions'),
      security_profile_id: resource.field('security_profile_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    connect_user(name, block): {
      local resource = blockType.resource('aws_connect_user', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        directory_user_id: build.template(std.get(block, 'directory_user_id', null)),
        hierarchy_group_id: build.template(std.get(block, 'hierarchy_group_id', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(block.name),
        password: build.template(std.get(block, 'password', null)),
        routing_profile_id: build.template(block.routing_profile_id),
        security_profile_ids: build.template(block.security_profile_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_id: build.template(std.get(block, 'user_id', null)),
      }),
      arn: resource.field('arn'),
      directory_user_id: resource.field('directory_user_id'),
      hierarchy_group_id: resource.field('hierarchy_group_id'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      password: resource.field('password'),
      routing_profile_id: resource.field('routing_profile_id'),
      security_profile_ids: resource.field('security_profile_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_id: resource.field('user_id'),
    },
    connect_user_hierarchy_group(name, block): {
      local resource = blockType.resource('aws_connect_user_hierarchy_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        hierarchy_group_id: build.template(std.get(block, 'hierarchy_group_id', null)),
        hierarchy_path: build.template(std.get(block, 'hierarchy_path', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        level_id: build.template(std.get(block, 'level_id', null)),
        name: build.template(block.name),
        parent_group_id: build.template(std.get(block, 'parent_group_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      hierarchy_group_id: resource.field('hierarchy_group_id'),
      hierarchy_path: resource.field('hierarchy_path'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      level_id: resource.field('level_id'),
      name: resource.field('name'),
      parent_group_id: resource.field('parent_group_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    connect_user_hierarchy_structure(name, block): {
      local resource = blockType.resource('aws_connect_user_hierarchy_structure', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
      }),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
    },
    connect_vocabulary(name, block): {
      local resource = blockType.resource('aws_connect_vocabulary', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        content: build.template(block.content),
        failure_reason: build.template(std.get(block, 'failure_reason', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        language_code: build.template(block.language_code),
        last_modified_time: build.template(std.get(block, 'last_modified_time', null)),
        name: build.template(block.name),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vocabulary_id: build.template(std.get(block, 'vocabulary_id', null)),
      }),
      arn: resource.field('arn'),
      content: resource.field('content'),
      failure_reason: resource.field('failure_reason'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      language_code: resource.field('language_code'),
      last_modified_time: resource.field('last_modified_time'),
      name: resource.field('name'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vocabulary_id: resource.field('vocabulary_id'),
    },
    controltower_control(name, block): {
      local resource = blockType.resource('aws_controltower_control', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        control_identifier: build.template(block.control_identifier),
        id: build.template(std.get(block, 'id', null)),
        target_identifier: build.template(block.target_identifier),
      }),
      arn: resource.field('arn'),
      control_identifier: resource.field('control_identifier'),
      id: resource.field('id'),
      target_identifier: resource.field('target_identifier'),
    },
    controltower_landing_zone(name, block): {
      local resource = blockType.resource('aws_controltower_landing_zone', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        drift_status: build.template(std.get(block, 'drift_status', null)),
        id: build.template(std.get(block, 'id', null)),
        latest_available_version: build.template(std.get(block, 'latest_available_version', null)),
        manifest_json: build.template(block.manifest_json),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(block.version),
      }),
      arn: resource.field('arn'),
      drift_status: resource.field('drift_status'),
      id: resource.field('id'),
      latest_available_version: resource.field('latest_available_version'),
      manifest_json: resource.field('manifest_json'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    costoptimizationhub_enrollment_status(name, block): {
      local resource = blockType.resource('aws_costoptimizationhub_enrollment_status', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        include_member_accounts: build.template(std.get(block, 'include_member_accounts', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      id: resource.field('id'),
      include_member_accounts: resource.field('include_member_accounts'),
      status: resource.field('status'),
    },
    costoptimizationhub_preferences(name, block): {
      local resource = blockType.resource('aws_costoptimizationhub_preferences', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        member_account_discount_visibility: build.template(std.get(block, 'member_account_discount_visibility', null)),
        savings_estimation_mode: build.template(std.get(block, 'savings_estimation_mode', null)),
      }),
      id: resource.field('id'),
      member_account_discount_visibility: resource.field('member_account_discount_visibility'),
      savings_estimation_mode: resource.field('savings_estimation_mode'),
    },
    cur_report_definition(name, block): {
      local resource = blockType.resource('aws_cur_report_definition', name),
      _: resource._(block, {
        additional_artifacts: build.template(std.get(block, 'additional_artifacts', null)),
        additional_schema_elements: build.template(block.additional_schema_elements),
        arn: build.template(std.get(block, 'arn', null)),
        compression: build.template(block.compression),
        format: build.template(block.format),
        id: build.template(std.get(block, 'id', null)),
        refresh_closed_reports: build.template(std.get(block, 'refresh_closed_reports', null)),
        report_name: build.template(block.report_name),
        report_versioning: build.template(std.get(block, 'report_versioning', null)),
        s3_bucket: build.template(block.s3_bucket),
        s3_prefix: build.template(std.get(block, 's3_prefix', null)),
        s3_region: build.template(block.s3_region),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        time_unit: build.template(block.time_unit),
      }),
      additional_artifacts: resource.field('additional_artifacts'),
      additional_schema_elements: resource.field('additional_schema_elements'),
      arn: resource.field('arn'),
      compression: resource.field('compression'),
      format: resource.field('format'),
      id: resource.field('id'),
      refresh_closed_reports: resource.field('refresh_closed_reports'),
      report_name: resource.field('report_name'),
      report_versioning: resource.field('report_versioning'),
      s3_bucket: resource.field('s3_bucket'),
      s3_prefix: resource.field('s3_prefix'),
      s3_region: resource.field('s3_region'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      time_unit: resource.field('time_unit'),
    },
    customer_gateway(name, block): {
      local resource = blockType.resource('aws_customer_gateway', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bgp_asn: build.template(std.get(block, 'bgp_asn', null)),
        bgp_asn_extended: build.template(std.get(block, 'bgp_asn_extended', null)),
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        device_name: build.template(std.get(block, 'device_name', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      bgp_asn: resource.field('bgp_asn'),
      bgp_asn_extended: resource.field('bgp_asn_extended'),
      certificate_arn: resource.field('certificate_arn'),
      device_name: resource.field('device_name'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    customerprofiles_domain(name, block): {
      local resource = blockType.resource('aws_customerprofiles_domain', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        dead_letter_queue_url: build.template(std.get(block, 'dead_letter_queue_url', null)),
        default_encryption_key: build.template(std.get(block, 'default_encryption_key', null)),
        default_expiration_days: build.template(block.default_expiration_days),
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      dead_letter_queue_url: resource.field('dead_letter_queue_url'),
      default_encryption_key: resource.field('default_encryption_key'),
      default_expiration_days: resource.field('default_expiration_days'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    customerprofiles_profile(name, block): {
      local resource = blockType.resource('aws_customerprofiles_profile', name),
      _: resource._(block, {
        account_number: build.template(std.get(block, 'account_number', null)),
        additional_information: build.template(std.get(block, 'additional_information', null)),
        attributes: build.template(std.get(block, 'attributes', null)),
        birth_date: build.template(std.get(block, 'birth_date', null)),
        business_email_address: build.template(std.get(block, 'business_email_address', null)),
        business_name: build.template(std.get(block, 'business_name', null)),
        business_phone_number: build.template(std.get(block, 'business_phone_number', null)),
        domain_name: build.template(block.domain_name),
        email_address: build.template(std.get(block, 'email_address', null)),
        first_name: build.template(std.get(block, 'first_name', null)),
        gender_string: build.template(std.get(block, 'gender_string', null)),
        home_phone_number: build.template(std.get(block, 'home_phone_number', null)),
        id: build.template(std.get(block, 'id', null)),
        last_name: build.template(std.get(block, 'last_name', null)),
        middle_name: build.template(std.get(block, 'middle_name', null)),
        mobile_phone_number: build.template(std.get(block, 'mobile_phone_number', null)),
        party_type_string: build.template(std.get(block, 'party_type_string', null)),
        personal_email_address: build.template(std.get(block, 'personal_email_address', null)),
        phone_number: build.template(std.get(block, 'phone_number', null)),
      }),
      account_number: resource.field('account_number'),
      additional_information: resource.field('additional_information'),
      attributes: resource.field('attributes'),
      birth_date: resource.field('birth_date'),
      business_email_address: resource.field('business_email_address'),
      business_name: resource.field('business_name'),
      business_phone_number: resource.field('business_phone_number'),
      domain_name: resource.field('domain_name'),
      email_address: resource.field('email_address'),
      first_name: resource.field('first_name'),
      gender_string: resource.field('gender_string'),
      home_phone_number: resource.field('home_phone_number'),
      id: resource.field('id'),
      last_name: resource.field('last_name'),
      middle_name: resource.field('middle_name'),
      mobile_phone_number: resource.field('mobile_phone_number'),
      party_type_string: resource.field('party_type_string'),
      personal_email_address: resource.field('personal_email_address'),
      phone_number: resource.field('phone_number'),
    },
    dataexchange_data_set(name, block): {
      local resource = blockType.resource('aws_dataexchange_data_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        asset_type: build.template(block.asset_type),
        description: build.template(block.description),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      asset_type: resource.field('asset_type'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    dataexchange_revision(name, block): {
      local resource = blockType.resource('aws_dataexchange_revision', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        comment: build.template(std.get(block, 'comment', null)),
        data_set_id: build.template(block.data_set_id),
        id: build.template(std.get(block, 'id', null)),
        revision_id: build.template(std.get(block, 'revision_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      comment: resource.field('comment'),
      data_set_id: resource.field('data_set_id'),
      id: resource.field('id'),
      revision_id: resource.field('revision_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    datapipeline_pipeline(name, block): {
      local resource = blockType.resource('aws_datapipeline_pipeline', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    datapipeline_pipeline_definition(name, block): {
      local resource = blockType.resource('aws_datapipeline_pipeline_definition', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        pipeline_id: build.template(block.pipeline_id),
      }),
      id: resource.field('id'),
      pipeline_id: resource.field('pipeline_id'),
    },
    datasync_agent(name, block): {
      local resource = blockType.resource('aws_datasync_agent', name),
      _: resource._(block, {
        activation_key: build.template(std.get(block, 'activation_key', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        name: build.template(std.get(block, 'name', null)),
        private_link_endpoint: build.template(std.get(block, 'private_link_endpoint', null)),
        security_group_arns: build.template(std.get(block, 'security_group_arns', null)),
        subnet_arns: build.template(std.get(block, 'subnet_arns', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_endpoint_id: build.template(std.get(block, 'vpc_endpoint_id', null)),
      }),
      activation_key: resource.field('activation_key'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      name: resource.field('name'),
      private_link_endpoint: resource.field('private_link_endpoint'),
      security_group_arns: resource.field('security_group_arns'),
      subnet_arns: resource.field('subnet_arns'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_endpoint_id: resource.field('vpc_endpoint_id'),
    },
    datasync_location_azure_blob(name, block): {
      local resource = blockType.resource('aws_datasync_location_azure_blob', name),
      _: resource._(block, {
        access_tier: build.template(std.get(block, 'access_tier', null)),
        agent_arns: build.template(block.agent_arns),
        arn: build.template(std.get(block, 'arn', null)),
        authentication_type: build.template(block.authentication_type),
        blob_type: build.template(std.get(block, 'blob_type', null)),
        container_url: build.template(block.container_url),
        id: build.template(std.get(block, 'id', null)),
        subdirectory: build.template(std.get(block, 'subdirectory', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      access_tier: resource.field('access_tier'),
      agent_arns: resource.field('agent_arns'),
      arn: resource.field('arn'),
      authentication_type: resource.field('authentication_type'),
      blob_type: resource.field('blob_type'),
      container_url: resource.field('container_url'),
      id: resource.field('id'),
      subdirectory: resource.field('subdirectory'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uri: resource.field('uri'),
    },
    datasync_location_efs(name, block): {
      local resource = blockType.resource('aws_datasync_location_efs', name),
      _: resource._(block, {
        access_point_arn: build.template(std.get(block, 'access_point_arn', null)),
        arn: build.template(std.get(block, 'arn', null)),
        efs_file_system_arn: build.template(block.efs_file_system_arn),
        file_system_access_role_arn: build.template(std.get(block, 'file_system_access_role_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        in_transit_encryption: build.template(std.get(block, 'in_transit_encryption', null)),
        subdirectory: build.template(std.get(block, 'subdirectory', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      access_point_arn: resource.field('access_point_arn'),
      arn: resource.field('arn'),
      efs_file_system_arn: resource.field('efs_file_system_arn'),
      file_system_access_role_arn: resource.field('file_system_access_role_arn'),
      id: resource.field('id'),
      in_transit_encryption: resource.field('in_transit_encryption'),
      subdirectory: resource.field('subdirectory'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uri: resource.field('uri'),
    },
    datasync_location_fsx_lustre_file_system(name, block): {
      local resource = blockType.resource('aws_datasync_location_fsx_lustre_file_system', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        fsx_filesystem_arn: build.template(block.fsx_filesystem_arn),
        id: build.template(std.get(block, 'id', null)),
        security_group_arns: build.template(block.security_group_arns),
        subdirectory: build.template(std.get(block, 'subdirectory', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      fsx_filesystem_arn: resource.field('fsx_filesystem_arn'),
      id: resource.field('id'),
      security_group_arns: resource.field('security_group_arns'),
      subdirectory: resource.field('subdirectory'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uri: resource.field('uri'),
    },
    datasync_location_fsx_ontap_file_system(name, block): {
      local resource = blockType.resource('aws_datasync_location_fsx_ontap_file_system', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        fsx_filesystem_arn: build.template(std.get(block, 'fsx_filesystem_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        security_group_arns: build.template(block.security_group_arns),
        storage_virtual_machine_arn: build.template(block.storage_virtual_machine_arn),
        subdirectory: build.template(std.get(block, 'subdirectory', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      fsx_filesystem_arn: resource.field('fsx_filesystem_arn'),
      id: resource.field('id'),
      security_group_arns: resource.field('security_group_arns'),
      storage_virtual_machine_arn: resource.field('storage_virtual_machine_arn'),
      subdirectory: resource.field('subdirectory'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uri: resource.field('uri'),
    },
    datasync_location_fsx_openzfs_file_system(name, block): {
      local resource = blockType.resource('aws_datasync_location_fsx_openzfs_file_system', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        fsx_filesystem_arn: build.template(block.fsx_filesystem_arn),
        id: build.template(std.get(block, 'id', null)),
        security_group_arns: build.template(block.security_group_arns),
        subdirectory: build.template(std.get(block, 'subdirectory', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      fsx_filesystem_arn: resource.field('fsx_filesystem_arn'),
      id: resource.field('id'),
      security_group_arns: resource.field('security_group_arns'),
      subdirectory: resource.field('subdirectory'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uri: resource.field('uri'),
    },
    datasync_location_fsx_windows_file_system(name, block): {
      local resource = blockType.resource('aws_datasync_location_fsx_windows_file_system', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        domain: build.template(std.get(block, 'domain', null)),
        fsx_filesystem_arn: build.template(block.fsx_filesystem_arn),
        id: build.template(std.get(block, 'id', null)),
        password: build.template(block.password),
        security_group_arns: build.template(block.security_group_arns),
        subdirectory: build.template(std.get(block, 'subdirectory', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uri: build.template(std.get(block, 'uri', null)),
        user: build.template(block.user),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      domain: resource.field('domain'),
      fsx_filesystem_arn: resource.field('fsx_filesystem_arn'),
      id: resource.field('id'),
      password: resource.field('password'),
      security_group_arns: resource.field('security_group_arns'),
      subdirectory: resource.field('subdirectory'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uri: resource.field('uri'),
      user: resource.field('user'),
    },
    datasync_location_hdfs(name, block): {
      local resource = blockType.resource('aws_datasync_location_hdfs', name),
      _: resource._(block, {
        agent_arns: build.template(block.agent_arns),
        arn: build.template(std.get(block, 'arn', null)),
        authentication_type: build.template(std.get(block, 'authentication_type', null)),
        block_size: build.template(std.get(block, 'block_size', null)),
        id: build.template(std.get(block, 'id', null)),
        kerberos_keytab: build.template(std.get(block, 'kerberos_keytab', null)),
        kerberos_keytab_base64: build.template(std.get(block, 'kerberos_keytab_base64', null)),
        kerberos_krb5_conf: build.template(std.get(block, 'kerberos_krb5_conf', null)),
        kerberos_krb5_conf_base64: build.template(std.get(block, 'kerberos_krb5_conf_base64', null)),
        kerberos_principal: build.template(std.get(block, 'kerberos_principal', null)),
        kms_key_provider_uri: build.template(std.get(block, 'kms_key_provider_uri', null)),
        replication_factor: build.template(std.get(block, 'replication_factor', null)),
        simple_user: build.template(std.get(block, 'simple_user', null)),
        subdirectory: build.template(std.get(block, 'subdirectory', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      agent_arns: resource.field('agent_arns'),
      arn: resource.field('arn'),
      authentication_type: resource.field('authentication_type'),
      block_size: resource.field('block_size'),
      id: resource.field('id'),
      kerberos_keytab: resource.field('kerberos_keytab'),
      kerberos_keytab_base64: resource.field('kerberos_keytab_base64'),
      kerberos_krb5_conf: resource.field('kerberos_krb5_conf'),
      kerberos_krb5_conf_base64: resource.field('kerberos_krb5_conf_base64'),
      kerberos_principal: resource.field('kerberos_principal'),
      kms_key_provider_uri: resource.field('kms_key_provider_uri'),
      replication_factor: resource.field('replication_factor'),
      simple_user: resource.field('simple_user'),
      subdirectory: resource.field('subdirectory'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uri: resource.field('uri'),
    },
    datasync_location_nfs(name, block): {
      local resource = blockType.resource('aws_datasync_location_nfs', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        server_hostname: build.template(block.server_hostname),
        subdirectory: build.template(block.subdirectory),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      server_hostname: resource.field('server_hostname'),
      subdirectory: resource.field('subdirectory'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uri: resource.field('uri'),
    },
    datasync_location_object_storage(name, block): {
      local resource = blockType.resource('aws_datasync_location_object_storage', name),
      _: resource._(block, {
        access_key: build.template(std.get(block, 'access_key', null)),
        agent_arns: build.template(block.agent_arns),
        arn: build.template(std.get(block, 'arn', null)),
        bucket_name: build.template(block.bucket_name),
        id: build.template(std.get(block, 'id', null)),
        secret_key: build.template(std.get(block, 'secret_key', null)),
        server_certificate: build.template(std.get(block, 'server_certificate', null)),
        server_hostname: build.template(block.server_hostname),
        server_port: build.template(std.get(block, 'server_port', null)),
        server_protocol: build.template(std.get(block, 'server_protocol', null)),
        subdirectory: build.template(std.get(block, 'subdirectory', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      access_key: resource.field('access_key'),
      agent_arns: resource.field('agent_arns'),
      arn: resource.field('arn'),
      bucket_name: resource.field('bucket_name'),
      id: resource.field('id'),
      secret_key: resource.field('secret_key'),
      server_certificate: resource.field('server_certificate'),
      server_hostname: resource.field('server_hostname'),
      server_port: resource.field('server_port'),
      server_protocol: resource.field('server_protocol'),
      subdirectory: resource.field('subdirectory'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uri: resource.field('uri'),
    },
    datasync_location_s3(name, block): {
      local resource = blockType.resource('aws_datasync_location_s3', name),
      _: resource._(block, {
        agent_arns: build.template(std.get(block, 'agent_arns', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        s3_bucket_arn: build.template(block.s3_bucket_arn),
        s3_storage_class: build.template(std.get(block, 's3_storage_class', null)),
        subdirectory: build.template(block.subdirectory),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      agent_arns: resource.field('agent_arns'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      s3_bucket_arn: resource.field('s3_bucket_arn'),
      s3_storage_class: resource.field('s3_storage_class'),
      subdirectory: resource.field('subdirectory'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uri: resource.field('uri'),
    },
    datasync_location_smb(name, block): {
      local resource = blockType.resource('aws_datasync_location_smb', name),
      _: resource._(block, {
        agent_arns: build.template(block.agent_arns),
        arn: build.template(std.get(block, 'arn', null)),
        domain: build.template(std.get(block, 'domain', null)),
        id: build.template(std.get(block, 'id', null)),
        password: build.template(block.password),
        server_hostname: build.template(block.server_hostname),
        subdirectory: build.template(block.subdirectory),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uri: build.template(std.get(block, 'uri', null)),
        user: build.template(block.user),
      }),
      agent_arns: resource.field('agent_arns'),
      arn: resource.field('arn'),
      domain: resource.field('domain'),
      id: resource.field('id'),
      password: resource.field('password'),
      server_hostname: resource.field('server_hostname'),
      subdirectory: resource.field('subdirectory'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uri: resource.field('uri'),
      user: resource.field('user'),
    },
    datasync_task(name, block): {
      local resource = blockType.resource('aws_datasync_task', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cloudwatch_log_group_arn: build.template(std.get(block, 'cloudwatch_log_group_arn', null)),
        destination_location_arn: build.template(block.destination_location_arn),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        source_location_arn: build.template(block.source_location_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      cloudwatch_log_group_arn: resource.field('cloudwatch_log_group_arn'),
      destination_location_arn: resource.field('destination_location_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      source_location_arn: resource.field('source_location_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    datazone_asset_type(name, block): {
      local resource = blockType.resource('aws_datazone_asset_type', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        description: build.template(std.get(block, 'description', null)),
        domain_identifier: build.template(block.domain_identifier),
        name: build.template(block.name),
        owning_project_identifier: build.template(block.owning_project_identifier),
        revision: build.template(std.get(block, 'revision', null)),
      }),
      created_at: resource.field('created_at'),
      created_by: resource.field('created_by'),
      description: resource.field('description'),
      domain_identifier: resource.field('domain_identifier'),
      name: resource.field('name'),
      owning_project_identifier: resource.field('owning_project_identifier'),
      revision: resource.field('revision'),
    },
    datazone_domain(name, block): {
      local resource = blockType.resource('aws_datazone_domain', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        domain_execution_role: build.template(block.domain_execution_role),
        id: build.template(std.get(block, 'id', null)),
        kms_key_identifier: build.template(std.get(block, 'kms_key_identifier', null)),
        name: build.template(block.name),
        portal_url: build.template(std.get(block, 'portal_url', null)),
        skip_deletion_check: build.template(std.get(block, 'skip_deletion_check', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      domain_execution_role: resource.field('domain_execution_role'),
      id: resource.field('id'),
      kms_key_identifier: resource.field('kms_key_identifier'),
      name: resource.field('name'),
      portal_url: resource.field('portal_url'),
      skip_deletion_check: resource.field('skip_deletion_check'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    datazone_environment(name, block): {
      local resource = blockType.resource('aws_datazone_environment', name),
      _: resource._(block, {
        account_identifier: build.template(std.get(block, 'account_identifier', null)),
        account_region: build.template(std.get(block, 'account_region', null)),
        blueprint_identifier: build.template(std.get(block, 'blueprint_identifier', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        description: build.template(std.get(block, 'description', null)),
        domain_identifier: build.template(block.domain_identifier),
        glossary_terms: build.template(std.get(block, 'glossary_terms', null)),
        id: build.template(std.get(block, 'id', null)),
        last_deployment: build.template(std.get(block, 'last_deployment', null)),
        name: build.template(block.name),
        profile_identifier: build.template(block.profile_identifier),
        project_identifier: build.template(block.project_identifier),
        provider_environment: build.template(std.get(block, 'provider_environment', null)),
        provisioned_resources: build.template(std.get(block, 'provisioned_resources', null)),
      }),
      account_identifier: resource.field('account_identifier'),
      account_region: resource.field('account_region'),
      blueprint_identifier: resource.field('blueprint_identifier'),
      created_at: resource.field('created_at'),
      created_by: resource.field('created_by'),
      description: resource.field('description'),
      domain_identifier: resource.field('domain_identifier'),
      glossary_terms: resource.field('glossary_terms'),
      id: resource.field('id'),
      last_deployment: resource.field('last_deployment'),
      name: resource.field('name'),
      profile_identifier: resource.field('profile_identifier'),
      project_identifier: resource.field('project_identifier'),
      provider_environment: resource.field('provider_environment'),
      provisioned_resources: resource.field('provisioned_resources'),
    },
    datazone_environment_blueprint_configuration(name, block): {
      local resource = blockType.resource('aws_datazone_environment_blueprint_configuration', name),
      _: resource._(block, {
        domain_id: build.template(block.domain_id),
        enabled_regions: build.template(block.enabled_regions),
        environment_blueprint_id: build.template(block.environment_blueprint_id),
        manage_access_role_arn: build.template(std.get(block, 'manage_access_role_arn', null)),
        provisioning_role_arn: build.template(std.get(block, 'provisioning_role_arn', null)),
        regional_parameters: build.template(std.get(block, 'regional_parameters', null)),
      }),
      domain_id: resource.field('domain_id'),
      enabled_regions: resource.field('enabled_regions'),
      environment_blueprint_id: resource.field('environment_blueprint_id'),
      manage_access_role_arn: resource.field('manage_access_role_arn'),
      provisioning_role_arn: resource.field('provisioning_role_arn'),
      regional_parameters: resource.field('regional_parameters'),
    },
    datazone_environment_profile(name, block): {
      local resource = blockType.resource('aws_datazone_environment_profile', name),
      _: resource._(block, {
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        aws_account_region: build.template(block.aws_account_region),
        created_at: build.template(std.get(block, 'created_at', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        description: build.template(std.get(block, 'description', null)),
        domain_identifier: build.template(block.domain_identifier),
        environment_blueprint_identifier: build.template(block.environment_blueprint_identifier),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project_identifier: build.template(block.project_identifier),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      aws_account_id: resource.field('aws_account_id'),
      aws_account_region: resource.field('aws_account_region'),
      created_at: resource.field('created_at'),
      created_by: resource.field('created_by'),
      description: resource.field('description'),
      domain_identifier: resource.field('domain_identifier'),
      environment_blueprint_identifier: resource.field('environment_blueprint_identifier'),
      id: resource.field('id'),
      name: resource.field('name'),
      project_identifier: resource.field('project_identifier'),
      updated_at: resource.field('updated_at'),
    },
    datazone_form_type(name, block): {
      local resource = blockType.resource('aws_datazone_form_type', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        description: build.template(std.get(block, 'description', null)),
        domain_identifier: build.template(block.domain_identifier),
        imports: build.template(std.get(block, 'imports', null)),
        name: build.template(block.name),
        origin_domain_id: build.template(std.get(block, 'origin_domain_id', null)),
        origin_project_id: build.template(std.get(block, 'origin_project_id', null)),
        owning_project_identifier: build.template(block.owning_project_identifier),
        revision: build.template(std.get(block, 'revision', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      created_at: resource.field('created_at'),
      created_by: resource.field('created_by'),
      description: resource.field('description'),
      domain_identifier: resource.field('domain_identifier'),
      imports: resource.field('imports'),
      name: resource.field('name'),
      origin_domain_id: resource.field('origin_domain_id'),
      origin_project_id: resource.field('origin_project_id'),
      owning_project_identifier: resource.field('owning_project_identifier'),
      revision: resource.field('revision'),
      status: resource.field('status'),
    },
    datazone_glossary(name, block): {
      local resource = blockType.resource('aws_datazone_glossary', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        domain_identifier: build.template(block.domain_identifier),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owning_project_identifier: build.template(block.owning_project_identifier),
        status: build.template(std.get(block, 'status', null)),
      }),
      description: resource.field('description'),
      domain_identifier: resource.field('domain_identifier'),
      id: resource.field('id'),
      name: resource.field('name'),
      owning_project_identifier: resource.field('owning_project_identifier'),
      status: resource.field('status'),
    },
    datazone_glossary_term(name, block): {
      local resource = blockType.resource('aws_datazone_glossary_term', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        domain_identifier: build.template(std.get(block, 'domain_identifier', null)),
        glossary_identifier: build.template(block.glossary_identifier),
        id: build.template(std.get(block, 'id', null)),
        long_description: build.template(std.get(block, 'long_description', null)),
        name: build.template(block.name),
        short_description: build.template(std.get(block, 'short_description', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      created_at: resource.field('created_at'),
      created_by: resource.field('created_by'),
      domain_identifier: resource.field('domain_identifier'),
      glossary_identifier: resource.field('glossary_identifier'),
      id: resource.field('id'),
      long_description: resource.field('long_description'),
      name: resource.field('name'),
      short_description: resource.field('short_description'),
      status: resource.field('status'),
    },
    datazone_project(name, block): {
      local resource = blockType.resource('aws_datazone_project', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        description: build.template(std.get(block, 'description', null)),
        domain_identifier: build.template(block.domain_identifier),
        failure_reasons: build.template(std.get(block, 'failure_reasons', null)),
        glossary_terms: build.template(std.get(block, 'glossary_terms', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_at: build.template(std.get(block, 'last_updated_at', null)),
        name: build.template(block.name),
        project_status: build.template(std.get(block, 'project_status', null)),
        skip_deletion_check: build.template(std.get(block, 'skip_deletion_check', null)),
      }),
      created_at: resource.field('created_at'),
      created_by: resource.field('created_by'),
      description: resource.field('description'),
      domain_identifier: resource.field('domain_identifier'),
      failure_reasons: resource.field('failure_reasons'),
      glossary_terms: resource.field('glossary_terms'),
      id: resource.field('id'),
      last_updated_at: resource.field('last_updated_at'),
      name: resource.field('name'),
      project_status: resource.field('project_status'),
      skip_deletion_check: resource.field('skip_deletion_check'),
    },
    datazone_user_profile(name, block): {
      local resource = blockType.resource('aws_datazone_user_profile', name),
      _: resource._(block, {
        details: build.template(std.get(block, 'details', null)),
        domain_identifier: build.template(block.domain_identifier),
        id: build.template(std.get(block, 'id', null)),
        status: build.template(std.get(block, 'status', null)),
        type: build.template(std.get(block, 'type', null)),
        user_identifier: build.template(block.user_identifier),
        user_type: build.template(std.get(block, 'user_type', null)),
      }),
      details: resource.field('details'),
      domain_identifier: resource.field('domain_identifier'),
      id: resource.field('id'),
      status: resource.field('status'),
      type: resource.field('type'),
      user_identifier: resource.field('user_identifier'),
      user_type: resource.field('user_type'),
    },
    dax_cluster(name, block): {
      local resource = blockType.resource('aws_dax_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        cluster_address: build.template(std.get(block, 'cluster_address', null)),
        cluster_endpoint_encryption_type: build.template(std.get(block, 'cluster_endpoint_encryption_type', null)),
        cluster_name: build.template(block.cluster_name),
        configuration_endpoint: build.template(std.get(block, 'configuration_endpoint', null)),
        description: build.template(std.get(block, 'description', null)),
        iam_role_arn: build.template(block.iam_role_arn),
        id: build.template(std.get(block, 'id', null)),
        maintenance_window: build.template(std.get(block, 'maintenance_window', null)),
        node_type: build.template(block.node_type),
        nodes: build.template(std.get(block, 'nodes', null)),
        notification_topic_arn: build.template(std.get(block, 'notification_topic_arn', null)),
        parameter_group_name: build.template(std.get(block, 'parameter_group_name', null)),
        port: build.template(std.get(block, 'port', null)),
        replication_factor: build.template(block.replication_factor),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        subnet_group_name: build.template(std.get(block, 'subnet_group_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      availability_zones: resource.field('availability_zones'),
      cluster_address: resource.field('cluster_address'),
      cluster_endpoint_encryption_type: resource.field('cluster_endpoint_encryption_type'),
      cluster_name: resource.field('cluster_name'),
      configuration_endpoint: resource.field('configuration_endpoint'),
      description: resource.field('description'),
      iam_role_arn: resource.field('iam_role_arn'),
      id: resource.field('id'),
      maintenance_window: resource.field('maintenance_window'),
      node_type: resource.field('node_type'),
      nodes: resource.field('nodes'),
      notification_topic_arn: resource.field('notification_topic_arn'),
      parameter_group_name: resource.field('parameter_group_name'),
      port: resource.field('port'),
      replication_factor: resource.field('replication_factor'),
      security_group_ids: resource.field('security_group_ids'),
      subnet_group_name: resource.field('subnet_group_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    dax_parameter_group(name, block): {
      local resource = blockType.resource('aws_dax_parameter_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    dax_subnet_group(name, block): {
      local resource = blockType.resource('aws_dax_subnet_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subnet_ids: build.template(block.subnet_ids),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      subnet_ids: resource.field('subnet_ids'),
      vpc_id: resource.field('vpc_id'),
    },
    db_cluster_snapshot(name, block): {
      local resource = blockType.resource('aws_db_cluster_snapshot', name),
      _: resource._(block, {
        allocated_storage: build.template(std.get(block, 'allocated_storage', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        db_cluster_identifier: build.template(block.db_cluster_identifier),
        db_cluster_snapshot_arn: build.template(std.get(block, 'db_cluster_snapshot_arn', null)),
        db_cluster_snapshot_identifier: build.template(block.db_cluster_snapshot_identifier),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        license_model: build.template(std.get(block, 'license_model', null)),
        port: build.template(std.get(block, 'port', null)),
        shared_accounts: build.template(std.get(block, 'shared_accounts', null)),
        snapshot_type: build.template(std.get(block, 'snapshot_type', null)),
        source_db_cluster_snapshot_arn: build.template(std.get(block, 'source_db_cluster_snapshot_arn', null)),
        status: build.template(std.get(block, 'status', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      allocated_storage: resource.field('allocated_storage'),
      availability_zones: resource.field('availability_zones'),
      db_cluster_identifier: resource.field('db_cluster_identifier'),
      db_cluster_snapshot_arn: resource.field('db_cluster_snapshot_arn'),
      db_cluster_snapshot_identifier: resource.field('db_cluster_snapshot_identifier'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      license_model: resource.field('license_model'),
      port: resource.field('port'),
      shared_accounts: resource.field('shared_accounts'),
      snapshot_type: resource.field('snapshot_type'),
      source_db_cluster_snapshot_arn: resource.field('source_db_cluster_snapshot_arn'),
      status: resource.field('status'),
      storage_encrypted: resource.field('storage_encrypted'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    db_event_subscription(name, block): {
      local resource = blockType.resource('aws_db_event_subscription', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        customer_aws_id: build.template(std.get(block, 'customer_aws_id', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        event_categories: build.template(std.get(block, 'event_categories', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        sns_topic: build.template(block.sns_topic),
        source_ids: build.template(std.get(block, 'source_ids', null)),
        source_type: build.template(std.get(block, 'source_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      customer_aws_id: resource.field('customer_aws_id'),
      enabled: resource.field('enabled'),
      event_categories: resource.field('event_categories'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      sns_topic: resource.field('sns_topic'),
      source_ids: resource.field('source_ids'),
      source_type: resource.field('source_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    db_instance(name, block): {
      local resource = blockType.resource('aws_db_instance', name),
      _: resource._(block, {
        address: build.template(std.get(block, 'address', null)),
        allocated_storage: build.template(std.get(block, 'allocated_storage', null)),
        allow_major_version_upgrade: build.template(std.get(block, 'allow_major_version_upgrade', null)),
        apply_immediately: build.template(std.get(block, 'apply_immediately', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        backup_retention_period: build.template(std.get(block, 'backup_retention_period', null)),
        backup_target: build.template(std.get(block, 'backup_target', null)),
        backup_window: build.template(std.get(block, 'backup_window', null)),
        ca_cert_identifier: build.template(std.get(block, 'ca_cert_identifier', null)),
        character_set_name: build.template(std.get(block, 'character_set_name', null)),
        copy_tags_to_snapshot: build.template(std.get(block, 'copy_tags_to_snapshot', null)),
        custom_iam_instance_profile: build.template(std.get(block, 'custom_iam_instance_profile', null)),
        customer_owned_ip_enabled: build.template(std.get(block, 'customer_owned_ip_enabled', null)),
        db_name: build.template(std.get(block, 'db_name', null)),
        db_subnet_group_name: build.template(std.get(block, 'db_subnet_group_name', null)),
        dedicated_log_volume: build.template(std.get(block, 'dedicated_log_volume', null)),
        delete_automated_backups: build.template(std.get(block, 'delete_automated_backups', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        domain: build.template(std.get(block, 'domain', null)),
        domain_auth_secret_arn: build.template(std.get(block, 'domain_auth_secret_arn', null)),
        domain_dns_ips: build.template(std.get(block, 'domain_dns_ips', null)),
        domain_fqdn: build.template(std.get(block, 'domain_fqdn', null)),
        domain_iam_role_name: build.template(std.get(block, 'domain_iam_role_name', null)),
        domain_ou: build.template(std.get(block, 'domain_ou', null)),
        enabled_cloudwatch_logs_exports: build.template(std.get(block, 'enabled_cloudwatch_logs_exports', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_lifecycle_support: build.template(std.get(block, 'engine_lifecycle_support', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        engine_version_actual: build.template(std.get(block, 'engine_version_actual', null)),
        final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        iam_database_authentication_enabled: build.template(std.get(block, 'iam_database_authentication_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        identifier: build.template(std.get(block, 'identifier', null)),
        identifier_prefix: build.template(std.get(block, 'identifier_prefix', null)),
        instance_class: build.template(block.instance_class),
        iops: build.template(std.get(block, 'iops', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        latest_restorable_time: build.template(std.get(block, 'latest_restorable_time', null)),
        license_model: build.template(std.get(block, 'license_model', null)),
        listener_endpoint: build.template(std.get(block, 'listener_endpoint', null)),
        maintenance_window: build.template(std.get(block, 'maintenance_window', null)),
        manage_master_user_password: build.template(std.get(block, 'manage_master_user_password', null)),
        master_user_secret: build.template(std.get(block, 'master_user_secret', null)),
        master_user_secret_kms_key_id: build.template(std.get(block, 'master_user_secret_kms_key_id', null)),
        max_allocated_storage: build.template(std.get(block, 'max_allocated_storage', null)),
        monitoring_interval: build.template(std.get(block, 'monitoring_interval', null)),
        monitoring_role_arn: build.template(std.get(block, 'monitoring_role_arn', null)),
        multi_az: build.template(std.get(block, 'multi_az', null)),
        nchar_character_set_name: build.template(std.get(block, 'nchar_character_set_name', null)),
        network_type: build.template(std.get(block, 'network_type', null)),
        option_group_name: build.template(std.get(block, 'option_group_name', null)),
        parameter_group_name: build.template(std.get(block, 'parameter_group_name', null)),
        password: build.template(std.get(block, 'password', null)),
        performance_insights_enabled: build.template(std.get(block, 'performance_insights_enabled', null)),
        performance_insights_kms_key_id: build.template(std.get(block, 'performance_insights_kms_key_id', null)),
        performance_insights_retention_period: build.template(std.get(block, 'performance_insights_retention_period', null)),
        port: build.template(std.get(block, 'port', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        replica_mode: build.template(std.get(block, 'replica_mode', null)),
        replicas: build.template(std.get(block, 'replicas', null)),
        replicate_source_db: build.template(std.get(block, 'replicate_source_db', null)),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null)),
        snapshot_identifier: build.template(std.get(block, 'snapshot_identifier', null)),
        status: build.template(std.get(block, 'status', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
        storage_throughput: build.template(std.get(block, 'storage_throughput', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        timezone: build.template(std.get(block, 'timezone', null)),
        upgrade_storage_config: build.template(std.get(block, 'upgrade_storage_config', null)),
        username: build.template(std.get(block, 'username', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      address: resource.field('address'),
      allocated_storage: resource.field('allocated_storage'),
      allow_major_version_upgrade: resource.field('allow_major_version_upgrade'),
      apply_immediately: resource.field('apply_immediately'),
      arn: resource.field('arn'),
      auto_minor_version_upgrade: resource.field('auto_minor_version_upgrade'),
      availability_zone: resource.field('availability_zone'),
      backup_retention_period: resource.field('backup_retention_period'),
      backup_target: resource.field('backup_target'),
      backup_window: resource.field('backup_window'),
      ca_cert_identifier: resource.field('ca_cert_identifier'),
      character_set_name: resource.field('character_set_name'),
      copy_tags_to_snapshot: resource.field('copy_tags_to_snapshot'),
      custom_iam_instance_profile: resource.field('custom_iam_instance_profile'),
      customer_owned_ip_enabled: resource.field('customer_owned_ip_enabled'),
      db_name: resource.field('db_name'),
      db_subnet_group_name: resource.field('db_subnet_group_name'),
      dedicated_log_volume: resource.field('dedicated_log_volume'),
      delete_automated_backups: resource.field('delete_automated_backups'),
      deletion_protection: resource.field('deletion_protection'),
      domain: resource.field('domain'),
      domain_auth_secret_arn: resource.field('domain_auth_secret_arn'),
      domain_dns_ips: resource.field('domain_dns_ips'),
      domain_fqdn: resource.field('domain_fqdn'),
      domain_iam_role_name: resource.field('domain_iam_role_name'),
      domain_ou: resource.field('domain_ou'),
      enabled_cloudwatch_logs_exports: resource.field('enabled_cloudwatch_logs_exports'),
      endpoint: resource.field('endpoint'),
      engine: resource.field('engine'),
      engine_lifecycle_support: resource.field('engine_lifecycle_support'),
      engine_version: resource.field('engine_version'),
      engine_version_actual: resource.field('engine_version_actual'),
      final_snapshot_identifier: resource.field('final_snapshot_identifier'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      iam_database_authentication_enabled: resource.field('iam_database_authentication_enabled'),
      id: resource.field('id'),
      identifier: resource.field('identifier'),
      identifier_prefix: resource.field('identifier_prefix'),
      instance_class: resource.field('instance_class'),
      iops: resource.field('iops'),
      kms_key_id: resource.field('kms_key_id'),
      latest_restorable_time: resource.field('latest_restorable_time'),
      license_model: resource.field('license_model'),
      listener_endpoint: resource.field('listener_endpoint'),
      maintenance_window: resource.field('maintenance_window'),
      manage_master_user_password: resource.field('manage_master_user_password'),
      master_user_secret: resource.field('master_user_secret'),
      master_user_secret_kms_key_id: resource.field('master_user_secret_kms_key_id'),
      max_allocated_storage: resource.field('max_allocated_storage'),
      monitoring_interval: resource.field('monitoring_interval'),
      monitoring_role_arn: resource.field('monitoring_role_arn'),
      multi_az: resource.field('multi_az'),
      nchar_character_set_name: resource.field('nchar_character_set_name'),
      network_type: resource.field('network_type'),
      option_group_name: resource.field('option_group_name'),
      parameter_group_name: resource.field('parameter_group_name'),
      password: resource.field('password'),
      performance_insights_enabled: resource.field('performance_insights_enabled'),
      performance_insights_kms_key_id: resource.field('performance_insights_kms_key_id'),
      performance_insights_retention_period: resource.field('performance_insights_retention_period'),
      port: resource.field('port'),
      publicly_accessible: resource.field('publicly_accessible'),
      replica_mode: resource.field('replica_mode'),
      replicas: resource.field('replicas'),
      replicate_source_db: resource.field('replicate_source_db'),
      resource_id: resource.field('resource_id'),
      skip_final_snapshot: resource.field('skip_final_snapshot'),
      snapshot_identifier: resource.field('snapshot_identifier'),
      status: resource.field('status'),
      storage_encrypted: resource.field('storage_encrypted'),
      storage_throughput: resource.field('storage_throughput'),
      storage_type: resource.field('storage_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      timezone: resource.field('timezone'),
      upgrade_storage_config: resource.field('upgrade_storage_config'),
      username: resource.field('username'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    db_instance_automated_backups_replication(name, block): {
      local resource = blockType.resource('aws_db_instance_automated_backups_replication', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        pre_signed_url: build.template(std.get(block, 'pre_signed_url', null)),
        retention_period: build.template(std.get(block, 'retention_period', null)),
        source_db_instance_arn: build.template(block.source_db_instance_arn),
      }),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      pre_signed_url: resource.field('pre_signed_url'),
      retention_period: resource.field('retention_period'),
      source_db_instance_arn: resource.field('source_db_instance_arn'),
    },
    db_instance_role_association(name, block): {
      local resource = blockType.resource('aws_db_instance_role_association', name),
      _: resource._(block, {
        db_instance_identifier: build.template(block.db_instance_identifier),
        feature_name: build.template(block.feature_name),
        id: build.template(std.get(block, 'id', null)),
        role_arn: build.template(block.role_arn),
      }),
      db_instance_identifier: resource.field('db_instance_identifier'),
      feature_name: resource.field('feature_name'),
      id: resource.field('id'),
      role_arn: resource.field('role_arn'),
    },
    db_option_group(name, block): {
      local resource = blockType.resource('aws_db_option_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        engine_name: build.template(block.engine_name),
        id: build.template(std.get(block, 'id', null)),
        major_engine_version: build.template(block.major_engine_version),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        option_group_description: build.template(std.get(block, 'option_group_description', null)),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      engine_name: resource.field('engine_name'),
      id: resource.field('id'),
      major_engine_version: resource.field('major_engine_version'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      option_group_description: resource.field('option_group_description'),
      skip_destroy: resource.field('skip_destroy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    db_parameter_group(name, block): {
      local resource = blockType.resource('aws_db_parameter_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        family: build.template(block.family),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      family: resource.field('family'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      skip_destroy: resource.field('skip_destroy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    db_proxy(name, block): {
      local resource = blockType.resource('aws_db_proxy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        debug_logging: build.template(std.get(block, 'debug_logging', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        engine_family: build.template(block.engine_family),
        id: build.template(std.get(block, 'id', null)),
        idle_client_timeout: build.template(std.get(block, 'idle_client_timeout', null)),
        name: build.template(block.name),
        require_tls: build.template(std.get(block, 'require_tls', null)),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
        vpc_subnet_ids: build.template(block.vpc_subnet_ids),
      }),
      arn: resource.field('arn'),
      debug_logging: resource.field('debug_logging'),
      endpoint: resource.field('endpoint'),
      engine_family: resource.field('engine_family'),
      id: resource.field('id'),
      idle_client_timeout: resource.field('idle_client_timeout'),
      name: resource.field('name'),
      require_tls: resource.field('require_tls'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
      vpc_subnet_ids: resource.field('vpc_subnet_ids'),
    },
    db_proxy_default_target_group(name, block): {
      local resource = blockType.resource('aws_db_proxy_default_target_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        db_proxy_name: build.template(block.db_proxy_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      arn: resource.field('arn'),
      db_proxy_name: resource.field('db_proxy_name'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    db_proxy_endpoint(name, block): {
      local resource = blockType.resource('aws_db_proxy_endpoint', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        db_proxy_endpoint_name: build.template(block.db_proxy_endpoint_name),
        db_proxy_name: build.template(block.db_proxy_name),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        is_default: build.template(std.get(block, 'is_default', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_role: build.template(std.get(block, 'target_role', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
        vpc_subnet_ids: build.template(block.vpc_subnet_ids),
      }),
      arn: resource.field('arn'),
      db_proxy_endpoint_name: resource.field('db_proxy_endpoint_name'),
      db_proxy_name: resource.field('db_proxy_name'),
      endpoint: resource.field('endpoint'),
      id: resource.field('id'),
      is_default: resource.field('is_default'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_role: resource.field('target_role'),
      vpc_id: resource.field('vpc_id'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
      vpc_subnet_ids: resource.field('vpc_subnet_ids'),
    },
    db_proxy_target(name, block): {
      local resource = blockType.resource('aws_db_proxy_target', name),
      _: resource._(block, {
        db_cluster_identifier: build.template(std.get(block, 'db_cluster_identifier', null)),
        db_instance_identifier: build.template(std.get(block, 'db_instance_identifier', null)),
        db_proxy_name: build.template(block.db_proxy_name),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        port: build.template(std.get(block, 'port', null)),
        rds_resource_id: build.template(std.get(block, 'rds_resource_id', null)),
        target_arn: build.template(std.get(block, 'target_arn', null)),
        target_group_name: build.template(block.target_group_name),
        tracked_cluster_id: build.template(std.get(block, 'tracked_cluster_id', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      db_cluster_identifier: resource.field('db_cluster_identifier'),
      db_instance_identifier: resource.field('db_instance_identifier'),
      db_proxy_name: resource.field('db_proxy_name'),
      endpoint: resource.field('endpoint'),
      id: resource.field('id'),
      port: resource.field('port'),
      rds_resource_id: resource.field('rds_resource_id'),
      target_arn: resource.field('target_arn'),
      target_group_name: resource.field('target_group_name'),
      tracked_cluster_id: resource.field('tracked_cluster_id'),
      type: resource.field('type'),
    },
    db_snapshot(name, block): {
      local resource = blockType.resource('aws_db_snapshot', name),
      _: resource._(block, {
        allocated_storage: build.template(std.get(block, 'allocated_storage', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        db_instance_identifier: build.template(block.db_instance_identifier),
        db_snapshot_arn: build.template(std.get(block, 'db_snapshot_arn', null)),
        db_snapshot_identifier: build.template(block.db_snapshot_identifier),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        iops: build.template(std.get(block, 'iops', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        license_model: build.template(std.get(block, 'license_model', null)),
        option_group_name: build.template(std.get(block, 'option_group_name', null)),
        port: build.template(std.get(block, 'port', null)),
        shared_accounts: build.template(std.get(block, 'shared_accounts', null)),
        snapshot_type: build.template(std.get(block, 'snapshot_type', null)),
        source_db_snapshot_identifier: build.template(std.get(block, 'source_db_snapshot_identifier', null)),
        source_region: build.template(std.get(block, 'source_region', null)),
        status: build.template(std.get(block, 'status', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      allocated_storage: resource.field('allocated_storage'),
      availability_zone: resource.field('availability_zone'),
      db_instance_identifier: resource.field('db_instance_identifier'),
      db_snapshot_arn: resource.field('db_snapshot_arn'),
      db_snapshot_identifier: resource.field('db_snapshot_identifier'),
      encrypted: resource.field('encrypted'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      iops: resource.field('iops'),
      kms_key_id: resource.field('kms_key_id'),
      license_model: resource.field('license_model'),
      option_group_name: resource.field('option_group_name'),
      port: resource.field('port'),
      shared_accounts: resource.field('shared_accounts'),
      snapshot_type: resource.field('snapshot_type'),
      source_db_snapshot_identifier: resource.field('source_db_snapshot_identifier'),
      source_region: resource.field('source_region'),
      status: resource.field('status'),
      storage_type: resource.field('storage_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    db_snapshot_copy(name, block): {
      local resource = blockType.resource('aws_db_snapshot_copy', name),
      _: resource._(block, {
        allocated_storage: build.template(std.get(block, 'allocated_storage', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        copy_tags: build.template(std.get(block, 'copy_tags', null)),
        db_snapshot_arn: build.template(std.get(block, 'db_snapshot_arn', null)),
        destination_region: build.template(std.get(block, 'destination_region', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        iops: build.template(std.get(block, 'iops', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        license_model: build.template(std.get(block, 'license_model', null)),
        option_group_name: build.template(std.get(block, 'option_group_name', null)),
        port: build.template(std.get(block, 'port', null)),
        presigned_url: build.template(std.get(block, 'presigned_url', null)),
        shared_accounts: build.template(std.get(block, 'shared_accounts', null)),
        snapshot_type: build.template(std.get(block, 'snapshot_type', null)),
        source_db_snapshot_identifier: build.template(block.source_db_snapshot_identifier),
        source_region: build.template(std.get(block, 'source_region', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_custom_availability_zone: build.template(std.get(block, 'target_custom_availability_zone', null)),
        target_db_snapshot_identifier: build.template(block.target_db_snapshot_identifier),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      allocated_storage: resource.field('allocated_storage'),
      availability_zone: resource.field('availability_zone'),
      copy_tags: resource.field('copy_tags'),
      db_snapshot_arn: resource.field('db_snapshot_arn'),
      destination_region: resource.field('destination_region'),
      encrypted: resource.field('encrypted'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      iops: resource.field('iops'),
      kms_key_id: resource.field('kms_key_id'),
      license_model: resource.field('license_model'),
      option_group_name: resource.field('option_group_name'),
      port: resource.field('port'),
      presigned_url: resource.field('presigned_url'),
      shared_accounts: resource.field('shared_accounts'),
      snapshot_type: resource.field('snapshot_type'),
      source_db_snapshot_identifier: resource.field('source_db_snapshot_identifier'),
      source_region: resource.field('source_region'),
      storage_type: resource.field('storage_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_custom_availability_zone: resource.field('target_custom_availability_zone'),
      target_db_snapshot_identifier: resource.field('target_db_snapshot_identifier'),
      vpc_id: resource.field('vpc_id'),
    },
    db_subnet_group(name, block): {
      local resource = blockType.resource('aws_db_subnet_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        subnet_ids: build.template(block.subnet_ids),
        supported_network_types: build.template(std.get(block, 'supported_network_types', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      subnet_ids: resource.field('subnet_ids'),
      supported_network_types: resource.field('supported_network_types'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    default_network_acl(name, block): {
      local resource = blockType.resource('aws_default_network_acl', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_network_acl_id: build.template(block.default_network_acl_id),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      default_network_acl_id: resource.field('default_network_acl_id'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    default_route_table(name, block): {
      local resource = blockType.resource('aws_default_route_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_route_table_id: build.template(block.default_route_table_id),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        propagating_vgws: build.template(std.get(block, 'propagating_vgws', null)),
        route: build.template(std.get(block, 'route', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      default_route_table_id: resource.field('default_route_table_id'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      propagating_vgws: resource.field('propagating_vgws'),
      route: resource.field('route'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    default_security_group(name, block): {
      local resource = blockType.resource('aws_default_security_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        egress: build.template(std.get(block, 'egress', null)),
        id: build.template(std.get(block, 'id', null)),
        ingress: build.template(std.get(block, 'ingress', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        revoke_rules_on_delete: build.template(std.get(block, 'revoke_rules_on_delete', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      egress: resource.field('egress'),
      id: resource.field('id'),
      ingress: resource.field('ingress'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      owner_id: resource.field('owner_id'),
      revoke_rules_on_delete: resource.field('revoke_rules_on_delete'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    default_subnet(name, block): {
      local resource = blockType.resource('aws_default_subnet', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        assign_ipv6_address_on_creation: build.template(std.get(block, 'assign_ipv6_address_on_creation', null)),
        availability_zone: build.template(block.availability_zone),
        availability_zone_id: build.template(std.get(block, 'availability_zone_id', null)),
        cidr_block: build.template(std.get(block, 'cidr_block', null)),
        customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null)),
        enable_dns64: build.template(std.get(block, 'enable_dns64', null)),
        enable_lni_at_device_index: build.template(std.get(block, 'enable_lni_at_device_index', null)),
        enable_resource_name_dns_a_record_on_launch: build.template(std.get(block, 'enable_resource_name_dns_a_record_on_launch', null)),
        enable_resource_name_dns_aaaa_record_on_launch: build.template(std.get(block, 'enable_resource_name_dns_aaaa_record_on_launch', null)),
        existing_default_subnet: build.template(std.get(block, 'existing_default_subnet', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv6_cidr_block: build.template(std.get(block, 'ipv6_cidr_block', null)),
        ipv6_cidr_block_association_id: build.template(std.get(block, 'ipv6_cidr_block_association_id', null)),
        ipv6_native: build.template(std.get(block, 'ipv6_native', null)),
        map_customer_owned_ip_on_launch: build.template(std.get(block, 'map_customer_owned_ip_on_launch', null)),
        map_public_ip_on_launch: build.template(std.get(block, 'map_public_ip_on_launch', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        private_dns_hostname_type_on_launch: build.template(std.get(block, 'private_dns_hostname_type_on_launch', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      assign_ipv6_address_on_creation: resource.field('assign_ipv6_address_on_creation'),
      availability_zone: resource.field('availability_zone'),
      availability_zone_id: resource.field('availability_zone_id'),
      cidr_block: resource.field('cidr_block'),
      customer_owned_ipv4_pool: resource.field('customer_owned_ipv4_pool'),
      enable_dns64: resource.field('enable_dns64'),
      enable_lni_at_device_index: resource.field('enable_lni_at_device_index'),
      enable_resource_name_dns_a_record_on_launch: resource.field('enable_resource_name_dns_a_record_on_launch'),
      enable_resource_name_dns_aaaa_record_on_launch: resource.field('enable_resource_name_dns_aaaa_record_on_launch'),
      existing_default_subnet: resource.field('existing_default_subnet'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      ipv6_cidr_block: resource.field('ipv6_cidr_block'),
      ipv6_cidr_block_association_id: resource.field('ipv6_cidr_block_association_id'),
      ipv6_native: resource.field('ipv6_native'),
      map_customer_owned_ip_on_launch: resource.field('map_customer_owned_ip_on_launch'),
      map_public_ip_on_launch: resource.field('map_public_ip_on_launch'),
      outpost_arn: resource.field('outpost_arn'),
      owner_id: resource.field('owner_id'),
      private_dns_hostname_type_on_launch: resource.field('private_dns_hostname_type_on_launch'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    default_vpc(name, block): {
      local resource = blockType.resource('aws_default_vpc', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        assign_generated_ipv6_cidr_block: build.template(std.get(block, 'assign_generated_ipv6_cidr_block', null)),
        cidr_block: build.template(std.get(block, 'cidr_block', null)),
        default_network_acl_id: build.template(std.get(block, 'default_network_acl_id', null)),
        default_route_table_id: build.template(std.get(block, 'default_route_table_id', null)),
        default_security_group_id: build.template(std.get(block, 'default_security_group_id', null)),
        dhcp_options_id: build.template(std.get(block, 'dhcp_options_id', null)),
        enable_dns_hostnames: build.template(std.get(block, 'enable_dns_hostnames', null)),
        enable_dns_support: build.template(std.get(block, 'enable_dns_support', null)),
        enable_network_address_usage_metrics: build.template(std.get(block, 'enable_network_address_usage_metrics', null)),
        existing_default_vpc: build.template(std.get(block, 'existing_default_vpc', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_tenancy: build.template(std.get(block, 'instance_tenancy', null)),
        ipv6_association_id: build.template(std.get(block, 'ipv6_association_id', null)),
        ipv6_cidr_block: build.template(std.get(block, 'ipv6_cidr_block', null)),
        ipv6_cidr_block_network_border_group: build.template(std.get(block, 'ipv6_cidr_block_network_border_group', null)),
        ipv6_ipam_pool_id: build.template(std.get(block, 'ipv6_ipam_pool_id', null)),
        ipv6_netmask_length: build.template(std.get(block, 'ipv6_netmask_length', null)),
        main_route_table_id: build.template(std.get(block, 'main_route_table_id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      assign_generated_ipv6_cidr_block: resource.field('assign_generated_ipv6_cidr_block'),
      cidr_block: resource.field('cidr_block'),
      default_network_acl_id: resource.field('default_network_acl_id'),
      default_route_table_id: resource.field('default_route_table_id'),
      default_security_group_id: resource.field('default_security_group_id'),
      dhcp_options_id: resource.field('dhcp_options_id'),
      enable_dns_hostnames: resource.field('enable_dns_hostnames'),
      enable_dns_support: resource.field('enable_dns_support'),
      enable_network_address_usage_metrics: resource.field('enable_network_address_usage_metrics'),
      existing_default_vpc: resource.field('existing_default_vpc'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      instance_tenancy: resource.field('instance_tenancy'),
      ipv6_association_id: resource.field('ipv6_association_id'),
      ipv6_cidr_block: resource.field('ipv6_cidr_block'),
      ipv6_cidr_block_network_border_group: resource.field('ipv6_cidr_block_network_border_group'),
      ipv6_ipam_pool_id: resource.field('ipv6_ipam_pool_id'),
      ipv6_netmask_length: resource.field('ipv6_netmask_length'),
      main_route_table_id: resource.field('main_route_table_id'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    default_vpc_dhcp_options(name, block): {
      local resource = blockType.resource('aws_default_vpc_dhcp_options', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        domain_name_servers: build.template(std.get(block, 'domain_name_servers', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv6_address_preferred_lease_time: build.template(std.get(block, 'ipv6_address_preferred_lease_time', null)),
        netbios_name_servers: build.template(std.get(block, 'netbios_name_servers', null)),
        netbios_node_type: build.template(std.get(block, 'netbios_node_type', null)),
        ntp_servers: build.template(std.get(block, 'ntp_servers', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      domain_name: resource.field('domain_name'),
      domain_name_servers: resource.field('domain_name_servers'),
      id: resource.field('id'),
      ipv6_address_preferred_lease_time: resource.field('ipv6_address_preferred_lease_time'),
      netbios_name_servers: resource.field('netbios_name_servers'),
      netbios_node_type: resource.field('netbios_node_type'),
      ntp_servers: resource.field('ntp_servers'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    detective_graph(name, block): {
      local resource = blockType.resource('aws_detective_graph', name),
      _: resource._(block, {
        created_time: build.template(std.get(block, 'created_time', null)),
        graph_arn: build.template(std.get(block, 'graph_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      created_time: resource.field('created_time'),
      graph_arn: resource.field('graph_arn'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    detective_invitation_accepter(name, block): {
      local resource = blockType.resource('aws_detective_invitation_accepter', name),
      _: resource._(block, {
        graph_arn: build.template(block.graph_arn),
        id: build.template(std.get(block, 'id', null)),
      }),
      graph_arn: resource.field('graph_arn'),
      id: resource.field('id'),
    },
    detective_member(name, block): {
      local resource = blockType.resource('aws_detective_member', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        administrator_id: build.template(std.get(block, 'administrator_id', null)),
        disable_email_notification: build.template(std.get(block, 'disable_email_notification', null)),
        disabled_reason: build.template(std.get(block, 'disabled_reason', null)),
        email_address: build.template(block.email_address),
        graph_arn: build.template(block.graph_arn),
        id: build.template(std.get(block, 'id', null)),
        invited_time: build.template(std.get(block, 'invited_time', null)),
        message: build.template(std.get(block, 'message', null)),
        status: build.template(std.get(block, 'status', null)),
        updated_time: build.template(std.get(block, 'updated_time', null)),
        volume_usage_in_bytes: build.template(std.get(block, 'volume_usage_in_bytes', null)),
      }),
      account_id: resource.field('account_id'),
      administrator_id: resource.field('administrator_id'),
      disable_email_notification: resource.field('disable_email_notification'),
      disabled_reason: resource.field('disabled_reason'),
      email_address: resource.field('email_address'),
      graph_arn: resource.field('graph_arn'),
      id: resource.field('id'),
      invited_time: resource.field('invited_time'),
      message: resource.field('message'),
      status: resource.field('status'),
      updated_time: resource.field('updated_time'),
      volume_usage_in_bytes: resource.field('volume_usage_in_bytes'),
    },
    detective_organization_admin_account(name, block): {
      local resource = blockType.resource('aws_detective_organization_admin_account', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      account_id: resource.field('account_id'),
      id: resource.field('id'),
    },
    detective_organization_configuration(name, block): {
      local resource = blockType.resource('aws_detective_organization_configuration', name),
      _: resource._(block, {
        auto_enable: build.template(block.auto_enable),
        graph_arn: build.template(block.graph_arn),
        id: build.template(std.get(block, 'id', null)),
      }),
      auto_enable: resource.field('auto_enable'),
      graph_arn: resource.field('graph_arn'),
      id: resource.field('id'),
    },
    devicefarm_device_pool(name, block): {
      local resource = blockType.resource('aws_devicefarm_device_pool', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        max_devices: build.template(std.get(block, 'max_devices', null)),
        name: build.template(block.name),
        project_arn: build.template(block.project_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      max_devices: resource.field('max_devices'),
      name: resource.field('name'),
      project_arn: resource.field('project_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    devicefarm_instance_profile(name, block): {
      local resource = blockType.resource('aws_devicefarm_instance_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        exclude_app_packages_from_cleanup: build.template(std.get(block, 'exclude_app_packages_from_cleanup', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        package_cleanup: build.template(std.get(block, 'package_cleanup', null)),
        reboot_after_use: build.template(std.get(block, 'reboot_after_use', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      exclude_app_packages_from_cleanup: resource.field('exclude_app_packages_from_cleanup'),
      id: resource.field('id'),
      name: resource.field('name'),
      package_cleanup: resource.field('package_cleanup'),
      reboot_after_use: resource.field('reboot_after_use'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    devicefarm_network_profile(name, block): {
      local resource = blockType.resource('aws_devicefarm_network_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        downlink_bandwidth_bits: build.template(std.get(block, 'downlink_bandwidth_bits', null)),
        downlink_delay_ms: build.template(std.get(block, 'downlink_delay_ms', null)),
        downlink_jitter_ms: build.template(std.get(block, 'downlink_jitter_ms', null)),
        downlink_loss_percent: build.template(std.get(block, 'downlink_loss_percent', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project_arn: build.template(block.project_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
        uplink_bandwidth_bits: build.template(std.get(block, 'uplink_bandwidth_bits', null)),
        uplink_delay_ms: build.template(std.get(block, 'uplink_delay_ms', null)),
        uplink_jitter_ms: build.template(std.get(block, 'uplink_jitter_ms', null)),
        uplink_loss_percent: build.template(std.get(block, 'uplink_loss_percent', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      downlink_bandwidth_bits: resource.field('downlink_bandwidth_bits'),
      downlink_delay_ms: resource.field('downlink_delay_ms'),
      downlink_jitter_ms: resource.field('downlink_jitter_ms'),
      downlink_loss_percent: resource.field('downlink_loss_percent'),
      id: resource.field('id'),
      name: resource.field('name'),
      project_arn: resource.field('project_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      uplink_bandwidth_bits: resource.field('uplink_bandwidth_bits'),
      uplink_delay_ms: resource.field('uplink_delay_ms'),
      uplink_jitter_ms: resource.field('uplink_jitter_ms'),
      uplink_loss_percent: resource.field('uplink_loss_percent'),
    },
    devicefarm_project(name, block): {
      local resource = blockType.resource('aws_devicefarm_project', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_job_timeout_minutes: build.template(std.get(block, 'default_job_timeout_minutes', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      default_job_timeout_minutes: resource.field('default_job_timeout_minutes'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    devicefarm_test_grid_project(name, block): {
      local resource = blockType.resource('aws_devicefarm_test_grid_project', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    devicefarm_upload(name, block): {
      local resource = blockType.resource('aws_devicefarm_upload', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        category: build.template(std.get(block, 'category', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        project_arn: build.template(block.project_arn),
        type: build.template(block.type),
        url: build.template(std.get(block, 'url', null)),
      }),
      arn: resource.field('arn'),
      category: resource.field('category'),
      content_type: resource.field('content_type'),
      id: resource.field('id'),
      metadata: resource.field('metadata'),
      name: resource.field('name'),
      project_arn: resource.field('project_arn'),
      type: resource.field('type'),
      url: resource.field('url'),
    },
    devopsguru_event_sources_config(name, block): {
      local resource = blockType.resource('aws_devopsguru_event_sources_config', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    devopsguru_notification_channel(name, block): {
      local resource = blockType.resource('aws_devopsguru_notification_channel', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    devopsguru_resource_collection(name, block): {
      local resource = blockType.resource('aws_devopsguru_resource_collection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        type: build.template(block.type),
      }),
      id: resource.field('id'),
      type: resource.field('type'),
    },
    devopsguru_service_integration(name, block): {
      local resource = blockType.resource('aws_devopsguru_service_integration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    directory_service_conditional_forwarder(name, block): {
      local resource = blockType.resource('aws_directory_service_conditional_forwarder', name),
      _: resource._(block, {
        directory_id: build.template(block.directory_id),
        dns_ips: build.template(block.dns_ips),
        id: build.template(std.get(block, 'id', null)),
        remote_domain_name: build.template(block.remote_domain_name),
      }),
      directory_id: resource.field('directory_id'),
      dns_ips: resource.field('dns_ips'),
      id: resource.field('id'),
      remote_domain_name: resource.field('remote_domain_name'),
    },
    directory_service_directory(name, block): {
      local resource = blockType.resource('aws_directory_service_directory', name),
      _: resource._(block, {
        access_url: build.template(std.get(block, 'access_url', null)),
        alias: build.template(std.get(block, 'alias', null)),
        description: build.template(std.get(block, 'description', null)),
        desired_number_of_domain_controllers: build.template(std.get(block, 'desired_number_of_domain_controllers', null)),
        dns_ip_addresses: build.template(std.get(block, 'dns_ip_addresses', null)),
        edition: build.template(std.get(block, 'edition', null)),
        enable_sso: build.template(std.get(block, 'enable_sso', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        password: build.template(block.password),
        security_group_id: build.template(std.get(block, 'security_group_id', null)),
        short_name: build.template(std.get(block, 'short_name', null)),
        size: build.template(std.get(block, 'size', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      access_url: resource.field('access_url'),
      alias: resource.field('alias'),
      description: resource.field('description'),
      desired_number_of_domain_controllers: resource.field('desired_number_of_domain_controllers'),
      dns_ip_addresses: resource.field('dns_ip_addresses'),
      edition: resource.field('edition'),
      enable_sso: resource.field('enable_sso'),
      id: resource.field('id'),
      name: resource.field('name'),
      password: resource.field('password'),
      security_group_id: resource.field('security_group_id'),
      short_name: resource.field('short_name'),
      size: resource.field('size'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    directory_service_log_subscription(name, block): {
      local resource = blockType.resource('aws_directory_service_log_subscription', name),
      _: resource._(block, {
        directory_id: build.template(block.directory_id),
        id: build.template(std.get(block, 'id', null)),
        log_group_name: build.template(block.log_group_name),
      }),
      directory_id: resource.field('directory_id'),
      id: resource.field('id'),
      log_group_name: resource.field('log_group_name'),
    },
    directory_service_radius_settings(name, block): {
      local resource = blockType.resource('aws_directory_service_radius_settings', name),
      _: resource._(block, {
        authentication_protocol: build.template(block.authentication_protocol),
        directory_id: build.template(block.directory_id),
        display_label: build.template(block.display_label),
        id: build.template(std.get(block, 'id', null)),
        radius_port: build.template(block.radius_port),
        radius_retries: build.template(block.radius_retries),
        radius_servers: build.template(block.radius_servers),
        radius_timeout: build.template(block.radius_timeout),
        shared_secret: build.template(block.shared_secret),
        use_same_username: build.template(std.get(block, 'use_same_username', null)),
      }),
      authentication_protocol: resource.field('authentication_protocol'),
      directory_id: resource.field('directory_id'),
      display_label: resource.field('display_label'),
      id: resource.field('id'),
      radius_port: resource.field('radius_port'),
      radius_retries: resource.field('radius_retries'),
      radius_servers: resource.field('radius_servers'),
      radius_timeout: resource.field('radius_timeout'),
      shared_secret: resource.field('shared_secret'),
      use_same_username: resource.field('use_same_username'),
    },
    directory_service_region(name, block): {
      local resource = blockType.resource('aws_directory_service_region', name),
      _: resource._(block, {
        desired_number_of_domain_controllers: build.template(std.get(block, 'desired_number_of_domain_controllers', null)),
        directory_id: build.template(block.directory_id),
        id: build.template(std.get(block, 'id', null)),
        region_name: build.template(block.region_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      desired_number_of_domain_controllers: resource.field('desired_number_of_domain_controllers'),
      directory_id: resource.field('directory_id'),
      id: resource.field('id'),
      region_name: resource.field('region_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    directory_service_shared_directory(name, block): {
      local resource = blockType.resource('aws_directory_service_shared_directory', name),
      _: resource._(block, {
        directory_id: build.template(block.directory_id),
        id: build.template(std.get(block, 'id', null)),
        method: build.template(std.get(block, 'method', null)),
        notes: build.template(std.get(block, 'notes', null)),
        shared_directory_id: build.template(std.get(block, 'shared_directory_id', null)),
      }),
      directory_id: resource.field('directory_id'),
      id: resource.field('id'),
      method: resource.field('method'),
      notes: resource.field('notes'),
      shared_directory_id: resource.field('shared_directory_id'),
    },
    directory_service_shared_directory_accepter(name, block): {
      local resource = blockType.resource('aws_directory_service_shared_directory_accepter', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        method: build.template(std.get(block, 'method', null)),
        notes: build.template(std.get(block, 'notes', null)),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
        owner_directory_id: build.template(std.get(block, 'owner_directory_id', null)),
        shared_directory_id: build.template(block.shared_directory_id),
      }),
      id: resource.field('id'),
      method: resource.field('method'),
      notes: resource.field('notes'),
      owner_account_id: resource.field('owner_account_id'),
      owner_directory_id: resource.field('owner_directory_id'),
      shared_directory_id: resource.field('shared_directory_id'),
    },
    directory_service_trust(name, block): {
      local resource = blockType.resource('aws_directory_service_trust', name),
      _: resource._(block, {
        conditional_forwarder_ip_addrs: build.template(std.get(block, 'conditional_forwarder_ip_addrs', null)),
        created_date_time: build.template(std.get(block, 'created_date_time', null)),
        delete_associated_conditional_forwarder: build.template(std.get(block, 'delete_associated_conditional_forwarder', null)),
        directory_id: build.template(block.directory_id),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date_time: build.template(std.get(block, 'last_updated_date_time', null)),
        remote_domain_name: build.template(block.remote_domain_name),
        selective_auth: build.template(std.get(block, 'selective_auth', null)),
        state_last_updated_date_time: build.template(std.get(block, 'state_last_updated_date_time', null)),
        trust_direction: build.template(block.trust_direction),
        trust_password: build.template(block.trust_password),
        trust_state: build.template(std.get(block, 'trust_state', null)),
        trust_state_reason: build.template(std.get(block, 'trust_state_reason', null)),
        trust_type: build.template(std.get(block, 'trust_type', null)),
      }),
      conditional_forwarder_ip_addrs: resource.field('conditional_forwarder_ip_addrs'),
      created_date_time: resource.field('created_date_time'),
      delete_associated_conditional_forwarder: resource.field('delete_associated_conditional_forwarder'),
      directory_id: resource.field('directory_id'),
      id: resource.field('id'),
      last_updated_date_time: resource.field('last_updated_date_time'),
      remote_domain_name: resource.field('remote_domain_name'),
      selective_auth: resource.field('selective_auth'),
      state_last_updated_date_time: resource.field('state_last_updated_date_time'),
      trust_direction: resource.field('trust_direction'),
      trust_password: resource.field('trust_password'),
      trust_state: resource.field('trust_state'),
      trust_state_reason: resource.field('trust_state_reason'),
      trust_type: resource.field('trust_type'),
    },
    dlm_lifecycle_policy(name, block): {
      local resource = blockType.resource('aws_dlm_lifecycle_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(block.description),
        execution_role_arn: build.template(block.execution_role_arn),
        id: build.template(std.get(block, 'id', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      execution_role_arn: resource.field('execution_role_arn'),
      id: resource.field('id'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    dms_certificate(name, block): {
      local resource = blockType.resource('aws_dms_certificate', name),
      _: resource._(block, {
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        certificate_id: build.template(block.certificate_id),
        certificate_pem: build.template(std.get(block, 'certificate_pem', null)),
        certificate_wallet: build.template(std.get(block, 'certificate_wallet', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      certificate_arn: resource.field('certificate_arn'),
      certificate_id: resource.field('certificate_id'),
      certificate_pem: resource.field('certificate_pem'),
      certificate_wallet: resource.field('certificate_wallet'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    dms_endpoint(name, block): {
      local resource = blockType.resource('aws_dms_endpoint', name),
      _: resource._(block, {
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        database_name: build.template(std.get(block, 'database_name', null)),
        endpoint_arn: build.template(std.get(block, 'endpoint_arn', null)),
        endpoint_id: build.template(block.endpoint_id),
        endpoint_type: build.template(block.endpoint_type),
        engine_name: build.template(block.engine_name),
        extra_connection_attributes: build.template(std.get(block, 'extra_connection_attributes', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        password: build.template(std.get(block, 'password', null)),
        pause_replication_tasks: build.template(std.get(block, 'pause_replication_tasks', null)),
        port: build.template(std.get(block, 'port', null)),
        secrets_manager_access_role_arn: build.template(std.get(block, 'secrets_manager_access_role_arn', null)),
        secrets_manager_arn: build.template(std.get(block, 'secrets_manager_arn', null)),
        server_name: build.template(std.get(block, 'server_name', null)),
        service_access_role: build.template(std.get(block, 'service_access_role', null)),
        ssl_mode: build.template(std.get(block, 'ssl_mode', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      certificate_arn: resource.field('certificate_arn'),
      database_name: resource.field('database_name'),
      endpoint_arn: resource.field('endpoint_arn'),
      endpoint_id: resource.field('endpoint_id'),
      endpoint_type: resource.field('endpoint_type'),
      engine_name: resource.field('engine_name'),
      extra_connection_attributes: resource.field('extra_connection_attributes'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      password: resource.field('password'),
      pause_replication_tasks: resource.field('pause_replication_tasks'),
      port: resource.field('port'),
      secrets_manager_access_role_arn: resource.field('secrets_manager_access_role_arn'),
      secrets_manager_arn: resource.field('secrets_manager_arn'),
      server_name: resource.field('server_name'),
      service_access_role: resource.field('service_access_role'),
      ssl_mode: resource.field('ssl_mode'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      username: resource.field('username'),
    },
    dms_event_subscription(name, block): {
      local resource = blockType.resource('aws_dms_event_subscription', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        event_categories: build.template(block.event_categories),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        sns_topic_arn: build.template(block.sns_topic_arn),
        source_ids: build.template(std.get(block, 'source_ids', null)),
        source_type: build.template(block.source_type),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      enabled: resource.field('enabled'),
      event_categories: resource.field('event_categories'),
      id: resource.field('id'),
      name: resource.field('name'),
      sns_topic_arn: resource.field('sns_topic_arn'),
      source_ids: resource.field('source_ids'),
      source_type: resource.field('source_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    dms_replication_config(name, block): {
      local resource = blockType.resource('aws_dms_replication_config', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        replication_config_identifier: build.template(block.replication_config_identifier),
        replication_settings: build.template(std.get(block, 'replication_settings', null)),
        replication_type: build.template(block.replication_type),
        resource_identifier: build.template(std.get(block, 'resource_identifier', null)),
        source_endpoint_arn: build.template(block.source_endpoint_arn),
        start_replication: build.template(std.get(block, 'start_replication', null)),
        supplemental_settings: build.template(std.get(block, 'supplemental_settings', null)),
        table_mappings: build.template(block.table_mappings),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_endpoint_arn: build.template(block.target_endpoint_arn),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      replication_config_identifier: resource.field('replication_config_identifier'),
      replication_settings: resource.field('replication_settings'),
      replication_type: resource.field('replication_type'),
      resource_identifier: resource.field('resource_identifier'),
      source_endpoint_arn: resource.field('source_endpoint_arn'),
      start_replication: resource.field('start_replication'),
      supplemental_settings: resource.field('supplemental_settings'),
      table_mappings: resource.field('table_mappings'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_endpoint_arn: resource.field('target_endpoint_arn'),
    },
    dms_replication_instance(name, block): {
      local resource = blockType.resource('aws_dms_replication_instance', name),
      _: resource._(block, {
        allocated_storage: build.template(std.get(block, 'allocated_storage', null)),
        allow_major_version_upgrade: build.template(std.get(block, 'allow_major_version_upgrade', null)),
        apply_immediately: build.template(std.get(block, 'apply_immediately', null)),
        auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        multi_az: build.template(std.get(block, 'multi_az', null)),
        network_type: build.template(std.get(block, 'network_type', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        replication_instance_arn: build.template(std.get(block, 'replication_instance_arn', null)),
        replication_instance_class: build.template(block.replication_instance_class),
        replication_instance_id: build.template(block.replication_instance_id),
        replication_instance_private_ips: build.template(std.get(block, 'replication_instance_private_ips', null)),
        replication_instance_public_ips: build.template(std.get(block, 'replication_instance_public_ips', null)),
        replication_subnet_group_id: build.template(std.get(block, 'replication_subnet_group_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      allocated_storage: resource.field('allocated_storage'),
      allow_major_version_upgrade: resource.field('allow_major_version_upgrade'),
      apply_immediately: resource.field('apply_immediately'),
      auto_minor_version_upgrade: resource.field('auto_minor_version_upgrade'),
      availability_zone: resource.field('availability_zone'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      multi_az: resource.field('multi_az'),
      network_type: resource.field('network_type'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      publicly_accessible: resource.field('publicly_accessible'),
      replication_instance_arn: resource.field('replication_instance_arn'),
      replication_instance_class: resource.field('replication_instance_class'),
      replication_instance_id: resource.field('replication_instance_id'),
      replication_instance_private_ips: resource.field('replication_instance_private_ips'),
      replication_instance_public_ips: resource.field('replication_instance_public_ips'),
      replication_subnet_group_id: resource.field('replication_subnet_group_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    dms_replication_subnet_group(name, block): {
      local resource = blockType.resource('aws_dms_replication_subnet_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        replication_subnet_group_arn: build.template(std.get(block, 'replication_subnet_group_arn', null)),
        replication_subnet_group_description: build.template(block.replication_subnet_group_description),
        replication_subnet_group_id: build.template(block.replication_subnet_group_id),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      id: resource.field('id'),
      replication_subnet_group_arn: resource.field('replication_subnet_group_arn'),
      replication_subnet_group_description: resource.field('replication_subnet_group_description'),
      replication_subnet_group_id: resource.field('replication_subnet_group_id'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    dms_replication_task(name, block): {
      local resource = blockType.resource('aws_dms_replication_task', name),
      _: resource._(block, {
        cdc_start_position: build.template(std.get(block, 'cdc_start_position', null)),
        cdc_start_time: build.template(std.get(block, 'cdc_start_time', null)),
        id: build.template(std.get(block, 'id', null)),
        migration_type: build.template(block.migration_type),
        replication_instance_arn: build.template(block.replication_instance_arn),
        replication_task_arn: build.template(std.get(block, 'replication_task_arn', null)),
        replication_task_id: build.template(block.replication_task_id),
        replication_task_settings: build.template(std.get(block, 'replication_task_settings', null)),
        resource_identifier: build.template(std.get(block, 'resource_identifier', null)),
        source_endpoint_arn: build.template(block.source_endpoint_arn),
        start_replication_task: build.template(std.get(block, 'start_replication_task', null)),
        status: build.template(std.get(block, 'status', null)),
        table_mappings: build.template(block.table_mappings),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_endpoint_arn: build.template(block.target_endpoint_arn),
      }),
      cdc_start_position: resource.field('cdc_start_position'),
      cdc_start_time: resource.field('cdc_start_time'),
      id: resource.field('id'),
      migration_type: resource.field('migration_type'),
      replication_instance_arn: resource.field('replication_instance_arn'),
      replication_task_arn: resource.field('replication_task_arn'),
      replication_task_id: resource.field('replication_task_id'),
      replication_task_settings: resource.field('replication_task_settings'),
      resource_identifier: resource.field('resource_identifier'),
      source_endpoint_arn: resource.field('source_endpoint_arn'),
      start_replication_task: resource.field('start_replication_task'),
      status: resource.field('status'),
      table_mappings: resource.field('table_mappings'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_endpoint_arn: resource.field('target_endpoint_arn'),
    },
    dms_s3_endpoint(name, block): {
      local resource = blockType.resource('aws_dms_s3_endpoint', name),
      _: resource._(block, {
        add_column_name: build.template(std.get(block, 'add_column_name', null)),
        add_trailing_padding_character: build.template(std.get(block, 'add_trailing_padding_character', null)),
        bucket_folder: build.template(std.get(block, 'bucket_folder', null)),
        bucket_name: build.template(block.bucket_name),
        canned_acl_for_objects: build.template(std.get(block, 'canned_acl_for_objects', null)),
        cdc_inserts_and_updates: build.template(std.get(block, 'cdc_inserts_and_updates', null)),
        cdc_inserts_only: build.template(std.get(block, 'cdc_inserts_only', null)),
        cdc_max_batch_interval: build.template(std.get(block, 'cdc_max_batch_interval', null)),
        cdc_min_file_size: build.template(std.get(block, 'cdc_min_file_size', null)),
        cdc_path: build.template(std.get(block, 'cdc_path', null)),
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        compression_type: build.template(std.get(block, 'compression_type', null)),
        csv_delimiter: build.template(std.get(block, 'csv_delimiter', null)),
        csv_no_sup_value: build.template(std.get(block, 'csv_no_sup_value', null)),
        csv_null_value: build.template(std.get(block, 'csv_null_value', null)),
        csv_row_delimiter: build.template(std.get(block, 'csv_row_delimiter', null)),
        data_format: build.template(std.get(block, 'data_format', null)),
        data_page_size: build.template(std.get(block, 'data_page_size', null)),
        date_partition_delimiter: build.template(std.get(block, 'date_partition_delimiter', null)),
        date_partition_enabled: build.template(std.get(block, 'date_partition_enabled', null)),
        date_partition_sequence: build.template(std.get(block, 'date_partition_sequence', null)),
        date_partition_timezone: build.template(std.get(block, 'date_partition_timezone', null)),
        detach_target_on_lob_lookup_failure_parquet: build.template(std.get(block, 'detach_target_on_lob_lookup_failure_parquet', null)),
        dict_page_size_limit: build.template(std.get(block, 'dict_page_size_limit', null)),
        enable_statistics: build.template(std.get(block, 'enable_statistics', null)),
        encoding_type: build.template(std.get(block, 'encoding_type', null)),
        encryption_mode: build.template(std.get(block, 'encryption_mode', null)),
        endpoint_arn: build.template(std.get(block, 'endpoint_arn', null)),
        endpoint_id: build.template(block.endpoint_id),
        endpoint_type: build.template(block.endpoint_type),
        engine_display_name: build.template(std.get(block, 'engine_display_name', null)),
        expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null)),
        external_id: build.template(std.get(block, 'external_id', null)),
        external_table_definition: build.template(std.get(block, 'external_table_definition', null)),
        glue_catalog_generation: build.template(std.get(block, 'glue_catalog_generation', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_header_rows: build.template(std.get(block, 'ignore_header_rows', null)),
        include_op_for_full_load: build.template(std.get(block, 'include_op_for_full_load', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        max_file_size: build.template(std.get(block, 'max_file_size', null)),
        parquet_timestamp_in_millisecond: build.template(std.get(block, 'parquet_timestamp_in_millisecond', null)),
        parquet_version: build.template(std.get(block, 'parquet_version', null)),
        preserve_transactions: build.template(std.get(block, 'preserve_transactions', null)),
        rfc_4180: build.template(std.get(block, 'rfc_4180', null)),
        row_group_length: build.template(std.get(block, 'row_group_length', null)),
        server_side_encryption_kms_key_id: build.template(std.get(block, 'server_side_encryption_kms_key_id', null)),
        service_access_role_arn: build.template(block.service_access_role_arn),
        ssl_mode: build.template(std.get(block, 'ssl_mode', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        timestamp_column_name: build.template(std.get(block, 'timestamp_column_name', null)),
        use_csv_no_sup_value: build.template(std.get(block, 'use_csv_no_sup_value', null)),
        use_task_start_time_for_full_load_timestamp: build.template(std.get(block, 'use_task_start_time_for_full_load_timestamp', null)),
      }),
      add_column_name: resource.field('add_column_name'),
      add_trailing_padding_character: resource.field('add_trailing_padding_character'),
      bucket_folder: resource.field('bucket_folder'),
      bucket_name: resource.field('bucket_name'),
      canned_acl_for_objects: resource.field('canned_acl_for_objects'),
      cdc_inserts_and_updates: resource.field('cdc_inserts_and_updates'),
      cdc_inserts_only: resource.field('cdc_inserts_only'),
      cdc_max_batch_interval: resource.field('cdc_max_batch_interval'),
      cdc_min_file_size: resource.field('cdc_min_file_size'),
      cdc_path: resource.field('cdc_path'),
      certificate_arn: resource.field('certificate_arn'),
      compression_type: resource.field('compression_type'),
      csv_delimiter: resource.field('csv_delimiter'),
      csv_no_sup_value: resource.field('csv_no_sup_value'),
      csv_null_value: resource.field('csv_null_value'),
      csv_row_delimiter: resource.field('csv_row_delimiter'),
      data_format: resource.field('data_format'),
      data_page_size: resource.field('data_page_size'),
      date_partition_delimiter: resource.field('date_partition_delimiter'),
      date_partition_enabled: resource.field('date_partition_enabled'),
      date_partition_sequence: resource.field('date_partition_sequence'),
      date_partition_timezone: resource.field('date_partition_timezone'),
      detach_target_on_lob_lookup_failure_parquet: resource.field('detach_target_on_lob_lookup_failure_parquet'),
      dict_page_size_limit: resource.field('dict_page_size_limit'),
      enable_statistics: resource.field('enable_statistics'),
      encoding_type: resource.field('encoding_type'),
      encryption_mode: resource.field('encryption_mode'),
      endpoint_arn: resource.field('endpoint_arn'),
      endpoint_id: resource.field('endpoint_id'),
      endpoint_type: resource.field('endpoint_type'),
      engine_display_name: resource.field('engine_display_name'),
      expected_bucket_owner: resource.field('expected_bucket_owner'),
      external_id: resource.field('external_id'),
      external_table_definition: resource.field('external_table_definition'),
      glue_catalog_generation: resource.field('glue_catalog_generation'),
      id: resource.field('id'),
      ignore_header_rows: resource.field('ignore_header_rows'),
      include_op_for_full_load: resource.field('include_op_for_full_load'),
      kms_key_arn: resource.field('kms_key_arn'),
      max_file_size: resource.field('max_file_size'),
      parquet_timestamp_in_millisecond: resource.field('parquet_timestamp_in_millisecond'),
      parquet_version: resource.field('parquet_version'),
      preserve_transactions: resource.field('preserve_transactions'),
      rfc_4180: resource.field('rfc_4180'),
      row_group_length: resource.field('row_group_length'),
      server_side_encryption_kms_key_id: resource.field('server_side_encryption_kms_key_id'),
      service_access_role_arn: resource.field('service_access_role_arn'),
      ssl_mode: resource.field('ssl_mode'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      timestamp_column_name: resource.field('timestamp_column_name'),
      use_csv_no_sup_value: resource.field('use_csv_no_sup_value'),
      use_task_start_time_for_full_load_timestamp: resource.field('use_task_start_time_for_full_load_timestamp'),
    },
    docdb_cluster(name, block): {
      local resource = blockType.resource('aws_docdb_cluster', name),
      _: resource._(block, {
        allow_major_version_upgrade: build.template(std.get(block, 'allow_major_version_upgrade', null)),
        apply_immediately: build.template(std.get(block, 'apply_immediately', null)),
        arn: build.template(std.get(block, 'arn', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        backup_retention_period: build.template(std.get(block, 'backup_retention_period', null)),
        cluster_identifier: build.template(std.get(block, 'cluster_identifier', null)),
        cluster_identifier_prefix: build.template(std.get(block, 'cluster_identifier_prefix', null)),
        cluster_members: build.template(std.get(block, 'cluster_members', null)),
        cluster_resource_id: build.template(std.get(block, 'cluster_resource_id', null)),
        db_cluster_parameter_group_name: build.template(std.get(block, 'db_cluster_parameter_group_name', null)),
        db_subnet_group_name: build.template(std.get(block, 'db_subnet_group_name', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        enabled_cloudwatch_logs_exports: build.template(std.get(block, 'enabled_cloudwatch_logs_exports', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null)),
        global_cluster_identifier: build.template(std.get(block, 'global_cluster_identifier', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        master_password: build.template(std.get(block, 'master_password', null)),
        master_username: build.template(std.get(block, 'master_username', null)),
        port: build.template(std.get(block, 'port', null)),
        preferred_backup_window: build.template(std.get(block, 'preferred_backup_window', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        reader_endpoint: build.template(std.get(block, 'reader_endpoint', null)),
        skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null)),
        snapshot_identifier: build.template(std.get(block, 'snapshot_identifier', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      allow_major_version_upgrade: resource.field('allow_major_version_upgrade'),
      apply_immediately: resource.field('apply_immediately'),
      arn: resource.field('arn'),
      availability_zones: resource.field('availability_zones'),
      backup_retention_period: resource.field('backup_retention_period'),
      cluster_identifier: resource.field('cluster_identifier'),
      cluster_identifier_prefix: resource.field('cluster_identifier_prefix'),
      cluster_members: resource.field('cluster_members'),
      cluster_resource_id: resource.field('cluster_resource_id'),
      db_cluster_parameter_group_name: resource.field('db_cluster_parameter_group_name'),
      db_subnet_group_name: resource.field('db_subnet_group_name'),
      deletion_protection: resource.field('deletion_protection'),
      enabled_cloudwatch_logs_exports: resource.field('enabled_cloudwatch_logs_exports'),
      endpoint: resource.field('endpoint'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      final_snapshot_identifier: resource.field('final_snapshot_identifier'),
      global_cluster_identifier: resource.field('global_cluster_identifier'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      master_password: resource.field('master_password'),
      master_username: resource.field('master_username'),
      port: resource.field('port'),
      preferred_backup_window: resource.field('preferred_backup_window'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      reader_endpoint: resource.field('reader_endpoint'),
      skip_final_snapshot: resource.field('skip_final_snapshot'),
      snapshot_identifier: resource.field('snapshot_identifier'),
      storage_encrypted: resource.field('storage_encrypted'),
      storage_type: resource.field('storage_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    docdb_cluster_instance(name, block): {
      local resource = blockType.resource('aws_docdb_cluster_instance', name),
      _: resource._(block, {
        apply_immediately: build.template(std.get(block, 'apply_immediately', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        ca_cert_identifier: build.template(std.get(block, 'ca_cert_identifier', null)),
        cluster_identifier: build.template(block.cluster_identifier),
        copy_tags_to_snapshot: build.template(std.get(block, 'copy_tags_to_snapshot', null)),
        db_subnet_group_name: build.template(std.get(block, 'db_subnet_group_name', null)),
        dbi_resource_id: build.template(std.get(block, 'dbi_resource_id', null)),
        enable_performance_insights: build.template(std.get(block, 'enable_performance_insights', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        identifier: build.template(std.get(block, 'identifier', null)),
        identifier_prefix: build.template(std.get(block, 'identifier_prefix', null)),
        instance_class: build.template(block.instance_class),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        performance_insights_kms_key_id: build.template(std.get(block, 'performance_insights_kms_key_id', null)),
        port: build.template(std.get(block, 'port', null)),
        preferred_backup_window: build.template(std.get(block, 'preferred_backup_window', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        promotion_tier: build.template(std.get(block, 'promotion_tier', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        writer: build.template(std.get(block, 'writer', null)),
      }),
      apply_immediately: resource.field('apply_immediately'),
      arn: resource.field('arn'),
      auto_minor_version_upgrade: resource.field('auto_minor_version_upgrade'),
      availability_zone: resource.field('availability_zone'),
      ca_cert_identifier: resource.field('ca_cert_identifier'),
      cluster_identifier: resource.field('cluster_identifier'),
      copy_tags_to_snapshot: resource.field('copy_tags_to_snapshot'),
      db_subnet_group_name: resource.field('db_subnet_group_name'),
      dbi_resource_id: resource.field('dbi_resource_id'),
      enable_performance_insights: resource.field('enable_performance_insights'),
      endpoint: resource.field('endpoint'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      identifier: resource.field('identifier'),
      identifier_prefix: resource.field('identifier_prefix'),
      instance_class: resource.field('instance_class'),
      kms_key_id: resource.field('kms_key_id'),
      performance_insights_kms_key_id: resource.field('performance_insights_kms_key_id'),
      port: resource.field('port'),
      preferred_backup_window: resource.field('preferred_backup_window'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      promotion_tier: resource.field('promotion_tier'),
      publicly_accessible: resource.field('publicly_accessible'),
      storage_encrypted: resource.field('storage_encrypted'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      writer: resource.field('writer'),
    },
    docdb_cluster_parameter_group(name, block): {
      local resource = blockType.resource('aws_docdb_cluster_parameter_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        family: build.template(block.family),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      family: resource.field('family'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    docdb_cluster_snapshot(name, block): {
      local resource = blockType.resource('aws_docdb_cluster_snapshot', name),
      _: resource._(block, {
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        db_cluster_identifier: build.template(block.db_cluster_identifier),
        db_cluster_snapshot_arn: build.template(std.get(block, 'db_cluster_snapshot_arn', null)),
        db_cluster_snapshot_identifier: build.template(block.db_cluster_snapshot_identifier),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        port: build.template(std.get(block, 'port', null)),
        snapshot_type: build.template(std.get(block, 'snapshot_type', null)),
        source_db_cluster_snapshot_arn: build.template(std.get(block, 'source_db_cluster_snapshot_arn', null)),
        status: build.template(std.get(block, 'status', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      availability_zones: resource.field('availability_zones'),
      db_cluster_identifier: resource.field('db_cluster_identifier'),
      db_cluster_snapshot_arn: resource.field('db_cluster_snapshot_arn'),
      db_cluster_snapshot_identifier: resource.field('db_cluster_snapshot_identifier'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      port: resource.field('port'),
      snapshot_type: resource.field('snapshot_type'),
      source_db_cluster_snapshot_arn: resource.field('source_db_cluster_snapshot_arn'),
      status: resource.field('status'),
      storage_encrypted: resource.field('storage_encrypted'),
      vpc_id: resource.field('vpc_id'),
    },
    docdb_event_subscription(name, block): {
      local resource = blockType.resource('aws_docdb_event_subscription', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        customer_aws_id: build.template(std.get(block, 'customer_aws_id', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        event_categories: build.template(std.get(block, 'event_categories', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        sns_topic_arn: build.template(block.sns_topic_arn),
        source_ids: build.template(std.get(block, 'source_ids', null)),
        source_type: build.template(std.get(block, 'source_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      customer_aws_id: resource.field('customer_aws_id'),
      enabled: resource.field('enabled'),
      event_categories: resource.field('event_categories'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      sns_topic_arn: resource.field('sns_topic_arn'),
      source_ids: resource.field('source_ids'),
      source_type: resource.field('source_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    docdb_global_cluster(name, block): {
      local resource = blockType.resource('aws_docdb_global_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        database_name: build.template(std.get(block, 'database_name', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        global_cluster_identifier: build.template(block.global_cluster_identifier),
        global_cluster_members: build.template(std.get(block, 'global_cluster_members', null)),
        global_cluster_resource_id: build.template(std.get(block, 'global_cluster_resource_id', null)),
        id: build.template(std.get(block, 'id', null)),
        source_db_cluster_identifier: build.template(std.get(block, 'source_db_cluster_identifier', null)),
        status: build.template(std.get(block, 'status', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
      }),
      arn: resource.field('arn'),
      database_name: resource.field('database_name'),
      deletion_protection: resource.field('deletion_protection'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      global_cluster_identifier: resource.field('global_cluster_identifier'),
      global_cluster_members: resource.field('global_cluster_members'),
      global_cluster_resource_id: resource.field('global_cluster_resource_id'),
      id: resource.field('id'),
      source_db_cluster_identifier: resource.field('source_db_cluster_identifier'),
      status: resource.field('status'),
      storage_encrypted: resource.field('storage_encrypted'),
    },
    docdb_subnet_group(name, block): {
      local resource = blockType.resource('aws_docdb_subnet_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    docdbelastic_cluster(name, block): {
      local resource = blockType.resource('aws_docdbelastic_cluster', name),
      _: resource._(block, {
        admin_user_name: build.template(block.admin_user_name),
        admin_user_password: build.template(block.admin_user_password),
        arn: build.template(std.get(block, 'arn', null)),
        auth_type: build.template(block.auth_type),
        backup_retention_period: build.template(std.get(block, 'backup_retention_period', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        name: build.template(block.name),
        preferred_backup_window: build.template(std.get(block, 'preferred_backup_window', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        shard_capacity: build.template(block.shard_capacity),
        shard_count: build.template(block.shard_count),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      admin_user_name: resource.field('admin_user_name'),
      admin_user_password: resource.field('admin_user_password'),
      arn: resource.field('arn'),
      auth_type: resource.field('auth_type'),
      backup_retention_period: resource.field('backup_retention_period'),
      endpoint: resource.field('endpoint'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      name: resource.field('name'),
      preferred_backup_window: resource.field('preferred_backup_window'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      shard_capacity: resource.field('shard_capacity'),
      shard_count: resource.field('shard_count'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    drs_replication_configuration_template(name, block): {
      local resource = blockType.resource('aws_drs_replication_configuration_template', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        associate_default_security_group: build.template(block.associate_default_security_group),
        auto_replicate_new_disks: build.template(std.get(block, 'auto_replicate_new_disks', null)),
        bandwidth_throttling: build.template(block.bandwidth_throttling),
        create_public_ip: build.template(block.create_public_ip),
        data_plane_routing: build.template(block.data_plane_routing),
        default_large_staging_disk_type: build.template(block.default_large_staging_disk_type),
        ebs_encryption: build.template(block.ebs_encryption),
        ebs_encryption_key_arn: build.template(std.get(block, 'ebs_encryption_key_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        replication_server_instance_type: build.template(block.replication_server_instance_type),
        replication_servers_security_groups_ids: build.template(block.replication_servers_security_groups_ids),
        staging_area_subnet_id: build.template(block.staging_area_subnet_id),
        staging_area_tags: build.template(block.staging_area_tags),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        use_dedicated_replication_server: build.template(block.use_dedicated_replication_server),
      }),
      arn: resource.field('arn'),
      associate_default_security_group: resource.field('associate_default_security_group'),
      auto_replicate_new_disks: resource.field('auto_replicate_new_disks'),
      bandwidth_throttling: resource.field('bandwidth_throttling'),
      create_public_ip: resource.field('create_public_ip'),
      data_plane_routing: resource.field('data_plane_routing'),
      default_large_staging_disk_type: resource.field('default_large_staging_disk_type'),
      ebs_encryption: resource.field('ebs_encryption'),
      ebs_encryption_key_arn: resource.field('ebs_encryption_key_arn'),
      id: resource.field('id'),
      replication_server_instance_type: resource.field('replication_server_instance_type'),
      replication_servers_security_groups_ids: resource.field('replication_servers_security_groups_ids'),
      staging_area_subnet_id: resource.field('staging_area_subnet_id'),
      staging_area_tags: resource.field('staging_area_tags'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      use_dedicated_replication_server: resource.field('use_dedicated_replication_server'),
    },
    dx_bgp_peer(name, block): {
      local resource = blockType.resource('aws_dx_bgp_peer', name),
      _: resource._(block, {
        address_family: build.template(block.address_family),
        amazon_address: build.template(std.get(block, 'amazon_address', null)),
        aws_device: build.template(std.get(block, 'aws_device', null)),
        bgp_asn: build.template(block.bgp_asn),
        bgp_auth_key: build.template(std.get(block, 'bgp_auth_key', null)),
        bgp_peer_id: build.template(std.get(block, 'bgp_peer_id', null)),
        bgp_status: build.template(std.get(block, 'bgp_status', null)),
        customer_address: build.template(std.get(block, 'customer_address', null)),
        id: build.template(std.get(block, 'id', null)),
        virtual_interface_id: build.template(block.virtual_interface_id),
      }),
      address_family: resource.field('address_family'),
      amazon_address: resource.field('amazon_address'),
      aws_device: resource.field('aws_device'),
      bgp_asn: resource.field('bgp_asn'),
      bgp_auth_key: resource.field('bgp_auth_key'),
      bgp_peer_id: resource.field('bgp_peer_id'),
      bgp_status: resource.field('bgp_status'),
      customer_address: resource.field('customer_address'),
      id: resource.field('id'),
      virtual_interface_id: resource.field('virtual_interface_id'),
    },
    dx_connection(name, block): {
      local resource = blockType.resource('aws_dx_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_device: build.template(std.get(block, 'aws_device', null)),
        bandwidth: build.template(block.bandwidth),
        encryption_mode: build.template(std.get(block, 'encryption_mode', null)),
        has_logical_redundancy: build.template(std.get(block, 'has_logical_redundancy', null)),
        id: build.template(std.get(block, 'id', null)),
        jumbo_frame_capable: build.template(std.get(block, 'jumbo_frame_capable', null)),
        location: build.template(block.location),
        macsec_capable: build.template(std.get(block, 'macsec_capable', null)),
        name: build.template(block.name),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
        partner_name: build.template(std.get(block, 'partner_name', null)),
        port_encryption_status: build.template(std.get(block, 'port_encryption_status', null)),
        provider_name: build.template(std.get(block, 'provider_name', null)),
        request_macsec: build.template(std.get(block, 'request_macsec', null)),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vlan_id: build.template(std.get(block, 'vlan_id', null)),
      }),
      arn: resource.field('arn'),
      aws_device: resource.field('aws_device'),
      bandwidth: resource.field('bandwidth'),
      encryption_mode: resource.field('encryption_mode'),
      has_logical_redundancy: resource.field('has_logical_redundancy'),
      id: resource.field('id'),
      jumbo_frame_capable: resource.field('jumbo_frame_capable'),
      location: resource.field('location'),
      macsec_capable: resource.field('macsec_capable'),
      name: resource.field('name'),
      owner_account_id: resource.field('owner_account_id'),
      partner_name: resource.field('partner_name'),
      port_encryption_status: resource.field('port_encryption_status'),
      provider_name: resource.field('provider_name'),
      request_macsec: resource.field('request_macsec'),
      skip_destroy: resource.field('skip_destroy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vlan_id: resource.field('vlan_id'),
    },
    dx_connection_association(name, block): {
      local resource = blockType.resource('aws_dx_connection_association', name),
      _: resource._(block, {
        connection_id: build.template(block.connection_id),
        id: build.template(std.get(block, 'id', null)),
        lag_id: build.template(block.lag_id),
      }),
      connection_id: resource.field('connection_id'),
      id: resource.field('id'),
      lag_id: resource.field('lag_id'),
    },
    dx_connection_confirmation(name, block): {
      local resource = blockType.resource('aws_dx_connection_confirmation', name),
      _: resource._(block, {
        connection_id: build.template(block.connection_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      connection_id: resource.field('connection_id'),
      id: resource.field('id'),
    },
    dx_gateway(name, block): {
      local resource = blockType.resource('aws_dx_gateway', name),
      _: resource._(block, {
        amazon_side_asn: build.template(block.amazon_side_asn),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
      }),
      amazon_side_asn: resource.field('amazon_side_asn'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner_account_id: resource.field('owner_account_id'),
    },
    dx_gateway_association(name, block): {
      local resource = blockType.resource('aws_dx_gateway_association', name),
      _: resource._(block, {
        allowed_prefixes: build.template(std.get(block, 'allowed_prefixes', null)),
        associated_gateway_id: build.template(std.get(block, 'associated_gateway_id', null)),
        associated_gateway_owner_account_id: build.template(std.get(block, 'associated_gateway_owner_account_id', null)),
        associated_gateway_type: build.template(std.get(block, 'associated_gateway_type', null)),
        dx_gateway_association_id: build.template(std.get(block, 'dx_gateway_association_id', null)),
        dx_gateway_id: build.template(block.dx_gateway_id),
        dx_gateway_owner_account_id: build.template(std.get(block, 'dx_gateway_owner_account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        proposal_id: build.template(std.get(block, 'proposal_id', null)),
        vpn_gateway_id: build.template(std.get(block, 'vpn_gateway_id', null)),
      }),
      allowed_prefixes: resource.field('allowed_prefixes'),
      associated_gateway_id: resource.field('associated_gateway_id'),
      associated_gateway_owner_account_id: resource.field('associated_gateway_owner_account_id'),
      associated_gateway_type: resource.field('associated_gateway_type'),
      dx_gateway_association_id: resource.field('dx_gateway_association_id'),
      dx_gateway_id: resource.field('dx_gateway_id'),
      dx_gateway_owner_account_id: resource.field('dx_gateway_owner_account_id'),
      id: resource.field('id'),
      proposal_id: resource.field('proposal_id'),
      vpn_gateway_id: resource.field('vpn_gateway_id'),
    },
    dx_gateway_association_proposal(name, block): {
      local resource = blockType.resource('aws_dx_gateway_association_proposal', name),
      _: resource._(block, {
        allowed_prefixes: build.template(std.get(block, 'allowed_prefixes', null)),
        associated_gateway_id: build.template(block.associated_gateway_id),
        associated_gateway_owner_account_id: build.template(std.get(block, 'associated_gateway_owner_account_id', null)),
        associated_gateway_type: build.template(std.get(block, 'associated_gateway_type', null)),
        dx_gateway_id: build.template(block.dx_gateway_id),
        dx_gateway_owner_account_id: build.template(block.dx_gateway_owner_account_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      allowed_prefixes: resource.field('allowed_prefixes'),
      associated_gateway_id: resource.field('associated_gateway_id'),
      associated_gateway_owner_account_id: resource.field('associated_gateway_owner_account_id'),
      associated_gateway_type: resource.field('associated_gateway_type'),
      dx_gateway_id: resource.field('dx_gateway_id'),
      dx_gateway_owner_account_id: resource.field('dx_gateway_owner_account_id'),
      id: resource.field('id'),
    },
    dx_hosted_connection(name, block): {
      local resource = blockType.resource('aws_dx_hosted_connection', name),
      _: resource._(block, {
        aws_device: build.template(std.get(block, 'aws_device', null)),
        bandwidth: build.template(block.bandwidth),
        connection_id: build.template(block.connection_id),
        has_logical_redundancy: build.template(std.get(block, 'has_logical_redundancy', null)),
        id: build.template(std.get(block, 'id', null)),
        jumbo_frame_capable: build.template(std.get(block, 'jumbo_frame_capable', null)),
        lag_id: build.template(std.get(block, 'lag_id', null)),
        loa_issue_time: build.template(std.get(block, 'loa_issue_time', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        owner_account_id: build.template(block.owner_account_id),
        partner_name: build.template(std.get(block, 'partner_name', null)),
        provider_name: build.template(std.get(block, 'provider_name', null)),
        region: build.template(std.get(block, 'region', null)),
        state: build.template(std.get(block, 'state', null)),
        vlan: build.template(block.vlan),
      }),
      aws_device: resource.field('aws_device'),
      bandwidth: resource.field('bandwidth'),
      connection_id: resource.field('connection_id'),
      has_logical_redundancy: resource.field('has_logical_redundancy'),
      id: resource.field('id'),
      jumbo_frame_capable: resource.field('jumbo_frame_capable'),
      lag_id: resource.field('lag_id'),
      loa_issue_time: resource.field('loa_issue_time'),
      location: resource.field('location'),
      name: resource.field('name'),
      owner_account_id: resource.field('owner_account_id'),
      partner_name: resource.field('partner_name'),
      provider_name: resource.field('provider_name'),
      region: resource.field('region'),
      state: resource.field('state'),
      vlan: resource.field('vlan'),
    },
    dx_hosted_private_virtual_interface(name, block): {
      local resource = blockType.resource('aws_dx_hosted_private_virtual_interface', name),
      _: resource._(block, {
        address_family: build.template(block.address_family),
        amazon_address: build.template(std.get(block, 'amazon_address', null)),
        amazon_side_asn: build.template(std.get(block, 'amazon_side_asn', null)),
        arn: build.template(std.get(block, 'arn', null)),
        aws_device: build.template(std.get(block, 'aws_device', null)),
        bgp_asn: build.template(block.bgp_asn),
        bgp_auth_key: build.template(std.get(block, 'bgp_auth_key', null)),
        connection_id: build.template(block.connection_id),
        customer_address: build.template(std.get(block, 'customer_address', null)),
        id: build.template(std.get(block, 'id', null)),
        jumbo_frame_capable: build.template(std.get(block, 'jumbo_frame_capable', null)),
        mtu: build.template(std.get(block, 'mtu', null)),
        name: build.template(block.name),
        owner_account_id: build.template(block.owner_account_id),
        vlan: build.template(block.vlan),
      }),
      address_family: resource.field('address_family'),
      amazon_address: resource.field('amazon_address'),
      amazon_side_asn: resource.field('amazon_side_asn'),
      arn: resource.field('arn'),
      aws_device: resource.field('aws_device'),
      bgp_asn: resource.field('bgp_asn'),
      bgp_auth_key: resource.field('bgp_auth_key'),
      connection_id: resource.field('connection_id'),
      customer_address: resource.field('customer_address'),
      id: resource.field('id'),
      jumbo_frame_capable: resource.field('jumbo_frame_capable'),
      mtu: resource.field('mtu'),
      name: resource.field('name'),
      owner_account_id: resource.field('owner_account_id'),
      vlan: resource.field('vlan'),
    },
    dx_hosted_private_virtual_interface_accepter(name, block): {
      local resource = blockType.resource('aws_dx_hosted_private_virtual_interface_accepter', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        dx_gateway_id: build.template(std.get(block, 'dx_gateway_id', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        virtual_interface_id: build.template(block.virtual_interface_id),
        vpn_gateway_id: build.template(std.get(block, 'vpn_gateway_id', null)),
      }),
      arn: resource.field('arn'),
      dx_gateway_id: resource.field('dx_gateway_id'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      virtual_interface_id: resource.field('virtual_interface_id'),
      vpn_gateway_id: resource.field('vpn_gateway_id'),
    },
    dx_hosted_public_virtual_interface(name, block): {
      local resource = blockType.resource('aws_dx_hosted_public_virtual_interface', name),
      _: resource._(block, {
        address_family: build.template(block.address_family),
        amazon_address: build.template(std.get(block, 'amazon_address', null)),
        amazon_side_asn: build.template(std.get(block, 'amazon_side_asn', null)),
        arn: build.template(std.get(block, 'arn', null)),
        aws_device: build.template(std.get(block, 'aws_device', null)),
        bgp_asn: build.template(block.bgp_asn),
        bgp_auth_key: build.template(std.get(block, 'bgp_auth_key', null)),
        connection_id: build.template(block.connection_id),
        customer_address: build.template(std.get(block, 'customer_address', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner_account_id: build.template(block.owner_account_id),
        route_filter_prefixes: build.template(block.route_filter_prefixes),
        vlan: build.template(block.vlan),
      }),
      address_family: resource.field('address_family'),
      amazon_address: resource.field('amazon_address'),
      amazon_side_asn: resource.field('amazon_side_asn'),
      arn: resource.field('arn'),
      aws_device: resource.field('aws_device'),
      bgp_asn: resource.field('bgp_asn'),
      bgp_auth_key: resource.field('bgp_auth_key'),
      connection_id: resource.field('connection_id'),
      customer_address: resource.field('customer_address'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner_account_id: resource.field('owner_account_id'),
      route_filter_prefixes: resource.field('route_filter_prefixes'),
      vlan: resource.field('vlan'),
    },
    dx_hosted_public_virtual_interface_accepter(name, block): {
      local resource = blockType.resource('aws_dx_hosted_public_virtual_interface_accepter', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        virtual_interface_id: build.template(block.virtual_interface_id),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      virtual_interface_id: resource.field('virtual_interface_id'),
    },
    dx_hosted_transit_virtual_interface(name, block): {
      local resource = blockType.resource('aws_dx_hosted_transit_virtual_interface', name),
      _: resource._(block, {
        address_family: build.template(block.address_family),
        amazon_address: build.template(std.get(block, 'amazon_address', null)),
        amazon_side_asn: build.template(std.get(block, 'amazon_side_asn', null)),
        arn: build.template(std.get(block, 'arn', null)),
        aws_device: build.template(std.get(block, 'aws_device', null)),
        bgp_asn: build.template(block.bgp_asn),
        bgp_auth_key: build.template(std.get(block, 'bgp_auth_key', null)),
        connection_id: build.template(block.connection_id),
        customer_address: build.template(std.get(block, 'customer_address', null)),
        id: build.template(std.get(block, 'id', null)),
        jumbo_frame_capable: build.template(std.get(block, 'jumbo_frame_capable', null)),
        mtu: build.template(std.get(block, 'mtu', null)),
        name: build.template(block.name),
        owner_account_id: build.template(block.owner_account_id),
        vlan: build.template(block.vlan),
      }),
      address_family: resource.field('address_family'),
      amazon_address: resource.field('amazon_address'),
      amazon_side_asn: resource.field('amazon_side_asn'),
      arn: resource.field('arn'),
      aws_device: resource.field('aws_device'),
      bgp_asn: resource.field('bgp_asn'),
      bgp_auth_key: resource.field('bgp_auth_key'),
      connection_id: resource.field('connection_id'),
      customer_address: resource.field('customer_address'),
      id: resource.field('id'),
      jumbo_frame_capable: resource.field('jumbo_frame_capable'),
      mtu: resource.field('mtu'),
      name: resource.field('name'),
      owner_account_id: resource.field('owner_account_id'),
      vlan: resource.field('vlan'),
    },
    dx_hosted_transit_virtual_interface_accepter(name, block): {
      local resource = blockType.resource('aws_dx_hosted_transit_virtual_interface_accepter', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        dx_gateway_id: build.template(block.dx_gateway_id),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        virtual_interface_id: build.template(block.virtual_interface_id),
      }),
      arn: resource.field('arn'),
      dx_gateway_id: resource.field('dx_gateway_id'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      virtual_interface_id: resource.field('virtual_interface_id'),
    },
    dx_lag(name, block): {
      local resource = blockType.resource('aws_dx_lag', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        connection_id: build.template(std.get(block, 'connection_id', null)),
        connections_bandwidth: build.template(block.connections_bandwidth),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        has_logical_redundancy: build.template(std.get(block, 'has_logical_redundancy', null)),
        id: build.template(std.get(block, 'id', null)),
        jumbo_frame_capable: build.template(std.get(block, 'jumbo_frame_capable', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
        provider_name: build.template(std.get(block, 'provider_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      connection_id: resource.field('connection_id'),
      connections_bandwidth: resource.field('connections_bandwidth'),
      force_destroy: resource.field('force_destroy'),
      has_logical_redundancy: resource.field('has_logical_redundancy'),
      id: resource.field('id'),
      jumbo_frame_capable: resource.field('jumbo_frame_capable'),
      location: resource.field('location'),
      name: resource.field('name'),
      owner_account_id: resource.field('owner_account_id'),
      provider_name: resource.field('provider_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    dx_macsec_key_association(name, block): {
      local resource = blockType.resource('aws_dx_macsec_key_association', name),
      _: resource._(block, {
        cak: build.template(std.get(block, 'cak', null)),
        ckn: build.template(std.get(block, 'ckn', null)),
        connection_id: build.template(block.connection_id),
        id: build.template(std.get(block, 'id', null)),
        secret_arn: build.template(std.get(block, 'secret_arn', null)),
        start_on: build.template(std.get(block, 'start_on', null)),
        state: build.template(std.get(block, 'state', null)),
      }),
      cak: resource.field('cak'),
      ckn: resource.field('ckn'),
      connection_id: resource.field('connection_id'),
      id: resource.field('id'),
      secret_arn: resource.field('secret_arn'),
      start_on: resource.field('start_on'),
      state: resource.field('state'),
    },
    dx_private_virtual_interface(name, block): {
      local resource = blockType.resource('aws_dx_private_virtual_interface', name),
      _: resource._(block, {
        address_family: build.template(block.address_family),
        amazon_address: build.template(std.get(block, 'amazon_address', null)),
        amazon_side_asn: build.template(std.get(block, 'amazon_side_asn', null)),
        arn: build.template(std.get(block, 'arn', null)),
        aws_device: build.template(std.get(block, 'aws_device', null)),
        bgp_asn: build.template(block.bgp_asn),
        bgp_auth_key: build.template(std.get(block, 'bgp_auth_key', null)),
        connection_id: build.template(block.connection_id),
        customer_address: build.template(std.get(block, 'customer_address', null)),
        dx_gateway_id: build.template(std.get(block, 'dx_gateway_id', null)),
        id: build.template(std.get(block, 'id', null)),
        jumbo_frame_capable: build.template(std.get(block, 'jumbo_frame_capable', null)),
        mtu: build.template(std.get(block, 'mtu', null)),
        name: build.template(block.name),
        sitelink_enabled: build.template(std.get(block, 'sitelink_enabled', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vlan: build.template(block.vlan),
        vpn_gateway_id: build.template(std.get(block, 'vpn_gateway_id', null)),
      }),
      address_family: resource.field('address_family'),
      amazon_address: resource.field('amazon_address'),
      amazon_side_asn: resource.field('amazon_side_asn'),
      arn: resource.field('arn'),
      aws_device: resource.field('aws_device'),
      bgp_asn: resource.field('bgp_asn'),
      bgp_auth_key: resource.field('bgp_auth_key'),
      connection_id: resource.field('connection_id'),
      customer_address: resource.field('customer_address'),
      dx_gateway_id: resource.field('dx_gateway_id'),
      id: resource.field('id'),
      jumbo_frame_capable: resource.field('jumbo_frame_capable'),
      mtu: resource.field('mtu'),
      name: resource.field('name'),
      sitelink_enabled: resource.field('sitelink_enabled'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vlan: resource.field('vlan'),
      vpn_gateway_id: resource.field('vpn_gateway_id'),
    },
    dx_public_virtual_interface(name, block): {
      local resource = blockType.resource('aws_dx_public_virtual_interface', name),
      _: resource._(block, {
        address_family: build.template(block.address_family),
        amazon_address: build.template(std.get(block, 'amazon_address', null)),
        amazon_side_asn: build.template(std.get(block, 'amazon_side_asn', null)),
        arn: build.template(std.get(block, 'arn', null)),
        aws_device: build.template(std.get(block, 'aws_device', null)),
        bgp_asn: build.template(block.bgp_asn),
        bgp_auth_key: build.template(std.get(block, 'bgp_auth_key', null)),
        connection_id: build.template(block.connection_id),
        customer_address: build.template(std.get(block, 'customer_address', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        route_filter_prefixes: build.template(block.route_filter_prefixes),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vlan: build.template(block.vlan),
      }),
      address_family: resource.field('address_family'),
      amazon_address: resource.field('amazon_address'),
      amazon_side_asn: resource.field('amazon_side_asn'),
      arn: resource.field('arn'),
      aws_device: resource.field('aws_device'),
      bgp_asn: resource.field('bgp_asn'),
      bgp_auth_key: resource.field('bgp_auth_key'),
      connection_id: resource.field('connection_id'),
      customer_address: resource.field('customer_address'),
      id: resource.field('id'),
      name: resource.field('name'),
      route_filter_prefixes: resource.field('route_filter_prefixes'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vlan: resource.field('vlan'),
    },
    dx_transit_virtual_interface(name, block): {
      local resource = blockType.resource('aws_dx_transit_virtual_interface', name),
      _: resource._(block, {
        address_family: build.template(block.address_family),
        amazon_address: build.template(std.get(block, 'amazon_address', null)),
        amazon_side_asn: build.template(std.get(block, 'amazon_side_asn', null)),
        arn: build.template(std.get(block, 'arn', null)),
        aws_device: build.template(std.get(block, 'aws_device', null)),
        bgp_asn: build.template(block.bgp_asn),
        bgp_auth_key: build.template(std.get(block, 'bgp_auth_key', null)),
        connection_id: build.template(block.connection_id),
        customer_address: build.template(std.get(block, 'customer_address', null)),
        dx_gateway_id: build.template(block.dx_gateway_id),
        id: build.template(std.get(block, 'id', null)),
        jumbo_frame_capable: build.template(std.get(block, 'jumbo_frame_capable', null)),
        mtu: build.template(std.get(block, 'mtu', null)),
        name: build.template(block.name),
        sitelink_enabled: build.template(std.get(block, 'sitelink_enabled', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vlan: build.template(block.vlan),
      }),
      address_family: resource.field('address_family'),
      amazon_address: resource.field('amazon_address'),
      amazon_side_asn: resource.field('amazon_side_asn'),
      arn: resource.field('arn'),
      aws_device: resource.field('aws_device'),
      bgp_asn: resource.field('bgp_asn'),
      bgp_auth_key: resource.field('bgp_auth_key'),
      connection_id: resource.field('connection_id'),
      customer_address: resource.field('customer_address'),
      dx_gateway_id: resource.field('dx_gateway_id'),
      id: resource.field('id'),
      jumbo_frame_capable: resource.field('jumbo_frame_capable'),
      mtu: resource.field('mtu'),
      name: resource.field('name'),
      sitelink_enabled: resource.field('sitelink_enabled'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vlan: resource.field('vlan'),
    },
    dynamodb_contributor_insights(name, block): {
      local resource = blockType.resource('aws_dynamodb_contributor_insights', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        index_name: build.template(std.get(block, 'index_name', null)),
        table_name: build.template(block.table_name),
      }),
      id: resource.field('id'),
      index_name: resource.field('index_name'),
      table_name: resource.field('table_name'),
    },
    dynamodb_global_table(name, block): {
      local resource = blockType.resource('aws_dynamodb_global_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    dynamodb_kinesis_streaming_destination(name, block): {
      local resource = blockType.resource('aws_dynamodb_kinesis_streaming_destination', name),
      _: resource._(block, {
        approximate_creation_date_time_precision: build.template(std.get(block, 'approximate_creation_date_time_precision', null)),
        id: build.template(std.get(block, 'id', null)),
        stream_arn: build.template(block.stream_arn),
        table_name: build.template(block.table_name),
      }),
      approximate_creation_date_time_precision: resource.field('approximate_creation_date_time_precision'),
      id: resource.field('id'),
      stream_arn: resource.field('stream_arn'),
      table_name: resource.field('table_name'),
    },
    dynamodb_resource_policy(name, block): {
      local resource = blockType.resource('aws_dynamodb_resource_policy', name),
      _: resource._(block, {
        confirm_remove_self_resource_access: build.template(std.get(block, 'confirm_remove_self_resource_access', null)),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        resource_arn: build.template(block.resource_arn),
        revision_id: build.template(std.get(block, 'revision_id', null)),
      }),
      confirm_remove_self_resource_access: resource.field('confirm_remove_self_resource_access'),
      id: resource.field('id'),
      policy: resource.field('policy'),
      resource_arn: resource.field('resource_arn'),
      revision_id: resource.field('revision_id'),
    },
    dynamodb_table(name, block): {
      local resource = blockType.resource('aws_dynamodb_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        billing_mode: build.template(std.get(block, 'billing_mode', null)),
        deletion_protection_enabled: build.template(std.get(block, 'deletion_protection_enabled', null)),
        hash_key: build.template(std.get(block, 'hash_key', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        range_key: build.template(std.get(block, 'range_key', null)),
        read_capacity: build.template(std.get(block, 'read_capacity', null)),
        restore_date_time: build.template(std.get(block, 'restore_date_time', null)),
        restore_source_name: build.template(std.get(block, 'restore_source_name', null)),
        restore_source_table_arn: build.template(std.get(block, 'restore_source_table_arn', null)),
        restore_to_latest_time: build.template(std.get(block, 'restore_to_latest_time', null)),
        stream_arn: build.template(std.get(block, 'stream_arn', null)),
        stream_enabled: build.template(std.get(block, 'stream_enabled', null)),
        stream_label: build.template(std.get(block, 'stream_label', null)),
        stream_view_type: build.template(std.get(block, 'stream_view_type', null)),
        table_class: build.template(std.get(block, 'table_class', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        write_capacity: build.template(std.get(block, 'write_capacity', null)),
      }),
      arn: resource.field('arn'),
      billing_mode: resource.field('billing_mode'),
      deletion_protection_enabled: resource.field('deletion_protection_enabled'),
      hash_key: resource.field('hash_key'),
      id: resource.field('id'),
      name: resource.field('name'),
      range_key: resource.field('range_key'),
      read_capacity: resource.field('read_capacity'),
      restore_date_time: resource.field('restore_date_time'),
      restore_source_name: resource.field('restore_source_name'),
      restore_source_table_arn: resource.field('restore_source_table_arn'),
      restore_to_latest_time: resource.field('restore_to_latest_time'),
      stream_arn: resource.field('stream_arn'),
      stream_enabled: resource.field('stream_enabled'),
      stream_label: resource.field('stream_label'),
      stream_view_type: resource.field('stream_view_type'),
      table_class: resource.field('table_class'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      write_capacity: resource.field('write_capacity'),
    },
    dynamodb_table_export(name, block): {
      local resource = blockType.resource('aws_dynamodb_table_export', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        billed_size_in_bytes: build.template(std.get(block, 'billed_size_in_bytes', null)),
        end_time: build.template(std.get(block, 'end_time', null)),
        export_format: build.template(std.get(block, 'export_format', null)),
        export_status: build.template(std.get(block, 'export_status', null)),
        export_time: build.template(std.get(block, 'export_time', null)),
        id: build.template(std.get(block, 'id', null)),
        item_count: build.template(std.get(block, 'item_count', null)),
        manifest_files_s3_key: build.template(std.get(block, 'manifest_files_s3_key', null)),
        s3_bucket: build.template(block.s3_bucket),
        s3_bucket_owner: build.template(std.get(block, 's3_bucket_owner', null)),
        s3_prefix: build.template(std.get(block, 's3_prefix', null)),
        s3_sse_algorithm: build.template(std.get(block, 's3_sse_algorithm', null)),
        s3_sse_kms_key_id: build.template(std.get(block, 's3_sse_kms_key_id', null)),
        start_time: build.template(std.get(block, 'start_time', null)),
        table_arn: build.template(block.table_arn),
      }),
      arn: resource.field('arn'),
      billed_size_in_bytes: resource.field('billed_size_in_bytes'),
      end_time: resource.field('end_time'),
      export_format: resource.field('export_format'),
      export_status: resource.field('export_status'),
      export_time: resource.field('export_time'),
      id: resource.field('id'),
      item_count: resource.field('item_count'),
      manifest_files_s3_key: resource.field('manifest_files_s3_key'),
      s3_bucket: resource.field('s3_bucket'),
      s3_bucket_owner: resource.field('s3_bucket_owner'),
      s3_prefix: resource.field('s3_prefix'),
      s3_sse_algorithm: resource.field('s3_sse_algorithm'),
      s3_sse_kms_key_id: resource.field('s3_sse_kms_key_id'),
      start_time: resource.field('start_time'),
      table_arn: resource.field('table_arn'),
    },
    dynamodb_table_item(name, block): {
      local resource = blockType.resource('aws_dynamodb_table_item', name),
      _: resource._(block, {
        hash_key: build.template(block.hash_key),
        id: build.template(std.get(block, 'id', null)),
        item: build.template(block.item),
        range_key: build.template(std.get(block, 'range_key', null)),
        table_name: build.template(block.table_name),
      }),
      hash_key: resource.field('hash_key'),
      id: resource.field('id'),
      item: resource.field('item'),
      range_key: resource.field('range_key'),
      table_name: resource.field('table_name'),
    },
    dynamodb_table_replica(name, block): {
      local resource = blockType.resource('aws_dynamodb_table_replica', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        global_table_arn: build.template(block.global_table_arn),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        point_in_time_recovery: build.template(std.get(block, 'point_in_time_recovery', null)),
        table_class_override: build.template(std.get(block, 'table_class_override', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      global_table_arn: resource.field('global_table_arn'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      point_in_time_recovery: resource.field('point_in_time_recovery'),
      table_class_override: resource.field('table_class_override'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    dynamodb_tag(name, block): {
      local resource = blockType.resource('aws_dynamodb_tag', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        resource_arn: build.template(block.resource_arn),
        value: build.template(block.value),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      resource_arn: resource.field('resource_arn'),
      value: resource.field('value'),
    },
    ebs_default_kms_key(name, block): {
      local resource = blockType.resource('aws_ebs_default_kms_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_arn: build.template(block.key_arn),
      }),
      id: resource.field('id'),
      key_arn: resource.field('key_arn'),
    },
    ebs_encryption_by_default(name, block): {
      local resource = blockType.resource('aws_ebs_encryption_by_default', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
    },
    ebs_fast_snapshot_restore(name, block): {
      local resource = blockType.resource('aws_ebs_fast_snapshot_restore', name),
      _: resource._(block, {
        availability_zone: build.template(block.availability_zone),
        id: build.template(std.get(block, 'id', null)),
        snapshot_id: build.template(block.snapshot_id),
        state: build.template(std.get(block, 'state', null)),
      }),
      availability_zone: resource.field('availability_zone'),
      id: resource.field('id'),
      snapshot_id: resource.field('snapshot_id'),
      state: resource.field('state'),
    },
    ebs_snapshot(name, block): {
      local resource = blockType.resource('aws_ebs_snapshot', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        data_encryption_key_id: build.template(std.get(block, 'data_encryption_key_id', null)),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        owner_alias: build.template(std.get(block, 'owner_alias', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        permanent_restore: build.template(std.get(block, 'permanent_restore', null)),
        storage_tier: build.template(std.get(block, 'storage_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        temporary_restore_days: build.template(std.get(block, 'temporary_restore_days', null)),
        volume_id: build.template(block.volume_id),
        volume_size: build.template(std.get(block, 'volume_size', null)),
      }),
      arn: resource.field('arn'),
      data_encryption_key_id: resource.field('data_encryption_key_id'),
      description: resource.field('description'),
      encrypted: resource.field('encrypted'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      outpost_arn: resource.field('outpost_arn'),
      owner_alias: resource.field('owner_alias'),
      owner_id: resource.field('owner_id'),
      permanent_restore: resource.field('permanent_restore'),
      storage_tier: resource.field('storage_tier'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      temporary_restore_days: resource.field('temporary_restore_days'),
      volume_id: resource.field('volume_id'),
      volume_size: resource.field('volume_size'),
    },
    ebs_snapshot_block_public_access(name, block): {
      local resource = blockType.resource('aws_ebs_snapshot_block_public_access', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        state: build.template(block.state),
      }),
      id: resource.field('id'),
      state: resource.field('state'),
    },
    ebs_snapshot_copy(name, block): {
      local resource = blockType.resource('aws_ebs_snapshot_copy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        data_encryption_key_id: build.template(std.get(block, 'data_encryption_key_id', null)),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        owner_alias: build.template(std.get(block, 'owner_alias', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        permanent_restore: build.template(std.get(block, 'permanent_restore', null)),
        source_region: build.template(block.source_region),
        source_snapshot_id: build.template(block.source_snapshot_id),
        storage_tier: build.template(std.get(block, 'storage_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        temporary_restore_days: build.template(std.get(block, 'temporary_restore_days', null)),
        volume_id: build.template(std.get(block, 'volume_id', null)),
        volume_size: build.template(std.get(block, 'volume_size', null)),
      }),
      arn: resource.field('arn'),
      data_encryption_key_id: resource.field('data_encryption_key_id'),
      description: resource.field('description'),
      encrypted: resource.field('encrypted'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      outpost_arn: resource.field('outpost_arn'),
      owner_alias: resource.field('owner_alias'),
      owner_id: resource.field('owner_id'),
      permanent_restore: resource.field('permanent_restore'),
      source_region: resource.field('source_region'),
      source_snapshot_id: resource.field('source_snapshot_id'),
      storage_tier: resource.field('storage_tier'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      temporary_restore_days: resource.field('temporary_restore_days'),
      volume_id: resource.field('volume_id'),
      volume_size: resource.field('volume_size'),
    },
    ebs_snapshot_import(name, block): {
      local resource = blockType.resource('aws_ebs_snapshot_import', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        data_encryption_key_id: build.template(std.get(block, 'data_encryption_key_id', null)),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        owner_alias: build.template(std.get(block, 'owner_alias', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        permanent_restore: build.template(std.get(block, 'permanent_restore', null)),
        role_name: build.template(std.get(block, 'role_name', null)),
        storage_tier: build.template(std.get(block, 'storage_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        temporary_restore_days: build.template(std.get(block, 'temporary_restore_days', null)),
        volume_id: build.template(std.get(block, 'volume_id', null)),
        volume_size: build.template(std.get(block, 'volume_size', null)),
      }),
      arn: resource.field('arn'),
      data_encryption_key_id: resource.field('data_encryption_key_id'),
      description: resource.field('description'),
      encrypted: resource.field('encrypted'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      outpost_arn: resource.field('outpost_arn'),
      owner_alias: resource.field('owner_alias'),
      owner_id: resource.field('owner_id'),
      permanent_restore: resource.field('permanent_restore'),
      role_name: resource.field('role_name'),
      storage_tier: resource.field('storage_tier'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      temporary_restore_days: resource.field('temporary_restore_days'),
      volume_id: resource.field('volume_id'),
      volume_size: resource.field('volume_size'),
    },
    ebs_volume(name, block): {
      local resource = blockType.resource('aws_ebs_volume', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(block.availability_zone),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        final_snapshot: build.template(std.get(block, 'final_snapshot', null)),
        id: build.template(std.get(block, 'id', null)),
        iops: build.template(std.get(block, 'iops', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        multi_attach_enabled: build.template(std.get(block, 'multi_attach_enabled', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        size: build.template(std.get(block, 'size', null)),
        snapshot_id: build.template(std.get(block, 'snapshot_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        throughput: build.template(std.get(block, 'throughput', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      encrypted: resource.field('encrypted'),
      final_snapshot: resource.field('final_snapshot'),
      id: resource.field('id'),
      iops: resource.field('iops'),
      kms_key_id: resource.field('kms_key_id'),
      multi_attach_enabled: resource.field('multi_attach_enabled'),
      outpost_arn: resource.field('outpost_arn'),
      size: resource.field('size'),
      snapshot_id: resource.field('snapshot_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      throughput: resource.field('throughput'),
      type: resource.field('type'),
    },
    ec2_availability_zone_group(name, block): {
      local resource = blockType.resource('aws_ec2_availability_zone_group', name),
      _: resource._(block, {
        group_name: build.template(block.group_name),
        id: build.template(std.get(block, 'id', null)),
        opt_in_status: build.template(block.opt_in_status),
      }),
      group_name: resource.field('group_name'),
      id: resource.field('id'),
      opt_in_status: resource.field('opt_in_status'),
    },
    ec2_capacity_block_reservation(name, block): {
      local resource = blockType.resource('aws_ec2_capacity_block_reservation', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        capacity_block_offering_id: build.template(block.capacity_block_offering_id),
        created_date: build.template(std.get(block, 'created_date', null)),
        ebs_optimized: build.template(std.get(block, 'ebs_optimized', null)),
        end_date: build.template(std.get(block, 'end_date', null)),
        end_date_type: build.template(std.get(block, 'end_date_type', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_count: build.template(std.get(block, 'instance_count', null)),
        instance_platform: build.template(block.instance_platform),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        placement_group_arn: build.template(std.get(block, 'placement_group_arn', null)),
        reservation_type: build.template(std.get(block, 'reservation_type', null)),
        start_date: build.template(std.get(block, 'start_date', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tenancy: build.template(std.get(block, 'tenancy', null)),
      }),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      capacity_block_offering_id: resource.field('capacity_block_offering_id'),
      created_date: resource.field('created_date'),
      ebs_optimized: resource.field('ebs_optimized'),
      end_date: resource.field('end_date'),
      end_date_type: resource.field('end_date_type'),
      id: resource.field('id'),
      instance_count: resource.field('instance_count'),
      instance_platform: resource.field('instance_platform'),
      instance_type: resource.field('instance_type'),
      outpost_arn: resource.field('outpost_arn'),
      placement_group_arn: resource.field('placement_group_arn'),
      reservation_type: resource.field('reservation_type'),
      start_date: resource.field('start_date'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tenancy: resource.field('tenancy'),
    },
    ec2_capacity_reservation(name, block): {
      local resource = blockType.resource('aws_ec2_capacity_reservation', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(block.availability_zone),
        ebs_optimized: build.template(std.get(block, 'ebs_optimized', null)),
        end_date: build.template(std.get(block, 'end_date', null)),
        end_date_type: build.template(std.get(block, 'end_date_type', null)),
        ephemeral_storage: build.template(std.get(block, 'ephemeral_storage', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_count: build.template(block.instance_count),
        instance_match_criteria: build.template(std.get(block, 'instance_match_criteria', null)),
        instance_platform: build.template(block.instance_platform),
        instance_type: build.template(block.instance_type),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        placement_group_arn: build.template(std.get(block, 'placement_group_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tenancy: build.template(std.get(block, 'tenancy', null)),
      }),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      ebs_optimized: resource.field('ebs_optimized'),
      end_date: resource.field('end_date'),
      end_date_type: resource.field('end_date_type'),
      ephemeral_storage: resource.field('ephemeral_storage'),
      id: resource.field('id'),
      instance_count: resource.field('instance_count'),
      instance_match_criteria: resource.field('instance_match_criteria'),
      instance_platform: resource.field('instance_platform'),
      instance_type: resource.field('instance_type'),
      outpost_arn: resource.field('outpost_arn'),
      owner_id: resource.field('owner_id'),
      placement_group_arn: resource.field('placement_group_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tenancy: resource.field('tenancy'),
    },
    ec2_carrier_gateway(name, block): {
      local resource = blockType.resource('aws_ec2_carrier_gateway', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    ec2_client_vpn_authorization_rule(name, block): {
      local resource = blockType.resource('aws_ec2_client_vpn_authorization_rule', name),
      _: resource._(block, {
        access_group_id: build.template(std.get(block, 'access_group_id', null)),
        authorize_all_groups: build.template(std.get(block, 'authorize_all_groups', null)),
        client_vpn_endpoint_id: build.template(block.client_vpn_endpoint_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        target_network_cidr: build.template(block.target_network_cidr),
      }),
      access_group_id: resource.field('access_group_id'),
      authorize_all_groups: resource.field('authorize_all_groups'),
      client_vpn_endpoint_id: resource.field('client_vpn_endpoint_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      target_network_cidr: resource.field('target_network_cidr'),
    },
    ec2_client_vpn_endpoint(name, block): {
      local resource = blockType.resource('aws_ec2_client_vpn_endpoint', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        client_cidr_block: build.template(block.client_cidr_block),
        description: build.template(std.get(block, 'description', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        dns_servers: build.template(std.get(block, 'dns_servers', null)),
        id: build.template(std.get(block, 'id', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        self_service_portal: build.template(std.get(block, 'self_service_portal', null)),
        self_service_portal_url: build.template(std.get(block, 'self_service_portal_url', null)),
        server_certificate_arn: build.template(block.server_certificate_arn),
        session_timeout_hours: build.template(std.get(block, 'session_timeout_hours', null)),
        split_tunnel: build.template(std.get(block, 'split_tunnel', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transport_protocol: build.template(std.get(block, 'transport_protocol', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        vpn_port: build.template(std.get(block, 'vpn_port', null)),
      }),
      arn: resource.field('arn'),
      client_cidr_block: resource.field('client_cidr_block'),
      description: resource.field('description'),
      dns_name: resource.field('dns_name'),
      dns_servers: resource.field('dns_servers'),
      id: resource.field('id'),
      security_group_ids: resource.field('security_group_ids'),
      self_service_portal: resource.field('self_service_portal'),
      self_service_portal_url: resource.field('self_service_portal_url'),
      server_certificate_arn: resource.field('server_certificate_arn'),
      session_timeout_hours: resource.field('session_timeout_hours'),
      split_tunnel: resource.field('split_tunnel'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transport_protocol: resource.field('transport_protocol'),
      vpc_id: resource.field('vpc_id'),
      vpn_port: resource.field('vpn_port'),
    },
    ec2_client_vpn_network_association(name, block): {
      local resource = blockType.resource('aws_ec2_client_vpn_network_association', name),
      _: resource._(block, {
        association_id: build.template(std.get(block, 'association_id', null)),
        client_vpn_endpoint_id: build.template(block.client_vpn_endpoint_id),
        id: build.template(std.get(block, 'id', null)),
        subnet_id: build.template(block.subnet_id),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      association_id: resource.field('association_id'),
      client_vpn_endpoint_id: resource.field('client_vpn_endpoint_id'),
      id: resource.field('id'),
      subnet_id: resource.field('subnet_id'),
      vpc_id: resource.field('vpc_id'),
    },
    ec2_client_vpn_route(name, block): {
      local resource = blockType.resource('aws_ec2_client_vpn_route', name),
      _: resource._(block, {
        client_vpn_endpoint_id: build.template(block.client_vpn_endpoint_id),
        description: build.template(std.get(block, 'description', null)),
        destination_cidr_block: build.template(block.destination_cidr_block),
        id: build.template(std.get(block, 'id', null)),
        origin: build.template(std.get(block, 'origin', null)),
        target_vpc_subnet_id: build.template(block.target_vpc_subnet_id),
        type: build.template(std.get(block, 'type', null)),
      }),
      client_vpn_endpoint_id: resource.field('client_vpn_endpoint_id'),
      description: resource.field('description'),
      destination_cidr_block: resource.field('destination_cidr_block'),
      id: resource.field('id'),
      origin: resource.field('origin'),
      target_vpc_subnet_id: resource.field('target_vpc_subnet_id'),
      type: resource.field('type'),
    },
    ec2_fleet(name, block): {
      local resource = blockType.resource('aws_ec2_fleet', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        context: build.template(std.get(block, 'context', null)),
        excess_capacity_termination_policy: build.template(std.get(block, 'excess_capacity_termination_policy', null)),
        fleet_state: build.template(std.get(block, 'fleet_state', null)),
        fulfilled_capacity: build.template(std.get(block, 'fulfilled_capacity', null)),
        fulfilled_on_demand_capacity: build.template(std.get(block, 'fulfilled_on_demand_capacity', null)),
        id: build.template(std.get(block, 'id', null)),
        replace_unhealthy_instances: build.template(std.get(block, 'replace_unhealthy_instances', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        terminate_instances: build.template(std.get(block, 'terminate_instances', null)),
        terminate_instances_with_expiration: build.template(std.get(block, 'terminate_instances_with_expiration', null)),
        type: build.template(std.get(block, 'type', null)),
        valid_from: build.template(std.get(block, 'valid_from', null)),
        valid_until: build.template(std.get(block, 'valid_until', null)),
      }),
      arn: resource.field('arn'),
      context: resource.field('context'),
      excess_capacity_termination_policy: resource.field('excess_capacity_termination_policy'),
      fleet_state: resource.field('fleet_state'),
      fulfilled_capacity: resource.field('fulfilled_capacity'),
      fulfilled_on_demand_capacity: resource.field('fulfilled_on_demand_capacity'),
      id: resource.field('id'),
      replace_unhealthy_instances: resource.field('replace_unhealthy_instances'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      terminate_instances: resource.field('terminate_instances'),
      terminate_instances_with_expiration: resource.field('terminate_instances_with_expiration'),
      type: resource.field('type'),
      valid_from: resource.field('valid_from'),
      valid_until: resource.field('valid_until'),
    },
    ec2_host(name, block): {
      local resource = blockType.resource('aws_ec2_host', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        asset_id: build.template(std.get(block, 'asset_id', null)),
        auto_placement: build.template(std.get(block, 'auto_placement', null)),
        availability_zone: build.template(block.availability_zone),
        host_recovery: build.template(std.get(block, 'host_recovery', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_family: build.template(std.get(block, 'instance_family', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      asset_id: resource.field('asset_id'),
      auto_placement: resource.field('auto_placement'),
      availability_zone: resource.field('availability_zone'),
      host_recovery: resource.field('host_recovery'),
      id: resource.field('id'),
      instance_family: resource.field('instance_family'),
      instance_type: resource.field('instance_type'),
      outpost_arn: resource.field('outpost_arn'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ec2_image_block_public_access(name, block): {
      local resource = blockType.resource('aws_ec2_image_block_public_access', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        state: build.template(block.state),
      }),
      id: resource.field('id'),
      state: resource.field('state'),
    },
    ec2_instance_connect_endpoint(name, block): {
      local resource = blockType.resource('aws_ec2_instance_connect_endpoint', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        fips_dns_name: build.template(std.get(block, 'fips_dns_name', null)),
        id: build.template(std.get(block, 'id', null)),
        network_interface_ids: build.template(std.get(block, 'network_interface_ids', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        preserve_client_ip: build.template(std.get(block, 'preserve_client_ip', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      dns_name: resource.field('dns_name'),
      fips_dns_name: resource.field('fips_dns_name'),
      id: resource.field('id'),
      network_interface_ids: resource.field('network_interface_ids'),
      owner_id: resource.field('owner_id'),
      preserve_client_ip: resource.field('preserve_client_ip'),
      security_group_ids: resource.field('security_group_ids'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    ec2_instance_metadata_defaults(name, block): {
      local resource = blockType.resource('aws_ec2_instance_metadata_defaults', name),
      _: resource._(block, {
        http_endpoint: build.template(std.get(block, 'http_endpoint', null)),
        http_put_response_hop_limit: build.template(std.get(block, 'http_put_response_hop_limit', null)),
        http_tokens: build.template(std.get(block, 'http_tokens', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_metadata_tags: build.template(std.get(block, 'instance_metadata_tags', null)),
      }),
      http_endpoint: resource.field('http_endpoint'),
      http_put_response_hop_limit: resource.field('http_put_response_hop_limit'),
      http_tokens: resource.field('http_tokens'),
      id: resource.field('id'),
      instance_metadata_tags: resource.field('instance_metadata_tags'),
    },
    ec2_instance_state(name, block): {
      local resource = blockType.resource('aws_ec2_instance_state', name),
      _: resource._(block, {
        force: build.template(std.get(block, 'force', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        state: build.template(block.state),
      }),
      force: resource.field('force'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      state: resource.field('state'),
    },
    ec2_local_gateway_route(name, block): {
      local resource = blockType.resource('aws_ec2_local_gateway_route', name),
      _: resource._(block, {
        destination_cidr_block: build.template(block.destination_cidr_block),
        id: build.template(std.get(block, 'id', null)),
        local_gateway_route_table_id: build.template(block.local_gateway_route_table_id),
        local_gateway_virtual_interface_group_id: build.template(block.local_gateway_virtual_interface_group_id),
      }),
      destination_cidr_block: resource.field('destination_cidr_block'),
      id: resource.field('id'),
      local_gateway_route_table_id: resource.field('local_gateway_route_table_id'),
      local_gateway_virtual_interface_group_id: resource.field('local_gateway_virtual_interface_group_id'),
    },
    ec2_local_gateway_route_table_vpc_association(name, block): {
      local resource = blockType.resource('aws_ec2_local_gateway_route_table_vpc_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        local_gateway_id: build.template(std.get(block, 'local_gateway_id', null)),
        local_gateway_route_table_id: build.template(block.local_gateway_route_table_id),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      id: resource.field('id'),
      local_gateway_id: resource.field('local_gateway_id'),
      local_gateway_route_table_id: resource.field('local_gateway_route_table_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    ec2_managed_prefix_list(name, block): {
      local resource = blockType.resource('aws_ec2_managed_prefix_list', name),
      _: resource._(block, {
        address_family: build.template(block.address_family),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        max_entries: build.template(block.max_entries),
        name: build.template(block.name),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      address_family: resource.field('address_family'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      max_entries: resource.field('max_entries'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    ec2_managed_prefix_list_entry(name, block): {
      local resource = blockType.resource('aws_ec2_managed_prefix_list_entry', name),
      _: resource._(block, {
        cidr: build.template(block.cidr),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        prefix_list_id: build.template(block.prefix_list_id),
      }),
      cidr: resource.field('cidr'),
      description: resource.field('description'),
      id: resource.field('id'),
      prefix_list_id: resource.field('prefix_list_id'),
    },
    ec2_network_insights_analysis(name, block): {
      local resource = blockType.resource('aws_ec2_network_insights_analysis', name),
      _: resource._(block, {
        alternate_path_hints: build.template(std.get(block, 'alternate_path_hints', null)),
        arn: build.template(std.get(block, 'arn', null)),
        explanations: build.template(std.get(block, 'explanations', null)),
        filter_in_arns: build.template(std.get(block, 'filter_in_arns', null)),
        forward_path_components: build.template(std.get(block, 'forward_path_components', null)),
        id: build.template(std.get(block, 'id', null)),
        network_insights_path_id: build.template(block.network_insights_path_id),
        path_found: build.template(std.get(block, 'path_found', null)),
        return_path_components: build.template(std.get(block, 'return_path_components', null)),
        start_date: build.template(std.get(block, 'start_date', null)),
        status: build.template(std.get(block, 'status', null)),
        status_message: build.template(std.get(block, 'status_message', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        wait_for_completion: build.template(std.get(block, 'wait_for_completion', null)),
        warning_message: build.template(std.get(block, 'warning_message', null)),
      }),
      alternate_path_hints: resource.field('alternate_path_hints'),
      arn: resource.field('arn'),
      explanations: resource.field('explanations'),
      filter_in_arns: resource.field('filter_in_arns'),
      forward_path_components: resource.field('forward_path_components'),
      id: resource.field('id'),
      network_insights_path_id: resource.field('network_insights_path_id'),
      path_found: resource.field('path_found'),
      return_path_components: resource.field('return_path_components'),
      start_date: resource.field('start_date'),
      status: resource.field('status'),
      status_message: resource.field('status_message'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      wait_for_completion: resource.field('wait_for_completion'),
      warning_message: resource.field('warning_message'),
    },
    ec2_network_insights_path(name, block): {
      local resource = blockType.resource('aws_ec2_network_insights_path', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        destination: build.template(std.get(block, 'destination', null)),
        destination_arn: build.template(std.get(block, 'destination_arn', null)),
        destination_ip: build.template(std.get(block, 'destination_ip', null)),
        destination_port: build.template(std.get(block, 'destination_port', null)),
        id: build.template(std.get(block, 'id', null)),
        protocol: build.template(block.protocol),
        source: build.template(block.source),
        source_arn: build.template(std.get(block, 'source_arn', null)),
        source_ip: build.template(std.get(block, 'source_ip', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      destination: resource.field('destination'),
      destination_arn: resource.field('destination_arn'),
      destination_ip: resource.field('destination_ip'),
      destination_port: resource.field('destination_port'),
      id: resource.field('id'),
      protocol: resource.field('protocol'),
      source: resource.field('source'),
      source_arn: resource.field('source_arn'),
      source_ip: resource.field('source_ip'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ec2_serial_console_access(name, block): {
      local resource = blockType.resource('aws_ec2_serial_console_access', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
    },
    ec2_subnet_cidr_reservation(name, block): {
      local resource = blockType.resource('aws_ec2_subnet_cidr_reservation', name),
      _: resource._(block, {
        cidr_block: build.template(block.cidr_block),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        reservation_type: build.template(block.reservation_type),
        subnet_id: build.template(block.subnet_id),
      }),
      cidr_block: resource.field('cidr_block'),
      description: resource.field('description'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      reservation_type: resource.field('reservation_type'),
      subnet_id: resource.field('subnet_id'),
    },
    ec2_tag(name, block): {
      local resource = blockType.resource('aws_ec2_tag', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        resource_id: build.template(block.resource_id),
        value: build.template(block.value),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      resource_id: resource.field('resource_id'),
      value: resource.field('value'),
    },
    ec2_traffic_mirror_filter(name, block): {
      local resource = blockType.resource('aws_ec2_traffic_mirror_filter', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        network_services: build.template(std.get(block, 'network_services', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      network_services: resource.field('network_services'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ec2_traffic_mirror_filter_rule(name, block): {
      local resource = blockType.resource('aws_ec2_traffic_mirror_filter_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        destination_cidr_block: build.template(block.destination_cidr_block),
        id: build.template(std.get(block, 'id', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        rule_action: build.template(block.rule_action),
        rule_number: build.template(block.rule_number),
        source_cidr_block: build.template(block.source_cidr_block),
        traffic_direction: build.template(block.traffic_direction),
        traffic_mirror_filter_id: build.template(block.traffic_mirror_filter_id),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      destination_cidr_block: resource.field('destination_cidr_block'),
      id: resource.field('id'),
      protocol: resource.field('protocol'),
      rule_action: resource.field('rule_action'),
      rule_number: resource.field('rule_number'),
      source_cidr_block: resource.field('source_cidr_block'),
      traffic_direction: resource.field('traffic_direction'),
      traffic_mirror_filter_id: resource.field('traffic_mirror_filter_id'),
    },
    ec2_traffic_mirror_session(name, block): {
      local resource = blockType.resource('aws_ec2_traffic_mirror_session', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        network_interface_id: build.template(block.network_interface_id),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        packet_length: build.template(std.get(block, 'packet_length', null)),
        session_number: build.template(block.session_number),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        traffic_mirror_filter_id: build.template(block.traffic_mirror_filter_id),
        traffic_mirror_target_id: build.template(block.traffic_mirror_target_id),
        virtual_network_id: build.template(std.get(block, 'virtual_network_id', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      network_interface_id: resource.field('network_interface_id'),
      owner_id: resource.field('owner_id'),
      packet_length: resource.field('packet_length'),
      session_number: resource.field('session_number'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      traffic_mirror_filter_id: resource.field('traffic_mirror_filter_id'),
      traffic_mirror_target_id: resource.field('traffic_mirror_target_id'),
      virtual_network_id: resource.field('virtual_network_id'),
    },
    ec2_traffic_mirror_target(name, block): {
      local resource = blockType.resource('aws_ec2_traffic_mirror_target', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        gateway_load_balancer_endpoint_id: build.template(std.get(block, 'gateway_load_balancer_endpoint_id', null)),
        id: build.template(std.get(block, 'id', null)),
        network_interface_id: build.template(std.get(block, 'network_interface_id', null)),
        network_load_balancer_arn: build.template(std.get(block, 'network_load_balancer_arn', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      gateway_load_balancer_endpoint_id: resource.field('gateway_load_balancer_endpoint_id'),
      id: resource.field('id'),
      network_interface_id: resource.field('network_interface_id'),
      network_load_balancer_arn: resource.field('network_load_balancer_arn'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ec2_transit_gateway(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway', name),
      _: resource._(block, {
        amazon_side_asn: build.template(std.get(block, 'amazon_side_asn', null)),
        arn: build.template(std.get(block, 'arn', null)),
        association_default_route_table_id: build.template(std.get(block, 'association_default_route_table_id', null)),
        auto_accept_shared_attachments: build.template(std.get(block, 'auto_accept_shared_attachments', null)),
        default_route_table_association: build.template(std.get(block, 'default_route_table_association', null)),
        default_route_table_propagation: build.template(std.get(block, 'default_route_table_propagation', null)),
        description: build.template(std.get(block, 'description', null)),
        dns_support: build.template(std.get(block, 'dns_support', null)),
        id: build.template(std.get(block, 'id', null)),
        multicast_support: build.template(std.get(block, 'multicast_support', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        propagation_default_route_table_id: build.template(std.get(block, 'propagation_default_route_table_id', null)),
        security_group_referencing_support: build.template(std.get(block, 'security_group_referencing_support', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_gateway_cidr_blocks: build.template(std.get(block, 'transit_gateway_cidr_blocks', null)),
        vpn_ecmp_support: build.template(std.get(block, 'vpn_ecmp_support', null)),
      }),
      amazon_side_asn: resource.field('amazon_side_asn'),
      arn: resource.field('arn'),
      association_default_route_table_id: resource.field('association_default_route_table_id'),
      auto_accept_shared_attachments: resource.field('auto_accept_shared_attachments'),
      default_route_table_association: resource.field('default_route_table_association'),
      default_route_table_propagation: resource.field('default_route_table_propagation'),
      description: resource.field('description'),
      dns_support: resource.field('dns_support'),
      id: resource.field('id'),
      multicast_support: resource.field('multicast_support'),
      owner_id: resource.field('owner_id'),
      propagation_default_route_table_id: resource.field('propagation_default_route_table_id'),
      security_group_referencing_support: resource.field('security_group_referencing_support'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_gateway_cidr_blocks: resource.field('transit_gateway_cidr_blocks'),
      vpn_ecmp_support: resource.field('vpn_ecmp_support'),
    },
    ec2_transit_gateway_connect(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_connect', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_gateway_default_route_table_association: build.template(std.get(block, 'transit_gateway_default_route_table_association', null)),
        transit_gateway_default_route_table_propagation: build.template(std.get(block, 'transit_gateway_default_route_table_propagation', null)),
        transit_gateway_id: build.template(block.transit_gateway_id),
        transport_attachment_id: build.template(block.transport_attachment_id),
      }),
      id: resource.field('id'),
      protocol: resource.field('protocol'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_gateway_default_route_table_association: resource.field('transit_gateway_default_route_table_association'),
      transit_gateway_default_route_table_propagation: resource.field('transit_gateway_default_route_table_propagation'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      transport_attachment_id: resource.field('transport_attachment_id'),
    },
    ec2_transit_gateway_connect_peer(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_connect_peer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bgp_asn: build.template(std.get(block, 'bgp_asn', null)),
        bgp_peer_address: build.template(std.get(block, 'bgp_peer_address', null)),
        bgp_transit_gateway_addresses: build.template(std.get(block, 'bgp_transit_gateway_addresses', null)),
        id: build.template(std.get(block, 'id', null)),
        inside_cidr_blocks: build.template(block.inside_cidr_blocks),
        peer_address: build.template(block.peer_address),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_gateway_address: build.template(std.get(block, 'transit_gateway_address', null)),
        transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
      }),
      arn: resource.field('arn'),
      bgp_asn: resource.field('bgp_asn'),
      bgp_peer_address: resource.field('bgp_peer_address'),
      bgp_transit_gateway_addresses: resource.field('bgp_transit_gateway_addresses'),
      id: resource.field('id'),
      inside_cidr_blocks: resource.field('inside_cidr_blocks'),
      peer_address: resource.field('peer_address'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_gateway_address: resource.field('transit_gateway_address'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
    },
    ec2_transit_gateway_default_route_table_association(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_default_route_table_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        original_default_route_table_id: build.template(std.get(block, 'original_default_route_table_id', null)),
        transit_gateway_id: build.template(block.transit_gateway_id),
        transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
      }),
      id: resource.field('id'),
      original_default_route_table_id: resource.field('original_default_route_table_id'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      transit_gateway_route_table_id: resource.field('transit_gateway_route_table_id'),
    },
    ec2_transit_gateway_default_route_table_propagation(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_default_route_table_propagation', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        original_default_route_table_id: build.template(std.get(block, 'original_default_route_table_id', null)),
        transit_gateway_id: build.template(block.transit_gateway_id),
        transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
      }),
      id: resource.field('id'),
      original_default_route_table_id: resource.field('original_default_route_table_id'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      transit_gateway_route_table_id: resource.field('transit_gateway_route_table_id'),
    },
    ec2_transit_gateway_multicast_domain(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_multicast_domain', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_accept_shared_associations: build.template(std.get(block, 'auto_accept_shared_associations', null)),
        id: build.template(std.get(block, 'id', null)),
        igmpv2_support: build.template(std.get(block, 'igmpv2_support', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        static_sources_support: build.template(std.get(block, 'static_sources_support', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_gateway_id: build.template(block.transit_gateway_id),
      }),
      arn: resource.field('arn'),
      auto_accept_shared_associations: resource.field('auto_accept_shared_associations'),
      id: resource.field('id'),
      igmpv2_support: resource.field('igmpv2_support'),
      owner_id: resource.field('owner_id'),
      static_sources_support: resource.field('static_sources_support'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_gateway_id: resource.field('transit_gateway_id'),
    },
    ec2_transit_gateway_multicast_domain_association(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_multicast_domain_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        subnet_id: build.template(block.subnet_id),
        transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
        transit_gateway_multicast_domain_id: build.template(block.transit_gateway_multicast_domain_id),
      }),
      id: resource.field('id'),
      subnet_id: resource.field('subnet_id'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
      transit_gateway_multicast_domain_id: resource.field('transit_gateway_multicast_domain_id'),
    },
    ec2_transit_gateway_multicast_group_member(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_multicast_group_member', name),
      _: resource._(block, {
        group_ip_address: build.template(block.group_ip_address),
        id: build.template(std.get(block, 'id', null)),
        network_interface_id: build.template(block.network_interface_id),
        transit_gateway_multicast_domain_id: build.template(block.transit_gateway_multicast_domain_id),
      }),
      group_ip_address: resource.field('group_ip_address'),
      id: resource.field('id'),
      network_interface_id: resource.field('network_interface_id'),
      transit_gateway_multicast_domain_id: resource.field('transit_gateway_multicast_domain_id'),
    },
    ec2_transit_gateway_multicast_group_source(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_multicast_group_source', name),
      _: resource._(block, {
        group_ip_address: build.template(block.group_ip_address),
        id: build.template(std.get(block, 'id', null)),
        network_interface_id: build.template(block.network_interface_id),
        transit_gateway_multicast_domain_id: build.template(block.transit_gateway_multicast_domain_id),
      }),
      group_ip_address: resource.field('group_ip_address'),
      id: resource.field('id'),
      network_interface_id: resource.field('network_interface_id'),
      transit_gateway_multicast_domain_id: resource.field('transit_gateway_multicast_domain_id'),
    },
    ec2_transit_gateway_peering_attachment(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_peering_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        peer_account_id: build.template(std.get(block, 'peer_account_id', null)),
        peer_region: build.template(block.peer_region),
        peer_transit_gateway_id: build.template(block.peer_transit_gateway_id),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_gateway_id: build.template(block.transit_gateway_id),
      }),
      id: resource.field('id'),
      peer_account_id: resource.field('peer_account_id'),
      peer_region: resource.field('peer_region'),
      peer_transit_gateway_id: resource.field('peer_transit_gateway_id'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_gateway_id: resource.field('transit_gateway_id'),
    },
    ec2_transit_gateway_peering_attachment_accepter(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_peering_attachment_accepter', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        peer_account_id: build.template(std.get(block, 'peer_account_id', null)),
        peer_region: build.template(std.get(block, 'peer_region', null)),
        peer_transit_gateway_id: build.template(std.get(block, 'peer_transit_gateway_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
      }),
      id: resource.field('id'),
      peer_account_id: resource.field('peer_account_id'),
      peer_region: resource.field('peer_region'),
      peer_transit_gateway_id: resource.field('peer_transit_gateway_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
      transit_gateway_id: resource.field('transit_gateway_id'),
    },
    ec2_transit_gateway_policy_table(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_policy_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_gateway_id: build.template(block.transit_gateway_id),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_gateway_id: resource.field('transit_gateway_id'),
    },
    ec2_transit_gateway_policy_table_association(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_policy_table_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        resource_type: build.template(std.get(block, 'resource_type', null)),
        transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
        transit_gateway_policy_table_id: build.template(block.transit_gateway_policy_table_id),
      }),
      id: resource.field('id'),
      resource_id: resource.field('resource_id'),
      resource_type: resource.field('resource_type'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
      transit_gateway_policy_table_id: resource.field('transit_gateway_policy_table_id'),
    },
    ec2_transit_gateway_prefix_list_reference(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_prefix_list_reference', name),
      _: resource._(block, {
        blackhole: build.template(std.get(block, 'blackhole', null)),
        id: build.template(std.get(block, 'id', null)),
        prefix_list_id: build.template(block.prefix_list_id),
        prefix_list_owner_id: build.template(std.get(block, 'prefix_list_owner_id', null)),
        transit_gateway_attachment_id: build.template(std.get(block, 'transit_gateway_attachment_id', null)),
        transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
      }),
      blackhole: resource.field('blackhole'),
      id: resource.field('id'),
      prefix_list_id: resource.field('prefix_list_id'),
      prefix_list_owner_id: resource.field('prefix_list_owner_id'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
      transit_gateway_route_table_id: resource.field('transit_gateway_route_table_id'),
    },
    ec2_transit_gateway_route(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_route', name),
      _: resource._(block, {
        blackhole: build.template(std.get(block, 'blackhole', null)),
        destination_cidr_block: build.template(block.destination_cidr_block),
        id: build.template(std.get(block, 'id', null)),
        transit_gateway_attachment_id: build.template(std.get(block, 'transit_gateway_attachment_id', null)),
        transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
      }),
      blackhole: resource.field('blackhole'),
      destination_cidr_block: resource.field('destination_cidr_block'),
      id: resource.field('id'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
      transit_gateway_route_table_id: resource.field('transit_gateway_route_table_id'),
    },
    ec2_transit_gateway_route_table(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_route_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_association_route_table: build.template(std.get(block, 'default_association_route_table', null)),
        default_propagation_route_table: build.template(std.get(block, 'default_propagation_route_table', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_gateway_id: build.template(block.transit_gateway_id),
      }),
      arn: resource.field('arn'),
      default_association_route_table: resource.field('default_association_route_table'),
      default_propagation_route_table: resource.field('default_propagation_route_table'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_gateway_id: resource.field('transit_gateway_id'),
    },
    ec2_transit_gateway_route_table_association(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_route_table_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        replace_existing_association: build.template(std.get(block, 'replace_existing_association', null)),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        resource_type: build.template(std.get(block, 'resource_type', null)),
        transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
        transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
      }),
      id: resource.field('id'),
      replace_existing_association: resource.field('replace_existing_association'),
      resource_id: resource.field('resource_id'),
      resource_type: resource.field('resource_type'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
      transit_gateway_route_table_id: resource.field('transit_gateway_route_table_id'),
    },
    ec2_transit_gateway_route_table_propagation(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_route_table_propagation', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        resource_type: build.template(std.get(block, 'resource_type', null)),
        transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
        transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
      }),
      id: resource.field('id'),
      resource_id: resource.field('resource_id'),
      resource_type: resource.field('resource_type'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
      transit_gateway_route_table_id: resource.field('transit_gateway_route_table_id'),
    },
    ec2_transit_gateway_vpc_attachment(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_vpc_attachment', name),
      _: resource._(block, {
        appliance_mode_support: build.template(std.get(block, 'appliance_mode_support', null)),
        dns_support: build.template(std.get(block, 'dns_support', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv6_support: build.template(std.get(block, 'ipv6_support', null)),
        security_group_referencing_support: build.template(std.get(block, 'security_group_referencing_support', null)),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_gateway_default_route_table_association: build.template(std.get(block, 'transit_gateway_default_route_table_association', null)),
        transit_gateway_default_route_table_propagation: build.template(std.get(block, 'transit_gateway_default_route_table_propagation', null)),
        transit_gateway_id: build.template(block.transit_gateway_id),
        vpc_id: build.template(block.vpc_id),
        vpc_owner_id: build.template(std.get(block, 'vpc_owner_id', null)),
      }),
      appliance_mode_support: resource.field('appliance_mode_support'),
      dns_support: resource.field('dns_support'),
      id: resource.field('id'),
      ipv6_support: resource.field('ipv6_support'),
      security_group_referencing_support: resource.field('security_group_referencing_support'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_gateway_default_route_table_association: resource.field('transit_gateway_default_route_table_association'),
      transit_gateway_default_route_table_propagation: resource.field('transit_gateway_default_route_table_propagation'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      vpc_id: resource.field('vpc_id'),
      vpc_owner_id: resource.field('vpc_owner_id'),
    },
    ec2_transit_gateway_vpc_attachment_accepter(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_vpc_attachment_accepter', name),
      _: resource._(block, {
        appliance_mode_support: build.template(std.get(block, 'appliance_mode_support', null)),
        dns_support: build.template(std.get(block, 'dns_support', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv6_support: build.template(std.get(block, 'ipv6_support', null)),
        security_group_referencing_support: build.template(std.get(block, 'security_group_referencing_support', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
        transit_gateway_default_route_table_association: build.template(std.get(block, 'transit_gateway_default_route_table_association', null)),
        transit_gateway_default_route_table_propagation: build.template(std.get(block, 'transit_gateway_default_route_table_propagation', null)),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        vpc_owner_id: build.template(std.get(block, 'vpc_owner_id', null)),
      }),
      appliance_mode_support: resource.field('appliance_mode_support'),
      dns_support: resource.field('dns_support'),
      id: resource.field('id'),
      ipv6_support: resource.field('ipv6_support'),
      security_group_referencing_support: resource.field('security_group_referencing_support'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
      transit_gateway_default_route_table_association: resource.field('transit_gateway_default_route_table_association'),
      transit_gateway_default_route_table_propagation: resource.field('transit_gateway_default_route_table_propagation'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      vpc_id: resource.field('vpc_id'),
      vpc_owner_id: resource.field('vpc_owner_id'),
    },
    ecr_lifecycle_policy(name, block): {
      local resource = blockType.resource('aws_ecr_lifecycle_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        repository: build.template(block.repository),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      registry_id: resource.field('registry_id'),
      repository: resource.field('repository'),
    },
    ecr_pull_through_cache_rule(name, block): {
      local resource = blockType.resource('aws_ecr_pull_through_cache_rule', name),
      _: resource._(block, {
        credential_arn: build.template(std.get(block, 'credential_arn', null)),
        ecr_repository_prefix: build.template(block.ecr_repository_prefix),
        id: build.template(std.get(block, 'id', null)),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        upstream_registry_url: build.template(block.upstream_registry_url),
      }),
      credential_arn: resource.field('credential_arn'),
      ecr_repository_prefix: resource.field('ecr_repository_prefix'),
      id: resource.field('id'),
      registry_id: resource.field('registry_id'),
      upstream_registry_url: resource.field('upstream_registry_url'),
    },
    ecr_registry_policy(name, block): {
      local resource = blockType.resource('aws_ecr_registry_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        registry_id: build.template(std.get(block, 'registry_id', null)),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      registry_id: resource.field('registry_id'),
    },
    ecr_registry_scanning_configuration(name, block): {
      local resource = blockType.resource('aws_ecr_registry_scanning_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        scan_type: build.template(block.scan_type),
      }),
      id: resource.field('id'),
      registry_id: resource.field('registry_id'),
      scan_type: resource.field('scan_type'),
    },
    ecr_replication_configuration(name, block): {
      local resource = blockType.resource('aws_ecr_replication_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        registry_id: build.template(std.get(block, 'registry_id', null)),
      }),
      id: resource.field('id'),
      registry_id: resource.field('registry_id'),
    },
    ecr_repository(name, block): {
      local resource = blockType.resource('aws_ecr_repository', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        id: build.template(std.get(block, 'id', null)),
        image_tag_mutability: build.template(std.get(block, 'image_tag_mutability', null)),
        name: build.template(block.name),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        repository_url: build.template(std.get(block, 'repository_url', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      force_delete: resource.field('force_delete'),
      id: resource.field('id'),
      image_tag_mutability: resource.field('image_tag_mutability'),
      name: resource.field('name'),
      registry_id: resource.field('registry_id'),
      repository_url: resource.field('repository_url'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ecr_repository_creation_template(name, block): {
      local resource = blockType.resource('aws_ecr_repository_creation_template', name),
      _: resource._(block, {
        applied_for: build.template(block.applied_for),
        custom_role_arn: build.template(std.get(block, 'custom_role_arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        image_tag_mutability: build.template(std.get(block, 'image_tag_mutability', null)),
        lifecycle_policy: build.template(std.get(block, 'lifecycle_policy', null)),
        prefix: build.template(block.prefix),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        repository_policy: build.template(std.get(block, 'repository_policy', null)),
        resource_tags: build.template(std.get(block, 'resource_tags', null)),
      }),
      applied_for: resource.field('applied_for'),
      custom_role_arn: resource.field('custom_role_arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      image_tag_mutability: resource.field('image_tag_mutability'),
      lifecycle_policy: resource.field('lifecycle_policy'),
      prefix: resource.field('prefix'),
      registry_id: resource.field('registry_id'),
      repository_policy: resource.field('repository_policy'),
      resource_tags: resource.field('resource_tags'),
    },
    ecr_repository_policy(name, block): {
      local resource = blockType.resource('aws_ecr_repository_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        repository: build.template(block.repository),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      registry_id: resource.field('registry_id'),
      repository: resource.field('repository'),
    },
    ecrpublic_repository(name, block): {
      local resource = blockType.resource('aws_ecrpublic_repository', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        repository_name: build.template(block.repository_name),
        repository_uri: build.template(std.get(block, 'repository_uri', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      registry_id: resource.field('registry_id'),
      repository_name: resource.field('repository_name'),
      repository_uri: resource.field('repository_uri'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ecrpublic_repository_policy(name, block): {
      local resource = blockType.resource('aws_ecrpublic_repository_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        repository_name: build.template(block.repository_name),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      registry_id: resource.field('registry_id'),
      repository_name: resource.field('repository_name'),
    },
    ecs_account_setting_default(name, block): {
      local resource = blockType.resource('aws_ecs_account_setting_default', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        principal_arn: build.template(std.get(block, 'principal_arn', null)),
        value: build.template(block.value),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      principal_arn: resource.field('principal_arn'),
      value: resource.field('value'),
    },
    ecs_capacity_provider(name, block): {
      local resource = blockType.resource('aws_ecs_capacity_provider', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ecs_cluster(name, block): {
      local resource = blockType.resource('aws_ecs_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ecs_cluster_capacity_providers(name, block): {
      local resource = blockType.resource('aws_ecs_cluster_capacity_providers', name),
      _: resource._(block, {
        capacity_providers: build.template(std.get(block, 'capacity_providers', null)),
        cluster_name: build.template(block.cluster_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      capacity_providers: resource.field('capacity_providers'),
      cluster_name: resource.field('cluster_name'),
      id: resource.field('id'),
    },
    ecs_service(name, block): {
      local resource = blockType.resource('aws_ecs_service', name),
      _: resource._(block, {
        cluster: build.template(std.get(block, 'cluster', null)),
        deployment_maximum_percent: build.template(std.get(block, 'deployment_maximum_percent', null)),
        deployment_minimum_healthy_percent: build.template(std.get(block, 'deployment_minimum_healthy_percent', null)),
        desired_count: build.template(std.get(block, 'desired_count', null)),
        enable_ecs_managed_tags: build.template(std.get(block, 'enable_ecs_managed_tags', null)),
        enable_execute_command: build.template(std.get(block, 'enable_execute_command', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        force_new_deployment: build.template(std.get(block, 'force_new_deployment', null)),
        health_check_grace_period_seconds: build.template(std.get(block, 'health_check_grace_period_seconds', null)),
        iam_role: build.template(std.get(block, 'iam_role', null)),
        id: build.template(std.get(block, 'id', null)),
        launch_type: build.template(std.get(block, 'launch_type', null)),
        name: build.template(block.name),
        platform_version: build.template(std.get(block, 'platform_version', null)),
        propagate_tags: build.template(std.get(block, 'propagate_tags', null)),
        scheduling_strategy: build.template(std.get(block, 'scheduling_strategy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        task_definition: build.template(std.get(block, 'task_definition', null)),
        triggers: build.template(std.get(block, 'triggers', null)),
        wait_for_steady_state: build.template(std.get(block, 'wait_for_steady_state', null)),
      }),
      cluster: resource.field('cluster'),
      deployment_maximum_percent: resource.field('deployment_maximum_percent'),
      deployment_minimum_healthy_percent: resource.field('deployment_minimum_healthy_percent'),
      desired_count: resource.field('desired_count'),
      enable_ecs_managed_tags: resource.field('enable_ecs_managed_tags'),
      enable_execute_command: resource.field('enable_execute_command'),
      force_delete: resource.field('force_delete'),
      force_new_deployment: resource.field('force_new_deployment'),
      health_check_grace_period_seconds: resource.field('health_check_grace_period_seconds'),
      iam_role: resource.field('iam_role'),
      id: resource.field('id'),
      launch_type: resource.field('launch_type'),
      name: resource.field('name'),
      platform_version: resource.field('platform_version'),
      propagate_tags: resource.field('propagate_tags'),
      scheduling_strategy: resource.field('scheduling_strategy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      task_definition: resource.field('task_definition'),
      triggers: resource.field('triggers'),
      wait_for_steady_state: resource.field('wait_for_steady_state'),
    },
    ecs_tag(name, block): {
      local resource = blockType.resource('aws_ecs_tag', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        resource_arn: build.template(block.resource_arn),
        value: build.template(block.value),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      resource_arn: resource.field('resource_arn'),
      value: resource.field('value'),
    },
    ecs_task_definition(name, block): {
      local resource = blockType.resource('aws_ecs_task_definition', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        arn_without_revision: build.template(std.get(block, 'arn_without_revision', null)),
        container_definitions: build.template(block.container_definitions),
        cpu: build.template(std.get(block, 'cpu', null)),
        execution_role_arn: build.template(std.get(block, 'execution_role_arn', null)),
        family: build.template(block.family),
        id: build.template(std.get(block, 'id', null)),
        ipc_mode: build.template(std.get(block, 'ipc_mode', null)),
        memory: build.template(std.get(block, 'memory', null)),
        network_mode: build.template(std.get(block, 'network_mode', null)),
        pid_mode: build.template(std.get(block, 'pid_mode', null)),
        requires_compatibilities: build.template(std.get(block, 'requires_compatibilities', null)),
        revision: build.template(std.get(block, 'revision', null)),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        task_role_arn: build.template(std.get(block, 'task_role_arn', null)),
        track_latest: build.template(std.get(block, 'track_latest', null)),
      }),
      arn: resource.field('arn'),
      arn_without_revision: resource.field('arn_without_revision'),
      container_definitions: resource.field('container_definitions'),
      cpu: resource.field('cpu'),
      execution_role_arn: resource.field('execution_role_arn'),
      family: resource.field('family'),
      id: resource.field('id'),
      ipc_mode: resource.field('ipc_mode'),
      memory: resource.field('memory'),
      network_mode: resource.field('network_mode'),
      pid_mode: resource.field('pid_mode'),
      requires_compatibilities: resource.field('requires_compatibilities'),
      revision: resource.field('revision'),
      skip_destroy: resource.field('skip_destroy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      task_role_arn: resource.field('task_role_arn'),
      track_latest: resource.field('track_latest'),
    },
    ecs_task_set(name, block): {
      local resource = blockType.resource('aws_ecs_task_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster: build.template(block.cluster),
        external_id: build.template(std.get(block, 'external_id', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        id: build.template(std.get(block, 'id', null)),
        launch_type: build.template(std.get(block, 'launch_type', null)),
        platform_version: build.template(std.get(block, 'platform_version', null)),
        service: build.template(block.service),
        stability_status: build.template(std.get(block, 'stability_status', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        task_definition: build.template(block.task_definition),
        task_set_id: build.template(std.get(block, 'task_set_id', null)),
        wait_until_stable: build.template(std.get(block, 'wait_until_stable', null)),
        wait_until_stable_timeout: build.template(std.get(block, 'wait_until_stable_timeout', null)),
      }),
      arn: resource.field('arn'),
      cluster: resource.field('cluster'),
      external_id: resource.field('external_id'),
      force_delete: resource.field('force_delete'),
      id: resource.field('id'),
      launch_type: resource.field('launch_type'),
      platform_version: resource.field('platform_version'),
      service: resource.field('service'),
      stability_status: resource.field('stability_status'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      task_definition: resource.field('task_definition'),
      task_set_id: resource.field('task_set_id'),
      wait_until_stable: resource.field('wait_until_stable'),
      wait_until_stable_timeout: resource.field('wait_until_stable_timeout'),
    },
    efs_access_point(name, block): {
      local resource = blockType.resource('aws_efs_access_point', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        file_system_arn: build.template(std.get(block, 'file_system_arn', null)),
        file_system_id: build.template(block.file_system_id),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      file_system_arn: resource.field('file_system_arn'),
      file_system_id: resource.field('file_system_id'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    efs_backup_policy(name, block): {
      local resource = blockType.resource('aws_efs_backup_policy', name),
      _: resource._(block, {
        file_system_id: build.template(block.file_system_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      file_system_id: resource.field('file_system_id'),
      id: resource.field('id'),
    },
    efs_file_system(name, block): {
      local resource = blockType.resource('aws_efs_file_system', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone_id: build.template(std.get(block, 'availability_zone_id', null)),
        availability_zone_name: build.template(std.get(block, 'availability_zone_name', null)),
        creation_token: build.template(std.get(block, 'creation_token', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        name: build.template(std.get(block, 'name', null)),
        number_of_mount_targets: build.template(std.get(block, 'number_of_mount_targets', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        performance_mode: build.template(std.get(block, 'performance_mode', null)),
        provisioned_throughput_in_mibps: build.template(std.get(block, 'provisioned_throughput_in_mibps', null)),
        size_in_bytes: build.template(std.get(block, 'size_in_bytes', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        throughput_mode: build.template(std.get(block, 'throughput_mode', null)),
      }),
      arn: resource.field('arn'),
      availability_zone_id: resource.field('availability_zone_id'),
      availability_zone_name: resource.field('availability_zone_name'),
      creation_token: resource.field('creation_token'),
      dns_name: resource.field('dns_name'),
      encrypted: resource.field('encrypted'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      name: resource.field('name'),
      number_of_mount_targets: resource.field('number_of_mount_targets'),
      owner_id: resource.field('owner_id'),
      performance_mode: resource.field('performance_mode'),
      provisioned_throughput_in_mibps: resource.field('provisioned_throughput_in_mibps'),
      size_in_bytes: resource.field('size_in_bytes'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      throughput_mode: resource.field('throughput_mode'),
    },
    efs_file_system_policy(name, block): {
      local resource = blockType.resource('aws_efs_file_system_policy', name),
      _: resource._(block, {
        bypass_policy_lockout_safety_check: build.template(std.get(block, 'bypass_policy_lockout_safety_check', null)),
        file_system_id: build.template(block.file_system_id),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
      }),
      bypass_policy_lockout_safety_check: resource.field('bypass_policy_lockout_safety_check'),
      file_system_id: resource.field('file_system_id'),
      id: resource.field('id'),
      policy: resource.field('policy'),
    },
    efs_mount_target(name, block): {
      local resource = blockType.resource('aws_efs_mount_target', name),
      _: resource._(block, {
        availability_zone_id: build.template(std.get(block, 'availability_zone_id', null)),
        availability_zone_name: build.template(std.get(block, 'availability_zone_name', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        file_system_arn: build.template(std.get(block, 'file_system_arn', null)),
        file_system_id: build.template(block.file_system_id),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        mount_target_dns_name: build.template(std.get(block, 'mount_target_dns_name', null)),
        network_interface_id: build.template(std.get(block, 'network_interface_id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        subnet_id: build.template(block.subnet_id),
      }),
      availability_zone_id: resource.field('availability_zone_id'),
      availability_zone_name: resource.field('availability_zone_name'),
      dns_name: resource.field('dns_name'),
      file_system_arn: resource.field('file_system_arn'),
      file_system_id: resource.field('file_system_id'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      mount_target_dns_name: resource.field('mount_target_dns_name'),
      network_interface_id: resource.field('network_interface_id'),
      owner_id: resource.field('owner_id'),
      security_groups: resource.field('security_groups'),
      subnet_id: resource.field('subnet_id'),
    },
    efs_replication_configuration(name, block): {
      local resource = blockType.resource('aws_efs_replication_configuration', name),
      _: resource._(block, {
        creation_time: build.template(std.get(block, 'creation_time', null)),
        id: build.template(std.get(block, 'id', null)),
        original_source_file_system_arn: build.template(std.get(block, 'original_source_file_system_arn', null)),
        source_file_system_arn: build.template(std.get(block, 'source_file_system_arn', null)),
        source_file_system_id: build.template(block.source_file_system_id),
        source_file_system_region: build.template(std.get(block, 'source_file_system_region', null)),
      }),
      creation_time: resource.field('creation_time'),
      id: resource.field('id'),
      original_source_file_system_arn: resource.field('original_source_file_system_arn'),
      source_file_system_arn: resource.field('source_file_system_arn'),
      source_file_system_id: resource.field('source_file_system_id'),
      source_file_system_region: resource.field('source_file_system_region'),
    },
    egress_only_internet_gateway(name, block): {
      local resource = blockType.resource('aws_egress_only_internet_gateway', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    eip(name, block): {
      local resource = blockType.resource('aws_eip', name),
      _: resource._(block, {
        address: build.template(std.get(block, 'address', null)),
        allocation_id: build.template(std.get(block, 'allocation_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        associate_with_private_ip: build.template(std.get(block, 'associate_with_private_ip', null)),
        association_id: build.template(std.get(block, 'association_id', null)),
        carrier_ip: build.template(std.get(block, 'carrier_ip', null)),
        customer_owned_ip: build.template(std.get(block, 'customer_owned_ip', null)),
        customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null)),
        domain: build.template(std.get(block, 'domain', null)),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(std.get(block, 'instance', null)),
        ipam_pool_id: build.template(std.get(block, 'ipam_pool_id', null)),
        network_border_group: build.template(std.get(block, 'network_border_group', null)),
        network_interface: build.template(std.get(block, 'network_interface', null)),
        private_dns: build.template(std.get(block, 'private_dns', null)),
        private_ip: build.template(std.get(block, 'private_ip', null)),
        ptr_record: build.template(std.get(block, 'ptr_record', null)),
        public_dns: build.template(std.get(block, 'public_dns', null)),
        public_ip: build.template(std.get(block, 'public_ip', null)),
        public_ipv4_pool: build.template(std.get(block, 'public_ipv4_pool', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc: build.template(std.get(block, 'vpc', null)),
      }),
      address: resource.field('address'),
      allocation_id: resource.field('allocation_id'),
      arn: resource.field('arn'),
      associate_with_private_ip: resource.field('associate_with_private_ip'),
      association_id: resource.field('association_id'),
      carrier_ip: resource.field('carrier_ip'),
      customer_owned_ip: resource.field('customer_owned_ip'),
      customer_owned_ipv4_pool: resource.field('customer_owned_ipv4_pool'),
      domain: resource.field('domain'),
      id: resource.field('id'),
      instance: resource.field('instance'),
      ipam_pool_id: resource.field('ipam_pool_id'),
      network_border_group: resource.field('network_border_group'),
      network_interface: resource.field('network_interface'),
      private_dns: resource.field('private_dns'),
      private_ip: resource.field('private_ip'),
      ptr_record: resource.field('ptr_record'),
      public_dns: resource.field('public_dns'),
      public_ip: resource.field('public_ip'),
      public_ipv4_pool: resource.field('public_ipv4_pool'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc: resource.field('vpc'),
    },
    eip_association(name, block): {
      local resource = blockType.resource('aws_eip_association', name),
      _: resource._(block, {
        allocation_id: build.template(std.get(block, 'allocation_id', null)),
        allow_reassociation: build.template(std.get(block, 'allow_reassociation', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(std.get(block, 'instance_id', null)),
        network_interface_id: build.template(std.get(block, 'network_interface_id', null)),
        private_ip_address: build.template(std.get(block, 'private_ip_address', null)),
        public_ip: build.template(std.get(block, 'public_ip', null)),
      }),
      allocation_id: resource.field('allocation_id'),
      allow_reassociation: resource.field('allow_reassociation'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      network_interface_id: resource.field('network_interface_id'),
      private_ip_address: resource.field('private_ip_address'),
      public_ip: resource.field('public_ip'),
    },
    eip_domain_name(name, block): {
      local resource = blockType.resource('aws_eip_domain_name', name),
      _: resource._(block, {
        allocation_id: build.template(block.allocation_id),
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        ptr_record: build.template(std.get(block, 'ptr_record', null)),
      }),
      allocation_id: resource.field('allocation_id'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      ptr_record: resource.field('ptr_record'),
    },
    eks_access_entry(name, block): {
      local resource = blockType.resource('aws_eks_access_entry', name),
      _: resource._(block, {
        access_entry_arn: build.template(std.get(block, 'access_entry_arn', null)),
        cluster_name: build.template(block.cluster_name),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        kubernetes_groups: build.template(std.get(block, 'kubernetes_groups', null)),
        modified_at: build.template(std.get(block, 'modified_at', null)),
        principal_arn: build.template(block.principal_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
        user_name: build.template(std.get(block, 'user_name', null)),
      }),
      access_entry_arn: resource.field('access_entry_arn'),
      cluster_name: resource.field('cluster_name'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      kubernetes_groups: resource.field('kubernetes_groups'),
      modified_at: resource.field('modified_at'),
      principal_arn: resource.field('principal_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      user_name: resource.field('user_name'),
    },
    eks_access_policy_association(name, block): {
      local resource = blockType.resource('aws_eks_access_policy_association', name),
      _: resource._(block, {
        associated_at: build.template(std.get(block, 'associated_at', null)),
        cluster_name: build.template(block.cluster_name),
        id: build.template(std.get(block, 'id', null)),
        modified_at: build.template(std.get(block, 'modified_at', null)),
        policy_arn: build.template(block.policy_arn),
        principal_arn: build.template(block.principal_arn),
      }),
      associated_at: resource.field('associated_at'),
      cluster_name: resource.field('cluster_name'),
      id: resource.field('id'),
      modified_at: resource.field('modified_at'),
      policy_arn: resource.field('policy_arn'),
      principal_arn: resource.field('principal_arn'),
    },
    eks_addon(name, block): {
      local resource = blockType.resource('aws_eks_addon', name),
      _: resource._(block, {
        addon_name: build.template(block.addon_name),
        addon_version: build.template(std.get(block, 'addon_version', null)),
        arn: build.template(std.get(block, 'arn', null)),
        cluster_name: build.template(block.cluster_name),
        configuration_values: build.template(std.get(block, 'configuration_values', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        modified_at: build.template(std.get(block, 'modified_at', null)),
        preserve: build.template(std.get(block, 'preserve', null)),
        resolve_conflicts: build.template(std.get(block, 'resolve_conflicts', null)),
        resolve_conflicts_on_create: build.template(std.get(block, 'resolve_conflicts_on_create', null)),
        resolve_conflicts_on_update: build.template(std.get(block, 'resolve_conflicts_on_update', null)),
        service_account_role_arn: build.template(std.get(block, 'service_account_role_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      addon_name: resource.field('addon_name'),
      addon_version: resource.field('addon_version'),
      arn: resource.field('arn'),
      cluster_name: resource.field('cluster_name'),
      configuration_values: resource.field('configuration_values'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      modified_at: resource.field('modified_at'),
      preserve: resource.field('preserve'),
      resolve_conflicts: resource.field('resolve_conflicts'),
      resolve_conflicts_on_create: resource.field('resolve_conflicts_on_create'),
      resolve_conflicts_on_update: resource.field('resolve_conflicts_on_update'),
      service_account_role_arn: resource.field('service_account_role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    eks_cluster(name, block): {
      local resource = blockType.resource('aws_eks_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bootstrap_self_managed_addons: build.template(std.get(block, 'bootstrap_self_managed_addons', null)),
        certificate_authority: build.template(std.get(block, 'certificate_authority', null)),
        cluster_id: build.template(std.get(block, 'cluster_id', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        enabled_cluster_log_types: build.template(std.get(block, 'enabled_cluster_log_types', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        name: build.template(block.name),
        platform_version: build.template(std.get(block, 'platform_version', null)),
        role_arn: build.template(block.role_arn),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      bootstrap_self_managed_addons: resource.field('bootstrap_self_managed_addons'),
      certificate_authority: resource.field('certificate_authority'),
      cluster_id: resource.field('cluster_id'),
      created_at: resource.field('created_at'),
      enabled_cluster_log_types: resource.field('enabled_cluster_log_types'),
      endpoint: resource.field('endpoint'),
      id: resource.field('id'),
      identity: resource.field('identity'),
      name: resource.field('name'),
      platform_version: resource.field('platform_version'),
      role_arn: resource.field('role_arn'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    eks_fargate_profile(name, block): {
      local resource = blockType.resource('aws_eks_fargate_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster_name: build.template(block.cluster_name),
        fargate_profile_name: build.template(block.fargate_profile_name),
        id: build.template(std.get(block, 'id', null)),
        pod_execution_role_arn: build.template(block.pod_execution_role_arn),
        status: build.template(std.get(block, 'status', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      cluster_name: resource.field('cluster_name'),
      fargate_profile_name: resource.field('fargate_profile_name'),
      id: resource.field('id'),
      pod_execution_role_arn: resource.field('pod_execution_role_arn'),
      status: resource.field('status'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    eks_identity_provider_config(name, block): {
      local resource = blockType.resource('aws_eks_identity_provider_config', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster_name: build.template(block.cluster_name),
        id: build.template(std.get(block, 'id', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      cluster_name: resource.field('cluster_name'),
      id: resource.field('id'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    eks_node_group(name, block): {
      local resource = blockType.resource('aws_eks_node_group', name),
      _: resource._(block, {
        ami_type: build.template(std.get(block, 'ami_type', null)),
        arn: build.template(std.get(block, 'arn', null)),
        capacity_type: build.template(std.get(block, 'capacity_type', null)),
        cluster_name: build.template(block.cluster_name),
        disk_size: build.template(std.get(block, 'disk_size', null)),
        force_update_version: build.template(std.get(block, 'force_update_version', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_types: build.template(std.get(block, 'instance_types', null)),
        labels: build.template(std.get(block, 'labels', null)),
        node_group_name: build.template(std.get(block, 'node_group_name', null)),
        node_group_name_prefix: build.template(std.get(block, 'node_group_name_prefix', null)),
        node_role_arn: build.template(block.node_role_arn),
        release_version: build.template(std.get(block, 'release_version', null)),
        resources: build.template(std.get(block, 'resources', null)),
        status: build.template(std.get(block, 'status', null)),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      ami_type: resource.field('ami_type'),
      arn: resource.field('arn'),
      capacity_type: resource.field('capacity_type'),
      cluster_name: resource.field('cluster_name'),
      disk_size: resource.field('disk_size'),
      force_update_version: resource.field('force_update_version'),
      id: resource.field('id'),
      instance_types: resource.field('instance_types'),
      labels: resource.field('labels'),
      node_group_name: resource.field('node_group_name'),
      node_group_name_prefix: resource.field('node_group_name_prefix'),
      node_role_arn: resource.field('node_role_arn'),
      release_version: resource.field('release_version'),
      resources: resource.field('resources'),
      status: resource.field('status'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    eks_pod_identity_association(name, block): {
      local resource = blockType.resource('aws_eks_pod_identity_association', name),
      _: resource._(block, {
        association_arn: build.template(std.get(block, 'association_arn', null)),
        association_id: build.template(std.get(block, 'association_id', null)),
        cluster_name: build.template(block.cluster_name),
        id: build.template(std.get(block, 'id', null)),
        namespace: build.template(block.namespace),
        role_arn: build.template(block.role_arn),
        service_account: build.template(block.service_account),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      association_arn: resource.field('association_arn'),
      association_id: resource.field('association_id'),
      cluster_name: resource.field('cluster_name'),
      id: resource.field('id'),
      namespace: resource.field('namespace'),
      role_arn: resource.field('role_arn'),
      service_account: resource.field('service_account'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    elastic_beanstalk_application(name, block): {
      local resource = blockType.resource('aws_elastic_beanstalk_application', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    elastic_beanstalk_application_version(name, block): {
      local resource = blockType.resource('aws_elastic_beanstalk_application_version', name),
      _: resource._(block, {
        application: build.template(block.application),
        arn: build.template(std.get(block, 'arn', null)),
        bucket: build.template(block.bucket),
        description: build.template(std.get(block, 'description', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        name: build.template(block.name),
        process: build.template(std.get(block, 'process', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      application: resource.field('application'),
      arn: resource.field('arn'),
      bucket: resource.field('bucket'),
      description: resource.field('description'),
      force_delete: resource.field('force_delete'),
      id: resource.field('id'),
      key: resource.field('key'),
      name: resource.field('name'),
      process: resource.field('process'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    elastic_beanstalk_configuration_template(name, block): {
      local resource = blockType.resource('aws_elastic_beanstalk_configuration_template', name),
      _: resource._(block, {
        application: build.template(block.application),
        description: build.template(std.get(block, 'description', null)),
        environment_id: build.template(std.get(block, 'environment_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        solution_stack_name: build.template(std.get(block, 'solution_stack_name', null)),
      }),
      application: resource.field('application'),
      description: resource.field('description'),
      environment_id: resource.field('environment_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      solution_stack_name: resource.field('solution_stack_name'),
    },
    elastic_beanstalk_environment(name, block): {
      local resource = blockType.resource('aws_elastic_beanstalk_environment', name),
      _: resource._(block, {
        all_settings: build.template(std.get(block, 'all_settings', null)),
        application: build.template(block.application),
        arn: build.template(std.get(block, 'arn', null)),
        autoscaling_groups: build.template(std.get(block, 'autoscaling_groups', null)),
        cname: build.template(std.get(block, 'cname', null)),
        cname_prefix: build.template(std.get(block, 'cname_prefix', null)),
        description: build.template(std.get(block, 'description', null)),
        endpoint_url: build.template(std.get(block, 'endpoint_url', null)),
        id: build.template(std.get(block, 'id', null)),
        instances: build.template(std.get(block, 'instances', null)),
        launch_configurations: build.template(std.get(block, 'launch_configurations', null)),
        load_balancers: build.template(std.get(block, 'load_balancers', null)),
        name: build.template(block.name),
        platform_arn: build.template(std.get(block, 'platform_arn', null)),
        poll_interval: build.template(std.get(block, 'poll_interval', null)),
        queues: build.template(std.get(block, 'queues', null)),
        solution_stack_name: build.template(std.get(block, 'solution_stack_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        template_name: build.template(std.get(block, 'template_name', null)),
        tier: build.template(std.get(block, 'tier', null)),
        triggers: build.template(std.get(block, 'triggers', null)),
        version_label: build.template(std.get(block, 'version_label', null)),
        wait_for_ready_timeout: build.template(std.get(block, 'wait_for_ready_timeout', null)),
      }),
      all_settings: resource.field('all_settings'),
      application: resource.field('application'),
      arn: resource.field('arn'),
      autoscaling_groups: resource.field('autoscaling_groups'),
      cname: resource.field('cname'),
      cname_prefix: resource.field('cname_prefix'),
      description: resource.field('description'),
      endpoint_url: resource.field('endpoint_url'),
      id: resource.field('id'),
      instances: resource.field('instances'),
      launch_configurations: resource.field('launch_configurations'),
      load_balancers: resource.field('load_balancers'),
      name: resource.field('name'),
      platform_arn: resource.field('platform_arn'),
      poll_interval: resource.field('poll_interval'),
      queues: resource.field('queues'),
      solution_stack_name: resource.field('solution_stack_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      template_name: resource.field('template_name'),
      tier: resource.field('tier'),
      triggers: resource.field('triggers'),
      version_label: resource.field('version_label'),
      wait_for_ready_timeout: resource.field('wait_for_ready_timeout'),
    },
    elasticache_cluster(name, block): {
      local resource = blockType.resource('aws_elasticache_cluster', name),
      _: resource._(block, {
        apply_immediately: build.template(std.get(block, 'apply_immediately', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        az_mode: build.template(std.get(block, 'az_mode', null)),
        cache_nodes: build.template(std.get(block, 'cache_nodes', null)),
        cluster_address: build.template(std.get(block, 'cluster_address', null)),
        cluster_id: build.template(block.cluster_id),
        configuration_endpoint: build.template(std.get(block, 'configuration_endpoint', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        engine_version_actual: build.template(std.get(block, 'engine_version_actual', null)),
        final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_discovery: build.template(std.get(block, 'ip_discovery', null)),
        maintenance_window: build.template(std.get(block, 'maintenance_window', null)),
        network_type: build.template(std.get(block, 'network_type', null)),
        node_type: build.template(std.get(block, 'node_type', null)),
        notification_topic_arn: build.template(std.get(block, 'notification_topic_arn', null)),
        num_cache_nodes: build.template(std.get(block, 'num_cache_nodes', null)),
        outpost_mode: build.template(std.get(block, 'outpost_mode', null)),
        parameter_group_name: build.template(std.get(block, 'parameter_group_name', null)),
        port: build.template(std.get(block, 'port', null)),
        preferred_availability_zones: build.template(std.get(block, 'preferred_availability_zones', null)),
        preferred_outpost_arn: build.template(std.get(block, 'preferred_outpost_arn', null)),
        replication_group_id: build.template(std.get(block, 'replication_group_id', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        snapshot_arns: build.template(std.get(block, 'snapshot_arns', null)),
        snapshot_name: build.template(std.get(block, 'snapshot_name', null)),
        snapshot_retention_limit: build.template(std.get(block, 'snapshot_retention_limit', null)),
        snapshot_window: build.template(std.get(block, 'snapshot_window', null)),
        subnet_group_name: build.template(std.get(block, 'subnet_group_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_encryption_enabled: build.template(std.get(block, 'transit_encryption_enabled', null)),
      }),
      apply_immediately: resource.field('apply_immediately'),
      arn: resource.field('arn'),
      auto_minor_version_upgrade: resource.field('auto_minor_version_upgrade'),
      availability_zone: resource.field('availability_zone'),
      az_mode: resource.field('az_mode'),
      cache_nodes: resource.field('cache_nodes'),
      cluster_address: resource.field('cluster_address'),
      cluster_id: resource.field('cluster_id'),
      configuration_endpoint: resource.field('configuration_endpoint'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      engine_version_actual: resource.field('engine_version_actual'),
      final_snapshot_identifier: resource.field('final_snapshot_identifier'),
      id: resource.field('id'),
      ip_discovery: resource.field('ip_discovery'),
      maintenance_window: resource.field('maintenance_window'),
      network_type: resource.field('network_type'),
      node_type: resource.field('node_type'),
      notification_topic_arn: resource.field('notification_topic_arn'),
      num_cache_nodes: resource.field('num_cache_nodes'),
      outpost_mode: resource.field('outpost_mode'),
      parameter_group_name: resource.field('parameter_group_name'),
      port: resource.field('port'),
      preferred_availability_zones: resource.field('preferred_availability_zones'),
      preferred_outpost_arn: resource.field('preferred_outpost_arn'),
      replication_group_id: resource.field('replication_group_id'),
      security_group_ids: resource.field('security_group_ids'),
      snapshot_arns: resource.field('snapshot_arns'),
      snapshot_name: resource.field('snapshot_name'),
      snapshot_retention_limit: resource.field('snapshot_retention_limit'),
      snapshot_window: resource.field('snapshot_window'),
      subnet_group_name: resource.field('subnet_group_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_encryption_enabled: resource.field('transit_encryption_enabled'),
    },
    elasticache_global_replication_group(name, block): {
      local resource = blockType.resource('aws_elasticache_global_replication_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        at_rest_encryption_enabled: build.template(std.get(block, 'at_rest_encryption_enabled', null)),
        auth_token_enabled: build.template(std.get(block, 'auth_token_enabled', null)),
        automatic_failover_enabled: build.template(std.get(block, 'automatic_failover_enabled', null)),
        cache_node_type: build.template(std.get(block, 'cache_node_type', null)),
        cluster_enabled: build.template(std.get(block, 'cluster_enabled', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        engine_version_actual: build.template(std.get(block, 'engine_version_actual', null)),
        global_node_groups: build.template(std.get(block, 'global_node_groups', null)),
        global_replication_group_description: build.template(std.get(block, 'global_replication_group_description', null)),
        global_replication_group_id: build.template(std.get(block, 'global_replication_group_id', null)),
        global_replication_group_id_suffix: build.template(block.global_replication_group_id_suffix),
        id: build.template(std.get(block, 'id', null)),
        num_node_groups: build.template(std.get(block, 'num_node_groups', null)),
        parameter_group_name: build.template(std.get(block, 'parameter_group_name', null)),
        primary_replication_group_id: build.template(block.primary_replication_group_id),
        transit_encryption_enabled: build.template(std.get(block, 'transit_encryption_enabled', null)),
      }),
      arn: resource.field('arn'),
      at_rest_encryption_enabled: resource.field('at_rest_encryption_enabled'),
      auth_token_enabled: resource.field('auth_token_enabled'),
      automatic_failover_enabled: resource.field('automatic_failover_enabled'),
      cache_node_type: resource.field('cache_node_type'),
      cluster_enabled: resource.field('cluster_enabled'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      engine_version_actual: resource.field('engine_version_actual'),
      global_node_groups: resource.field('global_node_groups'),
      global_replication_group_description: resource.field('global_replication_group_description'),
      global_replication_group_id: resource.field('global_replication_group_id'),
      global_replication_group_id_suffix: resource.field('global_replication_group_id_suffix'),
      id: resource.field('id'),
      num_node_groups: resource.field('num_node_groups'),
      parameter_group_name: resource.field('parameter_group_name'),
      primary_replication_group_id: resource.field('primary_replication_group_id'),
      transit_encryption_enabled: resource.field('transit_encryption_enabled'),
    },
    elasticache_parameter_group(name, block): {
      local resource = blockType.resource('aws_elasticache_parameter_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        family: build.template(block.family),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      family: resource.field('family'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    elasticache_replication_group(name, block): {
      local resource = blockType.resource('aws_elasticache_replication_group', name),
      _: resource._(block, {
        apply_immediately: build.template(std.get(block, 'apply_immediately', null)),
        arn: build.template(std.get(block, 'arn', null)),
        at_rest_encryption_enabled: build.template(std.get(block, 'at_rest_encryption_enabled', null)),
        auth_token: build.template(std.get(block, 'auth_token', null)),
        auth_token_update_strategy: build.template(std.get(block, 'auth_token_update_strategy', null)),
        auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null)),
        automatic_failover_enabled: build.template(std.get(block, 'automatic_failover_enabled', null)),
        cluster_enabled: build.template(std.get(block, 'cluster_enabled', null)),
        cluster_mode: build.template(std.get(block, 'cluster_mode', null)),
        configuration_endpoint_address: build.template(std.get(block, 'configuration_endpoint_address', null)),
        data_tiering_enabled: build.template(std.get(block, 'data_tiering_enabled', null)),
        description: build.template(block.description),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        engine_version_actual: build.template(std.get(block, 'engine_version_actual', null)),
        final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null)),
        global_replication_group_id: build.template(std.get(block, 'global_replication_group_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_discovery: build.template(std.get(block, 'ip_discovery', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        maintenance_window: build.template(std.get(block, 'maintenance_window', null)),
        member_clusters: build.template(std.get(block, 'member_clusters', null)),
        multi_az_enabled: build.template(std.get(block, 'multi_az_enabled', null)),
        network_type: build.template(std.get(block, 'network_type', null)),
        node_type: build.template(std.get(block, 'node_type', null)),
        notification_topic_arn: build.template(std.get(block, 'notification_topic_arn', null)),
        num_cache_clusters: build.template(std.get(block, 'num_cache_clusters', null)),
        num_node_groups: build.template(std.get(block, 'num_node_groups', null)),
        parameter_group_name: build.template(std.get(block, 'parameter_group_name', null)),
        port: build.template(std.get(block, 'port', null)),
        preferred_cache_cluster_azs: build.template(std.get(block, 'preferred_cache_cluster_azs', null)),
        primary_endpoint_address: build.template(std.get(block, 'primary_endpoint_address', null)),
        reader_endpoint_address: build.template(std.get(block, 'reader_endpoint_address', null)),
        replicas_per_node_group: build.template(std.get(block, 'replicas_per_node_group', null)),
        replication_group_id: build.template(block.replication_group_id),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        security_group_names: build.template(std.get(block, 'security_group_names', null)),
        snapshot_arns: build.template(std.get(block, 'snapshot_arns', null)),
        snapshot_name: build.template(std.get(block, 'snapshot_name', null)),
        snapshot_retention_limit: build.template(std.get(block, 'snapshot_retention_limit', null)),
        snapshot_window: build.template(std.get(block, 'snapshot_window', null)),
        subnet_group_name: build.template(std.get(block, 'subnet_group_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_encryption_enabled: build.template(std.get(block, 'transit_encryption_enabled', null)),
        transit_encryption_mode: build.template(std.get(block, 'transit_encryption_mode', null)),
        user_group_ids: build.template(std.get(block, 'user_group_ids', null)),
      }),
      apply_immediately: resource.field('apply_immediately'),
      arn: resource.field('arn'),
      at_rest_encryption_enabled: resource.field('at_rest_encryption_enabled'),
      auth_token: resource.field('auth_token'),
      auth_token_update_strategy: resource.field('auth_token_update_strategy'),
      auto_minor_version_upgrade: resource.field('auto_minor_version_upgrade'),
      automatic_failover_enabled: resource.field('automatic_failover_enabled'),
      cluster_enabled: resource.field('cluster_enabled'),
      cluster_mode: resource.field('cluster_mode'),
      configuration_endpoint_address: resource.field('configuration_endpoint_address'),
      data_tiering_enabled: resource.field('data_tiering_enabled'),
      description: resource.field('description'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      engine_version_actual: resource.field('engine_version_actual'),
      final_snapshot_identifier: resource.field('final_snapshot_identifier'),
      global_replication_group_id: resource.field('global_replication_group_id'),
      id: resource.field('id'),
      ip_discovery: resource.field('ip_discovery'),
      kms_key_id: resource.field('kms_key_id'),
      maintenance_window: resource.field('maintenance_window'),
      member_clusters: resource.field('member_clusters'),
      multi_az_enabled: resource.field('multi_az_enabled'),
      network_type: resource.field('network_type'),
      node_type: resource.field('node_type'),
      notification_topic_arn: resource.field('notification_topic_arn'),
      num_cache_clusters: resource.field('num_cache_clusters'),
      num_node_groups: resource.field('num_node_groups'),
      parameter_group_name: resource.field('parameter_group_name'),
      port: resource.field('port'),
      preferred_cache_cluster_azs: resource.field('preferred_cache_cluster_azs'),
      primary_endpoint_address: resource.field('primary_endpoint_address'),
      reader_endpoint_address: resource.field('reader_endpoint_address'),
      replicas_per_node_group: resource.field('replicas_per_node_group'),
      replication_group_id: resource.field('replication_group_id'),
      security_group_ids: resource.field('security_group_ids'),
      security_group_names: resource.field('security_group_names'),
      snapshot_arns: resource.field('snapshot_arns'),
      snapshot_name: resource.field('snapshot_name'),
      snapshot_retention_limit: resource.field('snapshot_retention_limit'),
      snapshot_window: resource.field('snapshot_window'),
      subnet_group_name: resource.field('subnet_group_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_encryption_enabled: resource.field('transit_encryption_enabled'),
      transit_encryption_mode: resource.field('transit_encryption_mode'),
      user_group_ids: resource.field('user_group_ids'),
    },
    elasticache_reserved_cache_node(name, block): {
      local resource = blockType.resource('aws_elasticache_reserved_cache_node', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cache_node_count: build.template(std.get(block, 'cache_node_count', null)),
        cache_node_type: build.template(std.get(block, 'cache_node_type', null)),
        duration: build.template(std.get(block, 'duration', null)),
        fixed_price: build.template(std.get(block, 'fixed_price', null)),
        id: build.template(std.get(block, 'id', null)),
        offering_type: build.template(std.get(block, 'offering_type', null)),
        product_description: build.template(std.get(block, 'product_description', null)),
        recurring_charges: build.template(std.get(block, 'recurring_charges', null)),
        reserved_cache_nodes_offering_id: build.template(block.reserved_cache_nodes_offering_id),
        start_time: build.template(std.get(block, 'start_time', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        usage_price: build.template(std.get(block, 'usage_price', null)),
      }),
      arn: resource.field('arn'),
      cache_node_count: resource.field('cache_node_count'),
      cache_node_type: resource.field('cache_node_type'),
      duration: resource.field('duration'),
      fixed_price: resource.field('fixed_price'),
      id: resource.field('id'),
      offering_type: resource.field('offering_type'),
      product_description: resource.field('product_description'),
      recurring_charges: resource.field('recurring_charges'),
      reserved_cache_nodes_offering_id: resource.field('reserved_cache_nodes_offering_id'),
      start_time: resource.field('start_time'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      usage_price: resource.field('usage_price'),
    },
    elasticache_serverless_cache(name, block): {
      local resource = blockType.resource('aws_elasticache_serverless_cache', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        daily_snapshot_time: build.template(std.get(block, 'daily_snapshot_time', null)),
        description: build.template(std.get(block, 'description', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        engine: build.template(block.engine),
        full_engine_version: build.template(std.get(block, 'full_engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        major_engine_version: build.template(std.get(block, 'major_engine_version', null)),
        name: build.template(block.name),
        reader_endpoint: build.template(std.get(block, 'reader_endpoint', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        snapshot_arns_to_restore: build.template(std.get(block, 'snapshot_arns_to_restore', null)),
        snapshot_retention_limit: build.template(std.get(block, 'snapshot_retention_limit', null)),
        status: build.template(std.get(block, 'status', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_group_id: build.template(std.get(block, 'user_group_id', null)),
      }),
      arn: resource.field('arn'),
      create_time: resource.field('create_time'),
      daily_snapshot_time: resource.field('daily_snapshot_time'),
      description: resource.field('description'),
      endpoint: resource.field('endpoint'),
      engine: resource.field('engine'),
      full_engine_version: resource.field('full_engine_version'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      major_engine_version: resource.field('major_engine_version'),
      name: resource.field('name'),
      reader_endpoint: resource.field('reader_endpoint'),
      security_group_ids: resource.field('security_group_ids'),
      snapshot_arns_to_restore: resource.field('snapshot_arns_to_restore'),
      snapshot_retention_limit: resource.field('snapshot_retention_limit'),
      status: resource.field('status'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_group_id: resource.field('user_group_id'),
    },
    elasticache_subnet_group(name, block): {
      local resource = blockType.resource('aws_elasticache_subnet_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    elasticache_user(name, block): {
      local resource = blockType.resource('aws_elasticache_user', name),
      _: resource._(block, {
        access_string: build.template(block.access_string),
        arn: build.template(std.get(block, 'arn', null)),
        engine: build.template(block.engine),
        id: build.template(std.get(block, 'id', null)),
        no_password_required: build.template(std.get(block, 'no_password_required', null)),
        passwords: build.template(std.get(block, 'passwords', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_id: build.template(block.user_id),
        user_name: build.template(block.user_name),
      }),
      access_string: resource.field('access_string'),
      arn: resource.field('arn'),
      engine: resource.field('engine'),
      id: resource.field('id'),
      no_password_required: resource.field('no_password_required'),
      passwords: resource.field('passwords'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_id: resource.field('user_id'),
      user_name: resource.field('user_name'),
    },
    elasticache_user_group(name, block): {
      local resource = blockType.resource('aws_elasticache_user_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        engine: build.template(block.engine),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_group_id: build.template(block.user_group_id),
        user_ids: build.template(std.get(block, 'user_ids', null)),
      }),
      arn: resource.field('arn'),
      engine: resource.field('engine'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_group_id: resource.field('user_group_id'),
      user_ids: resource.field('user_ids'),
    },
    elasticache_user_group_association(name, block): {
      local resource = blockType.resource('aws_elasticache_user_group_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        user_group_id: build.template(block.user_group_id),
        user_id: build.template(block.user_id),
      }),
      id: resource.field('id'),
      user_group_id: resource.field('user_group_id'),
      user_id: resource.field('user_id'),
    },
    elasticsearch_domain(name, block): {
      local resource = blockType.resource('aws_elasticsearch_domain', name),
      _: resource._(block, {
        access_policies: build.template(std.get(block, 'access_policies', null)),
        advanced_options: build.template(std.get(block, 'advanced_options', null)),
        arn: build.template(std.get(block, 'arn', null)),
        domain_id: build.template(std.get(block, 'domain_id', null)),
        domain_name: build.template(block.domain_name),
        elasticsearch_version: build.template(std.get(block, 'elasticsearch_version', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        kibana_endpoint: build.template(std.get(block, 'kibana_endpoint', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      access_policies: resource.field('access_policies'),
      advanced_options: resource.field('advanced_options'),
      arn: resource.field('arn'),
      domain_id: resource.field('domain_id'),
      domain_name: resource.field('domain_name'),
      elasticsearch_version: resource.field('elasticsearch_version'),
      endpoint: resource.field('endpoint'),
      id: resource.field('id'),
      kibana_endpoint: resource.field('kibana_endpoint'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    elasticsearch_domain_policy(name, block): {
      local resource = blockType.resource('aws_elasticsearch_domain_policy', name),
      _: resource._(block, {
        access_policies: build.template(block.access_policies),
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      access_policies: resource.field('access_policies'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
    },
    elasticsearch_domain_saml_options(name, block): {
      local resource = blockType.resource('aws_elasticsearch_domain_saml_options', name),
      _: resource._(block, {
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
    },
    elasticsearch_vpc_endpoint(name, block): {
      local resource = blockType.resource('aws_elasticsearch_vpc_endpoint', name),
      _: resource._(block, {
        domain_arn: build.template(block.domain_arn),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      domain_arn: resource.field('domain_arn'),
      endpoint: resource.field('endpoint'),
      id: resource.field('id'),
    },
    elastictranscoder_pipeline(name, block): {
      local resource = blockType.resource('aws_elastictranscoder_pipeline', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_kms_key_arn: build.template(std.get(block, 'aws_kms_key_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        input_bucket: build.template(block.input_bucket),
        name: build.template(std.get(block, 'name', null)),
        output_bucket: build.template(std.get(block, 'output_bucket', null)),
        role: build.template(block.role),
      }),
      arn: resource.field('arn'),
      aws_kms_key_arn: resource.field('aws_kms_key_arn'),
      id: resource.field('id'),
      input_bucket: resource.field('input_bucket'),
      name: resource.field('name'),
      output_bucket: resource.field('output_bucket'),
      role: resource.field('role'),
    },
    elastictranscoder_preset(name, block): {
      local resource = blockType.resource('aws_elastictranscoder_preset', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        container: build.template(block.container),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        type: build.template(std.get(block, 'type', null)),
        video_codec_options: build.template(std.get(block, 'video_codec_options', null)),
      }),
      arn: resource.field('arn'),
      container: resource.field('container'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      type: resource.field('type'),
      video_codec_options: resource.field('video_codec_options'),
    },
    elb(name, block): {
      local resource = blockType.resource('aws_elb', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        connection_draining: build.template(std.get(block, 'connection_draining', null)),
        connection_draining_timeout: build.template(std.get(block, 'connection_draining_timeout', null)),
        cross_zone_load_balancing: build.template(std.get(block, 'cross_zone_load_balancing', null)),
        desync_mitigation_mode: build.template(std.get(block, 'desync_mitigation_mode', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout: build.template(std.get(block, 'idle_timeout', null)),
        instances: build.template(std.get(block, 'instances', null)),
        internal: build.template(std.get(block, 'internal', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        source_security_group: build.template(std.get(block, 'source_security_group', null)),
        source_security_group_id: build.template(std.get(block, 'source_security_group_id', null)),
        subnets: build.template(std.get(block, 'subnets', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        zone_id: build.template(std.get(block, 'zone_id', null)),
      }),
      arn: resource.field('arn'),
      availability_zones: resource.field('availability_zones'),
      connection_draining: resource.field('connection_draining'),
      connection_draining_timeout: resource.field('connection_draining_timeout'),
      cross_zone_load_balancing: resource.field('cross_zone_load_balancing'),
      desync_mitigation_mode: resource.field('desync_mitigation_mode'),
      dns_name: resource.field('dns_name'),
      id: resource.field('id'),
      idle_timeout: resource.field('idle_timeout'),
      instances: resource.field('instances'),
      internal: resource.field('internal'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      security_groups: resource.field('security_groups'),
      source_security_group: resource.field('source_security_group'),
      source_security_group_id: resource.field('source_security_group_id'),
      subnets: resource.field('subnets'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      zone_id: resource.field('zone_id'),
    },
    elb_attachment(name, block): {
      local resource = blockType.resource('aws_elb_attachment', name),
      _: resource._(block, {
        elb: build.template(block.elb),
        id: build.template(std.get(block, 'id', null)),
        instance: build.template(block.instance),
      }),
      elb: resource.field('elb'),
      id: resource.field('id'),
      instance: resource.field('instance'),
    },
    emr_block_public_access_configuration(name, block): {
      local resource = blockType.resource('aws_emr_block_public_access_configuration', name),
      _: resource._(block, {
        block_public_security_group_rules: build.template(block.block_public_security_group_rules),
        id: build.template(std.get(block, 'id', null)),
      }),
      block_public_security_group_rules: resource.field('block_public_security_group_rules'),
      id: resource.field('id'),
    },
    emr_cluster(name, block): {
      local resource = blockType.resource('aws_emr_cluster', name),
      _: resource._(block, {
        additional_info: build.template(std.get(block, 'additional_info', null)),
        applications: build.template(std.get(block, 'applications', null)),
        arn: build.template(std.get(block, 'arn', null)),
        autoscaling_role: build.template(std.get(block, 'autoscaling_role', null)),
        cluster_state: build.template(std.get(block, 'cluster_state', null)),
        configurations: build.template(std.get(block, 'configurations', null)),
        configurations_json: build.template(std.get(block, 'configurations_json', null)),
        custom_ami_id: build.template(std.get(block, 'custom_ami_id', null)),
        ebs_root_volume_size: build.template(std.get(block, 'ebs_root_volume_size', null)),
        id: build.template(std.get(block, 'id', null)),
        keep_job_flow_alive_when_no_steps: build.template(std.get(block, 'keep_job_flow_alive_when_no_steps', null)),
        list_steps_states: build.template(std.get(block, 'list_steps_states', null)),
        log_encryption_kms_key_id: build.template(std.get(block, 'log_encryption_kms_key_id', null)),
        log_uri: build.template(std.get(block, 'log_uri', null)),
        master_public_dns: build.template(std.get(block, 'master_public_dns', null)),
        name: build.template(block.name),
        placement_group_config: build.template(std.get(block, 'placement_group_config', null)),
        release_label: build.template(block.release_label),
        scale_down_behavior: build.template(std.get(block, 'scale_down_behavior', null)),
        security_configuration: build.template(std.get(block, 'security_configuration', null)),
        service_role: build.template(block.service_role),
        step: build.template(std.get(block, 'step', null)),
        step_concurrency_level: build.template(std.get(block, 'step_concurrency_level', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        termination_protection: build.template(std.get(block, 'termination_protection', null)),
        unhealthy_node_replacement: build.template(std.get(block, 'unhealthy_node_replacement', null)),
        visible_to_all_users: build.template(std.get(block, 'visible_to_all_users', null)),
      }),
      additional_info: resource.field('additional_info'),
      applications: resource.field('applications'),
      arn: resource.field('arn'),
      autoscaling_role: resource.field('autoscaling_role'),
      cluster_state: resource.field('cluster_state'),
      configurations: resource.field('configurations'),
      configurations_json: resource.field('configurations_json'),
      custom_ami_id: resource.field('custom_ami_id'),
      ebs_root_volume_size: resource.field('ebs_root_volume_size'),
      id: resource.field('id'),
      keep_job_flow_alive_when_no_steps: resource.field('keep_job_flow_alive_when_no_steps'),
      list_steps_states: resource.field('list_steps_states'),
      log_encryption_kms_key_id: resource.field('log_encryption_kms_key_id'),
      log_uri: resource.field('log_uri'),
      master_public_dns: resource.field('master_public_dns'),
      name: resource.field('name'),
      placement_group_config: resource.field('placement_group_config'),
      release_label: resource.field('release_label'),
      scale_down_behavior: resource.field('scale_down_behavior'),
      security_configuration: resource.field('security_configuration'),
      service_role: resource.field('service_role'),
      step: resource.field('step'),
      step_concurrency_level: resource.field('step_concurrency_level'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      termination_protection: resource.field('termination_protection'),
      unhealthy_node_replacement: resource.field('unhealthy_node_replacement'),
      visible_to_all_users: resource.field('visible_to_all_users'),
    },
    emr_instance_fleet(name, block): {
      local resource = blockType.resource('aws_emr_instance_fleet', name),
      _: resource._(block, {
        cluster_id: build.template(block.cluster_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        provisioned_on_demand_capacity: build.template(std.get(block, 'provisioned_on_demand_capacity', null)),
        provisioned_spot_capacity: build.template(std.get(block, 'provisioned_spot_capacity', null)),
        target_on_demand_capacity: build.template(std.get(block, 'target_on_demand_capacity', null)),
        target_spot_capacity: build.template(std.get(block, 'target_spot_capacity', null)),
      }),
      cluster_id: resource.field('cluster_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      provisioned_on_demand_capacity: resource.field('provisioned_on_demand_capacity'),
      provisioned_spot_capacity: resource.field('provisioned_spot_capacity'),
      target_on_demand_capacity: resource.field('target_on_demand_capacity'),
      target_spot_capacity: resource.field('target_spot_capacity'),
    },
    emr_instance_group(name, block): {
      local resource = blockType.resource('aws_emr_instance_group', name),
      _: resource._(block, {
        autoscaling_policy: build.template(std.get(block, 'autoscaling_policy', null)),
        bid_price: build.template(std.get(block, 'bid_price', null)),
        cluster_id: build.template(block.cluster_id),
        configurations_json: build.template(std.get(block, 'configurations_json', null)),
        ebs_optimized: build.template(std.get(block, 'ebs_optimized', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_count: build.template(std.get(block, 'instance_count', null)),
        instance_type: build.template(block.instance_type),
        name: build.template(std.get(block, 'name', null)),
        running_instance_count: build.template(std.get(block, 'running_instance_count', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      autoscaling_policy: resource.field('autoscaling_policy'),
      bid_price: resource.field('bid_price'),
      cluster_id: resource.field('cluster_id'),
      configurations_json: resource.field('configurations_json'),
      ebs_optimized: resource.field('ebs_optimized'),
      id: resource.field('id'),
      instance_count: resource.field('instance_count'),
      instance_type: resource.field('instance_type'),
      name: resource.field('name'),
      running_instance_count: resource.field('running_instance_count'),
      status: resource.field('status'),
    },
    emr_managed_scaling_policy(name, block): {
      local resource = blockType.resource('aws_emr_managed_scaling_policy', name),
      _: resource._(block, {
        cluster_id: build.template(block.cluster_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      cluster_id: resource.field('cluster_id'),
      id: resource.field('id'),
    },
    emr_security_configuration(name, block): {
      local resource = blockType.resource('aws_emr_security_configuration', name),
      _: resource._(block, {
        configuration: build.template(block.configuration),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
      }),
      configuration: resource.field('configuration'),
      creation_date: resource.field('creation_date'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
    },
    emr_studio(name, block): {
      local resource = blockType.resource('aws_emr_studio', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auth_mode: build.template(block.auth_mode),
        default_s3_location: build.template(block.default_s3_location),
        description: build.template(std.get(block, 'description', null)),
        engine_security_group_id: build.template(block.engine_security_group_id),
        id: build.template(std.get(block, 'id', null)),
        idp_auth_url: build.template(std.get(block, 'idp_auth_url', null)),
        idp_relay_state_parameter_name: build.template(std.get(block, 'idp_relay_state_parameter_name', null)),
        name: build.template(block.name),
        service_role: build.template(block.service_role),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        url: build.template(std.get(block, 'url', null)),
        user_role: build.template(std.get(block, 'user_role', null)),
        vpc_id: build.template(block.vpc_id),
        workspace_security_group_id: build.template(block.workspace_security_group_id),
      }),
      arn: resource.field('arn'),
      auth_mode: resource.field('auth_mode'),
      default_s3_location: resource.field('default_s3_location'),
      description: resource.field('description'),
      engine_security_group_id: resource.field('engine_security_group_id'),
      id: resource.field('id'),
      idp_auth_url: resource.field('idp_auth_url'),
      idp_relay_state_parameter_name: resource.field('idp_relay_state_parameter_name'),
      name: resource.field('name'),
      service_role: resource.field('service_role'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      url: resource.field('url'),
      user_role: resource.field('user_role'),
      vpc_id: resource.field('vpc_id'),
      workspace_security_group_id: resource.field('workspace_security_group_id'),
    },
    emr_studio_session_mapping(name, block): {
      local resource = blockType.resource('aws_emr_studio_session_mapping', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity_id: build.template(std.get(block, 'identity_id', null)),
        identity_name: build.template(std.get(block, 'identity_name', null)),
        identity_type: build.template(block.identity_type),
        session_policy_arn: build.template(block.session_policy_arn),
        studio_id: build.template(block.studio_id),
      }),
      id: resource.field('id'),
      identity_id: resource.field('identity_id'),
      identity_name: resource.field('identity_name'),
      identity_type: resource.field('identity_type'),
      session_policy_arn: resource.field('session_policy_arn'),
      studio_id: resource.field('studio_id'),
    },
    emrcontainers_job_template(name, block): {
      local resource = blockType.resource('aws_emrcontainers_job_template', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    emrcontainers_virtual_cluster(name, block): {
      local resource = blockType.resource('aws_emrcontainers_virtual_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    emrserverless_application(name, block): {
      local resource = blockType.resource('aws_emrserverless_application', name),
      _: resource._(block, {
        architecture: build.template(std.get(block, 'architecture', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        release_label: build.template(block.release_label),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      architecture: resource.field('architecture'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      release_label: resource.field('release_label'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    evidently_feature(name, block): {
      local resource = blockType.resource('aws_evidently_feature', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        default_variation: build.template(std.get(block, 'default_variation', null)),
        description: build.template(std.get(block, 'description', null)),
        entity_overrides: build.template(std.get(block, 'entity_overrides', null)),
        evaluation_rules: build.template(std.get(block, 'evaluation_rules', null)),
        evaluation_strategy: build.template(std.get(block, 'evaluation_strategy', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        name: build.template(block.name),
        project: build.template(block.project),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        value_type: build.template(std.get(block, 'value_type', null)),
      }),
      arn: resource.field('arn'),
      created_time: resource.field('created_time'),
      default_variation: resource.field('default_variation'),
      description: resource.field('description'),
      entity_overrides: resource.field('entity_overrides'),
      evaluation_rules: resource.field('evaluation_rules'),
      evaluation_strategy: resource.field('evaluation_strategy'),
      id: resource.field('id'),
      last_updated_time: resource.field('last_updated_time'),
      name: resource.field('name'),
      project: resource.field('project'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      value_type: resource.field('value_type'),
    },
    evidently_launch(name, block): {
      local resource = blockType.resource('aws_evidently_launch', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        description: build.template(std.get(block, 'description', null)),
        execution: build.template(std.get(block, 'execution', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        name: build.template(block.name),
        project: build.template(block.project),
        randomization_salt: build.template(std.get(block, 'randomization_salt', null)),
        status: build.template(std.get(block, 'status', null)),
        status_reason: build.template(std.get(block, 'status_reason', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      created_time: resource.field('created_time'),
      description: resource.field('description'),
      execution: resource.field('execution'),
      id: resource.field('id'),
      last_updated_time: resource.field('last_updated_time'),
      name: resource.field('name'),
      project: resource.field('project'),
      randomization_salt: resource.field('randomization_salt'),
      status: resource.field('status'),
      status_reason: resource.field('status_reason'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    evidently_project(name, block): {
      local resource = blockType.resource('aws_evidently_project', name),
      _: resource._(block, {
        active_experiment_count: build.template(std.get(block, 'active_experiment_count', null)),
        active_launch_count: build.template(std.get(block, 'active_launch_count', null)),
        arn: build.template(std.get(block, 'arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        description: build.template(std.get(block, 'description', null)),
        experiment_count: build.template(std.get(block, 'experiment_count', null)),
        feature_count: build.template(std.get(block, 'feature_count', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        launch_count: build.template(std.get(block, 'launch_count', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      active_experiment_count: resource.field('active_experiment_count'),
      active_launch_count: resource.field('active_launch_count'),
      arn: resource.field('arn'),
      created_time: resource.field('created_time'),
      description: resource.field('description'),
      experiment_count: resource.field('experiment_count'),
      feature_count: resource.field('feature_count'),
      id: resource.field('id'),
      last_updated_time: resource.field('last_updated_time'),
      launch_count: resource.field('launch_count'),
      name: resource.field('name'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    evidently_segment(name, block): {
      local resource = blockType.resource('aws_evidently_segment', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        description: build.template(std.get(block, 'description', null)),
        experiment_count: build.template(std.get(block, 'experiment_count', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        launch_count: build.template(std.get(block, 'launch_count', null)),
        name: build.template(block.name),
        pattern: build.template(block.pattern),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_time: resource.field('created_time'),
      description: resource.field('description'),
      experiment_count: resource.field('experiment_count'),
      id: resource.field('id'),
      last_updated_time: resource.field('last_updated_time'),
      launch_count: resource.field('launch_count'),
      name: resource.field('name'),
      pattern: resource.field('pattern'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    finspace_kx_cluster(name, block): {
      local resource = blockType.resource('aws_finspace_kx_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone_id: build.template(std.get(block, 'availability_zone_id', null)),
        az_mode: build.template(block.az_mode),
        command_line_arguments: build.template(std.get(block, 'command_line_arguments', null)),
        created_timestamp: build.template(std.get(block, 'created_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        environment_id: build.template(block.environment_id),
        execution_role: build.template(std.get(block, 'execution_role', null)),
        id: build.template(std.get(block, 'id', null)),
        initialization_script: build.template(std.get(block, 'initialization_script', null)),
        last_modified_timestamp: build.template(std.get(block, 'last_modified_timestamp', null)),
        name: build.template(block.name),
        release_label: build.template(block.release_label),
        status: build.template(std.get(block, 'status', null)),
        status_reason: build.template(std.get(block, 'status_reason', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      availability_zone_id: resource.field('availability_zone_id'),
      az_mode: resource.field('az_mode'),
      command_line_arguments: resource.field('command_line_arguments'),
      created_timestamp: resource.field('created_timestamp'),
      description: resource.field('description'),
      environment_id: resource.field('environment_id'),
      execution_role: resource.field('execution_role'),
      id: resource.field('id'),
      initialization_script: resource.field('initialization_script'),
      last_modified_timestamp: resource.field('last_modified_timestamp'),
      name: resource.field('name'),
      release_label: resource.field('release_label'),
      status: resource.field('status'),
      status_reason: resource.field('status_reason'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    finspace_kx_database(name, block): {
      local resource = blockType.resource('aws_finspace_kx_database', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_timestamp: build.template(std.get(block, 'created_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        environment_id: build.template(block.environment_id),
        id: build.template(std.get(block, 'id', null)),
        last_modified_timestamp: build.template(std.get(block, 'last_modified_timestamp', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_timestamp: resource.field('created_timestamp'),
      description: resource.field('description'),
      environment_id: resource.field('environment_id'),
      id: resource.field('id'),
      last_modified_timestamp: resource.field('last_modified_timestamp'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    finspace_kx_dataview(name, block): {
      local resource = blockType.resource('aws_finspace_kx_dataview', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_update: build.template(block.auto_update),
        availability_zone_id: build.template(std.get(block, 'availability_zone_id', null)),
        az_mode: build.template(block.az_mode),
        changeset_id: build.template(std.get(block, 'changeset_id', null)),
        created_timestamp: build.template(std.get(block, 'created_timestamp', null)),
        database_name: build.template(block.database_name),
        description: build.template(std.get(block, 'description', null)),
        environment_id: build.template(block.environment_id),
        id: build.template(std.get(block, 'id', null)),
        last_modified_timestamp: build.template(std.get(block, 'last_modified_timestamp', null)),
        name: build.template(block.name),
        read_write: build.template(std.get(block, 'read_write', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      auto_update: resource.field('auto_update'),
      availability_zone_id: resource.field('availability_zone_id'),
      az_mode: resource.field('az_mode'),
      changeset_id: resource.field('changeset_id'),
      created_timestamp: resource.field('created_timestamp'),
      database_name: resource.field('database_name'),
      description: resource.field('description'),
      environment_id: resource.field('environment_id'),
      id: resource.field('id'),
      last_modified_timestamp: resource.field('last_modified_timestamp'),
      name: resource.field('name'),
      read_write: resource.field('read_write'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    finspace_kx_environment(name, block): {
      local resource = blockType.resource('aws_finspace_kx_environment', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        created_timestamp: build.template(std.get(block, 'created_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        infrastructure_account_id: build.template(std.get(block, 'infrastructure_account_id', null)),
        kms_key_id: build.template(block.kms_key_id),
        last_modified_timestamp: build.template(std.get(block, 'last_modified_timestamp', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      availability_zones: resource.field('availability_zones'),
      created_timestamp: resource.field('created_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      infrastructure_account_id: resource.field('infrastructure_account_id'),
      kms_key_id: resource.field('kms_key_id'),
      last_modified_timestamp: resource.field('last_modified_timestamp'),
      name: resource.field('name'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    finspace_kx_scaling_group(name, block): {
      local resource = blockType.resource('aws_finspace_kx_scaling_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone_id: build.template(block.availability_zone_id),
        clusters: build.template(std.get(block, 'clusters', null)),
        created_timestamp: build.template(std.get(block, 'created_timestamp', null)),
        environment_id: build.template(block.environment_id),
        host_type: build.template(block.host_type),
        id: build.template(std.get(block, 'id', null)),
        last_modified_timestamp: build.template(std.get(block, 'last_modified_timestamp', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        status_reason: build.template(std.get(block, 'status_reason', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      availability_zone_id: resource.field('availability_zone_id'),
      clusters: resource.field('clusters'),
      created_timestamp: resource.field('created_timestamp'),
      environment_id: resource.field('environment_id'),
      host_type: resource.field('host_type'),
      id: resource.field('id'),
      last_modified_timestamp: resource.field('last_modified_timestamp'),
      name: resource.field('name'),
      status: resource.field('status'),
      status_reason: resource.field('status_reason'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    finspace_kx_user(name, block): {
      local resource = blockType.resource('aws_finspace_kx_user', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        environment_id: build.template(block.environment_id),
        iam_role: build.template(block.iam_role),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      environment_id: resource.field('environment_id'),
      iam_role: resource.field('iam_role'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    finspace_kx_volume(name, block): {
      local resource = blockType.resource('aws_finspace_kx_volume', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attached_clusters: build.template(std.get(block, 'attached_clusters', null)),
        availability_zones: build.template(block.availability_zones),
        az_mode: build.template(block.az_mode),
        created_timestamp: build.template(std.get(block, 'created_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        environment_id: build.template(block.environment_id),
        id: build.template(std.get(block, 'id', null)),
        last_modified_timestamp: build.template(std.get(block, 'last_modified_timestamp', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        status_reason: build.template(std.get(block, 'status_reason', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      attached_clusters: resource.field('attached_clusters'),
      availability_zones: resource.field('availability_zones'),
      az_mode: resource.field('az_mode'),
      created_timestamp: resource.field('created_timestamp'),
      description: resource.field('description'),
      environment_id: resource.field('environment_id'),
      id: resource.field('id'),
      last_modified_timestamp: resource.field('last_modified_timestamp'),
      name: resource.field('name'),
      status: resource.field('status'),
      status_reason: resource.field('status_reason'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    fis_experiment_template(name, block): {
      local resource = blockType.resource('aws_fis_experiment_template', name),
      _: resource._(block, {
        description: build.template(block.description),
        id: build.template(std.get(block, 'id', null)),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    flow_log(name, block): {
      local resource = blockType.resource('aws_flow_log', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        deliver_cross_account_role: build.template(std.get(block, 'deliver_cross_account_role', null)),
        eni_id: build.template(std.get(block, 'eni_id', null)),
        iam_role_arn: build.template(std.get(block, 'iam_role_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        log_destination: build.template(std.get(block, 'log_destination', null)),
        log_destination_type: build.template(std.get(block, 'log_destination_type', null)),
        log_format: build.template(std.get(block, 'log_format', null)),
        log_group_name: build.template(std.get(block, 'log_group_name', null)),
        max_aggregation_interval: build.template(std.get(block, 'max_aggregation_interval', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        traffic_type: build.template(std.get(block, 'traffic_type', null)),
        transit_gateway_attachment_id: build.template(std.get(block, 'transit_gateway_attachment_id', null)),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      deliver_cross_account_role: resource.field('deliver_cross_account_role'),
      eni_id: resource.field('eni_id'),
      iam_role_arn: resource.field('iam_role_arn'),
      id: resource.field('id'),
      log_destination: resource.field('log_destination'),
      log_destination_type: resource.field('log_destination_type'),
      log_format: resource.field('log_format'),
      log_group_name: resource.field('log_group_name'),
      max_aggregation_interval: resource.field('max_aggregation_interval'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      traffic_type: resource.field('traffic_type'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      vpc_id: resource.field('vpc_id'),
    },
    fms_admin_account(name, block): {
      local resource = blockType.resource('aws_fms_admin_account', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      account_id: resource.field('account_id'),
      id: resource.field('id'),
    },
    fms_policy(name, block): {
      local resource = blockType.resource('aws_fms_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        delete_all_policy_resources: build.template(std.get(block, 'delete_all_policy_resources', null)),
        delete_unused_fm_managed_resources: build.template(std.get(block, 'delete_unused_fm_managed_resources', null)),
        description: build.template(std.get(block, 'description', null)),
        exclude_resource_tags: build.template(block.exclude_resource_tags),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_update_token: build.template(std.get(block, 'policy_update_token', null)),
        remediation_enabled: build.template(std.get(block, 'remediation_enabled', null)),
        resource_set_ids: build.template(std.get(block, 'resource_set_ids', null)),
        resource_tags: build.template(std.get(block, 'resource_tags', null)),
        resource_type: build.template(std.get(block, 'resource_type', null)),
        resource_type_list: build.template(std.get(block, 'resource_type_list', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      delete_all_policy_resources: resource.field('delete_all_policy_resources'),
      delete_unused_fm_managed_resources: resource.field('delete_unused_fm_managed_resources'),
      description: resource.field('description'),
      exclude_resource_tags: resource.field('exclude_resource_tags'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_update_token: resource.field('policy_update_token'),
      remediation_enabled: resource.field('remediation_enabled'),
      resource_set_ids: resource.field('resource_set_ids'),
      resource_tags: resource.field('resource_tags'),
      resource_type: resource.field('resource_type'),
      resource_type_list: resource.field('resource_type_list'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    fms_resource_set(name, block): {
      local resource = blockType.resource('aws_fms_resource_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    fsx_backup(name, block): {
      local resource = blockType.resource('aws_fsx_backup', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        file_system_id: build.template(std.get(block, 'file_system_id', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
        volume_id: build.template(std.get(block, 'volume_id', null)),
      }),
      arn: resource.field('arn'),
      file_system_id: resource.field('file_system_id'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      volume_id: resource.field('volume_id'),
    },
    fsx_data_repository_association(name, block): {
      local resource = blockType.resource('aws_fsx_data_repository_association', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        association_id: build.template(std.get(block, 'association_id', null)),
        batch_import_meta_data_on_create: build.template(std.get(block, 'batch_import_meta_data_on_create', null)),
        data_repository_path: build.template(block.data_repository_path),
        delete_data_in_filesystem: build.template(std.get(block, 'delete_data_in_filesystem', null)),
        file_system_id: build.template(block.file_system_id),
        file_system_path: build.template(block.file_system_path),
        id: build.template(std.get(block, 'id', null)),
        imported_file_chunk_size: build.template(std.get(block, 'imported_file_chunk_size', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      association_id: resource.field('association_id'),
      batch_import_meta_data_on_create: resource.field('batch_import_meta_data_on_create'),
      data_repository_path: resource.field('data_repository_path'),
      delete_data_in_filesystem: resource.field('delete_data_in_filesystem'),
      file_system_id: resource.field('file_system_id'),
      file_system_path: resource.field('file_system_path'),
      id: resource.field('id'),
      imported_file_chunk_size: resource.field('imported_file_chunk_size'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    fsx_file_cache(name, block): {
      local resource = blockType.resource('aws_fsx_file_cache', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        copy_tags_to_data_repository_associations: build.template(std.get(block, 'copy_tags_to_data_repository_associations', null)),
        data_repository_association_ids: build.template(std.get(block, 'data_repository_association_ids', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        file_cache_id: build.template(std.get(block, 'file_cache_id', null)),
        file_cache_type: build.template(block.file_cache_type),
        file_cache_type_version: build.template(block.file_cache_type_version),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        network_interface_ids: build.template(std.get(block, 'network_interface_ids', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        storage_capacity: build.template(block.storage_capacity),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      copy_tags_to_data_repository_associations: resource.field('copy_tags_to_data_repository_associations'),
      data_repository_association_ids: resource.field('data_repository_association_ids'),
      dns_name: resource.field('dns_name'),
      file_cache_id: resource.field('file_cache_id'),
      file_cache_type: resource.field('file_cache_type'),
      file_cache_type_version: resource.field('file_cache_type_version'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      network_interface_ids: resource.field('network_interface_ids'),
      owner_id: resource.field('owner_id'),
      security_group_ids: resource.field('security_group_ids'),
      storage_capacity: resource.field('storage_capacity'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    fsx_lustre_file_system(name, block): {
      local resource = blockType.resource('aws_fsx_lustre_file_system', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_import_policy: build.template(std.get(block, 'auto_import_policy', null)),
        automatic_backup_retention_days: build.template(std.get(block, 'automatic_backup_retention_days', null)),
        backup_id: build.template(std.get(block, 'backup_id', null)),
        copy_tags_to_backups: build.template(std.get(block, 'copy_tags_to_backups', null)),
        daily_automatic_backup_start_time: build.template(std.get(block, 'daily_automatic_backup_start_time', null)),
        data_compression_type: build.template(std.get(block, 'data_compression_type', null)),
        deployment_type: build.template(std.get(block, 'deployment_type', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        drive_cache_type: build.template(std.get(block, 'drive_cache_type', null)),
        export_path: build.template(std.get(block, 'export_path', null)),
        file_system_type_version: build.template(std.get(block, 'file_system_type_version', null)),
        final_backup_tags: build.template(std.get(block, 'final_backup_tags', null)),
        id: build.template(std.get(block, 'id', null)),
        import_path: build.template(std.get(block, 'import_path', null)),
        imported_file_chunk_size: build.template(std.get(block, 'imported_file_chunk_size', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        mount_name: build.template(std.get(block, 'mount_name', null)),
        network_interface_ids: build.template(std.get(block, 'network_interface_ids', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        per_unit_storage_throughput: build.template(std.get(block, 'per_unit_storage_throughput', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        skip_final_backup: build.template(std.get(block, 'skip_final_backup', null)),
        storage_capacity: build.template(std.get(block, 'storage_capacity', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        weekly_maintenance_start_time: build.template(std.get(block, 'weekly_maintenance_start_time', null)),
      }),
      arn: resource.field('arn'),
      auto_import_policy: resource.field('auto_import_policy'),
      automatic_backup_retention_days: resource.field('automatic_backup_retention_days'),
      backup_id: resource.field('backup_id'),
      copy_tags_to_backups: resource.field('copy_tags_to_backups'),
      daily_automatic_backup_start_time: resource.field('daily_automatic_backup_start_time'),
      data_compression_type: resource.field('data_compression_type'),
      deployment_type: resource.field('deployment_type'),
      dns_name: resource.field('dns_name'),
      drive_cache_type: resource.field('drive_cache_type'),
      export_path: resource.field('export_path'),
      file_system_type_version: resource.field('file_system_type_version'),
      final_backup_tags: resource.field('final_backup_tags'),
      id: resource.field('id'),
      import_path: resource.field('import_path'),
      imported_file_chunk_size: resource.field('imported_file_chunk_size'),
      kms_key_id: resource.field('kms_key_id'),
      mount_name: resource.field('mount_name'),
      network_interface_ids: resource.field('network_interface_ids'),
      owner_id: resource.field('owner_id'),
      per_unit_storage_throughput: resource.field('per_unit_storage_throughput'),
      security_group_ids: resource.field('security_group_ids'),
      skip_final_backup: resource.field('skip_final_backup'),
      storage_capacity: resource.field('storage_capacity'),
      storage_type: resource.field('storage_type'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
      weekly_maintenance_start_time: resource.field('weekly_maintenance_start_time'),
    },
    fsx_ontap_file_system(name, block): {
      local resource = blockType.resource('aws_fsx_ontap_file_system', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        automatic_backup_retention_days: build.template(std.get(block, 'automatic_backup_retention_days', null)),
        daily_automatic_backup_start_time: build.template(std.get(block, 'daily_automatic_backup_start_time', null)),
        deployment_type: build.template(block.deployment_type),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        endpoint_ip_address_range: build.template(std.get(block, 'endpoint_ip_address_range', null)),
        endpoints: build.template(std.get(block, 'endpoints', null)),
        fsx_admin_password: build.template(std.get(block, 'fsx_admin_password', null)),
        ha_pairs: build.template(std.get(block, 'ha_pairs', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        network_interface_ids: build.template(std.get(block, 'network_interface_ids', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        preferred_subnet_id: build.template(block.preferred_subnet_id),
        route_table_ids: build.template(std.get(block, 'route_table_ids', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        storage_capacity: build.template(block.storage_capacity),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        throughput_capacity: build.template(std.get(block, 'throughput_capacity', null)),
        throughput_capacity_per_ha_pair: build.template(std.get(block, 'throughput_capacity_per_ha_pair', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        weekly_maintenance_start_time: build.template(std.get(block, 'weekly_maintenance_start_time', null)),
      }),
      arn: resource.field('arn'),
      automatic_backup_retention_days: resource.field('automatic_backup_retention_days'),
      daily_automatic_backup_start_time: resource.field('daily_automatic_backup_start_time'),
      deployment_type: resource.field('deployment_type'),
      dns_name: resource.field('dns_name'),
      endpoint_ip_address_range: resource.field('endpoint_ip_address_range'),
      endpoints: resource.field('endpoints'),
      fsx_admin_password: resource.field('fsx_admin_password'),
      ha_pairs: resource.field('ha_pairs'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      network_interface_ids: resource.field('network_interface_ids'),
      owner_id: resource.field('owner_id'),
      preferred_subnet_id: resource.field('preferred_subnet_id'),
      route_table_ids: resource.field('route_table_ids'),
      security_group_ids: resource.field('security_group_ids'),
      storage_capacity: resource.field('storage_capacity'),
      storage_type: resource.field('storage_type'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      throughput_capacity: resource.field('throughput_capacity'),
      throughput_capacity_per_ha_pair: resource.field('throughput_capacity_per_ha_pair'),
      vpc_id: resource.field('vpc_id'),
      weekly_maintenance_start_time: resource.field('weekly_maintenance_start_time'),
    },
    fsx_ontap_storage_virtual_machine(name, block): {
      local resource = blockType.resource('aws_fsx_ontap_storage_virtual_machine', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        endpoints: build.template(std.get(block, 'endpoints', null)),
        file_system_id: build.template(block.file_system_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        root_volume_security_style: build.template(std.get(block, 'root_volume_security_style', null)),
        subtype: build.template(std.get(block, 'subtype', null)),
        svm_admin_password: build.template(std.get(block, 'svm_admin_password', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uuid: build.template(std.get(block, 'uuid', null)),
      }),
      arn: resource.field('arn'),
      endpoints: resource.field('endpoints'),
      file_system_id: resource.field('file_system_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      root_volume_security_style: resource.field('root_volume_security_style'),
      subtype: resource.field('subtype'),
      svm_admin_password: resource.field('svm_admin_password'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uuid: resource.field('uuid'),
    },
    fsx_ontap_volume(name, block): {
      local resource = blockType.resource('aws_fsx_ontap_volume', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bypass_snaplock_enterprise_retention: build.template(std.get(block, 'bypass_snaplock_enterprise_retention', null)),
        copy_tags_to_backups: build.template(std.get(block, 'copy_tags_to_backups', null)),
        file_system_id: build.template(std.get(block, 'file_system_id', null)),
        final_backup_tags: build.template(std.get(block, 'final_backup_tags', null)),
        flexcache_endpoint_type: build.template(std.get(block, 'flexcache_endpoint_type', null)),
        id: build.template(std.get(block, 'id', null)),
        junction_path: build.template(std.get(block, 'junction_path', null)),
        name: build.template(block.name),
        ontap_volume_type: build.template(std.get(block, 'ontap_volume_type', null)),
        security_style: build.template(std.get(block, 'security_style', null)),
        size_in_bytes: build.template(std.get(block, 'size_in_bytes', null)),
        size_in_megabytes: build.template(std.get(block, 'size_in_megabytes', null)),
        skip_final_backup: build.template(std.get(block, 'skip_final_backup', null)),
        snapshot_policy: build.template(std.get(block, 'snapshot_policy', null)),
        storage_efficiency_enabled: build.template(std.get(block, 'storage_efficiency_enabled', null)),
        storage_virtual_machine_id: build.template(block.storage_virtual_machine_id),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        uuid: build.template(std.get(block, 'uuid', null)),
        volume_style: build.template(std.get(block, 'volume_style', null)),
        volume_type: build.template(std.get(block, 'volume_type', null)),
      }),
      arn: resource.field('arn'),
      bypass_snaplock_enterprise_retention: resource.field('bypass_snaplock_enterprise_retention'),
      copy_tags_to_backups: resource.field('copy_tags_to_backups'),
      file_system_id: resource.field('file_system_id'),
      final_backup_tags: resource.field('final_backup_tags'),
      flexcache_endpoint_type: resource.field('flexcache_endpoint_type'),
      id: resource.field('id'),
      junction_path: resource.field('junction_path'),
      name: resource.field('name'),
      ontap_volume_type: resource.field('ontap_volume_type'),
      security_style: resource.field('security_style'),
      size_in_bytes: resource.field('size_in_bytes'),
      size_in_megabytes: resource.field('size_in_megabytes'),
      skip_final_backup: resource.field('skip_final_backup'),
      snapshot_policy: resource.field('snapshot_policy'),
      storage_efficiency_enabled: resource.field('storage_efficiency_enabled'),
      storage_virtual_machine_id: resource.field('storage_virtual_machine_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      uuid: resource.field('uuid'),
      volume_style: resource.field('volume_style'),
      volume_type: resource.field('volume_type'),
    },
    fsx_openzfs_file_system(name, block): {
      local resource = blockType.resource('aws_fsx_openzfs_file_system', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        automatic_backup_retention_days: build.template(std.get(block, 'automatic_backup_retention_days', null)),
        backup_id: build.template(std.get(block, 'backup_id', null)),
        copy_tags_to_backups: build.template(std.get(block, 'copy_tags_to_backups', null)),
        copy_tags_to_volumes: build.template(std.get(block, 'copy_tags_to_volumes', null)),
        daily_automatic_backup_start_time: build.template(std.get(block, 'daily_automatic_backup_start_time', null)),
        delete_options: build.template(std.get(block, 'delete_options', null)),
        deployment_type: build.template(block.deployment_type),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        endpoint_ip_address: build.template(std.get(block, 'endpoint_ip_address', null)),
        endpoint_ip_address_range: build.template(std.get(block, 'endpoint_ip_address_range', null)),
        final_backup_tags: build.template(std.get(block, 'final_backup_tags', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        network_interface_ids: build.template(std.get(block, 'network_interface_ids', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        preferred_subnet_id: build.template(std.get(block, 'preferred_subnet_id', null)),
        root_volume_id: build.template(std.get(block, 'root_volume_id', null)),
        route_table_ids: build.template(std.get(block, 'route_table_ids', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        skip_final_backup: build.template(std.get(block, 'skip_final_backup', null)),
        storage_capacity: build.template(std.get(block, 'storage_capacity', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        throughput_capacity: build.template(block.throughput_capacity),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        weekly_maintenance_start_time: build.template(std.get(block, 'weekly_maintenance_start_time', null)),
      }),
      arn: resource.field('arn'),
      automatic_backup_retention_days: resource.field('automatic_backup_retention_days'),
      backup_id: resource.field('backup_id'),
      copy_tags_to_backups: resource.field('copy_tags_to_backups'),
      copy_tags_to_volumes: resource.field('copy_tags_to_volumes'),
      daily_automatic_backup_start_time: resource.field('daily_automatic_backup_start_time'),
      delete_options: resource.field('delete_options'),
      deployment_type: resource.field('deployment_type'),
      dns_name: resource.field('dns_name'),
      endpoint_ip_address: resource.field('endpoint_ip_address'),
      endpoint_ip_address_range: resource.field('endpoint_ip_address_range'),
      final_backup_tags: resource.field('final_backup_tags'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      network_interface_ids: resource.field('network_interface_ids'),
      owner_id: resource.field('owner_id'),
      preferred_subnet_id: resource.field('preferred_subnet_id'),
      root_volume_id: resource.field('root_volume_id'),
      route_table_ids: resource.field('route_table_ids'),
      security_group_ids: resource.field('security_group_ids'),
      skip_final_backup: resource.field('skip_final_backup'),
      storage_capacity: resource.field('storage_capacity'),
      storage_type: resource.field('storage_type'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      throughput_capacity: resource.field('throughput_capacity'),
      vpc_id: resource.field('vpc_id'),
      weekly_maintenance_start_time: resource.field('weekly_maintenance_start_time'),
    },
    fsx_openzfs_snapshot(name, block): {
      local resource = blockType.resource('aws_fsx_openzfs_snapshot', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        volume_id: build.template(block.volume_id),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      volume_id: resource.field('volume_id'),
    },
    fsx_openzfs_volume(name, block): {
      local resource = blockType.resource('aws_fsx_openzfs_volume', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        copy_tags_to_snapshots: build.template(std.get(block, 'copy_tags_to_snapshots', null)),
        data_compression_type: build.template(std.get(block, 'data_compression_type', null)),
        delete_volume_options: build.template(std.get(block, 'delete_volume_options', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parent_volume_id: build.template(block.parent_volume_id),
        read_only: build.template(std.get(block, 'read_only', null)),
        record_size_kib: build.template(std.get(block, 'record_size_kib', null)),
        storage_capacity_quota_gib: build.template(std.get(block, 'storage_capacity_quota_gib', null)),
        storage_capacity_reservation_gib: build.template(std.get(block, 'storage_capacity_reservation_gib', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        volume_type: build.template(std.get(block, 'volume_type', null)),
      }),
      arn: resource.field('arn'),
      copy_tags_to_snapshots: resource.field('copy_tags_to_snapshots'),
      data_compression_type: resource.field('data_compression_type'),
      delete_volume_options: resource.field('delete_volume_options'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent_volume_id: resource.field('parent_volume_id'),
      read_only: resource.field('read_only'),
      record_size_kib: resource.field('record_size_kib'),
      storage_capacity_quota_gib: resource.field('storage_capacity_quota_gib'),
      storage_capacity_reservation_gib: resource.field('storage_capacity_reservation_gib'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      volume_type: resource.field('volume_type'),
    },
    fsx_windows_file_system(name, block): {
      local resource = blockType.resource('aws_fsx_windows_file_system', name),
      _: resource._(block, {
        active_directory_id: build.template(std.get(block, 'active_directory_id', null)),
        aliases: build.template(std.get(block, 'aliases', null)),
        arn: build.template(std.get(block, 'arn', null)),
        automatic_backup_retention_days: build.template(std.get(block, 'automatic_backup_retention_days', null)),
        backup_id: build.template(std.get(block, 'backup_id', null)),
        copy_tags_to_backups: build.template(std.get(block, 'copy_tags_to_backups', null)),
        daily_automatic_backup_start_time: build.template(std.get(block, 'daily_automatic_backup_start_time', null)),
        deployment_type: build.template(std.get(block, 'deployment_type', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        final_backup_tags: build.template(std.get(block, 'final_backup_tags', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        network_interface_ids: build.template(std.get(block, 'network_interface_ids', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        preferred_file_server_ip: build.template(std.get(block, 'preferred_file_server_ip', null)),
        preferred_subnet_id: build.template(std.get(block, 'preferred_subnet_id', null)),
        remote_administration_endpoint: build.template(std.get(block, 'remote_administration_endpoint', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        skip_final_backup: build.template(std.get(block, 'skip_final_backup', null)),
        storage_capacity: build.template(std.get(block, 'storage_capacity', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        throughput_capacity: build.template(block.throughput_capacity),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        weekly_maintenance_start_time: build.template(std.get(block, 'weekly_maintenance_start_time', null)),
      }),
      active_directory_id: resource.field('active_directory_id'),
      aliases: resource.field('aliases'),
      arn: resource.field('arn'),
      automatic_backup_retention_days: resource.field('automatic_backup_retention_days'),
      backup_id: resource.field('backup_id'),
      copy_tags_to_backups: resource.field('copy_tags_to_backups'),
      daily_automatic_backup_start_time: resource.field('daily_automatic_backup_start_time'),
      deployment_type: resource.field('deployment_type'),
      dns_name: resource.field('dns_name'),
      final_backup_tags: resource.field('final_backup_tags'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      network_interface_ids: resource.field('network_interface_ids'),
      owner_id: resource.field('owner_id'),
      preferred_file_server_ip: resource.field('preferred_file_server_ip'),
      preferred_subnet_id: resource.field('preferred_subnet_id'),
      remote_administration_endpoint: resource.field('remote_administration_endpoint'),
      security_group_ids: resource.field('security_group_ids'),
      skip_final_backup: resource.field('skip_final_backup'),
      storage_capacity: resource.field('storage_capacity'),
      storage_type: resource.field('storage_type'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      throughput_capacity: resource.field('throughput_capacity'),
      vpc_id: resource.field('vpc_id'),
      weekly_maintenance_start_time: resource.field('weekly_maintenance_start_time'),
    },
    gamelift_alias(name, block): {
      local resource = blockType.resource('aws_gamelift_alias', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    gamelift_build(name, block): {
      local resource = blockType.resource('aws_gamelift_build', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        operating_system: build.template(block.operating_system),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      operating_system: resource.field('operating_system'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    gamelift_fleet(name, block): {
      local resource = blockType.resource('aws_gamelift_fleet', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        build_arn: build.template(std.get(block, 'build_arn', null)),
        build_id: build.template(std.get(block, 'build_id', null)),
        description: build.template(std.get(block, 'description', null)),
        ec2_instance_type: build.template(block.ec2_instance_type),
        fleet_type: build.template(std.get(block, 'fleet_type', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_role_arn: build.template(std.get(block, 'instance_role_arn', null)),
        log_paths: build.template(std.get(block, 'log_paths', null)),
        metric_groups: build.template(std.get(block, 'metric_groups', null)),
        name: build.template(block.name),
        new_game_session_protection_policy: build.template(std.get(block, 'new_game_session_protection_policy', null)),
        operating_system: build.template(std.get(block, 'operating_system', null)),
        script_arn: build.template(std.get(block, 'script_arn', null)),
        script_id: build.template(std.get(block, 'script_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      build_arn: resource.field('build_arn'),
      build_id: resource.field('build_id'),
      description: resource.field('description'),
      ec2_instance_type: resource.field('ec2_instance_type'),
      fleet_type: resource.field('fleet_type'),
      id: resource.field('id'),
      instance_role_arn: resource.field('instance_role_arn'),
      log_paths: resource.field('log_paths'),
      metric_groups: resource.field('metric_groups'),
      name: resource.field('name'),
      new_game_session_protection_policy: resource.field('new_game_session_protection_policy'),
      operating_system: resource.field('operating_system'),
      script_arn: resource.field('script_arn'),
      script_id: resource.field('script_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    gamelift_game_server_group(name, block): {
      local resource = blockType.resource('aws_gamelift_game_server_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_scaling_group_arn: build.template(std.get(block, 'auto_scaling_group_arn', null)),
        balancing_strategy: build.template(std.get(block, 'balancing_strategy', null)),
        game_server_group_name: build.template(block.game_server_group_name),
        game_server_protection_policy: build.template(std.get(block, 'game_server_protection_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        max_size: build.template(block.max_size),
        min_size: build.template(block.min_size),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_subnets: build.template(std.get(block, 'vpc_subnets', null)),
      }),
      arn: resource.field('arn'),
      auto_scaling_group_arn: resource.field('auto_scaling_group_arn'),
      balancing_strategy: resource.field('balancing_strategy'),
      game_server_group_name: resource.field('game_server_group_name'),
      game_server_protection_policy: resource.field('game_server_protection_policy'),
      id: resource.field('id'),
      max_size: resource.field('max_size'),
      min_size: resource.field('min_size'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_subnets: resource.field('vpc_subnets'),
    },
    gamelift_game_session_queue(name, block): {
      local resource = blockType.resource('aws_gamelift_game_session_queue', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        custom_event_data: build.template(std.get(block, 'custom_event_data', null)),
        destinations: build.template(std.get(block, 'destinations', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        notification_target: build.template(std.get(block, 'notification_target', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        timeout_in_seconds: build.template(std.get(block, 'timeout_in_seconds', null)),
      }),
      arn: resource.field('arn'),
      custom_event_data: resource.field('custom_event_data'),
      destinations: resource.field('destinations'),
      id: resource.field('id'),
      name: resource.field('name'),
      notification_target: resource.field('notification_target'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      timeout_in_seconds: resource.field('timeout_in_seconds'),
    },
    gamelift_script(name, block): {
      local resource = blockType.resource('aws_gamelift_script', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
        zip_file: build.template(std.get(block, 'zip_file', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
      zip_file: resource.field('zip_file'),
    },
    glacier_vault(name, block): {
      local resource = blockType.resource('aws_glacier_vault', name),
      _: resource._(block, {
        access_policy: build.template(std.get(block, 'access_policy', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      access_policy: resource.field('access_policy'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    glacier_vault_lock(name, block): {
      local resource = blockType.resource('aws_glacier_vault_lock', name),
      _: resource._(block, {
        complete_lock: build.template(block.complete_lock),
        id: build.template(std.get(block, 'id', null)),
        ignore_deletion_error: build.template(std.get(block, 'ignore_deletion_error', null)),
        policy: build.template(block.policy),
        vault_name: build.template(block.vault_name),
      }),
      complete_lock: resource.field('complete_lock'),
      id: resource.field('id'),
      ignore_deletion_error: resource.field('ignore_deletion_error'),
      policy: resource.field('policy'),
      vault_name: resource.field('vault_name'),
    },
    globalaccelerator_accelerator(name, block): {
      local resource = blockType.resource('aws_globalaccelerator_accelerator', name),
      _: resource._(block, {
        dns_name: build.template(std.get(block, 'dns_name', null)),
        dual_stack_dns_name: build.template(std.get(block, 'dual_stack_dns_name', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        ip_addresses: build.template(std.get(block, 'ip_addresses', null)),
        ip_sets: build.template(std.get(block, 'ip_sets', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      dns_name: resource.field('dns_name'),
      dual_stack_dns_name: resource.field('dual_stack_dns_name'),
      enabled: resource.field('enabled'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      id: resource.field('id'),
      ip_address_type: resource.field('ip_address_type'),
      ip_addresses: resource.field('ip_addresses'),
      ip_sets: resource.field('ip_sets'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    globalaccelerator_cross_account_attachment(name, block): {
      local resource = blockType.resource('aws_globalaccelerator_cross_account_attachment', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified_time: build.template(std.get(block, 'last_modified_time', null)),
        name: build.template(block.name),
        principals: build.template(std.get(block, 'principals', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_time: resource.field('created_time'),
      id: resource.field('id'),
      last_modified_time: resource.field('last_modified_time'),
      name: resource.field('name'),
      principals: resource.field('principals'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    globalaccelerator_custom_routing_accelerator(name, block): {
      local resource = blockType.resource('aws_globalaccelerator_custom_routing_accelerator', name),
      _: resource._(block, {
        dns_name: build.template(std.get(block, 'dns_name', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        ip_addresses: build.template(std.get(block, 'ip_addresses', null)),
        ip_sets: build.template(std.get(block, 'ip_sets', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      dns_name: resource.field('dns_name'),
      enabled: resource.field('enabled'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      id: resource.field('id'),
      ip_address_type: resource.field('ip_address_type'),
      ip_addresses: resource.field('ip_addresses'),
      ip_sets: resource.field('ip_sets'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    globalaccelerator_custom_routing_endpoint_group(name, block): {
      local resource = blockType.resource('aws_globalaccelerator_custom_routing_endpoint_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        endpoint_group_region: build.template(std.get(block, 'endpoint_group_region', null)),
        id: build.template(std.get(block, 'id', null)),
        listener_arn: build.template(block.listener_arn),
      }),
      arn: resource.field('arn'),
      endpoint_group_region: resource.field('endpoint_group_region'),
      id: resource.field('id'),
      listener_arn: resource.field('listener_arn'),
    },
    globalaccelerator_custom_routing_listener(name, block): {
      local resource = blockType.resource('aws_globalaccelerator_custom_routing_listener', name),
      _: resource._(block, {
        accelerator_arn: build.template(block.accelerator_arn),
        id: build.template(std.get(block, 'id', null)),
      }),
      accelerator_arn: resource.field('accelerator_arn'),
      id: resource.field('id'),
    },
    globalaccelerator_endpoint_group(name, block): {
      local resource = blockType.resource('aws_globalaccelerator_endpoint_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        endpoint_group_region: build.template(std.get(block, 'endpoint_group_region', null)),
        health_check_interval_seconds: build.template(std.get(block, 'health_check_interval_seconds', null)),
        health_check_path: build.template(std.get(block, 'health_check_path', null)),
        health_check_port: build.template(std.get(block, 'health_check_port', null)),
        health_check_protocol: build.template(std.get(block, 'health_check_protocol', null)),
        id: build.template(std.get(block, 'id', null)),
        listener_arn: build.template(block.listener_arn),
        threshold_count: build.template(std.get(block, 'threshold_count', null)),
        traffic_dial_percentage: build.template(std.get(block, 'traffic_dial_percentage', null)),
      }),
      arn: resource.field('arn'),
      endpoint_group_region: resource.field('endpoint_group_region'),
      health_check_interval_seconds: resource.field('health_check_interval_seconds'),
      health_check_path: resource.field('health_check_path'),
      health_check_port: resource.field('health_check_port'),
      health_check_protocol: resource.field('health_check_protocol'),
      id: resource.field('id'),
      listener_arn: resource.field('listener_arn'),
      threshold_count: resource.field('threshold_count'),
      traffic_dial_percentage: resource.field('traffic_dial_percentage'),
    },
    globalaccelerator_listener(name, block): {
      local resource = blockType.resource('aws_globalaccelerator_listener', name),
      _: resource._(block, {
        accelerator_arn: build.template(block.accelerator_arn),
        client_affinity: build.template(std.get(block, 'client_affinity', null)),
        id: build.template(std.get(block, 'id', null)),
        protocol: build.template(block.protocol),
      }),
      accelerator_arn: resource.field('accelerator_arn'),
      client_affinity: resource.field('client_affinity'),
      id: resource.field('id'),
      protocol: resource.field('protocol'),
    },
    glue_catalog_database(name, block): {
      local resource = blockType.resource('aws_glue_catalog_database', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location_uri: build.template(std.get(block, 'location_uri', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      catalog_id: resource.field('catalog_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      location_uri: resource.field('location_uri'),
      name: resource.field('name'),
      parameters: resource.field('parameters'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    glue_catalog_table(name, block): {
      local resource = blockType.resource('aws_glue_catalog_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        database_name: build.template(block.database_name),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner: build.template(std.get(block, 'owner', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        retention: build.template(std.get(block, 'retention', null)),
        table_type: build.template(std.get(block, 'table_type', null)),
        view_expanded_text: build.template(std.get(block, 'view_expanded_text', null)),
        view_original_text: build.template(std.get(block, 'view_original_text', null)),
      }),
      arn: resource.field('arn'),
      catalog_id: resource.field('catalog_id'),
      database_name: resource.field('database_name'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      parameters: resource.field('parameters'),
      retention: resource.field('retention'),
      table_type: resource.field('table_type'),
      view_expanded_text: resource.field('view_expanded_text'),
      view_original_text: resource.field('view_original_text'),
    },
    glue_catalog_table_optimizer(name, block): {
      local resource = blockType.resource('aws_glue_catalog_table_optimizer', name),
      _: resource._(block, {
        catalog_id: build.template(block.catalog_id),
        database_name: build.template(block.database_name),
        table_name: build.template(block.table_name),
        type: build.template(block.type),
      }),
      catalog_id: resource.field('catalog_id'),
      database_name: resource.field('database_name'),
      table_name: resource.field('table_name'),
      type: resource.field('type'),
    },
    glue_classifier(name, block): {
      local resource = blockType.resource('aws_glue_classifier', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    glue_connection(name, block): {
      local resource = blockType.resource('aws_glue_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        connection_properties: build.template(std.get(block, 'connection_properties', null)),
        connection_type: build.template(std.get(block, 'connection_type', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        match_criteria: build.template(std.get(block, 'match_criteria', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      catalog_id: resource.field('catalog_id'),
      connection_properties: resource.field('connection_properties'),
      connection_type: resource.field('connection_type'),
      description: resource.field('description'),
      id: resource.field('id'),
      match_criteria: resource.field('match_criteria'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    glue_crawler(name, block): {
      local resource = blockType.resource('aws_glue_crawler', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        classifiers: build.template(std.get(block, 'classifiers', null)),
        configuration: build.template(std.get(block, 'configuration', null)),
        database_name: build.template(block.database_name),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        role: build.template(block.role),
        schedule: build.template(std.get(block, 'schedule', null)),
        security_configuration: build.template(std.get(block, 'security_configuration', null)),
        table_prefix: build.template(std.get(block, 'table_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      classifiers: resource.field('classifiers'),
      configuration: resource.field('configuration'),
      database_name: resource.field('database_name'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      role: resource.field('role'),
      schedule: resource.field('schedule'),
      security_configuration: resource.field('security_configuration'),
      table_prefix: resource.field('table_prefix'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    glue_data_catalog_encryption_settings(name, block): {
      local resource = blockType.resource('aws_glue_data_catalog_encryption_settings', name),
      _: resource._(block, {
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      catalog_id: resource.field('catalog_id'),
      id: resource.field('id'),
    },
    glue_data_quality_ruleset(name, block): {
      local resource = blockType.resource('aws_glue_data_quality_ruleset', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_on: build.template(std.get(block, 'created_on', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified_on: build.template(std.get(block, 'last_modified_on', null)),
        name: build.template(block.name),
        recommendation_run_id: build.template(std.get(block, 'recommendation_run_id', null)),
        ruleset: build.template(block.ruleset),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_on: resource.field('created_on'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_modified_on: resource.field('last_modified_on'),
      name: resource.field('name'),
      recommendation_run_id: resource.field('recommendation_run_id'),
      ruleset: resource.field('ruleset'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    glue_dev_endpoint(name, block): {
      local resource = blockType.resource('aws_glue_dev_endpoint', name),
      _: resource._(block, {
        arguments: build.template(std.get(block, 'arguments', null)),
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        extra_jars_s3_path: build.template(std.get(block, 'extra_jars_s3_path', null)),
        extra_python_libs_s3_path: build.template(std.get(block, 'extra_python_libs_s3_path', null)),
        failure_reason: build.template(std.get(block, 'failure_reason', null)),
        glue_version: build.template(std.get(block, 'glue_version', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        number_of_nodes: build.template(std.get(block, 'number_of_nodes', null)),
        number_of_workers: build.template(std.get(block, 'number_of_workers', null)),
        private_address: build.template(std.get(block, 'private_address', null)),
        public_address: build.template(std.get(block, 'public_address', null)),
        public_key: build.template(std.get(block, 'public_key', null)),
        public_keys: build.template(std.get(block, 'public_keys', null)),
        role_arn: build.template(block.role_arn),
        security_configuration: build.template(std.get(block, 'security_configuration', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        status: build.template(std.get(block, 'status', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        worker_type: build.template(std.get(block, 'worker_type', null)),
        yarn_endpoint_address: build.template(std.get(block, 'yarn_endpoint_address', null)),
        zeppelin_remote_spark_interpreter_port: build.template(std.get(block, 'zeppelin_remote_spark_interpreter_port', null)),
      }),
      arguments: resource.field('arguments'),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      extra_jars_s3_path: resource.field('extra_jars_s3_path'),
      extra_python_libs_s3_path: resource.field('extra_python_libs_s3_path'),
      failure_reason: resource.field('failure_reason'),
      glue_version: resource.field('glue_version'),
      id: resource.field('id'),
      name: resource.field('name'),
      number_of_nodes: resource.field('number_of_nodes'),
      number_of_workers: resource.field('number_of_workers'),
      private_address: resource.field('private_address'),
      public_address: resource.field('public_address'),
      public_key: resource.field('public_key'),
      public_keys: resource.field('public_keys'),
      role_arn: resource.field('role_arn'),
      security_configuration: resource.field('security_configuration'),
      security_group_ids: resource.field('security_group_ids'),
      status: resource.field('status'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
      worker_type: resource.field('worker_type'),
      yarn_endpoint_address: resource.field('yarn_endpoint_address'),
      zeppelin_remote_spark_interpreter_port: resource.field('zeppelin_remote_spark_interpreter_port'),
    },
    glue_job(name, block): {
      local resource = blockType.resource('aws_glue_job', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        connections: build.template(std.get(block, 'connections', null)),
        default_arguments: build.template(std.get(block, 'default_arguments', null)),
        description: build.template(std.get(block, 'description', null)),
        execution_class: build.template(std.get(block, 'execution_class', null)),
        glue_version: build.template(std.get(block, 'glue_version', null)),
        id: build.template(std.get(block, 'id', null)),
        job_run_queuing_enabled: build.template(std.get(block, 'job_run_queuing_enabled', null)),
        maintenance_window: build.template(std.get(block, 'maintenance_window', null)),
        max_capacity: build.template(std.get(block, 'max_capacity', null)),
        max_retries: build.template(std.get(block, 'max_retries', null)),
        name: build.template(block.name),
        non_overridable_arguments: build.template(std.get(block, 'non_overridable_arguments', null)),
        number_of_workers: build.template(std.get(block, 'number_of_workers', null)),
        role_arn: build.template(block.role_arn),
        security_configuration: build.template(std.get(block, 'security_configuration', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
        worker_type: build.template(std.get(block, 'worker_type', null)),
      }),
      arn: resource.field('arn'),
      connections: resource.field('connections'),
      default_arguments: resource.field('default_arguments'),
      description: resource.field('description'),
      execution_class: resource.field('execution_class'),
      glue_version: resource.field('glue_version'),
      id: resource.field('id'),
      job_run_queuing_enabled: resource.field('job_run_queuing_enabled'),
      maintenance_window: resource.field('maintenance_window'),
      max_capacity: resource.field('max_capacity'),
      max_retries: resource.field('max_retries'),
      name: resource.field('name'),
      non_overridable_arguments: resource.field('non_overridable_arguments'),
      number_of_workers: resource.field('number_of_workers'),
      role_arn: resource.field('role_arn'),
      security_configuration: resource.field('security_configuration'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      timeout: resource.field('timeout'),
      worker_type: resource.field('worker_type'),
    },
    glue_ml_transform(name, block): {
      local resource = blockType.resource('aws_glue_ml_transform', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        glue_version: build.template(std.get(block, 'glue_version', null)),
        id: build.template(std.get(block, 'id', null)),
        label_count: build.template(std.get(block, 'label_count', null)),
        max_capacity: build.template(std.get(block, 'max_capacity', null)),
        max_retries: build.template(std.get(block, 'max_retries', null)),
        name: build.template(block.name),
        number_of_workers: build.template(std.get(block, 'number_of_workers', null)),
        role_arn: build.template(block.role_arn),
        schema: build.template(std.get(block, 'schema', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
        worker_type: build.template(std.get(block, 'worker_type', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      glue_version: resource.field('glue_version'),
      id: resource.field('id'),
      label_count: resource.field('label_count'),
      max_capacity: resource.field('max_capacity'),
      max_retries: resource.field('max_retries'),
      name: resource.field('name'),
      number_of_workers: resource.field('number_of_workers'),
      role_arn: resource.field('role_arn'),
      schema: resource.field('schema'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      timeout: resource.field('timeout'),
      worker_type: resource.field('worker_type'),
    },
    glue_partition(name, block): {
      local resource = blockType.resource('aws_glue_partition', name),
      _: resource._(block, {
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        database_name: build.template(block.database_name),
        id: build.template(std.get(block, 'id', null)),
        last_accessed_time: build.template(std.get(block, 'last_accessed_time', null)),
        last_analyzed_time: build.template(std.get(block, 'last_analyzed_time', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        partition_values: build.template(block.partition_values),
        table_name: build.template(block.table_name),
      }),
      catalog_id: resource.field('catalog_id'),
      creation_time: resource.field('creation_time'),
      database_name: resource.field('database_name'),
      id: resource.field('id'),
      last_accessed_time: resource.field('last_accessed_time'),
      last_analyzed_time: resource.field('last_analyzed_time'),
      parameters: resource.field('parameters'),
      partition_values: resource.field('partition_values'),
      table_name: resource.field('table_name'),
    },
    glue_partition_index(name, block): {
      local resource = blockType.resource('aws_glue_partition_index', name),
      _: resource._(block, {
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        database_name: build.template(block.database_name),
        id: build.template(std.get(block, 'id', null)),
        table_name: build.template(block.table_name),
      }),
      catalog_id: resource.field('catalog_id'),
      database_name: resource.field('database_name'),
      id: resource.field('id'),
      table_name: resource.field('table_name'),
    },
    glue_registry(name, block): {
      local resource = blockType.resource('aws_glue_registry', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        registry_name: build.template(block.registry_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      registry_name: resource.field('registry_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    glue_resource_policy(name, block): {
      local resource = blockType.resource('aws_glue_resource_policy', name),
      _: resource._(block, {
        enable_hybrid: build.template(std.get(block, 'enable_hybrid', null)),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
      }),
      enable_hybrid: resource.field('enable_hybrid'),
      id: resource.field('id'),
      policy: resource.field('policy'),
    },
    glue_schema(name, block): {
      local resource = blockType.resource('aws_glue_schema', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        compatibility: build.template(block.compatibility),
        data_format: build.template(block.data_format),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        latest_schema_version: build.template(std.get(block, 'latest_schema_version', null)),
        next_schema_version: build.template(std.get(block, 'next_schema_version', null)),
        registry_arn: build.template(std.get(block, 'registry_arn', null)),
        registry_name: build.template(std.get(block, 'registry_name', null)),
        schema_checkpoint: build.template(std.get(block, 'schema_checkpoint', null)),
        schema_definition: build.template(block.schema_definition),
        schema_name: build.template(block.schema_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      compatibility: resource.field('compatibility'),
      data_format: resource.field('data_format'),
      description: resource.field('description'),
      id: resource.field('id'),
      latest_schema_version: resource.field('latest_schema_version'),
      next_schema_version: resource.field('next_schema_version'),
      registry_arn: resource.field('registry_arn'),
      registry_name: resource.field('registry_name'),
      schema_checkpoint: resource.field('schema_checkpoint'),
      schema_definition: resource.field('schema_definition'),
      schema_name: resource.field('schema_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    glue_security_configuration(name, block): {
      local resource = blockType.resource('aws_glue_security_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    glue_trigger(name, block): {
      local resource = blockType.resource('aws_glue_trigger', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        schedule: build.template(std.get(block, 'schedule', null)),
        start_on_creation: build.template(std.get(block, 'start_on_creation', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
        workflow_name: build.template(std.get(block, 'workflow_name', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      name: resource.field('name'),
      schedule: resource.field('schedule'),
      start_on_creation: resource.field('start_on_creation'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      workflow_name: resource.field('workflow_name'),
    },
    glue_user_defined_function(name, block): {
      local resource = blockType.resource('aws_glue_user_defined_function', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        class_name: build.template(block.class_name),
        create_time: build.template(std.get(block, 'create_time', null)),
        database_name: build.template(block.database_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner_name: build.template(block.owner_name),
        owner_type: build.template(block.owner_type),
      }),
      arn: resource.field('arn'),
      catalog_id: resource.field('catalog_id'),
      class_name: resource.field('class_name'),
      create_time: resource.field('create_time'),
      database_name: resource.field('database_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner_name: resource.field('owner_name'),
      owner_type: resource.field('owner_type'),
    },
    glue_workflow(name, block): {
      local resource = blockType.resource('aws_glue_workflow', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_run_properties: build.template(std.get(block, 'default_run_properties', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        max_concurrent_runs: build.template(std.get(block, 'max_concurrent_runs', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      default_run_properties: resource.field('default_run_properties'),
      description: resource.field('description'),
      id: resource.field('id'),
      max_concurrent_runs: resource.field('max_concurrent_runs'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    grafana_license_association(name, block): {
      local resource = blockType.resource('aws_grafana_license_association', name),
      _: resource._(block, {
        free_trial_expiration: build.template(std.get(block, 'free_trial_expiration', null)),
        grafana_token: build.template(std.get(block, 'grafana_token', null)),
        id: build.template(std.get(block, 'id', null)),
        license_expiration: build.template(std.get(block, 'license_expiration', null)),
        license_type: build.template(block.license_type),
        workspace_id: build.template(block.workspace_id),
      }),
      free_trial_expiration: resource.field('free_trial_expiration'),
      grafana_token: resource.field('grafana_token'),
      id: resource.field('id'),
      license_expiration: resource.field('license_expiration'),
      license_type: resource.field('license_type'),
      workspace_id: resource.field('workspace_id'),
    },
    grafana_role_association(name, block): {
      local resource = blockType.resource('aws_grafana_role_association', name),
      _: resource._(block, {
        group_ids: build.template(std.get(block, 'group_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        role: build.template(block.role),
        user_ids: build.template(std.get(block, 'user_ids', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      group_ids: resource.field('group_ids'),
      id: resource.field('id'),
      role: resource.field('role'),
      user_ids: resource.field('user_ids'),
      workspace_id: resource.field('workspace_id'),
    },
    grafana_workspace(name, block): {
      local resource = blockType.resource('aws_grafana_workspace', name),
      _: resource._(block, {
        account_access_type: build.template(block.account_access_type),
        arn: build.template(std.get(block, 'arn', null)),
        authentication_providers: build.template(block.authentication_providers),
        configuration: build.template(std.get(block, 'configuration', null)),
        data_sources: build.template(std.get(block, 'data_sources', null)),
        description: build.template(std.get(block, 'description', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        grafana_version: build.template(std.get(block, 'grafana_version', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        notification_destinations: build.template(std.get(block, 'notification_destinations', null)),
        organization_role_name: build.template(std.get(block, 'organization_role_name', null)),
        organizational_units: build.template(std.get(block, 'organizational_units', null)),
        permission_type: build.template(block.permission_type),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        saml_configuration_status: build.template(std.get(block, 'saml_configuration_status', null)),
        stack_set_name: build.template(std.get(block, 'stack_set_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      account_access_type: resource.field('account_access_type'),
      arn: resource.field('arn'),
      authentication_providers: resource.field('authentication_providers'),
      configuration: resource.field('configuration'),
      data_sources: resource.field('data_sources'),
      description: resource.field('description'),
      endpoint: resource.field('endpoint'),
      grafana_version: resource.field('grafana_version'),
      id: resource.field('id'),
      name: resource.field('name'),
      notification_destinations: resource.field('notification_destinations'),
      organization_role_name: resource.field('organization_role_name'),
      organizational_units: resource.field('organizational_units'),
      permission_type: resource.field('permission_type'),
      role_arn: resource.field('role_arn'),
      saml_configuration_status: resource.field('saml_configuration_status'),
      stack_set_name: resource.field('stack_set_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    grafana_workspace_api_key(name, block): {
      local resource = blockType.resource('aws_grafana_workspace_api_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        key_name: build.template(block.key_name),
        key_role: build.template(block.key_role),
        seconds_to_live: build.template(block.seconds_to_live),
        workspace_id: build.template(block.workspace_id),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      key_name: resource.field('key_name'),
      key_role: resource.field('key_role'),
      seconds_to_live: resource.field('seconds_to_live'),
      workspace_id: resource.field('workspace_id'),
    },
    grafana_workspace_saml_configuration(name, block): {
      local resource = blockType.resource('aws_grafana_workspace_saml_configuration', name),
      _: resource._(block, {
        admin_role_values: build.template(std.get(block, 'admin_role_values', null)),
        allowed_organizations: build.template(std.get(block, 'allowed_organizations', null)),
        editor_role_values: build.template(block.editor_role_values),
        email_assertion: build.template(std.get(block, 'email_assertion', null)),
        groups_assertion: build.template(std.get(block, 'groups_assertion', null)),
        id: build.template(std.get(block, 'id', null)),
        idp_metadata_url: build.template(std.get(block, 'idp_metadata_url', null)),
        idp_metadata_xml: build.template(std.get(block, 'idp_metadata_xml', null)),
        login_assertion: build.template(std.get(block, 'login_assertion', null)),
        login_validity_duration: build.template(std.get(block, 'login_validity_duration', null)),
        name_assertion: build.template(std.get(block, 'name_assertion', null)),
        org_assertion: build.template(std.get(block, 'org_assertion', null)),
        role_assertion: build.template(std.get(block, 'role_assertion', null)),
        status: build.template(std.get(block, 'status', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      admin_role_values: resource.field('admin_role_values'),
      allowed_organizations: resource.field('allowed_organizations'),
      editor_role_values: resource.field('editor_role_values'),
      email_assertion: resource.field('email_assertion'),
      groups_assertion: resource.field('groups_assertion'),
      id: resource.field('id'),
      idp_metadata_url: resource.field('idp_metadata_url'),
      idp_metadata_xml: resource.field('idp_metadata_xml'),
      login_assertion: resource.field('login_assertion'),
      login_validity_duration: resource.field('login_validity_duration'),
      name_assertion: resource.field('name_assertion'),
      org_assertion: resource.field('org_assertion'),
      role_assertion: resource.field('role_assertion'),
      status: resource.field('status'),
      workspace_id: resource.field('workspace_id'),
    },
    grafana_workspace_service_account(name, block): {
      local resource = blockType.resource('aws_grafana_workspace_service_account', name),
      _: resource._(block, {
        grafana_role: build.template(block.grafana_role),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        service_account_id: build.template(std.get(block, 'service_account_id', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      grafana_role: resource.field('grafana_role'),
      id: resource.field('id'),
      name: resource.field('name'),
      service_account_id: resource.field('service_account_id'),
      workspace_id: resource.field('workspace_id'),
    },
    grafana_workspace_service_account_token(name, block): {
      local resource = blockType.resource('aws_grafana_workspace_service_account_token', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        expires_at: build.template(std.get(block, 'expires_at', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        name: build.template(block.name),
        seconds_to_live: build.template(block.seconds_to_live),
        service_account_id: build.template(block.service_account_id),
        service_account_token_id: build.template(std.get(block, 'service_account_token_id', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      created_at: resource.field('created_at'),
      expires_at: resource.field('expires_at'),
      id: resource.field('id'),
      key: resource.field('key'),
      name: resource.field('name'),
      seconds_to_live: resource.field('seconds_to_live'),
      service_account_id: resource.field('service_account_id'),
      service_account_token_id: resource.field('service_account_token_id'),
      workspace_id: resource.field('workspace_id'),
    },
    guardduty_detector(name, block): {
      local resource = blockType.resource('aws_guardduty_detector', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        enable: build.template(std.get(block, 'enable', null)),
        finding_publishing_frequency: build.template(std.get(block, 'finding_publishing_frequency', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      account_id: resource.field('account_id'),
      arn: resource.field('arn'),
      enable: resource.field('enable'),
      finding_publishing_frequency: resource.field('finding_publishing_frequency'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    guardduty_detector_feature(name, block): {
      local resource = blockType.resource('aws_guardduty_detector_feature', name),
      _: resource._(block, {
        detector_id: build.template(block.detector_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        status: build.template(block.status),
      }),
      detector_id: resource.field('detector_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
    },
    guardduty_filter(name, block): {
      local resource = blockType.resource('aws_guardduty_filter', name),
      _: resource._(block, {
        action: build.template(block.action),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        detector_id: build.template(block.detector_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        rank: build.template(block.rank),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      action: resource.field('action'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      detector_id: resource.field('detector_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      rank: resource.field('rank'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    guardduty_invite_accepter(name, block): {
      local resource = blockType.resource('aws_guardduty_invite_accepter', name),
      _: resource._(block, {
        detector_id: build.template(block.detector_id),
        id: build.template(std.get(block, 'id', null)),
        master_account_id: build.template(block.master_account_id),
      }),
      detector_id: resource.field('detector_id'),
      id: resource.field('id'),
      master_account_id: resource.field('master_account_id'),
    },
    guardduty_ipset(name, block): {
      local resource = blockType.resource('aws_guardduty_ipset', name),
      _: resource._(block, {
        activate: build.template(block.activate),
        arn: build.template(std.get(block, 'arn', null)),
        detector_id: build.template(block.detector_id),
        format: build.template(block.format),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      activate: resource.field('activate'),
      arn: resource.field('arn'),
      detector_id: resource.field('detector_id'),
      format: resource.field('format'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    guardduty_malware_protection_plan(name, block): {
      local resource = blockType.resource('aws_guardduty_malware_protection_plan', name),
      _: resource._(block, {
        actions: build.template(std.get(block, 'actions', null)),
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        role: build.template(block.role),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      actions: resource.field('actions'),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      role: resource.field('role'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    guardduty_member(name, block): {
      local resource = blockType.resource('aws_guardduty_member', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        detector_id: build.template(block.detector_id),
        disable_email_notification: build.template(std.get(block, 'disable_email_notification', null)),
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
        invitation_message: build.template(std.get(block, 'invitation_message', null)),
        invite: build.template(std.get(block, 'invite', null)),
        relationship_status: build.template(std.get(block, 'relationship_status', null)),
      }),
      account_id: resource.field('account_id'),
      detector_id: resource.field('detector_id'),
      disable_email_notification: resource.field('disable_email_notification'),
      email: resource.field('email'),
      id: resource.field('id'),
      invitation_message: resource.field('invitation_message'),
      invite: resource.field('invite'),
      relationship_status: resource.field('relationship_status'),
    },
    guardduty_organization_admin_account(name, block): {
      local resource = blockType.resource('aws_guardduty_organization_admin_account', name),
      _: resource._(block, {
        admin_account_id: build.template(block.admin_account_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      admin_account_id: resource.field('admin_account_id'),
      id: resource.field('id'),
    },
    guardduty_organization_configuration(name, block): {
      local resource = blockType.resource('aws_guardduty_organization_configuration', name),
      _: resource._(block, {
        auto_enable: build.template(std.get(block, 'auto_enable', null)),
        auto_enable_organization_members: build.template(std.get(block, 'auto_enable_organization_members', null)),
        detector_id: build.template(block.detector_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      auto_enable: resource.field('auto_enable'),
      auto_enable_organization_members: resource.field('auto_enable_organization_members'),
      detector_id: resource.field('detector_id'),
      id: resource.field('id'),
    },
    guardduty_organization_configuration_feature(name, block): {
      local resource = blockType.resource('aws_guardduty_organization_configuration_feature', name),
      _: resource._(block, {
        auto_enable: build.template(block.auto_enable),
        detector_id: build.template(block.detector_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      auto_enable: resource.field('auto_enable'),
      detector_id: resource.field('detector_id'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    guardduty_publishing_destination(name, block): {
      local resource = blockType.resource('aws_guardduty_publishing_destination', name),
      _: resource._(block, {
        destination_arn: build.template(block.destination_arn),
        destination_type: build.template(std.get(block, 'destination_type', null)),
        detector_id: build.template(block.detector_id),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(block.kms_key_arn),
      }),
      destination_arn: resource.field('destination_arn'),
      destination_type: resource.field('destination_type'),
      detector_id: resource.field('detector_id'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
    },
    guardduty_threatintelset(name, block): {
      local resource = blockType.resource('aws_guardduty_threatintelset', name),
      _: resource._(block, {
        activate: build.template(block.activate),
        arn: build.template(std.get(block, 'arn', null)),
        detector_id: build.template(block.detector_id),
        format: build.template(block.format),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      activate: resource.field('activate'),
      arn: resource.field('arn'),
      detector_id: resource.field('detector_id'),
      format: resource.field('format'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    iam_access_key(name, block): {
      local resource = blockType.resource('aws_iam_access_key', name),
      _: resource._(block, {
        create_date: build.template(std.get(block, 'create_date', null)),
        encrypted_secret: build.template(std.get(block, 'encrypted_secret', null)),
        encrypted_ses_smtp_password_v4: build.template(std.get(block, 'encrypted_ses_smtp_password_v4', null)),
        id: build.template(std.get(block, 'id', null)),
        key_fingerprint: build.template(std.get(block, 'key_fingerprint', null)),
        pgp_key: build.template(std.get(block, 'pgp_key', null)),
        secret: build.template(std.get(block, 'secret', null)),
        ses_smtp_password_v4: build.template(std.get(block, 'ses_smtp_password_v4', null)),
        status: build.template(std.get(block, 'status', null)),
        user: build.template(block.user),
      }),
      create_date: resource.field('create_date'),
      encrypted_secret: resource.field('encrypted_secret'),
      encrypted_ses_smtp_password_v4: resource.field('encrypted_ses_smtp_password_v4'),
      id: resource.field('id'),
      key_fingerprint: resource.field('key_fingerprint'),
      pgp_key: resource.field('pgp_key'),
      secret: resource.field('secret'),
      ses_smtp_password_v4: resource.field('ses_smtp_password_v4'),
      status: resource.field('status'),
      user: resource.field('user'),
    },
    iam_account_alias(name, block): {
      local resource = blockType.resource('aws_iam_account_alias', name),
      _: resource._(block, {
        account_alias: build.template(block.account_alias),
        id: build.template(std.get(block, 'id', null)),
      }),
      account_alias: resource.field('account_alias'),
      id: resource.field('id'),
    },
    iam_account_password_policy(name, block): {
      local resource = blockType.resource('aws_iam_account_password_policy', name),
      _: resource._(block, {
        allow_users_to_change_password: build.template(std.get(block, 'allow_users_to_change_password', null)),
        expire_passwords: build.template(std.get(block, 'expire_passwords', null)),
        hard_expiry: build.template(std.get(block, 'hard_expiry', null)),
        id: build.template(std.get(block, 'id', null)),
        max_password_age: build.template(std.get(block, 'max_password_age', null)),
        minimum_password_length: build.template(std.get(block, 'minimum_password_length', null)),
        password_reuse_prevention: build.template(std.get(block, 'password_reuse_prevention', null)),
        require_lowercase_characters: build.template(std.get(block, 'require_lowercase_characters', null)),
        require_numbers: build.template(std.get(block, 'require_numbers', null)),
        require_symbols: build.template(std.get(block, 'require_symbols', null)),
        require_uppercase_characters: build.template(std.get(block, 'require_uppercase_characters', null)),
      }),
      allow_users_to_change_password: resource.field('allow_users_to_change_password'),
      expire_passwords: resource.field('expire_passwords'),
      hard_expiry: resource.field('hard_expiry'),
      id: resource.field('id'),
      max_password_age: resource.field('max_password_age'),
      minimum_password_length: resource.field('minimum_password_length'),
      password_reuse_prevention: resource.field('password_reuse_prevention'),
      require_lowercase_characters: resource.field('require_lowercase_characters'),
      require_numbers: resource.field('require_numbers'),
      require_symbols: resource.field('require_symbols'),
      require_uppercase_characters: resource.field('require_uppercase_characters'),
    },
    iam_group(name, block): {
      local resource = blockType.resource('aws_iam_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        path: build.template(std.get(block, 'path', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      path: resource.field('path'),
      unique_id: resource.field('unique_id'),
    },
    iam_group_membership(name, block): {
      local resource = blockType.resource('aws_iam_group_membership', name),
      _: resource._(block, {
        group: build.template(block.group),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        users: build.template(block.users),
      }),
      group: resource.field('group'),
      id: resource.field('id'),
      name: resource.field('name'),
      users: resource.field('users'),
    },
    iam_group_policies_exclusive(name, block): {
      local resource = blockType.resource('aws_iam_group_policies_exclusive', name),
      _: resource._(block, {
        group_name: build.template(block.group_name),
        policy_names: build.template(block.policy_names),
      }),
      group_name: resource.field('group_name'),
      policy_names: resource.field('policy_names'),
    },
    iam_group_policy(name, block): {
      local resource = blockType.resource('aws_iam_group_policy', name),
      _: resource._(block, {
        group: build.template(block.group),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        policy: build.template(block.policy),
      }),
      group: resource.field('group'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      policy: resource.field('policy'),
    },
    iam_group_policy_attachment(name, block): {
      local resource = blockType.resource('aws_iam_group_policy_attachment', name),
      _: resource._(block, {
        group: build.template(block.group),
        id: build.template(std.get(block, 'id', null)),
        policy_arn: build.template(block.policy_arn),
      }),
      group: resource.field('group'),
      id: resource.field('id'),
      policy_arn: resource.field('policy_arn'),
    },
    iam_group_policy_attachments_exclusive(name, block): {
      local resource = blockType.resource('aws_iam_group_policy_attachments_exclusive', name),
      _: resource._(block, {
        group_name: build.template(block.group_name),
        policy_arns: build.template(block.policy_arns),
      }),
      group_name: resource.field('group_name'),
      policy_arns: resource.field('policy_arns'),
    },
    iam_instance_profile(name, block): {
      local resource = blockType.resource('aws_iam_instance_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        create_date: build.template(std.get(block, 'create_date', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        path: build.template(std.get(block, 'path', null)),
        role: build.template(std.get(block, 'role', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
      }),
      arn: resource.field('arn'),
      create_date: resource.field('create_date'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      path: resource.field('path'),
      role: resource.field('role'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      unique_id: resource.field('unique_id'),
    },
    iam_openid_connect_provider(name, block): {
      local resource = blockType.resource('aws_iam_openid_connect_provider', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        client_id_list: build.template(block.client_id_list),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        thumbprint_list: build.template(block.thumbprint_list),
        url: build.template(block.url),
      }),
      arn: resource.field('arn'),
      client_id_list: resource.field('client_id_list'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      thumbprint_list: resource.field('thumbprint_list'),
      url: resource.field('url'),
    },
    iam_policy(name, block): {
      local resource = blockType.resource('aws_iam_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attachment_count: build.template(std.get(block, 'attachment_count', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        path: build.template(std.get(block, 'path', null)),
        policy: build.template(block.policy),
        policy_id: build.template(std.get(block, 'policy_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      attachment_count: resource.field('attachment_count'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      path: resource.field('path'),
      policy: resource.field('policy'),
      policy_id: resource.field('policy_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    iam_policy_attachment(name, block): {
      local resource = blockType.resource('aws_iam_policy_attachment', name),
      _: resource._(block, {
        groups: build.template(std.get(block, 'groups', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_arn: build.template(block.policy_arn),
        roles: build.template(std.get(block, 'roles', null)),
        users: build.template(std.get(block, 'users', null)),
      }),
      groups: resource.field('groups'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_arn: resource.field('policy_arn'),
      roles: resource.field('roles'),
      users: resource.field('users'),
    },
    iam_role(name, block): {
      local resource = blockType.resource('aws_iam_role', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        assume_role_policy: build.template(block.assume_role_policy),
        create_date: build.template(std.get(block, 'create_date', null)),
        description: build.template(std.get(block, 'description', null)),
        force_detach_policies: build.template(std.get(block, 'force_detach_policies', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_policy_arns: build.template(std.get(block, 'managed_policy_arns', null)),
        max_session_duration: build.template(std.get(block, 'max_session_duration', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        path: build.template(std.get(block, 'path', null)),
        permissions_boundary: build.template(std.get(block, 'permissions_boundary', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
      }),
      arn: resource.field('arn'),
      assume_role_policy: resource.field('assume_role_policy'),
      create_date: resource.field('create_date'),
      description: resource.field('description'),
      force_detach_policies: resource.field('force_detach_policies'),
      id: resource.field('id'),
      managed_policy_arns: resource.field('managed_policy_arns'),
      max_session_duration: resource.field('max_session_duration'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      path: resource.field('path'),
      permissions_boundary: resource.field('permissions_boundary'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      unique_id: resource.field('unique_id'),
    },
    iam_role_policies_exclusive(name, block): {
      local resource = blockType.resource('aws_iam_role_policies_exclusive', name),
      _: resource._(block, {
        policy_names: build.template(block.policy_names),
        role_name: build.template(block.role_name),
      }),
      policy_names: resource.field('policy_names'),
      role_name: resource.field('role_name'),
    },
    iam_role_policy(name, block): {
      local resource = blockType.resource('aws_iam_role_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        policy: build.template(block.policy),
        role: build.template(block.role),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      policy: resource.field('policy'),
      role: resource.field('role'),
    },
    iam_role_policy_attachment(name, block): {
      local resource = blockType.resource('aws_iam_role_policy_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy_arn: build.template(block.policy_arn),
        role: build.template(block.role),
      }),
      id: resource.field('id'),
      policy_arn: resource.field('policy_arn'),
      role: resource.field('role'),
    },
    iam_role_policy_attachments_exclusive(name, block): {
      local resource = blockType.resource('aws_iam_role_policy_attachments_exclusive', name),
      _: resource._(block, {
        policy_arns: build.template(block.policy_arns),
        role_name: build.template(block.role_name),
      }),
      policy_arns: resource.field('policy_arns'),
      role_name: resource.field('role_name'),
    },
    iam_saml_provider(name, block): {
      local resource = blockType.resource('aws_iam_saml_provider', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        saml_metadata_document: build.template(block.saml_metadata_document),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        valid_until: build.template(std.get(block, 'valid_until', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      saml_metadata_document: resource.field('saml_metadata_document'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      valid_until: resource.field('valid_until'),
    },
    iam_security_token_service_preferences(name, block): {
      local resource = blockType.resource('aws_iam_security_token_service_preferences', name),
      _: resource._(block, {
        global_endpoint_token_version: build.template(block.global_endpoint_token_version),
        id: build.template(std.get(block, 'id', null)),
      }),
      global_endpoint_token_version: resource.field('global_endpoint_token_version'),
      id: resource.field('id'),
    },
    iam_server_certificate(name, block): {
      local resource = blockType.resource('aws_iam_server_certificate', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        certificate_body: build.template(block.certificate_body),
        certificate_chain: build.template(std.get(block, 'certificate_chain', null)),
        expiration: build.template(std.get(block, 'expiration', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        path: build.template(std.get(block, 'path', null)),
        private_key: build.template(block.private_key),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        upload_date: build.template(std.get(block, 'upload_date', null)),
      }),
      arn: resource.field('arn'),
      certificate_body: resource.field('certificate_body'),
      certificate_chain: resource.field('certificate_chain'),
      expiration: resource.field('expiration'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      path: resource.field('path'),
      private_key: resource.field('private_key'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      upload_date: resource.field('upload_date'),
    },
    iam_service_linked_role(name, block): {
      local resource = blockType.resource('aws_iam_service_linked_role', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_service_name: build.template(block.aws_service_name),
        create_date: build.template(std.get(block, 'create_date', null)),
        custom_suffix: build.template(std.get(block, 'custom_suffix', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        path: build.template(std.get(block, 'path', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
      }),
      arn: resource.field('arn'),
      aws_service_name: resource.field('aws_service_name'),
      create_date: resource.field('create_date'),
      custom_suffix: resource.field('custom_suffix'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      path: resource.field('path'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      unique_id: resource.field('unique_id'),
    },
    iam_service_specific_credential(name, block): {
      local resource = blockType.resource('aws_iam_service_specific_credential', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        service_name: build.template(block.service_name),
        service_password: build.template(std.get(block, 'service_password', null)),
        service_specific_credential_id: build.template(std.get(block, 'service_specific_credential_id', null)),
        service_user_name: build.template(std.get(block, 'service_user_name', null)),
        status: build.template(std.get(block, 'status', null)),
        user_name: build.template(block.user_name),
      }),
      id: resource.field('id'),
      service_name: resource.field('service_name'),
      service_password: resource.field('service_password'),
      service_specific_credential_id: resource.field('service_specific_credential_id'),
      service_user_name: resource.field('service_user_name'),
      status: resource.field('status'),
      user_name: resource.field('user_name'),
    },
    iam_signing_certificate(name, block): {
      local resource = blockType.resource('aws_iam_signing_certificate', name),
      _: resource._(block, {
        certificate_body: build.template(block.certificate_body),
        certificate_id: build.template(std.get(block, 'certificate_id', null)),
        id: build.template(std.get(block, 'id', null)),
        status: build.template(std.get(block, 'status', null)),
        user_name: build.template(block.user_name),
      }),
      certificate_body: resource.field('certificate_body'),
      certificate_id: resource.field('certificate_id'),
      id: resource.field('id'),
      status: resource.field('status'),
      user_name: resource.field('user_name'),
    },
    iam_user(name, block): {
      local resource = blockType.resource('aws_iam_user', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        path: build.template(std.get(block, 'path', null)),
        permissions_boundary: build.template(std.get(block, 'permissions_boundary', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
      }),
      arn: resource.field('arn'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      name: resource.field('name'),
      path: resource.field('path'),
      permissions_boundary: resource.field('permissions_boundary'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      unique_id: resource.field('unique_id'),
    },
    iam_user_group_membership(name, block): {
      local resource = blockType.resource('aws_iam_user_group_membership', name),
      _: resource._(block, {
        groups: build.template(block.groups),
        id: build.template(std.get(block, 'id', null)),
        user: build.template(block.user),
      }),
      groups: resource.field('groups'),
      id: resource.field('id'),
      user: resource.field('user'),
    },
    iam_user_login_profile(name, block): {
      local resource = blockType.resource('aws_iam_user_login_profile', name),
      _: resource._(block, {
        encrypted_password: build.template(std.get(block, 'encrypted_password', null)),
        id: build.template(std.get(block, 'id', null)),
        key_fingerprint: build.template(std.get(block, 'key_fingerprint', null)),
        password: build.template(std.get(block, 'password', null)),
        password_length: build.template(std.get(block, 'password_length', null)),
        password_reset_required: build.template(std.get(block, 'password_reset_required', null)),
        pgp_key: build.template(std.get(block, 'pgp_key', null)),
        user: build.template(block.user),
      }),
      encrypted_password: resource.field('encrypted_password'),
      id: resource.field('id'),
      key_fingerprint: resource.field('key_fingerprint'),
      password: resource.field('password'),
      password_length: resource.field('password_length'),
      password_reset_required: resource.field('password_reset_required'),
      pgp_key: resource.field('pgp_key'),
      user: resource.field('user'),
    },
    iam_user_policies_exclusive(name, block): {
      local resource = blockType.resource('aws_iam_user_policies_exclusive', name),
      _: resource._(block, {
        policy_names: build.template(block.policy_names),
        user_name: build.template(block.user_name),
      }),
      policy_names: resource.field('policy_names'),
      user_name: resource.field('user_name'),
    },
    iam_user_policy(name, block): {
      local resource = blockType.resource('aws_iam_user_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        policy: build.template(block.policy),
        user: build.template(block.user),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      policy: resource.field('policy'),
      user: resource.field('user'),
    },
    iam_user_policy_attachment(name, block): {
      local resource = blockType.resource('aws_iam_user_policy_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy_arn: build.template(block.policy_arn),
        user: build.template(block.user),
      }),
      id: resource.field('id'),
      policy_arn: resource.field('policy_arn'),
      user: resource.field('user'),
    },
    iam_user_policy_attachments_exclusive(name, block): {
      local resource = blockType.resource('aws_iam_user_policy_attachments_exclusive', name),
      _: resource._(block, {
        policy_arns: build.template(block.policy_arns),
        user_name: build.template(block.user_name),
      }),
      policy_arns: resource.field('policy_arns'),
      user_name: resource.field('user_name'),
    },
    iam_user_ssh_key(name, block): {
      local resource = blockType.resource('aws_iam_user_ssh_key', name),
      _: resource._(block, {
        encoding: build.template(block.encoding),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        public_key: build.template(block.public_key),
        ssh_public_key_id: build.template(std.get(block, 'ssh_public_key_id', null)),
        status: build.template(std.get(block, 'status', null)),
        username: build.template(block.username),
      }),
      encoding: resource.field('encoding'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      public_key: resource.field('public_key'),
      ssh_public_key_id: resource.field('ssh_public_key_id'),
      status: resource.field('status'),
      username: resource.field('username'),
    },
    iam_virtual_mfa_device(name, block): {
      local resource = blockType.resource('aws_iam_virtual_mfa_device', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        base_32_string_seed: build.template(std.get(block, 'base_32_string_seed', null)),
        enable_date: build.template(std.get(block, 'enable_date', null)),
        id: build.template(std.get(block, 'id', null)),
        path: build.template(std.get(block, 'path', null)),
        qr_code_png: build.template(std.get(block, 'qr_code_png', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_name: build.template(std.get(block, 'user_name', null)),
        virtual_mfa_device_name: build.template(block.virtual_mfa_device_name),
      }),
      arn: resource.field('arn'),
      base_32_string_seed: resource.field('base_32_string_seed'),
      enable_date: resource.field('enable_date'),
      id: resource.field('id'),
      path: resource.field('path'),
      qr_code_png: resource.field('qr_code_png'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_name: resource.field('user_name'),
      virtual_mfa_device_name: resource.field('virtual_mfa_device_name'),
    },
    identitystore_group(name, block): {
      local resource = blockType.resource('aws_identitystore_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        external_ids: build.template(std.get(block, 'external_ids', null)),
        group_id: build.template(std.get(block, 'group_id', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_store_id: build.template(block.identity_store_id),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      external_ids: resource.field('external_ids'),
      group_id: resource.field('group_id'),
      id: resource.field('id'),
      identity_store_id: resource.field('identity_store_id'),
    },
    identitystore_group_membership(name, block): {
      local resource = blockType.resource('aws_identitystore_group_membership', name),
      _: resource._(block, {
        group_id: build.template(block.group_id),
        id: build.template(std.get(block, 'id', null)),
        identity_store_id: build.template(block.identity_store_id),
        member_id: build.template(block.member_id),
        membership_id: build.template(std.get(block, 'membership_id', null)),
      }),
      group_id: resource.field('group_id'),
      id: resource.field('id'),
      identity_store_id: resource.field('identity_store_id'),
      member_id: resource.field('member_id'),
      membership_id: resource.field('membership_id'),
    },
    identitystore_user(name, block): {
      local resource = blockType.resource('aws_identitystore_user', name),
      _: resource._(block, {
        display_name: build.template(block.display_name),
        external_ids: build.template(std.get(block, 'external_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_store_id: build.template(block.identity_store_id),
        locale: build.template(std.get(block, 'locale', null)),
        nickname: build.template(std.get(block, 'nickname', null)),
        preferred_language: build.template(std.get(block, 'preferred_language', null)),
        profile_url: build.template(std.get(block, 'profile_url', null)),
        timezone: build.template(std.get(block, 'timezone', null)),
        title: build.template(std.get(block, 'title', null)),
        user_id: build.template(std.get(block, 'user_id', null)),
        user_name: build.template(block.user_name),
        user_type: build.template(std.get(block, 'user_type', null)),
      }),
      display_name: resource.field('display_name'),
      external_ids: resource.field('external_ids'),
      id: resource.field('id'),
      identity_store_id: resource.field('identity_store_id'),
      locale: resource.field('locale'),
      nickname: resource.field('nickname'),
      preferred_language: resource.field('preferred_language'),
      profile_url: resource.field('profile_url'),
      timezone: resource.field('timezone'),
      title: resource.field('title'),
      user_id: resource.field('user_id'),
      user_name: resource.field('user_name'),
      user_type: resource.field('user_type'),
    },
    imagebuilder_component(name, block): {
      local resource = blockType.resource('aws_imagebuilder_component', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        change_description: build.template(std.get(block, 'change_description', null)),
        data: build.template(std.get(block, 'data', null)),
        date_created: build.template(std.get(block, 'date_created', null)),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        name: build.template(block.name),
        owner: build.template(std.get(block, 'owner', null)),
        platform: build.template(block.platform),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        supported_os_versions: build.template(std.get(block, 'supported_os_versions', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
        uri: build.template(std.get(block, 'uri', null)),
        version: build.template(block.version),
      }),
      arn: resource.field('arn'),
      change_description: resource.field('change_description'),
      data: resource.field('data'),
      date_created: resource.field('date_created'),
      description: resource.field('description'),
      encrypted: resource.field('encrypted'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      platform: resource.field('platform'),
      skip_destroy: resource.field('skip_destroy'),
      supported_os_versions: resource.field('supported_os_versions'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      uri: resource.field('uri'),
      version: resource.field('version'),
    },
    imagebuilder_container_recipe(name, block): {
      local resource = blockType.resource('aws_imagebuilder_container_recipe', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        container_type: build.template(block.container_type),
        date_created: build.template(std.get(block, 'date_created', null)),
        description: build.template(std.get(block, 'description', null)),
        dockerfile_template_data: build.template(std.get(block, 'dockerfile_template_data', null)),
        dockerfile_template_uri: build.template(std.get(block, 'dockerfile_template_uri', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        name: build.template(block.name),
        owner: build.template(std.get(block, 'owner', null)),
        parent_image: build.template(block.parent_image),
        platform: build.template(std.get(block, 'platform', null)),
        platform_override: build.template(std.get(block, 'platform_override', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(block.version),
        working_directory: build.template(std.get(block, 'working_directory', null)),
      }),
      arn: resource.field('arn'),
      container_type: resource.field('container_type'),
      date_created: resource.field('date_created'),
      description: resource.field('description'),
      dockerfile_template_data: resource.field('dockerfile_template_data'),
      dockerfile_template_uri: resource.field('dockerfile_template_uri'),
      encrypted: resource.field('encrypted'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      parent_image: resource.field('parent_image'),
      platform: resource.field('platform'),
      platform_override: resource.field('platform_override'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
      working_directory: resource.field('working_directory'),
    },
    imagebuilder_distribution_configuration(name, block): {
      local resource = blockType.resource('aws_imagebuilder_distribution_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        date_created: build.template(std.get(block, 'date_created', null)),
        date_updated: build.template(std.get(block, 'date_updated', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      date_created: resource.field('date_created'),
      date_updated: resource.field('date_updated'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    imagebuilder_image(name, block): {
      local resource = blockType.resource('aws_imagebuilder_image', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        container_recipe_arn: build.template(std.get(block, 'container_recipe_arn', null)),
        date_created: build.template(std.get(block, 'date_created', null)),
        distribution_configuration_arn: build.template(std.get(block, 'distribution_configuration_arn', null)),
        enhanced_image_metadata_enabled: build.template(std.get(block, 'enhanced_image_metadata_enabled', null)),
        execution_role: build.template(std.get(block, 'execution_role', null)),
        id: build.template(std.get(block, 'id', null)),
        image_recipe_arn: build.template(std.get(block, 'image_recipe_arn', null)),
        infrastructure_configuration_arn: build.template(block.infrastructure_configuration_arn),
        name: build.template(std.get(block, 'name', null)),
        os_version: build.template(std.get(block, 'os_version', null)),
        output_resources: build.template(std.get(block, 'output_resources', null)),
        platform: build.template(std.get(block, 'platform', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      container_recipe_arn: resource.field('container_recipe_arn'),
      date_created: resource.field('date_created'),
      distribution_configuration_arn: resource.field('distribution_configuration_arn'),
      enhanced_image_metadata_enabled: resource.field('enhanced_image_metadata_enabled'),
      execution_role: resource.field('execution_role'),
      id: resource.field('id'),
      image_recipe_arn: resource.field('image_recipe_arn'),
      infrastructure_configuration_arn: resource.field('infrastructure_configuration_arn'),
      name: resource.field('name'),
      os_version: resource.field('os_version'),
      output_resources: resource.field('output_resources'),
      platform: resource.field('platform'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    imagebuilder_image_pipeline(name, block): {
      local resource = blockType.resource('aws_imagebuilder_image_pipeline', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        container_recipe_arn: build.template(std.get(block, 'container_recipe_arn', null)),
        date_created: build.template(std.get(block, 'date_created', null)),
        date_last_run: build.template(std.get(block, 'date_last_run', null)),
        date_next_run: build.template(std.get(block, 'date_next_run', null)),
        date_updated: build.template(std.get(block, 'date_updated', null)),
        description: build.template(std.get(block, 'description', null)),
        distribution_configuration_arn: build.template(std.get(block, 'distribution_configuration_arn', null)),
        enhanced_image_metadata_enabled: build.template(std.get(block, 'enhanced_image_metadata_enabled', null)),
        execution_role: build.template(std.get(block, 'execution_role', null)),
        id: build.template(std.get(block, 'id', null)),
        image_recipe_arn: build.template(std.get(block, 'image_recipe_arn', null)),
        infrastructure_configuration_arn: build.template(block.infrastructure_configuration_arn),
        name: build.template(block.name),
        platform: build.template(std.get(block, 'platform', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      container_recipe_arn: resource.field('container_recipe_arn'),
      date_created: resource.field('date_created'),
      date_last_run: resource.field('date_last_run'),
      date_next_run: resource.field('date_next_run'),
      date_updated: resource.field('date_updated'),
      description: resource.field('description'),
      distribution_configuration_arn: resource.field('distribution_configuration_arn'),
      enhanced_image_metadata_enabled: resource.field('enhanced_image_metadata_enabled'),
      execution_role: resource.field('execution_role'),
      id: resource.field('id'),
      image_recipe_arn: resource.field('image_recipe_arn'),
      infrastructure_configuration_arn: resource.field('infrastructure_configuration_arn'),
      name: resource.field('name'),
      platform: resource.field('platform'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    imagebuilder_image_recipe(name, block): {
      local resource = blockType.resource('aws_imagebuilder_image_recipe', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        date_created: build.template(std.get(block, 'date_created', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner: build.template(std.get(block, 'owner', null)),
        parent_image: build.template(block.parent_image),
        platform: build.template(std.get(block, 'platform', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_data_base64: build.template(std.get(block, 'user_data_base64', null)),
        version: build.template(block.version),
        working_directory: build.template(std.get(block, 'working_directory', null)),
      }),
      arn: resource.field('arn'),
      date_created: resource.field('date_created'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      parent_image: resource.field('parent_image'),
      platform: resource.field('platform'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_data_base64: resource.field('user_data_base64'),
      version: resource.field('version'),
      working_directory: resource.field('working_directory'),
    },
    imagebuilder_infrastructure_configuration(name, block): {
      local resource = blockType.resource('aws_imagebuilder_infrastructure_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        date_created: build.template(std.get(block, 'date_created', null)),
        date_updated: build.template(std.get(block, 'date_updated', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_profile_name: build.template(block.instance_profile_name),
        instance_types: build.template(std.get(block, 'instance_types', null)),
        key_pair: build.template(std.get(block, 'key_pair', null)),
        name: build.template(block.name),
        resource_tags: build.template(std.get(block, 'resource_tags', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        sns_topic_arn: build.template(std.get(block, 'sns_topic_arn', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        terminate_instance_on_failure: build.template(std.get(block, 'terminate_instance_on_failure', null)),
      }),
      arn: resource.field('arn'),
      date_created: resource.field('date_created'),
      date_updated: resource.field('date_updated'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_profile_name: resource.field('instance_profile_name'),
      instance_types: resource.field('instance_types'),
      key_pair: resource.field('key_pair'),
      name: resource.field('name'),
      resource_tags: resource.field('resource_tags'),
      security_group_ids: resource.field('security_group_ids'),
      sns_topic_arn: resource.field('sns_topic_arn'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      terminate_instance_on_failure: resource.field('terminate_instance_on_failure'),
    },
    imagebuilder_lifecycle_policy(name, block): {
      local resource = blockType.resource('aws_imagebuilder_lifecycle_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        execution_role: build.template(block.execution_role),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_type: build.template(block.resource_type),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      execution_role: resource.field('execution_role'),
      id: resource.field('id'),
      name: resource.field('name'),
      resource_type: resource.field('resource_type'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    imagebuilder_workflow(name, block): {
      local resource = blockType.resource('aws_imagebuilder_workflow', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        change_description: build.template(std.get(block, 'change_description', null)),
        data: build.template(std.get(block, 'data', null)),
        date_created: build.template(std.get(block, 'date_created', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        name: build.template(block.name),
        owner: build.template(std.get(block, 'owner', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
        uri: build.template(std.get(block, 'uri', null)),
        version: build.template(block.version),
      }),
      arn: resource.field('arn'),
      change_description: resource.field('change_description'),
      data: resource.field('data'),
      date_created: resource.field('date_created'),
      description: resource.field('description'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      uri: resource.field('uri'),
      version: resource.field('version'),
    },
    inspector2_delegated_admin_account(name, block): {
      local resource = blockType.resource('aws_inspector2_delegated_admin_account', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        id: build.template(std.get(block, 'id', null)),
        relationship_status: build.template(std.get(block, 'relationship_status', null)),
      }),
      account_id: resource.field('account_id'),
      id: resource.field('id'),
      relationship_status: resource.field('relationship_status'),
    },
    inspector2_enabler(name, block): {
      local resource = blockType.resource('aws_inspector2_enabler', name),
      _: resource._(block, {
        account_ids: build.template(block.account_ids),
        id: build.template(std.get(block, 'id', null)),
        resource_types: build.template(block.resource_types),
      }),
      account_ids: resource.field('account_ids'),
      id: resource.field('id'),
      resource_types: resource.field('resource_types'),
    },
    inspector2_member_association(name, block): {
      local resource = blockType.resource('aws_inspector2_member_association', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        delegated_admin_account_id: build.template(std.get(block, 'delegated_admin_account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        relationship_status: build.template(std.get(block, 'relationship_status', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      account_id: resource.field('account_id'),
      delegated_admin_account_id: resource.field('delegated_admin_account_id'),
      id: resource.field('id'),
      relationship_status: resource.field('relationship_status'),
      updated_at: resource.field('updated_at'),
    },
    inspector2_organization_configuration(name, block): {
      local resource = blockType.resource('aws_inspector2_organization_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        max_account_limit_reached: build.template(std.get(block, 'max_account_limit_reached', null)),
      }),
      id: resource.field('id'),
      max_account_limit_reached: resource.field('max_account_limit_reached'),
    },
    inspector_assessment_target(name, block): {
      local resource = blockType.resource('aws_inspector_assessment_target', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_arn: build.template(std.get(block, 'resource_group_arn', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      resource_group_arn: resource.field('resource_group_arn'),
    },
    inspector_assessment_template(name, block): {
      local resource = blockType.resource('aws_inspector_assessment_template', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        duration: build.template(block.duration),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        rules_package_arns: build.template(block.rules_package_arns),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_arn: build.template(block.target_arn),
      }),
      arn: resource.field('arn'),
      duration: resource.field('duration'),
      id: resource.field('id'),
      name: resource.field('name'),
      rules_package_arns: resource.field('rules_package_arns'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_arn: resource.field('target_arn'),
    },
    inspector_resource_group(name, block): {
      local resource = blockType.resource('aws_inspector_resource_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(block.tags),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      tags: resource.field('tags'),
    },
    instance(name, block): {
      local resource = blockType.resource('aws_instance', name),
      _: resource._(block, {
        ami: build.template(std.get(block, 'ami', null)),
        arn: build.template(std.get(block, 'arn', null)),
        associate_public_ip_address: build.template(std.get(block, 'associate_public_ip_address', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        cpu_core_count: build.template(std.get(block, 'cpu_core_count', null)),
        cpu_threads_per_core: build.template(std.get(block, 'cpu_threads_per_core', null)),
        disable_api_stop: build.template(std.get(block, 'disable_api_stop', null)),
        disable_api_termination: build.template(std.get(block, 'disable_api_termination', null)),
        ebs_optimized: build.template(std.get(block, 'ebs_optimized', null)),
        get_password_data: build.template(std.get(block, 'get_password_data', null)),
        hibernation: build.template(std.get(block, 'hibernation', null)),
        host_id: build.template(std.get(block, 'host_id', null)),
        host_resource_group_arn: build.template(std.get(block, 'host_resource_group_arn', null)),
        iam_instance_profile: build.template(std.get(block, 'iam_instance_profile', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_initiated_shutdown_behavior: build.template(std.get(block, 'instance_initiated_shutdown_behavior', null)),
        instance_lifecycle: build.template(std.get(block, 'instance_lifecycle', null)),
        instance_state: build.template(std.get(block, 'instance_state', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        ipv6_address_count: build.template(std.get(block, 'ipv6_address_count', null)),
        ipv6_addresses: build.template(std.get(block, 'ipv6_addresses', null)),
        key_name: build.template(std.get(block, 'key_name', null)),
        monitoring: build.template(std.get(block, 'monitoring', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        password_data: build.template(std.get(block, 'password_data', null)),
        placement_group: build.template(std.get(block, 'placement_group', null)),
        placement_partition_number: build.template(std.get(block, 'placement_partition_number', null)),
        primary_network_interface_id: build.template(std.get(block, 'primary_network_interface_id', null)),
        private_dns: build.template(std.get(block, 'private_dns', null)),
        private_ip: build.template(std.get(block, 'private_ip', null)),
        public_dns: build.template(std.get(block, 'public_dns', null)),
        public_ip: build.template(std.get(block, 'public_ip', null)),
        secondary_private_ips: build.template(std.get(block, 'secondary_private_ips', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        source_dest_check: build.template(std.get(block, 'source_dest_check', null)),
        spot_instance_request_id: build.template(std.get(block, 'spot_instance_request_id', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tenancy: build.template(std.get(block, 'tenancy', null)),
        user_data: build.template(std.get(block, 'user_data', null)),
        user_data_base64: build.template(std.get(block, 'user_data_base64', null)),
        user_data_replace_on_change: build.template(std.get(block, 'user_data_replace_on_change', null)),
        volume_tags: build.template(std.get(block, 'volume_tags', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      ami: resource.field('ami'),
      arn: resource.field('arn'),
      associate_public_ip_address: resource.field('associate_public_ip_address'),
      availability_zone: resource.field('availability_zone'),
      cpu_core_count: resource.field('cpu_core_count'),
      cpu_threads_per_core: resource.field('cpu_threads_per_core'),
      disable_api_stop: resource.field('disable_api_stop'),
      disable_api_termination: resource.field('disable_api_termination'),
      ebs_optimized: resource.field('ebs_optimized'),
      get_password_data: resource.field('get_password_data'),
      hibernation: resource.field('hibernation'),
      host_id: resource.field('host_id'),
      host_resource_group_arn: resource.field('host_resource_group_arn'),
      iam_instance_profile: resource.field('iam_instance_profile'),
      id: resource.field('id'),
      instance_initiated_shutdown_behavior: resource.field('instance_initiated_shutdown_behavior'),
      instance_lifecycle: resource.field('instance_lifecycle'),
      instance_state: resource.field('instance_state'),
      instance_type: resource.field('instance_type'),
      ipv6_address_count: resource.field('ipv6_address_count'),
      ipv6_addresses: resource.field('ipv6_addresses'),
      key_name: resource.field('key_name'),
      monitoring: resource.field('monitoring'),
      outpost_arn: resource.field('outpost_arn'),
      password_data: resource.field('password_data'),
      placement_group: resource.field('placement_group'),
      placement_partition_number: resource.field('placement_partition_number'),
      primary_network_interface_id: resource.field('primary_network_interface_id'),
      private_dns: resource.field('private_dns'),
      private_ip: resource.field('private_ip'),
      public_dns: resource.field('public_dns'),
      public_ip: resource.field('public_ip'),
      secondary_private_ips: resource.field('secondary_private_ips'),
      security_groups: resource.field('security_groups'),
      source_dest_check: resource.field('source_dest_check'),
      spot_instance_request_id: resource.field('spot_instance_request_id'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tenancy: resource.field('tenancy'),
      user_data: resource.field('user_data'),
      user_data_base64: resource.field('user_data_base64'),
      user_data_replace_on_change: resource.field('user_data_replace_on_change'),
      volume_tags: resource.field('volume_tags'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    internet_gateway(name, block): {
      local resource = blockType.resource('aws_internet_gateway', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    internet_gateway_attachment(name, block): {
      local resource = blockType.resource('aws_internet_gateway_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        internet_gateway_id: build.template(block.internet_gateway_id),
        vpc_id: build.template(block.vpc_id),
      }),
      id: resource.field('id'),
      internet_gateway_id: resource.field('internet_gateway_id'),
      vpc_id: resource.field('vpc_id'),
    },
    internetmonitor_monitor(name, block): {
      local resource = blockType.resource('aws_internetmonitor_monitor', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        max_city_networks_to_monitor: build.template(std.get(block, 'max_city_networks_to_monitor', null)),
        monitor_name: build.template(block.monitor_name),
        resources: build.template(std.get(block, 'resources', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        traffic_percentage_to_monitor: build.template(std.get(block, 'traffic_percentage_to_monitor', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      max_city_networks_to_monitor: resource.field('max_city_networks_to_monitor'),
      monitor_name: resource.field('monitor_name'),
      resources: resource.field('resources'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      traffic_percentage_to_monitor: resource.field('traffic_percentage_to_monitor'),
    },
    iot_authorizer(name, block): {
      local resource = blockType.resource('aws_iot_authorizer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        authorizer_function_arn: build.template(block.authorizer_function_arn),
        enable_caching_for_http: build.template(std.get(block, 'enable_caching_for_http', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        signing_disabled: build.template(std.get(block, 'signing_disabled', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        token_key_name: build.template(std.get(block, 'token_key_name', null)),
        token_signing_public_keys: build.template(std.get(block, 'token_signing_public_keys', null)),
      }),
      arn: resource.field('arn'),
      authorizer_function_arn: resource.field('authorizer_function_arn'),
      enable_caching_for_http: resource.field('enable_caching_for_http'),
      id: resource.field('id'),
      name: resource.field('name'),
      signing_disabled: resource.field('signing_disabled'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      token_key_name: resource.field('token_key_name'),
      token_signing_public_keys: resource.field('token_signing_public_keys'),
    },
    iot_billing_group(name, block): {
      local resource = blockType.resource('aws_iot_billing_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      metadata: resource.field('metadata'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    iot_ca_certificate(name, block): {
      local resource = blockType.resource('aws_iot_ca_certificate', name),
      _: resource._(block, {
        active: build.template(block.active),
        allow_auto_registration: build.template(block.allow_auto_registration),
        arn: build.template(std.get(block, 'arn', null)),
        ca_certificate_pem: build.template(block.ca_certificate_pem),
        certificate_mode: build.template(std.get(block, 'certificate_mode', null)),
        customer_version: build.template(std.get(block, 'customer_version', null)),
        generation_id: build.template(std.get(block, 'generation_id', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        validity: build.template(std.get(block, 'validity', null)),
        verification_certificate_pem: build.template(std.get(block, 'verification_certificate_pem', null)),
      }),
      active: resource.field('active'),
      allow_auto_registration: resource.field('allow_auto_registration'),
      arn: resource.field('arn'),
      ca_certificate_pem: resource.field('ca_certificate_pem'),
      certificate_mode: resource.field('certificate_mode'),
      customer_version: resource.field('customer_version'),
      generation_id: resource.field('generation_id'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      validity: resource.field('validity'),
      verification_certificate_pem: resource.field('verification_certificate_pem'),
    },
    iot_certificate(name, block): {
      local resource = blockType.resource('aws_iot_certificate', name),
      _: resource._(block, {
        active: build.template(block.active),
        arn: build.template(std.get(block, 'arn', null)),
        ca_certificate_id: build.template(std.get(block, 'ca_certificate_id', null)),
        ca_pem: build.template(std.get(block, 'ca_pem', null)),
        certificate_pem: build.template(std.get(block, 'certificate_pem', null)),
        csr: build.template(std.get(block, 'csr', null)),
        id: build.template(std.get(block, 'id', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        public_key: build.template(std.get(block, 'public_key', null)),
      }),
      active: resource.field('active'),
      arn: resource.field('arn'),
      ca_certificate_id: resource.field('ca_certificate_id'),
      ca_pem: resource.field('ca_pem'),
      certificate_pem: resource.field('certificate_pem'),
      csr: resource.field('csr'),
      id: resource.field('id'),
      private_key: resource.field('private_key'),
      public_key: resource.field('public_key'),
    },
    iot_domain_configuration(name, block): {
      local resource = blockType.resource('aws_iot_domain_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        domain_type: build.template(std.get(block, 'domain_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        server_certificate_arns: build.template(std.get(block, 'server_certificate_arns', null)),
        service_type: build.template(std.get(block, 'service_type', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        validation_certificate_arn: build.template(std.get(block, 'validation_certificate_arn', null)),
      }),
      arn: resource.field('arn'),
      domain_name: resource.field('domain_name'),
      domain_type: resource.field('domain_type'),
      id: resource.field('id'),
      name: resource.field('name'),
      server_certificate_arns: resource.field('server_certificate_arns'),
      service_type: resource.field('service_type'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      validation_certificate_arn: resource.field('validation_certificate_arn'),
    },
    iot_event_configurations(name, block): {
      local resource = blockType.resource('aws_iot_event_configurations', name),
      _: resource._(block, {
        event_configurations: build.template(block.event_configurations),
        id: build.template(std.get(block, 'id', null)),
      }),
      event_configurations: resource.field('event_configurations'),
      id: resource.field('id'),
    },
    iot_indexing_configuration(name, block): {
      local resource = blockType.resource('aws_iot_indexing_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    iot_logging_options(name, block): {
      local resource = blockType.resource('aws_iot_logging_options', name),
      _: resource._(block, {
        default_log_level: build.template(block.default_log_level),
        disable_all_logs: build.template(std.get(block, 'disable_all_logs', null)),
        id: build.template(std.get(block, 'id', null)),
        role_arn: build.template(block.role_arn),
      }),
      default_log_level: resource.field('default_log_level'),
      disable_all_logs: resource.field('disable_all_logs'),
      id: resource.field('id'),
      role_arn: resource.field('role_arn'),
    },
    iot_policy(name, block): {
      local resource = blockType.resource('aws_iot_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_version_id: build.template(std.get(block, 'default_version_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy: build.template(block.policy),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      default_version_id: resource.field('default_version_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy: resource.field('policy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    iot_policy_attachment(name, block): {
      local resource = blockType.resource('aws_iot_policy_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        target: build.template(block.target),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      target: resource.field('target'),
    },
    iot_provisioning_template(name, block): {
      local resource = blockType.resource('aws_iot_provisioning_template', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_version_id: build.template(std.get(block, 'default_version_id', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        provisioning_role_arn: build.template(block.provisioning_role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        template_body: build.template(block.template_body),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      default_version_id: resource.field('default_version_id'),
      description: resource.field('description'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      name: resource.field('name'),
      provisioning_role_arn: resource.field('provisioning_role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      template_body: resource.field('template_body'),
      type: resource.field('type'),
    },
    iot_role_alias(name, block): {
      local resource = blockType.resource('aws_iot_role_alias', name),
      _: resource._(block, {
        alias: build.template(block.alias),
        arn: build.template(std.get(block, 'arn', null)),
        credential_duration: build.template(std.get(block, 'credential_duration', null)),
        id: build.template(std.get(block, 'id', null)),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      alias: resource.field('alias'),
      arn: resource.field('arn'),
      credential_duration: resource.field('credential_duration'),
      id: resource.field('id'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    iot_thing(name, block): {
      local resource = blockType.resource('aws_iot_thing', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attributes: build.template(std.get(block, 'attributes', null)),
        default_client_id: build.template(std.get(block, 'default_client_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        thing_type_name: build.template(std.get(block, 'thing_type_name', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      attributes: resource.field('attributes'),
      default_client_id: resource.field('default_client_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      thing_type_name: resource.field('thing_type_name'),
      version: resource.field('version'),
    },
    iot_thing_group(name, block): {
      local resource = blockType.resource('aws_iot_thing_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        parent_group_name: build.template(std.get(block, 'parent_group_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      metadata: resource.field('metadata'),
      name: resource.field('name'),
      parent_group_name: resource.field('parent_group_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    iot_thing_group_membership(name, block): {
      local resource = blockType.resource('aws_iot_thing_group_membership', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        override_dynamic_group: build.template(std.get(block, 'override_dynamic_group', null)),
        thing_group_name: build.template(block.thing_group_name),
        thing_name: build.template(block.thing_name),
      }),
      id: resource.field('id'),
      override_dynamic_group: resource.field('override_dynamic_group'),
      thing_group_name: resource.field('thing_group_name'),
      thing_name: resource.field('thing_name'),
    },
    iot_thing_principal_attachment(name, block): {
      local resource = blockType.resource('aws_iot_thing_principal_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        principal: build.template(block.principal),
        thing: build.template(block.thing),
      }),
      id: resource.field('id'),
      principal: resource.field('principal'),
      thing: resource.field('thing'),
    },
    iot_thing_type(name, block): {
      local resource = blockType.resource('aws_iot_thing_type', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        deprecated: build.template(std.get(block, 'deprecated', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      deprecated: resource.field('deprecated'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    iot_topic_rule(name, block): {
      local resource = blockType.resource('aws_iot_topic_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        sql: build.template(block.sql),
        sql_version: build.template(block.sql_version),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      name: resource.field('name'),
      sql: resource.field('sql'),
      sql_version: resource.field('sql_version'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    iot_topic_rule_destination(name, block): {
      local resource = blockType.resource('aws_iot_topic_rule_destination', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      arn: resource.field('arn'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
    },
    ivs_channel(name, block): {
      local resource = blockType.resource('aws_ivs_channel', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        authorized: build.template(std.get(block, 'authorized', null)),
        id: build.template(std.get(block, 'id', null)),
        ingest_endpoint: build.template(std.get(block, 'ingest_endpoint', null)),
        latency_mode: build.template(std.get(block, 'latency_mode', null)),
        name: build.template(std.get(block, 'name', null)),
        playback_url: build.template(std.get(block, 'playback_url', null)),
        recording_configuration_arn: build.template(std.get(block, 'recording_configuration_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      authorized: resource.field('authorized'),
      id: resource.field('id'),
      ingest_endpoint: resource.field('ingest_endpoint'),
      latency_mode: resource.field('latency_mode'),
      name: resource.field('name'),
      playback_url: resource.field('playback_url'),
      recording_configuration_arn: resource.field('recording_configuration_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    ivs_playback_key_pair(name, block): {
      local resource = blockType.resource('aws_ivs_playback_key_pair', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        public_key: build.template(block.public_key),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      name: resource.field('name'),
      public_key: resource.field('public_key'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ivs_recording_configuration(name, block): {
      local resource = blockType.resource('aws_ivs_recording_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        recording_reconnect_window_seconds: build.template(std.get(block, 'recording_reconnect_window_seconds', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      recording_reconnect_window_seconds: resource.field('recording_reconnect_window_seconds'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ivschat_logging_configuration(name, block): {
      local resource = blockType.resource('aws_ivschat_logging_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ivschat_room(name, block): {
      local resource = blockType.resource('aws_ivschat_room', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        logging_configuration_identifiers: build.template(std.get(block, 'logging_configuration_identifiers', null)),
        maximum_message_length: build.template(std.get(block, 'maximum_message_length', null)),
        maximum_message_rate_per_second: build.template(std.get(block, 'maximum_message_rate_per_second', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      logging_configuration_identifiers: resource.field('logging_configuration_identifiers'),
      maximum_message_length: resource.field('maximum_message_length'),
      maximum_message_rate_per_second: resource.field('maximum_message_rate_per_second'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    kendra_data_source(name, block): {
      local resource = blockType.resource('aws_kendra_data_source', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        data_source_id: build.template(std.get(block, 'data_source_id', null)),
        description: build.template(std.get(block, 'description', null)),
        error_message: build.template(std.get(block, 'error_message', null)),
        id: build.template(std.get(block, 'id', null)),
        index_id: build.template(block.index_id),
        language_code: build.template(std.get(block, 'language_code', null)),
        name: build.template(block.name),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        schedule: build.template(std.get(block, 'schedule', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      data_source_id: resource.field('data_source_id'),
      description: resource.field('description'),
      error_message: resource.field('error_message'),
      id: resource.field('id'),
      index_id: resource.field('index_id'),
      language_code: resource.field('language_code'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      schedule: resource.field('schedule'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      updated_at: resource.field('updated_at'),
    },
    kendra_experience(name, block): {
      local resource = blockType.resource('aws_kendra_experience', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        endpoints: build.template(std.get(block, 'endpoints', null)),
        experience_id: build.template(std.get(block, 'experience_id', null)),
        id: build.template(std.get(block, 'id', null)),
        index_id: build.template(block.index_id),
        name: build.template(block.name),
        role_arn: build.template(block.role_arn),
        status: build.template(std.get(block, 'status', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      endpoints: resource.field('endpoints'),
      experience_id: resource.field('experience_id'),
      id: resource.field('id'),
      index_id: resource.field('index_id'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      status: resource.field('status'),
    },
    kendra_faq(name, block): {
      local resource = blockType.resource('aws_kendra_faq', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        error_message: build.template(std.get(block, 'error_message', null)),
        faq_id: build.template(std.get(block, 'faq_id', null)),
        file_format: build.template(std.get(block, 'file_format', null)),
        id: build.template(std.get(block, 'id', null)),
        index_id: build.template(block.index_id),
        language_code: build.template(std.get(block, 'language_code', null)),
        name: build.template(block.name),
        role_arn: build.template(block.role_arn),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      description: resource.field('description'),
      error_message: resource.field('error_message'),
      faq_id: resource.field('faq_id'),
      file_format: resource.field('file_format'),
      id: resource.field('id'),
      index_id: resource.field('index_id'),
      language_code: resource.field('language_code'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      updated_at: resource.field('updated_at'),
    },
    kendra_index(name, block): {
      local resource = blockType.resource('aws_kendra_index', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        edition: build.template(std.get(block, 'edition', null)),
        error_message: build.template(std.get(block, 'error_message', null)),
        id: build.template(std.get(block, 'id', null)),
        index_statistics: build.template(std.get(block, 'index_statistics', null)),
        name: build.template(block.name),
        role_arn: build.template(block.role_arn),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        user_context_policy: build.template(std.get(block, 'user_context_policy', null)),
      }),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      description: resource.field('description'),
      edition: resource.field('edition'),
      error_message: resource.field('error_message'),
      id: resource.field('id'),
      index_statistics: resource.field('index_statistics'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      updated_at: resource.field('updated_at'),
      user_context_policy: resource.field('user_context_policy'),
    },
    kendra_query_suggestions_block_list(name, block): {
      local resource = blockType.resource('aws_kendra_query_suggestions_block_list', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        index_id: build.template(block.index_id),
        name: build.template(block.name),
        query_suggestions_block_list_id: build.template(std.get(block, 'query_suggestions_block_list_id', null)),
        role_arn: build.template(block.role_arn),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      index_id: resource.field('index_id'),
      name: resource.field('name'),
      query_suggestions_block_list_id: resource.field('query_suggestions_block_list_id'),
      role_arn: resource.field('role_arn'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    kendra_thesaurus(name, block): {
      local resource = blockType.resource('aws_kendra_thesaurus', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        index_id: build.template(block.index_id),
        name: build.template(block.name),
        role_arn: build.template(block.role_arn),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        thesaurus_id: build.template(std.get(block, 'thesaurus_id', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      index_id: resource.field('index_id'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      thesaurus_id: resource.field('thesaurus_id'),
    },
    key_pair(name, block): {
      local resource = blockType.resource('aws_key_pair', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        key_name: build.template(std.get(block, 'key_name', null)),
        key_name_prefix: build.template(std.get(block, 'key_name_prefix', null)),
        key_pair_id: build.template(std.get(block, 'key_pair_id', null)),
        key_type: build.template(std.get(block, 'key_type', null)),
        public_key: build.template(block.public_key),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      key_name: resource.field('key_name'),
      key_name_prefix: resource.field('key_name_prefix'),
      key_pair_id: resource.field('key_pair_id'),
      key_type: resource.field('key_type'),
      public_key: resource.field('public_key'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    keyspaces_keyspace(name, block): {
      local resource = blockType.resource('aws_keyspaces_keyspace', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    keyspaces_table(name, block): {
      local resource = blockType.resource('aws_keyspaces_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_time_to_live: build.template(std.get(block, 'default_time_to_live', null)),
        id: build.template(std.get(block, 'id', null)),
        keyspace_name: build.template(block.keyspace_name),
        table_name: build.template(block.table_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      default_time_to_live: resource.field('default_time_to_live'),
      id: resource.field('id'),
      keyspace_name: resource.field('keyspace_name'),
      table_name: resource.field('table_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    kinesis_analytics_application(name, block): {
      local resource = blockType.resource('aws_kinesis_analytics_application', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        code: build.template(std.get(block, 'code', null)),
        create_timestamp: build.template(std.get(block, 'create_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_update_timestamp: build.template(std.get(block, 'last_update_timestamp', null)),
        name: build.template(block.name),
        start_application: build.template(std.get(block, 'start_application', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      code: resource.field('code'),
      create_timestamp: resource.field('create_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_update_timestamp: resource.field('last_update_timestamp'),
      name: resource.field('name'),
      start_application: resource.field('start_application'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    kinesis_firehose_delivery_stream(name, block): {
      local resource = blockType.resource('aws_kinesis_firehose_delivery_stream', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        destination: build.template(block.destination),
        destination_id: build.template(std.get(block, 'destination_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
      }),
      arn: resource.field('arn'),
      destination: resource.field('destination'),
      destination_id: resource.field('destination_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version_id: resource.field('version_id'),
    },
    kinesis_resource_policy(name, block): {
      local resource = blockType.resource('aws_kinesis_resource_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        resource_arn: build.template(block.resource_arn),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      resource_arn: resource.field('resource_arn'),
    },
    kinesis_stream(name, block): {
      local resource = blockType.resource('aws_kinesis_stream', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        encryption_type: build.template(std.get(block, 'encryption_type', null)),
        enforce_consumer_deletion: build.template(std.get(block, 'enforce_consumer_deletion', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        name: build.template(block.name),
        retention_period: build.template(std.get(block, 'retention_period', null)),
        shard_count: build.template(std.get(block, 'shard_count', null)),
        shard_level_metrics: build.template(std.get(block, 'shard_level_metrics', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      encryption_type: resource.field('encryption_type'),
      enforce_consumer_deletion: resource.field('enforce_consumer_deletion'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      name: resource.field('name'),
      retention_period: resource.field('retention_period'),
      shard_count: resource.field('shard_count'),
      shard_level_metrics: resource.field('shard_level_metrics'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    kinesis_stream_consumer(name, block): {
      local resource = blockType.resource('aws_kinesis_stream_consumer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        stream_arn: build.template(block.stream_arn),
      }),
      arn: resource.field('arn'),
      creation_timestamp: resource.field('creation_timestamp'),
      id: resource.field('id'),
      name: resource.field('name'),
      stream_arn: resource.field('stream_arn'),
    },
    kinesis_video_stream(name, block): {
      local resource = blockType.resource('aws_kinesis_video_stream', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        data_retention_in_hours: build.template(std.get(block, 'data_retention_in_hours', null)),
        device_name: build.template(std.get(block, 'device_name', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        media_type: build.template(std.get(block, 'media_type', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      data_retention_in_hours: resource.field('data_retention_in_hours'),
      device_name: resource.field('device_name'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      media_type: resource.field('media_type'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    kinesisanalyticsv2_application(name, block): {
      local resource = blockType.resource('aws_kinesisanalyticsv2_application', name),
      _: resource._(block, {
        application_mode: build.template(std.get(block, 'application_mode', null)),
        arn: build.template(std.get(block, 'arn', null)),
        create_timestamp: build.template(std.get(block, 'create_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        force_stop: build.template(std.get(block, 'force_stop', null)),
        id: build.template(std.get(block, 'id', null)),
        last_update_timestamp: build.template(std.get(block, 'last_update_timestamp', null)),
        name: build.template(block.name),
        runtime_environment: build.template(block.runtime_environment),
        service_execution_role: build.template(block.service_execution_role),
        start_application: build.template(std.get(block, 'start_application', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
      }),
      application_mode: resource.field('application_mode'),
      arn: resource.field('arn'),
      create_timestamp: resource.field('create_timestamp'),
      description: resource.field('description'),
      force_stop: resource.field('force_stop'),
      id: resource.field('id'),
      last_update_timestamp: resource.field('last_update_timestamp'),
      name: resource.field('name'),
      runtime_environment: resource.field('runtime_environment'),
      service_execution_role: resource.field('service_execution_role'),
      start_application: resource.field('start_application'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version_id: resource.field('version_id'),
    },
    kinesisanalyticsv2_application_snapshot(name, block): {
      local resource = blockType.resource('aws_kinesisanalyticsv2_application_snapshot', name),
      _: resource._(block, {
        application_name: build.template(block.application_name),
        application_version_id: build.template(std.get(block, 'application_version_id', null)),
        id: build.template(std.get(block, 'id', null)),
        snapshot_creation_timestamp: build.template(std.get(block, 'snapshot_creation_timestamp', null)),
        snapshot_name: build.template(block.snapshot_name),
      }),
      application_name: resource.field('application_name'),
      application_version_id: resource.field('application_version_id'),
      id: resource.field('id'),
      snapshot_creation_timestamp: resource.field('snapshot_creation_timestamp'),
      snapshot_name: resource.field('snapshot_name'),
    },
    kms_alias(name, block): {
      local resource = blockType.resource('aws_kms_alias', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        target_key_arn: build.template(std.get(block, 'target_key_arn', null)),
        target_key_id: build.template(block.target_key_id),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      target_key_arn: resource.field('target_key_arn'),
      target_key_id: resource.field('target_key_id'),
    },
    kms_ciphertext(name, block): {
      local resource = blockType.resource('aws_kms_ciphertext', name),
      _: resource._(block, {
        ciphertext_blob: build.template(std.get(block, 'ciphertext_blob', null)),
        context: build.template(std.get(block, 'context', null)),
        id: build.template(std.get(block, 'id', null)),
        key_id: build.template(block.key_id),
        plaintext: build.template(block.plaintext),
      }),
      ciphertext_blob: resource.field('ciphertext_blob'),
      context: resource.field('context'),
      id: resource.field('id'),
      key_id: resource.field('key_id'),
      plaintext: resource.field('plaintext'),
    },
    kms_custom_key_store(name, block): {
      local resource = blockType.resource('aws_kms_custom_key_store', name),
      _: resource._(block, {
        cloud_hsm_cluster_id: build.template(block.cloud_hsm_cluster_id),
        custom_key_store_name: build.template(block.custom_key_store_name),
        id: build.template(std.get(block, 'id', null)),
        key_store_password: build.template(block.key_store_password),
        trust_anchor_certificate: build.template(block.trust_anchor_certificate),
      }),
      cloud_hsm_cluster_id: resource.field('cloud_hsm_cluster_id'),
      custom_key_store_name: resource.field('custom_key_store_name'),
      id: resource.field('id'),
      key_store_password: resource.field('key_store_password'),
      trust_anchor_certificate: resource.field('trust_anchor_certificate'),
    },
    kms_external_key(name, block): {
      local resource = blockType.resource('aws_kms_external_key', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bypass_policy_lockout_safety_check: build.template(std.get(block, 'bypass_policy_lockout_safety_check', null)),
        deletion_window_in_days: build.template(std.get(block, 'deletion_window_in_days', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        expiration_model: build.template(std.get(block, 'expiration_model', null)),
        id: build.template(std.get(block, 'id', null)),
        key_material_base64: build.template(std.get(block, 'key_material_base64', null)),
        key_state: build.template(std.get(block, 'key_state', null)),
        key_usage: build.template(std.get(block, 'key_usage', null)),
        multi_region: build.template(std.get(block, 'multi_region', null)),
        policy: build.template(std.get(block, 'policy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        valid_to: build.template(std.get(block, 'valid_to', null)),
      }),
      arn: resource.field('arn'),
      bypass_policy_lockout_safety_check: resource.field('bypass_policy_lockout_safety_check'),
      deletion_window_in_days: resource.field('deletion_window_in_days'),
      description: resource.field('description'),
      enabled: resource.field('enabled'),
      expiration_model: resource.field('expiration_model'),
      id: resource.field('id'),
      key_material_base64: resource.field('key_material_base64'),
      key_state: resource.field('key_state'),
      key_usage: resource.field('key_usage'),
      multi_region: resource.field('multi_region'),
      policy: resource.field('policy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      valid_to: resource.field('valid_to'),
    },
    kms_grant(name, block): {
      local resource = blockType.resource('aws_kms_grant', name),
      _: resource._(block, {
        grant_creation_tokens: build.template(std.get(block, 'grant_creation_tokens', null)),
        grant_id: build.template(std.get(block, 'grant_id', null)),
        grant_token: build.template(std.get(block, 'grant_token', null)),
        grantee_principal: build.template(block.grantee_principal),
        id: build.template(std.get(block, 'id', null)),
        key_id: build.template(block.key_id),
        name: build.template(std.get(block, 'name', null)),
        operations: build.template(block.operations),
        retire_on_delete: build.template(std.get(block, 'retire_on_delete', null)),
        retiring_principal: build.template(std.get(block, 'retiring_principal', null)),
      }),
      grant_creation_tokens: resource.field('grant_creation_tokens'),
      grant_id: resource.field('grant_id'),
      grant_token: resource.field('grant_token'),
      grantee_principal: resource.field('grantee_principal'),
      id: resource.field('id'),
      key_id: resource.field('key_id'),
      name: resource.field('name'),
      operations: resource.field('operations'),
      retire_on_delete: resource.field('retire_on_delete'),
      retiring_principal: resource.field('retiring_principal'),
    },
    kms_key(name, block): {
      local resource = blockType.resource('aws_kms_key', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bypass_policy_lockout_safety_check: build.template(std.get(block, 'bypass_policy_lockout_safety_check', null)),
        custom_key_store_id: build.template(std.get(block, 'custom_key_store_id', null)),
        customer_master_key_spec: build.template(std.get(block, 'customer_master_key_spec', null)),
        deletion_window_in_days: build.template(std.get(block, 'deletion_window_in_days', null)),
        description: build.template(std.get(block, 'description', null)),
        enable_key_rotation: build.template(std.get(block, 'enable_key_rotation', null)),
        id: build.template(std.get(block, 'id', null)),
        is_enabled: build.template(std.get(block, 'is_enabled', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
        key_usage: build.template(std.get(block, 'key_usage', null)),
        multi_region: build.template(std.get(block, 'multi_region', null)),
        policy: build.template(std.get(block, 'policy', null)),
        rotation_period_in_days: build.template(std.get(block, 'rotation_period_in_days', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        xks_key_id: build.template(std.get(block, 'xks_key_id', null)),
      }),
      arn: resource.field('arn'),
      bypass_policy_lockout_safety_check: resource.field('bypass_policy_lockout_safety_check'),
      custom_key_store_id: resource.field('custom_key_store_id'),
      customer_master_key_spec: resource.field('customer_master_key_spec'),
      deletion_window_in_days: resource.field('deletion_window_in_days'),
      description: resource.field('description'),
      enable_key_rotation: resource.field('enable_key_rotation'),
      id: resource.field('id'),
      is_enabled: resource.field('is_enabled'),
      key_id: resource.field('key_id'),
      key_usage: resource.field('key_usage'),
      multi_region: resource.field('multi_region'),
      policy: resource.field('policy'),
      rotation_period_in_days: resource.field('rotation_period_in_days'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      xks_key_id: resource.field('xks_key_id'),
    },
    kms_key_policy(name, block): {
      local resource = blockType.resource('aws_kms_key_policy', name),
      _: resource._(block, {
        bypass_policy_lockout_safety_check: build.template(std.get(block, 'bypass_policy_lockout_safety_check', null)),
        id: build.template(std.get(block, 'id', null)),
        key_id: build.template(block.key_id),
        policy: build.template(block.policy),
      }),
      bypass_policy_lockout_safety_check: resource.field('bypass_policy_lockout_safety_check'),
      id: resource.field('id'),
      key_id: resource.field('key_id'),
      policy: resource.field('policy'),
    },
    kms_replica_external_key(name, block): {
      local resource = blockType.resource('aws_kms_replica_external_key', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bypass_policy_lockout_safety_check: build.template(std.get(block, 'bypass_policy_lockout_safety_check', null)),
        deletion_window_in_days: build.template(std.get(block, 'deletion_window_in_days', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        expiration_model: build.template(std.get(block, 'expiration_model', null)),
        id: build.template(std.get(block, 'id', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
        key_material_base64: build.template(std.get(block, 'key_material_base64', null)),
        key_state: build.template(std.get(block, 'key_state', null)),
        key_usage: build.template(std.get(block, 'key_usage', null)),
        policy: build.template(std.get(block, 'policy', null)),
        primary_key_arn: build.template(block.primary_key_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        valid_to: build.template(std.get(block, 'valid_to', null)),
      }),
      arn: resource.field('arn'),
      bypass_policy_lockout_safety_check: resource.field('bypass_policy_lockout_safety_check'),
      deletion_window_in_days: resource.field('deletion_window_in_days'),
      description: resource.field('description'),
      enabled: resource.field('enabled'),
      expiration_model: resource.field('expiration_model'),
      id: resource.field('id'),
      key_id: resource.field('key_id'),
      key_material_base64: resource.field('key_material_base64'),
      key_state: resource.field('key_state'),
      key_usage: resource.field('key_usage'),
      policy: resource.field('policy'),
      primary_key_arn: resource.field('primary_key_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      valid_to: resource.field('valid_to'),
    },
    kms_replica_key(name, block): {
      local resource = blockType.resource('aws_kms_replica_key', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bypass_policy_lockout_safety_check: build.template(std.get(block, 'bypass_policy_lockout_safety_check', null)),
        deletion_window_in_days: build.template(std.get(block, 'deletion_window_in_days', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
        key_rotation_enabled: build.template(std.get(block, 'key_rotation_enabled', null)),
        key_spec: build.template(std.get(block, 'key_spec', null)),
        key_usage: build.template(std.get(block, 'key_usage', null)),
        policy: build.template(std.get(block, 'policy', null)),
        primary_key_arn: build.template(block.primary_key_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      bypass_policy_lockout_safety_check: resource.field('bypass_policy_lockout_safety_check'),
      deletion_window_in_days: resource.field('deletion_window_in_days'),
      description: resource.field('description'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      key_id: resource.field('key_id'),
      key_rotation_enabled: resource.field('key_rotation_enabled'),
      key_spec: resource.field('key_spec'),
      key_usage: resource.field('key_usage'),
      policy: resource.field('policy'),
      primary_key_arn: resource.field('primary_key_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    lakeformation_data_cells_filter(name, block): {
      local resource = blockType.resource('aws_lakeformation_data_cells_filter', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    lakeformation_data_lake_settings(name, block): {
      local resource = blockType.resource('aws_lakeformation_data_lake_settings', name),
      _: resource._(block, {
        admins: build.template(std.get(block, 'admins', null)),
        allow_external_data_filtering: build.template(std.get(block, 'allow_external_data_filtering', null)),
        allow_full_table_external_data_access: build.template(std.get(block, 'allow_full_table_external_data_access', null)),
        authorized_session_tag_value_list: build.template(std.get(block, 'authorized_session_tag_value_list', null)),
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        external_data_filtering_allow_list: build.template(std.get(block, 'external_data_filtering_allow_list', null)),
        id: build.template(std.get(block, 'id', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        read_only_admins: build.template(std.get(block, 'read_only_admins', null)),
        trusted_resource_owners: build.template(std.get(block, 'trusted_resource_owners', null)),
      }),
      admins: resource.field('admins'),
      allow_external_data_filtering: resource.field('allow_external_data_filtering'),
      allow_full_table_external_data_access: resource.field('allow_full_table_external_data_access'),
      authorized_session_tag_value_list: resource.field('authorized_session_tag_value_list'),
      catalog_id: resource.field('catalog_id'),
      external_data_filtering_allow_list: resource.field('external_data_filtering_allow_list'),
      id: resource.field('id'),
      parameters: resource.field('parameters'),
      read_only_admins: resource.field('read_only_admins'),
      trusted_resource_owners: resource.field('trusted_resource_owners'),
    },
    lakeformation_lf_tag(name, block): {
      local resource = blockType.resource('aws_lakeformation_lf_tag', name),
      _: resource._(block, {
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        values: build.template(block.values),
      }),
      catalog_id: resource.field('catalog_id'),
      id: resource.field('id'),
      key: resource.field('key'),
      values: resource.field('values'),
    },
    lakeformation_permissions(name, block): {
      local resource = blockType.resource('aws_lakeformation_permissions', name),
      _: resource._(block, {
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        catalog_resource: build.template(std.get(block, 'catalog_resource', null)),
        id: build.template(std.get(block, 'id', null)),
        permissions: build.template(block.permissions),
        permissions_with_grant_option: build.template(std.get(block, 'permissions_with_grant_option', null)),
        principal: build.template(block.principal),
      }),
      catalog_id: resource.field('catalog_id'),
      catalog_resource: resource.field('catalog_resource'),
      id: resource.field('id'),
      permissions: resource.field('permissions'),
      permissions_with_grant_option: resource.field('permissions_with_grant_option'),
      principal: resource.field('principal'),
    },
    lakeformation_resource(name, block): {
      local resource = blockType.resource('aws_lakeformation_resource', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        hybrid_access_enabled: build.template(std.get(block, 'hybrid_access_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        use_service_linked_role: build.template(std.get(block, 'use_service_linked_role', null)),
        with_federation: build.template(std.get(block, 'with_federation', null)),
      }),
      arn: resource.field('arn'),
      hybrid_access_enabled: resource.field('hybrid_access_enabled'),
      id: resource.field('id'),
      last_modified: resource.field('last_modified'),
      role_arn: resource.field('role_arn'),
      use_service_linked_role: resource.field('use_service_linked_role'),
      with_federation: resource.field('with_federation'),
    },
    lakeformation_resource_lf_tag(name, block): {
      local resource = blockType.resource('aws_lakeformation_resource_lf_tag', name),
      _: resource._(block, {
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      catalog_id: resource.field('catalog_id'),
      id: resource.field('id'),
    },
    lakeformation_resource_lf_tags(name, block): {
      local resource = blockType.resource('aws_lakeformation_resource_lf_tags', name),
      _: resource._(block, {
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      catalog_id: resource.field('catalog_id'),
      id: resource.field('id'),
    },
    lambda_alias(name, block): {
      local resource = blockType.resource('aws_lambda_alias', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        function_name: build.template(block.function_name),
        function_version: build.template(block.function_version),
        id: build.template(std.get(block, 'id', null)),
        invoke_arn: build.template(std.get(block, 'invoke_arn', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      function_name: resource.field('function_name'),
      function_version: resource.field('function_version'),
      id: resource.field('id'),
      invoke_arn: resource.field('invoke_arn'),
      name: resource.field('name'),
    },
    lambda_code_signing_config(name, block): {
      local resource = blockType.resource('aws_lambda_code_signing_config', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        config_id: build.template(std.get(block, 'config_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      config_id: resource.field('config_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_modified: resource.field('last_modified'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    lambda_event_source_mapping(name, block): {
      local resource = blockType.resource('aws_lambda_event_source_mapping', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        batch_size: build.template(std.get(block, 'batch_size', null)),
        bisect_batch_on_function_error: build.template(std.get(block, 'bisect_batch_on_function_error', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        event_source_arn: build.template(std.get(block, 'event_source_arn', null)),
        function_arn: build.template(std.get(block, 'function_arn', null)),
        function_name: build.template(block.function_name),
        function_response_types: build.template(std.get(block, 'function_response_types', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        last_processing_result: build.template(std.get(block, 'last_processing_result', null)),
        maximum_batching_window_in_seconds: build.template(std.get(block, 'maximum_batching_window_in_seconds', null)),
        maximum_record_age_in_seconds: build.template(std.get(block, 'maximum_record_age_in_seconds', null)),
        maximum_retry_attempts: build.template(std.get(block, 'maximum_retry_attempts', null)),
        parallelization_factor: build.template(std.get(block, 'parallelization_factor', null)),
        queues: build.template(std.get(block, 'queues', null)),
        starting_position: build.template(std.get(block, 'starting_position', null)),
        starting_position_timestamp: build.template(std.get(block, 'starting_position_timestamp', null)),
        state: build.template(std.get(block, 'state', null)),
        state_transition_reason: build.template(std.get(block, 'state_transition_reason', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        topics: build.template(std.get(block, 'topics', null)),
        tumbling_window_in_seconds: build.template(std.get(block, 'tumbling_window_in_seconds', null)),
        uuid: build.template(std.get(block, 'uuid', null)),
      }),
      arn: resource.field('arn'),
      batch_size: resource.field('batch_size'),
      bisect_batch_on_function_error: resource.field('bisect_batch_on_function_error'),
      enabled: resource.field('enabled'),
      event_source_arn: resource.field('event_source_arn'),
      function_arn: resource.field('function_arn'),
      function_name: resource.field('function_name'),
      function_response_types: resource.field('function_response_types'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      last_modified: resource.field('last_modified'),
      last_processing_result: resource.field('last_processing_result'),
      maximum_batching_window_in_seconds: resource.field('maximum_batching_window_in_seconds'),
      maximum_record_age_in_seconds: resource.field('maximum_record_age_in_seconds'),
      maximum_retry_attempts: resource.field('maximum_retry_attempts'),
      parallelization_factor: resource.field('parallelization_factor'),
      queues: resource.field('queues'),
      starting_position: resource.field('starting_position'),
      starting_position_timestamp: resource.field('starting_position_timestamp'),
      state: resource.field('state'),
      state_transition_reason: resource.field('state_transition_reason'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      topics: resource.field('topics'),
      tumbling_window_in_seconds: resource.field('tumbling_window_in_seconds'),
      uuid: resource.field('uuid'),
    },
    lambda_function(name, block): {
      local resource = blockType.resource('aws_lambda_function', name),
      _: resource._(block, {
        architectures: build.template(std.get(block, 'architectures', null)),
        arn: build.template(std.get(block, 'arn', null)),
        code_sha256: build.template(std.get(block, 'code_sha256', null)),
        code_signing_config_arn: build.template(std.get(block, 'code_signing_config_arn', null)),
        description: build.template(std.get(block, 'description', null)),
        filename: build.template(std.get(block, 'filename', null)),
        function_name: build.template(block.function_name),
        handler: build.template(std.get(block, 'handler', null)),
        id: build.template(std.get(block, 'id', null)),
        image_uri: build.template(std.get(block, 'image_uri', null)),
        invoke_arn: build.template(std.get(block, 'invoke_arn', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        layers: build.template(std.get(block, 'layers', null)),
        memory_size: build.template(std.get(block, 'memory_size', null)),
        package_type: build.template(std.get(block, 'package_type', null)),
        publish: build.template(std.get(block, 'publish', null)),
        qualified_arn: build.template(std.get(block, 'qualified_arn', null)),
        qualified_invoke_arn: build.template(std.get(block, 'qualified_invoke_arn', null)),
        replace_security_groups_on_destroy: build.template(std.get(block, 'replace_security_groups_on_destroy', null)),
        replacement_security_group_ids: build.template(std.get(block, 'replacement_security_group_ids', null)),
        reserved_concurrent_executions: build.template(std.get(block, 'reserved_concurrent_executions', null)),
        role: build.template(block.role),
        runtime: build.template(std.get(block, 'runtime', null)),
        s3_bucket: build.template(std.get(block, 's3_bucket', null)),
        s3_key: build.template(std.get(block, 's3_key', null)),
        s3_object_version: build.template(std.get(block, 's3_object_version', null)),
        signing_job_arn: build.template(std.get(block, 'signing_job_arn', null)),
        signing_profile_version_arn: build.template(std.get(block, 'signing_profile_version_arn', null)),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        source_code_hash: build.template(std.get(block, 'source_code_hash', null)),
        source_code_size: build.template(std.get(block, 'source_code_size', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      architectures: resource.field('architectures'),
      arn: resource.field('arn'),
      code_sha256: resource.field('code_sha256'),
      code_signing_config_arn: resource.field('code_signing_config_arn'),
      description: resource.field('description'),
      filename: resource.field('filename'),
      function_name: resource.field('function_name'),
      handler: resource.field('handler'),
      id: resource.field('id'),
      image_uri: resource.field('image_uri'),
      invoke_arn: resource.field('invoke_arn'),
      kms_key_arn: resource.field('kms_key_arn'),
      last_modified: resource.field('last_modified'),
      layers: resource.field('layers'),
      memory_size: resource.field('memory_size'),
      package_type: resource.field('package_type'),
      publish: resource.field('publish'),
      qualified_arn: resource.field('qualified_arn'),
      qualified_invoke_arn: resource.field('qualified_invoke_arn'),
      replace_security_groups_on_destroy: resource.field('replace_security_groups_on_destroy'),
      replacement_security_group_ids: resource.field('replacement_security_group_ids'),
      reserved_concurrent_executions: resource.field('reserved_concurrent_executions'),
      role: resource.field('role'),
      runtime: resource.field('runtime'),
      s3_bucket: resource.field('s3_bucket'),
      s3_key: resource.field('s3_key'),
      s3_object_version: resource.field('s3_object_version'),
      signing_job_arn: resource.field('signing_job_arn'),
      signing_profile_version_arn: resource.field('signing_profile_version_arn'),
      skip_destroy: resource.field('skip_destroy'),
      source_code_hash: resource.field('source_code_hash'),
      source_code_size: resource.field('source_code_size'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      timeout: resource.field('timeout'),
      version: resource.field('version'),
    },
    lambda_function_event_invoke_config(name, block): {
      local resource = blockType.resource('aws_lambda_function_event_invoke_config', name),
      _: resource._(block, {
        function_name: build.template(block.function_name),
        id: build.template(std.get(block, 'id', null)),
        maximum_event_age_in_seconds: build.template(std.get(block, 'maximum_event_age_in_seconds', null)),
        maximum_retry_attempts: build.template(std.get(block, 'maximum_retry_attempts', null)),
        qualifier: build.template(std.get(block, 'qualifier', null)),
      }),
      function_name: resource.field('function_name'),
      id: resource.field('id'),
      maximum_event_age_in_seconds: resource.field('maximum_event_age_in_seconds'),
      maximum_retry_attempts: resource.field('maximum_retry_attempts'),
      qualifier: resource.field('qualifier'),
    },
    lambda_function_recursion_config(name, block): {
      local resource = blockType.resource('aws_lambda_function_recursion_config', name),
      _: resource._(block, {
        function_name: build.template(block.function_name),
        recursive_loop: build.template(block.recursive_loop),
      }),
      function_name: resource.field('function_name'),
      recursive_loop: resource.field('recursive_loop'),
    },
    lambda_function_url(name, block): {
      local resource = blockType.resource('aws_lambda_function_url', name),
      _: resource._(block, {
        authorization_type: build.template(block.authorization_type),
        function_arn: build.template(std.get(block, 'function_arn', null)),
        function_name: build.template(block.function_name),
        function_url: build.template(std.get(block, 'function_url', null)),
        id: build.template(std.get(block, 'id', null)),
        invoke_mode: build.template(std.get(block, 'invoke_mode', null)),
        qualifier: build.template(std.get(block, 'qualifier', null)),
        url_id: build.template(std.get(block, 'url_id', null)),
      }),
      authorization_type: resource.field('authorization_type'),
      function_arn: resource.field('function_arn'),
      function_name: resource.field('function_name'),
      function_url: resource.field('function_url'),
      id: resource.field('id'),
      invoke_mode: resource.field('invoke_mode'),
      qualifier: resource.field('qualifier'),
      url_id: resource.field('url_id'),
    },
    lambda_invocation(name, block): {
      local resource = blockType.resource('aws_lambda_invocation', name),
      _: resource._(block, {
        function_name: build.template(block.function_name),
        id: build.template(std.get(block, 'id', null)),
        input: build.template(block.input),
        lifecycle_scope: build.template(std.get(block, 'lifecycle_scope', null)),
        qualifier: build.template(std.get(block, 'qualifier', null)),
        result: build.template(std.get(block, 'result', null)),
        terraform_key: build.template(std.get(block, 'terraform_key', null)),
        triggers: build.template(std.get(block, 'triggers', null)),
      }),
      function_name: resource.field('function_name'),
      id: resource.field('id'),
      input: resource.field('input'),
      lifecycle_scope: resource.field('lifecycle_scope'),
      qualifier: resource.field('qualifier'),
      result: resource.field('result'),
      terraform_key: resource.field('terraform_key'),
      triggers: resource.field('triggers'),
    },
    lambda_layer_version(name, block): {
      local resource = blockType.resource('aws_lambda_layer_version', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        code_sha256: build.template(std.get(block, 'code_sha256', null)),
        compatible_architectures: build.template(std.get(block, 'compatible_architectures', null)),
        compatible_runtimes: build.template(std.get(block, 'compatible_runtimes', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        filename: build.template(std.get(block, 'filename', null)),
        id: build.template(std.get(block, 'id', null)),
        layer_arn: build.template(std.get(block, 'layer_arn', null)),
        layer_name: build.template(block.layer_name),
        license_info: build.template(std.get(block, 'license_info', null)),
        s3_bucket: build.template(std.get(block, 's3_bucket', null)),
        s3_key: build.template(std.get(block, 's3_key', null)),
        s3_object_version: build.template(std.get(block, 's3_object_version', null)),
        signing_job_arn: build.template(std.get(block, 'signing_job_arn', null)),
        signing_profile_version_arn: build.template(std.get(block, 'signing_profile_version_arn', null)),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        source_code_hash: build.template(std.get(block, 'source_code_hash', null)),
        source_code_size: build.template(std.get(block, 'source_code_size', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      code_sha256: resource.field('code_sha256'),
      compatible_architectures: resource.field('compatible_architectures'),
      compatible_runtimes: resource.field('compatible_runtimes'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      filename: resource.field('filename'),
      id: resource.field('id'),
      layer_arn: resource.field('layer_arn'),
      layer_name: resource.field('layer_name'),
      license_info: resource.field('license_info'),
      s3_bucket: resource.field('s3_bucket'),
      s3_key: resource.field('s3_key'),
      s3_object_version: resource.field('s3_object_version'),
      signing_job_arn: resource.field('signing_job_arn'),
      signing_profile_version_arn: resource.field('signing_profile_version_arn'),
      skip_destroy: resource.field('skip_destroy'),
      source_code_hash: resource.field('source_code_hash'),
      source_code_size: resource.field('source_code_size'),
      version: resource.field('version'),
    },
    lambda_layer_version_permission(name, block): {
      local resource = blockType.resource('aws_lambda_layer_version_permission', name),
      _: resource._(block, {
        action: build.template(block.action),
        id: build.template(std.get(block, 'id', null)),
        layer_name: build.template(block.layer_name),
        organization_id: build.template(std.get(block, 'organization_id', null)),
        policy: build.template(std.get(block, 'policy', null)),
        principal: build.template(block.principal),
        revision_id: build.template(std.get(block, 'revision_id', null)),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        statement_id: build.template(block.statement_id),
        version_number: build.template(block.version_number),
      }),
      action: resource.field('action'),
      id: resource.field('id'),
      layer_name: resource.field('layer_name'),
      organization_id: resource.field('organization_id'),
      policy: resource.field('policy'),
      principal: resource.field('principal'),
      revision_id: resource.field('revision_id'),
      skip_destroy: resource.field('skip_destroy'),
      statement_id: resource.field('statement_id'),
      version_number: resource.field('version_number'),
    },
    lambda_permission(name, block): {
      local resource = blockType.resource('aws_lambda_permission', name),
      _: resource._(block, {
        action: build.template(block.action),
        event_source_token: build.template(std.get(block, 'event_source_token', null)),
        function_name: build.template(block.function_name),
        function_url_auth_type: build.template(std.get(block, 'function_url_auth_type', null)),
        id: build.template(std.get(block, 'id', null)),
        principal: build.template(block.principal),
        principal_org_id: build.template(std.get(block, 'principal_org_id', null)),
        qualifier: build.template(std.get(block, 'qualifier', null)),
        source_account: build.template(std.get(block, 'source_account', null)),
        source_arn: build.template(std.get(block, 'source_arn', null)),
        statement_id: build.template(std.get(block, 'statement_id', null)),
        statement_id_prefix: build.template(std.get(block, 'statement_id_prefix', null)),
      }),
      action: resource.field('action'),
      event_source_token: resource.field('event_source_token'),
      function_name: resource.field('function_name'),
      function_url_auth_type: resource.field('function_url_auth_type'),
      id: resource.field('id'),
      principal: resource.field('principal'),
      principal_org_id: resource.field('principal_org_id'),
      qualifier: resource.field('qualifier'),
      source_account: resource.field('source_account'),
      source_arn: resource.field('source_arn'),
      statement_id: resource.field('statement_id'),
      statement_id_prefix: resource.field('statement_id_prefix'),
    },
    lambda_provisioned_concurrency_config(name, block): {
      local resource = blockType.resource('aws_lambda_provisioned_concurrency_config', name),
      _: resource._(block, {
        function_name: build.template(block.function_name),
        id: build.template(std.get(block, 'id', null)),
        provisioned_concurrent_executions: build.template(block.provisioned_concurrent_executions),
        qualifier: build.template(block.qualifier),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
      }),
      function_name: resource.field('function_name'),
      id: resource.field('id'),
      provisioned_concurrent_executions: resource.field('provisioned_concurrent_executions'),
      qualifier: resource.field('qualifier'),
      skip_destroy: resource.field('skip_destroy'),
    },
    lambda_runtime_management_config(name, block): {
      local resource = blockType.resource('aws_lambda_runtime_management_config', name),
      _: resource._(block, {
        function_arn: build.template(std.get(block, 'function_arn', null)),
        function_name: build.template(block.function_name),
        qualifier: build.template(std.get(block, 'qualifier', null)),
        runtime_version_arn: build.template(std.get(block, 'runtime_version_arn', null)),
        update_runtime_on: build.template(std.get(block, 'update_runtime_on', null)),
      }),
      function_arn: resource.field('function_arn'),
      function_name: resource.field('function_name'),
      qualifier: resource.field('qualifier'),
      runtime_version_arn: resource.field('runtime_version_arn'),
      update_runtime_on: resource.field('update_runtime_on'),
    },
    launch_configuration(name, block): {
      local resource = blockType.resource('aws_launch_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        associate_public_ip_address: build.template(std.get(block, 'associate_public_ip_address', null)),
        ebs_optimized: build.template(std.get(block, 'ebs_optimized', null)),
        enable_monitoring: build.template(std.get(block, 'enable_monitoring', null)),
        iam_instance_profile: build.template(std.get(block, 'iam_instance_profile', null)),
        id: build.template(std.get(block, 'id', null)),
        image_id: build.template(block.image_id),
        instance_type: build.template(block.instance_type),
        key_name: build.template(std.get(block, 'key_name', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        placement_tenancy: build.template(std.get(block, 'placement_tenancy', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        spot_price: build.template(std.get(block, 'spot_price', null)),
        user_data: build.template(std.get(block, 'user_data', null)),
        user_data_base64: build.template(std.get(block, 'user_data_base64', null)),
      }),
      arn: resource.field('arn'),
      associate_public_ip_address: resource.field('associate_public_ip_address'),
      ebs_optimized: resource.field('ebs_optimized'),
      enable_monitoring: resource.field('enable_monitoring'),
      iam_instance_profile: resource.field('iam_instance_profile'),
      id: resource.field('id'),
      image_id: resource.field('image_id'),
      instance_type: resource.field('instance_type'),
      key_name: resource.field('key_name'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      placement_tenancy: resource.field('placement_tenancy'),
      security_groups: resource.field('security_groups'),
      spot_price: resource.field('spot_price'),
      user_data: resource.field('user_data'),
      user_data_base64: resource.field('user_data_base64'),
    },
    launch_template(name, block): {
      local resource = blockType.resource('aws_launch_template', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_version: build.template(std.get(block, 'default_version', null)),
        description: build.template(std.get(block, 'description', null)),
        disable_api_stop: build.template(std.get(block, 'disable_api_stop', null)),
        disable_api_termination: build.template(std.get(block, 'disable_api_termination', null)),
        ebs_optimized: build.template(std.get(block, 'ebs_optimized', null)),
        id: build.template(std.get(block, 'id', null)),
        image_id: build.template(std.get(block, 'image_id', null)),
        instance_initiated_shutdown_behavior: build.template(std.get(block, 'instance_initiated_shutdown_behavior', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        kernel_id: build.template(std.get(block, 'kernel_id', null)),
        key_name: build.template(std.get(block, 'key_name', null)),
        latest_version: build.template(std.get(block, 'latest_version', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        ram_disk_id: build.template(std.get(block, 'ram_disk_id', null)),
        security_group_names: build.template(std.get(block, 'security_group_names', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        update_default_version: build.template(std.get(block, 'update_default_version', null)),
        user_data: build.template(std.get(block, 'user_data', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      arn: resource.field('arn'),
      default_version: resource.field('default_version'),
      description: resource.field('description'),
      disable_api_stop: resource.field('disable_api_stop'),
      disable_api_termination: resource.field('disable_api_termination'),
      ebs_optimized: resource.field('ebs_optimized'),
      id: resource.field('id'),
      image_id: resource.field('image_id'),
      instance_initiated_shutdown_behavior: resource.field('instance_initiated_shutdown_behavior'),
      instance_type: resource.field('instance_type'),
      kernel_id: resource.field('kernel_id'),
      key_name: resource.field('key_name'),
      latest_version: resource.field('latest_version'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      ram_disk_id: resource.field('ram_disk_id'),
      security_group_names: resource.field('security_group_names'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      update_default_version: resource.field('update_default_version'),
      user_data: resource.field('user_data'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    lb(name, block): {
      local resource = blockType.resource('aws_lb', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        arn_suffix: build.template(std.get(block, 'arn_suffix', null)),
        client_keep_alive: build.template(std.get(block, 'client_keep_alive', null)),
        customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null)),
        desync_mitigation_mode: build.template(std.get(block, 'desync_mitigation_mode', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        dns_record_client_routing_policy: build.template(std.get(block, 'dns_record_client_routing_policy', null)),
        drop_invalid_header_fields: build.template(std.get(block, 'drop_invalid_header_fields', null)),
        enable_cross_zone_load_balancing: build.template(std.get(block, 'enable_cross_zone_load_balancing', null)),
        enable_deletion_protection: build.template(std.get(block, 'enable_deletion_protection', null)),
        enable_http2: build.template(std.get(block, 'enable_http2', null)),
        enable_tls_version_and_cipher_suite_headers: build.template(std.get(block, 'enable_tls_version_and_cipher_suite_headers', null)),
        enable_waf_fail_open: build.template(std.get(block, 'enable_waf_fail_open', null)),
        enable_xff_client_port: build.template(std.get(block, 'enable_xff_client_port', null)),
        enable_zonal_shift: build.template(std.get(block, 'enable_zonal_shift', null)),
        enforce_security_group_inbound_rules_on_private_link_traffic: build.template(std.get(block, 'enforce_security_group_inbound_rules_on_private_link_traffic', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout: build.template(std.get(block, 'idle_timeout', null)),
        internal: build.template(std.get(block, 'internal', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        load_balancer_type: build.template(std.get(block, 'load_balancer_type', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        preserve_host_header: build.template(std.get(block, 'preserve_host_header', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        subnets: build.template(std.get(block, 'subnets', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        xff_header_processing_mode: build.template(std.get(block, 'xff_header_processing_mode', null)),
        zone_id: build.template(std.get(block, 'zone_id', null)),
      }),
      arn: resource.field('arn'),
      arn_suffix: resource.field('arn_suffix'),
      client_keep_alive: resource.field('client_keep_alive'),
      customer_owned_ipv4_pool: resource.field('customer_owned_ipv4_pool'),
      desync_mitigation_mode: resource.field('desync_mitigation_mode'),
      dns_name: resource.field('dns_name'),
      dns_record_client_routing_policy: resource.field('dns_record_client_routing_policy'),
      drop_invalid_header_fields: resource.field('drop_invalid_header_fields'),
      enable_cross_zone_load_balancing: resource.field('enable_cross_zone_load_balancing'),
      enable_deletion_protection: resource.field('enable_deletion_protection'),
      enable_http2: resource.field('enable_http2'),
      enable_tls_version_and_cipher_suite_headers: resource.field('enable_tls_version_and_cipher_suite_headers'),
      enable_waf_fail_open: resource.field('enable_waf_fail_open'),
      enable_xff_client_port: resource.field('enable_xff_client_port'),
      enable_zonal_shift: resource.field('enable_zonal_shift'),
      enforce_security_group_inbound_rules_on_private_link_traffic: resource.field('enforce_security_group_inbound_rules_on_private_link_traffic'),
      id: resource.field('id'),
      idle_timeout: resource.field('idle_timeout'),
      internal: resource.field('internal'),
      ip_address_type: resource.field('ip_address_type'),
      load_balancer_type: resource.field('load_balancer_type'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      preserve_host_header: resource.field('preserve_host_header'),
      security_groups: resource.field('security_groups'),
      subnets: resource.field('subnets'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
      xff_header_processing_mode: resource.field('xff_header_processing_mode'),
      zone_id: resource.field('zone_id'),
    },
    lb_cookie_stickiness_policy(name, block): {
      local resource = blockType.resource('aws_lb_cookie_stickiness_policy', name),
      _: resource._(block, {
        cookie_expiration_period: build.template(std.get(block, 'cookie_expiration_period', null)),
        id: build.template(std.get(block, 'id', null)),
        lb_port: build.template(block.lb_port),
        load_balancer: build.template(block.load_balancer),
        name: build.template(block.name),
      }),
      cookie_expiration_period: resource.field('cookie_expiration_period'),
      id: resource.field('id'),
      lb_port: resource.field('lb_port'),
      load_balancer: resource.field('load_balancer'),
      name: resource.field('name'),
    },
    lb_listener(name, block): {
      local resource = blockType.resource('aws_lb_listener', name),
      _: resource._(block, {
        alpn_policy: build.template(std.get(block, 'alpn_policy', null)),
        arn: build.template(std.get(block, 'arn', null)),
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        load_balancer_arn: build.template(block.load_balancer_arn),
        port: build.template(std.get(block, 'port', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        ssl_policy: build.template(std.get(block, 'ssl_policy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tcp_idle_timeout_seconds: build.template(std.get(block, 'tcp_idle_timeout_seconds', null)),
      }),
      alpn_policy: resource.field('alpn_policy'),
      arn: resource.field('arn'),
      certificate_arn: resource.field('certificate_arn'),
      id: resource.field('id'),
      load_balancer_arn: resource.field('load_balancer_arn'),
      port: resource.field('port'),
      protocol: resource.field('protocol'),
      ssl_policy: resource.field('ssl_policy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tcp_idle_timeout_seconds: resource.field('tcp_idle_timeout_seconds'),
    },
    lb_listener_certificate(name, block): {
      local resource = blockType.resource('aws_lb_listener_certificate', name),
      _: resource._(block, {
        certificate_arn: build.template(block.certificate_arn),
        id: build.template(std.get(block, 'id', null)),
        listener_arn: build.template(block.listener_arn),
      }),
      certificate_arn: resource.field('certificate_arn'),
      id: resource.field('id'),
      listener_arn: resource.field('listener_arn'),
    },
    lb_listener_rule(name, block): {
      local resource = blockType.resource('aws_lb_listener_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        listener_arn: build.template(block.listener_arn),
        priority: build.template(std.get(block, 'priority', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      listener_arn: resource.field('listener_arn'),
      priority: resource.field('priority'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    lb_ssl_negotiation_policy(name, block): {
      local resource = blockType.resource('aws_lb_ssl_negotiation_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        lb_port: build.template(block.lb_port),
        load_balancer: build.template(block.load_balancer),
        name: build.template(block.name),
        triggers: build.template(std.get(block, 'triggers', null)),
      }),
      id: resource.field('id'),
      lb_port: resource.field('lb_port'),
      load_balancer: resource.field('load_balancer'),
      name: resource.field('name'),
      triggers: resource.field('triggers'),
    },
    lb_target_group(name, block): {
      local resource = blockType.resource('aws_lb_target_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        arn_suffix: build.template(std.get(block, 'arn_suffix', null)),
        connection_termination: build.template(std.get(block, 'connection_termination', null)),
        deregistration_delay: build.template(std.get(block, 'deregistration_delay', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        lambda_multi_value_headers_enabled: build.template(std.get(block, 'lambda_multi_value_headers_enabled', null)),
        load_balancer_arns: build.template(std.get(block, 'load_balancer_arns', null)),
        load_balancing_algorithm_type: build.template(std.get(block, 'load_balancing_algorithm_type', null)),
        load_balancing_anomaly_mitigation: build.template(std.get(block, 'load_balancing_anomaly_mitigation', null)),
        load_balancing_cross_zone_enabled: build.template(std.get(block, 'load_balancing_cross_zone_enabled', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        port: build.template(std.get(block, 'port', null)),
        preserve_client_ip: build.template(std.get(block, 'preserve_client_ip', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        protocol_version: build.template(std.get(block, 'protocol_version', null)),
        proxy_protocol_v2: build.template(std.get(block, 'proxy_protocol_v2', null)),
        slow_start: build.template(std.get(block, 'slow_start', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_type: build.template(std.get(block, 'target_type', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      arn_suffix: resource.field('arn_suffix'),
      connection_termination: resource.field('connection_termination'),
      deregistration_delay: resource.field('deregistration_delay'),
      id: resource.field('id'),
      ip_address_type: resource.field('ip_address_type'),
      lambda_multi_value_headers_enabled: resource.field('lambda_multi_value_headers_enabled'),
      load_balancer_arns: resource.field('load_balancer_arns'),
      load_balancing_algorithm_type: resource.field('load_balancing_algorithm_type'),
      load_balancing_anomaly_mitigation: resource.field('load_balancing_anomaly_mitigation'),
      load_balancing_cross_zone_enabled: resource.field('load_balancing_cross_zone_enabled'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      port: resource.field('port'),
      preserve_client_ip: resource.field('preserve_client_ip'),
      protocol: resource.field('protocol'),
      protocol_version: resource.field('protocol_version'),
      proxy_protocol_v2: resource.field('proxy_protocol_v2'),
      slow_start: resource.field('slow_start'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_type: resource.field('target_type'),
      vpc_id: resource.field('vpc_id'),
    },
    lb_target_group_attachment(name, block): {
      local resource = blockType.resource('aws_lb_target_group_attachment', name),
      _: resource._(block, {
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        port: build.template(std.get(block, 'port', null)),
        target_group_arn: build.template(block.target_group_arn),
        target_id: build.template(block.target_id),
      }),
      availability_zone: resource.field('availability_zone'),
      id: resource.field('id'),
      port: resource.field('port'),
      target_group_arn: resource.field('target_group_arn'),
      target_id: resource.field('target_id'),
    },
    lb_trust_store(name, block): {
      local resource = blockType.resource('aws_lb_trust_store', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        arn_suffix: build.template(std.get(block, 'arn_suffix', null)),
        ca_certificates_bundle_s3_bucket: build.template(block.ca_certificates_bundle_s3_bucket),
        ca_certificates_bundle_s3_key: build.template(block.ca_certificates_bundle_s3_key),
        ca_certificates_bundle_s3_object_version: build.template(std.get(block, 'ca_certificates_bundle_s3_object_version', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      arn_suffix: resource.field('arn_suffix'),
      ca_certificates_bundle_s3_bucket: resource.field('ca_certificates_bundle_s3_bucket'),
      ca_certificates_bundle_s3_key: resource.field('ca_certificates_bundle_s3_key'),
      ca_certificates_bundle_s3_object_version: resource.field('ca_certificates_bundle_s3_object_version'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    lb_trust_store_revocation(name, block): {
      local resource = blockType.resource('aws_lb_trust_store_revocation', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        revocation_id: build.template(std.get(block, 'revocation_id', null)),
        revocations_s3_bucket: build.template(block.revocations_s3_bucket),
        revocations_s3_key: build.template(block.revocations_s3_key),
        revocations_s3_object_version: build.template(std.get(block, 'revocations_s3_object_version', null)),
        trust_store_arn: build.template(block.trust_store_arn),
      }),
      id: resource.field('id'),
      revocation_id: resource.field('revocation_id'),
      revocations_s3_bucket: resource.field('revocations_s3_bucket'),
      revocations_s3_key: resource.field('revocations_s3_key'),
      revocations_s3_object_version: resource.field('revocations_s3_object_version'),
      trust_store_arn: resource.field('trust_store_arn'),
    },
    lex_bot(name, block): {
      local resource = blockType.resource('aws_lex_bot', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        checksum: build.template(std.get(block, 'checksum', null)),
        child_directed: build.template(block.child_directed),
        create_version: build.template(std.get(block, 'create_version', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        detect_sentiment: build.template(std.get(block, 'detect_sentiment', null)),
        enable_model_improvements: build.template(std.get(block, 'enable_model_improvements', null)),
        failure_reason: build.template(std.get(block, 'failure_reason', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_session_ttl_in_seconds: build.template(std.get(block, 'idle_session_ttl_in_seconds', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        locale: build.template(std.get(block, 'locale', null)),
        name: build.template(block.name),
        nlu_intent_confidence_threshold: build.template(std.get(block, 'nlu_intent_confidence_threshold', null)),
        process_behavior: build.template(std.get(block, 'process_behavior', null)),
        status: build.template(std.get(block, 'status', null)),
        version: build.template(std.get(block, 'version', null)),
        voice_id: build.template(std.get(block, 'voice_id', null)),
      }),
      arn: resource.field('arn'),
      checksum: resource.field('checksum'),
      child_directed: resource.field('child_directed'),
      create_version: resource.field('create_version'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      detect_sentiment: resource.field('detect_sentiment'),
      enable_model_improvements: resource.field('enable_model_improvements'),
      failure_reason: resource.field('failure_reason'),
      id: resource.field('id'),
      idle_session_ttl_in_seconds: resource.field('idle_session_ttl_in_seconds'),
      last_updated_date: resource.field('last_updated_date'),
      locale: resource.field('locale'),
      name: resource.field('name'),
      nlu_intent_confidence_threshold: resource.field('nlu_intent_confidence_threshold'),
      process_behavior: resource.field('process_behavior'),
      status: resource.field('status'),
      version: resource.field('version'),
      voice_id: resource.field('voice_id'),
    },
    lex_bot_alias(name, block): {
      local resource = blockType.resource('aws_lex_bot_alias', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bot_name: build.template(block.bot_name),
        bot_version: build.template(block.bot_version),
        checksum: build.template(std.get(block, 'checksum', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      bot_name: resource.field('bot_name'),
      bot_version: resource.field('bot_version'),
      checksum: resource.field('checksum'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      name: resource.field('name'),
    },
    lex_intent(name, block): {
      local resource = blockType.resource('aws_lex_intent', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        checksum: build.template(std.get(block, 'checksum', null)),
        create_version: build.template(std.get(block, 'create_version', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        name: build.template(block.name),
        parent_intent_signature: build.template(std.get(block, 'parent_intent_signature', null)),
        sample_utterances: build.template(std.get(block, 'sample_utterances', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      checksum: resource.field('checksum'),
      create_version: resource.field('create_version'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      name: resource.field('name'),
      parent_intent_signature: resource.field('parent_intent_signature'),
      sample_utterances: resource.field('sample_utterances'),
      version: resource.field('version'),
    },
    lex_slot_type(name, block): {
      local resource = blockType.resource('aws_lex_slot_type', name),
      _: resource._(block, {
        checksum: build.template(std.get(block, 'checksum', null)),
        create_version: build.template(std.get(block, 'create_version', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        name: build.template(block.name),
        value_selection_strategy: build.template(std.get(block, 'value_selection_strategy', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      checksum: resource.field('checksum'),
      create_version: resource.field('create_version'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      name: resource.field('name'),
      value_selection_strategy: resource.field('value_selection_strategy'),
      version: resource.field('version'),
    },
    lexv2models_bot(name, block): {
      local resource = blockType.resource('aws_lexv2models_bot', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_session_ttl_in_seconds: build.template(block.idle_session_ttl_in_seconds),
        name: build.template(block.name),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        test_bot_alias_tags: build.template(std.get(block, 'test_bot_alias_tags', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      idle_session_ttl_in_seconds: resource.field('idle_session_ttl_in_seconds'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      test_bot_alias_tags: resource.field('test_bot_alias_tags'),
      type: resource.field('type'),
    },
    lexv2models_bot_locale(name, block): {
      local resource = blockType.resource('aws_lexv2models_bot_locale', name),
      _: resource._(block, {
        bot_id: build.template(block.bot_id),
        bot_version: build.template(block.bot_version),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        locale_id: build.template(block.locale_id),
        n_lu_intent_confidence_threshold: build.template(block.n_lu_intent_confidence_threshold),
        name: build.template(std.get(block, 'name', null)),
      }),
      bot_id: resource.field('bot_id'),
      bot_version: resource.field('bot_version'),
      description: resource.field('description'),
      id: resource.field('id'),
      locale_id: resource.field('locale_id'),
      n_lu_intent_confidence_threshold: resource.field('n_lu_intent_confidence_threshold'),
      name: resource.field('name'),
    },
    lexv2models_bot_version(name, block): {
      local resource = blockType.resource('aws_lexv2models_bot_version', name),
      _: resource._(block, {
        bot_id: build.template(block.bot_id),
        bot_version: build.template(std.get(block, 'bot_version', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        locale_specification: build.template(block.locale_specification),
      }),
      bot_id: resource.field('bot_id'),
      bot_version: resource.field('bot_version'),
      description: resource.field('description'),
      id: resource.field('id'),
      locale_specification: resource.field('locale_specification'),
    },
    lexv2models_intent(name, block): {
      local resource = blockType.resource('aws_lexv2models_intent', name),
      _: resource._(block, {
        bot_id: build.template(block.bot_id),
        bot_version: build.template(block.bot_version),
        creation_date_time: build.template(std.get(block, 'creation_date_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        intent_id: build.template(std.get(block, 'intent_id', null)),
        last_updated_date_time: build.template(std.get(block, 'last_updated_date_time', null)),
        locale_id: build.template(block.locale_id),
        name: build.template(block.name),
        parent_intent_signature: build.template(std.get(block, 'parent_intent_signature', null)),
      }),
      bot_id: resource.field('bot_id'),
      bot_version: resource.field('bot_version'),
      creation_date_time: resource.field('creation_date_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      intent_id: resource.field('intent_id'),
      last_updated_date_time: resource.field('last_updated_date_time'),
      locale_id: resource.field('locale_id'),
      name: resource.field('name'),
      parent_intent_signature: resource.field('parent_intent_signature'),
    },
    lexv2models_slot(name, block): {
      local resource = blockType.resource('aws_lexv2models_slot', name),
      _: resource._(block, {
        bot_id: build.template(block.bot_id),
        bot_version: build.template(block.bot_version),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        intent_id: build.template(block.intent_id),
        locale_id: build.template(block.locale_id),
        name: build.template(block.name),
        slot_id: build.template(std.get(block, 'slot_id', null)),
        slot_type_id: build.template(std.get(block, 'slot_type_id', null)),
      }),
      bot_id: resource.field('bot_id'),
      bot_version: resource.field('bot_version'),
      description: resource.field('description'),
      id: resource.field('id'),
      intent_id: resource.field('intent_id'),
      locale_id: resource.field('locale_id'),
      name: resource.field('name'),
      slot_id: resource.field('slot_id'),
      slot_type_id: resource.field('slot_type_id'),
    },
    lexv2models_slot_type(name, block): {
      local resource = blockType.resource('aws_lexv2models_slot_type', name),
      _: resource._(block, {
        bot_id: build.template(block.bot_id),
        bot_version: build.template(block.bot_version),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        locale_id: build.template(block.locale_id),
        name: build.template(block.name),
        parent_slot_type_signature: build.template(std.get(block, 'parent_slot_type_signature', null)),
        slot_type_id: build.template(std.get(block, 'slot_type_id', null)),
      }),
      bot_id: resource.field('bot_id'),
      bot_version: resource.field('bot_version'),
      description: resource.field('description'),
      id: resource.field('id'),
      locale_id: resource.field('locale_id'),
      name: resource.field('name'),
      parent_slot_type_signature: resource.field('parent_slot_type_signature'),
      slot_type_id: resource.field('slot_type_id'),
    },
    licensemanager_association(name, block): {
      local resource = blockType.resource('aws_licensemanager_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        license_configuration_arn: build.template(block.license_configuration_arn),
        resource_arn: build.template(block.resource_arn),
      }),
      id: resource.field('id'),
      license_configuration_arn: resource.field('license_configuration_arn'),
      resource_arn: resource.field('resource_arn'),
    },
    licensemanager_grant(name, block): {
      local resource = blockType.resource('aws_licensemanager_grant', name),
      _: resource._(block, {
        allowed_operations: build.template(block.allowed_operations),
        arn: build.template(std.get(block, 'arn', null)),
        home_region: build.template(std.get(block, 'home_region', null)),
        id: build.template(std.get(block, 'id', null)),
        license_arn: build.template(block.license_arn),
        name: build.template(block.name),
        parent_arn: build.template(std.get(block, 'parent_arn', null)),
        principal: build.template(block.principal),
        status: build.template(std.get(block, 'status', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      allowed_operations: resource.field('allowed_operations'),
      arn: resource.field('arn'),
      home_region: resource.field('home_region'),
      id: resource.field('id'),
      license_arn: resource.field('license_arn'),
      name: resource.field('name'),
      parent_arn: resource.field('parent_arn'),
      principal: resource.field('principal'),
      status: resource.field('status'),
      version: resource.field('version'),
    },
    licensemanager_grant_accepter(name, block): {
      local resource = blockType.resource('aws_licensemanager_grant_accepter', name),
      _: resource._(block, {
        allowed_operations: build.template(std.get(block, 'allowed_operations', null)),
        grant_arn: build.template(block.grant_arn),
        home_region: build.template(std.get(block, 'home_region', null)),
        id: build.template(std.get(block, 'id', null)),
        license_arn: build.template(std.get(block, 'license_arn', null)),
        name: build.template(std.get(block, 'name', null)),
        parent_arn: build.template(std.get(block, 'parent_arn', null)),
        principal: build.template(std.get(block, 'principal', null)),
        status: build.template(std.get(block, 'status', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      allowed_operations: resource.field('allowed_operations'),
      grant_arn: resource.field('grant_arn'),
      home_region: resource.field('home_region'),
      id: resource.field('id'),
      license_arn: resource.field('license_arn'),
      name: resource.field('name'),
      parent_arn: resource.field('parent_arn'),
      principal: resource.field('principal'),
      status: resource.field('status'),
      version: resource.field('version'),
    },
    licensemanager_license_configuration(name, block): {
      local resource = blockType.resource('aws_licensemanager_license_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        license_count: build.template(std.get(block, 'license_count', null)),
        license_count_hard_limit: build.template(std.get(block, 'license_count_hard_limit', null)),
        license_counting_type: build.template(block.license_counting_type),
        license_rules: build.template(std.get(block, 'license_rules', null)),
        name: build.template(block.name),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      license_count: resource.field('license_count'),
      license_count_hard_limit: resource.field('license_count_hard_limit'),
      license_counting_type: resource.field('license_counting_type'),
      license_rules: resource.field('license_rules'),
      name: resource.field('name'),
      owner_account_id: resource.field('owner_account_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    lightsail_bucket(name, block): {
      local resource = blockType.resource('aws_lightsail_bucket', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        bundle_id: build.template(block.bundle_id),
        created_at: build.template(std.get(block, 'created_at', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        region: build.template(std.get(block, 'region', null)),
        support_code: build.template(std.get(block, 'support_code', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      bundle_id: resource.field('bundle_id'),
      created_at: resource.field('created_at'),
      force_delete: resource.field('force_delete'),
      id: resource.field('id'),
      name: resource.field('name'),
      region: resource.field('region'),
      support_code: resource.field('support_code'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      url: resource.field('url'),
    },
    lightsail_bucket_access_key(name, block): {
      local resource = blockType.resource('aws_lightsail_bucket_access_key', name),
      _: resource._(block, {
        access_key_id: build.template(std.get(block, 'access_key_id', null)),
        bucket_name: build.template(block.bucket_name),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        secret_access_key: build.template(std.get(block, 'secret_access_key', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      access_key_id: resource.field('access_key_id'),
      bucket_name: resource.field('bucket_name'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      secret_access_key: resource.field('secret_access_key'),
      status: resource.field('status'),
    },
    lightsail_bucket_resource_access(name, block): {
      local resource = blockType.resource('aws_lightsail_bucket_resource_access', name),
      _: resource._(block, {
        bucket_name: build.template(block.bucket_name),
        id: build.template(std.get(block, 'id', null)),
        resource_name: build.template(block.resource_name),
      }),
      bucket_name: resource.field('bucket_name'),
      id: resource.field('id'),
      resource_name: resource.field('resource_name'),
    },
    lightsail_certificate(name, block): {
      local resource = blockType.resource('aws_lightsail_certificate', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        domain_validation_options: build.template(std.get(block, 'domain_validation_options', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subject_alternative_names: build.template(std.get(block, 'subject_alternative_names', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      domain_name: resource.field('domain_name'),
      domain_validation_options: resource.field('domain_validation_options'),
      id: resource.field('id'),
      name: resource.field('name'),
      subject_alternative_names: resource.field('subject_alternative_names'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    lightsail_container_service(name, block): {
      local resource = blockType.resource('aws_lightsail_container_service', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        is_disabled: build.template(std.get(block, 'is_disabled', null)),
        name: build.template(block.name),
        power: build.template(block.power),
        power_id: build.template(std.get(block, 'power_id', null)),
        principal_arn: build.template(std.get(block, 'principal_arn', null)),
        private_domain_name: build.template(std.get(block, 'private_domain_name', null)),
        resource_type: build.template(std.get(block, 'resource_type', null)),
        scale: build.template(block.scale),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      is_disabled: resource.field('is_disabled'),
      name: resource.field('name'),
      power: resource.field('power'),
      power_id: resource.field('power_id'),
      principal_arn: resource.field('principal_arn'),
      private_domain_name: resource.field('private_domain_name'),
      resource_type: resource.field('resource_type'),
      scale: resource.field('scale'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      url: resource.field('url'),
    },
    lightsail_container_service_deployment_version(name, block): {
      local resource = blockType.resource('aws_lightsail_container_service_deployment_version', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        service_name: build.template(block.service_name),
        state: build.template(std.get(block, 'state', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      service_name: resource.field('service_name'),
      state: resource.field('state'),
      version: resource.field('version'),
    },
    lightsail_database(name, block): {
      local resource = blockType.resource('aws_lightsail_database', name),
      _: resource._(block, {
        apply_immediately: build.template(std.get(block, 'apply_immediately', null)),
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        backup_retention_enabled: build.template(std.get(block, 'backup_retention_enabled', null)),
        blueprint_id: build.template(block.blueprint_id),
        bundle_id: build.template(block.bundle_id),
        ca_certificate_identifier: build.template(std.get(block, 'ca_certificate_identifier', null)),
        cpu_count: build.template(std.get(block, 'cpu_count', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        disk_size: build.template(std.get(block, 'disk_size', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        final_snapshot_name: build.template(std.get(block, 'final_snapshot_name', null)),
        id: build.template(std.get(block, 'id', null)),
        master_database_name: build.template(block.master_database_name),
        master_endpoint_address: build.template(std.get(block, 'master_endpoint_address', null)),
        master_endpoint_port: build.template(std.get(block, 'master_endpoint_port', null)),
        master_password: build.template(block.master_password),
        master_username: build.template(block.master_username),
        preferred_backup_window: build.template(std.get(block, 'preferred_backup_window', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        ram_size: build.template(std.get(block, 'ram_size', null)),
        relational_database_name: build.template(block.relational_database_name),
        secondary_availability_zone: build.template(std.get(block, 'secondary_availability_zone', null)),
        skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null)),
        support_code: build.template(std.get(block, 'support_code', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      apply_immediately: resource.field('apply_immediately'),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      backup_retention_enabled: resource.field('backup_retention_enabled'),
      blueprint_id: resource.field('blueprint_id'),
      bundle_id: resource.field('bundle_id'),
      ca_certificate_identifier: resource.field('ca_certificate_identifier'),
      cpu_count: resource.field('cpu_count'),
      created_at: resource.field('created_at'),
      disk_size: resource.field('disk_size'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      final_snapshot_name: resource.field('final_snapshot_name'),
      id: resource.field('id'),
      master_database_name: resource.field('master_database_name'),
      master_endpoint_address: resource.field('master_endpoint_address'),
      master_endpoint_port: resource.field('master_endpoint_port'),
      master_password: resource.field('master_password'),
      master_username: resource.field('master_username'),
      preferred_backup_window: resource.field('preferred_backup_window'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      publicly_accessible: resource.field('publicly_accessible'),
      ram_size: resource.field('ram_size'),
      relational_database_name: resource.field('relational_database_name'),
      secondary_availability_zone: resource.field('secondary_availability_zone'),
      skip_final_snapshot: resource.field('skip_final_snapshot'),
      support_code: resource.field('support_code'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    lightsail_disk(name, block): {
      local resource = blockType.resource('aws_lightsail_disk', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(block.availability_zone),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        size_in_gb: build.template(block.size_in_gb),
        support_code: build.template(std.get(block, 'support_code', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      name: resource.field('name'),
      size_in_gb: resource.field('size_in_gb'),
      support_code: resource.field('support_code'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    lightsail_disk_attachment(name, block): {
      local resource = blockType.resource('aws_lightsail_disk_attachment', name),
      _: resource._(block, {
        disk_name: build.template(block.disk_name),
        disk_path: build.template(block.disk_path),
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
      }),
      disk_name: resource.field('disk_name'),
      disk_path: resource.field('disk_path'),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
    },
    lightsail_distribution(name, block): {
      local resource = blockType.resource('aws_lightsail_distribution', name),
      _: resource._(block, {
        alternative_domain_names: build.template(std.get(block, 'alternative_domain_names', null)),
        arn: build.template(std.get(block, 'arn', null)),
        bundle_id: build.template(block.bundle_id),
        certificate_name: build.template(std.get(block, 'certificate_name', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        is_enabled: build.template(std.get(block, 'is_enabled', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        origin_public_dns: build.template(std.get(block, 'origin_public_dns', null)),
        resource_type: build.template(std.get(block, 'resource_type', null)),
        status: build.template(std.get(block, 'status', null)),
        support_code: build.template(std.get(block, 'support_code', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      alternative_domain_names: resource.field('alternative_domain_names'),
      arn: resource.field('arn'),
      bundle_id: resource.field('bundle_id'),
      certificate_name: resource.field('certificate_name'),
      created_at: resource.field('created_at'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      ip_address_type: resource.field('ip_address_type'),
      is_enabled: resource.field('is_enabled'),
      location: resource.field('location'),
      name: resource.field('name'),
      origin_public_dns: resource.field('origin_public_dns'),
      resource_type: resource.field('resource_type'),
      status: resource.field('status'),
      support_code: resource.field('support_code'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    lightsail_domain(name, block): {
      local resource = blockType.resource('aws_lightsail_domain', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      arn: resource.field('arn'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
    },
    lightsail_domain_entry(name, block): {
      local resource = blockType.resource('aws_lightsail_domain_entry', name),
      _: resource._(block, {
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        is_alias: build.template(std.get(block, 'is_alias', null)),
        name: build.template(block.name),
        target: build.template(block.target),
        type: build.template(block.type),
      }),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      is_alias: resource.field('is_alias'),
      name: resource.field('name'),
      target: resource.field('target'),
      type: resource.field('type'),
    },
    lightsail_instance(name, block): {
      local resource = blockType.resource('aws_lightsail_instance', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(block.availability_zone),
        blueprint_id: build.template(block.blueprint_id),
        bundle_id: build.template(block.bundle_id),
        cpu_count: build.template(std.get(block, 'cpu_count', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        ipv6_addresses: build.template(std.get(block, 'ipv6_addresses', null)),
        is_static_ip: build.template(std.get(block, 'is_static_ip', null)),
        key_pair_name: build.template(std.get(block, 'key_pair_name', null)),
        name: build.template(block.name),
        private_ip_address: build.template(std.get(block, 'private_ip_address', null)),
        public_ip_address: build.template(std.get(block, 'public_ip_address', null)),
        ram_size: build.template(std.get(block, 'ram_size', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_data: build.template(std.get(block, 'user_data', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      blueprint_id: resource.field('blueprint_id'),
      bundle_id: resource.field('bundle_id'),
      cpu_count: resource.field('cpu_count'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      ip_address_type: resource.field('ip_address_type'),
      ipv6_addresses: resource.field('ipv6_addresses'),
      is_static_ip: resource.field('is_static_ip'),
      key_pair_name: resource.field('key_pair_name'),
      name: resource.field('name'),
      private_ip_address: resource.field('private_ip_address'),
      public_ip_address: resource.field('public_ip_address'),
      ram_size: resource.field('ram_size'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_data: resource.field('user_data'),
      username: resource.field('username'),
    },
    lightsail_instance_public_ports(name, block): {
      local resource = blockType.resource('aws_lightsail_instance_public_ports', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
      }),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
    },
    lightsail_key_pair(name, block): {
      local resource = blockType.resource('aws_lightsail_key_pair', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        encrypted_fingerprint: build.template(std.get(block, 'encrypted_fingerprint', null)),
        encrypted_private_key: build.template(std.get(block, 'encrypted_private_key', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        pgp_key: build.template(std.get(block, 'pgp_key', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        public_key: build.template(std.get(block, 'public_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      encrypted_fingerprint: resource.field('encrypted_fingerprint'),
      encrypted_private_key: resource.field('encrypted_private_key'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      pgp_key: resource.field('pgp_key'),
      private_key: resource.field('private_key'),
      public_key: resource.field('public_key'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    lightsail_lb(name, block): {
      local resource = blockType.resource('aws_lightsail_lb', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        health_check_path: build.template(std.get(block, 'health_check_path', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_port: build.template(block.instance_port),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        name: build.template(block.name),
        protocol: build.template(std.get(block, 'protocol', null)),
        public_ports: build.template(std.get(block, 'public_ports', null)),
        support_code: build.template(std.get(block, 'support_code', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      dns_name: resource.field('dns_name'),
      health_check_path: resource.field('health_check_path'),
      id: resource.field('id'),
      instance_port: resource.field('instance_port'),
      ip_address_type: resource.field('ip_address_type'),
      name: resource.field('name'),
      protocol: resource.field('protocol'),
      public_ports: resource.field('public_ports'),
      support_code: resource.field('support_code'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    lightsail_lb_attachment(name, block): {
      local resource = blockType.resource('aws_lightsail_lb_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
        lb_name: build.template(block.lb_name),
      }),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
      lb_name: resource.field('lb_name'),
    },
    lightsail_lb_certificate(name, block): {
      local resource = blockType.resource('aws_lightsail_lb_certificate', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        domain_validation_records: build.template(std.get(block, 'domain_validation_records', null)),
        id: build.template(std.get(block, 'id', null)),
        lb_name: build.template(block.lb_name),
        name: build.template(block.name),
        subject_alternative_names: build.template(std.get(block, 'subject_alternative_names', null)),
        support_code: build.template(std.get(block, 'support_code', null)),
      }),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      domain_name: resource.field('domain_name'),
      domain_validation_records: resource.field('domain_validation_records'),
      id: resource.field('id'),
      lb_name: resource.field('lb_name'),
      name: resource.field('name'),
      subject_alternative_names: resource.field('subject_alternative_names'),
      support_code: resource.field('support_code'),
    },
    lightsail_lb_certificate_attachment(name, block): {
      local resource = blockType.resource('aws_lightsail_lb_certificate_attachment', name),
      _: resource._(block, {
        certificate_name: build.template(block.certificate_name),
        id: build.template(std.get(block, 'id', null)),
        lb_name: build.template(block.lb_name),
      }),
      certificate_name: resource.field('certificate_name'),
      id: resource.field('id'),
      lb_name: resource.field('lb_name'),
    },
    lightsail_lb_https_redirection_policy(name, block): {
      local resource = blockType.resource('aws_lightsail_lb_https_redirection_policy', name),
      _: resource._(block, {
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
        lb_name: build.template(block.lb_name),
      }),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      lb_name: resource.field('lb_name'),
    },
    lightsail_lb_stickiness_policy(name, block): {
      local resource = blockType.resource('aws_lightsail_lb_stickiness_policy', name),
      _: resource._(block, {
        cookie_duration: build.template(block.cookie_duration),
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
        lb_name: build.template(block.lb_name),
      }),
      cookie_duration: resource.field('cookie_duration'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      lb_name: resource.field('lb_name'),
    },
    lightsail_static_ip(name, block): {
      local resource = blockType.resource('aws_lightsail_static_ip', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        name: build.template(block.name),
        support_code: build.template(std.get(block, 'support_code', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      name: resource.field('name'),
      support_code: resource.field('support_code'),
    },
    lightsail_static_ip_attachment(name, block): {
      local resource = blockType.resource('aws_lightsail_static_ip_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        static_ip_name: build.template(block.static_ip_name),
      }),
      id: resource.field('id'),
      instance_name: resource.field('instance_name'),
      ip_address: resource.field('ip_address'),
      static_ip_name: resource.field('static_ip_name'),
    },
    load_balancer_backend_server_policy(name, block): {
      local resource = blockType.resource('aws_load_balancer_backend_server_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_port: build.template(block.instance_port),
        load_balancer_name: build.template(block.load_balancer_name),
        policy_names: build.template(std.get(block, 'policy_names', null)),
      }),
      id: resource.field('id'),
      instance_port: resource.field('instance_port'),
      load_balancer_name: resource.field('load_balancer_name'),
      policy_names: resource.field('policy_names'),
    },
    load_balancer_listener_policy(name, block): {
      local resource = blockType.resource('aws_load_balancer_listener_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        load_balancer_name: build.template(block.load_balancer_name),
        load_balancer_port: build.template(block.load_balancer_port),
        policy_names: build.template(std.get(block, 'policy_names', null)),
        triggers: build.template(std.get(block, 'triggers', null)),
      }),
      id: resource.field('id'),
      load_balancer_name: resource.field('load_balancer_name'),
      load_balancer_port: resource.field('load_balancer_port'),
      policy_names: resource.field('policy_names'),
      triggers: resource.field('triggers'),
    },
    load_balancer_policy(name, block): {
      local resource = blockType.resource('aws_load_balancer_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        load_balancer_name: build.template(block.load_balancer_name),
        policy_name: build.template(block.policy_name),
        policy_type_name: build.template(block.policy_type_name),
      }),
      id: resource.field('id'),
      load_balancer_name: resource.field('load_balancer_name'),
      policy_name: resource.field('policy_name'),
      policy_type_name: resource.field('policy_type_name'),
    },
    location_geofence_collection(name, block): {
      local resource = blockType.resource('aws_location_geofence_collection', name),
      _: resource._(block, {
        collection_arn: build.template(std.get(block, 'collection_arn', null)),
        collection_name: build.template(block.collection_name),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      collection_arn: resource.field('collection_arn'),
      collection_name: resource.field('collection_name'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      update_time: resource.field('update_time'),
    },
    location_map(name, block): {
      local resource = blockType.resource('aws_location_map', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        map_arn: build.template(std.get(block, 'map_arn', null)),
        map_name: build.template(block.map_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      map_arn: resource.field('map_arn'),
      map_name: resource.field('map_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      update_time: resource.field('update_time'),
    },
    location_place_index(name, block): {
      local resource = blockType.resource('aws_location_place_index', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        data_source: build.template(block.data_source),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        index_arn: build.template(std.get(block, 'index_arn', null)),
        index_name: build.template(block.index_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      data_source: resource.field('data_source'),
      description: resource.field('description'),
      id: resource.field('id'),
      index_arn: resource.field('index_arn'),
      index_name: resource.field('index_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      update_time: resource.field('update_time'),
    },
    location_route_calculator(name, block): {
      local resource = blockType.resource('aws_location_route_calculator', name),
      _: resource._(block, {
        calculator_arn: build.template(std.get(block, 'calculator_arn', null)),
        calculator_name: build.template(block.calculator_name),
        create_time: build.template(std.get(block, 'create_time', null)),
        data_source: build.template(block.data_source),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      calculator_arn: resource.field('calculator_arn'),
      calculator_name: resource.field('calculator_name'),
      create_time: resource.field('create_time'),
      data_source: resource.field('data_source'),
      description: resource.field('description'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      update_time: resource.field('update_time'),
    },
    location_tracker(name, block): {
      local resource = blockType.resource('aws_location_tracker', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        position_filtering: build.template(std.get(block, 'position_filtering', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tracker_arn: build.template(std.get(block, 'tracker_arn', null)),
        tracker_name: build.template(block.tracker_name),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      position_filtering: resource.field('position_filtering'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tracker_arn: resource.field('tracker_arn'),
      tracker_name: resource.field('tracker_name'),
      update_time: resource.field('update_time'),
    },
    location_tracker_association(name, block): {
      local resource = blockType.resource('aws_location_tracker_association', name),
      _: resource._(block, {
        consumer_arn: build.template(block.consumer_arn),
        id: build.template(std.get(block, 'id', null)),
        tracker_name: build.template(block.tracker_name),
      }),
      consumer_arn: resource.field('consumer_arn'),
      id: resource.field('id'),
      tracker_name: resource.field('tracker_name'),
    },
    m2_application(name, block): {
      local resource = blockType.resource('aws_m2_application', name),
      _: resource._(block, {
        application_id: build.template(std.get(block, 'application_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        current_version: build.template(std.get(block, 'current_version', null)),
        description: build.template(std.get(block, 'description', null)),
        engine_type: build.template(block.engine_type),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        name: build.template(block.name),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      application_id: resource.field('application_id'),
      arn: resource.field('arn'),
      current_version: resource.field('current_version'),
      description: resource.field('description'),
      engine_type: resource.field('engine_type'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    m2_deployment(name, block): {
      local resource = blockType.resource('aws_m2_deployment', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        application_version: build.template(block.application_version),
        deployment_id: build.template(std.get(block, 'deployment_id', null)),
        environment_id: build.template(block.environment_id),
        force_stop: build.template(std.get(block, 'force_stop', null)),
        id: build.template(std.get(block, 'id', null)),
        start: build.template(block.start),
      }),
      application_id: resource.field('application_id'),
      application_version: resource.field('application_version'),
      deployment_id: resource.field('deployment_id'),
      environment_id: resource.field('environment_id'),
      force_stop: resource.field('force_stop'),
      id: resource.field('id'),
      start: resource.field('start'),
    },
    m2_environment(name, block): {
      local resource = blockType.resource('aws_m2_environment', name),
      _: resource._(block, {
        apply_changes_during_maintenance_window: build.template(std.get(block, 'apply_changes_during_maintenance_window', null)),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        engine_type: build.template(block.engine_type),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        environment_id: build.template(std.get(block, 'environment_id', null)),
        force_update: build.template(std.get(block, 'force_update', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_type: build.template(block.instance_type),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        load_balancer_arn: build.template(std.get(block, 'load_balancer_arn', null)),
        name: build.template(block.name),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      apply_changes_during_maintenance_window: resource.field('apply_changes_during_maintenance_window'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      engine_type: resource.field('engine_type'),
      engine_version: resource.field('engine_version'),
      environment_id: resource.field('environment_id'),
      force_update: resource.field('force_update'),
      id: resource.field('id'),
      instance_type: resource.field('instance_type'),
      kms_key_id: resource.field('kms_key_id'),
      load_balancer_arn: resource.field('load_balancer_arn'),
      name: resource.field('name'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      publicly_accessible: resource.field('publicly_accessible'),
      security_group_ids: resource.field('security_group_ids'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    macie2_account(name, block): {
      local resource = blockType.resource('aws_macie2_account', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        finding_publishing_frequency: build.template(std.get(block, 'finding_publishing_frequency', null)),
        id: build.template(std.get(block, 'id', null)),
        service_role: build.template(std.get(block, 'service_role', null)),
        status: build.template(std.get(block, 'status', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      created_at: resource.field('created_at'),
      finding_publishing_frequency: resource.field('finding_publishing_frequency'),
      id: resource.field('id'),
      service_role: resource.field('service_role'),
      status: resource.field('status'),
      updated_at: resource.field('updated_at'),
    },
    macie2_classification_export_configuration(name, block): {
      local resource = blockType.resource('aws_macie2_classification_export_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    macie2_classification_job(name, block): {
      local resource = blockType.resource('aws_macie2_classification_job', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        custom_data_identifier_ids: build.template(std.get(block, 'custom_data_identifier_ids', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        initial_run: build.template(std.get(block, 'initial_run', null)),
        job_arn: build.template(std.get(block, 'job_arn', null)),
        job_id: build.template(std.get(block, 'job_id', null)),
        job_status: build.template(std.get(block, 'job_status', null)),
        job_type: build.template(block.job_type),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        sampling_percentage: build.template(std.get(block, 'sampling_percentage', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_paused_details: build.template(std.get(block, 'user_paused_details', null)),
      }),
      created_at: resource.field('created_at'),
      custom_data_identifier_ids: resource.field('custom_data_identifier_ids'),
      description: resource.field('description'),
      id: resource.field('id'),
      initial_run: resource.field('initial_run'),
      job_arn: resource.field('job_arn'),
      job_id: resource.field('job_id'),
      job_status: resource.field('job_status'),
      job_type: resource.field('job_type'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      sampling_percentage: resource.field('sampling_percentage'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_paused_details: resource.field('user_paused_details'),
    },
    macie2_custom_data_identifier(name, block): {
      local resource = blockType.resource('aws_macie2_custom_data_identifier', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_words: build.template(std.get(block, 'ignore_words', null)),
        keywords: build.template(std.get(block, 'keywords', null)),
        maximum_match_distance: build.template(std.get(block, 'maximum_match_distance', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        regex: build.template(std.get(block, 'regex', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      description: resource.field('description'),
      id: resource.field('id'),
      ignore_words: resource.field('ignore_words'),
      keywords: resource.field('keywords'),
      maximum_match_distance: resource.field('maximum_match_distance'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      regex: resource.field('regex'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    macie2_findings_filter(name, block): {
      local resource = blockType.resource('aws_macie2_findings_filter', name),
      _: resource._(block, {
        action: build.template(block.action),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        position: build.template(std.get(block, 'position', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      action: resource.field('action'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      position: resource.field('position'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    macie2_invitation_accepter(name, block): {
      local resource = blockType.resource('aws_macie2_invitation_accepter', name),
      _: resource._(block, {
        administrator_account_id: build.template(block.administrator_account_id),
        id: build.template(std.get(block, 'id', null)),
        invitation_id: build.template(std.get(block, 'invitation_id', null)),
      }),
      administrator_account_id: resource.field('administrator_account_id'),
      id: resource.field('id'),
      invitation_id: resource.field('invitation_id'),
    },
    macie2_member(name, block): {
      local resource = blockType.resource('aws_macie2_member', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        administrator_account_id: build.template(std.get(block, 'administrator_account_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
        invitation_disable_email_notification: build.template(std.get(block, 'invitation_disable_email_notification', null)),
        invitation_message: build.template(std.get(block, 'invitation_message', null)),
        invite: build.template(std.get(block, 'invite', null)),
        invited_at: build.template(std.get(block, 'invited_at', null)),
        master_account_id: build.template(std.get(block, 'master_account_id', null)),
        relationship_status: build.template(std.get(block, 'relationship_status', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      account_id: resource.field('account_id'),
      administrator_account_id: resource.field('administrator_account_id'),
      arn: resource.field('arn'),
      email: resource.field('email'),
      id: resource.field('id'),
      invitation_disable_email_notification: resource.field('invitation_disable_email_notification'),
      invitation_message: resource.field('invitation_message'),
      invite: resource.field('invite'),
      invited_at: resource.field('invited_at'),
      master_account_id: resource.field('master_account_id'),
      relationship_status: resource.field('relationship_status'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      updated_at: resource.field('updated_at'),
    },
    macie2_organization_admin_account(name, block): {
      local resource = blockType.resource('aws_macie2_organization_admin_account', name),
      _: resource._(block, {
        admin_account_id: build.template(block.admin_account_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      admin_account_id: resource.field('admin_account_id'),
      id: resource.field('id'),
    },
    main_route_table_association(name, block): {
      local resource = blockType.resource('aws_main_route_table_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        original_route_table_id: build.template(std.get(block, 'original_route_table_id', null)),
        route_table_id: build.template(block.route_table_id),
        vpc_id: build.template(block.vpc_id),
      }),
      id: resource.field('id'),
      original_route_table_id: resource.field('original_route_table_id'),
      route_table_id: resource.field('route_table_id'),
      vpc_id: resource.field('vpc_id'),
    },
    media_convert_queue(name, block): {
      local resource = blockType.resource('aws_media_convert_queue', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        pricing_plan: build.template(std.get(block, 'pricing_plan', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      pricing_plan: resource.field('pricing_plan'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    media_package_channel(name, block): {
      local resource = blockType.resource('aws_media_package_channel', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        channel_id: build.template(block.channel_id),
        description: build.template(std.get(block, 'description', null)),
        hls_ingest: build.template(std.get(block, 'hls_ingest', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      channel_id: resource.field('channel_id'),
      description: resource.field('description'),
      hls_ingest: resource.field('hls_ingest'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    media_store_container(name, block): {
      local resource = blockType.resource('aws_media_store_container', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      endpoint: resource.field('endpoint'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    media_store_container_policy(name, block): {
      local resource = blockType.resource('aws_media_store_container_policy', name),
      _: resource._(block, {
        container_name: build.template(block.container_name),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
      }),
      container_name: resource.field('container_name'),
      id: resource.field('id'),
      policy: resource.field('policy'),
    },
    medialive_channel(name, block): {
      local resource = blockType.resource('aws_medialive_channel', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        channel_class: build.template(block.channel_class),
        channel_id: build.template(std.get(block, 'channel_id', null)),
        id: build.template(std.get(block, 'id', null)),
        log_level: build.template(std.get(block, 'log_level', null)),
        name: build.template(block.name),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        start_channel: build.template(std.get(block, 'start_channel', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      channel_class: resource.field('channel_class'),
      channel_id: resource.field('channel_id'),
      id: resource.field('id'),
      log_level: resource.field('log_level'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      start_channel: resource.field('start_channel'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    medialive_input(name, block): {
      local resource = blockType.resource('aws_medialive_input', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attached_channels: build.template(std.get(block, 'attached_channels', null)),
        id: build.template(std.get(block, 'id', null)),
        input_class: build.template(std.get(block, 'input_class', null)),
        input_partner_ids: build.template(std.get(block, 'input_partner_ids', null)),
        input_security_groups: build.template(std.get(block, 'input_security_groups', null)),
        input_source_type: build.template(std.get(block, 'input_source_type', null)),
        name: build.template(block.name),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      attached_channels: resource.field('attached_channels'),
      id: resource.field('id'),
      input_class: resource.field('input_class'),
      input_partner_ids: resource.field('input_partner_ids'),
      input_security_groups: resource.field('input_security_groups'),
      input_source_type: resource.field('input_source_type'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    medialive_input_security_group(name, block): {
      local resource = blockType.resource('aws_medialive_input_security_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        inputs: build.template(std.get(block, 'inputs', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      inputs: resource.field('inputs'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    medialive_multiplex(name, block): {
      local resource = blockType.resource('aws_medialive_multiplex', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zones: build.template(block.availability_zones),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        start_multiplex: build.template(std.get(block, 'start_multiplex', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      availability_zones: resource.field('availability_zones'),
      id: resource.field('id'),
      name: resource.field('name'),
      start_multiplex: resource.field('start_multiplex'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    medialive_multiplex_program(name, block): {
      local resource = blockType.resource('aws_medialive_multiplex_program', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        multiplex_id: build.template(block.multiplex_id),
        program_name: build.template(block.program_name),
      }),
      id: resource.field('id'),
      multiplex_id: resource.field('multiplex_id'),
      program_name: resource.field('program_name'),
    },
    memorydb_acl(name, block): {
      local resource = blockType.resource('aws_memorydb_acl', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        minimum_engine_version: build.template(std.get(block, 'minimum_engine_version', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_names: build.template(std.get(block, 'user_names', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      minimum_engine_version: resource.field('minimum_engine_version'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_names: resource.field('user_names'),
    },
    memorydb_cluster(name, block): {
      local resource = blockType.resource('aws_memorydb_cluster', name),
      _: resource._(block, {
        acl_name: build.template(block.acl_name),
        arn: build.template(std.get(block, 'arn', null)),
        auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null)),
        cluster_endpoint: build.template(std.get(block, 'cluster_endpoint', null)),
        data_tiering: build.template(std.get(block, 'data_tiering', null)),
        description: build.template(std.get(block, 'description', null)),
        engine_patch_version: build.template(std.get(block, 'engine_patch_version', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        final_snapshot_name: build.template(std.get(block, 'final_snapshot_name', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        maintenance_window: build.template(std.get(block, 'maintenance_window', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        node_type: build.template(block.node_type),
        num_replicas_per_shard: build.template(std.get(block, 'num_replicas_per_shard', null)),
        num_shards: build.template(std.get(block, 'num_shards', null)),
        parameter_group_name: build.template(std.get(block, 'parameter_group_name', null)),
        port: build.template(std.get(block, 'port', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        shards: build.template(std.get(block, 'shards', null)),
        snapshot_arns: build.template(std.get(block, 'snapshot_arns', null)),
        snapshot_name: build.template(std.get(block, 'snapshot_name', null)),
        snapshot_retention_limit: build.template(std.get(block, 'snapshot_retention_limit', null)),
        snapshot_window: build.template(std.get(block, 'snapshot_window', null)),
        sns_topic_arn: build.template(std.get(block, 'sns_topic_arn', null)),
        subnet_group_name: build.template(std.get(block, 'subnet_group_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tls_enabled: build.template(std.get(block, 'tls_enabled', null)),
      }),
      acl_name: resource.field('acl_name'),
      arn: resource.field('arn'),
      auto_minor_version_upgrade: resource.field('auto_minor_version_upgrade'),
      cluster_endpoint: resource.field('cluster_endpoint'),
      data_tiering: resource.field('data_tiering'),
      description: resource.field('description'),
      engine_patch_version: resource.field('engine_patch_version'),
      engine_version: resource.field('engine_version'),
      final_snapshot_name: resource.field('final_snapshot_name'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      maintenance_window: resource.field('maintenance_window'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      node_type: resource.field('node_type'),
      num_replicas_per_shard: resource.field('num_replicas_per_shard'),
      num_shards: resource.field('num_shards'),
      parameter_group_name: resource.field('parameter_group_name'),
      port: resource.field('port'),
      security_group_ids: resource.field('security_group_ids'),
      shards: resource.field('shards'),
      snapshot_arns: resource.field('snapshot_arns'),
      snapshot_name: resource.field('snapshot_name'),
      snapshot_retention_limit: resource.field('snapshot_retention_limit'),
      snapshot_window: resource.field('snapshot_window'),
      sns_topic_arn: resource.field('sns_topic_arn'),
      subnet_group_name: resource.field('subnet_group_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tls_enabled: resource.field('tls_enabled'),
    },
    memorydb_parameter_group(name, block): {
      local resource = blockType.resource('aws_memorydb_parameter_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        family: build.template(block.family),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      family: resource.field('family'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    memorydb_snapshot(name, block): {
      local resource = blockType.resource('aws_memorydb_snapshot', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster_configuration: build.template(std.get(block, 'cluster_configuration', null)),
        cluster_name: build.template(block.cluster_name),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        source: build.template(std.get(block, 'source', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      cluster_configuration: resource.field('cluster_configuration'),
      cluster_name: resource.field('cluster_name'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      source: resource.field('source'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    memorydb_subnet_group(name, block): {
      local resource = blockType.resource('aws_memorydb_subnet_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    memorydb_user(name, block): {
      local resource = blockType.resource('aws_memorydb_user', name),
      _: resource._(block, {
        access_string: build.template(block.access_string),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        minimum_engine_version: build.template(std.get(block, 'minimum_engine_version', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_name: build.template(block.user_name),
      }),
      access_string: resource.field('access_string'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      minimum_engine_version: resource.field('minimum_engine_version'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_name: resource.field('user_name'),
    },
    mq_broker(name, block): {
      local resource = blockType.resource('aws_mq_broker', name),
      _: resource._(block, {
        apply_immediately: build.template(std.get(block, 'apply_immediately', null)),
        arn: build.template(std.get(block, 'arn', null)),
        authentication_strategy: build.template(std.get(block, 'authentication_strategy', null)),
        auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null)),
        broker_name: build.template(block.broker_name),
        data_replication_mode: build.template(std.get(block, 'data_replication_mode', null)),
        data_replication_primary_broker_arn: build.template(std.get(block, 'data_replication_primary_broker_arn', null)),
        deployment_mode: build.template(std.get(block, 'deployment_mode', null)),
        engine_type: build.template(block.engine_type),
        engine_version: build.template(block.engine_version),
        host_instance_type: build.template(block.host_instance_type),
        id: build.template(std.get(block, 'id', null)),
        instances: build.template(std.get(block, 'instances', null)),
        pending_data_replication_mode: build.template(std.get(block, 'pending_data_replication_mode', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      apply_immediately: resource.field('apply_immediately'),
      arn: resource.field('arn'),
      authentication_strategy: resource.field('authentication_strategy'),
      auto_minor_version_upgrade: resource.field('auto_minor_version_upgrade'),
      broker_name: resource.field('broker_name'),
      data_replication_mode: resource.field('data_replication_mode'),
      data_replication_primary_broker_arn: resource.field('data_replication_primary_broker_arn'),
      deployment_mode: resource.field('deployment_mode'),
      engine_type: resource.field('engine_type'),
      engine_version: resource.field('engine_version'),
      host_instance_type: resource.field('host_instance_type'),
      id: resource.field('id'),
      instances: resource.field('instances'),
      pending_data_replication_mode: resource.field('pending_data_replication_mode'),
      publicly_accessible: resource.field('publicly_accessible'),
      security_groups: resource.field('security_groups'),
      storage_type: resource.field('storage_type'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    mq_configuration(name, block): {
      local resource = blockType.resource('aws_mq_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        authentication_strategy: build.template(std.get(block, 'authentication_strategy', null)),
        data: build.template(block.data),
        description: build.template(std.get(block, 'description', null)),
        engine_type: build.template(block.engine_type),
        engine_version: build.template(block.engine_version),
        id: build.template(std.get(block, 'id', null)),
        latest_revision: build.template(std.get(block, 'latest_revision', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      authentication_strategy: resource.field('authentication_strategy'),
      data: resource.field('data'),
      description: resource.field('description'),
      engine_type: resource.field('engine_type'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      latest_revision: resource.field('latest_revision'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    msk_cluster(name, block): {
      local resource = blockType.resource('aws_msk_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bootstrap_brokers: build.template(std.get(block, 'bootstrap_brokers', null)),
        bootstrap_brokers_public_sasl_iam: build.template(std.get(block, 'bootstrap_brokers_public_sasl_iam', null)),
        bootstrap_brokers_public_sasl_scram: build.template(std.get(block, 'bootstrap_brokers_public_sasl_scram', null)),
        bootstrap_brokers_public_tls: build.template(std.get(block, 'bootstrap_brokers_public_tls', null)),
        bootstrap_brokers_sasl_iam: build.template(std.get(block, 'bootstrap_brokers_sasl_iam', null)),
        bootstrap_brokers_sasl_scram: build.template(std.get(block, 'bootstrap_brokers_sasl_scram', null)),
        bootstrap_brokers_tls: build.template(std.get(block, 'bootstrap_brokers_tls', null)),
        bootstrap_brokers_vpc_connectivity_sasl_iam: build.template(std.get(block, 'bootstrap_brokers_vpc_connectivity_sasl_iam', null)),
        bootstrap_brokers_vpc_connectivity_sasl_scram: build.template(std.get(block, 'bootstrap_brokers_vpc_connectivity_sasl_scram', null)),
        bootstrap_brokers_vpc_connectivity_tls: build.template(std.get(block, 'bootstrap_brokers_vpc_connectivity_tls', null)),
        cluster_name: build.template(block.cluster_name),
        cluster_uuid: build.template(std.get(block, 'cluster_uuid', null)),
        current_version: build.template(std.get(block, 'current_version', null)),
        enhanced_monitoring: build.template(std.get(block, 'enhanced_monitoring', null)),
        id: build.template(std.get(block, 'id', null)),
        kafka_version: build.template(block.kafka_version),
        number_of_broker_nodes: build.template(block.number_of_broker_nodes),
        storage_mode: build.template(std.get(block, 'storage_mode', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        zookeeper_connect_string: build.template(std.get(block, 'zookeeper_connect_string', null)),
        zookeeper_connect_string_tls: build.template(std.get(block, 'zookeeper_connect_string_tls', null)),
      }),
      arn: resource.field('arn'),
      bootstrap_brokers: resource.field('bootstrap_brokers'),
      bootstrap_brokers_public_sasl_iam: resource.field('bootstrap_brokers_public_sasl_iam'),
      bootstrap_brokers_public_sasl_scram: resource.field('bootstrap_brokers_public_sasl_scram'),
      bootstrap_brokers_public_tls: resource.field('bootstrap_brokers_public_tls'),
      bootstrap_brokers_sasl_iam: resource.field('bootstrap_brokers_sasl_iam'),
      bootstrap_brokers_sasl_scram: resource.field('bootstrap_brokers_sasl_scram'),
      bootstrap_brokers_tls: resource.field('bootstrap_brokers_tls'),
      bootstrap_brokers_vpc_connectivity_sasl_iam: resource.field('bootstrap_brokers_vpc_connectivity_sasl_iam'),
      bootstrap_brokers_vpc_connectivity_sasl_scram: resource.field('bootstrap_brokers_vpc_connectivity_sasl_scram'),
      bootstrap_brokers_vpc_connectivity_tls: resource.field('bootstrap_brokers_vpc_connectivity_tls'),
      cluster_name: resource.field('cluster_name'),
      cluster_uuid: resource.field('cluster_uuid'),
      current_version: resource.field('current_version'),
      enhanced_monitoring: resource.field('enhanced_monitoring'),
      id: resource.field('id'),
      kafka_version: resource.field('kafka_version'),
      number_of_broker_nodes: resource.field('number_of_broker_nodes'),
      storage_mode: resource.field('storage_mode'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      zookeeper_connect_string: resource.field('zookeeper_connect_string'),
      zookeeper_connect_string_tls: resource.field('zookeeper_connect_string_tls'),
    },
    msk_cluster_policy(name, block): {
      local resource = blockType.resource('aws_msk_cluster_policy', name),
      _: resource._(block, {
        cluster_arn: build.template(block.cluster_arn),
        current_version: build.template(std.get(block, 'current_version', null)),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
      }),
      cluster_arn: resource.field('cluster_arn'),
      current_version: resource.field('current_version'),
      id: resource.field('id'),
      policy: resource.field('policy'),
    },
    msk_configuration(name, block): {
      local resource = blockType.resource('aws_msk_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kafka_versions: build.template(std.get(block, 'kafka_versions', null)),
        latest_revision: build.template(std.get(block, 'latest_revision', null)),
        name: build.template(block.name),
        server_properties: build.template(block.server_properties),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      kafka_versions: resource.field('kafka_versions'),
      latest_revision: resource.field('latest_revision'),
      name: resource.field('name'),
      server_properties: resource.field('server_properties'),
    },
    msk_replicator(name, block): {
      local resource = blockType.resource('aws_msk_replicator', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        current_version: build.template(std.get(block, 'current_version', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        replicator_name: build.template(block.replicator_name),
        service_execution_role_arn: build.template(block.service_execution_role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      current_version: resource.field('current_version'),
      description: resource.field('description'),
      id: resource.field('id'),
      replicator_name: resource.field('replicator_name'),
      service_execution_role_arn: resource.field('service_execution_role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    msk_scram_secret_association(name, block): {
      local resource = blockType.resource('aws_msk_scram_secret_association', name),
      _: resource._(block, {
        cluster_arn: build.template(block.cluster_arn),
        id: build.template(std.get(block, 'id', null)),
        secret_arn_list: build.template(block.secret_arn_list),
      }),
      cluster_arn: resource.field('cluster_arn'),
      id: resource.field('id'),
      secret_arn_list: resource.field('secret_arn_list'),
    },
    msk_serverless_cluster(name, block): {
      local resource = blockType.resource('aws_msk_serverless_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster_name: build.template(block.cluster_name),
        cluster_uuid: build.template(std.get(block, 'cluster_uuid', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      cluster_name: resource.field('cluster_name'),
      cluster_uuid: resource.field('cluster_uuid'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    msk_vpc_connection(name, block): {
      local resource = blockType.resource('aws_msk_vpc_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        authentication: build.template(block.authentication),
        client_subnets: build.template(block.client_subnets),
        id: build.template(std.get(block, 'id', null)),
        security_groups: build.template(block.security_groups),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_cluster_arn: build.template(block.target_cluster_arn),
        vpc_id: build.template(block.vpc_id),
      }),
      arn: resource.field('arn'),
      authentication: resource.field('authentication'),
      client_subnets: resource.field('client_subnets'),
      id: resource.field('id'),
      security_groups: resource.field('security_groups'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_cluster_arn: resource.field('target_cluster_arn'),
      vpc_id: resource.field('vpc_id'),
    },
    mskconnect_connector(name, block): {
      local resource = blockType.resource('aws_mskconnect_connector', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        connector_configuration: build.template(block.connector_configuration),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kafkaconnect_version: build.template(block.kafkaconnect_version),
        name: build.template(block.name),
        service_execution_role_arn: build.template(block.service_execution_role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      connector_configuration: resource.field('connector_configuration'),
      description: resource.field('description'),
      id: resource.field('id'),
      kafkaconnect_version: resource.field('kafkaconnect_version'),
      name: resource.field('name'),
      service_execution_role_arn: resource.field('service_execution_role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
    },
    mskconnect_custom_plugin(name, block): {
      local resource = blockType.resource('aws_mskconnect_custom_plugin', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        content_type: build.template(block.content_type),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        latest_revision: build.template(std.get(block, 'latest_revision', null)),
        name: build.template(block.name),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      content_type: resource.field('content_type'),
      description: resource.field('description'),
      id: resource.field('id'),
      latest_revision: resource.field('latest_revision'),
      name: resource.field('name'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    mskconnect_worker_configuration(name, block): {
      local resource = blockType.resource('aws_mskconnect_worker_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        latest_revision: build.template(std.get(block, 'latest_revision', null)),
        name: build.template(block.name),
        properties_file_content: build.template(block.properties_file_content),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      latest_revision: resource.field('latest_revision'),
      name: resource.field('name'),
      properties_file_content: resource.field('properties_file_content'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    mwaa_environment(name, block): {
      local resource = blockType.resource('aws_mwaa_environment', name),
      _: resource._(block, {
        airflow_configuration_options: build.template(std.get(block, 'airflow_configuration_options', null)),
        airflow_version: build.template(std.get(block, 'airflow_version', null)),
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        dag_s3_path: build.template(block.dag_s3_path),
        database_vpc_endpoint_service: build.template(std.get(block, 'database_vpc_endpoint_service', null)),
        endpoint_management: build.template(std.get(block, 'endpoint_management', null)),
        environment_class: build.template(std.get(block, 'environment_class', null)),
        execution_role_arn: build.template(block.execution_role_arn),
        id: build.template(std.get(block, 'id', null)),
        kms_key: build.template(std.get(block, 'kms_key', null)),
        last_updated: build.template(std.get(block, 'last_updated', null)),
        max_webservers: build.template(std.get(block, 'max_webservers', null)),
        max_workers: build.template(std.get(block, 'max_workers', null)),
        min_webservers: build.template(std.get(block, 'min_webservers', null)),
        min_workers: build.template(std.get(block, 'min_workers', null)),
        name: build.template(block.name),
        plugins_s3_object_version: build.template(std.get(block, 'plugins_s3_object_version', null)),
        plugins_s3_path: build.template(std.get(block, 'plugins_s3_path', null)),
        requirements_s3_object_version: build.template(std.get(block, 'requirements_s3_object_version', null)),
        requirements_s3_path: build.template(std.get(block, 'requirements_s3_path', null)),
        schedulers: build.template(std.get(block, 'schedulers', null)),
        service_role_arn: build.template(std.get(block, 'service_role_arn', null)),
        source_bucket_arn: build.template(block.source_bucket_arn),
        startup_script_s3_object_version: build.template(std.get(block, 'startup_script_s3_object_version', null)),
        startup_script_s3_path: build.template(std.get(block, 'startup_script_s3_path', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        webserver_access_mode: build.template(std.get(block, 'webserver_access_mode', null)),
        webserver_url: build.template(std.get(block, 'webserver_url', null)),
        webserver_vpc_endpoint_service: build.template(std.get(block, 'webserver_vpc_endpoint_service', null)),
        weekly_maintenance_window_start: build.template(std.get(block, 'weekly_maintenance_window_start', null)),
      }),
      airflow_configuration_options: resource.field('airflow_configuration_options'),
      airflow_version: resource.field('airflow_version'),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      dag_s3_path: resource.field('dag_s3_path'),
      database_vpc_endpoint_service: resource.field('database_vpc_endpoint_service'),
      endpoint_management: resource.field('endpoint_management'),
      environment_class: resource.field('environment_class'),
      execution_role_arn: resource.field('execution_role_arn'),
      id: resource.field('id'),
      kms_key: resource.field('kms_key'),
      last_updated: resource.field('last_updated'),
      max_webservers: resource.field('max_webservers'),
      max_workers: resource.field('max_workers'),
      min_webservers: resource.field('min_webservers'),
      min_workers: resource.field('min_workers'),
      name: resource.field('name'),
      plugins_s3_object_version: resource.field('plugins_s3_object_version'),
      plugins_s3_path: resource.field('plugins_s3_path'),
      requirements_s3_object_version: resource.field('requirements_s3_object_version'),
      requirements_s3_path: resource.field('requirements_s3_path'),
      schedulers: resource.field('schedulers'),
      service_role_arn: resource.field('service_role_arn'),
      source_bucket_arn: resource.field('source_bucket_arn'),
      startup_script_s3_object_version: resource.field('startup_script_s3_object_version'),
      startup_script_s3_path: resource.field('startup_script_s3_path'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      webserver_access_mode: resource.field('webserver_access_mode'),
      webserver_url: resource.field('webserver_url'),
      webserver_vpc_endpoint_service: resource.field('webserver_vpc_endpoint_service'),
      weekly_maintenance_window_start: resource.field('weekly_maintenance_window_start'),
    },
    nat_gateway(name, block): {
      local resource = blockType.resource('aws_nat_gateway', name),
      _: resource._(block, {
        allocation_id: build.template(std.get(block, 'allocation_id', null)),
        association_id: build.template(std.get(block, 'association_id', null)),
        connectivity_type: build.template(std.get(block, 'connectivity_type', null)),
        id: build.template(std.get(block, 'id', null)),
        network_interface_id: build.template(std.get(block, 'network_interface_id', null)),
        private_ip: build.template(std.get(block, 'private_ip', null)),
        public_ip: build.template(std.get(block, 'public_ip', null)),
        secondary_allocation_ids: build.template(std.get(block, 'secondary_allocation_ids', null)),
        secondary_private_ip_address_count: build.template(std.get(block, 'secondary_private_ip_address_count', null)),
        secondary_private_ip_addresses: build.template(std.get(block, 'secondary_private_ip_addresses', null)),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      allocation_id: resource.field('allocation_id'),
      association_id: resource.field('association_id'),
      connectivity_type: resource.field('connectivity_type'),
      id: resource.field('id'),
      network_interface_id: resource.field('network_interface_id'),
      private_ip: resource.field('private_ip'),
      public_ip: resource.field('public_ip'),
      secondary_allocation_ids: resource.field('secondary_allocation_ids'),
      secondary_private_ip_address_count: resource.field('secondary_private_ip_address_count'),
      secondary_private_ip_addresses: resource.field('secondary_private_ip_addresses'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    neptune_cluster(name, block): {
      local resource = blockType.resource('aws_neptune_cluster', name),
      _: resource._(block, {
        allow_major_version_upgrade: build.template(std.get(block, 'allow_major_version_upgrade', null)),
        apply_immediately: build.template(std.get(block, 'apply_immediately', null)),
        arn: build.template(std.get(block, 'arn', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        backup_retention_period: build.template(std.get(block, 'backup_retention_period', null)),
        cluster_identifier: build.template(std.get(block, 'cluster_identifier', null)),
        cluster_identifier_prefix: build.template(std.get(block, 'cluster_identifier_prefix', null)),
        cluster_members: build.template(std.get(block, 'cluster_members', null)),
        cluster_resource_id: build.template(std.get(block, 'cluster_resource_id', null)),
        copy_tags_to_snapshot: build.template(std.get(block, 'copy_tags_to_snapshot', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        enable_cloudwatch_logs_exports: build.template(std.get(block, 'enable_cloudwatch_logs_exports', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null)),
        global_cluster_identifier: build.template(std.get(block, 'global_cluster_identifier', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        iam_database_authentication_enabled: build.template(std.get(block, 'iam_database_authentication_enabled', null)),
        iam_roles: build.template(std.get(block, 'iam_roles', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        neptune_cluster_parameter_group_name: build.template(std.get(block, 'neptune_cluster_parameter_group_name', null)),
        neptune_instance_parameter_group_name: build.template(std.get(block, 'neptune_instance_parameter_group_name', null)),
        neptune_subnet_group_name: build.template(std.get(block, 'neptune_subnet_group_name', null)),
        port: build.template(std.get(block, 'port', null)),
        preferred_backup_window: build.template(std.get(block, 'preferred_backup_window', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        reader_endpoint: build.template(std.get(block, 'reader_endpoint', null)),
        replication_source_identifier: build.template(std.get(block, 'replication_source_identifier', null)),
        skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null)),
        snapshot_identifier: build.template(std.get(block, 'snapshot_identifier', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      allow_major_version_upgrade: resource.field('allow_major_version_upgrade'),
      apply_immediately: resource.field('apply_immediately'),
      arn: resource.field('arn'),
      availability_zones: resource.field('availability_zones'),
      backup_retention_period: resource.field('backup_retention_period'),
      cluster_identifier: resource.field('cluster_identifier'),
      cluster_identifier_prefix: resource.field('cluster_identifier_prefix'),
      cluster_members: resource.field('cluster_members'),
      cluster_resource_id: resource.field('cluster_resource_id'),
      copy_tags_to_snapshot: resource.field('copy_tags_to_snapshot'),
      deletion_protection: resource.field('deletion_protection'),
      enable_cloudwatch_logs_exports: resource.field('enable_cloudwatch_logs_exports'),
      endpoint: resource.field('endpoint'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      final_snapshot_identifier: resource.field('final_snapshot_identifier'),
      global_cluster_identifier: resource.field('global_cluster_identifier'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      iam_database_authentication_enabled: resource.field('iam_database_authentication_enabled'),
      iam_roles: resource.field('iam_roles'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      neptune_cluster_parameter_group_name: resource.field('neptune_cluster_parameter_group_name'),
      neptune_instance_parameter_group_name: resource.field('neptune_instance_parameter_group_name'),
      neptune_subnet_group_name: resource.field('neptune_subnet_group_name'),
      port: resource.field('port'),
      preferred_backup_window: resource.field('preferred_backup_window'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      reader_endpoint: resource.field('reader_endpoint'),
      replication_source_identifier: resource.field('replication_source_identifier'),
      skip_final_snapshot: resource.field('skip_final_snapshot'),
      snapshot_identifier: resource.field('snapshot_identifier'),
      storage_encrypted: resource.field('storage_encrypted'),
      storage_type: resource.field('storage_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    neptune_cluster_endpoint(name, block): {
      local resource = blockType.resource('aws_neptune_cluster_endpoint', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster_endpoint_identifier: build.template(block.cluster_endpoint_identifier),
        cluster_identifier: build.template(block.cluster_identifier),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        endpoint_type: build.template(block.endpoint_type),
        excluded_members: build.template(std.get(block, 'excluded_members', null)),
        id: build.template(std.get(block, 'id', null)),
        static_members: build.template(std.get(block, 'static_members', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      cluster_endpoint_identifier: resource.field('cluster_endpoint_identifier'),
      cluster_identifier: resource.field('cluster_identifier'),
      endpoint: resource.field('endpoint'),
      endpoint_type: resource.field('endpoint_type'),
      excluded_members: resource.field('excluded_members'),
      id: resource.field('id'),
      static_members: resource.field('static_members'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    neptune_cluster_instance(name, block): {
      local resource = blockType.resource('aws_neptune_cluster_instance', name),
      _: resource._(block, {
        address: build.template(std.get(block, 'address', null)),
        apply_immediately: build.template(std.get(block, 'apply_immediately', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        cluster_identifier: build.template(block.cluster_identifier),
        dbi_resource_id: build.template(std.get(block, 'dbi_resource_id', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        identifier: build.template(std.get(block, 'identifier', null)),
        identifier_prefix: build.template(std.get(block, 'identifier_prefix', null)),
        instance_class: build.template(block.instance_class),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        neptune_parameter_group_name: build.template(std.get(block, 'neptune_parameter_group_name', null)),
        neptune_subnet_group_name: build.template(std.get(block, 'neptune_subnet_group_name', null)),
        port: build.template(std.get(block, 'port', null)),
        preferred_backup_window: build.template(std.get(block, 'preferred_backup_window', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        promotion_tier: build.template(std.get(block, 'promotion_tier', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        writer: build.template(std.get(block, 'writer', null)),
      }),
      address: resource.field('address'),
      apply_immediately: resource.field('apply_immediately'),
      arn: resource.field('arn'),
      auto_minor_version_upgrade: resource.field('auto_minor_version_upgrade'),
      availability_zone: resource.field('availability_zone'),
      cluster_identifier: resource.field('cluster_identifier'),
      dbi_resource_id: resource.field('dbi_resource_id'),
      endpoint: resource.field('endpoint'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      identifier: resource.field('identifier'),
      identifier_prefix: resource.field('identifier_prefix'),
      instance_class: resource.field('instance_class'),
      kms_key_arn: resource.field('kms_key_arn'),
      neptune_parameter_group_name: resource.field('neptune_parameter_group_name'),
      neptune_subnet_group_name: resource.field('neptune_subnet_group_name'),
      port: resource.field('port'),
      preferred_backup_window: resource.field('preferred_backup_window'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      promotion_tier: resource.field('promotion_tier'),
      publicly_accessible: resource.field('publicly_accessible'),
      skip_final_snapshot: resource.field('skip_final_snapshot'),
      storage_encrypted: resource.field('storage_encrypted'),
      storage_type: resource.field('storage_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      writer: resource.field('writer'),
    },
    neptune_cluster_parameter_group(name, block): {
      local resource = blockType.resource('aws_neptune_cluster_parameter_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        family: build.template(block.family),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      family: resource.field('family'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    neptune_cluster_snapshot(name, block): {
      local resource = blockType.resource('aws_neptune_cluster_snapshot', name),
      _: resource._(block, {
        allocated_storage: build.template(std.get(block, 'allocated_storage', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        db_cluster_identifier: build.template(block.db_cluster_identifier),
        db_cluster_snapshot_arn: build.template(std.get(block, 'db_cluster_snapshot_arn', null)),
        db_cluster_snapshot_identifier: build.template(block.db_cluster_snapshot_identifier),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        license_model: build.template(std.get(block, 'license_model', null)),
        port: build.template(std.get(block, 'port', null)),
        snapshot_type: build.template(std.get(block, 'snapshot_type', null)),
        source_db_cluster_snapshot_arn: build.template(std.get(block, 'source_db_cluster_snapshot_arn', null)),
        status: build.template(std.get(block, 'status', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      allocated_storage: resource.field('allocated_storage'),
      availability_zones: resource.field('availability_zones'),
      db_cluster_identifier: resource.field('db_cluster_identifier'),
      db_cluster_snapshot_arn: resource.field('db_cluster_snapshot_arn'),
      db_cluster_snapshot_identifier: resource.field('db_cluster_snapshot_identifier'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      license_model: resource.field('license_model'),
      port: resource.field('port'),
      snapshot_type: resource.field('snapshot_type'),
      source_db_cluster_snapshot_arn: resource.field('source_db_cluster_snapshot_arn'),
      status: resource.field('status'),
      storage_encrypted: resource.field('storage_encrypted'),
      vpc_id: resource.field('vpc_id'),
    },
    neptune_event_subscription(name, block): {
      local resource = blockType.resource('aws_neptune_event_subscription', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        customer_aws_id: build.template(std.get(block, 'customer_aws_id', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        event_categories: build.template(std.get(block, 'event_categories', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        sns_topic_arn: build.template(block.sns_topic_arn),
        source_ids: build.template(std.get(block, 'source_ids', null)),
        source_type: build.template(std.get(block, 'source_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      customer_aws_id: resource.field('customer_aws_id'),
      enabled: resource.field('enabled'),
      event_categories: resource.field('event_categories'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      sns_topic_arn: resource.field('sns_topic_arn'),
      source_ids: resource.field('source_ids'),
      source_type: resource.field('source_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    neptune_global_cluster(name, block): {
      local resource = blockType.resource('aws_neptune_global_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        global_cluster_identifier: build.template(block.global_cluster_identifier),
        global_cluster_members: build.template(std.get(block, 'global_cluster_members', null)),
        global_cluster_resource_id: build.template(std.get(block, 'global_cluster_resource_id', null)),
        id: build.template(std.get(block, 'id', null)),
        source_db_cluster_identifier: build.template(std.get(block, 'source_db_cluster_identifier', null)),
        status: build.template(std.get(block, 'status', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
      }),
      arn: resource.field('arn'),
      deletion_protection: resource.field('deletion_protection'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      global_cluster_identifier: resource.field('global_cluster_identifier'),
      global_cluster_members: resource.field('global_cluster_members'),
      global_cluster_resource_id: resource.field('global_cluster_resource_id'),
      id: resource.field('id'),
      source_db_cluster_identifier: resource.field('source_db_cluster_identifier'),
      status: resource.field('status'),
      storage_encrypted: resource.field('storage_encrypted'),
    },
    neptune_parameter_group(name, block): {
      local resource = blockType.resource('aws_neptune_parameter_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        family: build.template(block.family),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      family: resource.field('family'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    neptune_subnet_group(name, block): {
      local resource = blockType.resource('aws_neptune_subnet_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    network_acl(name, block): {
      local resource = blockType.resource('aws_network_acl', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        egress: build.template(std.get(block, 'egress', null)),
        id: build.template(std.get(block, 'id', null)),
        ingress: build.template(std.get(block, 'ingress', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      arn: resource.field('arn'),
      egress: resource.field('egress'),
      id: resource.field('id'),
      ingress: resource.field('ingress'),
      owner_id: resource.field('owner_id'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    network_acl_association(name, block): {
      local resource = blockType.resource('aws_network_acl_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        network_acl_id: build.template(block.network_acl_id),
        subnet_id: build.template(block.subnet_id),
      }),
      id: resource.field('id'),
      network_acl_id: resource.field('network_acl_id'),
      subnet_id: resource.field('subnet_id'),
    },
    network_acl_rule(name, block): {
      local resource = blockType.resource('aws_network_acl_rule', name),
      _: resource._(block, {
        cidr_block: build.template(std.get(block, 'cidr_block', null)),
        egress: build.template(std.get(block, 'egress', null)),
        from_port: build.template(std.get(block, 'from_port', null)),
        icmp_code: build.template(std.get(block, 'icmp_code', null)),
        icmp_type: build.template(std.get(block, 'icmp_type', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv6_cidr_block: build.template(std.get(block, 'ipv6_cidr_block', null)),
        network_acl_id: build.template(block.network_acl_id),
        protocol: build.template(block.protocol),
        rule_action: build.template(block.rule_action),
        rule_number: build.template(block.rule_number),
        to_port: build.template(std.get(block, 'to_port', null)),
      }),
      cidr_block: resource.field('cidr_block'),
      egress: resource.field('egress'),
      from_port: resource.field('from_port'),
      icmp_code: resource.field('icmp_code'),
      icmp_type: resource.field('icmp_type'),
      id: resource.field('id'),
      ipv6_cidr_block: resource.field('ipv6_cidr_block'),
      network_acl_id: resource.field('network_acl_id'),
      protocol: resource.field('protocol'),
      rule_action: resource.field('rule_action'),
      rule_number: resource.field('rule_number'),
      to_port: resource.field('to_port'),
    },
    network_interface(name, block): {
      local resource = blockType.resource('aws_network_interface', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        interface_type: build.template(std.get(block, 'interface_type', null)),
        ipv4_prefix_count: build.template(std.get(block, 'ipv4_prefix_count', null)),
        ipv4_prefixes: build.template(std.get(block, 'ipv4_prefixes', null)),
        ipv6_address_count: build.template(std.get(block, 'ipv6_address_count', null)),
        ipv6_address_list: build.template(std.get(block, 'ipv6_address_list', null)),
        ipv6_address_list_enabled: build.template(std.get(block, 'ipv6_address_list_enabled', null)),
        ipv6_addresses: build.template(std.get(block, 'ipv6_addresses', null)),
        ipv6_prefix_count: build.template(std.get(block, 'ipv6_prefix_count', null)),
        ipv6_prefixes: build.template(std.get(block, 'ipv6_prefixes', null)),
        mac_address: build.template(std.get(block, 'mac_address', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        private_dns_name: build.template(std.get(block, 'private_dns_name', null)),
        private_ip: build.template(std.get(block, 'private_ip', null)),
        private_ip_list: build.template(std.get(block, 'private_ip_list', null)),
        private_ip_list_enabled: build.template(std.get(block, 'private_ip_list_enabled', null)),
        private_ips: build.template(std.get(block, 'private_ips', null)),
        private_ips_count: build.template(std.get(block, 'private_ips_count', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        source_dest_check: build.template(std.get(block, 'source_dest_check', null)),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      interface_type: resource.field('interface_type'),
      ipv4_prefix_count: resource.field('ipv4_prefix_count'),
      ipv4_prefixes: resource.field('ipv4_prefixes'),
      ipv6_address_count: resource.field('ipv6_address_count'),
      ipv6_address_list: resource.field('ipv6_address_list'),
      ipv6_address_list_enabled: resource.field('ipv6_address_list_enabled'),
      ipv6_addresses: resource.field('ipv6_addresses'),
      ipv6_prefix_count: resource.field('ipv6_prefix_count'),
      ipv6_prefixes: resource.field('ipv6_prefixes'),
      mac_address: resource.field('mac_address'),
      outpost_arn: resource.field('outpost_arn'),
      owner_id: resource.field('owner_id'),
      private_dns_name: resource.field('private_dns_name'),
      private_ip: resource.field('private_ip'),
      private_ip_list: resource.field('private_ip_list'),
      private_ip_list_enabled: resource.field('private_ip_list_enabled'),
      private_ips: resource.field('private_ips'),
      private_ips_count: resource.field('private_ips_count'),
      security_groups: resource.field('security_groups'),
      source_dest_check: resource.field('source_dest_check'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    network_interface_attachment(name, block): {
      local resource = blockType.resource('aws_network_interface_attachment', name),
      _: resource._(block, {
        attachment_id: build.template(std.get(block, 'attachment_id', null)),
        device_index: build.template(block.device_index),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        network_interface_id: build.template(block.network_interface_id),
        status: build.template(std.get(block, 'status', null)),
      }),
      attachment_id: resource.field('attachment_id'),
      device_index: resource.field('device_index'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      network_interface_id: resource.field('network_interface_id'),
      status: resource.field('status'),
    },
    network_interface_sg_attachment(name, block): {
      local resource = blockType.resource('aws_network_interface_sg_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        network_interface_id: build.template(block.network_interface_id),
        security_group_id: build.template(block.security_group_id),
      }),
      id: resource.field('id'),
      network_interface_id: resource.field('network_interface_id'),
      security_group_id: resource.field('security_group_id'),
    },
    networkfirewall_firewall(name, block): {
      local resource = blockType.resource('aws_networkfirewall_firewall', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        delete_protection: build.template(std.get(block, 'delete_protection', null)),
        description: build.template(std.get(block, 'description', null)),
        firewall_policy_arn: build.template(block.firewall_policy_arn),
        firewall_policy_change_protection: build.template(std.get(block, 'firewall_policy_change_protection', null)),
        firewall_status: build.template(std.get(block, 'firewall_status', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subnet_change_protection: build.template(std.get(block, 'subnet_change_protection', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        update_token: build.template(std.get(block, 'update_token', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      arn: resource.field('arn'),
      delete_protection: resource.field('delete_protection'),
      description: resource.field('description'),
      firewall_policy_arn: resource.field('firewall_policy_arn'),
      firewall_policy_change_protection: resource.field('firewall_policy_change_protection'),
      firewall_status: resource.field('firewall_status'),
      id: resource.field('id'),
      name: resource.field('name'),
      subnet_change_protection: resource.field('subnet_change_protection'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      update_token: resource.field('update_token'),
      vpc_id: resource.field('vpc_id'),
    },
    networkfirewall_firewall_policy(name, block): {
      local resource = blockType.resource('aws_networkfirewall_firewall_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        update_token: build.template(std.get(block, 'update_token', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      update_token: resource.field('update_token'),
    },
    networkfirewall_logging_configuration(name, block): {
      local resource = blockType.resource('aws_networkfirewall_logging_configuration', name),
      _: resource._(block, {
        firewall_arn: build.template(block.firewall_arn),
        id: build.template(std.get(block, 'id', null)),
      }),
      firewall_arn: resource.field('firewall_arn'),
      id: resource.field('id'),
    },
    networkfirewall_resource_policy(name, block): {
      local resource = blockType.resource('aws_networkfirewall_resource_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        resource_arn: build.template(block.resource_arn),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      resource_arn: resource.field('resource_arn'),
    },
    networkfirewall_rule_group(name, block): {
      local resource = blockType.resource('aws_networkfirewall_rule_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        capacity: build.template(block.capacity),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        rules: build.template(std.get(block, 'rules', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
        update_token: build.template(std.get(block, 'update_token', null)),
      }),
      arn: resource.field('arn'),
      capacity: resource.field('capacity'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      rules: resource.field('rules'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      update_token: resource.field('update_token'),
    },
    networkfirewall_tls_inspection_configuration(name, block): {
      local resource = blockType.resource('aws_networkfirewall_tls_inspection_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        certificate_authority: build.template(std.get(block, 'certificate_authority', null)),
        certificates: build.template(std.get(block, 'certificates', null)),
        description: build.template(std.get(block, 'description', null)),
        encryption_configuration: build.template(std.get(block, 'encryption_configuration', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        number_of_associations: build.template(std.get(block, 'number_of_associations', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tls_inspection_configuration_id: build.template(std.get(block, 'tls_inspection_configuration_id', null)),
        update_token: build.template(std.get(block, 'update_token', null)),
      }),
      arn: resource.field('arn'),
      certificate_authority: resource.field('certificate_authority'),
      certificates: resource.field('certificates'),
      description: resource.field('description'),
      encryption_configuration: resource.field('encryption_configuration'),
      id: resource.field('id'),
      name: resource.field('name'),
      number_of_associations: resource.field('number_of_associations'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tls_inspection_configuration_id: resource.field('tls_inspection_configuration_id'),
      update_token: resource.field('update_token'),
    },
    networkmanager_attachment_accepter(name, block): {
      local resource = blockType.resource('aws_networkmanager_attachment_accepter', name),
      _: resource._(block, {
        attachment_id: build.template(block.attachment_id),
        attachment_policy_rule_number: build.template(std.get(block, 'attachment_policy_rule_number', null)),
        attachment_type: build.template(block.attachment_type),
        core_network_arn: build.template(std.get(block, 'core_network_arn', null)),
        core_network_id: build.template(std.get(block, 'core_network_id', null)),
        edge_location: build.template(std.get(block, 'edge_location', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
        resource_arn: build.template(std.get(block, 'resource_arn', null)),
        segment_name: build.template(std.get(block, 'segment_name', null)),
        state: build.template(std.get(block, 'state', null)),
      }),
      attachment_id: resource.field('attachment_id'),
      attachment_policy_rule_number: resource.field('attachment_policy_rule_number'),
      attachment_type: resource.field('attachment_type'),
      core_network_arn: resource.field('core_network_arn'),
      core_network_id: resource.field('core_network_id'),
      edge_location: resource.field('edge_location'),
      id: resource.field('id'),
      owner_account_id: resource.field('owner_account_id'),
      resource_arn: resource.field('resource_arn'),
      segment_name: resource.field('segment_name'),
      state: resource.field('state'),
    },
    networkmanager_connect_attachment(name, block): {
      local resource = blockType.resource('aws_networkmanager_connect_attachment', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attachment_id: build.template(std.get(block, 'attachment_id', null)),
        attachment_policy_rule_number: build.template(std.get(block, 'attachment_policy_rule_number', null)),
        attachment_type: build.template(std.get(block, 'attachment_type', null)),
        core_network_arn: build.template(std.get(block, 'core_network_arn', null)),
        core_network_id: build.template(block.core_network_id),
        edge_location: build.template(block.edge_location),
        id: build.template(std.get(block, 'id', null)),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
        resource_arn: build.template(std.get(block, 'resource_arn', null)),
        segment_name: build.template(std.get(block, 'segment_name', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transport_attachment_id: build.template(block.transport_attachment_id),
      }),
      arn: resource.field('arn'),
      attachment_id: resource.field('attachment_id'),
      attachment_policy_rule_number: resource.field('attachment_policy_rule_number'),
      attachment_type: resource.field('attachment_type'),
      core_network_arn: resource.field('core_network_arn'),
      core_network_id: resource.field('core_network_id'),
      edge_location: resource.field('edge_location'),
      id: resource.field('id'),
      owner_account_id: resource.field('owner_account_id'),
      resource_arn: resource.field('resource_arn'),
      segment_name: resource.field('segment_name'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transport_attachment_id: resource.field('transport_attachment_id'),
    },
    networkmanager_connect_peer(name, block): {
      local resource = blockType.resource('aws_networkmanager_connect_peer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        configuration: build.template(std.get(block, 'configuration', null)),
        connect_attachment_id: build.template(block.connect_attachment_id),
        connect_peer_id: build.template(std.get(block, 'connect_peer_id', null)),
        core_network_address: build.template(std.get(block, 'core_network_address', null)),
        core_network_id: build.template(std.get(block, 'core_network_id', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        edge_location: build.template(std.get(block, 'edge_location', null)),
        id: build.template(std.get(block, 'id', null)),
        inside_cidr_blocks: build.template(std.get(block, 'inside_cidr_blocks', null)),
        peer_address: build.template(block.peer_address),
        state: build.template(std.get(block, 'state', null)),
        subnet_arn: build.template(std.get(block, 'subnet_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      configuration: resource.field('configuration'),
      connect_attachment_id: resource.field('connect_attachment_id'),
      connect_peer_id: resource.field('connect_peer_id'),
      core_network_address: resource.field('core_network_address'),
      core_network_id: resource.field('core_network_id'),
      created_at: resource.field('created_at'),
      edge_location: resource.field('edge_location'),
      id: resource.field('id'),
      inside_cidr_blocks: resource.field('inside_cidr_blocks'),
      peer_address: resource.field('peer_address'),
      state: resource.field('state'),
      subnet_arn: resource.field('subnet_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    networkmanager_connection(name, block): {
      local resource = blockType.resource('aws_networkmanager_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        connected_device_id: build.template(block.connected_device_id),
        connected_link_id: build.template(std.get(block, 'connected_link_id', null)),
        description: build.template(std.get(block, 'description', null)),
        device_id: build.template(block.device_id),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        link_id: build.template(std.get(block, 'link_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      connected_device_id: resource.field('connected_device_id'),
      connected_link_id: resource.field('connected_link_id'),
      description: resource.field('description'),
      device_id: resource.field('device_id'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      link_id: resource.field('link_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    networkmanager_core_network(name, block): {
      local resource = blockType.resource('aws_networkmanager_core_network', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        base_policy_document: build.template(std.get(block, 'base_policy_document', null)),
        base_policy_region: build.template(std.get(block, 'base_policy_region', null)),
        base_policy_regions: build.template(std.get(block, 'base_policy_regions', null)),
        create_base_policy: build.template(std.get(block, 'create_base_policy', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        edges: build.template(std.get(block, 'edges', null)),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        segments: build.template(std.get(block, 'segments', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      base_policy_document: resource.field('base_policy_document'),
      base_policy_region: resource.field('base_policy_region'),
      base_policy_regions: resource.field('base_policy_regions'),
      create_base_policy: resource.field('create_base_policy'),
      created_at: resource.field('created_at'),
      description: resource.field('description'),
      edges: resource.field('edges'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      segments: resource.field('segments'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    networkmanager_core_network_policy_attachment(name, block): {
      local resource = blockType.resource('aws_networkmanager_core_network_policy_attachment', name),
      _: resource._(block, {
        core_network_id: build.template(block.core_network_id),
        id: build.template(std.get(block, 'id', null)),
        policy_document: build.template(block.policy_document),
        state: build.template(std.get(block, 'state', null)),
      }),
      core_network_id: resource.field('core_network_id'),
      id: resource.field('id'),
      policy_document: resource.field('policy_document'),
      state: resource.field('state'),
    },
    networkmanager_customer_gateway_association(name, block): {
      local resource = blockType.resource('aws_networkmanager_customer_gateway_association', name),
      _: resource._(block, {
        customer_gateway_arn: build.template(block.customer_gateway_arn),
        device_id: build.template(block.device_id),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        link_id: build.template(std.get(block, 'link_id', null)),
      }),
      customer_gateway_arn: resource.field('customer_gateway_arn'),
      device_id: resource.field('device_id'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      link_id: resource.field('link_id'),
    },
    networkmanager_device(name, block): {
      local resource = blockType.resource('aws_networkmanager_device', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        model: build.template(std.get(block, 'model', null)),
        serial_number: build.template(std.get(block, 'serial_number', null)),
        site_id: build.template(std.get(block, 'site_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
        vendor: build.template(std.get(block, 'vendor', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      model: resource.field('model'),
      serial_number: resource.field('serial_number'),
      site_id: resource.field('site_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      vendor: resource.field('vendor'),
    },
    networkmanager_global_network(name, block): {
      local resource = blockType.resource('aws_networkmanager_global_network', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    networkmanager_link(name, block): {
      local resource = blockType.resource('aws_networkmanager_link', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        provider_name: build.template(std.get(block, 'provider_name', null)),
        site_id: build.template(block.site_id),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      provider_name: resource.field('provider_name'),
      site_id: resource.field('site_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    networkmanager_link_association(name, block): {
      local resource = blockType.resource('aws_networkmanager_link_association', name),
      _: resource._(block, {
        device_id: build.template(block.device_id),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        link_id: build.template(block.link_id),
      }),
      device_id: resource.field('device_id'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      link_id: resource.field('link_id'),
    },
    networkmanager_site(name, block): {
      local resource = blockType.resource('aws_networkmanager_site', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    networkmanager_site_to_site_vpn_attachment(name, block): {
      local resource = blockType.resource('aws_networkmanager_site_to_site_vpn_attachment', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attachment_policy_rule_number: build.template(std.get(block, 'attachment_policy_rule_number', null)),
        attachment_type: build.template(std.get(block, 'attachment_type', null)),
        core_network_arn: build.template(std.get(block, 'core_network_arn', null)),
        core_network_id: build.template(block.core_network_id),
        edge_location: build.template(std.get(block, 'edge_location', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
        resource_arn: build.template(std.get(block, 'resource_arn', null)),
        segment_name: build.template(std.get(block, 'segment_name', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpn_connection_arn: build.template(block.vpn_connection_arn),
      }),
      arn: resource.field('arn'),
      attachment_policy_rule_number: resource.field('attachment_policy_rule_number'),
      attachment_type: resource.field('attachment_type'),
      core_network_arn: resource.field('core_network_arn'),
      core_network_id: resource.field('core_network_id'),
      edge_location: resource.field('edge_location'),
      id: resource.field('id'),
      owner_account_id: resource.field('owner_account_id'),
      resource_arn: resource.field('resource_arn'),
      segment_name: resource.field('segment_name'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpn_connection_arn: resource.field('vpn_connection_arn'),
    },
    networkmanager_transit_gateway_connect_peer_association(name, block): {
      local resource = blockType.resource('aws_networkmanager_transit_gateway_connect_peer_association', name),
      _: resource._(block, {
        device_id: build.template(block.device_id),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        link_id: build.template(std.get(block, 'link_id', null)),
        transit_gateway_connect_peer_arn: build.template(block.transit_gateway_connect_peer_arn),
      }),
      device_id: resource.field('device_id'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      link_id: resource.field('link_id'),
      transit_gateway_connect_peer_arn: resource.field('transit_gateway_connect_peer_arn'),
    },
    networkmanager_transit_gateway_peering(name, block): {
      local resource = blockType.resource('aws_networkmanager_transit_gateway_peering', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        core_network_arn: build.template(std.get(block, 'core_network_arn', null)),
        core_network_id: build.template(block.core_network_id),
        edge_location: build.template(std.get(block, 'edge_location', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
        peering_type: build.template(std.get(block, 'peering_type', null)),
        resource_arn: build.template(std.get(block, 'resource_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_gateway_arn: build.template(block.transit_gateway_arn),
        transit_gateway_peering_attachment_id: build.template(std.get(block, 'transit_gateway_peering_attachment_id', null)),
      }),
      arn: resource.field('arn'),
      core_network_arn: resource.field('core_network_arn'),
      core_network_id: resource.field('core_network_id'),
      edge_location: resource.field('edge_location'),
      id: resource.field('id'),
      owner_account_id: resource.field('owner_account_id'),
      peering_type: resource.field('peering_type'),
      resource_arn: resource.field('resource_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_gateway_arn: resource.field('transit_gateway_arn'),
      transit_gateway_peering_attachment_id: resource.field('transit_gateway_peering_attachment_id'),
    },
    networkmanager_transit_gateway_registration(name, block): {
      local resource = blockType.resource('aws_networkmanager_transit_gateway_registration', name),
      _: resource._(block, {
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        transit_gateway_arn: build.template(block.transit_gateway_arn),
      }),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      transit_gateway_arn: resource.field('transit_gateway_arn'),
    },
    networkmanager_transit_gateway_route_table_attachment(name, block): {
      local resource = blockType.resource('aws_networkmanager_transit_gateway_route_table_attachment', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attachment_policy_rule_number: build.template(std.get(block, 'attachment_policy_rule_number', null)),
        attachment_type: build.template(std.get(block, 'attachment_type', null)),
        core_network_arn: build.template(std.get(block, 'core_network_arn', null)),
        core_network_id: build.template(std.get(block, 'core_network_id', null)),
        edge_location: build.template(std.get(block, 'edge_location', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
        peering_id: build.template(block.peering_id),
        resource_arn: build.template(std.get(block, 'resource_arn', null)),
        segment_name: build.template(std.get(block, 'segment_name', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_gateway_route_table_arn: build.template(block.transit_gateway_route_table_arn),
      }),
      arn: resource.field('arn'),
      attachment_policy_rule_number: resource.field('attachment_policy_rule_number'),
      attachment_type: resource.field('attachment_type'),
      core_network_arn: resource.field('core_network_arn'),
      core_network_id: resource.field('core_network_id'),
      edge_location: resource.field('edge_location'),
      id: resource.field('id'),
      owner_account_id: resource.field('owner_account_id'),
      peering_id: resource.field('peering_id'),
      resource_arn: resource.field('resource_arn'),
      segment_name: resource.field('segment_name'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_gateway_route_table_arn: resource.field('transit_gateway_route_table_arn'),
    },
    networkmanager_vpc_attachment(name, block): {
      local resource = blockType.resource('aws_networkmanager_vpc_attachment', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attachment_policy_rule_number: build.template(std.get(block, 'attachment_policy_rule_number', null)),
        attachment_type: build.template(std.get(block, 'attachment_type', null)),
        core_network_arn: build.template(std.get(block, 'core_network_arn', null)),
        core_network_id: build.template(block.core_network_id),
        edge_location: build.template(std.get(block, 'edge_location', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
        resource_arn: build.template(std.get(block, 'resource_arn', null)),
        segment_name: build.template(std.get(block, 'segment_name', null)),
        state: build.template(std.get(block, 'state', null)),
        subnet_arns: build.template(block.subnet_arns),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_arn: build.template(block.vpc_arn),
      }),
      arn: resource.field('arn'),
      attachment_policy_rule_number: resource.field('attachment_policy_rule_number'),
      attachment_type: resource.field('attachment_type'),
      core_network_arn: resource.field('core_network_arn'),
      core_network_id: resource.field('core_network_id'),
      edge_location: resource.field('edge_location'),
      id: resource.field('id'),
      owner_account_id: resource.field('owner_account_id'),
      resource_arn: resource.field('resource_arn'),
      segment_name: resource.field('segment_name'),
      state: resource.field('state'),
      subnet_arns: resource.field('subnet_arns'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_arn: resource.field('vpc_arn'),
    },
    networkmonitor_monitor(name, block): {
      local resource = blockType.resource('aws_networkmonitor_monitor', name),
      _: resource._(block, {
        aggregation_period: build.template(std.get(block, 'aggregation_period', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        monitor_name: build.template(block.monitor_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      aggregation_period: resource.field('aggregation_period'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      monitor_name: resource.field('monitor_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    networkmonitor_probe(name, block): {
      local resource = blockType.resource('aws_networkmonitor_probe', name),
      _: resource._(block, {
        address_family: build.template(std.get(block, 'address_family', null)),
        arn: build.template(std.get(block, 'arn', null)),
        destination: build.template(block.destination),
        destination_port: build.template(std.get(block, 'destination_port', null)),
        id: build.template(std.get(block, 'id', null)),
        monitor_name: build.template(block.monitor_name),
        packet_size: build.template(std.get(block, 'packet_size', null)),
        probe_id: build.template(std.get(block, 'probe_id', null)),
        protocol: build.template(block.protocol),
        source_arn: build.template(block.source_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      address_family: resource.field('address_family'),
      arn: resource.field('arn'),
      destination: resource.field('destination'),
      destination_port: resource.field('destination_port'),
      id: resource.field('id'),
      monitor_name: resource.field('monitor_name'),
      packet_size: resource.field('packet_size'),
      probe_id: resource.field('probe_id'),
      protocol: resource.field('protocol'),
      source_arn: resource.field('source_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    oam_link(name, block): {
      local resource = blockType.resource('aws_oam_link', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        label: build.template(std.get(block, 'label', null)),
        label_template: build.template(block.label_template),
        link_id: build.template(std.get(block, 'link_id', null)),
        resource_types: build.template(block.resource_types),
        sink_arn: build.template(std.get(block, 'sink_arn', null)),
        sink_identifier: build.template(block.sink_identifier),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      label: resource.field('label'),
      label_template: resource.field('label_template'),
      link_id: resource.field('link_id'),
      resource_types: resource.field('resource_types'),
      sink_arn: resource.field('sink_arn'),
      sink_identifier: resource.field('sink_identifier'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    oam_sink(name, block): {
      local resource = blockType.resource('aws_oam_sink', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        sink_id: build.template(std.get(block, 'sink_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      sink_id: resource.field('sink_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    oam_sink_policy(name, block): {
      local resource = blockType.resource('aws_oam_sink_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        sink_id: build.template(std.get(block, 'sink_id', null)),
        sink_identifier: build.template(block.sink_identifier),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      policy: resource.field('policy'),
      sink_id: resource.field('sink_id'),
      sink_identifier: resource.field('sink_identifier'),
    },
    opensearch_authorize_vpc_endpoint_access(name, block): {
      local resource = blockType.resource('aws_opensearch_authorize_vpc_endpoint_access', name),
      _: resource._(block, {
        account: build.template(block.account),
        authorized_principal: build.template(std.get(block, 'authorized_principal', null)),
        domain_name: build.template(block.domain_name),
      }),
      account: resource.field('account'),
      authorized_principal: resource.field('authorized_principal'),
      domain_name: resource.field('domain_name'),
    },
    opensearch_domain(name, block): {
      local resource = blockType.resource('aws_opensearch_domain', name),
      _: resource._(block, {
        access_policies: build.template(std.get(block, 'access_policies', null)),
        advanced_options: build.template(std.get(block, 'advanced_options', null)),
        arn: build.template(std.get(block, 'arn', null)),
        dashboard_endpoint: build.template(std.get(block, 'dashboard_endpoint', null)),
        dashboard_endpoint_v2: build.template(std.get(block, 'dashboard_endpoint_v2', null)),
        domain_endpoint_v2_hosted_zone_id: build.template(std.get(block, 'domain_endpoint_v2_hosted_zone_id', null)),
        domain_id: build.template(std.get(block, 'domain_id', null)),
        domain_name: build.template(block.domain_name),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        endpoint_v2: build.template(std.get(block, 'endpoint_v2', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        kibana_endpoint: build.template(std.get(block, 'kibana_endpoint', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      access_policies: resource.field('access_policies'),
      advanced_options: resource.field('advanced_options'),
      arn: resource.field('arn'),
      dashboard_endpoint: resource.field('dashboard_endpoint'),
      dashboard_endpoint_v2: resource.field('dashboard_endpoint_v2'),
      domain_endpoint_v2_hosted_zone_id: resource.field('domain_endpoint_v2_hosted_zone_id'),
      domain_id: resource.field('domain_id'),
      domain_name: resource.field('domain_name'),
      endpoint: resource.field('endpoint'),
      endpoint_v2: resource.field('endpoint_v2'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      ip_address_type: resource.field('ip_address_type'),
      kibana_endpoint: resource.field('kibana_endpoint'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    opensearch_domain_policy(name, block): {
      local resource = blockType.resource('aws_opensearch_domain_policy', name),
      _: resource._(block, {
        access_policies: build.template(block.access_policies),
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      access_policies: resource.field('access_policies'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
    },
    opensearch_domain_saml_options(name, block): {
      local resource = blockType.resource('aws_opensearch_domain_saml_options', name),
      _: resource._(block, {
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
    },
    opensearch_inbound_connection_accepter(name, block): {
      local resource = blockType.resource('aws_opensearch_inbound_connection_accepter', name),
      _: resource._(block, {
        connection_id: build.template(block.connection_id),
        connection_status: build.template(std.get(block, 'connection_status', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      connection_id: resource.field('connection_id'),
      connection_status: resource.field('connection_status'),
      id: resource.field('id'),
    },
    opensearch_outbound_connection(name, block): {
      local resource = blockType.resource('aws_opensearch_outbound_connection', name),
      _: resource._(block, {
        accept_connection: build.template(std.get(block, 'accept_connection', null)),
        connection_alias: build.template(block.connection_alias),
        connection_mode: build.template(std.get(block, 'connection_mode', null)),
        connection_status: build.template(std.get(block, 'connection_status', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      accept_connection: resource.field('accept_connection'),
      connection_alias: resource.field('connection_alias'),
      connection_mode: resource.field('connection_mode'),
      connection_status: resource.field('connection_status'),
      id: resource.field('id'),
    },
    opensearch_package(name, block): {
      local resource = blockType.resource('aws_opensearch_package', name),
      _: resource._(block, {
        available_package_version: build.template(std.get(block, 'available_package_version', null)),
        id: build.template(std.get(block, 'id', null)),
        package_description: build.template(std.get(block, 'package_description', null)),
        package_id: build.template(std.get(block, 'package_id', null)),
        package_name: build.template(block.package_name),
        package_type: build.template(block.package_type),
      }),
      available_package_version: resource.field('available_package_version'),
      id: resource.field('id'),
      package_description: resource.field('package_description'),
      package_id: resource.field('package_id'),
      package_name: resource.field('package_name'),
      package_type: resource.field('package_type'),
    },
    opensearch_package_association(name, block): {
      local resource = blockType.resource('aws_opensearch_package_association', name),
      _: resource._(block, {
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        package_id: build.template(block.package_id),
        reference_path: build.template(std.get(block, 'reference_path', null)),
      }),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      package_id: resource.field('package_id'),
      reference_path: resource.field('reference_path'),
    },
    opensearch_vpc_endpoint(name, block): {
      local resource = blockType.resource('aws_opensearch_vpc_endpoint', name),
      _: resource._(block, {
        domain_arn: build.template(block.domain_arn),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      domain_arn: resource.field('domain_arn'),
      endpoint: resource.field('endpoint'),
      id: resource.field('id'),
    },
    opensearchserverless_access_policy(name, block): {
      local resource = blockType.resource('aws_opensearchserverless_access_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy: build.template(block.policy),
        policy_version: build.template(std.get(block, 'policy_version', null)),
        type: build.template(block.type),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy: resource.field('policy'),
      policy_version: resource.field('policy_version'),
      type: resource.field('type'),
    },
    opensearchserverless_collection(name, block): {
      local resource = blockType.resource('aws_opensearchserverless_collection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        collection_endpoint: build.template(std.get(block, 'collection_endpoint', null)),
        dashboard_endpoint: build.template(std.get(block, 'dashboard_endpoint', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        name: build.template(block.name),
        standby_replicas: build.template(std.get(block, 'standby_replicas', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      collection_endpoint: resource.field('collection_endpoint'),
      dashboard_endpoint: resource.field('dashboard_endpoint'),
      description: resource.field('description'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      name: resource.field('name'),
      standby_replicas: resource.field('standby_replicas'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    opensearchserverless_lifecycle_policy(name, block): {
      local resource = blockType.resource('aws_opensearchserverless_lifecycle_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy: build.template(block.policy),
        policy_version: build.template(std.get(block, 'policy_version', null)),
        type: build.template(block.type),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy: resource.field('policy'),
      policy_version: resource.field('policy_version'),
      type: resource.field('type'),
    },
    opensearchserverless_security_config(name, block): {
      local resource = blockType.resource('aws_opensearchserverless_security_config', name),
      _: resource._(block, {
        config_version: build.template(std.get(block, 'config_version', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        type: build.template(block.type),
      }),
      config_version: resource.field('config_version'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      type: resource.field('type'),
    },
    opensearchserverless_security_policy(name, block): {
      local resource = blockType.resource('aws_opensearchserverless_security_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy: build.template(block.policy),
        policy_version: build.template(std.get(block, 'policy_version', null)),
        type: build.template(block.type),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy: resource.field('policy'),
      policy_version: resource.field('policy_version'),
      type: resource.field('type'),
    },
    opensearchserverless_vpc_endpoint(name, block): {
      local resource = blockType.resource('aws_opensearchserverless_vpc_endpoint', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        subnet_ids: build.template(block.subnet_ids),
        vpc_id: build.template(block.vpc_id),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      security_group_ids: resource.field('security_group_ids'),
      subnet_ids: resource.field('subnet_ids'),
      vpc_id: resource.field('vpc_id'),
    },
    opsworks_application(name, block): {
      local resource = blockType.resource('aws_opsworks_application', name),
      _: resource._(block, {
        auto_bundle_on_deploy: build.template(std.get(block, 'auto_bundle_on_deploy', null)),
        aws_flow_ruby_settings: build.template(std.get(block, 'aws_flow_ruby_settings', null)),
        data_source_arn: build.template(std.get(block, 'data_source_arn', null)),
        data_source_database_name: build.template(std.get(block, 'data_source_database_name', null)),
        data_source_type: build.template(std.get(block, 'data_source_type', null)),
        description: build.template(std.get(block, 'description', null)),
        document_root: build.template(std.get(block, 'document_root', null)),
        domains: build.template(std.get(block, 'domains', null)),
        enable_ssl: build.template(std.get(block, 'enable_ssl', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        rails_env: build.template(std.get(block, 'rails_env', null)),
        short_name: build.template(std.get(block, 'short_name', null)),
        stack_id: build.template(block.stack_id),
        type: build.template(block.type),
      }),
      auto_bundle_on_deploy: resource.field('auto_bundle_on_deploy'),
      aws_flow_ruby_settings: resource.field('aws_flow_ruby_settings'),
      data_source_arn: resource.field('data_source_arn'),
      data_source_database_name: resource.field('data_source_database_name'),
      data_source_type: resource.field('data_source_type'),
      description: resource.field('description'),
      document_root: resource.field('document_root'),
      domains: resource.field('domains'),
      enable_ssl: resource.field('enable_ssl'),
      id: resource.field('id'),
      name: resource.field('name'),
      rails_env: resource.field('rails_env'),
      short_name: resource.field('short_name'),
      stack_id: resource.field('stack_id'),
      type: resource.field('type'),
    },
    opsworks_custom_layer(name, block): {
      local resource = blockType.resource('aws_opsworks_custom_layer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null)),
        auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null)),
        auto_healing: build.template(std.get(block, 'auto_healing', null)),
        custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null)),
        custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null)),
        custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null)),
        custom_json: build.template(std.get(block, 'custom_json', null)),
        custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null)),
        custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null)),
        custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null)),
        custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null)),
        drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null)),
        elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null)),
        id: build.template(std.get(block, 'id', null)),
        install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null)),
        instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null)),
        name: build.template(block.name),
        short_name: build.template(block.short_name),
        stack_id: build.template(block.stack_id),
        system_packages: build.template(std.get(block, 'system_packages', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null)),
      }),
      arn: resource.field('arn'),
      auto_assign_elastic_ips: resource.field('auto_assign_elastic_ips'),
      auto_assign_public_ips: resource.field('auto_assign_public_ips'),
      auto_healing: resource.field('auto_healing'),
      custom_configure_recipes: resource.field('custom_configure_recipes'),
      custom_deploy_recipes: resource.field('custom_deploy_recipes'),
      custom_instance_profile_arn: resource.field('custom_instance_profile_arn'),
      custom_json: resource.field('custom_json'),
      custom_security_group_ids: resource.field('custom_security_group_ids'),
      custom_setup_recipes: resource.field('custom_setup_recipes'),
      custom_shutdown_recipes: resource.field('custom_shutdown_recipes'),
      custom_undeploy_recipes: resource.field('custom_undeploy_recipes'),
      drain_elb_on_shutdown: resource.field('drain_elb_on_shutdown'),
      elastic_load_balancer: resource.field('elastic_load_balancer'),
      id: resource.field('id'),
      install_updates_on_boot: resource.field('install_updates_on_boot'),
      instance_shutdown_timeout: resource.field('instance_shutdown_timeout'),
      name: resource.field('name'),
      short_name: resource.field('short_name'),
      stack_id: resource.field('stack_id'),
      system_packages: resource.field('system_packages'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      use_ebs_optimized_instances: resource.field('use_ebs_optimized_instances'),
    },
    opsworks_ecs_cluster_layer(name, block): {
      local resource = blockType.resource('aws_opsworks_ecs_cluster_layer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null)),
        auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null)),
        auto_healing: build.template(std.get(block, 'auto_healing', null)),
        custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null)),
        custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null)),
        custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null)),
        custom_json: build.template(std.get(block, 'custom_json', null)),
        custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null)),
        custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null)),
        custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null)),
        custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null)),
        drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null)),
        ecs_cluster_arn: build.template(block.ecs_cluster_arn),
        elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null)),
        id: build.template(std.get(block, 'id', null)),
        install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null)),
        instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null)),
        name: build.template(std.get(block, 'name', null)),
        stack_id: build.template(block.stack_id),
        system_packages: build.template(std.get(block, 'system_packages', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null)),
      }),
      arn: resource.field('arn'),
      auto_assign_elastic_ips: resource.field('auto_assign_elastic_ips'),
      auto_assign_public_ips: resource.field('auto_assign_public_ips'),
      auto_healing: resource.field('auto_healing'),
      custom_configure_recipes: resource.field('custom_configure_recipes'),
      custom_deploy_recipes: resource.field('custom_deploy_recipes'),
      custom_instance_profile_arn: resource.field('custom_instance_profile_arn'),
      custom_json: resource.field('custom_json'),
      custom_security_group_ids: resource.field('custom_security_group_ids'),
      custom_setup_recipes: resource.field('custom_setup_recipes'),
      custom_shutdown_recipes: resource.field('custom_shutdown_recipes'),
      custom_undeploy_recipes: resource.field('custom_undeploy_recipes'),
      drain_elb_on_shutdown: resource.field('drain_elb_on_shutdown'),
      ecs_cluster_arn: resource.field('ecs_cluster_arn'),
      elastic_load_balancer: resource.field('elastic_load_balancer'),
      id: resource.field('id'),
      install_updates_on_boot: resource.field('install_updates_on_boot'),
      instance_shutdown_timeout: resource.field('instance_shutdown_timeout'),
      name: resource.field('name'),
      stack_id: resource.field('stack_id'),
      system_packages: resource.field('system_packages'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      use_ebs_optimized_instances: resource.field('use_ebs_optimized_instances'),
    },
    opsworks_ganglia_layer(name, block): {
      local resource = blockType.resource('aws_opsworks_ganglia_layer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null)),
        auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null)),
        auto_healing: build.template(std.get(block, 'auto_healing', null)),
        custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null)),
        custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null)),
        custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null)),
        custom_json: build.template(std.get(block, 'custom_json', null)),
        custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null)),
        custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null)),
        custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null)),
        custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null)),
        drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null)),
        elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null)),
        id: build.template(std.get(block, 'id', null)),
        install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null)),
        instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null)),
        name: build.template(std.get(block, 'name', null)),
        password: build.template(block.password),
        stack_id: build.template(block.stack_id),
        system_packages: build.template(std.get(block, 'system_packages', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        url: build.template(std.get(block, 'url', null)),
        use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      arn: resource.field('arn'),
      auto_assign_elastic_ips: resource.field('auto_assign_elastic_ips'),
      auto_assign_public_ips: resource.field('auto_assign_public_ips'),
      auto_healing: resource.field('auto_healing'),
      custom_configure_recipes: resource.field('custom_configure_recipes'),
      custom_deploy_recipes: resource.field('custom_deploy_recipes'),
      custom_instance_profile_arn: resource.field('custom_instance_profile_arn'),
      custom_json: resource.field('custom_json'),
      custom_security_group_ids: resource.field('custom_security_group_ids'),
      custom_setup_recipes: resource.field('custom_setup_recipes'),
      custom_shutdown_recipes: resource.field('custom_shutdown_recipes'),
      custom_undeploy_recipes: resource.field('custom_undeploy_recipes'),
      drain_elb_on_shutdown: resource.field('drain_elb_on_shutdown'),
      elastic_load_balancer: resource.field('elastic_load_balancer'),
      id: resource.field('id'),
      install_updates_on_boot: resource.field('install_updates_on_boot'),
      instance_shutdown_timeout: resource.field('instance_shutdown_timeout'),
      name: resource.field('name'),
      password: resource.field('password'),
      stack_id: resource.field('stack_id'),
      system_packages: resource.field('system_packages'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      url: resource.field('url'),
      use_ebs_optimized_instances: resource.field('use_ebs_optimized_instances'),
      username: resource.field('username'),
    },
    opsworks_haproxy_layer(name, block): {
      local resource = blockType.resource('aws_opsworks_haproxy_layer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null)),
        auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null)),
        auto_healing: build.template(std.get(block, 'auto_healing', null)),
        custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null)),
        custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null)),
        custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null)),
        custom_json: build.template(std.get(block, 'custom_json', null)),
        custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null)),
        custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null)),
        custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null)),
        custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null)),
        drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null)),
        elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null)),
        healthcheck_method: build.template(std.get(block, 'healthcheck_method', null)),
        healthcheck_url: build.template(std.get(block, 'healthcheck_url', null)),
        id: build.template(std.get(block, 'id', null)),
        install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null)),
        instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null)),
        name: build.template(std.get(block, 'name', null)),
        stack_id: build.template(block.stack_id),
        stats_enabled: build.template(std.get(block, 'stats_enabled', null)),
        stats_password: build.template(block.stats_password),
        stats_url: build.template(std.get(block, 'stats_url', null)),
        stats_user: build.template(std.get(block, 'stats_user', null)),
        system_packages: build.template(std.get(block, 'system_packages', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null)),
      }),
      arn: resource.field('arn'),
      auto_assign_elastic_ips: resource.field('auto_assign_elastic_ips'),
      auto_assign_public_ips: resource.field('auto_assign_public_ips'),
      auto_healing: resource.field('auto_healing'),
      custom_configure_recipes: resource.field('custom_configure_recipes'),
      custom_deploy_recipes: resource.field('custom_deploy_recipes'),
      custom_instance_profile_arn: resource.field('custom_instance_profile_arn'),
      custom_json: resource.field('custom_json'),
      custom_security_group_ids: resource.field('custom_security_group_ids'),
      custom_setup_recipes: resource.field('custom_setup_recipes'),
      custom_shutdown_recipes: resource.field('custom_shutdown_recipes'),
      custom_undeploy_recipes: resource.field('custom_undeploy_recipes'),
      drain_elb_on_shutdown: resource.field('drain_elb_on_shutdown'),
      elastic_load_balancer: resource.field('elastic_load_balancer'),
      healthcheck_method: resource.field('healthcheck_method'),
      healthcheck_url: resource.field('healthcheck_url'),
      id: resource.field('id'),
      install_updates_on_boot: resource.field('install_updates_on_boot'),
      instance_shutdown_timeout: resource.field('instance_shutdown_timeout'),
      name: resource.field('name'),
      stack_id: resource.field('stack_id'),
      stats_enabled: resource.field('stats_enabled'),
      stats_password: resource.field('stats_password'),
      stats_url: resource.field('stats_url'),
      stats_user: resource.field('stats_user'),
      system_packages: resource.field('system_packages'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      use_ebs_optimized_instances: resource.field('use_ebs_optimized_instances'),
    },
    opsworks_instance(name, block): {
      local resource = blockType.resource('aws_opsworks_instance', name),
      _: resource._(block, {
        agent_version: build.template(std.get(block, 'agent_version', null)),
        ami_id: build.template(std.get(block, 'ami_id', null)),
        architecture: build.template(std.get(block, 'architecture', null)),
        auto_scaling_type: build.template(std.get(block, 'auto_scaling_type', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        delete_ebs: build.template(std.get(block, 'delete_ebs', null)),
        delete_eip: build.template(std.get(block, 'delete_eip', null)),
        ebs_optimized: build.template(std.get(block, 'ebs_optimized', null)),
        ec2_instance_id: build.template(std.get(block, 'ec2_instance_id', null)),
        ecs_cluster_arn: build.template(std.get(block, 'ecs_cluster_arn', null)),
        elastic_ip: build.template(std.get(block, 'elastic_ip', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        infrastructure_class: build.template(std.get(block, 'infrastructure_class', null)),
        install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null)),
        instance_profile_arn: build.template(std.get(block, 'instance_profile_arn', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        last_service_error_id: build.template(std.get(block, 'last_service_error_id', null)),
        layer_ids: build.template(block.layer_ids),
        os: build.template(std.get(block, 'os', null)),
        platform: build.template(std.get(block, 'platform', null)),
        private_dns: build.template(std.get(block, 'private_dns', null)),
        private_ip: build.template(std.get(block, 'private_ip', null)),
        public_dns: build.template(std.get(block, 'public_dns', null)),
        public_ip: build.template(std.get(block, 'public_ip', null)),
        registered_by: build.template(std.get(block, 'registered_by', null)),
        reported_agent_version: build.template(std.get(block, 'reported_agent_version', null)),
        reported_os_family: build.template(std.get(block, 'reported_os_family', null)),
        reported_os_name: build.template(std.get(block, 'reported_os_name', null)),
        reported_os_version: build.template(std.get(block, 'reported_os_version', null)),
        root_device_type: build.template(std.get(block, 'root_device_type', null)),
        root_device_volume_id: build.template(std.get(block, 'root_device_volume_id', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        ssh_host_dsa_key_fingerprint: build.template(std.get(block, 'ssh_host_dsa_key_fingerprint', null)),
        ssh_host_rsa_key_fingerprint: build.template(std.get(block, 'ssh_host_rsa_key_fingerprint', null)),
        ssh_key_name: build.template(std.get(block, 'ssh_key_name', null)),
        stack_id: build.template(block.stack_id),
        state: build.template(std.get(block, 'state', null)),
        status: build.template(std.get(block, 'status', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tenancy: build.template(std.get(block, 'tenancy', null)),
        virtualization_type: build.template(std.get(block, 'virtualization_type', null)),
      }),
      agent_version: resource.field('agent_version'),
      ami_id: resource.field('ami_id'),
      architecture: resource.field('architecture'),
      auto_scaling_type: resource.field('auto_scaling_type'),
      availability_zone: resource.field('availability_zone'),
      created_at: resource.field('created_at'),
      delete_ebs: resource.field('delete_ebs'),
      delete_eip: resource.field('delete_eip'),
      ebs_optimized: resource.field('ebs_optimized'),
      ec2_instance_id: resource.field('ec2_instance_id'),
      ecs_cluster_arn: resource.field('ecs_cluster_arn'),
      elastic_ip: resource.field('elastic_ip'),
      hostname: resource.field('hostname'),
      id: resource.field('id'),
      infrastructure_class: resource.field('infrastructure_class'),
      install_updates_on_boot: resource.field('install_updates_on_boot'),
      instance_profile_arn: resource.field('instance_profile_arn'),
      instance_type: resource.field('instance_type'),
      last_service_error_id: resource.field('last_service_error_id'),
      layer_ids: resource.field('layer_ids'),
      os: resource.field('os'),
      platform: resource.field('platform'),
      private_dns: resource.field('private_dns'),
      private_ip: resource.field('private_ip'),
      public_dns: resource.field('public_dns'),
      public_ip: resource.field('public_ip'),
      registered_by: resource.field('registered_by'),
      reported_agent_version: resource.field('reported_agent_version'),
      reported_os_family: resource.field('reported_os_family'),
      reported_os_name: resource.field('reported_os_name'),
      reported_os_version: resource.field('reported_os_version'),
      root_device_type: resource.field('root_device_type'),
      root_device_volume_id: resource.field('root_device_volume_id'),
      security_group_ids: resource.field('security_group_ids'),
      ssh_host_dsa_key_fingerprint: resource.field('ssh_host_dsa_key_fingerprint'),
      ssh_host_rsa_key_fingerprint: resource.field('ssh_host_rsa_key_fingerprint'),
      ssh_key_name: resource.field('ssh_key_name'),
      stack_id: resource.field('stack_id'),
      state: resource.field('state'),
      status: resource.field('status'),
      subnet_id: resource.field('subnet_id'),
      tenancy: resource.field('tenancy'),
      virtualization_type: resource.field('virtualization_type'),
    },
    opsworks_java_app_layer(name, block): {
      local resource = blockType.resource('aws_opsworks_java_app_layer', name),
      _: resource._(block, {
        app_server: build.template(std.get(block, 'app_server', null)),
        app_server_version: build.template(std.get(block, 'app_server_version', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null)),
        auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null)),
        auto_healing: build.template(std.get(block, 'auto_healing', null)),
        custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null)),
        custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null)),
        custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null)),
        custom_json: build.template(std.get(block, 'custom_json', null)),
        custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null)),
        custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null)),
        custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null)),
        custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null)),
        drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null)),
        elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null)),
        id: build.template(std.get(block, 'id', null)),
        install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null)),
        instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null)),
        jvm_options: build.template(std.get(block, 'jvm_options', null)),
        jvm_type: build.template(std.get(block, 'jvm_type', null)),
        jvm_version: build.template(std.get(block, 'jvm_version', null)),
        name: build.template(std.get(block, 'name', null)),
        stack_id: build.template(block.stack_id),
        system_packages: build.template(std.get(block, 'system_packages', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null)),
      }),
      app_server: resource.field('app_server'),
      app_server_version: resource.field('app_server_version'),
      arn: resource.field('arn'),
      auto_assign_elastic_ips: resource.field('auto_assign_elastic_ips'),
      auto_assign_public_ips: resource.field('auto_assign_public_ips'),
      auto_healing: resource.field('auto_healing'),
      custom_configure_recipes: resource.field('custom_configure_recipes'),
      custom_deploy_recipes: resource.field('custom_deploy_recipes'),
      custom_instance_profile_arn: resource.field('custom_instance_profile_arn'),
      custom_json: resource.field('custom_json'),
      custom_security_group_ids: resource.field('custom_security_group_ids'),
      custom_setup_recipes: resource.field('custom_setup_recipes'),
      custom_shutdown_recipes: resource.field('custom_shutdown_recipes'),
      custom_undeploy_recipes: resource.field('custom_undeploy_recipes'),
      drain_elb_on_shutdown: resource.field('drain_elb_on_shutdown'),
      elastic_load_balancer: resource.field('elastic_load_balancer'),
      id: resource.field('id'),
      install_updates_on_boot: resource.field('install_updates_on_boot'),
      instance_shutdown_timeout: resource.field('instance_shutdown_timeout'),
      jvm_options: resource.field('jvm_options'),
      jvm_type: resource.field('jvm_type'),
      jvm_version: resource.field('jvm_version'),
      name: resource.field('name'),
      stack_id: resource.field('stack_id'),
      system_packages: resource.field('system_packages'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      use_ebs_optimized_instances: resource.field('use_ebs_optimized_instances'),
    },
    opsworks_memcached_layer(name, block): {
      local resource = blockType.resource('aws_opsworks_memcached_layer', name),
      _: resource._(block, {
        allocated_memory: build.template(std.get(block, 'allocated_memory', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null)),
        auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null)),
        auto_healing: build.template(std.get(block, 'auto_healing', null)),
        custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null)),
        custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null)),
        custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null)),
        custom_json: build.template(std.get(block, 'custom_json', null)),
        custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null)),
        custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null)),
        custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null)),
        custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null)),
        drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null)),
        elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null)),
        id: build.template(std.get(block, 'id', null)),
        install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null)),
        instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null)),
        name: build.template(std.get(block, 'name', null)),
        stack_id: build.template(block.stack_id),
        system_packages: build.template(std.get(block, 'system_packages', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null)),
      }),
      allocated_memory: resource.field('allocated_memory'),
      arn: resource.field('arn'),
      auto_assign_elastic_ips: resource.field('auto_assign_elastic_ips'),
      auto_assign_public_ips: resource.field('auto_assign_public_ips'),
      auto_healing: resource.field('auto_healing'),
      custom_configure_recipes: resource.field('custom_configure_recipes'),
      custom_deploy_recipes: resource.field('custom_deploy_recipes'),
      custom_instance_profile_arn: resource.field('custom_instance_profile_arn'),
      custom_json: resource.field('custom_json'),
      custom_security_group_ids: resource.field('custom_security_group_ids'),
      custom_setup_recipes: resource.field('custom_setup_recipes'),
      custom_shutdown_recipes: resource.field('custom_shutdown_recipes'),
      custom_undeploy_recipes: resource.field('custom_undeploy_recipes'),
      drain_elb_on_shutdown: resource.field('drain_elb_on_shutdown'),
      elastic_load_balancer: resource.field('elastic_load_balancer'),
      id: resource.field('id'),
      install_updates_on_boot: resource.field('install_updates_on_boot'),
      instance_shutdown_timeout: resource.field('instance_shutdown_timeout'),
      name: resource.field('name'),
      stack_id: resource.field('stack_id'),
      system_packages: resource.field('system_packages'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      use_ebs_optimized_instances: resource.field('use_ebs_optimized_instances'),
    },
    opsworks_mysql_layer(name, block): {
      local resource = blockType.resource('aws_opsworks_mysql_layer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null)),
        auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null)),
        auto_healing: build.template(std.get(block, 'auto_healing', null)),
        custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null)),
        custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null)),
        custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null)),
        custom_json: build.template(std.get(block, 'custom_json', null)),
        custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null)),
        custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null)),
        custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null)),
        custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null)),
        drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null)),
        elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null)),
        id: build.template(std.get(block, 'id', null)),
        install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null)),
        instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null)),
        name: build.template(std.get(block, 'name', null)),
        root_password: build.template(std.get(block, 'root_password', null)),
        root_password_on_all_instances: build.template(std.get(block, 'root_password_on_all_instances', null)),
        stack_id: build.template(block.stack_id),
        system_packages: build.template(std.get(block, 'system_packages', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null)),
      }),
      arn: resource.field('arn'),
      auto_assign_elastic_ips: resource.field('auto_assign_elastic_ips'),
      auto_assign_public_ips: resource.field('auto_assign_public_ips'),
      auto_healing: resource.field('auto_healing'),
      custom_configure_recipes: resource.field('custom_configure_recipes'),
      custom_deploy_recipes: resource.field('custom_deploy_recipes'),
      custom_instance_profile_arn: resource.field('custom_instance_profile_arn'),
      custom_json: resource.field('custom_json'),
      custom_security_group_ids: resource.field('custom_security_group_ids'),
      custom_setup_recipes: resource.field('custom_setup_recipes'),
      custom_shutdown_recipes: resource.field('custom_shutdown_recipes'),
      custom_undeploy_recipes: resource.field('custom_undeploy_recipes'),
      drain_elb_on_shutdown: resource.field('drain_elb_on_shutdown'),
      elastic_load_balancer: resource.field('elastic_load_balancer'),
      id: resource.field('id'),
      install_updates_on_boot: resource.field('install_updates_on_boot'),
      instance_shutdown_timeout: resource.field('instance_shutdown_timeout'),
      name: resource.field('name'),
      root_password: resource.field('root_password'),
      root_password_on_all_instances: resource.field('root_password_on_all_instances'),
      stack_id: resource.field('stack_id'),
      system_packages: resource.field('system_packages'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      use_ebs_optimized_instances: resource.field('use_ebs_optimized_instances'),
    },
    opsworks_nodejs_app_layer(name, block): {
      local resource = blockType.resource('aws_opsworks_nodejs_app_layer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null)),
        auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null)),
        auto_healing: build.template(std.get(block, 'auto_healing', null)),
        custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null)),
        custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null)),
        custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null)),
        custom_json: build.template(std.get(block, 'custom_json', null)),
        custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null)),
        custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null)),
        custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null)),
        custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null)),
        drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null)),
        elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null)),
        id: build.template(std.get(block, 'id', null)),
        install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null)),
        instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null)),
        name: build.template(std.get(block, 'name', null)),
        nodejs_version: build.template(std.get(block, 'nodejs_version', null)),
        stack_id: build.template(block.stack_id),
        system_packages: build.template(std.get(block, 'system_packages', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null)),
      }),
      arn: resource.field('arn'),
      auto_assign_elastic_ips: resource.field('auto_assign_elastic_ips'),
      auto_assign_public_ips: resource.field('auto_assign_public_ips'),
      auto_healing: resource.field('auto_healing'),
      custom_configure_recipes: resource.field('custom_configure_recipes'),
      custom_deploy_recipes: resource.field('custom_deploy_recipes'),
      custom_instance_profile_arn: resource.field('custom_instance_profile_arn'),
      custom_json: resource.field('custom_json'),
      custom_security_group_ids: resource.field('custom_security_group_ids'),
      custom_setup_recipes: resource.field('custom_setup_recipes'),
      custom_shutdown_recipes: resource.field('custom_shutdown_recipes'),
      custom_undeploy_recipes: resource.field('custom_undeploy_recipes'),
      drain_elb_on_shutdown: resource.field('drain_elb_on_shutdown'),
      elastic_load_balancer: resource.field('elastic_load_balancer'),
      id: resource.field('id'),
      install_updates_on_boot: resource.field('install_updates_on_boot'),
      instance_shutdown_timeout: resource.field('instance_shutdown_timeout'),
      name: resource.field('name'),
      nodejs_version: resource.field('nodejs_version'),
      stack_id: resource.field('stack_id'),
      system_packages: resource.field('system_packages'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      use_ebs_optimized_instances: resource.field('use_ebs_optimized_instances'),
    },
    opsworks_permission(name, block): {
      local resource = blockType.resource('aws_opsworks_permission', name),
      _: resource._(block, {
        allow_ssh: build.template(std.get(block, 'allow_ssh', null)),
        allow_sudo: build.template(std.get(block, 'allow_sudo', null)),
        id: build.template(std.get(block, 'id', null)),
        level: build.template(std.get(block, 'level', null)),
        stack_id: build.template(block.stack_id),
        user_arn: build.template(block.user_arn),
      }),
      allow_ssh: resource.field('allow_ssh'),
      allow_sudo: resource.field('allow_sudo'),
      id: resource.field('id'),
      level: resource.field('level'),
      stack_id: resource.field('stack_id'),
      user_arn: resource.field('user_arn'),
    },
    opsworks_php_app_layer(name, block): {
      local resource = blockType.resource('aws_opsworks_php_app_layer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null)),
        auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null)),
        auto_healing: build.template(std.get(block, 'auto_healing', null)),
        custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null)),
        custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null)),
        custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null)),
        custom_json: build.template(std.get(block, 'custom_json', null)),
        custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null)),
        custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null)),
        custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null)),
        custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null)),
        drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null)),
        elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null)),
        id: build.template(std.get(block, 'id', null)),
        install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null)),
        instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null)),
        name: build.template(std.get(block, 'name', null)),
        stack_id: build.template(block.stack_id),
        system_packages: build.template(std.get(block, 'system_packages', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null)),
      }),
      arn: resource.field('arn'),
      auto_assign_elastic_ips: resource.field('auto_assign_elastic_ips'),
      auto_assign_public_ips: resource.field('auto_assign_public_ips'),
      auto_healing: resource.field('auto_healing'),
      custom_configure_recipes: resource.field('custom_configure_recipes'),
      custom_deploy_recipes: resource.field('custom_deploy_recipes'),
      custom_instance_profile_arn: resource.field('custom_instance_profile_arn'),
      custom_json: resource.field('custom_json'),
      custom_security_group_ids: resource.field('custom_security_group_ids'),
      custom_setup_recipes: resource.field('custom_setup_recipes'),
      custom_shutdown_recipes: resource.field('custom_shutdown_recipes'),
      custom_undeploy_recipes: resource.field('custom_undeploy_recipes'),
      drain_elb_on_shutdown: resource.field('drain_elb_on_shutdown'),
      elastic_load_balancer: resource.field('elastic_load_balancer'),
      id: resource.field('id'),
      install_updates_on_boot: resource.field('install_updates_on_boot'),
      instance_shutdown_timeout: resource.field('instance_shutdown_timeout'),
      name: resource.field('name'),
      stack_id: resource.field('stack_id'),
      system_packages: resource.field('system_packages'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      use_ebs_optimized_instances: resource.field('use_ebs_optimized_instances'),
    },
    opsworks_rails_app_layer(name, block): {
      local resource = blockType.resource('aws_opsworks_rails_app_layer', name),
      _: resource._(block, {
        app_server: build.template(std.get(block, 'app_server', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null)),
        auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null)),
        auto_healing: build.template(std.get(block, 'auto_healing', null)),
        bundler_version: build.template(std.get(block, 'bundler_version', null)),
        custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null)),
        custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null)),
        custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null)),
        custom_json: build.template(std.get(block, 'custom_json', null)),
        custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null)),
        custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null)),
        custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null)),
        custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null)),
        drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null)),
        elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null)),
        id: build.template(std.get(block, 'id', null)),
        install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null)),
        instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null)),
        manage_bundler: build.template(std.get(block, 'manage_bundler', null)),
        name: build.template(std.get(block, 'name', null)),
        passenger_version: build.template(std.get(block, 'passenger_version', null)),
        ruby_version: build.template(std.get(block, 'ruby_version', null)),
        rubygems_version: build.template(std.get(block, 'rubygems_version', null)),
        stack_id: build.template(block.stack_id),
        system_packages: build.template(std.get(block, 'system_packages', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null)),
      }),
      app_server: resource.field('app_server'),
      arn: resource.field('arn'),
      auto_assign_elastic_ips: resource.field('auto_assign_elastic_ips'),
      auto_assign_public_ips: resource.field('auto_assign_public_ips'),
      auto_healing: resource.field('auto_healing'),
      bundler_version: resource.field('bundler_version'),
      custom_configure_recipes: resource.field('custom_configure_recipes'),
      custom_deploy_recipes: resource.field('custom_deploy_recipes'),
      custom_instance_profile_arn: resource.field('custom_instance_profile_arn'),
      custom_json: resource.field('custom_json'),
      custom_security_group_ids: resource.field('custom_security_group_ids'),
      custom_setup_recipes: resource.field('custom_setup_recipes'),
      custom_shutdown_recipes: resource.field('custom_shutdown_recipes'),
      custom_undeploy_recipes: resource.field('custom_undeploy_recipes'),
      drain_elb_on_shutdown: resource.field('drain_elb_on_shutdown'),
      elastic_load_balancer: resource.field('elastic_load_balancer'),
      id: resource.field('id'),
      install_updates_on_boot: resource.field('install_updates_on_boot'),
      instance_shutdown_timeout: resource.field('instance_shutdown_timeout'),
      manage_bundler: resource.field('manage_bundler'),
      name: resource.field('name'),
      passenger_version: resource.field('passenger_version'),
      ruby_version: resource.field('ruby_version'),
      rubygems_version: resource.field('rubygems_version'),
      stack_id: resource.field('stack_id'),
      system_packages: resource.field('system_packages'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      use_ebs_optimized_instances: resource.field('use_ebs_optimized_instances'),
    },
    opsworks_rds_db_instance(name, block): {
      local resource = blockType.resource('aws_opsworks_rds_db_instance', name),
      _: resource._(block, {
        db_password: build.template(block.db_password),
        db_user: build.template(block.db_user),
        id: build.template(std.get(block, 'id', null)),
        rds_db_instance_arn: build.template(block.rds_db_instance_arn),
        stack_id: build.template(block.stack_id),
      }),
      db_password: resource.field('db_password'),
      db_user: resource.field('db_user'),
      id: resource.field('id'),
      rds_db_instance_arn: resource.field('rds_db_instance_arn'),
      stack_id: resource.field('stack_id'),
    },
    opsworks_stack(name, block): {
      local resource = blockType.resource('aws_opsworks_stack', name),
      _: resource._(block, {
        agent_version: build.template(std.get(block, 'agent_version', null)),
        arn: build.template(std.get(block, 'arn', null)),
        berkshelf_version: build.template(std.get(block, 'berkshelf_version', null)),
        color: build.template(std.get(block, 'color', null)),
        configuration_manager_name: build.template(std.get(block, 'configuration_manager_name', null)),
        configuration_manager_version: build.template(std.get(block, 'configuration_manager_version', null)),
        custom_json: build.template(std.get(block, 'custom_json', null)),
        default_availability_zone: build.template(std.get(block, 'default_availability_zone', null)),
        default_instance_profile_arn: build.template(block.default_instance_profile_arn),
        default_os: build.template(std.get(block, 'default_os', null)),
        default_root_device_type: build.template(std.get(block, 'default_root_device_type', null)),
        default_ssh_key_name: build.template(std.get(block, 'default_ssh_key_name', null)),
        default_subnet_id: build.template(std.get(block, 'default_subnet_id', null)),
        hostname_theme: build.template(std.get(block, 'hostname_theme', null)),
        id: build.template(std.get(block, 'id', null)),
        manage_berkshelf: build.template(std.get(block, 'manage_berkshelf', null)),
        name: build.template(block.name),
        region: build.template(block.region),
        service_role_arn: build.template(block.service_role_arn),
        stack_endpoint: build.template(std.get(block, 'stack_endpoint', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        use_custom_cookbooks: build.template(std.get(block, 'use_custom_cookbooks', null)),
        use_opsworks_security_groups: build.template(std.get(block, 'use_opsworks_security_groups', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      agent_version: resource.field('agent_version'),
      arn: resource.field('arn'),
      berkshelf_version: resource.field('berkshelf_version'),
      color: resource.field('color'),
      configuration_manager_name: resource.field('configuration_manager_name'),
      configuration_manager_version: resource.field('configuration_manager_version'),
      custom_json: resource.field('custom_json'),
      default_availability_zone: resource.field('default_availability_zone'),
      default_instance_profile_arn: resource.field('default_instance_profile_arn'),
      default_os: resource.field('default_os'),
      default_root_device_type: resource.field('default_root_device_type'),
      default_ssh_key_name: resource.field('default_ssh_key_name'),
      default_subnet_id: resource.field('default_subnet_id'),
      hostname_theme: resource.field('hostname_theme'),
      id: resource.field('id'),
      manage_berkshelf: resource.field('manage_berkshelf'),
      name: resource.field('name'),
      region: resource.field('region'),
      service_role_arn: resource.field('service_role_arn'),
      stack_endpoint: resource.field('stack_endpoint'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      use_custom_cookbooks: resource.field('use_custom_cookbooks'),
      use_opsworks_security_groups: resource.field('use_opsworks_security_groups'),
      vpc_id: resource.field('vpc_id'),
    },
    opsworks_static_web_layer(name, block): {
      local resource = blockType.resource('aws_opsworks_static_web_layer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null)),
        auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null)),
        auto_healing: build.template(std.get(block, 'auto_healing', null)),
        custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null)),
        custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null)),
        custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null)),
        custom_json: build.template(std.get(block, 'custom_json', null)),
        custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null)),
        custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null)),
        custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null)),
        custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null)),
        drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null)),
        elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null)),
        id: build.template(std.get(block, 'id', null)),
        install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null)),
        instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null)),
        name: build.template(std.get(block, 'name', null)),
        stack_id: build.template(block.stack_id),
        system_packages: build.template(std.get(block, 'system_packages', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null)),
      }),
      arn: resource.field('arn'),
      auto_assign_elastic_ips: resource.field('auto_assign_elastic_ips'),
      auto_assign_public_ips: resource.field('auto_assign_public_ips'),
      auto_healing: resource.field('auto_healing'),
      custom_configure_recipes: resource.field('custom_configure_recipes'),
      custom_deploy_recipes: resource.field('custom_deploy_recipes'),
      custom_instance_profile_arn: resource.field('custom_instance_profile_arn'),
      custom_json: resource.field('custom_json'),
      custom_security_group_ids: resource.field('custom_security_group_ids'),
      custom_setup_recipes: resource.field('custom_setup_recipes'),
      custom_shutdown_recipes: resource.field('custom_shutdown_recipes'),
      custom_undeploy_recipes: resource.field('custom_undeploy_recipes'),
      drain_elb_on_shutdown: resource.field('drain_elb_on_shutdown'),
      elastic_load_balancer: resource.field('elastic_load_balancer'),
      id: resource.field('id'),
      install_updates_on_boot: resource.field('install_updates_on_boot'),
      instance_shutdown_timeout: resource.field('instance_shutdown_timeout'),
      name: resource.field('name'),
      stack_id: resource.field('stack_id'),
      system_packages: resource.field('system_packages'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      use_ebs_optimized_instances: resource.field('use_ebs_optimized_instances'),
    },
    opsworks_user_profile(name, block): {
      local resource = blockType.resource('aws_opsworks_user_profile', name),
      _: resource._(block, {
        allow_self_management: build.template(std.get(block, 'allow_self_management', null)),
        id: build.template(std.get(block, 'id', null)),
        ssh_public_key: build.template(std.get(block, 'ssh_public_key', null)),
        ssh_username: build.template(block.ssh_username),
        user_arn: build.template(block.user_arn),
      }),
      allow_self_management: resource.field('allow_self_management'),
      id: resource.field('id'),
      ssh_public_key: resource.field('ssh_public_key'),
      ssh_username: resource.field('ssh_username'),
      user_arn: resource.field('user_arn'),
    },
    organizations_account(name, block): {
      local resource = blockType.resource('aws_organizations_account', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        close_on_deletion: build.template(std.get(block, 'close_on_deletion', null)),
        create_govcloud: build.template(std.get(block, 'create_govcloud', null)),
        email: build.template(block.email),
        govcloud_id: build.template(std.get(block, 'govcloud_id', null)),
        iam_user_access_to_billing: build.template(std.get(block, 'iam_user_access_to_billing', null)),
        id: build.template(std.get(block, 'id', null)),
        joined_method: build.template(std.get(block, 'joined_method', null)),
        joined_timestamp: build.template(std.get(block, 'joined_timestamp', null)),
        name: build.template(block.name),
        parent_id: build.template(std.get(block, 'parent_id', null)),
        role_name: build.template(std.get(block, 'role_name', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      close_on_deletion: resource.field('close_on_deletion'),
      create_govcloud: resource.field('create_govcloud'),
      email: resource.field('email'),
      govcloud_id: resource.field('govcloud_id'),
      iam_user_access_to_billing: resource.field('iam_user_access_to_billing'),
      id: resource.field('id'),
      joined_method: resource.field('joined_method'),
      joined_timestamp: resource.field('joined_timestamp'),
      name: resource.field('name'),
      parent_id: resource.field('parent_id'),
      role_name: resource.field('role_name'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    organizations_delegated_administrator(name, block): {
      local resource = blockType.resource('aws_organizations_delegated_administrator', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        arn: build.template(std.get(block, 'arn', null)),
        delegation_enabled_date: build.template(std.get(block, 'delegation_enabled_date', null)),
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        joined_method: build.template(std.get(block, 'joined_method', null)),
        joined_timestamp: build.template(std.get(block, 'joined_timestamp', null)),
        name: build.template(std.get(block, 'name', null)),
        service_principal: build.template(block.service_principal),
        status: build.template(std.get(block, 'status', null)),
      }),
      account_id: resource.field('account_id'),
      arn: resource.field('arn'),
      delegation_enabled_date: resource.field('delegation_enabled_date'),
      email: resource.field('email'),
      id: resource.field('id'),
      joined_method: resource.field('joined_method'),
      joined_timestamp: resource.field('joined_timestamp'),
      name: resource.field('name'),
      service_principal: resource.field('service_principal'),
      status: resource.field('status'),
    },
    organizations_organization(name, block): {
      local resource = blockType.resource('aws_organizations_organization', name),
      _: resource._(block, {
        accounts: build.template(std.get(block, 'accounts', null)),
        arn: build.template(std.get(block, 'arn', null)),
        aws_service_access_principals: build.template(std.get(block, 'aws_service_access_principals', null)),
        enabled_policy_types: build.template(std.get(block, 'enabled_policy_types', null)),
        feature_set: build.template(std.get(block, 'feature_set', null)),
        id: build.template(std.get(block, 'id', null)),
        master_account_arn: build.template(std.get(block, 'master_account_arn', null)),
        master_account_email: build.template(std.get(block, 'master_account_email', null)),
        master_account_id: build.template(std.get(block, 'master_account_id', null)),
        master_account_name: build.template(std.get(block, 'master_account_name', null)),
        non_master_accounts: build.template(std.get(block, 'non_master_accounts', null)),
        roots: build.template(std.get(block, 'roots', null)),
      }),
      accounts: resource.field('accounts'),
      arn: resource.field('arn'),
      aws_service_access_principals: resource.field('aws_service_access_principals'),
      enabled_policy_types: resource.field('enabled_policy_types'),
      feature_set: resource.field('feature_set'),
      id: resource.field('id'),
      master_account_arn: resource.field('master_account_arn'),
      master_account_email: resource.field('master_account_email'),
      master_account_id: resource.field('master_account_id'),
      master_account_name: resource.field('master_account_name'),
      non_master_accounts: resource.field('non_master_accounts'),
      roots: resource.field('roots'),
    },
    organizations_organizational_unit(name, block): {
      local resource = blockType.resource('aws_organizations_organizational_unit', name),
      _: resource._(block, {
        accounts: build.template(std.get(block, 'accounts', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parent_id: build.template(block.parent_id),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      accounts: resource.field('accounts'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent_id: resource.field('parent_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    organizations_policy(name, block): {
      local resource = blockType.resource('aws_organizations_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        content: build.template(block.content),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      content: resource.field('content'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      skip_destroy: resource.field('skip_destroy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    organizations_policy_attachment(name, block): {
      local resource = blockType.resource('aws_organizations_policy_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy_id: build.template(block.policy_id),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        target_id: build.template(block.target_id),
      }),
      id: resource.field('id'),
      policy_id: resource.field('policy_id'),
      skip_destroy: resource.field('skip_destroy'),
      target_id: resource.field('target_id'),
    },
    organizations_resource_policy(name, block): {
      local resource = blockType.resource('aws_organizations_resource_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        content: build.template(block.content),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      content: resource.field('content'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    osis_pipeline(name, block): {
      local resource = blockType.resource('aws_osis_pipeline', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ingest_endpoint_urls: build.template(std.get(block, 'ingest_endpoint_urls', null)),
        max_units: build.template(block.max_units),
        min_units: build.template(block.min_units),
        pipeline_arn: build.template(std.get(block, 'pipeline_arn', null)),
        pipeline_configuration_body: build.template(block.pipeline_configuration_body),
        pipeline_name: build.template(block.pipeline_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      id: resource.field('id'),
      ingest_endpoint_urls: resource.field('ingest_endpoint_urls'),
      max_units: resource.field('max_units'),
      min_units: resource.field('min_units'),
      pipeline_arn: resource.field('pipeline_arn'),
      pipeline_configuration_body: resource.field('pipeline_configuration_body'),
      pipeline_name: resource.field('pipeline_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    paymentcryptography_key(name, block): {
      local resource = blockType.resource('aws_paymentcryptography_key', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        deletion_window_in_days: build.template(std.get(block, 'deletion_window_in_days', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        exportable: build.template(block.exportable),
        id: build.template(std.get(block, 'id', null)),
        key_check_value: build.template(std.get(block, 'key_check_value', null)),
        key_check_value_algorithm: build.template(std.get(block, 'key_check_value_algorithm', null)),
        key_origin: build.template(std.get(block, 'key_origin', null)),
        key_state: build.template(std.get(block, 'key_state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      deletion_window_in_days: resource.field('deletion_window_in_days'),
      enabled: resource.field('enabled'),
      exportable: resource.field('exportable'),
      id: resource.field('id'),
      key_check_value: resource.field('key_check_value'),
      key_check_value_algorithm: resource.field('key_check_value_algorithm'),
      key_origin: resource.field('key_origin'),
      key_state: resource.field('key_state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    paymentcryptography_key_alias(name, block): {
      local resource = blockType.resource('aws_paymentcryptography_key_alias', name),
      _: resource._(block, {
        alias_name: build.template(block.alias_name),
        id: build.template(std.get(block, 'id', null)),
        key_arn: build.template(std.get(block, 'key_arn', null)),
      }),
      alias_name: resource.field('alias_name'),
      id: resource.field('id'),
      key_arn: resource.field('key_arn'),
    },
    pinpoint_adm_channel(name, block): {
      local resource = blockType.resource('aws_pinpoint_adm_channel', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        client_id: build.template(block.client_id),
        client_secret: build.template(block.client_secret),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      application_id: resource.field('application_id'),
      client_id: resource.field('client_id'),
      client_secret: resource.field('client_secret'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
    },
    pinpoint_apns_channel(name, block): {
      local resource = blockType.resource('aws_pinpoint_apns_channel', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        bundle_id: build.template(std.get(block, 'bundle_id', null)),
        certificate: build.template(std.get(block, 'certificate', null)),
        default_authentication_method: build.template(std.get(block, 'default_authentication_method', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        team_id: build.template(std.get(block, 'team_id', null)),
        token_key: build.template(std.get(block, 'token_key', null)),
        token_key_id: build.template(std.get(block, 'token_key_id', null)),
      }),
      application_id: resource.field('application_id'),
      bundle_id: resource.field('bundle_id'),
      certificate: resource.field('certificate'),
      default_authentication_method: resource.field('default_authentication_method'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      private_key: resource.field('private_key'),
      team_id: resource.field('team_id'),
      token_key: resource.field('token_key'),
      token_key_id: resource.field('token_key_id'),
    },
    pinpoint_apns_sandbox_channel(name, block): {
      local resource = blockType.resource('aws_pinpoint_apns_sandbox_channel', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        bundle_id: build.template(std.get(block, 'bundle_id', null)),
        certificate: build.template(std.get(block, 'certificate', null)),
        default_authentication_method: build.template(std.get(block, 'default_authentication_method', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        team_id: build.template(std.get(block, 'team_id', null)),
        token_key: build.template(std.get(block, 'token_key', null)),
        token_key_id: build.template(std.get(block, 'token_key_id', null)),
      }),
      application_id: resource.field('application_id'),
      bundle_id: resource.field('bundle_id'),
      certificate: resource.field('certificate'),
      default_authentication_method: resource.field('default_authentication_method'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      private_key: resource.field('private_key'),
      team_id: resource.field('team_id'),
      token_key: resource.field('token_key'),
      token_key_id: resource.field('token_key_id'),
    },
    pinpoint_apns_voip_channel(name, block): {
      local resource = blockType.resource('aws_pinpoint_apns_voip_channel', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        bundle_id: build.template(std.get(block, 'bundle_id', null)),
        certificate: build.template(std.get(block, 'certificate', null)),
        default_authentication_method: build.template(std.get(block, 'default_authentication_method', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        team_id: build.template(std.get(block, 'team_id', null)),
        token_key: build.template(std.get(block, 'token_key', null)),
        token_key_id: build.template(std.get(block, 'token_key_id', null)),
      }),
      application_id: resource.field('application_id'),
      bundle_id: resource.field('bundle_id'),
      certificate: resource.field('certificate'),
      default_authentication_method: resource.field('default_authentication_method'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      private_key: resource.field('private_key'),
      team_id: resource.field('team_id'),
      token_key: resource.field('token_key'),
      token_key_id: resource.field('token_key_id'),
    },
    pinpoint_apns_voip_sandbox_channel(name, block): {
      local resource = blockType.resource('aws_pinpoint_apns_voip_sandbox_channel', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        bundle_id: build.template(std.get(block, 'bundle_id', null)),
        certificate: build.template(std.get(block, 'certificate', null)),
        default_authentication_method: build.template(std.get(block, 'default_authentication_method', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        team_id: build.template(std.get(block, 'team_id', null)),
        token_key: build.template(std.get(block, 'token_key', null)),
        token_key_id: build.template(std.get(block, 'token_key_id', null)),
      }),
      application_id: resource.field('application_id'),
      bundle_id: resource.field('bundle_id'),
      certificate: resource.field('certificate'),
      default_authentication_method: resource.field('default_authentication_method'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      private_key: resource.field('private_key'),
      team_id: resource.field('team_id'),
      token_key: resource.field('token_key'),
      token_key_id: resource.field('token_key_id'),
    },
    pinpoint_app(name, block): {
      local resource = blockType.resource('aws_pinpoint_app', name),
      _: resource._(block, {
        application_id: build.template(std.get(block, 'application_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      application_id: resource.field('application_id'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    pinpoint_baidu_channel(name, block): {
      local resource = blockType.resource('aws_pinpoint_baidu_channel', name),
      _: resource._(block, {
        api_key: build.template(block.api_key),
        application_id: build.template(block.application_id),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        secret_key: build.template(block.secret_key),
      }),
      api_key: resource.field('api_key'),
      application_id: resource.field('application_id'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      secret_key: resource.field('secret_key'),
    },
    pinpoint_email_channel(name, block): {
      local resource = blockType.resource('aws_pinpoint_email_channel', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        configuration_set: build.template(std.get(block, 'configuration_set', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        from_address: build.template(block.from_address),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(block.identity),
        messages_per_second: build.template(std.get(block, 'messages_per_second', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
      }),
      application_id: resource.field('application_id'),
      configuration_set: resource.field('configuration_set'),
      enabled: resource.field('enabled'),
      from_address: resource.field('from_address'),
      id: resource.field('id'),
      identity: resource.field('identity'),
      messages_per_second: resource.field('messages_per_second'),
      role_arn: resource.field('role_arn'),
    },
    pinpoint_email_template(name, block): {
      local resource = blockType.resource('aws_pinpoint_email_template', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        template_name: build.template(block.template_name),
      }),
      arn: resource.field('arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      template_name: resource.field('template_name'),
    },
    pinpoint_event_stream(name, block): {
      local resource = blockType.resource('aws_pinpoint_event_stream', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        destination_stream_arn: build.template(block.destination_stream_arn),
        id: build.template(std.get(block, 'id', null)),
        role_arn: build.template(block.role_arn),
      }),
      application_id: resource.field('application_id'),
      destination_stream_arn: resource.field('destination_stream_arn'),
      id: resource.field('id'),
      role_arn: resource.field('role_arn'),
    },
    pinpoint_gcm_channel(name, block): {
      local resource = blockType.resource('aws_pinpoint_gcm_channel', name),
      _: resource._(block, {
        api_key: build.template(std.get(block, 'api_key', null)),
        application_id: build.template(block.application_id),
        default_authentication_method: build.template(std.get(block, 'default_authentication_method', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        service_json: build.template(std.get(block, 'service_json', null)),
      }),
      api_key: resource.field('api_key'),
      application_id: resource.field('application_id'),
      default_authentication_method: resource.field('default_authentication_method'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      service_json: resource.field('service_json'),
    },
    pinpoint_sms_channel(name, block): {
      local resource = blockType.resource('aws_pinpoint_sms_channel', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        promotional_messages_per_second: build.template(std.get(block, 'promotional_messages_per_second', null)),
        sender_id: build.template(std.get(block, 'sender_id', null)),
        short_code: build.template(std.get(block, 'short_code', null)),
        transactional_messages_per_second: build.template(std.get(block, 'transactional_messages_per_second', null)),
      }),
      application_id: resource.field('application_id'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      promotional_messages_per_second: resource.field('promotional_messages_per_second'),
      sender_id: resource.field('sender_id'),
      short_code: resource.field('short_code'),
      transactional_messages_per_second: resource.field('transactional_messages_per_second'),
    },
    pinpointsmsvoicev2_configuration_set(name, block): {
      local resource = blockType.resource('aws_pinpointsmsvoicev2_configuration_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_message_type: build.template(std.get(block, 'default_message_type', null)),
        default_sender_id: build.template(std.get(block, 'default_sender_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      default_message_type: resource.field('default_message_type'),
      default_sender_id: resource.field('default_sender_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    pinpointsmsvoicev2_opt_out_list(name, block): {
      local resource = blockType.resource('aws_pinpointsmsvoicev2_opt_out_list', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    pinpointsmsvoicev2_phone_number(name, block): {
      local resource = blockType.resource('aws_pinpointsmsvoicev2_phone_number', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        deletion_protection_enabled: build.template(std.get(block, 'deletion_protection_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        iso_country_code: build.template(block.iso_country_code),
        message_type: build.template(block.message_type),
        monthly_leasing_price: build.template(std.get(block, 'monthly_leasing_price', null)),
        number_capabilities: build.template(block.number_capabilities),
        number_type: build.template(block.number_type),
        opt_out_list_name: build.template(std.get(block, 'opt_out_list_name', null)),
        phone_number: build.template(std.get(block, 'phone_number', null)),
        registration_id: build.template(std.get(block, 'registration_id', null)),
        self_managed_opt_outs_enabled: build.template(std.get(block, 'self_managed_opt_outs_enabled', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        two_way_channel_arn: build.template(std.get(block, 'two_way_channel_arn', null)),
        two_way_channel_enabled: build.template(std.get(block, 'two_way_channel_enabled', null)),
      }),
      arn: resource.field('arn'),
      deletion_protection_enabled: resource.field('deletion_protection_enabled'),
      id: resource.field('id'),
      iso_country_code: resource.field('iso_country_code'),
      message_type: resource.field('message_type'),
      monthly_leasing_price: resource.field('monthly_leasing_price'),
      number_capabilities: resource.field('number_capabilities'),
      number_type: resource.field('number_type'),
      opt_out_list_name: resource.field('opt_out_list_name'),
      phone_number: resource.field('phone_number'),
      registration_id: resource.field('registration_id'),
      self_managed_opt_outs_enabled: resource.field('self_managed_opt_outs_enabled'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      two_way_channel_arn: resource.field('two_way_channel_arn'),
      two_way_channel_enabled: resource.field('two_way_channel_enabled'),
    },
    pipes_pipe(name, block): {
      local resource = blockType.resource('aws_pipes_pipe', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        desired_state: build.template(std.get(block, 'desired_state', null)),
        enrichment: build.template(std.get(block, 'enrichment', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        role_arn: build.template(block.role_arn),
        source: build.template(block.source),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target: build.template(block.target),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      desired_state: resource.field('desired_state'),
      enrichment: resource.field('enrichment'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      role_arn: resource.field('role_arn'),
      source: resource.field('source'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target: resource.field('target'),
    },
    placement_group(name, block): {
      local resource = blockType.resource('aws_placement_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        partition_count: build.template(std.get(block, 'partition_count', null)),
        placement_group_id: build.template(std.get(block, 'placement_group_id', null)),
        spread_level: build.template(std.get(block, 'spread_level', null)),
        strategy: build.template(block.strategy),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      partition_count: resource.field('partition_count'),
      placement_group_id: resource.field('placement_group_id'),
      spread_level: resource.field('spread_level'),
      strategy: resource.field('strategy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    prometheus_alert_manager_definition(name, block): {
      local resource = blockType.resource('aws_prometheus_alert_manager_definition', name),
      _: resource._(block, {
        definition: build.template(block.definition),
        id: build.template(std.get(block, 'id', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      definition: resource.field('definition'),
      id: resource.field('id'),
      workspace_id: resource.field('workspace_id'),
    },
    prometheus_rule_group_namespace(name, block): {
      local resource = blockType.resource('aws_prometheus_rule_group_namespace', name),
      _: resource._(block, {
        data: build.template(block.data),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        workspace_id: build.template(block.workspace_id),
      }),
      data: resource.field('data'),
      id: resource.field('id'),
      name: resource.field('name'),
      workspace_id: resource.field('workspace_id'),
    },
    prometheus_scraper(name, block): {
      local resource = blockType.resource('aws_prometheus_scraper', name),
      _: resource._(block, {
        alias: build.template(std.get(block, 'alias', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        scrape_configuration: build.template(block.scrape_configuration),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      alias: resource.field('alias'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      role_arn: resource.field('role_arn'),
      scrape_configuration: resource.field('scrape_configuration'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    prometheus_workspace(name, block): {
      local resource = blockType.resource('aws_prometheus_workspace', name),
      _: resource._(block, {
        alias: build.template(std.get(block, 'alias', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        prometheus_endpoint: build.template(std.get(block, 'prometheus_endpoint', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      alias: resource.field('alias'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      prometheus_endpoint: resource.field('prometheus_endpoint'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    proxy_protocol_policy(name, block): {
      local resource = blockType.resource('aws_proxy_protocol_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_ports: build.template(block.instance_ports),
        load_balancer: build.template(block.load_balancer),
      }),
      id: resource.field('id'),
      instance_ports: resource.field('instance_ports'),
      load_balancer: resource.field('load_balancer'),
    },
    qldb_ledger(name, block): {
      local resource = blockType.resource('aws_qldb_ledger', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key: build.template(std.get(block, 'kms_key', null)),
        name: build.template(std.get(block, 'name', null)),
        permissions_mode: build.template(block.permissions_mode),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      deletion_protection: resource.field('deletion_protection'),
      id: resource.field('id'),
      kms_key: resource.field('kms_key'),
      name: resource.field('name'),
      permissions_mode: resource.field('permissions_mode'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    qldb_stream(name, block): {
      local resource = blockType.resource('aws_qldb_stream', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        exclusive_end_time: build.template(std.get(block, 'exclusive_end_time', null)),
        id: build.template(std.get(block, 'id', null)),
        inclusive_start_time: build.template(block.inclusive_start_time),
        ledger_name: build.template(block.ledger_name),
        role_arn: build.template(block.role_arn),
        stream_name: build.template(block.stream_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      exclusive_end_time: resource.field('exclusive_end_time'),
      id: resource.field('id'),
      inclusive_start_time: resource.field('inclusive_start_time'),
      ledger_name: resource.field('ledger_name'),
      role_arn: resource.field('role_arn'),
      stream_name: resource.field('stream_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    quicksight_account_subscription(name, block): {
      local resource = blockType.resource('aws_quicksight_account_subscription', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        account_subscription_status: build.template(std.get(block, 'account_subscription_status', null)),
        active_directory_name: build.template(std.get(block, 'active_directory_name', null)),
        admin_group: build.template(std.get(block, 'admin_group', null)),
        authentication_method: build.template(block.authentication_method),
        author_group: build.template(std.get(block, 'author_group', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        contact_number: build.template(std.get(block, 'contact_number', null)),
        directory_id: build.template(std.get(block, 'directory_id', null)),
        edition: build.template(block.edition),
        email_address: build.template(std.get(block, 'email_address', null)),
        first_name: build.template(std.get(block, 'first_name', null)),
        iam_identity_center_instance_arn: build.template(std.get(block, 'iam_identity_center_instance_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        last_name: build.template(std.get(block, 'last_name', null)),
        notification_email: build.template(block.notification_email),
        reader_group: build.template(std.get(block, 'reader_group', null)),
        realm: build.template(std.get(block, 'realm', null)),
      }),
      account_name: resource.field('account_name'),
      account_subscription_status: resource.field('account_subscription_status'),
      active_directory_name: resource.field('active_directory_name'),
      admin_group: resource.field('admin_group'),
      authentication_method: resource.field('authentication_method'),
      author_group: resource.field('author_group'),
      aws_account_id: resource.field('aws_account_id'),
      contact_number: resource.field('contact_number'),
      directory_id: resource.field('directory_id'),
      edition: resource.field('edition'),
      email_address: resource.field('email_address'),
      first_name: resource.field('first_name'),
      iam_identity_center_instance_arn: resource.field('iam_identity_center_instance_arn'),
      id: resource.field('id'),
      last_name: resource.field('last_name'),
      notification_email: resource.field('notification_email'),
      reader_group: resource.field('reader_group'),
      realm: resource.field('realm'),
    },
    quicksight_analysis(name, block): {
      local resource = blockType.resource('aws_quicksight_analysis', name),
      _: resource._(block, {
        analysis_id: build.template(block.analysis_id),
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        id: build.template(std.get(block, 'id', null)),
        last_published_time: build.template(std.get(block, 'last_published_time', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        name: build.template(block.name),
        recovery_window_in_days: build.template(std.get(block, 'recovery_window_in_days', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        theme_arn: build.template(std.get(block, 'theme_arn', null)),
      }),
      analysis_id: resource.field('analysis_id'),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      created_time: resource.field('created_time'),
      id: resource.field('id'),
      last_published_time: resource.field('last_published_time'),
      last_updated_time: resource.field('last_updated_time'),
      name: resource.field('name'),
      recovery_window_in_days: resource.field('recovery_window_in_days'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      theme_arn: resource.field('theme_arn'),
    },
    quicksight_dashboard(name, block): {
      local resource = blockType.resource('aws_quicksight_dashboard', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        dashboard_id: build.template(block.dashboard_id),
        id: build.template(std.get(block, 'id', null)),
        last_published_time: build.template(std.get(block, 'last_published_time', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        name: build.template(block.name),
        source_entity_arn: build.template(std.get(block, 'source_entity_arn', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        theme_arn: build.template(std.get(block, 'theme_arn', null)),
        version_description: build.template(block.version_description),
        version_number: build.template(std.get(block, 'version_number', null)),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      created_time: resource.field('created_time'),
      dashboard_id: resource.field('dashboard_id'),
      id: resource.field('id'),
      last_published_time: resource.field('last_published_time'),
      last_updated_time: resource.field('last_updated_time'),
      name: resource.field('name'),
      source_entity_arn: resource.field('source_entity_arn'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      theme_arn: resource.field('theme_arn'),
      version_description: resource.field('version_description'),
      version_number: resource.field('version_number'),
    },
    quicksight_data_set(name, block): {
      local resource = blockType.resource('aws_quicksight_data_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        data_set_id: build.template(block.data_set_id),
        id: build.template(std.get(block, 'id', null)),
        import_mode: build.template(block.import_mode),
        name: build.template(block.name),
        output_columns: build.template(std.get(block, 'output_columns', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      data_set_id: resource.field('data_set_id'),
      id: resource.field('id'),
      import_mode: resource.field('import_mode'),
      name: resource.field('name'),
      output_columns: resource.field('output_columns'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    quicksight_data_source(name, block): {
      local resource = blockType.resource('aws_quicksight_data_source', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        data_source_id: build.template(block.data_source_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      data_source_id: resource.field('data_source_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    quicksight_folder(name, block): {
      local resource = blockType.resource('aws_quicksight_folder', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        folder_id: build.template(block.folder_id),
        folder_path: build.template(std.get(block, 'folder_path', null)),
        folder_type: build.template(std.get(block, 'folder_type', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        name: build.template(std.get(block, 'name', null)),
        parent_folder_arn: build.template(std.get(block, 'parent_folder_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      created_time: resource.field('created_time'),
      folder_id: resource.field('folder_id'),
      folder_path: resource.field('folder_path'),
      folder_type: resource.field('folder_type'),
      id: resource.field('id'),
      last_updated_time: resource.field('last_updated_time'),
      name: resource.field('name'),
      parent_folder_arn: resource.field('parent_folder_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    quicksight_folder_membership(name, block): {
      local resource = blockType.resource('aws_quicksight_folder_membership', name),
      _: resource._(block, {
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        folder_id: build.template(block.folder_id),
        id: build.template(std.get(block, 'id', null)),
        member_id: build.template(block.member_id),
        member_type: build.template(block.member_type),
      }),
      aws_account_id: resource.field('aws_account_id'),
      folder_id: resource.field('folder_id'),
      id: resource.field('id'),
      member_id: resource.field('member_id'),
      member_type: resource.field('member_type'),
    },
    quicksight_group(name, block): {
      local resource = blockType.resource('aws_quicksight_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        description: build.template(std.get(block, 'description', null)),
        group_name: build.template(block.group_name),
        id: build.template(std.get(block, 'id', null)),
        namespace: build.template(std.get(block, 'namespace', null)),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      description: resource.field('description'),
      group_name: resource.field('group_name'),
      id: resource.field('id'),
      namespace: resource.field('namespace'),
    },
    quicksight_group_membership(name, block): {
      local resource = blockType.resource('aws_quicksight_group_membership', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        group_name: build.template(block.group_name),
        id: build.template(std.get(block, 'id', null)),
        member_name: build.template(block.member_name),
        namespace: build.template(std.get(block, 'namespace', null)),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      group_name: resource.field('group_name'),
      id: resource.field('id'),
      member_name: resource.field('member_name'),
      namespace: resource.field('namespace'),
    },
    quicksight_iam_policy_assignment(name, block): {
      local resource = blockType.resource('aws_quicksight_iam_policy_assignment', name),
      _: resource._(block, {
        assignment_id: build.template(std.get(block, 'assignment_id', null)),
        assignment_name: build.template(block.assignment_name),
        assignment_status: build.template(block.assignment_status),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        namespace: build.template(std.get(block, 'namespace', null)),
        policy_arn: build.template(std.get(block, 'policy_arn', null)),
      }),
      assignment_id: resource.field('assignment_id'),
      assignment_name: resource.field('assignment_name'),
      assignment_status: resource.field('assignment_status'),
      aws_account_id: resource.field('aws_account_id'),
      id: resource.field('id'),
      namespace: resource.field('namespace'),
      policy_arn: resource.field('policy_arn'),
    },
    quicksight_ingestion(name, block): {
      local resource = blockType.resource('aws_quicksight_ingestion', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        data_set_id: build.template(block.data_set_id),
        id: build.template(std.get(block, 'id', null)),
        ingestion_id: build.template(block.ingestion_id),
        ingestion_status: build.template(std.get(block, 'ingestion_status', null)),
        ingestion_type: build.template(block.ingestion_type),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      data_set_id: resource.field('data_set_id'),
      id: resource.field('id'),
      ingestion_id: resource.field('ingestion_id'),
      ingestion_status: resource.field('ingestion_status'),
      ingestion_type: resource.field('ingestion_type'),
    },
    quicksight_namespace(name, block): {
      local resource = blockType.resource('aws_quicksight_namespace', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        capacity_region: build.template(std.get(block, 'capacity_region', null)),
        creation_status: build.template(std.get(block, 'creation_status', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_store: build.template(std.get(block, 'identity_store', null)),
        namespace: build.template(block.namespace),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      capacity_region: resource.field('capacity_region'),
      creation_status: resource.field('creation_status'),
      id: resource.field('id'),
      identity_store: resource.field('identity_store'),
      namespace: resource.field('namespace'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    quicksight_refresh_schedule(name, block): {
      local resource = blockType.resource('aws_quicksight_refresh_schedule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        data_set_id: build.template(block.data_set_id),
        id: build.template(std.get(block, 'id', null)),
        schedule_id: build.template(block.schedule_id),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      data_set_id: resource.field('data_set_id'),
      id: resource.field('id'),
      schedule_id: resource.field('schedule_id'),
    },
    quicksight_template(name, block): {
      local resource = blockType.resource('aws_quicksight_template', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        name: build.template(block.name),
        source_entity_arn: build.template(std.get(block, 'source_entity_arn', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        template_id: build.template(block.template_id),
        version_description: build.template(block.version_description),
        version_number: build.template(std.get(block, 'version_number', null)),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      created_time: resource.field('created_time'),
      id: resource.field('id'),
      last_updated_time: resource.field('last_updated_time'),
      name: resource.field('name'),
      source_entity_arn: resource.field('source_entity_arn'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      template_id: resource.field('template_id'),
      version_description: resource.field('version_description'),
      version_number: resource.field('version_number'),
    },
    quicksight_template_alias(name, block): {
      local resource = blockType.resource('aws_quicksight_template_alias', name),
      _: resource._(block, {
        alias_name: build.template(block.alias_name),
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        template_id: build.template(block.template_id),
        template_version_number: build.template(block.template_version_number),
      }),
      alias_name: resource.field('alias_name'),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      id: resource.field('id'),
      template_id: resource.field('template_id'),
      template_version_number: resource.field('template_version_number'),
    },
    quicksight_theme(name, block): {
      local resource = blockType.resource('aws_quicksight_theme', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        base_theme_id: build.template(block.base_theme_id),
        created_time: build.template(std.get(block, 'created_time', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        theme_id: build.template(block.theme_id),
        version_description: build.template(std.get(block, 'version_description', null)),
        version_number: build.template(std.get(block, 'version_number', null)),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      base_theme_id: resource.field('base_theme_id'),
      created_time: resource.field('created_time'),
      id: resource.field('id'),
      last_updated_time: resource.field('last_updated_time'),
      name: resource.field('name'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      theme_id: resource.field('theme_id'),
      version_description: resource.field('version_description'),
      version_number: resource.field('version_number'),
    },
    quicksight_user(name, block): {
      local resource = blockType.resource('aws_quicksight_user', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        email: build.template(block.email),
        iam_arn: build.template(std.get(block, 'iam_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_type: build.template(block.identity_type),
        namespace: build.template(std.get(block, 'namespace', null)),
        session_name: build.template(std.get(block, 'session_name', null)),
        user_name: build.template(std.get(block, 'user_name', null)),
        user_role: build.template(block.user_role),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      email: resource.field('email'),
      iam_arn: resource.field('iam_arn'),
      id: resource.field('id'),
      identity_type: resource.field('identity_type'),
      namespace: resource.field('namespace'),
      session_name: resource.field('session_name'),
      user_name: resource.field('user_name'),
      user_role: resource.field('user_role'),
    },
    quicksight_vpc_connection(name, block): {
      local resource = blockType.resource('aws_quicksight_vpc_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_status: build.template(std.get(block, 'availability_status', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        dns_resolvers: build.template(std.get(block, 'dns_resolvers', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        role_arn: build.template(block.role_arn),
        security_group_ids: build.template(block.security_group_ids),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_connection_id: build.template(block.vpc_connection_id),
      }),
      arn: resource.field('arn'),
      availability_status: resource.field('availability_status'),
      aws_account_id: resource.field('aws_account_id'),
      dns_resolvers: resource.field('dns_resolvers'),
      id: resource.field('id'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      security_group_ids: resource.field('security_group_ids'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_connection_id: resource.field('vpc_connection_id'),
    },
    ram_principal_association(name, block): {
      local resource = blockType.resource('aws_ram_principal_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        principal: build.template(block.principal),
        resource_share_arn: build.template(block.resource_share_arn),
      }),
      id: resource.field('id'),
      principal: resource.field('principal'),
      resource_share_arn: resource.field('resource_share_arn'),
    },
    ram_resource_association(name, block): {
      local resource = blockType.resource('aws_ram_resource_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        resource_arn: build.template(block.resource_arn),
        resource_share_arn: build.template(block.resource_share_arn),
      }),
      id: resource.field('id'),
      resource_arn: resource.field('resource_arn'),
      resource_share_arn: resource.field('resource_share_arn'),
    },
    ram_resource_share(name, block): {
      local resource = blockType.resource('aws_ram_resource_share', name),
      _: resource._(block, {
        allow_external_principals: build.template(std.get(block, 'allow_external_principals', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        permission_arns: build.template(std.get(block, 'permission_arns', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      allow_external_principals: resource.field('allow_external_principals'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      permission_arns: resource.field('permission_arns'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ram_resource_share_accepter(name, block): {
      local resource = blockType.resource('aws_ram_resource_share_accepter', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        invitation_arn: build.template(std.get(block, 'invitation_arn', null)),
        receiver_account_id: build.template(std.get(block, 'receiver_account_id', null)),
        resources: build.template(std.get(block, 'resources', null)),
        sender_account_id: build.template(std.get(block, 'sender_account_id', null)),
        share_arn: build.template(block.share_arn),
        share_id: build.template(std.get(block, 'share_id', null)),
        share_name: build.template(std.get(block, 'share_name', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      id: resource.field('id'),
      invitation_arn: resource.field('invitation_arn'),
      receiver_account_id: resource.field('receiver_account_id'),
      resources: resource.field('resources'),
      sender_account_id: resource.field('sender_account_id'),
      share_arn: resource.field('share_arn'),
      share_id: resource.field('share_id'),
      share_name: resource.field('share_name'),
      status: resource.field('status'),
    },
    ram_sharing_with_organization(name, block): {
      local resource = blockType.resource('aws_ram_sharing_with_organization', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    rbin_rule(name, block): {
      local resource = blockType.resource('aws_rbin_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        lock_end_time: build.template(std.get(block, 'lock_end_time', null)),
        lock_state: build.template(std.get(block, 'lock_state', null)),
        resource_type: build.template(block.resource_type),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      lock_end_time: resource.field('lock_end_time'),
      lock_state: resource.field('lock_state'),
      resource_type: resource.field('resource_type'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    rds_certificate(name, block): {
      local resource = blockType.resource('aws_rds_certificate', name),
      _: resource._(block, {
        certificate_identifier: build.template(block.certificate_identifier),
        id: build.template(std.get(block, 'id', null)),
      }),
      certificate_identifier: resource.field('certificate_identifier'),
      id: resource.field('id'),
    },
    rds_cluster(name, block): {
      local resource = blockType.resource('aws_rds_cluster', name),
      _: resource._(block, {
        allocated_storage: build.template(std.get(block, 'allocated_storage', null)),
        allow_major_version_upgrade: build.template(std.get(block, 'allow_major_version_upgrade', null)),
        apply_immediately: build.template(std.get(block, 'apply_immediately', null)),
        arn: build.template(std.get(block, 'arn', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        backtrack_window: build.template(std.get(block, 'backtrack_window', null)),
        backup_retention_period: build.template(std.get(block, 'backup_retention_period', null)),
        ca_certificate_identifier: build.template(std.get(block, 'ca_certificate_identifier', null)),
        ca_certificate_valid_till: build.template(std.get(block, 'ca_certificate_valid_till', null)),
        cluster_identifier: build.template(std.get(block, 'cluster_identifier', null)),
        cluster_identifier_prefix: build.template(std.get(block, 'cluster_identifier_prefix', null)),
        cluster_members: build.template(std.get(block, 'cluster_members', null)),
        cluster_resource_id: build.template(std.get(block, 'cluster_resource_id', null)),
        copy_tags_to_snapshot: build.template(std.get(block, 'copy_tags_to_snapshot', null)),
        database_name: build.template(std.get(block, 'database_name', null)),
        db_cluster_instance_class: build.template(std.get(block, 'db_cluster_instance_class', null)),
        db_cluster_parameter_group_name: build.template(std.get(block, 'db_cluster_parameter_group_name', null)),
        db_instance_parameter_group_name: build.template(std.get(block, 'db_instance_parameter_group_name', null)),
        db_subnet_group_name: build.template(std.get(block, 'db_subnet_group_name', null)),
        db_system_id: build.template(std.get(block, 'db_system_id', null)),
        delete_automated_backups: build.template(std.get(block, 'delete_automated_backups', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        domain: build.template(std.get(block, 'domain', null)),
        domain_iam_role_name: build.template(std.get(block, 'domain_iam_role_name', null)),
        enable_global_write_forwarding: build.template(std.get(block, 'enable_global_write_forwarding', null)),
        enable_http_endpoint: build.template(std.get(block, 'enable_http_endpoint', null)),
        enable_local_write_forwarding: build.template(std.get(block, 'enable_local_write_forwarding', null)),
        enabled_cloudwatch_logs_exports: build.template(std.get(block, 'enabled_cloudwatch_logs_exports', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        engine: build.template(block.engine),
        engine_lifecycle_support: build.template(std.get(block, 'engine_lifecycle_support', null)),
        engine_mode: build.template(std.get(block, 'engine_mode', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        engine_version_actual: build.template(std.get(block, 'engine_version_actual', null)),
        final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null)),
        global_cluster_identifier: build.template(std.get(block, 'global_cluster_identifier', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        iam_database_authentication_enabled: build.template(std.get(block, 'iam_database_authentication_enabled', null)),
        iam_roles: build.template(std.get(block, 'iam_roles', null)),
        id: build.template(std.get(block, 'id', null)),
        iops: build.template(std.get(block, 'iops', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        manage_master_user_password: build.template(std.get(block, 'manage_master_user_password', null)),
        master_password: build.template(std.get(block, 'master_password', null)),
        master_user_secret: build.template(std.get(block, 'master_user_secret', null)),
        master_user_secret_kms_key_id: build.template(std.get(block, 'master_user_secret_kms_key_id', null)),
        master_username: build.template(std.get(block, 'master_username', null)),
        network_type: build.template(std.get(block, 'network_type', null)),
        performance_insights_enabled: build.template(std.get(block, 'performance_insights_enabled', null)),
        performance_insights_kms_key_id: build.template(std.get(block, 'performance_insights_kms_key_id', null)),
        performance_insights_retention_period: build.template(std.get(block, 'performance_insights_retention_period', null)),
        port: build.template(std.get(block, 'port', null)),
        preferred_backup_window: build.template(std.get(block, 'preferred_backup_window', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        reader_endpoint: build.template(std.get(block, 'reader_endpoint', null)),
        replication_source_identifier: build.template(std.get(block, 'replication_source_identifier', null)),
        skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null)),
        snapshot_identifier: build.template(std.get(block, 'snapshot_identifier', null)),
        source_region: build.template(std.get(block, 'source_region', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      allocated_storage: resource.field('allocated_storage'),
      allow_major_version_upgrade: resource.field('allow_major_version_upgrade'),
      apply_immediately: resource.field('apply_immediately'),
      arn: resource.field('arn'),
      availability_zones: resource.field('availability_zones'),
      backtrack_window: resource.field('backtrack_window'),
      backup_retention_period: resource.field('backup_retention_period'),
      ca_certificate_identifier: resource.field('ca_certificate_identifier'),
      ca_certificate_valid_till: resource.field('ca_certificate_valid_till'),
      cluster_identifier: resource.field('cluster_identifier'),
      cluster_identifier_prefix: resource.field('cluster_identifier_prefix'),
      cluster_members: resource.field('cluster_members'),
      cluster_resource_id: resource.field('cluster_resource_id'),
      copy_tags_to_snapshot: resource.field('copy_tags_to_snapshot'),
      database_name: resource.field('database_name'),
      db_cluster_instance_class: resource.field('db_cluster_instance_class'),
      db_cluster_parameter_group_name: resource.field('db_cluster_parameter_group_name'),
      db_instance_parameter_group_name: resource.field('db_instance_parameter_group_name'),
      db_subnet_group_name: resource.field('db_subnet_group_name'),
      db_system_id: resource.field('db_system_id'),
      delete_automated_backups: resource.field('delete_automated_backups'),
      deletion_protection: resource.field('deletion_protection'),
      domain: resource.field('domain'),
      domain_iam_role_name: resource.field('domain_iam_role_name'),
      enable_global_write_forwarding: resource.field('enable_global_write_forwarding'),
      enable_http_endpoint: resource.field('enable_http_endpoint'),
      enable_local_write_forwarding: resource.field('enable_local_write_forwarding'),
      enabled_cloudwatch_logs_exports: resource.field('enabled_cloudwatch_logs_exports'),
      endpoint: resource.field('endpoint'),
      engine: resource.field('engine'),
      engine_lifecycle_support: resource.field('engine_lifecycle_support'),
      engine_mode: resource.field('engine_mode'),
      engine_version: resource.field('engine_version'),
      engine_version_actual: resource.field('engine_version_actual'),
      final_snapshot_identifier: resource.field('final_snapshot_identifier'),
      global_cluster_identifier: resource.field('global_cluster_identifier'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      iam_database_authentication_enabled: resource.field('iam_database_authentication_enabled'),
      iam_roles: resource.field('iam_roles'),
      id: resource.field('id'),
      iops: resource.field('iops'),
      kms_key_id: resource.field('kms_key_id'),
      manage_master_user_password: resource.field('manage_master_user_password'),
      master_password: resource.field('master_password'),
      master_user_secret: resource.field('master_user_secret'),
      master_user_secret_kms_key_id: resource.field('master_user_secret_kms_key_id'),
      master_username: resource.field('master_username'),
      network_type: resource.field('network_type'),
      performance_insights_enabled: resource.field('performance_insights_enabled'),
      performance_insights_kms_key_id: resource.field('performance_insights_kms_key_id'),
      performance_insights_retention_period: resource.field('performance_insights_retention_period'),
      port: resource.field('port'),
      preferred_backup_window: resource.field('preferred_backup_window'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      reader_endpoint: resource.field('reader_endpoint'),
      replication_source_identifier: resource.field('replication_source_identifier'),
      skip_final_snapshot: resource.field('skip_final_snapshot'),
      snapshot_identifier: resource.field('snapshot_identifier'),
      source_region: resource.field('source_region'),
      storage_encrypted: resource.field('storage_encrypted'),
      storage_type: resource.field('storage_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    rds_cluster_activity_stream(name, block): {
      local resource = blockType.resource('aws_rds_cluster_activity_stream', name),
      _: resource._(block, {
        engine_native_audit_fields_included: build.template(std.get(block, 'engine_native_audit_fields_included', null)),
        id: build.template(std.get(block, 'id', null)),
        kinesis_stream_name: build.template(std.get(block, 'kinesis_stream_name', null)),
        kms_key_id: build.template(block.kms_key_id),
        mode: build.template(block.mode),
        resource_arn: build.template(block.resource_arn),
      }),
      engine_native_audit_fields_included: resource.field('engine_native_audit_fields_included'),
      id: resource.field('id'),
      kinesis_stream_name: resource.field('kinesis_stream_name'),
      kms_key_id: resource.field('kms_key_id'),
      mode: resource.field('mode'),
      resource_arn: resource.field('resource_arn'),
    },
    rds_cluster_endpoint(name, block): {
      local resource = blockType.resource('aws_rds_cluster_endpoint', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster_endpoint_identifier: build.template(block.cluster_endpoint_identifier),
        cluster_identifier: build.template(block.cluster_identifier),
        custom_endpoint_type: build.template(block.custom_endpoint_type),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        excluded_members: build.template(std.get(block, 'excluded_members', null)),
        id: build.template(std.get(block, 'id', null)),
        static_members: build.template(std.get(block, 'static_members', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      cluster_endpoint_identifier: resource.field('cluster_endpoint_identifier'),
      cluster_identifier: resource.field('cluster_identifier'),
      custom_endpoint_type: resource.field('custom_endpoint_type'),
      endpoint: resource.field('endpoint'),
      excluded_members: resource.field('excluded_members'),
      id: resource.field('id'),
      static_members: resource.field('static_members'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    rds_cluster_instance(name, block): {
      local resource = blockType.resource('aws_rds_cluster_instance', name),
      _: resource._(block, {
        apply_immediately: build.template(std.get(block, 'apply_immediately', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        ca_cert_identifier: build.template(std.get(block, 'ca_cert_identifier', null)),
        cluster_identifier: build.template(block.cluster_identifier),
        copy_tags_to_snapshot: build.template(std.get(block, 'copy_tags_to_snapshot', null)),
        custom_iam_instance_profile: build.template(std.get(block, 'custom_iam_instance_profile', null)),
        db_parameter_group_name: build.template(std.get(block, 'db_parameter_group_name', null)),
        db_subnet_group_name: build.template(std.get(block, 'db_subnet_group_name', null)),
        dbi_resource_id: build.template(std.get(block, 'dbi_resource_id', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        engine: build.template(block.engine),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        engine_version_actual: build.template(std.get(block, 'engine_version_actual', null)),
        id: build.template(std.get(block, 'id', null)),
        identifier: build.template(std.get(block, 'identifier', null)),
        identifier_prefix: build.template(std.get(block, 'identifier_prefix', null)),
        instance_class: build.template(block.instance_class),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        monitoring_interval: build.template(std.get(block, 'monitoring_interval', null)),
        monitoring_role_arn: build.template(std.get(block, 'monitoring_role_arn', null)),
        network_type: build.template(std.get(block, 'network_type', null)),
        performance_insights_enabled: build.template(std.get(block, 'performance_insights_enabled', null)),
        performance_insights_kms_key_id: build.template(std.get(block, 'performance_insights_kms_key_id', null)),
        performance_insights_retention_period: build.template(std.get(block, 'performance_insights_retention_period', null)),
        port: build.template(std.get(block, 'port', null)),
        preferred_backup_window: build.template(std.get(block, 'preferred_backup_window', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        promotion_tier: build.template(std.get(block, 'promotion_tier', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        writer: build.template(std.get(block, 'writer', null)),
      }),
      apply_immediately: resource.field('apply_immediately'),
      arn: resource.field('arn'),
      auto_minor_version_upgrade: resource.field('auto_minor_version_upgrade'),
      availability_zone: resource.field('availability_zone'),
      ca_cert_identifier: resource.field('ca_cert_identifier'),
      cluster_identifier: resource.field('cluster_identifier'),
      copy_tags_to_snapshot: resource.field('copy_tags_to_snapshot'),
      custom_iam_instance_profile: resource.field('custom_iam_instance_profile'),
      db_parameter_group_name: resource.field('db_parameter_group_name'),
      db_subnet_group_name: resource.field('db_subnet_group_name'),
      dbi_resource_id: resource.field('dbi_resource_id'),
      endpoint: resource.field('endpoint'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      engine_version_actual: resource.field('engine_version_actual'),
      id: resource.field('id'),
      identifier: resource.field('identifier'),
      identifier_prefix: resource.field('identifier_prefix'),
      instance_class: resource.field('instance_class'),
      kms_key_id: resource.field('kms_key_id'),
      monitoring_interval: resource.field('monitoring_interval'),
      monitoring_role_arn: resource.field('monitoring_role_arn'),
      network_type: resource.field('network_type'),
      performance_insights_enabled: resource.field('performance_insights_enabled'),
      performance_insights_kms_key_id: resource.field('performance_insights_kms_key_id'),
      performance_insights_retention_period: resource.field('performance_insights_retention_period'),
      port: resource.field('port'),
      preferred_backup_window: resource.field('preferred_backup_window'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      promotion_tier: resource.field('promotion_tier'),
      publicly_accessible: resource.field('publicly_accessible'),
      storage_encrypted: resource.field('storage_encrypted'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      writer: resource.field('writer'),
    },
    rds_cluster_parameter_group(name, block): {
      local resource = blockType.resource('aws_rds_cluster_parameter_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        family: build.template(block.family),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      family: resource.field('family'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    rds_cluster_role_association(name, block): {
      local resource = blockType.resource('aws_rds_cluster_role_association', name),
      _: resource._(block, {
        db_cluster_identifier: build.template(block.db_cluster_identifier),
        feature_name: build.template(block.feature_name),
        id: build.template(std.get(block, 'id', null)),
        role_arn: build.template(block.role_arn),
      }),
      db_cluster_identifier: resource.field('db_cluster_identifier'),
      feature_name: resource.field('feature_name'),
      id: resource.field('id'),
      role_arn: resource.field('role_arn'),
    },
    rds_custom_db_engine_version(name, block): {
      local resource = blockType.resource('aws_rds_custom_db_engine_version', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        database_installation_files_s3_bucket_name: build.template(std.get(block, 'database_installation_files_s3_bucket_name', null)),
        database_installation_files_s3_prefix: build.template(std.get(block, 'database_installation_files_s3_prefix', null)),
        db_parameter_group_family: build.template(std.get(block, 'db_parameter_group_family', null)),
        description: build.template(std.get(block, 'description', null)),
        engine: build.template(block.engine),
        engine_version: build.template(block.engine_version),
        filename: build.template(std.get(block, 'filename', null)),
        id: build.template(std.get(block, 'id', null)),
        image_id: build.template(std.get(block, 'image_id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        major_engine_version: build.template(std.get(block, 'major_engine_version', null)),
        manifest: build.template(std.get(block, 'manifest', null)),
        manifest_computed: build.template(std.get(block, 'manifest_computed', null)),
        manifest_hash: build.template(std.get(block, 'manifest_hash', null)),
        source_image_id: build.template(std.get(block, 'source_image_id', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      create_time: resource.field('create_time'),
      database_installation_files_s3_bucket_name: resource.field('database_installation_files_s3_bucket_name'),
      database_installation_files_s3_prefix: resource.field('database_installation_files_s3_prefix'),
      db_parameter_group_family: resource.field('db_parameter_group_family'),
      description: resource.field('description'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      filename: resource.field('filename'),
      id: resource.field('id'),
      image_id: resource.field('image_id'),
      kms_key_id: resource.field('kms_key_id'),
      major_engine_version: resource.field('major_engine_version'),
      manifest: resource.field('manifest'),
      manifest_computed: resource.field('manifest_computed'),
      manifest_hash: resource.field('manifest_hash'),
      source_image_id: resource.field('source_image_id'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    rds_export_task(name, block): {
      local resource = blockType.resource('aws_rds_export_task', name),
      _: resource._(block, {
        export_only: build.template(std.get(block, 'export_only', null)),
        export_task_identifier: build.template(block.export_task_identifier),
        failure_cause: build.template(std.get(block, 'failure_cause', null)),
        iam_role_arn: build.template(block.iam_role_arn),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(block.kms_key_id),
        percent_progress: build.template(std.get(block, 'percent_progress', null)),
        s3_bucket_name: build.template(block.s3_bucket_name),
        s3_prefix: build.template(std.get(block, 's3_prefix', null)),
        snapshot_time: build.template(std.get(block, 'snapshot_time', null)),
        source_arn: build.template(block.source_arn),
        source_type: build.template(std.get(block, 'source_type', null)),
        status: build.template(std.get(block, 'status', null)),
        task_end_time: build.template(std.get(block, 'task_end_time', null)),
        task_start_time: build.template(std.get(block, 'task_start_time', null)),
        warning_message: build.template(std.get(block, 'warning_message', null)),
      }),
      export_only: resource.field('export_only'),
      export_task_identifier: resource.field('export_task_identifier'),
      failure_cause: resource.field('failure_cause'),
      iam_role_arn: resource.field('iam_role_arn'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      percent_progress: resource.field('percent_progress'),
      s3_bucket_name: resource.field('s3_bucket_name'),
      s3_prefix: resource.field('s3_prefix'),
      snapshot_time: resource.field('snapshot_time'),
      source_arn: resource.field('source_arn'),
      source_type: resource.field('source_type'),
      status: resource.field('status'),
      task_end_time: resource.field('task_end_time'),
      task_start_time: resource.field('task_start_time'),
      warning_message: resource.field('warning_message'),
    },
    rds_global_cluster(name, block): {
      local resource = blockType.resource('aws_rds_global_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        database_name: build.template(std.get(block, 'database_name', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_lifecycle_support: build.template(std.get(block, 'engine_lifecycle_support', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        engine_version_actual: build.template(std.get(block, 'engine_version_actual', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        global_cluster_identifier: build.template(block.global_cluster_identifier),
        global_cluster_members: build.template(std.get(block, 'global_cluster_members', null)),
        global_cluster_resource_id: build.template(std.get(block, 'global_cluster_resource_id', null)),
        id: build.template(std.get(block, 'id', null)),
        source_db_cluster_identifier: build.template(std.get(block, 'source_db_cluster_identifier', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
      }),
      arn: resource.field('arn'),
      database_name: resource.field('database_name'),
      deletion_protection: resource.field('deletion_protection'),
      engine: resource.field('engine'),
      engine_lifecycle_support: resource.field('engine_lifecycle_support'),
      engine_version: resource.field('engine_version'),
      engine_version_actual: resource.field('engine_version_actual'),
      force_destroy: resource.field('force_destroy'),
      global_cluster_identifier: resource.field('global_cluster_identifier'),
      global_cluster_members: resource.field('global_cluster_members'),
      global_cluster_resource_id: resource.field('global_cluster_resource_id'),
      id: resource.field('id'),
      source_db_cluster_identifier: resource.field('source_db_cluster_identifier'),
      storage_encrypted: resource.field('storage_encrypted'),
    },
    rds_integration(name, block): {
      local resource = blockType.resource('aws_rds_integration', name),
      _: resource._(block, {
        additional_encryption_context: build.template(std.get(block, 'additional_encryption_context', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_name: build.template(block.integration_name),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        source_arn: build.template(block.source_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_arn: build.template(block.target_arn),
      }),
      additional_encryption_context: resource.field('additional_encryption_context'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      integration_name: resource.field('integration_name'),
      kms_key_id: resource.field('kms_key_id'),
      source_arn: resource.field('source_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_arn: resource.field('target_arn'),
    },
    rds_reserved_instance(name, block): {
      local resource = blockType.resource('aws_rds_reserved_instance', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        currency_code: build.template(std.get(block, 'currency_code', null)),
        db_instance_class: build.template(std.get(block, 'db_instance_class', null)),
        duration: build.template(std.get(block, 'duration', null)),
        fixed_price: build.template(std.get(block, 'fixed_price', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_count: build.template(std.get(block, 'instance_count', null)),
        lease_id: build.template(std.get(block, 'lease_id', null)),
        multi_az: build.template(std.get(block, 'multi_az', null)),
        offering_id: build.template(block.offering_id),
        offering_type: build.template(std.get(block, 'offering_type', null)),
        product_description: build.template(std.get(block, 'product_description', null)),
        recurring_charges: build.template(std.get(block, 'recurring_charges', null)),
        reservation_id: build.template(std.get(block, 'reservation_id', null)),
        start_time: build.template(std.get(block, 'start_time', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        usage_price: build.template(std.get(block, 'usage_price', null)),
      }),
      arn: resource.field('arn'),
      currency_code: resource.field('currency_code'),
      db_instance_class: resource.field('db_instance_class'),
      duration: resource.field('duration'),
      fixed_price: resource.field('fixed_price'),
      id: resource.field('id'),
      instance_count: resource.field('instance_count'),
      lease_id: resource.field('lease_id'),
      multi_az: resource.field('multi_az'),
      offering_id: resource.field('offering_id'),
      offering_type: resource.field('offering_type'),
      product_description: resource.field('product_description'),
      recurring_charges: resource.field('recurring_charges'),
      reservation_id: resource.field('reservation_id'),
      start_time: resource.field('start_time'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      usage_price: resource.field('usage_price'),
    },
    redshift_authentication_profile(name, block): {
      local resource = blockType.resource('aws_redshift_authentication_profile', name),
      _: resource._(block, {
        authentication_profile_content: build.template(block.authentication_profile_content),
        authentication_profile_name: build.template(block.authentication_profile_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      authentication_profile_content: resource.field('authentication_profile_content'),
      authentication_profile_name: resource.field('authentication_profile_name'),
      id: resource.field('id'),
    },
    redshift_cluster(name, block): {
      local resource = blockType.resource('aws_redshift_cluster', name),
      _: resource._(block, {
        allow_version_upgrade: build.template(std.get(block, 'allow_version_upgrade', null)),
        apply_immediately: build.template(std.get(block, 'apply_immediately', null)),
        aqua_configuration_status: build.template(std.get(block, 'aqua_configuration_status', null)),
        arn: build.template(std.get(block, 'arn', null)),
        automated_snapshot_retention_period: build.template(std.get(block, 'automated_snapshot_retention_period', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        availability_zone_relocation_enabled: build.template(std.get(block, 'availability_zone_relocation_enabled', null)),
        cluster_identifier: build.template(block.cluster_identifier),
        cluster_namespace_arn: build.template(std.get(block, 'cluster_namespace_arn', null)),
        cluster_nodes: build.template(std.get(block, 'cluster_nodes', null)),
        cluster_parameter_group_name: build.template(std.get(block, 'cluster_parameter_group_name', null)),
        cluster_public_key: build.template(std.get(block, 'cluster_public_key', null)),
        cluster_revision_number: build.template(std.get(block, 'cluster_revision_number', null)),
        cluster_subnet_group_name: build.template(std.get(block, 'cluster_subnet_group_name', null)),
        cluster_type: build.template(std.get(block, 'cluster_type', null)),
        cluster_version: build.template(std.get(block, 'cluster_version', null)),
        database_name: build.template(std.get(block, 'database_name', null)),
        default_iam_role_arn: build.template(std.get(block, 'default_iam_role_arn', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        elastic_ip: build.template(std.get(block, 'elastic_ip', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        enhanced_vpc_routing: build.template(std.get(block, 'enhanced_vpc_routing', null)),
        final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null)),
        iam_roles: build.template(std.get(block, 'iam_roles', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        maintenance_track_name: build.template(std.get(block, 'maintenance_track_name', null)),
        manage_master_password: build.template(std.get(block, 'manage_master_password', null)),
        manual_snapshot_retention_period: build.template(std.get(block, 'manual_snapshot_retention_period', null)),
        master_password: build.template(std.get(block, 'master_password', null)),
        master_password_secret_arn: build.template(std.get(block, 'master_password_secret_arn', null)),
        master_password_secret_kms_key_id: build.template(std.get(block, 'master_password_secret_kms_key_id', null)),
        master_username: build.template(std.get(block, 'master_username', null)),
        multi_az: build.template(std.get(block, 'multi_az', null)),
        node_type: build.template(block.node_type),
        number_of_nodes: build.template(std.get(block, 'number_of_nodes', null)),
        owner_account: build.template(std.get(block, 'owner_account', null)),
        port: build.template(std.get(block, 'port', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null)),
        snapshot_arn: build.template(std.get(block, 'snapshot_arn', null)),
        snapshot_cluster_identifier: build.template(std.get(block, 'snapshot_cluster_identifier', null)),
        snapshot_identifier: build.template(std.get(block, 'snapshot_identifier', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      allow_version_upgrade: resource.field('allow_version_upgrade'),
      apply_immediately: resource.field('apply_immediately'),
      aqua_configuration_status: resource.field('aqua_configuration_status'),
      arn: resource.field('arn'),
      automated_snapshot_retention_period: resource.field('automated_snapshot_retention_period'),
      availability_zone: resource.field('availability_zone'),
      availability_zone_relocation_enabled: resource.field('availability_zone_relocation_enabled'),
      cluster_identifier: resource.field('cluster_identifier'),
      cluster_namespace_arn: resource.field('cluster_namespace_arn'),
      cluster_nodes: resource.field('cluster_nodes'),
      cluster_parameter_group_name: resource.field('cluster_parameter_group_name'),
      cluster_public_key: resource.field('cluster_public_key'),
      cluster_revision_number: resource.field('cluster_revision_number'),
      cluster_subnet_group_name: resource.field('cluster_subnet_group_name'),
      cluster_type: resource.field('cluster_type'),
      cluster_version: resource.field('cluster_version'),
      database_name: resource.field('database_name'),
      default_iam_role_arn: resource.field('default_iam_role_arn'),
      dns_name: resource.field('dns_name'),
      elastic_ip: resource.field('elastic_ip'),
      encrypted: resource.field('encrypted'),
      endpoint: resource.field('endpoint'),
      enhanced_vpc_routing: resource.field('enhanced_vpc_routing'),
      final_snapshot_identifier: resource.field('final_snapshot_identifier'),
      iam_roles: resource.field('iam_roles'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      maintenance_track_name: resource.field('maintenance_track_name'),
      manage_master_password: resource.field('manage_master_password'),
      manual_snapshot_retention_period: resource.field('manual_snapshot_retention_period'),
      master_password: resource.field('master_password'),
      master_password_secret_arn: resource.field('master_password_secret_arn'),
      master_password_secret_kms_key_id: resource.field('master_password_secret_kms_key_id'),
      master_username: resource.field('master_username'),
      multi_az: resource.field('multi_az'),
      node_type: resource.field('node_type'),
      number_of_nodes: resource.field('number_of_nodes'),
      owner_account: resource.field('owner_account'),
      port: resource.field('port'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      publicly_accessible: resource.field('publicly_accessible'),
      skip_final_snapshot: resource.field('skip_final_snapshot'),
      snapshot_arn: resource.field('snapshot_arn'),
      snapshot_cluster_identifier: resource.field('snapshot_cluster_identifier'),
      snapshot_identifier: resource.field('snapshot_identifier'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    redshift_cluster_iam_roles(name, block): {
      local resource = blockType.resource('aws_redshift_cluster_iam_roles', name),
      _: resource._(block, {
        cluster_identifier: build.template(block.cluster_identifier),
        default_iam_role_arn: build.template(std.get(block, 'default_iam_role_arn', null)),
        iam_role_arns: build.template(std.get(block, 'iam_role_arns', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      cluster_identifier: resource.field('cluster_identifier'),
      default_iam_role_arn: resource.field('default_iam_role_arn'),
      iam_role_arns: resource.field('iam_role_arns'),
      id: resource.field('id'),
    },
    redshift_cluster_snapshot(name, block): {
      local resource = blockType.resource('aws_redshift_cluster_snapshot', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster_identifier: build.template(block.cluster_identifier),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        manual_snapshot_retention_period: build.template(std.get(block, 'manual_snapshot_retention_period', null)),
        owner_account: build.template(std.get(block, 'owner_account', null)),
        snapshot_identifier: build.template(block.snapshot_identifier),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      cluster_identifier: resource.field('cluster_identifier'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      manual_snapshot_retention_period: resource.field('manual_snapshot_retention_period'),
      owner_account: resource.field('owner_account'),
      snapshot_identifier: resource.field('snapshot_identifier'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    redshift_data_share_authorization(name, block): {
      local resource = blockType.resource('aws_redshift_data_share_authorization', name),
      _: resource._(block, {
        allow_writes: build.template(std.get(block, 'allow_writes', null)),
        consumer_identifier: build.template(block.consumer_identifier),
        data_share_arn: build.template(block.data_share_arn),
        id: build.template(std.get(block, 'id', null)),
        managed_by: build.template(std.get(block, 'managed_by', null)),
        producer_arn: build.template(std.get(block, 'producer_arn', null)),
      }),
      allow_writes: resource.field('allow_writes'),
      consumer_identifier: resource.field('consumer_identifier'),
      data_share_arn: resource.field('data_share_arn'),
      id: resource.field('id'),
      managed_by: resource.field('managed_by'),
      producer_arn: resource.field('producer_arn'),
    },
    redshift_data_share_consumer_association(name, block): {
      local resource = blockType.resource('aws_redshift_data_share_consumer_association', name),
      _: resource._(block, {
        allow_writes: build.template(std.get(block, 'allow_writes', null)),
        associate_entire_account: build.template(std.get(block, 'associate_entire_account', null)),
        consumer_arn: build.template(std.get(block, 'consumer_arn', null)),
        consumer_region: build.template(std.get(block, 'consumer_region', null)),
        data_share_arn: build.template(block.data_share_arn),
        id: build.template(std.get(block, 'id', null)),
        managed_by: build.template(std.get(block, 'managed_by', null)),
        producer_arn: build.template(std.get(block, 'producer_arn', null)),
      }),
      allow_writes: resource.field('allow_writes'),
      associate_entire_account: resource.field('associate_entire_account'),
      consumer_arn: resource.field('consumer_arn'),
      consumer_region: resource.field('consumer_region'),
      data_share_arn: resource.field('data_share_arn'),
      id: resource.field('id'),
      managed_by: resource.field('managed_by'),
      producer_arn: resource.field('producer_arn'),
    },
    redshift_endpoint_access(name, block): {
      local resource = blockType.resource('aws_redshift_endpoint_access', name),
      _: resource._(block, {
        address: build.template(std.get(block, 'address', null)),
        cluster_identifier: build.template(block.cluster_identifier),
        endpoint_name: build.template(block.endpoint_name),
        id: build.template(std.get(block, 'id', null)),
        port: build.template(std.get(block, 'port', null)),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        subnet_group_name: build.template(block.subnet_group_name),
        vpc_endpoint: build.template(std.get(block, 'vpc_endpoint', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      address: resource.field('address'),
      cluster_identifier: resource.field('cluster_identifier'),
      endpoint_name: resource.field('endpoint_name'),
      id: resource.field('id'),
      port: resource.field('port'),
      resource_owner: resource.field('resource_owner'),
      subnet_group_name: resource.field('subnet_group_name'),
      vpc_endpoint: resource.field('vpc_endpoint'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    redshift_endpoint_authorization(name, block): {
      local resource = blockType.resource('aws_redshift_endpoint_authorization', name),
      _: resource._(block, {
        account: build.template(block.account),
        allowed_all_vpcs: build.template(std.get(block, 'allowed_all_vpcs', null)),
        cluster_identifier: build.template(block.cluster_identifier),
        endpoint_count: build.template(std.get(block, 'endpoint_count', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        grantee: build.template(std.get(block, 'grantee', null)),
        grantor: build.template(std.get(block, 'grantor', null)),
        id: build.template(std.get(block, 'id', null)),
        vpc_ids: build.template(std.get(block, 'vpc_ids', null)),
      }),
      account: resource.field('account'),
      allowed_all_vpcs: resource.field('allowed_all_vpcs'),
      cluster_identifier: resource.field('cluster_identifier'),
      endpoint_count: resource.field('endpoint_count'),
      force_delete: resource.field('force_delete'),
      grantee: resource.field('grantee'),
      grantor: resource.field('grantor'),
      id: resource.field('id'),
      vpc_ids: resource.field('vpc_ids'),
    },
    redshift_event_subscription(name, block): {
      local resource = blockType.resource('aws_redshift_event_subscription', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        customer_aws_id: build.template(std.get(block, 'customer_aws_id', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        event_categories: build.template(std.get(block, 'event_categories', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        severity: build.template(std.get(block, 'severity', null)),
        sns_topic_arn: build.template(block.sns_topic_arn),
        source_ids: build.template(std.get(block, 'source_ids', null)),
        source_type: build.template(std.get(block, 'source_type', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      customer_aws_id: resource.field('customer_aws_id'),
      enabled: resource.field('enabled'),
      event_categories: resource.field('event_categories'),
      id: resource.field('id'),
      name: resource.field('name'),
      severity: resource.field('severity'),
      sns_topic_arn: resource.field('sns_topic_arn'),
      source_ids: resource.field('source_ids'),
      source_type: resource.field('source_type'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    redshift_hsm_client_certificate(name, block): {
      local resource = blockType.resource('aws_redshift_hsm_client_certificate', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        hsm_client_certificate_identifier: build.template(block.hsm_client_certificate_identifier),
        hsm_client_certificate_public_key: build.template(std.get(block, 'hsm_client_certificate_public_key', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      hsm_client_certificate_identifier: resource.field('hsm_client_certificate_identifier'),
      hsm_client_certificate_public_key: resource.field('hsm_client_certificate_public_key'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    redshift_hsm_configuration(name, block): {
      local resource = blockType.resource('aws_redshift_hsm_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(block.description),
        hsm_configuration_identifier: build.template(block.hsm_configuration_identifier),
        hsm_ip_address: build.template(block.hsm_ip_address),
        hsm_partition_name: build.template(block.hsm_partition_name),
        hsm_partition_password: build.template(block.hsm_partition_password),
        hsm_server_public_certificate: build.template(block.hsm_server_public_certificate),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      hsm_configuration_identifier: resource.field('hsm_configuration_identifier'),
      hsm_ip_address: resource.field('hsm_ip_address'),
      hsm_partition_name: resource.field('hsm_partition_name'),
      hsm_partition_password: resource.field('hsm_partition_password'),
      hsm_server_public_certificate: resource.field('hsm_server_public_certificate'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    redshift_logging(name, block): {
      local resource = blockType.resource('aws_redshift_logging', name),
      _: resource._(block, {
        bucket_name: build.template(std.get(block, 'bucket_name', null)),
        cluster_identifier: build.template(block.cluster_identifier),
        id: build.template(std.get(block, 'id', null)),
        log_destination_type: build.template(std.get(block, 'log_destination_type', null)),
        log_exports: build.template(std.get(block, 'log_exports', null)),
        s3_key_prefix: build.template(std.get(block, 's3_key_prefix', null)),
      }),
      bucket_name: resource.field('bucket_name'),
      cluster_identifier: resource.field('cluster_identifier'),
      id: resource.field('id'),
      log_destination_type: resource.field('log_destination_type'),
      log_exports: resource.field('log_exports'),
      s3_key_prefix: resource.field('s3_key_prefix'),
    },
    redshift_parameter_group(name, block): {
      local resource = blockType.resource('aws_redshift_parameter_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        family: build.template(block.family),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      family: resource.field('family'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    redshift_partner(name, block): {
      local resource = blockType.resource('aws_redshift_partner', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        cluster_identifier: build.template(block.cluster_identifier),
        database_name: build.template(block.database_name),
        id: build.template(std.get(block, 'id', null)),
        partner_name: build.template(block.partner_name),
        status: build.template(std.get(block, 'status', null)),
        status_message: build.template(std.get(block, 'status_message', null)),
      }),
      account_id: resource.field('account_id'),
      cluster_identifier: resource.field('cluster_identifier'),
      database_name: resource.field('database_name'),
      id: resource.field('id'),
      partner_name: resource.field('partner_name'),
      status: resource.field('status'),
      status_message: resource.field('status_message'),
    },
    redshift_resource_policy(name, block): {
      local resource = blockType.resource('aws_redshift_resource_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        resource_arn: build.template(block.resource_arn),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      resource_arn: resource.field('resource_arn'),
    },
    redshift_scheduled_action(name, block): {
      local resource = blockType.resource('aws_redshift_scheduled_action', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        enable: build.template(std.get(block, 'enable', null)),
        end_time: build.template(std.get(block, 'end_time', null)),
        iam_role: build.template(block.iam_role),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        schedule: build.template(block.schedule),
        start_time: build.template(std.get(block, 'start_time', null)),
      }),
      description: resource.field('description'),
      enable: resource.field('enable'),
      end_time: resource.field('end_time'),
      iam_role: resource.field('iam_role'),
      id: resource.field('id'),
      name: resource.field('name'),
      schedule: resource.field('schedule'),
      start_time: resource.field('start_time'),
    },
    redshift_snapshot_copy(name, block): {
      local resource = blockType.resource('aws_redshift_snapshot_copy', name),
      _: resource._(block, {
        cluster_identifier: build.template(block.cluster_identifier),
        destination_region: build.template(block.destination_region),
        id: build.template(std.get(block, 'id', null)),
        manual_snapshot_retention_period: build.template(std.get(block, 'manual_snapshot_retention_period', null)),
        retention_period: build.template(std.get(block, 'retention_period', null)),
        snapshot_copy_grant_name: build.template(std.get(block, 'snapshot_copy_grant_name', null)),
      }),
      cluster_identifier: resource.field('cluster_identifier'),
      destination_region: resource.field('destination_region'),
      id: resource.field('id'),
      manual_snapshot_retention_period: resource.field('manual_snapshot_retention_period'),
      retention_period: resource.field('retention_period'),
      snapshot_copy_grant_name: resource.field('snapshot_copy_grant_name'),
    },
    redshift_snapshot_copy_grant(name, block): {
      local resource = blockType.resource('aws_redshift_snapshot_copy_grant', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        snapshot_copy_grant_name: build.template(block.snapshot_copy_grant_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      snapshot_copy_grant_name: resource.field('snapshot_copy_grant_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    redshift_snapshot_schedule(name, block): {
      local resource = blockType.resource('aws_redshift_snapshot_schedule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        definitions: build.template(block.definitions),
        description: build.template(std.get(block, 'description', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        identifier: build.template(std.get(block, 'identifier', null)),
        identifier_prefix: build.template(std.get(block, 'identifier_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      definitions: resource.field('definitions'),
      description: resource.field('description'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      identifier: resource.field('identifier'),
      identifier_prefix: resource.field('identifier_prefix'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    redshift_snapshot_schedule_association(name, block): {
      local resource = blockType.resource('aws_redshift_snapshot_schedule_association', name),
      _: resource._(block, {
        cluster_identifier: build.template(block.cluster_identifier),
        id: build.template(std.get(block, 'id', null)),
        schedule_identifier: build.template(block.schedule_identifier),
      }),
      cluster_identifier: resource.field('cluster_identifier'),
      id: resource.field('id'),
      schedule_identifier: resource.field('schedule_identifier'),
    },
    redshift_subnet_group(name, block): {
      local resource = blockType.resource('aws_redshift_subnet_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subnet_ids: build.template(block.subnet_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    redshift_usage_limit(name, block): {
      local resource = blockType.resource('aws_redshift_usage_limit', name),
      _: resource._(block, {
        amount: build.template(block.amount),
        arn: build.template(std.get(block, 'arn', null)),
        breach_action: build.template(std.get(block, 'breach_action', null)),
        cluster_identifier: build.template(block.cluster_identifier),
        feature_type: build.template(block.feature_type),
        id: build.template(std.get(block, 'id', null)),
        limit_type: build.template(block.limit_type),
        period: build.template(std.get(block, 'period', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      amount: resource.field('amount'),
      arn: resource.field('arn'),
      breach_action: resource.field('breach_action'),
      cluster_identifier: resource.field('cluster_identifier'),
      feature_type: resource.field('feature_type'),
      id: resource.field('id'),
      limit_type: resource.field('limit_type'),
      period: resource.field('period'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    redshiftdata_statement(name, block): {
      local resource = blockType.resource('aws_redshiftdata_statement', name),
      _: resource._(block, {
        cluster_identifier: build.template(std.get(block, 'cluster_identifier', null)),
        database: build.template(block.database),
        db_user: build.template(std.get(block, 'db_user', null)),
        id: build.template(std.get(block, 'id', null)),
        secret_arn: build.template(std.get(block, 'secret_arn', null)),
        sql: build.template(block.sql),
        statement_name: build.template(std.get(block, 'statement_name', null)),
        with_event: build.template(std.get(block, 'with_event', null)),
        workgroup_name: build.template(std.get(block, 'workgroup_name', null)),
      }),
      cluster_identifier: resource.field('cluster_identifier'),
      database: resource.field('database'),
      db_user: resource.field('db_user'),
      id: resource.field('id'),
      secret_arn: resource.field('secret_arn'),
      sql: resource.field('sql'),
      statement_name: resource.field('statement_name'),
      with_event: resource.field('with_event'),
      workgroup_name: resource.field('workgroup_name'),
    },
    redshiftserverless_custom_domain_association(name, block): {
      local resource = blockType.resource('aws_redshiftserverless_custom_domain_association', name),
      _: resource._(block, {
        custom_domain_certificate_arn: build.template(block.custom_domain_certificate_arn),
        custom_domain_certificate_expiry_time: build.template(std.get(block, 'custom_domain_certificate_expiry_time', null)),
        custom_domain_name: build.template(block.custom_domain_name),
        id: build.template(std.get(block, 'id', null)),
        workgroup_name: build.template(block.workgroup_name),
      }),
      custom_domain_certificate_arn: resource.field('custom_domain_certificate_arn'),
      custom_domain_certificate_expiry_time: resource.field('custom_domain_certificate_expiry_time'),
      custom_domain_name: resource.field('custom_domain_name'),
      id: resource.field('id'),
      workgroup_name: resource.field('workgroup_name'),
    },
    redshiftserverless_endpoint_access(name, block): {
      local resource = blockType.resource('aws_redshiftserverless_endpoint_access', name),
      _: resource._(block, {
        address: build.template(std.get(block, 'address', null)),
        arn: build.template(std.get(block, 'arn', null)),
        endpoint_name: build.template(block.endpoint_name),
        id: build.template(std.get(block, 'id', null)),
        owner_account: build.template(std.get(block, 'owner_account', null)),
        port: build.template(std.get(block, 'port', null)),
        subnet_ids: build.template(block.subnet_ids),
        vpc_endpoint: build.template(std.get(block, 'vpc_endpoint', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
        workgroup_name: build.template(block.workgroup_name),
      }),
      address: resource.field('address'),
      arn: resource.field('arn'),
      endpoint_name: resource.field('endpoint_name'),
      id: resource.field('id'),
      owner_account: resource.field('owner_account'),
      port: resource.field('port'),
      subnet_ids: resource.field('subnet_ids'),
      vpc_endpoint: resource.field('vpc_endpoint'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
      workgroup_name: resource.field('workgroup_name'),
    },
    redshiftserverless_namespace(name, block): {
      local resource = blockType.resource('aws_redshiftserverless_namespace', name),
      _: resource._(block, {
        admin_password_secret_arn: build.template(std.get(block, 'admin_password_secret_arn', null)),
        admin_password_secret_kms_key_id: build.template(std.get(block, 'admin_password_secret_kms_key_id', null)),
        admin_user_password: build.template(std.get(block, 'admin_user_password', null)),
        admin_username: build.template(std.get(block, 'admin_username', null)),
        arn: build.template(std.get(block, 'arn', null)),
        db_name: build.template(std.get(block, 'db_name', null)),
        default_iam_role_arn: build.template(std.get(block, 'default_iam_role_arn', null)),
        iam_roles: build.template(std.get(block, 'iam_roles', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        log_exports: build.template(std.get(block, 'log_exports', null)),
        manage_admin_password: build.template(std.get(block, 'manage_admin_password', null)),
        namespace_id: build.template(std.get(block, 'namespace_id', null)),
        namespace_name: build.template(block.namespace_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      admin_password_secret_arn: resource.field('admin_password_secret_arn'),
      admin_password_secret_kms_key_id: resource.field('admin_password_secret_kms_key_id'),
      admin_user_password: resource.field('admin_user_password'),
      admin_username: resource.field('admin_username'),
      arn: resource.field('arn'),
      db_name: resource.field('db_name'),
      default_iam_role_arn: resource.field('default_iam_role_arn'),
      iam_roles: resource.field('iam_roles'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      log_exports: resource.field('log_exports'),
      manage_admin_password: resource.field('manage_admin_password'),
      namespace_id: resource.field('namespace_id'),
      namespace_name: resource.field('namespace_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    redshiftserverless_resource_policy(name, block): {
      local resource = blockType.resource('aws_redshiftserverless_resource_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        resource_arn: build.template(block.resource_arn),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      resource_arn: resource.field('resource_arn'),
    },
    redshiftserverless_snapshot(name, block): {
      local resource = blockType.resource('aws_redshiftserverless_snapshot', name),
      _: resource._(block, {
        accounts_with_provisioned_restore_access: build.template(std.get(block, 'accounts_with_provisioned_restore_access', null)),
        accounts_with_restore_access: build.template(std.get(block, 'accounts_with_restore_access', null)),
        admin_username: build.template(std.get(block, 'admin_username', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        namespace_arn: build.template(std.get(block, 'namespace_arn', null)),
        namespace_name: build.template(block.namespace_name),
        owner_account: build.template(std.get(block, 'owner_account', null)),
        retention_period: build.template(std.get(block, 'retention_period', null)),
        snapshot_name: build.template(block.snapshot_name),
      }),
      accounts_with_provisioned_restore_access: resource.field('accounts_with_provisioned_restore_access'),
      accounts_with_restore_access: resource.field('accounts_with_restore_access'),
      admin_username: resource.field('admin_username'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      namespace_arn: resource.field('namespace_arn'),
      namespace_name: resource.field('namespace_name'),
      owner_account: resource.field('owner_account'),
      retention_period: resource.field('retention_period'),
      snapshot_name: resource.field('snapshot_name'),
    },
    redshiftserverless_usage_limit(name, block): {
      local resource = blockType.resource('aws_redshiftserverless_usage_limit', name),
      _: resource._(block, {
        amount: build.template(block.amount),
        arn: build.template(std.get(block, 'arn', null)),
        breach_action: build.template(std.get(block, 'breach_action', null)),
        id: build.template(std.get(block, 'id', null)),
        period: build.template(std.get(block, 'period', null)),
        resource_arn: build.template(block.resource_arn),
        usage_type: build.template(block.usage_type),
      }),
      amount: resource.field('amount'),
      arn: resource.field('arn'),
      breach_action: resource.field('breach_action'),
      id: resource.field('id'),
      period: resource.field('period'),
      resource_arn: resource.field('resource_arn'),
      usage_type: resource.field('usage_type'),
    },
    redshiftserverless_workgroup(name, block): {
      local resource = blockType.resource('aws_redshiftserverless_workgroup', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        base_capacity: build.template(std.get(block, 'base_capacity', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        enhanced_vpc_routing: build.template(std.get(block, 'enhanced_vpc_routing', null)),
        id: build.template(std.get(block, 'id', null)),
        max_capacity: build.template(std.get(block, 'max_capacity', null)),
        namespace_name: build.template(block.namespace_name),
        port: build.template(std.get(block, 'port', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        workgroup_id: build.template(std.get(block, 'workgroup_id', null)),
        workgroup_name: build.template(block.workgroup_name),
      }),
      arn: resource.field('arn'),
      base_capacity: resource.field('base_capacity'),
      endpoint: resource.field('endpoint'),
      enhanced_vpc_routing: resource.field('enhanced_vpc_routing'),
      id: resource.field('id'),
      max_capacity: resource.field('max_capacity'),
      namespace_name: resource.field('namespace_name'),
      port: resource.field('port'),
      publicly_accessible: resource.field('publicly_accessible'),
      security_group_ids: resource.field('security_group_ids'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      workgroup_id: resource.field('workgroup_id'),
      workgroup_name: resource.field('workgroup_name'),
    },
    rekognition_collection(name, block): {
      local resource = blockType.resource('aws_rekognition_collection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        collection_id: build.template(block.collection_id),
        face_model_version: build.template(std.get(block, 'face_model_version', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      collection_id: resource.field('collection_id'),
      face_model_version: resource.field('face_model_version'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    rekognition_project(name, block): {
      local resource = blockType.resource('aws_rekognition_project', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_update: build.template(std.get(block, 'auto_update', null)),
        feature: build.template(std.get(block, 'feature', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      auto_update: resource.field('auto_update'),
      feature: resource.field('feature'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    rekognition_stream_processor(name, block): {
      local resource = blockType.resource('aws_rekognition_stream_processor', name),
      _: resource._(block, {
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        name: build.template(block.name),
        role_arn: build.template(block.role_arn),
        stream_processor_arn: build.template(std.get(block, 'stream_processor_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      kms_key_id: resource.field('kms_key_id'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      stream_processor_arn: resource.field('stream_processor_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    resiliencehub_resiliency_policy(name, block): {
      local resource = blockType.resource('aws_resiliencehub_resiliency_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        data_location_constraint: build.template(std.get(block, 'data_location_constraint', null)),
        description: build.template(std.get(block, 'description', null)),
        estimated_cost_tier: build.template(std.get(block, 'estimated_cost_tier', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tier: build.template(block.tier),
      }),
      arn: resource.field('arn'),
      data_location_constraint: resource.field('data_location_constraint'),
      description: resource.field('description'),
      estimated_cost_tier: resource.field('estimated_cost_tier'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tier: resource.field('tier'),
    },
    resourceexplorer2_index(name, block): {
      local resource = blockType.resource('aws_resourceexplorer2_index', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    resourceexplorer2_view(name, block): {
      local resource = blockType.resource('aws_resourceexplorer2_view', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_view: build.template(std.get(block, 'default_view', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        scope: build.template(std.get(block, 'scope', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      default_view: resource.field('default_view'),
      id: resource.field('id'),
      name: resource.field('name'),
      scope: resource.field('scope'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    resourcegroups_group(name, block): {
      local resource = blockType.resource('aws_resourcegroups_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    resourcegroups_resource(name, block): {
      local resource = blockType.resource('aws_resourcegroups_resource', name),
      _: resource._(block, {
        group_arn: build.template(block.group_arn),
        id: build.template(std.get(block, 'id', null)),
        resource_arn: build.template(block.resource_arn),
        resource_type: build.template(std.get(block, 'resource_type', null)),
      }),
      group_arn: resource.field('group_arn'),
      id: resource.field('id'),
      resource_arn: resource.field('resource_arn'),
      resource_type: resource.field('resource_type'),
    },
    rolesanywhere_profile(name, block): {
      local resource = blockType.resource('aws_rolesanywhere_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        duration_seconds: build.template(std.get(block, 'duration_seconds', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_policy_arns: build.template(std.get(block, 'managed_policy_arns', null)),
        name: build.template(block.name),
        require_instance_properties: build.template(std.get(block, 'require_instance_properties', null)),
        role_arns: build.template(std.get(block, 'role_arns', null)),
        session_policy: build.template(std.get(block, 'session_policy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      duration_seconds: resource.field('duration_seconds'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      managed_policy_arns: resource.field('managed_policy_arns'),
      name: resource.field('name'),
      require_instance_properties: resource.field('require_instance_properties'),
      role_arns: resource.field('role_arns'),
      session_policy: resource.field('session_policy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    rolesanywhere_trust_anchor(name, block): {
      local resource = blockType.resource('aws_rolesanywhere_trust_anchor', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    route(name, block): {
      local resource = blockType.resource('aws_route', name),
      _: resource._(block, {
        carrier_gateway_id: build.template(std.get(block, 'carrier_gateway_id', null)),
        core_network_arn: build.template(std.get(block, 'core_network_arn', null)),
        destination_cidr_block: build.template(std.get(block, 'destination_cidr_block', null)),
        destination_ipv6_cidr_block: build.template(std.get(block, 'destination_ipv6_cidr_block', null)),
        destination_prefix_list_id: build.template(std.get(block, 'destination_prefix_list_id', null)),
        egress_only_gateway_id: build.template(std.get(block, 'egress_only_gateway_id', null)),
        gateway_id: build.template(std.get(block, 'gateway_id', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(std.get(block, 'instance_id', null)),
        instance_owner_id: build.template(std.get(block, 'instance_owner_id', null)),
        local_gateway_id: build.template(std.get(block, 'local_gateway_id', null)),
        nat_gateway_id: build.template(std.get(block, 'nat_gateway_id', null)),
        network_interface_id: build.template(std.get(block, 'network_interface_id', null)),
        origin: build.template(std.get(block, 'origin', null)),
        route_table_id: build.template(block.route_table_id),
        state: build.template(std.get(block, 'state', null)),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
        vpc_endpoint_id: build.template(std.get(block, 'vpc_endpoint_id', null)),
        vpc_peering_connection_id: build.template(std.get(block, 'vpc_peering_connection_id', null)),
      }),
      carrier_gateway_id: resource.field('carrier_gateway_id'),
      core_network_arn: resource.field('core_network_arn'),
      destination_cidr_block: resource.field('destination_cidr_block'),
      destination_ipv6_cidr_block: resource.field('destination_ipv6_cidr_block'),
      destination_prefix_list_id: resource.field('destination_prefix_list_id'),
      egress_only_gateway_id: resource.field('egress_only_gateway_id'),
      gateway_id: resource.field('gateway_id'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      instance_owner_id: resource.field('instance_owner_id'),
      local_gateway_id: resource.field('local_gateway_id'),
      nat_gateway_id: resource.field('nat_gateway_id'),
      network_interface_id: resource.field('network_interface_id'),
      origin: resource.field('origin'),
      route_table_id: resource.field('route_table_id'),
      state: resource.field('state'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      vpc_endpoint_id: resource.field('vpc_endpoint_id'),
      vpc_peering_connection_id: resource.field('vpc_peering_connection_id'),
    },
    route53_cidr_collection(name, block): {
      local resource = blockType.resource('aws_route53_cidr_collection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      version: resource.field('version'),
    },
    route53_cidr_location(name, block): {
      local resource = blockType.resource('aws_route53_cidr_location', name),
      _: resource._(block, {
        cidr_blocks: build.template(block.cidr_blocks),
        cidr_collection_id: build.template(block.cidr_collection_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      cidr_blocks: resource.field('cidr_blocks'),
      cidr_collection_id: resource.field('cidr_collection_id'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    route53_delegation_set(name, block): {
      local resource = blockType.resource('aws_route53_delegation_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name_servers: build.template(std.get(block, 'name_servers', null)),
        reference_name: build.template(std.get(block, 'reference_name', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name_servers: resource.field('name_servers'),
      reference_name: resource.field('reference_name'),
    },
    route53_health_check(name, block): {
      local resource = blockType.resource('aws_route53_health_check', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        child_health_threshold: build.template(std.get(block, 'child_health_threshold', null)),
        child_healthchecks: build.template(std.get(block, 'child_healthchecks', null)),
        cloudwatch_alarm_name: build.template(std.get(block, 'cloudwatch_alarm_name', null)),
        cloudwatch_alarm_region: build.template(std.get(block, 'cloudwatch_alarm_region', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        enable_sni: build.template(std.get(block, 'enable_sni', null)),
        failure_threshold: build.template(std.get(block, 'failure_threshold', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        insufficient_data_health_status: build.template(std.get(block, 'insufficient_data_health_status', null)),
        invert_healthcheck: build.template(std.get(block, 'invert_healthcheck', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        measure_latency: build.template(std.get(block, 'measure_latency', null)),
        port: build.template(std.get(block, 'port', null)),
        reference_name: build.template(std.get(block, 'reference_name', null)),
        regions: build.template(std.get(block, 'regions', null)),
        request_interval: build.template(std.get(block, 'request_interval', null)),
        resource_path: build.template(std.get(block, 'resource_path', null)),
        routing_control_arn: build.template(std.get(block, 'routing_control_arn', null)),
        search_string: build.template(std.get(block, 'search_string', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      child_health_threshold: resource.field('child_health_threshold'),
      child_healthchecks: resource.field('child_healthchecks'),
      cloudwatch_alarm_name: resource.field('cloudwatch_alarm_name'),
      cloudwatch_alarm_region: resource.field('cloudwatch_alarm_region'),
      disabled: resource.field('disabled'),
      enable_sni: resource.field('enable_sni'),
      failure_threshold: resource.field('failure_threshold'),
      fqdn: resource.field('fqdn'),
      id: resource.field('id'),
      insufficient_data_health_status: resource.field('insufficient_data_health_status'),
      invert_healthcheck: resource.field('invert_healthcheck'),
      ip_address: resource.field('ip_address'),
      measure_latency: resource.field('measure_latency'),
      port: resource.field('port'),
      reference_name: resource.field('reference_name'),
      regions: resource.field('regions'),
      request_interval: resource.field('request_interval'),
      resource_path: resource.field('resource_path'),
      routing_control_arn: resource.field('routing_control_arn'),
      search_string: resource.field('search_string'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    route53_hosted_zone_dnssec(name, block): {
      local resource = blockType.resource('aws_route53_hosted_zone_dnssec', name),
      _: resource._(block, {
        hosted_zone_id: build.template(block.hosted_zone_id),
        id: build.template(std.get(block, 'id', null)),
        signing_status: build.template(std.get(block, 'signing_status', null)),
      }),
      hosted_zone_id: resource.field('hosted_zone_id'),
      id: resource.field('id'),
      signing_status: resource.field('signing_status'),
    },
    route53_key_signing_key(name, block): {
      local resource = blockType.resource('aws_route53_key_signing_key', name),
      _: resource._(block, {
        digest_algorithm_mnemonic: build.template(std.get(block, 'digest_algorithm_mnemonic', null)),
        digest_algorithm_type: build.template(std.get(block, 'digest_algorithm_type', null)),
        digest_value: build.template(std.get(block, 'digest_value', null)),
        dnskey_record: build.template(std.get(block, 'dnskey_record', null)),
        ds_record: build.template(std.get(block, 'ds_record', null)),
        flag: build.template(std.get(block, 'flag', null)),
        hosted_zone_id: build.template(block.hosted_zone_id),
        id: build.template(std.get(block, 'id', null)),
        key_management_service_arn: build.template(block.key_management_service_arn),
        key_tag: build.template(std.get(block, 'key_tag', null)),
        name: build.template(block.name),
        public_key: build.template(std.get(block, 'public_key', null)),
        signing_algorithm_mnemonic: build.template(std.get(block, 'signing_algorithm_mnemonic', null)),
        signing_algorithm_type: build.template(std.get(block, 'signing_algorithm_type', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      digest_algorithm_mnemonic: resource.field('digest_algorithm_mnemonic'),
      digest_algorithm_type: resource.field('digest_algorithm_type'),
      digest_value: resource.field('digest_value'),
      dnskey_record: resource.field('dnskey_record'),
      ds_record: resource.field('ds_record'),
      flag: resource.field('flag'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      id: resource.field('id'),
      key_management_service_arn: resource.field('key_management_service_arn'),
      key_tag: resource.field('key_tag'),
      name: resource.field('name'),
      public_key: resource.field('public_key'),
      signing_algorithm_mnemonic: resource.field('signing_algorithm_mnemonic'),
      signing_algorithm_type: resource.field('signing_algorithm_type'),
      status: resource.field('status'),
    },
    route53_query_log(name, block): {
      local resource = blockType.resource('aws_route53_query_log', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cloudwatch_log_group_arn: build.template(block.cloudwatch_log_group_arn),
        id: build.template(std.get(block, 'id', null)),
        zone_id: build.template(block.zone_id),
      }),
      arn: resource.field('arn'),
      cloudwatch_log_group_arn: resource.field('cloudwatch_log_group_arn'),
      id: resource.field('id'),
      zone_id: resource.field('zone_id'),
    },
    route53_record(name, block): {
      local resource = blockType.resource('aws_route53_record', name),
      _: resource._(block, {
        allow_overwrite: build.template(std.get(block, 'allow_overwrite', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        health_check_id: build.template(std.get(block, 'health_check_id', null)),
        id: build.template(std.get(block, 'id', null)),
        multivalue_answer_routing_policy: build.template(std.get(block, 'multivalue_answer_routing_policy', null)),
        name: build.template(block.name),
        records: build.template(std.get(block, 'records', null)),
        set_identifier: build.template(std.get(block, 'set_identifier', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        type: build.template(block.type),
        zone_id: build.template(block.zone_id),
      }),
      allow_overwrite: resource.field('allow_overwrite'),
      fqdn: resource.field('fqdn'),
      health_check_id: resource.field('health_check_id'),
      id: resource.field('id'),
      multivalue_answer_routing_policy: resource.field('multivalue_answer_routing_policy'),
      name: resource.field('name'),
      records: resource.field('records'),
      set_identifier: resource.field('set_identifier'),
      ttl: resource.field('ttl'),
      type: resource.field('type'),
      zone_id: resource.field('zone_id'),
    },
    route53_resolver_config(name, block): {
      local resource = blockType.resource('aws_route53_resolver_config', name),
      _: resource._(block, {
        autodefined_reverse_flag: build.template(block.autodefined_reverse_flag),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        resource_id: build.template(block.resource_id),
      }),
      autodefined_reverse_flag: resource.field('autodefined_reverse_flag'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      resource_id: resource.field('resource_id'),
    },
    route53_resolver_dnssec_config(name, block): {
      local resource = blockType.resource('aws_route53_resolver_dnssec_config', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        resource_id: build.template(block.resource_id),
        validation_status: build.template(std.get(block, 'validation_status', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      resource_id: resource.field('resource_id'),
      validation_status: resource.field('validation_status'),
    },
    route53_resolver_endpoint(name, block): {
      local resource = blockType.resource('aws_route53_resolver_endpoint', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        direction: build.template(block.direction),
        host_vpc_id: build.template(std.get(block, 'host_vpc_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        protocols: build.template(std.get(block, 'protocols', null)),
        resolver_endpoint_type: build.template(std.get(block, 'resolver_endpoint_type', null)),
        security_group_ids: build.template(block.security_group_ids),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      direction: resource.field('direction'),
      host_vpc_id: resource.field('host_vpc_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      protocols: resource.field('protocols'),
      resolver_endpoint_type: resource.field('resolver_endpoint_type'),
      security_group_ids: resource.field('security_group_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    route53_resolver_firewall_config(name, block): {
      local resource = blockType.resource('aws_route53_resolver_firewall_config', name),
      _: resource._(block, {
        firewall_fail_open: build.template(std.get(block, 'firewall_fail_open', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        resource_id: build.template(block.resource_id),
      }),
      firewall_fail_open: resource.field('firewall_fail_open'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      resource_id: resource.field('resource_id'),
    },
    route53_resolver_firewall_domain_list(name, block): {
      local resource = blockType.resource('aws_route53_resolver_firewall_domain_list', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        domains: build.template(std.get(block, 'domains', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      domains: resource.field('domains'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    route53_resolver_firewall_rule(name, block): {
      local resource = blockType.resource('aws_route53_resolver_firewall_rule', name),
      _: resource._(block, {
        action: build.template(block.action),
        block_override_dns_type: build.template(std.get(block, 'block_override_dns_type', null)),
        block_override_domain: build.template(std.get(block, 'block_override_domain', null)),
        block_override_ttl: build.template(std.get(block, 'block_override_ttl', null)),
        block_response: build.template(std.get(block, 'block_response', null)),
        firewall_domain_list_id: build.template(block.firewall_domain_list_id),
        firewall_domain_redirection_action: build.template(std.get(block, 'firewall_domain_redirection_action', null)),
        firewall_rule_group_id: build.template(block.firewall_rule_group_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        priority: build.template(block.priority),
        q_type: build.template(std.get(block, 'q_type', null)),
      }),
      action: resource.field('action'),
      block_override_dns_type: resource.field('block_override_dns_type'),
      block_override_domain: resource.field('block_override_domain'),
      block_override_ttl: resource.field('block_override_ttl'),
      block_response: resource.field('block_response'),
      firewall_domain_list_id: resource.field('firewall_domain_list_id'),
      firewall_domain_redirection_action: resource.field('firewall_domain_redirection_action'),
      firewall_rule_group_id: resource.field('firewall_rule_group_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      priority: resource.field('priority'),
      q_type: resource.field('q_type'),
    },
    route53_resolver_firewall_rule_group(name, block): {
      local resource = blockType.resource('aws_route53_resolver_firewall_rule_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        share_status: build.template(std.get(block, 'share_status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      share_status: resource.field('share_status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    route53_resolver_firewall_rule_group_association(name, block): {
      local resource = blockType.resource('aws_route53_resolver_firewall_rule_group_association', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        firewall_rule_group_id: build.template(block.firewall_rule_group_id),
        id: build.template(std.get(block, 'id', null)),
        mutation_protection: build.template(std.get(block, 'mutation_protection', null)),
        name: build.template(block.name),
        priority: build.template(block.priority),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      arn: resource.field('arn'),
      firewall_rule_group_id: resource.field('firewall_rule_group_id'),
      id: resource.field('id'),
      mutation_protection: resource.field('mutation_protection'),
      name: resource.field('name'),
      priority: resource.field('priority'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    route53_resolver_query_log_config(name, block): {
      local resource = blockType.resource('aws_route53_resolver_query_log_config', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        destination_arn: build.template(block.destination_arn),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        share_status: build.template(std.get(block, 'share_status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      destination_arn: resource.field('destination_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      share_status: resource.field('share_status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    route53_resolver_query_log_config_association(name, block): {
      local resource = blockType.resource('aws_route53_resolver_query_log_config_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        resolver_query_log_config_id: build.template(block.resolver_query_log_config_id),
        resource_id: build.template(block.resource_id),
      }),
      id: resource.field('id'),
      resolver_query_log_config_id: resource.field('resolver_query_log_config_id'),
      resource_id: resource.field('resource_id'),
    },
    route53_resolver_rule(name, block): {
      local resource = blockType.resource('aws_route53_resolver_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        resolver_endpoint_id: build.template(std.get(block, 'resolver_endpoint_id', null)),
        rule_type: build.template(block.rule_type),
        share_status: build.template(std.get(block, 'share_status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      resolver_endpoint_id: resource.field('resolver_endpoint_id'),
      rule_type: resource.field('rule_type'),
      share_status: resource.field('share_status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    route53_resolver_rule_association(name, block): {
      local resource = blockType.resource('aws_route53_resolver_rule_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        resolver_rule_id: build.template(block.resolver_rule_id),
        vpc_id: build.template(block.vpc_id),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      resolver_rule_id: resource.field('resolver_rule_id'),
      vpc_id: resource.field('vpc_id'),
    },
    route53_traffic_policy(name, block): {
      local resource = blockType.resource('aws_route53_traffic_policy', name),
      _: resource._(block, {
        comment: build.template(std.get(block, 'comment', null)),
        document: build.template(block.document),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        type: build.template(std.get(block, 'type', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      comment: resource.field('comment'),
      document: resource.field('document'),
      id: resource.field('id'),
      name: resource.field('name'),
      type: resource.field('type'),
      version: resource.field('version'),
    },
    route53_traffic_policy_instance(name, block): {
      local resource = blockType.resource('aws_route53_traffic_policy_instance', name),
      _: resource._(block, {
        hosted_zone_id: build.template(block.hosted_zone_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        traffic_policy_id: build.template(block.traffic_policy_id),
        traffic_policy_version: build.template(block.traffic_policy_version),
        ttl: build.template(block.ttl),
      }),
      hosted_zone_id: resource.field('hosted_zone_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      traffic_policy_id: resource.field('traffic_policy_id'),
      traffic_policy_version: resource.field('traffic_policy_version'),
      ttl: resource.field('ttl'),
    },
    route53_vpc_association_authorization(name, block): {
      local resource = blockType.resource('aws_route53_vpc_association_authorization', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        vpc_id: build.template(block.vpc_id),
        vpc_region: build.template(std.get(block, 'vpc_region', null)),
        zone_id: build.template(block.zone_id),
      }),
      id: resource.field('id'),
      vpc_id: resource.field('vpc_id'),
      vpc_region: resource.field('vpc_region'),
      zone_id: resource.field('zone_id'),
    },
    route53_zone(name, block): {
      local resource = blockType.resource('aws_route53_zone', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        comment: build.template(std.get(block, 'comment', null)),
        delegation_set_id: build.template(std.get(block, 'delegation_set_id', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        name_servers: build.template(std.get(block, 'name_servers', null)),
        primary_name_server: build.template(std.get(block, 'primary_name_server', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        zone_id: build.template(std.get(block, 'zone_id', null)),
      }),
      arn: resource.field('arn'),
      comment: resource.field('comment'),
      delegation_set_id: resource.field('delegation_set_id'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_servers: resource.field('name_servers'),
      primary_name_server: resource.field('primary_name_server'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      zone_id: resource.field('zone_id'),
    },
    route53_zone_association(name, block): {
      local resource = blockType.resource('aws_route53_zone_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        owning_account: build.template(std.get(block, 'owning_account', null)),
        vpc_id: build.template(block.vpc_id),
        vpc_region: build.template(std.get(block, 'vpc_region', null)),
        zone_id: build.template(block.zone_id),
      }),
      id: resource.field('id'),
      owning_account: resource.field('owning_account'),
      vpc_id: resource.field('vpc_id'),
      vpc_region: resource.field('vpc_region'),
      zone_id: resource.field('zone_id'),
    },
    route53domains_delegation_signer_record(name, block): {
      local resource = blockType.resource('aws_route53domains_delegation_signer_record', name),
      _: resource._(block, {
        dnssec_key_id: build.template(std.get(block, 'dnssec_key_id', null)),
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      dnssec_key_id: resource.field('dnssec_key_id'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
    },
    route53domains_registered_domain(name, block): {
      local resource = blockType.resource('aws_route53domains_registered_domain', name),
      _: resource._(block, {
        abuse_contact_email: build.template(std.get(block, 'abuse_contact_email', null)),
        abuse_contact_phone: build.template(std.get(block, 'abuse_contact_phone', null)),
        admin_privacy: build.template(std.get(block, 'admin_privacy', null)),
        auto_renew: build.template(std.get(block, 'auto_renew', null)),
        billing_privacy: build.template(std.get(block, 'billing_privacy', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        domain_name: build.template(block.domain_name),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        id: build.template(std.get(block, 'id', null)),
        registrant_privacy: build.template(std.get(block, 'registrant_privacy', null)),
        registrar_name: build.template(std.get(block, 'registrar_name', null)),
        registrar_url: build.template(std.get(block, 'registrar_url', null)),
        reseller: build.template(std.get(block, 'reseller', null)),
        status_list: build.template(std.get(block, 'status_list', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tech_privacy: build.template(std.get(block, 'tech_privacy', null)),
        transfer_lock: build.template(std.get(block, 'transfer_lock', null)),
        updated_date: build.template(std.get(block, 'updated_date', null)),
        whois_server: build.template(std.get(block, 'whois_server', null)),
      }),
      abuse_contact_email: resource.field('abuse_contact_email'),
      abuse_contact_phone: resource.field('abuse_contact_phone'),
      admin_privacy: resource.field('admin_privacy'),
      auto_renew: resource.field('auto_renew'),
      billing_privacy: resource.field('billing_privacy'),
      creation_date: resource.field('creation_date'),
      domain_name: resource.field('domain_name'),
      expiration_date: resource.field('expiration_date'),
      id: resource.field('id'),
      registrant_privacy: resource.field('registrant_privacy'),
      registrar_name: resource.field('registrar_name'),
      registrar_url: resource.field('registrar_url'),
      reseller: resource.field('reseller'),
      status_list: resource.field('status_list'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tech_privacy: resource.field('tech_privacy'),
      transfer_lock: resource.field('transfer_lock'),
      updated_date: resource.field('updated_date'),
      whois_server: resource.field('whois_server'),
    },
    route53profiles_association(name, block): {
      local resource = blockType.resource('aws_route53profiles_association', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        profile_id: build.template(block.profile_id),
        resource_id: build.template(block.resource_id),
        status: build.template(std.get(block, 'status', null)),
        status_message: build.template(std.get(block, 'status_message', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      profile_id: resource.field('profile_id'),
      resource_id: resource.field('resource_id'),
      status: resource.field('status'),
      status_message: resource.field('status_message'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    route53profiles_profile(name, block): {
      local resource = blockType.resource('aws_route53profiles_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        share_status: build.template(std.get(block, 'share_status', null)),
        status: build.template(std.get(block, 'status', null)),
        status_message: build.template(std.get(block, 'status_message', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      share_status: resource.field('share_status'),
      status: resource.field('status'),
      status_message: resource.field('status_message'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    route53profiles_resource_association(name, block): {
      local resource = blockType.resource('aws_route53profiles_resource_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        profile_id: build.template(block.profile_id),
        resource_arn: build.template(block.resource_arn),
        resource_properties: build.template(std.get(block, 'resource_properties', null)),
        resource_type: build.template(std.get(block, 'resource_type', null)),
        status: build.template(std.get(block, 'status', null)),
        status_message: build.template(std.get(block, 'status_message', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      profile_id: resource.field('profile_id'),
      resource_arn: resource.field('resource_arn'),
      resource_properties: resource.field('resource_properties'),
      resource_type: resource.field('resource_type'),
      status: resource.field('status'),
      status_message: resource.field('status_message'),
    },
    route53recoverycontrolconfig_cluster(name, block): {
      local resource = blockType.resource('aws_route53recoverycontrolconfig_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster_endpoints: build.template(std.get(block, 'cluster_endpoints', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
      }),
      arn: resource.field('arn'),
      cluster_endpoints: resource.field('cluster_endpoints'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
    },
    route53recoverycontrolconfig_control_panel(name, block): {
      local resource = blockType.resource('aws_route53recoverycontrolconfig_control_panel', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster_arn: build.template(block.cluster_arn),
        default_control_panel: build.template(std.get(block, 'default_control_panel', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        routing_control_count: build.template(std.get(block, 'routing_control_count', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      arn: resource.field('arn'),
      cluster_arn: resource.field('cluster_arn'),
      default_control_panel: resource.field('default_control_panel'),
      id: resource.field('id'),
      name: resource.field('name'),
      routing_control_count: resource.field('routing_control_count'),
      status: resource.field('status'),
    },
    route53recoverycontrolconfig_routing_control(name, block): {
      local resource = blockType.resource('aws_route53recoverycontrolconfig_routing_control', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster_arn: build.template(block.cluster_arn),
        control_panel_arn: build.template(std.get(block, 'control_panel_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
      }),
      arn: resource.field('arn'),
      cluster_arn: resource.field('cluster_arn'),
      control_panel_arn: resource.field('control_panel_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
    },
    route53recoverycontrolconfig_safety_rule(name, block): {
      local resource = blockType.resource('aws_route53recoverycontrolconfig_safety_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        asserted_controls: build.template(std.get(block, 'asserted_controls', null)),
        control_panel_arn: build.template(block.control_panel_arn),
        gating_controls: build.template(std.get(block, 'gating_controls', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        target_controls: build.template(std.get(block, 'target_controls', null)),
        wait_period_ms: build.template(block.wait_period_ms),
      }),
      arn: resource.field('arn'),
      asserted_controls: resource.field('asserted_controls'),
      control_panel_arn: resource.field('control_panel_arn'),
      gating_controls: resource.field('gating_controls'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
      target_controls: resource.field('target_controls'),
      wait_period_ms: resource.field('wait_period_ms'),
    },
    route53recoveryreadiness_cell(name, block): {
      local resource = blockType.resource('aws_route53recoveryreadiness_cell', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cell_name: build.template(block.cell_name),
        cells: build.template(std.get(block, 'cells', null)),
        id: build.template(std.get(block, 'id', null)),
        parent_readiness_scopes: build.template(std.get(block, 'parent_readiness_scopes', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      cell_name: resource.field('cell_name'),
      cells: resource.field('cells'),
      id: resource.field('id'),
      parent_readiness_scopes: resource.field('parent_readiness_scopes'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    route53recoveryreadiness_readiness_check(name, block): {
      local resource = blockType.resource('aws_route53recoveryreadiness_readiness_check', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        readiness_check_name: build.template(block.readiness_check_name),
        resource_set_name: build.template(block.resource_set_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      readiness_check_name: resource.field('readiness_check_name'),
      resource_set_name: resource.field('resource_set_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    route53recoveryreadiness_recovery_group(name, block): {
      local resource = blockType.resource('aws_route53recoveryreadiness_recovery_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cells: build.template(std.get(block, 'cells', null)),
        id: build.template(std.get(block, 'id', null)),
        recovery_group_name: build.template(block.recovery_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      cells: resource.field('cells'),
      id: resource.field('id'),
      recovery_group_name: resource.field('recovery_group_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    route53recoveryreadiness_resource_set(name, block): {
      local resource = blockType.resource('aws_route53recoveryreadiness_resource_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        resource_set_name: build.template(block.resource_set_name),
        resource_set_type: build.template(block.resource_set_type),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      resource_set_name: resource.field('resource_set_name'),
      resource_set_type: resource.field('resource_set_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    route_table(name, block): {
      local resource = blockType.resource('aws_route_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        propagating_vgws: build.template(std.get(block, 'propagating_vgws', null)),
        route: build.template(std.get(block, 'route', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      propagating_vgws: resource.field('propagating_vgws'),
      route: resource.field('route'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    route_table_association(name, block): {
      local resource = blockType.resource('aws_route_table_association', name),
      _: resource._(block, {
        gateway_id: build.template(std.get(block, 'gateway_id', null)),
        id: build.template(std.get(block, 'id', null)),
        route_table_id: build.template(block.route_table_id),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
      }),
      gateway_id: resource.field('gateway_id'),
      id: resource.field('id'),
      route_table_id: resource.field('route_table_id'),
      subnet_id: resource.field('subnet_id'),
    },
    rum_app_monitor(name, block): {
      local resource = blockType.resource('aws_rum_app_monitor', name),
      _: resource._(block, {
        app_monitor_id: build.template(std.get(block, 'app_monitor_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        cw_log_enabled: build.template(std.get(block, 'cw_log_enabled', null)),
        cw_log_group: build.template(std.get(block, 'cw_log_group', null)),
        domain: build.template(block.domain),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      app_monitor_id: resource.field('app_monitor_id'),
      arn: resource.field('arn'),
      cw_log_enabled: resource.field('cw_log_enabled'),
      cw_log_group: resource.field('cw_log_group'),
      domain: resource.field('domain'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    rum_metrics_destination(name, block): {
      local resource = blockType.resource('aws_rum_metrics_destination', name),
      _: resource._(block, {
        app_monitor_name: build.template(block.app_monitor_name),
        destination: build.template(block.destination),
        destination_arn: build.template(std.get(block, 'destination_arn', null)),
        iam_role_arn: build.template(std.get(block, 'iam_role_arn', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      app_monitor_name: resource.field('app_monitor_name'),
      destination: resource.field('destination'),
      destination_arn: resource.field('destination_arn'),
      iam_role_arn: resource.field('iam_role_arn'),
      id: resource.field('id'),
    },
    s3_access_point(name, block): {
      local resource = blockType.resource('aws_s3_access_point', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        alias: build.template(std.get(block, 'alias', null)),
        arn: build.template(std.get(block, 'arn', null)),
        bucket: build.template(block.bucket),
        bucket_account_id: build.template(std.get(block, 'bucket_account_id', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        endpoints: build.template(std.get(block, 'endpoints', null)),
        has_public_access_policy: build.template(std.get(block, 'has_public_access_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_origin: build.template(std.get(block, 'network_origin', null)),
        policy: build.template(std.get(block, 'policy', null)),
      }),
      account_id: resource.field('account_id'),
      alias: resource.field('alias'),
      arn: resource.field('arn'),
      bucket: resource.field('bucket'),
      bucket_account_id: resource.field('bucket_account_id'),
      domain_name: resource.field('domain_name'),
      endpoints: resource.field('endpoints'),
      has_public_access_policy: resource.field('has_public_access_policy'),
      id: resource.field('id'),
      name: resource.field('name'),
      network_origin: resource.field('network_origin'),
      policy: resource.field('policy'),
    },
    s3_account_public_access_block(name, block): {
      local resource = blockType.resource('aws_s3_account_public_access_block', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        block_public_acls: build.template(std.get(block, 'block_public_acls', null)),
        block_public_policy: build.template(std.get(block, 'block_public_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_public_acls: build.template(std.get(block, 'ignore_public_acls', null)),
        restrict_public_buckets: build.template(std.get(block, 'restrict_public_buckets', null)),
      }),
      account_id: resource.field('account_id'),
      block_public_acls: resource.field('block_public_acls'),
      block_public_policy: resource.field('block_public_policy'),
      id: resource.field('id'),
      ignore_public_acls: resource.field('ignore_public_acls'),
      restrict_public_buckets: resource.field('restrict_public_buckets'),
    },
    s3_bucket(name, block): {
      local resource = blockType.resource('aws_s3_bucket', name),
      _: resource._(block, {
        acceleration_status: build.template(std.get(block, 'acceleration_status', null)),
        acl: build.template(std.get(block, 'acl', null)),
        arn: build.template(std.get(block, 'arn', null)),
        bucket: build.template(std.get(block, 'bucket', null)),
        bucket_domain_name: build.template(std.get(block, 'bucket_domain_name', null)),
        bucket_prefix: build.template(std.get(block, 'bucket_prefix', null)),
        bucket_regional_domain_name: build.template(std.get(block, 'bucket_regional_domain_name', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        id: build.template(std.get(block, 'id', null)),
        object_lock_enabled: build.template(std.get(block, 'object_lock_enabled', null)),
        policy: build.template(std.get(block, 'policy', null)),
        region: build.template(std.get(block, 'region', null)),
        request_payer: build.template(std.get(block, 'request_payer', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        website_domain: build.template(std.get(block, 'website_domain', null)),
        website_endpoint: build.template(std.get(block, 'website_endpoint', null)),
      }),
      acceleration_status: resource.field('acceleration_status'),
      acl: resource.field('acl'),
      arn: resource.field('arn'),
      bucket: resource.field('bucket'),
      bucket_domain_name: resource.field('bucket_domain_name'),
      bucket_prefix: resource.field('bucket_prefix'),
      bucket_regional_domain_name: resource.field('bucket_regional_domain_name'),
      force_destroy: resource.field('force_destroy'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      id: resource.field('id'),
      object_lock_enabled: resource.field('object_lock_enabled'),
      policy: resource.field('policy'),
      region: resource.field('region'),
      request_payer: resource.field('request_payer'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      website_domain: resource.field('website_domain'),
      website_endpoint: resource.field('website_endpoint'),
    },
    s3_bucket_accelerate_configuration(name, block): {
      local resource = blockType.resource('aws_s3_bucket_accelerate_configuration', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null)),
        id: build.template(std.get(block, 'id', null)),
        status: build.template(block.status),
      }),
      bucket: resource.field('bucket'),
      expected_bucket_owner: resource.field('expected_bucket_owner'),
      id: resource.field('id'),
      status: resource.field('status'),
    },
    s3_bucket_acl(name, block): {
      local resource = blockType.resource('aws_s3_bucket_acl', name),
      _: resource._(block, {
        acl: build.template(std.get(block, 'acl', null)),
        bucket: build.template(block.bucket),
        expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      acl: resource.field('acl'),
      bucket: resource.field('bucket'),
      expected_bucket_owner: resource.field('expected_bucket_owner'),
      id: resource.field('id'),
    },
    s3_bucket_analytics_configuration(name, block): {
      local resource = blockType.resource('aws_s3_bucket_analytics_configuration', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      bucket: resource.field('bucket'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    s3_bucket_cors_configuration(name, block): {
      local resource = blockType.resource('aws_s3_bucket_cors_configuration', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      bucket: resource.field('bucket'),
      expected_bucket_owner: resource.field('expected_bucket_owner'),
      id: resource.field('id'),
    },
    s3_bucket_intelligent_tiering_configuration(name, block): {
      local resource = blockType.resource('aws_s3_bucket_intelligent_tiering_configuration', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
      }),
      bucket: resource.field('bucket'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
    },
    s3_bucket_inventory(name, block): {
      local resource = blockType.resource('aws_s3_bucket_inventory', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        included_object_versions: build.template(block.included_object_versions),
        name: build.template(block.name),
        optional_fields: build.template(std.get(block, 'optional_fields', null)),
      }),
      bucket: resource.field('bucket'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      included_object_versions: resource.field('included_object_versions'),
      name: resource.field('name'),
      optional_fields: resource.field('optional_fields'),
    },
    s3_bucket_lifecycle_configuration(name, block): {
      local resource = blockType.resource('aws_s3_bucket_lifecycle_configuration', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null)),
        id: build.template(std.get(block, 'id', null)),
        transition_default_minimum_object_size: build.template(std.get(block, 'transition_default_minimum_object_size', null)),
      }),
      bucket: resource.field('bucket'),
      expected_bucket_owner: resource.field('expected_bucket_owner'),
      id: resource.field('id'),
      transition_default_minimum_object_size: resource.field('transition_default_minimum_object_size'),
    },
    s3_bucket_logging(name, block): {
      local resource = blockType.resource('aws_s3_bucket_logging', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null)),
        id: build.template(std.get(block, 'id', null)),
        target_bucket: build.template(block.target_bucket),
        target_prefix: build.template(block.target_prefix),
      }),
      bucket: resource.field('bucket'),
      expected_bucket_owner: resource.field('expected_bucket_owner'),
      id: resource.field('id'),
      target_bucket: resource.field('target_bucket'),
      target_prefix: resource.field('target_prefix'),
    },
    s3_bucket_metric(name, block): {
      local resource = blockType.resource('aws_s3_bucket_metric', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      bucket: resource.field('bucket'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    s3_bucket_notification(name, block): {
      local resource = blockType.resource('aws_s3_bucket_notification', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        eventbridge: build.template(std.get(block, 'eventbridge', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      bucket: resource.field('bucket'),
      eventbridge: resource.field('eventbridge'),
      id: resource.field('id'),
    },
    s3_bucket_object(name, block): {
      local resource = blockType.resource('aws_s3_bucket_object', name),
      _: resource._(block, {
        acl: build.template(std.get(block, 'acl', null)),
        arn: build.template(std.get(block, 'arn', null)),
        bucket: build.template(block.bucket),
        bucket_key_enabled: build.template(std.get(block, 'bucket_key_enabled', null)),
        cache_control: build.template(std.get(block, 'cache_control', null)),
        content: build.template(std.get(block, 'content', null)),
        content_base64: build.template(std.get(block, 'content_base64', null)),
        content_disposition: build.template(std.get(block, 'content_disposition', null)),
        content_encoding: build.template(std.get(block, 'content_encoding', null)),
        content_language: build.template(std.get(block, 'content_language', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        etag: build.template(std.get(block, 'etag', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        object_lock_legal_hold_status: build.template(std.get(block, 'object_lock_legal_hold_status', null)),
        object_lock_mode: build.template(std.get(block, 'object_lock_mode', null)),
        object_lock_retain_until_date: build.template(std.get(block, 'object_lock_retain_until_date', null)),
        server_side_encryption: build.template(std.get(block, 'server_side_encryption', null)),
        source: build.template(std.get(block, 'source', null)),
        source_hash: build.template(std.get(block, 'source_hash', null)),
        storage_class: build.template(std.get(block, 'storage_class', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
        website_redirect: build.template(std.get(block, 'website_redirect', null)),
      }),
      acl: resource.field('acl'),
      arn: resource.field('arn'),
      bucket: resource.field('bucket'),
      bucket_key_enabled: resource.field('bucket_key_enabled'),
      cache_control: resource.field('cache_control'),
      content: resource.field('content'),
      content_base64: resource.field('content_base64'),
      content_disposition: resource.field('content_disposition'),
      content_encoding: resource.field('content_encoding'),
      content_language: resource.field('content_language'),
      content_type: resource.field('content_type'),
      etag: resource.field('etag'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      key: resource.field('key'),
      kms_key_id: resource.field('kms_key_id'),
      metadata: resource.field('metadata'),
      object_lock_legal_hold_status: resource.field('object_lock_legal_hold_status'),
      object_lock_mode: resource.field('object_lock_mode'),
      object_lock_retain_until_date: resource.field('object_lock_retain_until_date'),
      server_side_encryption: resource.field('server_side_encryption'),
      source: resource.field('source'),
      source_hash: resource.field('source_hash'),
      storage_class: resource.field('storage_class'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version_id: resource.field('version_id'),
      website_redirect: resource.field('website_redirect'),
    },
    s3_bucket_object_lock_configuration(name, block): {
      local resource = blockType.resource('aws_s3_bucket_object_lock_configuration', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null)),
        id: build.template(std.get(block, 'id', null)),
        object_lock_enabled: build.template(std.get(block, 'object_lock_enabled', null)),
        token: build.template(std.get(block, 'token', null)),
      }),
      bucket: resource.field('bucket'),
      expected_bucket_owner: resource.field('expected_bucket_owner'),
      id: resource.field('id'),
      object_lock_enabled: resource.field('object_lock_enabled'),
      token: resource.field('token'),
    },
    s3_bucket_ownership_controls(name, block): {
      local resource = blockType.resource('aws_s3_bucket_ownership_controls', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        id: build.template(std.get(block, 'id', null)),
      }),
      bucket: resource.field('bucket'),
      id: resource.field('id'),
    },
    s3_bucket_policy(name, block): {
      local resource = blockType.resource('aws_s3_bucket_policy', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
      }),
      bucket: resource.field('bucket'),
      id: resource.field('id'),
      policy: resource.field('policy'),
    },
    s3_bucket_public_access_block(name, block): {
      local resource = blockType.resource('aws_s3_bucket_public_access_block', name),
      _: resource._(block, {
        block_public_acls: build.template(std.get(block, 'block_public_acls', null)),
        block_public_policy: build.template(std.get(block, 'block_public_policy', null)),
        bucket: build.template(block.bucket),
        id: build.template(std.get(block, 'id', null)),
        ignore_public_acls: build.template(std.get(block, 'ignore_public_acls', null)),
        restrict_public_buckets: build.template(std.get(block, 'restrict_public_buckets', null)),
      }),
      block_public_acls: resource.field('block_public_acls'),
      block_public_policy: resource.field('block_public_policy'),
      bucket: resource.field('bucket'),
      id: resource.field('id'),
      ignore_public_acls: resource.field('ignore_public_acls'),
      restrict_public_buckets: resource.field('restrict_public_buckets'),
    },
    s3_bucket_replication_configuration(name, block): {
      local resource = blockType.resource('aws_s3_bucket_replication_configuration', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        id: build.template(std.get(block, 'id', null)),
        role: build.template(block.role),
        token: build.template(std.get(block, 'token', null)),
      }),
      bucket: resource.field('bucket'),
      id: resource.field('id'),
      role: resource.field('role'),
      token: resource.field('token'),
    },
    s3_bucket_request_payment_configuration(name, block): {
      local resource = blockType.resource('aws_s3_bucket_request_payment_configuration', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null)),
        id: build.template(std.get(block, 'id', null)),
        payer: build.template(block.payer),
      }),
      bucket: resource.field('bucket'),
      expected_bucket_owner: resource.field('expected_bucket_owner'),
      id: resource.field('id'),
      payer: resource.field('payer'),
    },
    s3_bucket_server_side_encryption_configuration(name, block): {
      local resource = blockType.resource('aws_s3_bucket_server_side_encryption_configuration', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      bucket: resource.field('bucket'),
      expected_bucket_owner: resource.field('expected_bucket_owner'),
      id: resource.field('id'),
    },
    s3_bucket_versioning(name, block): {
      local resource = blockType.resource('aws_s3_bucket_versioning', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null)),
        id: build.template(std.get(block, 'id', null)),
        mfa: build.template(std.get(block, 'mfa', null)),
      }),
      bucket: resource.field('bucket'),
      expected_bucket_owner: resource.field('expected_bucket_owner'),
      id: resource.field('id'),
      mfa: resource.field('mfa'),
    },
    s3_bucket_website_configuration(name, block): {
      local resource = blockType.resource('aws_s3_bucket_website_configuration', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null)),
        id: build.template(std.get(block, 'id', null)),
        routing_rules: build.template(std.get(block, 'routing_rules', null)),
        website_domain: build.template(std.get(block, 'website_domain', null)),
        website_endpoint: build.template(std.get(block, 'website_endpoint', null)),
      }),
      bucket: resource.field('bucket'),
      expected_bucket_owner: resource.field('expected_bucket_owner'),
      id: resource.field('id'),
      routing_rules: resource.field('routing_rules'),
      website_domain: resource.field('website_domain'),
      website_endpoint: resource.field('website_endpoint'),
    },
    s3_directory_bucket(name, block): {
      local resource = blockType.resource('aws_s3_directory_bucket', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bucket: build.template(block.bucket),
        data_redundancy: build.template(std.get(block, 'data_redundancy', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      bucket: resource.field('bucket'),
      data_redundancy: resource.field('data_redundancy'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      type: resource.field('type'),
    },
    s3_object(name, block): {
      local resource = blockType.resource('aws_s3_object', name),
      _: resource._(block, {
        acl: build.template(std.get(block, 'acl', null)),
        arn: build.template(std.get(block, 'arn', null)),
        bucket: build.template(block.bucket),
        bucket_key_enabled: build.template(std.get(block, 'bucket_key_enabled', null)),
        cache_control: build.template(std.get(block, 'cache_control', null)),
        checksum_algorithm: build.template(std.get(block, 'checksum_algorithm', null)),
        checksum_crc32: build.template(std.get(block, 'checksum_crc32', null)),
        checksum_crc32c: build.template(std.get(block, 'checksum_crc32c', null)),
        checksum_sha1: build.template(std.get(block, 'checksum_sha1', null)),
        checksum_sha256: build.template(std.get(block, 'checksum_sha256', null)),
        content: build.template(std.get(block, 'content', null)),
        content_base64: build.template(std.get(block, 'content_base64', null)),
        content_disposition: build.template(std.get(block, 'content_disposition', null)),
        content_encoding: build.template(std.get(block, 'content_encoding', null)),
        content_language: build.template(std.get(block, 'content_language', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        etag: build.template(std.get(block, 'etag', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        object_lock_legal_hold_status: build.template(std.get(block, 'object_lock_legal_hold_status', null)),
        object_lock_mode: build.template(std.get(block, 'object_lock_mode', null)),
        object_lock_retain_until_date: build.template(std.get(block, 'object_lock_retain_until_date', null)),
        server_side_encryption: build.template(std.get(block, 'server_side_encryption', null)),
        source: build.template(std.get(block, 'source', null)),
        source_hash: build.template(std.get(block, 'source_hash', null)),
        storage_class: build.template(std.get(block, 'storage_class', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
        website_redirect: build.template(std.get(block, 'website_redirect', null)),
      }),
      acl: resource.field('acl'),
      arn: resource.field('arn'),
      bucket: resource.field('bucket'),
      bucket_key_enabled: resource.field('bucket_key_enabled'),
      cache_control: resource.field('cache_control'),
      checksum_algorithm: resource.field('checksum_algorithm'),
      checksum_crc32: resource.field('checksum_crc32'),
      checksum_crc32c: resource.field('checksum_crc32c'),
      checksum_sha1: resource.field('checksum_sha1'),
      checksum_sha256: resource.field('checksum_sha256'),
      content: resource.field('content'),
      content_base64: resource.field('content_base64'),
      content_disposition: resource.field('content_disposition'),
      content_encoding: resource.field('content_encoding'),
      content_language: resource.field('content_language'),
      content_type: resource.field('content_type'),
      etag: resource.field('etag'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      key: resource.field('key'),
      kms_key_id: resource.field('kms_key_id'),
      metadata: resource.field('metadata'),
      object_lock_legal_hold_status: resource.field('object_lock_legal_hold_status'),
      object_lock_mode: resource.field('object_lock_mode'),
      object_lock_retain_until_date: resource.field('object_lock_retain_until_date'),
      server_side_encryption: resource.field('server_side_encryption'),
      source: resource.field('source'),
      source_hash: resource.field('source_hash'),
      storage_class: resource.field('storage_class'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version_id: resource.field('version_id'),
      website_redirect: resource.field('website_redirect'),
    },
    s3_object_copy(name, block): {
      local resource = blockType.resource('aws_s3_object_copy', name),
      _: resource._(block, {
        acl: build.template(std.get(block, 'acl', null)),
        arn: build.template(std.get(block, 'arn', null)),
        bucket: build.template(block.bucket),
        bucket_key_enabled: build.template(std.get(block, 'bucket_key_enabled', null)),
        cache_control: build.template(std.get(block, 'cache_control', null)),
        checksum_algorithm: build.template(std.get(block, 'checksum_algorithm', null)),
        checksum_crc32: build.template(std.get(block, 'checksum_crc32', null)),
        checksum_crc32c: build.template(std.get(block, 'checksum_crc32c', null)),
        checksum_sha1: build.template(std.get(block, 'checksum_sha1', null)),
        checksum_sha256: build.template(std.get(block, 'checksum_sha256', null)),
        content_disposition: build.template(std.get(block, 'content_disposition', null)),
        content_encoding: build.template(std.get(block, 'content_encoding', null)),
        content_language: build.template(std.get(block, 'content_language', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        copy_if_match: build.template(std.get(block, 'copy_if_match', null)),
        copy_if_modified_since: build.template(std.get(block, 'copy_if_modified_since', null)),
        copy_if_none_match: build.template(std.get(block, 'copy_if_none_match', null)),
        copy_if_unmodified_since: build.template(std.get(block, 'copy_if_unmodified_since', null)),
        customer_algorithm: build.template(std.get(block, 'customer_algorithm', null)),
        customer_key: build.template(std.get(block, 'customer_key', null)),
        customer_key_md5: build.template(std.get(block, 'customer_key_md5', null)),
        etag: build.template(std.get(block, 'etag', null)),
        expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null)),
        expected_source_bucket_owner: build.template(std.get(block, 'expected_source_bucket_owner', null)),
        expiration: build.template(std.get(block, 'expiration', null)),
        expires: build.template(std.get(block, 'expires', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        kms_encryption_context: build.template(std.get(block, 'kms_encryption_context', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        metadata_directive: build.template(std.get(block, 'metadata_directive', null)),
        object_lock_legal_hold_status: build.template(std.get(block, 'object_lock_legal_hold_status', null)),
        object_lock_mode: build.template(std.get(block, 'object_lock_mode', null)),
        object_lock_retain_until_date: build.template(std.get(block, 'object_lock_retain_until_date', null)),
        request_charged: build.template(std.get(block, 'request_charged', null)),
        request_payer: build.template(std.get(block, 'request_payer', null)),
        server_side_encryption: build.template(std.get(block, 'server_side_encryption', null)),
        source: build.template(block.source),
        source_customer_algorithm: build.template(std.get(block, 'source_customer_algorithm', null)),
        source_customer_key: build.template(std.get(block, 'source_customer_key', null)),
        source_customer_key_md5: build.template(std.get(block, 'source_customer_key_md5', null)),
        source_version_id: build.template(std.get(block, 'source_version_id', null)),
        storage_class: build.template(std.get(block, 'storage_class', null)),
        tagging_directive: build.template(std.get(block, 'tagging_directive', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
        website_redirect: build.template(std.get(block, 'website_redirect', null)),
      }),
      acl: resource.field('acl'),
      arn: resource.field('arn'),
      bucket: resource.field('bucket'),
      bucket_key_enabled: resource.field('bucket_key_enabled'),
      cache_control: resource.field('cache_control'),
      checksum_algorithm: resource.field('checksum_algorithm'),
      checksum_crc32: resource.field('checksum_crc32'),
      checksum_crc32c: resource.field('checksum_crc32c'),
      checksum_sha1: resource.field('checksum_sha1'),
      checksum_sha256: resource.field('checksum_sha256'),
      content_disposition: resource.field('content_disposition'),
      content_encoding: resource.field('content_encoding'),
      content_language: resource.field('content_language'),
      content_type: resource.field('content_type'),
      copy_if_match: resource.field('copy_if_match'),
      copy_if_modified_since: resource.field('copy_if_modified_since'),
      copy_if_none_match: resource.field('copy_if_none_match'),
      copy_if_unmodified_since: resource.field('copy_if_unmodified_since'),
      customer_algorithm: resource.field('customer_algorithm'),
      customer_key: resource.field('customer_key'),
      customer_key_md5: resource.field('customer_key_md5'),
      etag: resource.field('etag'),
      expected_bucket_owner: resource.field('expected_bucket_owner'),
      expected_source_bucket_owner: resource.field('expected_source_bucket_owner'),
      expiration: resource.field('expiration'),
      expires: resource.field('expires'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      key: resource.field('key'),
      kms_encryption_context: resource.field('kms_encryption_context'),
      kms_key_id: resource.field('kms_key_id'),
      last_modified: resource.field('last_modified'),
      metadata: resource.field('metadata'),
      metadata_directive: resource.field('metadata_directive'),
      object_lock_legal_hold_status: resource.field('object_lock_legal_hold_status'),
      object_lock_mode: resource.field('object_lock_mode'),
      object_lock_retain_until_date: resource.field('object_lock_retain_until_date'),
      request_charged: resource.field('request_charged'),
      request_payer: resource.field('request_payer'),
      server_side_encryption: resource.field('server_side_encryption'),
      source: resource.field('source'),
      source_customer_algorithm: resource.field('source_customer_algorithm'),
      source_customer_key: resource.field('source_customer_key'),
      source_customer_key_md5: resource.field('source_customer_key_md5'),
      source_version_id: resource.field('source_version_id'),
      storage_class: resource.field('storage_class'),
      tagging_directive: resource.field('tagging_directive'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version_id: resource.field('version_id'),
      website_redirect: resource.field('website_redirect'),
    },
    s3control_access_grant(name, block): {
      local resource = blockType.resource('aws_s3control_access_grant', name),
      _: resource._(block, {
        access_grant_arn: build.template(std.get(block, 'access_grant_arn', null)),
        access_grant_id: build.template(std.get(block, 'access_grant_id', null)),
        access_grants_location_id: build.template(block.access_grants_location_id),
        account_id: build.template(std.get(block, 'account_id', null)),
        grant_scope: build.template(std.get(block, 'grant_scope', null)),
        id: build.template(std.get(block, 'id', null)),
        permission: build.template(block.permission),
        s3_prefix_type: build.template(std.get(block, 's3_prefix_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      access_grant_arn: resource.field('access_grant_arn'),
      access_grant_id: resource.field('access_grant_id'),
      access_grants_location_id: resource.field('access_grants_location_id'),
      account_id: resource.field('account_id'),
      grant_scope: resource.field('grant_scope'),
      id: resource.field('id'),
      permission: resource.field('permission'),
      s3_prefix_type: resource.field('s3_prefix_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    s3control_access_grants_instance(name, block): {
      local resource = blockType.resource('aws_s3control_access_grants_instance', name),
      _: resource._(block, {
        access_grants_instance_arn: build.template(std.get(block, 'access_grants_instance_arn', null)),
        access_grants_instance_id: build.template(std.get(block, 'access_grants_instance_id', null)),
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_center_application_arn: build.template(std.get(block, 'identity_center_application_arn', null)),
        identity_center_arn: build.template(std.get(block, 'identity_center_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      access_grants_instance_arn: resource.field('access_grants_instance_arn'),
      access_grants_instance_id: resource.field('access_grants_instance_id'),
      account_id: resource.field('account_id'),
      id: resource.field('id'),
      identity_center_application_arn: resource.field('identity_center_application_arn'),
      identity_center_arn: resource.field('identity_center_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    s3control_access_grants_instance_resource_policy(name, block): {
      local resource = blockType.resource('aws_s3control_access_grants_instance_resource_policy', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
      }),
      account_id: resource.field('account_id'),
      id: resource.field('id'),
      policy: resource.field('policy'),
    },
    s3control_access_grants_location(name, block): {
      local resource = blockType.resource('aws_s3control_access_grants_location', name),
      _: resource._(block, {
        access_grants_location_arn: build.template(std.get(block, 'access_grants_location_arn', null)),
        access_grants_location_id: build.template(std.get(block, 'access_grants_location_id', null)),
        account_id: build.template(std.get(block, 'account_id', null)),
        iam_role_arn: build.template(block.iam_role_arn),
        id: build.template(std.get(block, 'id', null)),
        location_scope: build.template(block.location_scope),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      access_grants_location_arn: resource.field('access_grants_location_arn'),
      access_grants_location_id: resource.field('access_grants_location_id'),
      account_id: resource.field('account_id'),
      iam_role_arn: resource.field('iam_role_arn'),
      id: resource.field('id'),
      location_scope: resource.field('location_scope'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    s3control_access_point_policy(name, block): {
      local resource = blockType.resource('aws_s3control_access_point_policy', name),
      _: resource._(block, {
        access_point_arn: build.template(block.access_point_arn),
        has_public_access_policy: build.template(std.get(block, 'has_public_access_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
      }),
      access_point_arn: resource.field('access_point_arn'),
      has_public_access_policy: resource.field('has_public_access_policy'),
      id: resource.field('id'),
      policy: resource.field('policy'),
    },
    s3control_bucket(name, block): {
      local resource = blockType.resource('aws_s3control_bucket', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bucket: build.template(block.bucket),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        id: build.template(std.get(block, 'id', null)),
        outpost_id: build.template(block.outpost_id),
        public_access_block_enabled: build.template(std.get(block, 'public_access_block_enabled', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      bucket: resource.field('bucket'),
      creation_date: resource.field('creation_date'),
      id: resource.field('id'),
      outpost_id: resource.field('outpost_id'),
      public_access_block_enabled: resource.field('public_access_block_enabled'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    s3control_bucket_lifecycle_configuration(name, block): {
      local resource = blockType.resource('aws_s3control_bucket_lifecycle_configuration', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        id: build.template(std.get(block, 'id', null)),
      }),
      bucket: resource.field('bucket'),
      id: resource.field('id'),
    },
    s3control_bucket_policy(name, block): {
      local resource = blockType.resource('aws_s3control_bucket_policy', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
      }),
      bucket: resource.field('bucket'),
      id: resource.field('id'),
      policy: resource.field('policy'),
    },
    s3control_multi_region_access_point(name, block): {
      local resource = blockType.resource('aws_s3control_multi_region_access_point', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        alias: build.template(std.get(block, 'alias', null)),
        arn: build.template(std.get(block, 'arn', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        id: build.template(std.get(block, 'id', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      account_id: resource.field('account_id'),
      alias: resource.field('alias'),
      arn: resource.field('arn'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      status: resource.field('status'),
    },
    s3control_multi_region_access_point_policy(name, block): {
      local resource = blockType.resource('aws_s3control_multi_region_access_point_policy', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        established: build.template(std.get(block, 'established', null)),
        id: build.template(std.get(block, 'id', null)),
        proposed: build.template(std.get(block, 'proposed', null)),
      }),
      account_id: resource.field('account_id'),
      established: resource.field('established'),
      id: resource.field('id'),
      proposed: resource.field('proposed'),
    },
    s3control_object_lambda_access_point(name, block): {
      local resource = blockType.resource('aws_s3control_object_lambda_access_point', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        alias: build.template(std.get(block, 'alias', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      account_id: resource.field('account_id'),
      alias: resource.field('alias'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    s3control_object_lambda_access_point_policy(name, block): {
      local resource = blockType.resource('aws_s3control_object_lambda_access_point_policy', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        has_public_access_policy: build.template(std.get(block, 'has_public_access_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy: build.template(block.policy),
      }),
      account_id: resource.field('account_id'),
      has_public_access_policy: resource.field('has_public_access_policy'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy: resource.field('policy'),
    },
    s3control_storage_lens_configuration(name, block): {
      local resource = blockType.resource('aws_s3control_storage_lens_configuration', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        config_id: build.template(block.config_id),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      account_id: resource.field('account_id'),
      arn: resource.field('arn'),
      config_id: resource.field('config_id'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    s3outposts_endpoint(name, block): {
      local resource = blockType.resource('aws_s3outposts_endpoint', name),
      _: resource._(block, {
        access_type: build.template(std.get(block, 'access_type', null)),
        arn: build.template(std.get(block, 'arn', null)),
        cidr_block: build.template(std.get(block, 'cidr_block', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null)),
        id: build.template(std.get(block, 'id', null)),
        network_interfaces: build.template(std.get(block, 'network_interfaces', null)),
        outpost_id: build.template(block.outpost_id),
        security_group_id: build.template(block.security_group_id),
        subnet_id: build.template(block.subnet_id),
      }),
      access_type: resource.field('access_type'),
      arn: resource.field('arn'),
      cidr_block: resource.field('cidr_block'),
      creation_time: resource.field('creation_time'),
      customer_owned_ipv4_pool: resource.field('customer_owned_ipv4_pool'),
      id: resource.field('id'),
      network_interfaces: resource.field('network_interfaces'),
      outpost_id: resource.field('outpost_id'),
      security_group_id: resource.field('security_group_id'),
      subnet_id: resource.field('subnet_id'),
    },
    sagemaker_app(name, block): {
      local resource = blockType.resource('aws_sagemaker_app', name),
      _: resource._(block, {
        app_name: build.template(block.app_name),
        app_type: build.template(block.app_type),
        arn: build.template(std.get(block, 'arn', null)),
        domain_id: build.template(block.domain_id),
        id: build.template(std.get(block, 'id', null)),
        space_name: build.template(std.get(block, 'space_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_profile_name: build.template(std.get(block, 'user_profile_name', null)),
      }),
      app_name: resource.field('app_name'),
      app_type: resource.field('app_type'),
      arn: resource.field('arn'),
      domain_id: resource.field('domain_id'),
      id: resource.field('id'),
      space_name: resource.field('space_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_profile_name: resource.field('user_profile_name'),
    },
    sagemaker_app_image_config(name, block): {
      local resource = blockType.resource('aws_sagemaker_app_image_config', name),
      _: resource._(block, {
        app_image_config_name: build.template(block.app_image_config_name),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      app_image_config_name: resource.field('app_image_config_name'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_code_repository(name, block): {
      local resource = blockType.resource('aws_sagemaker_code_repository', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        code_repository_name: build.template(block.code_repository_name),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      code_repository_name: resource.field('code_repository_name'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_data_quality_job_definition(name, block): {
      local resource = blockType.resource('aws_sagemaker_data_quality_job_definition', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_device(name, block): {
      local resource = blockType.resource('aws_sagemaker_device', name),
      _: resource._(block, {
        agent_version: build.template(std.get(block, 'agent_version', null)),
        arn: build.template(std.get(block, 'arn', null)),
        device_fleet_name: build.template(block.device_fleet_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      agent_version: resource.field('agent_version'),
      arn: resource.field('arn'),
      device_fleet_name: resource.field('device_fleet_name'),
      id: resource.field('id'),
    },
    sagemaker_device_fleet(name, block): {
      local resource = blockType.resource('aws_sagemaker_device_fleet', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        device_fleet_name: build.template(block.device_fleet_name),
        enable_iot_role_alias: build.template(std.get(block, 'enable_iot_role_alias', null)),
        id: build.template(std.get(block, 'id', null)),
        iot_role_alias: build.template(std.get(block, 'iot_role_alias', null)),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      device_fleet_name: resource.field('device_fleet_name'),
      enable_iot_role_alias: resource.field('enable_iot_role_alias'),
      id: resource.field('id'),
      iot_role_alias: resource.field('iot_role_alias'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_domain(name, block): {
      local resource = blockType.resource('aws_sagemaker_domain', name),
      _: resource._(block, {
        app_network_access_type: build.template(std.get(block, 'app_network_access_type', null)),
        app_security_group_management: build.template(std.get(block, 'app_security_group_management', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auth_mode: build.template(block.auth_mode),
        domain_name: build.template(block.domain_name),
        home_efs_file_system_id: build.template(std.get(block, 'home_efs_file_system_id', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        security_group_id_for_domain_boundary: build.template(std.get(block, 'security_group_id_for_domain_boundary', null)),
        single_sign_on_application_arn: build.template(std.get(block, 'single_sign_on_application_arn', null)),
        single_sign_on_managed_application_instance_id: build.template(std.get(block, 'single_sign_on_managed_application_instance_id', null)),
        subnet_ids: build.template(block.subnet_ids),
        tag_propagation: build.template(std.get(block, 'tag_propagation', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        url: build.template(std.get(block, 'url', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      app_network_access_type: resource.field('app_network_access_type'),
      app_security_group_management: resource.field('app_security_group_management'),
      arn: resource.field('arn'),
      auth_mode: resource.field('auth_mode'),
      domain_name: resource.field('domain_name'),
      home_efs_file_system_id: resource.field('home_efs_file_system_id'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      security_group_id_for_domain_boundary: resource.field('security_group_id_for_domain_boundary'),
      single_sign_on_application_arn: resource.field('single_sign_on_application_arn'),
      single_sign_on_managed_application_instance_id: resource.field('single_sign_on_managed_application_instance_id'),
      subnet_ids: resource.field('subnet_ids'),
      tag_propagation: resource.field('tag_propagation'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      url: resource.field('url'),
      vpc_id: resource.field('vpc_id'),
    },
    sagemaker_endpoint(name, block): {
      local resource = blockType.resource('aws_sagemaker_endpoint', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        endpoint_config_name: build.template(block.endpoint_config_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      endpoint_config_name: resource.field('endpoint_config_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_endpoint_configuration(name, block): {
      local resource = blockType.resource('aws_sagemaker_endpoint_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_feature_group(name, block): {
      local resource = blockType.resource('aws_sagemaker_feature_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        event_time_feature_name: build.template(block.event_time_feature_name),
        feature_group_name: build.template(block.feature_group_name),
        id: build.template(std.get(block, 'id', null)),
        record_identifier_feature_name: build.template(block.record_identifier_feature_name),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      event_time_feature_name: resource.field('event_time_feature_name'),
      feature_group_name: resource.field('feature_group_name'),
      id: resource.field('id'),
      record_identifier_feature_name: resource.field('record_identifier_feature_name'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_flow_definition(name, block): {
      local resource = blockType.resource('aws_sagemaker_flow_definition', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        flow_definition_name: build.template(block.flow_definition_name),
        id: build.template(std.get(block, 'id', null)),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      flow_definition_name: resource.field('flow_definition_name'),
      id: resource.field('id'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_hub(name, block): {
      local resource = blockType.resource('aws_sagemaker_hub', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        hub_description: build.template(block.hub_description),
        hub_display_name: build.template(std.get(block, 'hub_display_name', null)),
        hub_name: build.template(block.hub_name),
        hub_search_keywords: build.template(std.get(block, 'hub_search_keywords', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      hub_description: resource.field('hub_description'),
      hub_display_name: resource.field('hub_display_name'),
      hub_name: resource.field('hub_name'),
      hub_search_keywords: resource.field('hub_search_keywords'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_human_task_ui(name, block): {
      local resource = blockType.resource('aws_sagemaker_human_task_ui', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        human_task_ui_name: build.template(block.human_task_ui_name),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      human_task_ui_name: resource.field('human_task_ui_name'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_image(name, block): {
      local resource = blockType.resource('aws_sagemaker_image', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        image_name: build.template(block.image_name),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      image_name: resource.field('image_name'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_image_version(name, block): {
      local resource = blockType.resource('aws_sagemaker_image_version', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        base_image: build.template(block.base_image),
        container_image: build.template(std.get(block, 'container_image', null)),
        id: build.template(std.get(block, 'id', null)),
        image_arn: build.template(std.get(block, 'image_arn', null)),
        image_name: build.template(block.image_name),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      base_image: resource.field('base_image'),
      container_image: resource.field('container_image'),
      id: resource.field('id'),
      image_arn: resource.field('image_arn'),
      image_name: resource.field('image_name'),
      version: resource.field('version'),
    },
    sagemaker_mlflow_tracking_server(name, block): {
      local resource = blockType.resource('aws_sagemaker_mlflow_tracking_server', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        artifact_store_uri: build.template(block.artifact_store_uri),
        automatic_model_registration: build.template(std.get(block, 'automatic_model_registration', null)),
        id: build.template(std.get(block, 'id', null)),
        mlflow_version: build.template(std.get(block, 'mlflow_version', null)),
        role_arn: build.template(block.role_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tracking_server_name: build.template(block.tracking_server_name),
        tracking_server_size: build.template(std.get(block, 'tracking_server_size', null)),
        tracking_server_url: build.template(std.get(block, 'tracking_server_url', null)),
        weekly_maintenance_window_start: build.template(std.get(block, 'weekly_maintenance_window_start', null)),
      }),
      arn: resource.field('arn'),
      artifact_store_uri: resource.field('artifact_store_uri'),
      automatic_model_registration: resource.field('automatic_model_registration'),
      id: resource.field('id'),
      mlflow_version: resource.field('mlflow_version'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tracking_server_name: resource.field('tracking_server_name'),
      tracking_server_size: resource.field('tracking_server_size'),
      tracking_server_url: resource.field('tracking_server_url'),
      weekly_maintenance_window_start: resource.field('weekly_maintenance_window_start'),
    },
    sagemaker_model(name, block): {
      local resource = blockType.resource('aws_sagemaker_model', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        enable_network_isolation: build.template(std.get(block, 'enable_network_isolation', null)),
        execution_role_arn: build.template(block.execution_role_arn),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      enable_network_isolation: resource.field('enable_network_isolation'),
      execution_role_arn: resource.field('execution_role_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_model_package_group(name, block): {
      local resource = blockType.resource('aws_sagemaker_model_package_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        model_package_group_description: build.template(std.get(block, 'model_package_group_description', null)),
        model_package_group_name: build.template(block.model_package_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      model_package_group_description: resource.field('model_package_group_description'),
      model_package_group_name: resource.field('model_package_group_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_model_package_group_policy(name, block): {
      local resource = blockType.resource('aws_sagemaker_model_package_group_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        model_package_group_name: build.template(block.model_package_group_name),
        resource_policy: build.template(block.resource_policy),
      }),
      id: resource.field('id'),
      model_package_group_name: resource.field('model_package_group_name'),
      resource_policy: resource.field('resource_policy'),
    },
    sagemaker_monitoring_schedule(name, block): {
      local resource = blockType.resource('aws_sagemaker_monitoring_schedule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_notebook_instance(name, block): {
      local resource = blockType.resource('aws_sagemaker_notebook_instance', name),
      _: resource._(block, {
        accelerator_types: build.template(std.get(block, 'accelerator_types', null)),
        additional_code_repositories: build.template(std.get(block, 'additional_code_repositories', null)),
        arn: build.template(std.get(block, 'arn', null)),
        default_code_repository: build.template(std.get(block, 'default_code_repository', null)),
        direct_internet_access: build.template(std.get(block, 'direct_internet_access', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_type: build.template(block.instance_type),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        lifecycle_config_name: build.template(std.get(block, 'lifecycle_config_name', null)),
        name: build.template(block.name),
        network_interface_id: build.template(std.get(block, 'network_interface_id', null)),
        platform_identifier: build.template(std.get(block, 'platform_identifier', null)),
        role_arn: build.template(block.role_arn),
        root_access: build.template(std.get(block, 'root_access', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        url: build.template(std.get(block, 'url', null)),
        volume_size: build.template(std.get(block, 'volume_size', null)),
      }),
      accelerator_types: resource.field('accelerator_types'),
      additional_code_repositories: resource.field('additional_code_repositories'),
      arn: resource.field('arn'),
      default_code_repository: resource.field('default_code_repository'),
      direct_internet_access: resource.field('direct_internet_access'),
      id: resource.field('id'),
      instance_type: resource.field('instance_type'),
      kms_key_id: resource.field('kms_key_id'),
      lifecycle_config_name: resource.field('lifecycle_config_name'),
      name: resource.field('name'),
      network_interface_id: resource.field('network_interface_id'),
      platform_identifier: resource.field('platform_identifier'),
      role_arn: resource.field('role_arn'),
      root_access: resource.field('root_access'),
      security_groups: resource.field('security_groups'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      url: resource.field('url'),
      volume_size: resource.field('volume_size'),
    },
    sagemaker_notebook_instance_lifecycle_configuration(name, block): {
      local resource = blockType.resource('aws_sagemaker_notebook_instance_lifecycle_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        on_create: build.template(std.get(block, 'on_create', null)),
        on_start: build.template(std.get(block, 'on_start', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      on_create: resource.field('on_create'),
      on_start: resource.field('on_start'),
    },
    sagemaker_pipeline(name, block): {
      local resource = blockType.resource('aws_sagemaker_pipeline', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        pipeline_definition: build.template(std.get(block, 'pipeline_definition', null)),
        pipeline_description: build.template(std.get(block, 'pipeline_description', null)),
        pipeline_display_name: build.template(block.pipeline_display_name),
        pipeline_name: build.template(block.pipeline_name),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      pipeline_definition: resource.field('pipeline_definition'),
      pipeline_description: resource.field('pipeline_description'),
      pipeline_display_name: resource.field('pipeline_display_name'),
      pipeline_name: resource.field('pipeline_name'),
      role_arn: resource.field('role_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_project(name, block): {
      local resource = blockType.resource('aws_sagemaker_project', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        project_description: build.template(std.get(block, 'project_description', null)),
        project_id: build.template(std.get(block, 'project_id', null)),
        project_name: build.template(block.project_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      project_description: resource.field('project_description'),
      project_id: resource.field('project_id'),
      project_name: resource.field('project_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_servicecatalog_portfolio_status(name, block): {
      local resource = blockType.resource('aws_sagemaker_servicecatalog_portfolio_status', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        status: build.template(block.status),
      }),
      id: resource.field('id'),
      status: resource.field('status'),
    },
    sagemaker_space(name, block): {
      local resource = blockType.resource('aws_sagemaker_space', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        domain_id: build.template(block.domain_id),
        home_efs_file_system_uid: build.template(std.get(block, 'home_efs_file_system_uid', null)),
        id: build.template(std.get(block, 'id', null)),
        space_display_name: build.template(std.get(block, 'space_display_name', null)),
        space_name: build.template(block.space_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      arn: resource.field('arn'),
      domain_id: resource.field('domain_id'),
      home_efs_file_system_uid: resource.field('home_efs_file_system_uid'),
      id: resource.field('id'),
      space_display_name: resource.field('space_display_name'),
      space_name: resource.field('space_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      url: resource.field('url'),
    },
    sagemaker_studio_lifecycle_config(name, block): {
      local resource = blockType.resource('aws_sagemaker_studio_lifecycle_config', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        studio_lifecycle_config_app_type: build.template(block.studio_lifecycle_config_app_type),
        studio_lifecycle_config_content: build.template(block.studio_lifecycle_config_content),
        studio_lifecycle_config_name: build.template(block.studio_lifecycle_config_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      studio_lifecycle_config_app_type: resource.field('studio_lifecycle_config_app_type'),
      studio_lifecycle_config_content: resource.field('studio_lifecycle_config_content'),
      studio_lifecycle_config_name: resource.field('studio_lifecycle_config_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sagemaker_user_profile(name, block): {
      local resource = blockType.resource('aws_sagemaker_user_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        domain_id: build.template(block.domain_id),
        home_efs_file_system_uid: build.template(std.get(block, 'home_efs_file_system_uid', null)),
        id: build.template(std.get(block, 'id', null)),
        single_sign_on_user_identifier: build.template(std.get(block, 'single_sign_on_user_identifier', null)),
        single_sign_on_user_value: build.template(std.get(block, 'single_sign_on_user_value', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_profile_name: build.template(block.user_profile_name),
      }),
      arn: resource.field('arn'),
      domain_id: resource.field('domain_id'),
      home_efs_file_system_uid: resource.field('home_efs_file_system_uid'),
      id: resource.field('id'),
      single_sign_on_user_identifier: resource.field('single_sign_on_user_identifier'),
      single_sign_on_user_value: resource.field('single_sign_on_user_value'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_profile_name: resource.field('user_profile_name'),
    },
    sagemaker_workforce(name, block): {
      local resource = blockType.resource('aws_sagemaker_workforce', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        subdomain: build.template(std.get(block, 'subdomain', null)),
        workforce_name: build.template(block.workforce_name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      subdomain: resource.field('subdomain'),
      workforce_name: resource.field('workforce_name'),
    },
    sagemaker_workteam(name, block): {
      local resource = blockType.resource('aws_sagemaker_workteam', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(block.description),
        id: build.template(std.get(block, 'id', null)),
        subdomain: build.template(std.get(block, 'subdomain', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        workforce_name: build.template(std.get(block, 'workforce_name', null)),
        workteam_name: build.template(block.workteam_name),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      subdomain: resource.field('subdomain'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      workforce_name: resource.field('workforce_name'),
      workteam_name: resource.field('workteam_name'),
    },
    scheduler_schedule(name, block): {
      local resource = blockType.resource('aws_scheduler_schedule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        end_date: build.template(std.get(block, 'end_date', null)),
        group_name: build.template(std.get(block, 'group_name', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        schedule_expression: build.template(block.schedule_expression),
        schedule_expression_timezone: build.template(std.get(block, 'schedule_expression_timezone', null)),
        start_date: build.template(std.get(block, 'start_date', null)),
        state: build.template(std.get(block, 'state', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      end_date: resource.field('end_date'),
      group_name: resource.field('group_name'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      schedule_expression: resource.field('schedule_expression'),
      schedule_expression_timezone: resource.field('schedule_expression_timezone'),
      start_date: resource.field('start_date'),
      state: resource.field('state'),
    },
    scheduler_schedule_group(name, block): {
      local resource = blockType.resource('aws_scheduler_schedule_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modification_date: build.template(std.get(block, 'last_modification_date', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      creation_date: resource.field('creation_date'),
      id: resource.field('id'),
      last_modification_date: resource.field('last_modification_date'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    schemas_discoverer(name, block): {
      local resource = blockType.resource('aws_schemas_discoverer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        source_arn: build.template(block.source_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      source_arn: resource.field('source_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    schemas_registry(name, block): {
      local resource = blockType.resource('aws_schemas_registry', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    schemas_registry_policy(name, block): {
      local resource = blockType.resource('aws_schemas_registry_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        registry_name: build.template(block.registry_name),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      registry_name: resource.field('registry_name'),
    },
    schemas_schema(name, block): {
      local resource = blockType.resource('aws_schemas_schema', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        content: build.template(block.content),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        name: build.template(block.name),
        registry_name: build.template(block.registry_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
        version: build.template(std.get(block, 'version', null)),
        version_created_date: build.template(std.get(block, 'version_created_date', null)),
      }),
      arn: resource.field('arn'),
      content: resource.field('content'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_modified: resource.field('last_modified'),
      name: resource.field('name'),
      registry_name: resource.field('registry_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      version: resource.field('version'),
      version_created_date: resource.field('version_created_date'),
    },
    secretsmanager_secret(name, block): {
      local resource = blockType.resource('aws_secretsmanager_secret', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        force_overwrite_replica_secret: build.template(std.get(block, 'force_overwrite_replica_secret', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        policy: build.template(std.get(block, 'policy', null)),
        recovery_window_in_days: build.template(std.get(block, 'recovery_window_in_days', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      force_overwrite_replica_secret: resource.field('force_overwrite_replica_secret'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      policy: resource.field('policy'),
      recovery_window_in_days: resource.field('recovery_window_in_days'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    secretsmanager_secret_policy(name, block): {
      local resource = blockType.resource('aws_secretsmanager_secret_policy', name),
      _: resource._(block, {
        block_public_policy: build.template(std.get(block, 'block_public_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        secret_arn: build.template(block.secret_arn),
      }),
      block_public_policy: resource.field('block_public_policy'),
      id: resource.field('id'),
      policy: resource.field('policy'),
      secret_arn: resource.field('secret_arn'),
    },
    secretsmanager_secret_rotation(name, block): {
      local resource = blockType.resource('aws_secretsmanager_secret_rotation', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        rotate_immediately: build.template(std.get(block, 'rotate_immediately', null)),
        rotation_enabled: build.template(std.get(block, 'rotation_enabled', null)),
        rotation_lambda_arn: build.template(std.get(block, 'rotation_lambda_arn', null)),
        secret_id: build.template(block.secret_id),
      }),
      id: resource.field('id'),
      rotate_immediately: resource.field('rotate_immediately'),
      rotation_enabled: resource.field('rotation_enabled'),
      rotation_lambda_arn: resource.field('rotation_lambda_arn'),
      secret_id: resource.field('secret_id'),
    },
    secretsmanager_secret_version(name, block): {
      local resource = blockType.resource('aws_secretsmanager_secret_version', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        secret_binary: build.template(std.get(block, 'secret_binary', null)),
        secret_id: build.template(block.secret_id),
        secret_string: build.template(std.get(block, 'secret_string', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
        version_stages: build.template(std.get(block, 'version_stages', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      secret_binary: resource.field('secret_binary'),
      secret_id: resource.field('secret_id'),
      secret_string: resource.field('secret_string'),
      version_id: resource.field('version_id'),
      version_stages: resource.field('version_stages'),
    },
    security_group(name, block): {
      local resource = blockType.resource('aws_security_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        egress: build.template(std.get(block, 'egress', null)),
        id: build.template(std.get(block, 'id', null)),
        ingress: build.template(std.get(block, 'ingress', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        revoke_rules_on_delete: build.template(std.get(block, 'revoke_rules_on_delete', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      egress: resource.field('egress'),
      id: resource.field('id'),
      ingress: resource.field('ingress'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      owner_id: resource.field('owner_id'),
      revoke_rules_on_delete: resource.field('revoke_rules_on_delete'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    security_group_rule(name, block): {
      local resource = blockType.resource('aws_security_group_rule', name),
      _: resource._(block, {
        cidr_blocks: build.template(std.get(block, 'cidr_blocks', null)),
        description: build.template(std.get(block, 'description', null)),
        from_port: build.template(block.from_port),
        id: build.template(std.get(block, 'id', null)),
        ipv6_cidr_blocks: build.template(std.get(block, 'ipv6_cidr_blocks', null)),
        prefix_list_ids: build.template(std.get(block, 'prefix_list_ids', null)),
        protocol: build.template(block.protocol),
        security_group_id: build.template(block.security_group_id),
        security_group_rule_id: build.template(std.get(block, 'security_group_rule_id', null)),
        'self': build.template(std.get(block, 'self', null)),
        source_security_group_id: build.template(std.get(block, 'source_security_group_id', null)),
        to_port: build.template(block.to_port),
        type: build.template(block.type),
      }),
      cidr_blocks: resource.field('cidr_blocks'),
      description: resource.field('description'),
      from_port: resource.field('from_port'),
      id: resource.field('id'),
      ipv6_cidr_blocks: resource.field('ipv6_cidr_blocks'),
      prefix_list_ids: resource.field('prefix_list_ids'),
      protocol: resource.field('protocol'),
      security_group_id: resource.field('security_group_id'),
      security_group_rule_id: resource.field('security_group_rule_id'),
      'self': resource.field('self'),
      source_security_group_id: resource.field('source_security_group_id'),
      to_port: resource.field('to_port'),
      type: resource.field('type'),
    },
    securityhub_account(name, block): {
      local resource = blockType.resource('aws_securityhub_account', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_enable_controls: build.template(std.get(block, 'auto_enable_controls', null)),
        control_finding_generator: build.template(std.get(block, 'control_finding_generator', null)),
        enable_default_standards: build.template(std.get(block, 'enable_default_standards', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      arn: resource.field('arn'),
      auto_enable_controls: resource.field('auto_enable_controls'),
      control_finding_generator: resource.field('control_finding_generator'),
      enable_default_standards: resource.field('enable_default_standards'),
      id: resource.field('id'),
    },
    securityhub_action_target(name, block): {
      local resource = blockType.resource('aws_securityhub_action_target', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(block.description),
        id: build.template(std.get(block, 'id', null)),
        identifier: build.template(block.identifier),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      identifier: resource.field('identifier'),
      name: resource.field('name'),
    },
    securityhub_automation_rule(name, block): {
      local resource = blockType.resource('aws_securityhub_automation_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(block.description),
        id: build.template(std.get(block, 'id', null)),
        is_terminal: build.template(std.get(block, 'is_terminal', null)),
        rule_name: build.template(block.rule_name),
        rule_order: build.template(block.rule_order),
        rule_status: build.template(std.get(block, 'rule_status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      is_terminal: resource.field('is_terminal'),
      rule_name: resource.field('rule_name'),
      rule_order: resource.field('rule_order'),
      rule_status: resource.field('rule_status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    securityhub_configuration_policy(name, block): {
      local resource = blockType.resource('aws_securityhub_configuration_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    securityhub_configuration_policy_association(name, block): {
      local resource = blockType.resource('aws_securityhub_configuration_policy_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy_id: build.template(block.policy_id),
        target_id: build.template(block.target_id),
      }),
      id: resource.field('id'),
      policy_id: resource.field('policy_id'),
      target_id: resource.field('target_id'),
    },
    securityhub_finding_aggregator(name, block): {
      local resource = blockType.resource('aws_securityhub_finding_aggregator', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        linking_mode: build.template(block.linking_mode),
        specified_regions: build.template(std.get(block, 'specified_regions', null)),
      }),
      id: resource.field('id'),
      linking_mode: resource.field('linking_mode'),
      specified_regions: resource.field('specified_regions'),
    },
    securityhub_insight(name, block): {
      local resource = blockType.resource('aws_securityhub_insight', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        group_by_attribute: build.template(block.group_by_attribute),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      group_by_attribute: resource.field('group_by_attribute'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    securityhub_invite_accepter(name, block): {
      local resource = blockType.resource('aws_securityhub_invite_accepter', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        invitation_id: build.template(std.get(block, 'invitation_id', null)),
        master_id: build.template(block.master_id),
      }),
      id: resource.field('id'),
      invitation_id: resource.field('invitation_id'),
      master_id: resource.field('master_id'),
    },
    securityhub_member(name, block): {
      local resource = blockType.resource('aws_securityhub_member', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        invite: build.template(std.get(block, 'invite', null)),
        master_id: build.template(std.get(block, 'master_id', null)),
        member_status: build.template(std.get(block, 'member_status', null)),
      }),
      account_id: resource.field('account_id'),
      email: resource.field('email'),
      id: resource.field('id'),
      invite: resource.field('invite'),
      master_id: resource.field('master_id'),
      member_status: resource.field('member_status'),
    },
    securityhub_organization_admin_account(name, block): {
      local resource = blockType.resource('aws_securityhub_organization_admin_account', name),
      _: resource._(block, {
        admin_account_id: build.template(block.admin_account_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      admin_account_id: resource.field('admin_account_id'),
      id: resource.field('id'),
    },
    securityhub_organization_configuration(name, block): {
      local resource = blockType.resource('aws_securityhub_organization_configuration', name),
      _: resource._(block, {
        auto_enable: build.template(block.auto_enable),
        auto_enable_standards: build.template(std.get(block, 'auto_enable_standards', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      auto_enable: resource.field('auto_enable'),
      auto_enable_standards: resource.field('auto_enable_standards'),
      id: resource.field('id'),
    },
    securityhub_product_subscription(name, block): {
      local resource = blockType.resource('aws_securityhub_product_subscription', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        product_arn: build.template(block.product_arn),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      product_arn: resource.field('product_arn'),
    },
    securityhub_standards_control(name, block): {
      local resource = blockType.resource('aws_securityhub_standards_control', name),
      _: resource._(block, {
        control_id: build.template(std.get(block, 'control_id', null)),
        control_status: build.template(block.control_status),
        control_status_updated_at: build.template(std.get(block, 'control_status_updated_at', null)),
        description: build.template(std.get(block, 'description', null)),
        disabled_reason: build.template(std.get(block, 'disabled_reason', null)),
        id: build.template(std.get(block, 'id', null)),
        related_requirements: build.template(std.get(block, 'related_requirements', null)),
        remediation_url: build.template(std.get(block, 'remediation_url', null)),
        severity_rating: build.template(std.get(block, 'severity_rating', null)),
        standards_control_arn: build.template(block.standards_control_arn),
        title: build.template(std.get(block, 'title', null)),
      }),
      control_id: resource.field('control_id'),
      control_status: resource.field('control_status'),
      control_status_updated_at: resource.field('control_status_updated_at'),
      description: resource.field('description'),
      disabled_reason: resource.field('disabled_reason'),
      id: resource.field('id'),
      related_requirements: resource.field('related_requirements'),
      remediation_url: resource.field('remediation_url'),
      severity_rating: resource.field('severity_rating'),
      standards_control_arn: resource.field('standards_control_arn'),
      title: resource.field('title'),
    },
    securityhub_standards_control_association(name, block): {
      local resource = blockType.resource('aws_securityhub_standards_control_association', name),
      _: resource._(block, {
        association_status: build.template(block.association_status),
        id: build.template(std.get(block, 'id', null)),
        security_control_id: build.template(block.security_control_id),
        standards_arn: build.template(block.standards_arn),
        updated_reason: build.template(std.get(block, 'updated_reason', null)),
      }),
      association_status: resource.field('association_status'),
      id: resource.field('id'),
      security_control_id: resource.field('security_control_id'),
      standards_arn: resource.field('standards_arn'),
      updated_reason: resource.field('updated_reason'),
    },
    securityhub_standards_subscription(name, block): {
      local resource = blockType.resource('aws_securityhub_standards_subscription', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        standards_arn: build.template(block.standards_arn),
      }),
      id: resource.field('id'),
      standards_arn: resource.field('standards_arn'),
    },
    securitylake_aws_log_source(name, block): {
      local resource = blockType.resource('aws_securitylake_aws_log_source', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    securitylake_custom_log_source(name, block): {
      local resource = blockType.resource('aws_securitylake_custom_log_source', name),
      _: resource._(block, {
        attributes: build.template(std.get(block, 'attributes', null)),
        event_classes: build.template(std.get(block, 'event_classes', null)),
        id: build.template(std.get(block, 'id', null)),
        provider_details: build.template(std.get(block, 'provider_details', null)),
        source_name: build.template(block.source_name),
        source_version: build.template(std.get(block, 'source_version', null)),
      }),
      attributes: resource.field('attributes'),
      event_classes: resource.field('event_classes'),
      id: resource.field('id'),
      provider_details: resource.field('provider_details'),
      source_name: resource.field('source_name'),
      source_version: resource.field('source_version'),
    },
    securitylake_data_lake(name, block): {
      local resource = blockType.resource('aws_securitylake_data_lake', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        meta_store_manager_role_arn: build.template(block.meta_store_manager_role_arn),
        s3_bucket_arn: build.template(std.get(block, 's3_bucket_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      meta_store_manager_role_arn: resource.field('meta_store_manager_role_arn'),
      s3_bucket_arn: resource.field('s3_bucket_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    securitylake_subscriber(name, block): {
      local resource = blockType.resource('aws_securitylake_subscriber', name),
      _: resource._(block, {
        access_type: build.template(std.get(block, 'access_type', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        resource_share_arn: build.template(std.get(block, 'resource_share_arn', null)),
        resource_share_name: build.template(std.get(block, 'resource_share_name', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        s3_bucket_arn: build.template(std.get(block, 's3_bucket_arn', null)),
        subscriber_description: build.template(std.get(block, 'subscriber_description', null)),
        subscriber_endpoint: build.template(std.get(block, 'subscriber_endpoint', null)),
        subscriber_name: build.template(std.get(block, 'subscriber_name', null)),
        subscriber_status: build.template(std.get(block, 'subscriber_status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      access_type: resource.field('access_type'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      resource_share_arn: resource.field('resource_share_arn'),
      resource_share_name: resource.field('resource_share_name'),
      role_arn: resource.field('role_arn'),
      s3_bucket_arn: resource.field('s3_bucket_arn'),
      subscriber_description: resource.field('subscriber_description'),
      subscriber_endpoint: resource.field('subscriber_endpoint'),
      subscriber_name: resource.field('subscriber_name'),
      subscriber_status: resource.field('subscriber_status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    securitylake_subscriber_notification(name, block): {
      local resource = blockType.resource('aws_securitylake_subscriber_notification', name),
      _: resource._(block, {
        endpoint_id: build.template(std.get(block, 'endpoint_id', null)),
        id: build.template(std.get(block, 'id', null)),
        subscriber_endpoint: build.template(std.get(block, 'subscriber_endpoint', null)),
        subscriber_id: build.template(block.subscriber_id),
      }),
      endpoint_id: resource.field('endpoint_id'),
      id: resource.field('id'),
      subscriber_endpoint: resource.field('subscriber_endpoint'),
      subscriber_id: resource.field('subscriber_id'),
    },
    serverlessapplicationrepository_cloudformation_stack(name, block): {
      local resource = blockType.resource('aws_serverlessapplicationrepository_cloudformation_stack', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        capabilities: build.template(block.capabilities),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        outputs: build.template(std.get(block, 'outputs', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        semantic_version: build.template(std.get(block, 'semantic_version', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      application_id: resource.field('application_id'),
      capabilities: resource.field('capabilities'),
      id: resource.field('id'),
      name: resource.field('name'),
      outputs: resource.field('outputs'),
      parameters: resource.field('parameters'),
      semantic_version: resource.field('semantic_version'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    service_discovery_http_namespace(name, block): {
      local resource = blockType.resource('aws_service_discovery_http_namespace', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        http_name: build.template(std.get(block, 'http_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      http_name: resource.field('http_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    service_discovery_instance(name, block): {
      local resource = blockType.resource('aws_service_discovery_instance', name),
      _: resource._(block, {
        attributes: build.template(block.attributes),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        service_id: build.template(block.service_id),
      }),
      attributes: resource.field('attributes'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      service_id: resource.field('service_id'),
    },
    service_discovery_private_dns_namespace(name, block): {
      local resource = blockType.resource('aws_service_discovery_private_dns_namespace', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        hosted_zone: build.template(std.get(block, 'hosted_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc: build.template(block.vpc),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      hosted_zone: resource.field('hosted_zone'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc: resource.field('vpc'),
    },
    service_discovery_public_dns_namespace(name, block): {
      local resource = blockType.resource('aws_service_discovery_public_dns_namespace', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        hosted_zone: build.template(std.get(block, 'hosted_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      hosted_zone: resource.field('hosted_zone'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    service_discovery_service(name, block): {
      local resource = blockType.resource('aws_service_discovery_service', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace_id: build.template(std.get(block, 'namespace_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      force_destroy: resource.field('force_destroy'),
      id: resource.field('id'),
      name: resource.field('name'),
      namespace_id: resource.field('namespace_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    servicecatalog_budget_resource_association(name, block): {
      local resource = blockType.resource('aws_servicecatalog_budget_resource_association', name),
      _: resource._(block, {
        budget_name: build.template(block.budget_name),
        id: build.template(std.get(block, 'id', null)),
        resource_id: build.template(block.resource_id),
      }),
      budget_name: resource.field('budget_name'),
      id: resource.field('id'),
      resource_id: resource.field('resource_id'),
    },
    servicecatalog_constraint(name, block): {
      local resource = blockType.resource('aws_servicecatalog_constraint', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        owner: build.template(std.get(block, 'owner', null)),
        parameters: build.template(block.parameters),
        portfolio_id: build.template(block.portfolio_id),
        product_id: build.template(block.product_id),
        status: build.template(std.get(block, 'status', null)),
        type: build.template(block.type),
      }),
      accept_language: resource.field('accept_language'),
      description: resource.field('description'),
      id: resource.field('id'),
      owner: resource.field('owner'),
      parameters: resource.field('parameters'),
      portfolio_id: resource.field('portfolio_id'),
      product_id: resource.field('product_id'),
      status: resource.field('status'),
      type: resource.field('type'),
    },
    servicecatalog_organizations_access(name, block): {
      local resource = blockType.resource('aws_servicecatalog_organizations_access', name),
      _: resource._(block, {
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
      }),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
    },
    servicecatalog_portfolio(name, block): {
      local resource = blockType.resource('aws_servicecatalog_portfolio', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        provider_name: build.template(block.provider_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_time: resource.field('created_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      provider_name: resource.field('provider_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    servicecatalog_portfolio_share(name, block): {
      local resource = blockType.resource('aws_servicecatalog_portfolio_share', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        accepted: build.template(std.get(block, 'accepted', null)),
        id: build.template(std.get(block, 'id', null)),
        portfolio_id: build.template(block.portfolio_id),
        principal_id: build.template(block.principal_id),
        share_principals: build.template(std.get(block, 'share_principals', null)),
        share_tag_options: build.template(std.get(block, 'share_tag_options', null)),
        type: build.template(block.type),
        wait_for_acceptance: build.template(std.get(block, 'wait_for_acceptance', null)),
      }),
      accept_language: resource.field('accept_language'),
      accepted: resource.field('accepted'),
      id: resource.field('id'),
      portfolio_id: resource.field('portfolio_id'),
      principal_id: resource.field('principal_id'),
      share_principals: resource.field('share_principals'),
      share_tag_options: resource.field('share_tag_options'),
      type: resource.field('type'),
      wait_for_acceptance: resource.field('wait_for_acceptance'),
    },
    servicecatalog_principal_portfolio_association(name, block): {
      local resource = blockType.resource('aws_servicecatalog_principal_portfolio_association', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        id: build.template(std.get(block, 'id', null)),
        portfolio_id: build.template(block.portfolio_id),
        principal_arn: build.template(block.principal_arn),
        principal_type: build.template(std.get(block, 'principal_type', null)),
      }),
      accept_language: resource.field('accept_language'),
      id: resource.field('id'),
      portfolio_id: resource.field('portfolio_id'),
      principal_arn: resource.field('principal_arn'),
      principal_type: resource.field('principal_type'),
    },
    servicecatalog_product(name, block): {
      local resource = blockType.resource('aws_servicecatalog_product', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        arn: build.template(std.get(block, 'arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        description: build.template(std.get(block, 'description', null)),
        distributor: build.template(std.get(block, 'distributor', null)),
        has_default_path: build.template(std.get(block, 'has_default_path', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner: build.template(block.owner),
        status: build.template(std.get(block, 'status', null)),
        support_description: build.template(std.get(block, 'support_description', null)),
        support_email: build.template(std.get(block, 'support_email', null)),
        support_url: build.template(std.get(block, 'support_url', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      accept_language: resource.field('accept_language'),
      arn: resource.field('arn'),
      created_time: resource.field('created_time'),
      description: resource.field('description'),
      distributor: resource.field('distributor'),
      has_default_path: resource.field('has_default_path'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      status: resource.field('status'),
      support_description: resource.field('support_description'),
      support_email: resource.field('support_email'),
      support_url: resource.field('support_url'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    servicecatalog_product_portfolio_association(name, block): {
      local resource = blockType.resource('aws_servicecatalog_product_portfolio_association', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        id: build.template(std.get(block, 'id', null)),
        portfolio_id: build.template(block.portfolio_id),
        product_id: build.template(block.product_id),
        source_portfolio_id: build.template(std.get(block, 'source_portfolio_id', null)),
      }),
      accept_language: resource.field('accept_language'),
      id: resource.field('id'),
      portfolio_id: resource.field('portfolio_id'),
      product_id: resource.field('product_id'),
      source_portfolio_id: resource.field('source_portfolio_id'),
    },
    servicecatalog_provisioned_product(name, block): {
      local resource = blockType.resource('aws_servicecatalog_provisioned_product', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        arn: build.template(std.get(block, 'arn', null)),
        cloudwatch_dashboard_names: build.template(std.get(block, 'cloudwatch_dashboard_names', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_errors: build.template(std.get(block, 'ignore_errors', null)),
        last_provisioning_record_id: build.template(std.get(block, 'last_provisioning_record_id', null)),
        last_record_id: build.template(std.get(block, 'last_record_id', null)),
        last_successful_provisioning_record_id: build.template(std.get(block, 'last_successful_provisioning_record_id', null)),
        launch_role_arn: build.template(std.get(block, 'launch_role_arn', null)),
        name: build.template(block.name),
        notification_arns: build.template(std.get(block, 'notification_arns', null)),
        outputs: build.template(std.get(block, 'outputs', null)),
        path_id: build.template(std.get(block, 'path_id', null)),
        path_name: build.template(std.get(block, 'path_name', null)),
        product_id: build.template(std.get(block, 'product_id', null)),
        product_name: build.template(std.get(block, 'product_name', null)),
        provisioning_artifact_id: build.template(std.get(block, 'provisioning_artifact_id', null)),
        provisioning_artifact_name: build.template(std.get(block, 'provisioning_artifact_name', null)),
        retain_physical_resources: build.template(std.get(block, 'retain_physical_resources', null)),
        status: build.template(std.get(block, 'status', null)),
        status_message: build.template(std.get(block, 'status_message', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      accept_language: resource.field('accept_language'),
      arn: resource.field('arn'),
      cloudwatch_dashboard_names: resource.field('cloudwatch_dashboard_names'),
      created_time: resource.field('created_time'),
      id: resource.field('id'),
      ignore_errors: resource.field('ignore_errors'),
      last_provisioning_record_id: resource.field('last_provisioning_record_id'),
      last_record_id: resource.field('last_record_id'),
      last_successful_provisioning_record_id: resource.field('last_successful_provisioning_record_id'),
      launch_role_arn: resource.field('launch_role_arn'),
      name: resource.field('name'),
      notification_arns: resource.field('notification_arns'),
      outputs: resource.field('outputs'),
      path_id: resource.field('path_id'),
      path_name: resource.field('path_name'),
      product_id: resource.field('product_id'),
      product_name: resource.field('product_name'),
      provisioning_artifact_id: resource.field('provisioning_artifact_id'),
      provisioning_artifact_name: resource.field('provisioning_artifact_name'),
      retain_physical_resources: resource.field('retain_physical_resources'),
      status: resource.field('status'),
      status_message: resource.field('status_message'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    servicecatalog_provisioning_artifact(name, block): {
      local resource = blockType.resource('aws_servicecatalog_provisioning_artifact', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        active: build.template(std.get(block, 'active', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        description: build.template(std.get(block, 'description', null)),
        disable_template_validation: build.template(std.get(block, 'disable_template_validation', null)),
        guidance: build.template(std.get(block, 'guidance', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        product_id: build.template(block.product_id),
        provisioning_artifact_id: build.template(std.get(block, 'provisioning_artifact_id', null)),
        template_physical_id: build.template(std.get(block, 'template_physical_id', null)),
        template_url: build.template(std.get(block, 'template_url', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      accept_language: resource.field('accept_language'),
      active: resource.field('active'),
      created_time: resource.field('created_time'),
      description: resource.field('description'),
      disable_template_validation: resource.field('disable_template_validation'),
      guidance: resource.field('guidance'),
      id: resource.field('id'),
      name: resource.field('name'),
      product_id: resource.field('product_id'),
      provisioning_artifact_id: resource.field('provisioning_artifact_id'),
      template_physical_id: resource.field('template_physical_id'),
      template_url: resource.field('template_url'),
      type: resource.field('type'),
    },
    servicecatalog_service_action(name, block): {
      local resource = blockType.resource('aws_servicecatalog_service_action', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      accept_language: resource.field('accept_language'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    servicecatalog_tag_option(name, block): {
      local resource = blockType.resource('aws_servicecatalog_tag_option', name),
      _: resource._(block, {
        active: build.template(std.get(block, 'active', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        owner: build.template(std.get(block, 'owner', null)),
        value: build.template(block.value),
      }),
      active: resource.field('active'),
      id: resource.field('id'),
      key: resource.field('key'),
      owner: resource.field('owner'),
      value: resource.field('value'),
    },
    servicecatalog_tag_option_resource_association(name, block): {
      local resource = blockType.resource('aws_servicecatalog_tag_option_resource_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        resource_arn: build.template(std.get(block, 'resource_arn', null)),
        resource_created_time: build.template(std.get(block, 'resource_created_time', null)),
        resource_description: build.template(std.get(block, 'resource_description', null)),
        resource_id: build.template(block.resource_id),
        resource_name: build.template(std.get(block, 'resource_name', null)),
        tag_option_id: build.template(block.tag_option_id),
      }),
      id: resource.field('id'),
      resource_arn: resource.field('resource_arn'),
      resource_created_time: resource.field('resource_created_time'),
      resource_description: resource.field('resource_description'),
      resource_id: resource.field('resource_id'),
      resource_name: resource.field('resource_name'),
      tag_option_id: resource.field('tag_option_id'),
    },
    servicecatalogappregistry_application(name, block): {
      local resource = blockType.resource('aws_servicecatalogappregistry_application', name),
      _: resource._(block, {
        application_tag: build.template(std.get(block, 'application_tag', null)),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      application_tag: resource.field('application_tag'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    servicequotas_service_quota(name, block): {
      local resource = blockType.resource('aws_servicequotas_service_quota', name),
      _: resource._(block, {
        adjustable: build.template(std.get(block, 'adjustable', null)),
        arn: build.template(std.get(block, 'arn', null)),
        default_value: build.template(std.get(block, 'default_value', null)),
        id: build.template(std.get(block, 'id', null)),
        quota_code: build.template(block.quota_code),
        quota_name: build.template(std.get(block, 'quota_name', null)),
        request_id: build.template(std.get(block, 'request_id', null)),
        request_status: build.template(std.get(block, 'request_status', null)),
        service_code: build.template(block.service_code),
        service_name: build.template(std.get(block, 'service_name', null)),
        usage_metric: build.template(std.get(block, 'usage_metric', null)),
        value: build.template(block.value),
      }),
      adjustable: resource.field('adjustable'),
      arn: resource.field('arn'),
      default_value: resource.field('default_value'),
      id: resource.field('id'),
      quota_code: resource.field('quota_code'),
      quota_name: resource.field('quota_name'),
      request_id: resource.field('request_id'),
      request_status: resource.field('request_status'),
      service_code: resource.field('service_code'),
      service_name: resource.field('service_name'),
      usage_metric: resource.field('usage_metric'),
      value: resource.field('value'),
    },
    servicequotas_template(name, block): {
      local resource = blockType.resource('aws_servicequotas_template', name),
      _: resource._(block, {
        global_quota: build.template(std.get(block, 'global_quota', null)),
        id: build.template(std.get(block, 'id', null)),
        quota_code: build.template(block.quota_code),
        quota_name: build.template(std.get(block, 'quota_name', null)),
        region: build.template(block.region),
        service_code: build.template(block.service_code),
        service_name: build.template(std.get(block, 'service_name', null)),
        unit: build.template(std.get(block, 'unit', null)),
        value: build.template(block.value),
      }),
      global_quota: resource.field('global_quota'),
      id: resource.field('id'),
      quota_code: resource.field('quota_code'),
      quota_name: resource.field('quota_name'),
      region: resource.field('region'),
      service_code: resource.field('service_code'),
      service_name: resource.field('service_name'),
      unit: resource.field('unit'),
      value: resource.field('value'),
    },
    servicequotas_template_association(name, block): {
      local resource = blockType.resource('aws_servicequotas_template_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      id: resource.field('id'),
      skip_destroy: resource.field('skip_destroy'),
      status: resource.field('status'),
    },
    ses_active_receipt_rule_set(name, block): {
      local resource = blockType.resource('aws_ses_active_receipt_rule_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        rule_set_name: build.template(block.rule_set_name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      rule_set_name: resource.field('rule_set_name'),
    },
    ses_configuration_set(name, block): {
      local resource = blockType.resource('aws_ses_configuration_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        last_fresh_start: build.template(std.get(block, 'last_fresh_start', null)),
        name: build.template(block.name),
        reputation_metrics_enabled: build.template(std.get(block, 'reputation_metrics_enabled', null)),
        sending_enabled: build.template(std.get(block, 'sending_enabled', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      last_fresh_start: resource.field('last_fresh_start'),
      name: resource.field('name'),
      reputation_metrics_enabled: resource.field('reputation_metrics_enabled'),
      sending_enabled: resource.field('sending_enabled'),
    },
    ses_domain_dkim(name, block): {
      local resource = blockType.resource('aws_ses_domain_dkim', name),
      _: resource._(block, {
        dkim_tokens: build.template(std.get(block, 'dkim_tokens', null)),
        domain: build.template(block.domain),
        id: build.template(std.get(block, 'id', null)),
      }),
      dkim_tokens: resource.field('dkim_tokens'),
      domain: resource.field('domain'),
      id: resource.field('id'),
    },
    ses_domain_identity(name, block): {
      local resource = blockType.resource('aws_ses_domain_identity', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        domain: build.template(block.domain),
        id: build.template(std.get(block, 'id', null)),
        verification_token: build.template(std.get(block, 'verification_token', null)),
      }),
      arn: resource.field('arn'),
      domain: resource.field('domain'),
      id: resource.field('id'),
      verification_token: resource.field('verification_token'),
    },
    ses_domain_identity_verification(name, block): {
      local resource = blockType.resource('aws_ses_domain_identity_verification', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        domain: build.template(block.domain),
        id: build.template(std.get(block, 'id', null)),
      }),
      arn: resource.field('arn'),
      domain: resource.field('domain'),
      id: resource.field('id'),
    },
    ses_domain_mail_from(name, block): {
      local resource = blockType.resource('aws_ses_domain_mail_from', name),
      _: resource._(block, {
        behavior_on_mx_failure: build.template(std.get(block, 'behavior_on_mx_failure', null)),
        domain: build.template(block.domain),
        id: build.template(std.get(block, 'id', null)),
        mail_from_domain: build.template(block.mail_from_domain),
      }),
      behavior_on_mx_failure: resource.field('behavior_on_mx_failure'),
      domain: resource.field('domain'),
      id: resource.field('id'),
      mail_from_domain: resource.field('mail_from_domain'),
    },
    ses_email_identity(name, block): {
      local resource = blockType.resource('aws_ses_email_identity', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
      }),
      arn: resource.field('arn'),
      email: resource.field('email'),
      id: resource.field('id'),
    },
    ses_event_destination(name, block): {
      local resource = blockType.resource('aws_ses_event_destination', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        configuration_set_name: build.template(block.configuration_set_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        matching_types: build.template(block.matching_types),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      configuration_set_name: resource.field('configuration_set_name'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      matching_types: resource.field('matching_types'),
      name: resource.field('name'),
    },
    ses_identity_notification_topic(name, block): {
      local resource = blockType.resource('aws_ses_identity_notification_topic', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(block.identity),
        include_original_headers: build.template(std.get(block, 'include_original_headers', null)),
        notification_type: build.template(block.notification_type),
        topic_arn: build.template(std.get(block, 'topic_arn', null)),
      }),
      id: resource.field('id'),
      identity: resource.field('identity'),
      include_original_headers: resource.field('include_original_headers'),
      notification_type: resource.field('notification_type'),
      topic_arn: resource.field('topic_arn'),
    },
    ses_identity_policy(name, block): {
      local resource = blockType.resource('aws_ses_identity_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(block.identity),
        name: build.template(block.name),
        policy: build.template(block.policy),
      }),
      id: resource.field('id'),
      identity: resource.field('identity'),
      name: resource.field('name'),
      policy: resource.field('policy'),
    },
    ses_receipt_filter(name, block): {
      local resource = blockType.resource('aws_ses_receipt_filter', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cidr: build.template(block.cidr),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy: build.template(block.policy),
      }),
      arn: resource.field('arn'),
      cidr: resource.field('cidr'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy: resource.field('policy'),
    },
    ses_receipt_rule(name, block): {
      local resource = blockType.resource('aws_ses_receipt_rule', name),
      _: resource._(block, {
        after: build.template(std.get(block, 'after', null)),
        arn: build.template(std.get(block, 'arn', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recipients: build.template(std.get(block, 'recipients', null)),
        rule_set_name: build.template(block.rule_set_name),
        scan_enabled: build.template(std.get(block, 'scan_enabled', null)),
        tls_policy: build.template(std.get(block, 'tls_policy', null)),
      }),
      after: resource.field('after'),
      arn: resource.field('arn'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      name: resource.field('name'),
      recipients: resource.field('recipients'),
      rule_set_name: resource.field('rule_set_name'),
      scan_enabled: resource.field('scan_enabled'),
      tls_policy: resource.field('tls_policy'),
    },
    ses_receipt_rule_set(name, block): {
      local resource = blockType.resource('aws_ses_receipt_rule_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        rule_set_name: build.template(block.rule_set_name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      rule_set_name: resource.field('rule_set_name'),
    },
    ses_template(name, block): {
      local resource = blockType.resource('aws_ses_template', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        html: build.template(std.get(block, 'html', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subject: build.template(std.get(block, 'subject', null)),
        text: build.template(std.get(block, 'text', null)),
      }),
      arn: resource.field('arn'),
      html: resource.field('html'),
      id: resource.field('id'),
      name: resource.field('name'),
      subject: resource.field('subject'),
      text: resource.field('text'),
    },
    sesv2_account_suppression_attributes(name, block): {
      local resource = blockType.resource('aws_sesv2_account_suppression_attributes', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        suppressed_reasons: build.template(block.suppressed_reasons),
      }),
      id: resource.field('id'),
      suppressed_reasons: resource.field('suppressed_reasons'),
    },
    sesv2_account_vdm_attributes(name, block): {
      local resource = blockType.resource('aws_sesv2_account_vdm_attributes', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        vdm_enabled: build.template(block.vdm_enabled),
      }),
      id: resource.field('id'),
      vdm_enabled: resource.field('vdm_enabled'),
    },
    sesv2_configuration_set(name, block): {
      local resource = blockType.resource('aws_sesv2_configuration_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        configuration_set_name: build.template(block.configuration_set_name),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      configuration_set_name: resource.field('configuration_set_name'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sesv2_configuration_set_event_destination(name, block): {
      local resource = blockType.resource('aws_sesv2_configuration_set_event_destination', name),
      _: resource._(block, {
        configuration_set_name: build.template(block.configuration_set_name),
        event_destination_name: build.template(block.event_destination_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      configuration_set_name: resource.field('configuration_set_name'),
      event_destination_name: resource.field('event_destination_name'),
      id: resource.field('id'),
    },
    sesv2_contact_list(name, block): {
      local resource = blockType.resource('aws_sesv2_contact_list', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        contact_list_name: build.template(block.contact_list_name),
        created_timestamp: build.template(std.get(block, 'created_timestamp', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_timestamp: build.template(std.get(block, 'last_updated_timestamp', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      contact_list_name: resource.field('contact_list_name'),
      created_timestamp: resource.field('created_timestamp'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_updated_timestamp: resource.field('last_updated_timestamp'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sesv2_dedicated_ip_assignment(name, block): {
      local resource = blockType.resource('aws_sesv2_dedicated_ip_assignment', name),
      _: resource._(block, {
        destination_pool_name: build.template(block.destination_pool_name),
        id: build.template(std.get(block, 'id', null)),
        ip: build.template(block.ip),
      }),
      destination_pool_name: resource.field('destination_pool_name'),
      id: resource.field('id'),
      ip: resource.field('ip'),
    },
    sesv2_dedicated_ip_pool(name, block): {
      local resource = blockType.resource('aws_sesv2_dedicated_ip_pool', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        pool_name: build.template(block.pool_name),
        scaling_mode: build.template(std.get(block, 'scaling_mode', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      pool_name: resource.field('pool_name'),
      scaling_mode: resource.field('scaling_mode'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sesv2_email_identity(name, block): {
      local resource = blockType.resource('aws_sesv2_email_identity', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        configuration_set_name: build.template(std.get(block, 'configuration_set_name', null)),
        email_identity: build.template(block.email_identity),
        id: build.template(std.get(block, 'id', null)),
        identity_type: build.template(std.get(block, 'identity_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        verified_for_sending_status: build.template(std.get(block, 'verified_for_sending_status', null)),
      }),
      arn: resource.field('arn'),
      configuration_set_name: resource.field('configuration_set_name'),
      email_identity: resource.field('email_identity'),
      id: resource.field('id'),
      identity_type: resource.field('identity_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      verified_for_sending_status: resource.field('verified_for_sending_status'),
    },
    sesv2_email_identity_feedback_attributes(name, block): {
      local resource = blockType.resource('aws_sesv2_email_identity_feedback_attributes', name),
      _: resource._(block, {
        email_forwarding_enabled: build.template(std.get(block, 'email_forwarding_enabled', null)),
        email_identity: build.template(block.email_identity),
        id: build.template(std.get(block, 'id', null)),
      }),
      email_forwarding_enabled: resource.field('email_forwarding_enabled'),
      email_identity: resource.field('email_identity'),
      id: resource.field('id'),
    },
    sesv2_email_identity_mail_from_attributes(name, block): {
      local resource = blockType.resource('aws_sesv2_email_identity_mail_from_attributes', name),
      _: resource._(block, {
        behavior_on_mx_failure: build.template(std.get(block, 'behavior_on_mx_failure', null)),
        email_identity: build.template(block.email_identity),
        id: build.template(std.get(block, 'id', null)),
        mail_from_domain: build.template(std.get(block, 'mail_from_domain', null)),
      }),
      behavior_on_mx_failure: resource.field('behavior_on_mx_failure'),
      email_identity: resource.field('email_identity'),
      id: resource.field('id'),
      mail_from_domain: resource.field('mail_from_domain'),
    },
    sesv2_email_identity_policy(name, block): {
      local resource = blockType.resource('aws_sesv2_email_identity_policy', name),
      _: resource._(block, {
        email_identity: build.template(block.email_identity),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        policy_name: build.template(block.policy_name),
      }),
      email_identity: resource.field('email_identity'),
      id: resource.field('id'),
      policy: resource.field('policy'),
      policy_name: resource.field('policy_name'),
    },
    sfn_activity(name, block): {
      local resource = blockType.resource('aws_sfn_activity', name),
      _: resource._(block, {
        creation_date: build.template(std.get(block, 'creation_date', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      creation_date: resource.field('creation_date'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    sfn_alias(name, block): {
      local resource = blockType.resource('aws_sfn_alias', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      creation_date: resource.field('creation_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    sfn_state_machine(name, block): {
      local resource = blockType.resource('aws_sfn_state_machine', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        definition: build.template(block.definition),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        publish: build.template(std.get(block, 'publish', null)),
        revision_id: build.template(std.get(block, 'revision_id', null)),
        role_arn: build.template(block.role_arn),
        state_machine_version_arn: build.template(std.get(block, 'state_machine_version_arn', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
        version_description: build.template(std.get(block, 'version_description', null)),
      }),
      arn: resource.field('arn'),
      creation_date: resource.field('creation_date'),
      definition: resource.field('definition'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      publish: resource.field('publish'),
      revision_id: resource.field('revision_id'),
      role_arn: resource.field('role_arn'),
      state_machine_version_arn: resource.field('state_machine_version_arn'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      version_description: resource.field('version_description'),
    },
    shield_application_layer_automatic_response(name, block): {
      local resource = blockType.resource('aws_shield_application_layer_automatic_response', name),
      _: resource._(block, {
        action: build.template(block.action),
        id: build.template(std.get(block, 'id', null)),
        resource_arn: build.template(block.resource_arn),
      }),
      action: resource.field('action'),
      id: resource.field('id'),
      resource_arn: resource.field('resource_arn'),
    },
    shield_drt_access_log_bucket_association(name, block): {
      local resource = blockType.resource('aws_shield_drt_access_log_bucket_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_bucket: build.template(block.log_bucket),
        role_arn_association_id: build.template(block.role_arn_association_id),
      }),
      id: resource.field('id'),
      log_bucket: resource.field('log_bucket'),
      role_arn_association_id: resource.field('role_arn_association_id'),
    },
    shield_drt_access_role_arn_association(name, block): {
      local resource = blockType.resource('aws_shield_drt_access_role_arn_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        role_arn: build.template(block.role_arn),
      }),
      id: resource.field('id'),
      role_arn: resource.field('role_arn'),
    },
    shield_proactive_engagement(name, block): {
      local resource = blockType.resource('aws_shield_proactive_engagement', name),
      _: resource._(block, {
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
      }),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
    },
    shield_protection(name, block): {
      local resource = blockType.resource('aws_shield_protection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_arn: build.template(block.resource_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      resource_arn: resource.field('resource_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    shield_protection_group(name, block): {
      local resource = blockType.resource('aws_shield_protection_group', name),
      _: resource._(block, {
        aggregation: build.template(block.aggregation),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(std.get(block, 'members', null)),
        pattern: build.template(block.pattern),
        protection_group_arn: build.template(std.get(block, 'protection_group_arn', null)),
        protection_group_id: build.template(block.protection_group_id),
        resource_type: build.template(std.get(block, 'resource_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      aggregation: resource.field('aggregation'),
      id: resource.field('id'),
      members: resource.field('members'),
      pattern: resource.field('pattern'),
      protection_group_arn: resource.field('protection_group_arn'),
      protection_group_id: resource.field('protection_group_id'),
      resource_type: resource.field('resource_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    shield_protection_health_check_association(name, block): {
      local resource = blockType.resource('aws_shield_protection_health_check_association', name),
      _: resource._(block, {
        health_check_arn: build.template(block.health_check_arn),
        id: build.template(std.get(block, 'id', null)),
        shield_protection_id: build.template(block.shield_protection_id),
      }),
      health_check_arn: resource.field('health_check_arn'),
      id: resource.field('id'),
      shield_protection_id: resource.field('shield_protection_id'),
    },
    shield_subscription(name, block): {
      local resource = blockType.resource('aws_shield_subscription', name),
      _: resource._(block, {
        auto_renew: build.template(std.get(block, 'auto_renew', null)),
        id: build.template(std.get(block, 'id', null)),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
      }),
      auto_renew: resource.field('auto_renew'),
      id: resource.field('id'),
      skip_destroy: resource.field('skip_destroy'),
    },
    signer_signing_job(name, block): {
      local resource = blockType.resource('aws_signer_signing_job', name),
      _: resource._(block, {
        completed_at: build.template(std.get(block, 'completed_at', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_signing_job_failure: build.template(std.get(block, 'ignore_signing_job_failure', null)),
        job_id: build.template(std.get(block, 'job_id', null)),
        job_invoker: build.template(std.get(block, 'job_invoker', null)),
        job_owner: build.template(std.get(block, 'job_owner', null)),
        platform_display_name: build.template(std.get(block, 'platform_display_name', null)),
        platform_id: build.template(std.get(block, 'platform_id', null)),
        profile_name: build.template(block.profile_name),
        profile_version: build.template(std.get(block, 'profile_version', null)),
        requested_by: build.template(std.get(block, 'requested_by', null)),
        revocation_record: build.template(std.get(block, 'revocation_record', null)),
        signature_expires_at: build.template(std.get(block, 'signature_expires_at', null)),
        signed_object: build.template(std.get(block, 'signed_object', null)),
        status: build.template(std.get(block, 'status', null)),
        status_reason: build.template(std.get(block, 'status_reason', null)),
      }),
      completed_at: resource.field('completed_at'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      ignore_signing_job_failure: resource.field('ignore_signing_job_failure'),
      job_id: resource.field('job_id'),
      job_invoker: resource.field('job_invoker'),
      job_owner: resource.field('job_owner'),
      platform_display_name: resource.field('platform_display_name'),
      platform_id: resource.field('platform_id'),
      profile_name: resource.field('profile_name'),
      profile_version: resource.field('profile_version'),
      requested_by: resource.field('requested_by'),
      revocation_record: resource.field('revocation_record'),
      signature_expires_at: resource.field('signature_expires_at'),
      signed_object: resource.field('signed_object'),
      status: resource.field('status'),
      status_reason: resource.field('status_reason'),
    },
    signer_signing_profile(name, block): {
      local resource = blockType.resource('aws_signer_signing_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        platform_display_name: build.template(std.get(block, 'platform_display_name', null)),
        platform_id: build.template(block.platform_id),
        revocation_record: build.template(std.get(block, 'revocation_record', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        version: build.template(std.get(block, 'version', null)),
        version_arn: build.template(std.get(block, 'version_arn', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      platform_display_name: resource.field('platform_display_name'),
      platform_id: resource.field('platform_id'),
      revocation_record: resource.field('revocation_record'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      version: resource.field('version'),
      version_arn: resource.field('version_arn'),
    },
    signer_signing_profile_permission(name, block): {
      local resource = blockType.resource('aws_signer_signing_profile_permission', name),
      _: resource._(block, {
        action: build.template(block.action),
        id: build.template(std.get(block, 'id', null)),
        principal: build.template(block.principal),
        profile_name: build.template(block.profile_name),
        profile_version: build.template(std.get(block, 'profile_version', null)),
        statement_id: build.template(std.get(block, 'statement_id', null)),
        statement_id_prefix: build.template(std.get(block, 'statement_id_prefix', null)),
      }),
      action: resource.field('action'),
      id: resource.field('id'),
      principal: resource.field('principal'),
      profile_name: resource.field('profile_name'),
      profile_version: resource.field('profile_version'),
      statement_id: resource.field('statement_id'),
      statement_id_prefix: resource.field('statement_id_prefix'),
    },
    simpledb_domain(name, block): {
      local resource = blockType.resource('aws_simpledb_domain', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    snapshot_create_volume_permission(name, block): {
      local resource = blockType.resource('aws_snapshot_create_volume_permission', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        id: build.template(std.get(block, 'id', null)),
        snapshot_id: build.template(block.snapshot_id),
      }),
      account_id: resource.field('account_id'),
      id: resource.field('id'),
      snapshot_id: resource.field('snapshot_id'),
    },
    sns_platform_application(name, block): {
      local resource = blockType.resource('aws_sns_platform_application', name),
      _: resource._(block, {
        apple_platform_bundle_id: build.template(std.get(block, 'apple_platform_bundle_id', null)),
        apple_platform_team_id: build.template(std.get(block, 'apple_platform_team_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        event_delivery_failure_topic_arn: build.template(std.get(block, 'event_delivery_failure_topic_arn', null)),
        event_endpoint_created_topic_arn: build.template(std.get(block, 'event_endpoint_created_topic_arn', null)),
        event_endpoint_deleted_topic_arn: build.template(std.get(block, 'event_endpoint_deleted_topic_arn', null)),
        event_endpoint_updated_topic_arn: build.template(std.get(block, 'event_endpoint_updated_topic_arn', null)),
        failure_feedback_role_arn: build.template(std.get(block, 'failure_feedback_role_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        platform: build.template(block.platform),
        platform_credential: build.template(block.platform_credential),
        platform_principal: build.template(std.get(block, 'platform_principal', null)),
        success_feedback_role_arn: build.template(std.get(block, 'success_feedback_role_arn', null)),
        success_feedback_sample_rate: build.template(std.get(block, 'success_feedback_sample_rate', null)),
      }),
      apple_platform_bundle_id: resource.field('apple_platform_bundle_id'),
      apple_platform_team_id: resource.field('apple_platform_team_id'),
      arn: resource.field('arn'),
      event_delivery_failure_topic_arn: resource.field('event_delivery_failure_topic_arn'),
      event_endpoint_created_topic_arn: resource.field('event_endpoint_created_topic_arn'),
      event_endpoint_deleted_topic_arn: resource.field('event_endpoint_deleted_topic_arn'),
      event_endpoint_updated_topic_arn: resource.field('event_endpoint_updated_topic_arn'),
      failure_feedback_role_arn: resource.field('failure_feedback_role_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      platform: resource.field('platform'),
      platform_credential: resource.field('platform_credential'),
      platform_principal: resource.field('platform_principal'),
      success_feedback_role_arn: resource.field('success_feedback_role_arn'),
      success_feedback_sample_rate: resource.field('success_feedback_sample_rate'),
    },
    sns_sms_preferences(name, block): {
      local resource = blockType.resource('aws_sns_sms_preferences', name),
      _: resource._(block, {
        default_sender_id: build.template(std.get(block, 'default_sender_id', null)),
        default_sms_type: build.template(std.get(block, 'default_sms_type', null)),
        delivery_status_iam_role_arn: build.template(std.get(block, 'delivery_status_iam_role_arn', null)),
        delivery_status_success_sampling_rate: build.template(std.get(block, 'delivery_status_success_sampling_rate', null)),
        id: build.template(std.get(block, 'id', null)),
        monthly_spend_limit: build.template(std.get(block, 'monthly_spend_limit', null)),
        usage_report_s3_bucket: build.template(std.get(block, 'usage_report_s3_bucket', null)),
      }),
      default_sender_id: resource.field('default_sender_id'),
      default_sms_type: resource.field('default_sms_type'),
      delivery_status_iam_role_arn: resource.field('delivery_status_iam_role_arn'),
      delivery_status_success_sampling_rate: resource.field('delivery_status_success_sampling_rate'),
      id: resource.field('id'),
      monthly_spend_limit: resource.field('monthly_spend_limit'),
      usage_report_s3_bucket: resource.field('usage_report_s3_bucket'),
    },
    sns_topic(name, block): {
      local resource = blockType.resource('aws_sns_topic', name),
      _: resource._(block, {
        application_failure_feedback_role_arn: build.template(std.get(block, 'application_failure_feedback_role_arn', null)),
        application_success_feedback_role_arn: build.template(std.get(block, 'application_success_feedback_role_arn', null)),
        application_success_feedback_sample_rate: build.template(std.get(block, 'application_success_feedback_sample_rate', null)),
        archive_policy: build.template(std.get(block, 'archive_policy', null)),
        arn: build.template(std.get(block, 'arn', null)),
        beginning_archive_time: build.template(std.get(block, 'beginning_archive_time', null)),
        content_based_deduplication: build.template(std.get(block, 'content_based_deduplication', null)),
        delivery_policy: build.template(std.get(block, 'delivery_policy', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        fifo_topic: build.template(std.get(block, 'fifo_topic', null)),
        firehose_failure_feedback_role_arn: build.template(std.get(block, 'firehose_failure_feedback_role_arn', null)),
        firehose_success_feedback_role_arn: build.template(std.get(block, 'firehose_success_feedback_role_arn', null)),
        firehose_success_feedback_sample_rate: build.template(std.get(block, 'firehose_success_feedback_sample_rate', null)),
        http_failure_feedback_role_arn: build.template(std.get(block, 'http_failure_feedback_role_arn', null)),
        http_success_feedback_role_arn: build.template(std.get(block, 'http_success_feedback_role_arn', null)),
        http_success_feedback_sample_rate: build.template(std.get(block, 'http_success_feedback_sample_rate', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_master_key_id: build.template(std.get(block, 'kms_master_key_id', null)),
        lambda_failure_feedback_role_arn: build.template(std.get(block, 'lambda_failure_feedback_role_arn', null)),
        lambda_success_feedback_role_arn: build.template(std.get(block, 'lambda_success_feedback_role_arn', null)),
        lambda_success_feedback_sample_rate: build.template(std.get(block, 'lambda_success_feedback_sample_rate', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        owner: build.template(std.get(block, 'owner', null)),
        policy: build.template(std.get(block, 'policy', null)),
        signature_version: build.template(std.get(block, 'signature_version', null)),
        sqs_failure_feedback_role_arn: build.template(std.get(block, 'sqs_failure_feedback_role_arn', null)),
        sqs_success_feedback_role_arn: build.template(std.get(block, 'sqs_success_feedback_role_arn', null)),
        sqs_success_feedback_sample_rate: build.template(std.get(block, 'sqs_success_feedback_sample_rate', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tracing_config: build.template(std.get(block, 'tracing_config', null)),
      }),
      application_failure_feedback_role_arn: resource.field('application_failure_feedback_role_arn'),
      application_success_feedback_role_arn: resource.field('application_success_feedback_role_arn'),
      application_success_feedback_sample_rate: resource.field('application_success_feedback_sample_rate'),
      archive_policy: resource.field('archive_policy'),
      arn: resource.field('arn'),
      beginning_archive_time: resource.field('beginning_archive_time'),
      content_based_deduplication: resource.field('content_based_deduplication'),
      delivery_policy: resource.field('delivery_policy'),
      display_name: resource.field('display_name'),
      fifo_topic: resource.field('fifo_topic'),
      firehose_failure_feedback_role_arn: resource.field('firehose_failure_feedback_role_arn'),
      firehose_success_feedback_role_arn: resource.field('firehose_success_feedback_role_arn'),
      firehose_success_feedback_sample_rate: resource.field('firehose_success_feedback_sample_rate'),
      http_failure_feedback_role_arn: resource.field('http_failure_feedback_role_arn'),
      http_success_feedback_role_arn: resource.field('http_success_feedback_role_arn'),
      http_success_feedback_sample_rate: resource.field('http_success_feedback_sample_rate'),
      id: resource.field('id'),
      kms_master_key_id: resource.field('kms_master_key_id'),
      lambda_failure_feedback_role_arn: resource.field('lambda_failure_feedback_role_arn'),
      lambda_success_feedback_role_arn: resource.field('lambda_success_feedback_role_arn'),
      lambda_success_feedback_sample_rate: resource.field('lambda_success_feedback_sample_rate'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      owner: resource.field('owner'),
      policy: resource.field('policy'),
      signature_version: resource.field('signature_version'),
      sqs_failure_feedback_role_arn: resource.field('sqs_failure_feedback_role_arn'),
      sqs_success_feedback_role_arn: resource.field('sqs_success_feedback_role_arn'),
      sqs_success_feedback_sample_rate: resource.field('sqs_success_feedback_sample_rate'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tracing_config: resource.field('tracing_config'),
    },
    sns_topic_data_protection_policy(name, block): {
      local resource = blockType.resource('aws_sns_topic_data_protection_policy', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      policy: resource.field('policy'),
    },
    sns_topic_policy(name, block): {
      local resource = blockType.resource('aws_sns_topic_policy', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        id: build.template(std.get(block, 'id', null)),
        owner: build.template(std.get(block, 'owner', null)),
        policy: build.template(block.policy),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      owner: resource.field('owner'),
      policy: resource.field('policy'),
    },
    sns_topic_subscription(name, block): {
      local resource = blockType.resource('aws_sns_topic_subscription', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        confirmation_timeout_in_minutes: build.template(std.get(block, 'confirmation_timeout_in_minutes', null)),
        confirmation_was_authenticated: build.template(std.get(block, 'confirmation_was_authenticated', null)),
        delivery_policy: build.template(std.get(block, 'delivery_policy', null)),
        endpoint: build.template(block.endpoint),
        endpoint_auto_confirms: build.template(std.get(block, 'endpoint_auto_confirms', null)),
        filter_policy: build.template(std.get(block, 'filter_policy', null)),
        filter_policy_scope: build.template(std.get(block, 'filter_policy_scope', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        pending_confirmation: build.template(std.get(block, 'pending_confirmation', null)),
        protocol: build.template(block.protocol),
        raw_message_delivery: build.template(std.get(block, 'raw_message_delivery', null)),
        redrive_policy: build.template(std.get(block, 'redrive_policy', null)),
        replay_policy: build.template(std.get(block, 'replay_policy', null)),
        subscription_role_arn: build.template(std.get(block, 'subscription_role_arn', null)),
        topic_arn: build.template(block.topic_arn),
      }),
      arn: resource.field('arn'),
      confirmation_timeout_in_minutes: resource.field('confirmation_timeout_in_minutes'),
      confirmation_was_authenticated: resource.field('confirmation_was_authenticated'),
      delivery_policy: resource.field('delivery_policy'),
      endpoint: resource.field('endpoint'),
      endpoint_auto_confirms: resource.field('endpoint_auto_confirms'),
      filter_policy: resource.field('filter_policy'),
      filter_policy_scope: resource.field('filter_policy_scope'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      pending_confirmation: resource.field('pending_confirmation'),
      protocol: resource.field('protocol'),
      raw_message_delivery: resource.field('raw_message_delivery'),
      redrive_policy: resource.field('redrive_policy'),
      replay_policy: resource.field('replay_policy'),
      subscription_role_arn: resource.field('subscription_role_arn'),
      topic_arn: resource.field('topic_arn'),
    },
    spot_datafeed_subscription(name, block): {
      local resource = blockType.resource('aws_spot_datafeed_subscription', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        id: build.template(std.get(block, 'id', null)),
        prefix: build.template(std.get(block, 'prefix', null)),
      }),
      bucket: resource.field('bucket'),
      id: resource.field('id'),
      prefix: resource.field('prefix'),
    },
    spot_fleet_request(name, block): {
      local resource = blockType.resource('aws_spot_fleet_request', name),
      _: resource._(block, {
        allocation_strategy: build.template(std.get(block, 'allocation_strategy', null)),
        client_token: build.template(std.get(block, 'client_token', null)),
        context: build.template(std.get(block, 'context', null)),
        excess_capacity_termination_policy: build.template(std.get(block, 'excess_capacity_termination_policy', null)),
        fleet_type: build.template(std.get(block, 'fleet_type', null)),
        iam_fleet_role: build.template(block.iam_fleet_role),
        id: build.template(std.get(block, 'id', null)),
        instance_interruption_behaviour: build.template(std.get(block, 'instance_interruption_behaviour', null)),
        instance_pools_to_use_count: build.template(std.get(block, 'instance_pools_to_use_count', null)),
        load_balancers: build.template(std.get(block, 'load_balancers', null)),
        on_demand_allocation_strategy: build.template(std.get(block, 'on_demand_allocation_strategy', null)),
        on_demand_max_total_price: build.template(std.get(block, 'on_demand_max_total_price', null)),
        on_demand_target_capacity: build.template(std.get(block, 'on_demand_target_capacity', null)),
        replace_unhealthy_instances: build.template(std.get(block, 'replace_unhealthy_instances', null)),
        spot_price: build.template(std.get(block, 'spot_price', null)),
        spot_request_state: build.template(std.get(block, 'spot_request_state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_capacity: build.template(block.target_capacity),
        target_capacity_unit_type: build.template(std.get(block, 'target_capacity_unit_type', null)),
        target_group_arns: build.template(std.get(block, 'target_group_arns', null)),
        terminate_instances_on_delete: build.template(std.get(block, 'terminate_instances_on_delete', null)),
        terminate_instances_with_expiration: build.template(std.get(block, 'terminate_instances_with_expiration', null)),
        valid_from: build.template(std.get(block, 'valid_from', null)),
        valid_until: build.template(std.get(block, 'valid_until', null)),
        wait_for_fulfillment: build.template(std.get(block, 'wait_for_fulfillment', null)),
      }),
      allocation_strategy: resource.field('allocation_strategy'),
      client_token: resource.field('client_token'),
      context: resource.field('context'),
      excess_capacity_termination_policy: resource.field('excess_capacity_termination_policy'),
      fleet_type: resource.field('fleet_type'),
      iam_fleet_role: resource.field('iam_fleet_role'),
      id: resource.field('id'),
      instance_interruption_behaviour: resource.field('instance_interruption_behaviour'),
      instance_pools_to_use_count: resource.field('instance_pools_to_use_count'),
      load_balancers: resource.field('load_balancers'),
      on_demand_allocation_strategy: resource.field('on_demand_allocation_strategy'),
      on_demand_max_total_price: resource.field('on_demand_max_total_price'),
      on_demand_target_capacity: resource.field('on_demand_target_capacity'),
      replace_unhealthy_instances: resource.field('replace_unhealthy_instances'),
      spot_price: resource.field('spot_price'),
      spot_request_state: resource.field('spot_request_state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_capacity: resource.field('target_capacity'),
      target_capacity_unit_type: resource.field('target_capacity_unit_type'),
      target_group_arns: resource.field('target_group_arns'),
      terminate_instances_on_delete: resource.field('terminate_instances_on_delete'),
      terminate_instances_with_expiration: resource.field('terminate_instances_with_expiration'),
      valid_from: resource.field('valid_from'),
      valid_until: resource.field('valid_until'),
      wait_for_fulfillment: resource.field('wait_for_fulfillment'),
    },
    spot_instance_request(name, block): {
      local resource = blockType.resource('aws_spot_instance_request', name),
      _: resource._(block, {
        ami: build.template(std.get(block, 'ami', null)),
        arn: build.template(std.get(block, 'arn', null)),
        associate_public_ip_address: build.template(std.get(block, 'associate_public_ip_address', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        block_duration_minutes: build.template(std.get(block, 'block_duration_minutes', null)),
        cpu_core_count: build.template(std.get(block, 'cpu_core_count', null)),
        cpu_threads_per_core: build.template(std.get(block, 'cpu_threads_per_core', null)),
        disable_api_stop: build.template(std.get(block, 'disable_api_stop', null)),
        disable_api_termination: build.template(std.get(block, 'disable_api_termination', null)),
        ebs_optimized: build.template(std.get(block, 'ebs_optimized', null)),
        get_password_data: build.template(std.get(block, 'get_password_data', null)),
        hibernation: build.template(std.get(block, 'hibernation', null)),
        host_id: build.template(std.get(block, 'host_id', null)),
        host_resource_group_arn: build.template(std.get(block, 'host_resource_group_arn', null)),
        iam_instance_profile: build.template(std.get(block, 'iam_instance_profile', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_initiated_shutdown_behavior: build.template(std.get(block, 'instance_initiated_shutdown_behavior', null)),
        instance_interruption_behavior: build.template(std.get(block, 'instance_interruption_behavior', null)),
        instance_state: build.template(std.get(block, 'instance_state', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        ipv6_address_count: build.template(std.get(block, 'ipv6_address_count', null)),
        ipv6_addresses: build.template(std.get(block, 'ipv6_addresses', null)),
        key_name: build.template(std.get(block, 'key_name', null)),
        launch_group: build.template(std.get(block, 'launch_group', null)),
        monitoring: build.template(std.get(block, 'monitoring', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        password_data: build.template(std.get(block, 'password_data', null)),
        placement_group: build.template(std.get(block, 'placement_group', null)),
        placement_partition_number: build.template(std.get(block, 'placement_partition_number', null)),
        primary_network_interface_id: build.template(std.get(block, 'primary_network_interface_id', null)),
        private_dns: build.template(std.get(block, 'private_dns', null)),
        private_ip: build.template(std.get(block, 'private_ip', null)),
        public_dns: build.template(std.get(block, 'public_dns', null)),
        public_ip: build.template(std.get(block, 'public_ip', null)),
        secondary_private_ips: build.template(std.get(block, 'secondary_private_ips', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        source_dest_check: build.template(std.get(block, 'source_dest_check', null)),
        spot_bid_status: build.template(std.get(block, 'spot_bid_status', null)),
        spot_instance_id: build.template(std.get(block, 'spot_instance_id', null)),
        spot_price: build.template(std.get(block, 'spot_price', null)),
        spot_request_state: build.template(std.get(block, 'spot_request_state', null)),
        spot_type: build.template(std.get(block, 'spot_type', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tenancy: build.template(std.get(block, 'tenancy', null)),
        user_data: build.template(std.get(block, 'user_data', null)),
        user_data_base64: build.template(std.get(block, 'user_data_base64', null)),
        user_data_replace_on_change: build.template(std.get(block, 'user_data_replace_on_change', null)),
        valid_from: build.template(std.get(block, 'valid_from', null)),
        valid_until: build.template(std.get(block, 'valid_until', null)),
        volume_tags: build.template(std.get(block, 'volume_tags', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
        wait_for_fulfillment: build.template(std.get(block, 'wait_for_fulfillment', null)),
      }),
      ami: resource.field('ami'),
      arn: resource.field('arn'),
      associate_public_ip_address: resource.field('associate_public_ip_address'),
      availability_zone: resource.field('availability_zone'),
      block_duration_minutes: resource.field('block_duration_minutes'),
      cpu_core_count: resource.field('cpu_core_count'),
      cpu_threads_per_core: resource.field('cpu_threads_per_core'),
      disable_api_stop: resource.field('disable_api_stop'),
      disable_api_termination: resource.field('disable_api_termination'),
      ebs_optimized: resource.field('ebs_optimized'),
      get_password_data: resource.field('get_password_data'),
      hibernation: resource.field('hibernation'),
      host_id: resource.field('host_id'),
      host_resource_group_arn: resource.field('host_resource_group_arn'),
      iam_instance_profile: resource.field('iam_instance_profile'),
      id: resource.field('id'),
      instance_initiated_shutdown_behavior: resource.field('instance_initiated_shutdown_behavior'),
      instance_interruption_behavior: resource.field('instance_interruption_behavior'),
      instance_state: resource.field('instance_state'),
      instance_type: resource.field('instance_type'),
      ipv6_address_count: resource.field('ipv6_address_count'),
      ipv6_addresses: resource.field('ipv6_addresses'),
      key_name: resource.field('key_name'),
      launch_group: resource.field('launch_group'),
      monitoring: resource.field('monitoring'),
      outpost_arn: resource.field('outpost_arn'),
      password_data: resource.field('password_data'),
      placement_group: resource.field('placement_group'),
      placement_partition_number: resource.field('placement_partition_number'),
      primary_network_interface_id: resource.field('primary_network_interface_id'),
      private_dns: resource.field('private_dns'),
      private_ip: resource.field('private_ip'),
      public_dns: resource.field('public_dns'),
      public_ip: resource.field('public_ip'),
      secondary_private_ips: resource.field('secondary_private_ips'),
      security_groups: resource.field('security_groups'),
      source_dest_check: resource.field('source_dest_check'),
      spot_bid_status: resource.field('spot_bid_status'),
      spot_instance_id: resource.field('spot_instance_id'),
      spot_price: resource.field('spot_price'),
      spot_request_state: resource.field('spot_request_state'),
      spot_type: resource.field('spot_type'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tenancy: resource.field('tenancy'),
      user_data: resource.field('user_data'),
      user_data_base64: resource.field('user_data_base64'),
      user_data_replace_on_change: resource.field('user_data_replace_on_change'),
      valid_from: resource.field('valid_from'),
      valid_until: resource.field('valid_until'),
      volume_tags: resource.field('volume_tags'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
      wait_for_fulfillment: resource.field('wait_for_fulfillment'),
    },
    sqs_queue(name, block): {
      local resource = blockType.resource('aws_sqs_queue', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        content_based_deduplication: build.template(std.get(block, 'content_based_deduplication', null)),
        deduplication_scope: build.template(std.get(block, 'deduplication_scope', null)),
        delay_seconds: build.template(std.get(block, 'delay_seconds', null)),
        fifo_queue: build.template(std.get(block, 'fifo_queue', null)),
        fifo_throughput_limit: build.template(std.get(block, 'fifo_throughput_limit', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_data_key_reuse_period_seconds: build.template(std.get(block, 'kms_data_key_reuse_period_seconds', null)),
        kms_master_key_id: build.template(std.get(block, 'kms_master_key_id', null)),
        max_message_size: build.template(std.get(block, 'max_message_size', null)),
        message_retention_seconds: build.template(std.get(block, 'message_retention_seconds', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        policy: build.template(std.get(block, 'policy', null)),
        receive_wait_time_seconds: build.template(std.get(block, 'receive_wait_time_seconds', null)),
        redrive_allow_policy: build.template(std.get(block, 'redrive_allow_policy', null)),
        redrive_policy: build.template(std.get(block, 'redrive_policy', null)),
        sqs_managed_sse_enabled: build.template(std.get(block, 'sqs_managed_sse_enabled', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        url: build.template(std.get(block, 'url', null)),
        visibility_timeout_seconds: build.template(std.get(block, 'visibility_timeout_seconds', null)),
      }),
      arn: resource.field('arn'),
      content_based_deduplication: resource.field('content_based_deduplication'),
      deduplication_scope: resource.field('deduplication_scope'),
      delay_seconds: resource.field('delay_seconds'),
      fifo_queue: resource.field('fifo_queue'),
      fifo_throughput_limit: resource.field('fifo_throughput_limit'),
      id: resource.field('id'),
      kms_data_key_reuse_period_seconds: resource.field('kms_data_key_reuse_period_seconds'),
      kms_master_key_id: resource.field('kms_master_key_id'),
      max_message_size: resource.field('max_message_size'),
      message_retention_seconds: resource.field('message_retention_seconds'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      policy: resource.field('policy'),
      receive_wait_time_seconds: resource.field('receive_wait_time_seconds'),
      redrive_allow_policy: resource.field('redrive_allow_policy'),
      redrive_policy: resource.field('redrive_policy'),
      sqs_managed_sse_enabled: resource.field('sqs_managed_sse_enabled'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      url: resource.field('url'),
      visibility_timeout_seconds: resource.field('visibility_timeout_seconds'),
    },
    sqs_queue_policy(name, block): {
      local resource = blockType.resource('aws_sqs_queue_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        queue_url: build.template(block.queue_url),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      queue_url: resource.field('queue_url'),
    },
    sqs_queue_redrive_allow_policy(name, block): {
      local resource = blockType.resource('aws_sqs_queue_redrive_allow_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        queue_url: build.template(block.queue_url),
        redrive_allow_policy: build.template(block.redrive_allow_policy),
      }),
      id: resource.field('id'),
      queue_url: resource.field('queue_url'),
      redrive_allow_policy: resource.field('redrive_allow_policy'),
    },
    sqs_queue_redrive_policy(name, block): {
      local resource = blockType.resource('aws_sqs_queue_redrive_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        queue_url: build.template(block.queue_url),
        redrive_policy: build.template(block.redrive_policy),
      }),
      id: resource.field('id'),
      queue_url: resource.field('queue_url'),
      redrive_policy: resource.field('redrive_policy'),
    },
    ssm_activation(name, block): {
      local resource = blockType.resource('aws_ssm_activation', name),
      _: resource._(block, {
        activation_code: build.template(std.get(block, 'activation_code', null)),
        description: build.template(std.get(block, 'description', null)),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        expired: build.template(std.get(block, 'expired', null)),
        iam_role: build.template(block.iam_role),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        registration_count: build.template(std.get(block, 'registration_count', null)),
        registration_limit: build.template(std.get(block, 'registration_limit', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      activation_code: resource.field('activation_code'),
      description: resource.field('description'),
      expiration_date: resource.field('expiration_date'),
      expired: resource.field('expired'),
      iam_role: resource.field('iam_role'),
      id: resource.field('id'),
      name: resource.field('name'),
      registration_count: resource.field('registration_count'),
      registration_limit: resource.field('registration_limit'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ssm_association(name, block): {
      local resource = blockType.resource('aws_ssm_association', name),
      _: resource._(block, {
        apply_only_at_cron_interval: build.template(std.get(block, 'apply_only_at_cron_interval', null)),
        arn: build.template(std.get(block, 'arn', null)),
        association_id: build.template(std.get(block, 'association_id', null)),
        association_name: build.template(std.get(block, 'association_name', null)),
        automation_target_parameter_name: build.template(std.get(block, 'automation_target_parameter_name', null)),
        compliance_severity: build.template(std.get(block, 'compliance_severity', null)),
        document_version: build.template(std.get(block, 'document_version', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(std.get(block, 'instance_id', null)),
        max_concurrency: build.template(std.get(block, 'max_concurrency', null)),
        max_errors: build.template(std.get(block, 'max_errors', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        schedule_expression: build.template(std.get(block, 'schedule_expression', null)),
        sync_compliance: build.template(std.get(block, 'sync_compliance', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        wait_for_success_timeout_seconds: build.template(std.get(block, 'wait_for_success_timeout_seconds', null)),
      }),
      apply_only_at_cron_interval: resource.field('apply_only_at_cron_interval'),
      arn: resource.field('arn'),
      association_id: resource.field('association_id'),
      association_name: resource.field('association_name'),
      automation_target_parameter_name: resource.field('automation_target_parameter_name'),
      compliance_severity: resource.field('compliance_severity'),
      document_version: resource.field('document_version'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      max_concurrency: resource.field('max_concurrency'),
      max_errors: resource.field('max_errors'),
      name: resource.field('name'),
      parameters: resource.field('parameters'),
      schedule_expression: resource.field('schedule_expression'),
      sync_compliance: resource.field('sync_compliance'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      wait_for_success_timeout_seconds: resource.field('wait_for_success_timeout_seconds'),
    },
    ssm_default_patch_baseline(name, block): {
      local resource = blockType.resource('aws_ssm_default_patch_baseline', name),
      _: resource._(block, {
        baseline_id: build.template(block.baseline_id),
        id: build.template(std.get(block, 'id', null)),
        operating_system: build.template(block.operating_system),
      }),
      baseline_id: resource.field('baseline_id'),
      id: resource.field('id'),
      operating_system: resource.field('operating_system'),
    },
    ssm_document(name, block): {
      local resource = blockType.resource('aws_ssm_document', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        content: build.template(block.content),
        created_date: build.template(std.get(block, 'created_date', null)),
        default_version: build.template(std.get(block, 'default_version', null)),
        description: build.template(std.get(block, 'description', null)),
        document_format: build.template(std.get(block, 'document_format', null)),
        document_type: build.template(block.document_type),
        document_version: build.template(std.get(block, 'document_version', null)),
        hash: build.template(std.get(block, 'hash', null)),
        hash_type: build.template(std.get(block, 'hash_type', null)),
        id: build.template(std.get(block, 'id', null)),
        latest_version: build.template(std.get(block, 'latest_version', null)),
        name: build.template(block.name),
        owner: build.template(std.get(block, 'owner', null)),
        parameter: build.template(std.get(block, 'parameter', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
        platform_types: build.template(std.get(block, 'platform_types', null)),
        schema_version: build.template(std.get(block, 'schema_version', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_type: build.template(std.get(block, 'target_type', null)),
        version_name: build.template(std.get(block, 'version_name', null)),
      }),
      arn: resource.field('arn'),
      content: resource.field('content'),
      created_date: resource.field('created_date'),
      default_version: resource.field('default_version'),
      description: resource.field('description'),
      document_format: resource.field('document_format'),
      document_type: resource.field('document_type'),
      document_version: resource.field('document_version'),
      hash: resource.field('hash'),
      hash_type: resource.field('hash_type'),
      id: resource.field('id'),
      latest_version: resource.field('latest_version'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      parameter: resource.field('parameter'),
      permissions: resource.field('permissions'),
      platform_types: resource.field('platform_types'),
      schema_version: resource.field('schema_version'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_type: resource.field('target_type'),
      version_name: resource.field('version_name'),
    },
    ssm_maintenance_window(name, block): {
      local resource = blockType.resource('aws_ssm_maintenance_window', name),
      _: resource._(block, {
        allow_unassociated_targets: build.template(std.get(block, 'allow_unassociated_targets', null)),
        cutoff: build.template(block.cutoff),
        description: build.template(std.get(block, 'description', null)),
        duration: build.template(block.duration),
        enabled: build.template(std.get(block, 'enabled', null)),
        end_date: build.template(std.get(block, 'end_date', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        schedule: build.template(block.schedule),
        schedule_offset: build.template(std.get(block, 'schedule_offset', null)),
        schedule_timezone: build.template(std.get(block, 'schedule_timezone', null)),
        start_date: build.template(std.get(block, 'start_date', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      allow_unassociated_targets: resource.field('allow_unassociated_targets'),
      cutoff: resource.field('cutoff'),
      description: resource.field('description'),
      duration: resource.field('duration'),
      enabled: resource.field('enabled'),
      end_date: resource.field('end_date'),
      id: resource.field('id'),
      name: resource.field('name'),
      schedule: resource.field('schedule'),
      schedule_offset: resource.field('schedule_offset'),
      schedule_timezone: resource.field('schedule_timezone'),
      start_date: resource.field('start_date'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ssm_maintenance_window_target(name, block): {
      local resource = blockType.resource('aws_ssm_maintenance_window_target', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        owner_information: build.template(std.get(block, 'owner_information', null)),
        resource_type: build.template(block.resource_type),
        window_id: build.template(block.window_id),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner_information: resource.field('owner_information'),
      resource_type: resource.field('resource_type'),
      window_id: resource.field('window_id'),
    },
    ssm_maintenance_window_task(name, block): {
      local resource = blockType.resource('aws_ssm_maintenance_window_task', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cutoff_behavior: build.template(std.get(block, 'cutoff_behavior', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        max_concurrency: build.template(std.get(block, 'max_concurrency', null)),
        max_errors: build.template(std.get(block, 'max_errors', null)),
        name: build.template(std.get(block, 'name', null)),
        priority: build.template(std.get(block, 'priority', null)),
        service_role_arn: build.template(std.get(block, 'service_role_arn', null)),
        task_arn: build.template(block.task_arn),
        task_type: build.template(block.task_type),
        window_id: build.template(block.window_id),
        window_task_id: build.template(std.get(block, 'window_task_id', null)),
      }),
      arn: resource.field('arn'),
      cutoff_behavior: resource.field('cutoff_behavior'),
      description: resource.field('description'),
      id: resource.field('id'),
      max_concurrency: resource.field('max_concurrency'),
      max_errors: resource.field('max_errors'),
      name: resource.field('name'),
      priority: resource.field('priority'),
      service_role_arn: resource.field('service_role_arn'),
      task_arn: resource.field('task_arn'),
      task_type: resource.field('task_type'),
      window_id: resource.field('window_id'),
      window_task_id: resource.field('window_task_id'),
    },
    ssm_parameter(name, block): {
      local resource = blockType.resource('aws_ssm_parameter', name),
      _: resource._(block, {
        allowed_pattern: build.template(std.get(block, 'allowed_pattern', null)),
        arn: build.template(std.get(block, 'arn', null)),
        data_type: build.template(std.get(block, 'data_type', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        insecure_value: build.template(std.get(block, 'insecure_value', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
        name: build.template(block.name),
        overwrite: build.template(std.get(block, 'overwrite', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tier: build.template(std.get(block, 'tier', null)),
        type: build.template(block.type),
        value: build.template(std.get(block, 'value', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      allowed_pattern: resource.field('allowed_pattern'),
      arn: resource.field('arn'),
      data_type: resource.field('data_type'),
      description: resource.field('description'),
      id: resource.field('id'),
      insecure_value: resource.field('insecure_value'),
      key_id: resource.field('key_id'),
      name: resource.field('name'),
      overwrite: resource.field('overwrite'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tier: resource.field('tier'),
      type: resource.field('type'),
      value: resource.field('value'),
      version: resource.field('version'),
    },
    ssm_patch_baseline(name, block): {
      local resource = blockType.resource('aws_ssm_patch_baseline', name),
      _: resource._(block, {
        approved_patches: build.template(std.get(block, 'approved_patches', null)),
        approved_patches_compliance_level: build.template(std.get(block, 'approved_patches_compliance_level', null)),
        approved_patches_enable_non_security: build.template(std.get(block, 'approved_patches_enable_non_security', null)),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        json: build.template(std.get(block, 'json', null)),
        name: build.template(block.name),
        operating_system: build.template(std.get(block, 'operating_system', null)),
        rejected_patches: build.template(std.get(block, 'rejected_patches', null)),
        rejected_patches_action: build.template(std.get(block, 'rejected_patches_action', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      approved_patches: resource.field('approved_patches'),
      approved_patches_compliance_level: resource.field('approved_patches_compliance_level'),
      approved_patches_enable_non_security: resource.field('approved_patches_enable_non_security'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      json: resource.field('json'),
      name: resource.field('name'),
      operating_system: resource.field('operating_system'),
      rejected_patches: resource.field('rejected_patches'),
      rejected_patches_action: resource.field('rejected_patches_action'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ssm_patch_group(name, block): {
      local resource = blockType.resource('aws_ssm_patch_group', name),
      _: resource._(block, {
        baseline_id: build.template(block.baseline_id),
        id: build.template(std.get(block, 'id', null)),
        patch_group: build.template(block.patch_group),
      }),
      baseline_id: resource.field('baseline_id'),
      id: resource.field('id'),
      patch_group: resource.field('patch_group'),
    },
    ssm_resource_data_sync(name, block): {
      local resource = blockType.resource('aws_ssm_resource_data_sync', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    ssm_service_setting(name, block): {
      local resource = blockType.resource('aws_ssm_service_setting', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        setting_id: build.template(block.setting_id),
        setting_value: build.template(block.setting_value),
        status: build.template(std.get(block, 'status', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      setting_id: resource.field('setting_id'),
      setting_value: resource.field('setting_value'),
      status: resource.field('status'),
    },
    ssmcontacts_contact(name, block): {
      local resource = blockType.resource('aws_ssmcontacts_contact', name),
      _: resource._(block, {
        alias: build.template(block.alias),
        arn: build.template(std.get(block, 'arn', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      alias: resource.field('alias'),
      arn: resource.field('arn'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    ssmcontacts_contact_channel(name, block): {
      local resource = blockType.resource('aws_ssmcontacts_contact_channel', name),
      _: resource._(block, {
        activation_status: build.template(std.get(block, 'activation_status', null)),
        arn: build.template(std.get(block, 'arn', null)),
        contact_id: build.template(block.contact_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        type: build.template(block.type),
      }),
      activation_status: resource.field('activation_status'),
      arn: resource.field('arn'),
      contact_id: resource.field('contact_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      type: resource.field('type'),
    },
    ssmcontacts_plan(name, block): {
      local resource = blockType.resource('aws_ssmcontacts_plan', name),
      _: resource._(block, {
        contact_id: build.template(block.contact_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      contact_id: resource.field('contact_id'),
      id: resource.field('id'),
    },
    ssmcontacts_rotation(name, block): {
      local resource = blockType.resource('aws_ssmcontacts_rotation', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        contact_ids: build.template(block.contact_ids),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        start_time: build.template(std.get(block, 'start_time', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        time_zone_id: build.template(block.time_zone_id),
      }),
      arn: resource.field('arn'),
      contact_ids: resource.field('contact_ids'),
      id: resource.field('id'),
      name: resource.field('name'),
      start_time: resource.field('start_time'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      time_zone_id: resource.field('time_zone_id'),
    },
    ssmincidents_replication_set(name, block): {
      local resource = blockType.resource('aws_ssmincidents_replication_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        deletion_protected: build.template(std.get(block, 'deletion_protected', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified_by: build.template(std.get(block, 'last_modified_by', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_by: resource.field('created_by'),
      deletion_protected: resource.field('deletion_protected'),
      id: resource.field('id'),
      last_modified_by: resource.field('last_modified_by'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ssmincidents_response_plan(name, block): {
      local resource = blockType.resource('aws_ssmincidents_response_plan', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        chat_channel: build.template(std.get(block, 'chat_channel', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        engagements: build.template(std.get(block, 'engagements', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      chat_channel: resource.field('chat_channel'),
      display_name: resource.field('display_name'),
      engagements: resource.field('engagements'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ssmquicksetup_configuration_manager(name, block): {
      local resource = blockType.resource('aws_ssmquicksetup_configuration_manager', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        manager_arn: build.template(std.get(block, 'manager_arn', null)),
        name: build.template(block.name),
        status_summaries: build.template(std.get(block, 'status_summaries', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      description: resource.field('description'),
      manager_arn: resource.field('manager_arn'),
      name: resource.field('name'),
      status_summaries: resource.field('status_summaries'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ssoadmin_account_assignment(name, block): {
      local resource = blockType.resource('aws_ssoadmin_account_assignment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_arn: build.template(block.instance_arn),
        permission_set_arn: build.template(block.permission_set_arn),
        principal_id: build.template(block.principal_id),
        principal_type: build.template(block.principal_type),
        target_id: build.template(block.target_id),
        target_type: build.template(std.get(block, 'target_type', null)),
      }),
      id: resource.field('id'),
      instance_arn: resource.field('instance_arn'),
      permission_set_arn: resource.field('permission_set_arn'),
      principal_id: resource.field('principal_id'),
      principal_type: resource.field('principal_type'),
      target_id: resource.field('target_id'),
      target_type: resource.field('target_type'),
    },
    ssoadmin_application(name, block): {
      local resource = blockType.resource('aws_ssoadmin_application', name),
      _: resource._(block, {
        application_account: build.template(std.get(block, 'application_account', null)),
        application_arn: build.template(std.get(block, 'application_arn', null)),
        application_provider_arn: build.template(block.application_provider_arn),
        client_token: build.template(std.get(block, 'client_token', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_arn: build.template(block.instance_arn),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      application_account: resource.field('application_account'),
      application_arn: resource.field('application_arn'),
      application_provider_arn: resource.field('application_provider_arn'),
      client_token: resource.field('client_token'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_arn: resource.field('instance_arn'),
      name: resource.field('name'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ssoadmin_application_access_scope(name, block): {
      local resource = blockType.resource('aws_ssoadmin_application_access_scope', name),
      _: resource._(block, {
        application_arn: build.template(block.application_arn),
        authorized_targets: build.template(std.get(block, 'authorized_targets', null)),
        id: build.template(std.get(block, 'id', null)),
        scope: build.template(block.scope),
      }),
      application_arn: resource.field('application_arn'),
      authorized_targets: resource.field('authorized_targets'),
      id: resource.field('id'),
      scope: resource.field('scope'),
    },
    ssoadmin_application_assignment(name, block): {
      local resource = blockType.resource('aws_ssoadmin_application_assignment', name),
      _: resource._(block, {
        application_arn: build.template(block.application_arn),
        id: build.template(std.get(block, 'id', null)),
        principal_id: build.template(block.principal_id),
        principal_type: build.template(block.principal_type),
      }),
      application_arn: resource.field('application_arn'),
      id: resource.field('id'),
      principal_id: resource.field('principal_id'),
      principal_type: resource.field('principal_type'),
    },
    ssoadmin_application_assignment_configuration(name, block): {
      local resource = blockType.resource('aws_ssoadmin_application_assignment_configuration', name),
      _: resource._(block, {
        application_arn: build.template(block.application_arn),
        assignment_required: build.template(block.assignment_required),
        id: build.template(std.get(block, 'id', null)),
      }),
      application_arn: resource.field('application_arn'),
      assignment_required: resource.field('assignment_required'),
      id: resource.field('id'),
    },
    ssoadmin_customer_managed_policy_attachment(name, block): {
      local resource = blockType.resource('aws_ssoadmin_customer_managed_policy_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_arn: build.template(block.instance_arn),
        permission_set_arn: build.template(block.permission_set_arn),
      }),
      id: resource.field('id'),
      instance_arn: resource.field('instance_arn'),
      permission_set_arn: resource.field('permission_set_arn'),
    },
    ssoadmin_instance_access_control_attributes(name, block): {
      local resource = blockType.resource('aws_ssoadmin_instance_access_control_attributes', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_arn: build.template(block.instance_arn),
        status: build.template(std.get(block, 'status', null)),
        status_reason: build.template(std.get(block, 'status_reason', null)),
      }),
      id: resource.field('id'),
      instance_arn: resource.field('instance_arn'),
      status: resource.field('status'),
      status_reason: resource.field('status_reason'),
    },
    ssoadmin_managed_policy_attachment(name, block): {
      local resource = blockType.resource('aws_ssoadmin_managed_policy_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_arn: build.template(block.instance_arn),
        managed_policy_arn: build.template(block.managed_policy_arn),
        managed_policy_name: build.template(std.get(block, 'managed_policy_name', null)),
        permission_set_arn: build.template(block.permission_set_arn),
      }),
      id: resource.field('id'),
      instance_arn: resource.field('instance_arn'),
      managed_policy_arn: resource.field('managed_policy_arn'),
      managed_policy_name: resource.field('managed_policy_name'),
      permission_set_arn: resource.field('permission_set_arn'),
    },
    ssoadmin_permission_set(name, block): {
      local resource = blockType.resource('aws_ssoadmin_permission_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_arn: build.template(block.instance_arn),
        name: build.template(block.name),
        relay_state: build.template(std.get(block, 'relay_state', null)),
        session_duration: build.template(std.get(block, 'session_duration', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_arn: resource.field('instance_arn'),
      name: resource.field('name'),
      relay_state: resource.field('relay_state'),
      session_duration: resource.field('session_duration'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    ssoadmin_permission_set_inline_policy(name, block): {
      local resource = blockType.resource('aws_ssoadmin_permission_set_inline_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        inline_policy: build.template(block.inline_policy),
        instance_arn: build.template(block.instance_arn),
        permission_set_arn: build.template(block.permission_set_arn),
      }),
      id: resource.field('id'),
      inline_policy: resource.field('inline_policy'),
      instance_arn: resource.field('instance_arn'),
      permission_set_arn: resource.field('permission_set_arn'),
    },
    ssoadmin_permissions_boundary_attachment(name, block): {
      local resource = blockType.resource('aws_ssoadmin_permissions_boundary_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_arn: build.template(block.instance_arn),
        permission_set_arn: build.template(block.permission_set_arn),
      }),
      id: resource.field('id'),
      instance_arn: resource.field('instance_arn'),
      permission_set_arn: resource.field('permission_set_arn'),
    },
    ssoadmin_trusted_token_issuer(name, block): {
      local resource = blockType.resource('aws_ssoadmin_trusted_token_issuer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        client_token: build.template(std.get(block, 'client_token', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_arn: build.template(block.instance_arn),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        trusted_token_issuer_type: build.template(block.trusted_token_issuer_type),
      }),
      arn: resource.field('arn'),
      client_token: resource.field('client_token'),
      id: resource.field('id'),
      instance_arn: resource.field('instance_arn'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      trusted_token_issuer_type: resource.field('trusted_token_issuer_type'),
    },
    storagegateway_cache(name, block): {
      local resource = blockType.resource('aws_storagegateway_cache', name),
      _: resource._(block, {
        disk_id: build.template(block.disk_id),
        gateway_arn: build.template(block.gateway_arn),
        id: build.template(std.get(block, 'id', null)),
      }),
      disk_id: resource.field('disk_id'),
      gateway_arn: resource.field('gateway_arn'),
      id: resource.field('id'),
    },
    storagegateway_cached_iscsi_volume(name, block): {
      local resource = blockType.resource('aws_storagegateway_cached_iscsi_volume', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        chap_enabled: build.template(std.get(block, 'chap_enabled', null)),
        gateway_arn: build.template(block.gateway_arn),
        id: build.template(std.get(block, 'id', null)),
        kms_encrypted: build.template(std.get(block, 'kms_encrypted', null)),
        kms_key: build.template(std.get(block, 'kms_key', null)),
        lun_number: build.template(std.get(block, 'lun_number', null)),
        network_interface_id: build.template(block.network_interface_id),
        network_interface_port: build.template(std.get(block, 'network_interface_port', null)),
        snapshot_id: build.template(std.get(block, 'snapshot_id', null)),
        source_volume_arn: build.template(std.get(block, 'source_volume_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_arn: build.template(std.get(block, 'target_arn', null)),
        target_name: build.template(block.target_name),
        volume_arn: build.template(std.get(block, 'volume_arn', null)),
        volume_id: build.template(std.get(block, 'volume_id', null)),
        volume_size_in_bytes: build.template(block.volume_size_in_bytes),
      }),
      arn: resource.field('arn'),
      chap_enabled: resource.field('chap_enabled'),
      gateway_arn: resource.field('gateway_arn'),
      id: resource.field('id'),
      kms_encrypted: resource.field('kms_encrypted'),
      kms_key: resource.field('kms_key'),
      lun_number: resource.field('lun_number'),
      network_interface_id: resource.field('network_interface_id'),
      network_interface_port: resource.field('network_interface_port'),
      snapshot_id: resource.field('snapshot_id'),
      source_volume_arn: resource.field('source_volume_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_arn: resource.field('target_arn'),
      target_name: resource.field('target_name'),
      volume_arn: resource.field('volume_arn'),
      volume_id: resource.field('volume_id'),
      volume_size_in_bytes: resource.field('volume_size_in_bytes'),
    },
    storagegateway_file_system_association(name, block): {
      local resource = blockType.resource('aws_storagegateway_file_system_association', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        audit_destination_arn: build.template(std.get(block, 'audit_destination_arn', null)),
        gateway_arn: build.template(block.gateway_arn),
        id: build.template(std.get(block, 'id', null)),
        location_arn: build.template(block.location_arn),
        password: build.template(block.password),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        username: build.template(block.username),
      }),
      arn: resource.field('arn'),
      audit_destination_arn: resource.field('audit_destination_arn'),
      gateway_arn: resource.field('gateway_arn'),
      id: resource.field('id'),
      location_arn: resource.field('location_arn'),
      password: resource.field('password'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      username: resource.field('username'),
    },
    storagegateway_gateway(name, block): {
      local resource = blockType.resource('aws_storagegateway_gateway', name),
      _: resource._(block, {
        activation_key: build.template(std.get(block, 'activation_key', null)),
        arn: build.template(std.get(block, 'arn', null)),
        average_download_rate_limit_in_bits_per_sec: build.template(std.get(block, 'average_download_rate_limit_in_bits_per_sec', null)),
        average_upload_rate_limit_in_bits_per_sec: build.template(std.get(block, 'average_upload_rate_limit_in_bits_per_sec', null)),
        cloudwatch_log_group_arn: build.template(std.get(block, 'cloudwatch_log_group_arn', null)),
        ec2_instance_id: build.template(std.get(block, 'ec2_instance_id', null)),
        endpoint_type: build.template(std.get(block, 'endpoint_type', null)),
        gateway_id: build.template(std.get(block, 'gateway_id', null)),
        gateway_ip_address: build.template(std.get(block, 'gateway_ip_address', null)),
        gateway_name: build.template(block.gateway_name),
        gateway_network_interface: build.template(std.get(block, 'gateway_network_interface', null)),
        gateway_timezone: build.template(block.gateway_timezone),
        gateway_type: build.template(std.get(block, 'gateway_type', null)),
        gateway_vpc_endpoint: build.template(std.get(block, 'gateway_vpc_endpoint', null)),
        host_environment: build.template(std.get(block, 'host_environment', null)),
        id: build.template(std.get(block, 'id', null)),
        medium_changer_type: build.template(std.get(block, 'medium_changer_type', null)),
        smb_file_share_visibility: build.template(std.get(block, 'smb_file_share_visibility', null)),
        smb_guest_password: build.template(std.get(block, 'smb_guest_password', null)),
        smb_security_strategy: build.template(std.get(block, 'smb_security_strategy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tape_drive_type: build.template(std.get(block, 'tape_drive_type', null)),
      }),
      activation_key: resource.field('activation_key'),
      arn: resource.field('arn'),
      average_download_rate_limit_in_bits_per_sec: resource.field('average_download_rate_limit_in_bits_per_sec'),
      average_upload_rate_limit_in_bits_per_sec: resource.field('average_upload_rate_limit_in_bits_per_sec'),
      cloudwatch_log_group_arn: resource.field('cloudwatch_log_group_arn'),
      ec2_instance_id: resource.field('ec2_instance_id'),
      endpoint_type: resource.field('endpoint_type'),
      gateway_id: resource.field('gateway_id'),
      gateway_ip_address: resource.field('gateway_ip_address'),
      gateway_name: resource.field('gateway_name'),
      gateway_network_interface: resource.field('gateway_network_interface'),
      gateway_timezone: resource.field('gateway_timezone'),
      gateway_type: resource.field('gateway_type'),
      gateway_vpc_endpoint: resource.field('gateway_vpc_endpoint'),
      host_environment: resource.field('host_environment'),
      id: resource.field('id'),
      medium_changer_type: resource.field('medium_changer_type'),
      smb_file_share_visibility: resource.field('smb_file_share_visibility'),
      smb_guest_password: resource.field('smb_guest_password'),
      smb_security_strategy: resource.field('smb_security_strategy'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tape_drive_type: resource.field('tape_drive_type'),
    },
    storagegateway_nfs_file_share(name, block): {
      local resource = blockType.resource('aws_storagegateway_nfs_file_share', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        audit_destination_arn: build.template(std.get(block, 'audit_destination_arn', null)),
        bucket_region: build.template(std.get(block, 'bucket_region', null)),
        client_list: build.template(block.client_list),
        default_storage_class: build.template(std.get(block, 'default_storage_class', null)),
        file_share_name: build.template(std.get(block, 'file_share_name', null)),
        fileshare_id: build.template(std.get(block, 'fileshare_id', null)),
        gateway_arn: build.template(block.gateway_arn),
        guess_mime_type_enabled: build.template(std.get(block, 'guess_mime_type_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_encrypted: build.template(std.get(block, 'kms_encrypted', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        location_arn: build.template(block.location_arn),
        notification_policy: build.template(std.get(block, 'notification_policy', null)),
        object_acl: build.template(std.get(block, 'object_acl', null)),
        path: build.template(std.get(block, 'path', null)),
        read_only: build.template(std.get(block, 'read_only', null)),
        requester_pays: build.template(std.get(block, 'requester_pays', null)),
        role_arn: build.template(block.role_arn),
        squash: build.template(std.get(block, 'squash', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_endpoint_dns_name: build.template(std.get(block, 'vpc_endpoint_dns_name', null)),
      }),
      arn: resource.field('arn'),
      audit_destination_arn: resource.field('audit_destination_arn'),
      bucket_region: resource.field('bucket_region'),
      client_list: resource.field('client_list'),
      default_storage_class: resource.field('default_storage_class'),
      file_share_name: resource.field('file_share_name'),
      fileshare_id: resource.field('fileshare_id'),
      gateway_arn: resource.field('gateway_arn'),
      guess_mime_type_enabled: resource.field('guess_mime_type_enabled'),
      id: resource.field('id'),
      kms_encrypted: resource.field('kms_encrypted'),
      kms_key_arn: resource.field('kms_key_arn'),
      location_arn: resource.field('location_arn'),
      notification_policy: resource.field('notification_policy'),
      object_acl: resource.field('object_acl'),
      path: resource.field('path'),
      read_only: resource.field('read_only'),
      requester_pays: resource.field('requester_pays'),
      role_arn: resource.field('role_arn'),
      squash: resource.field('squash'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_endpoint_dns_name: resource.field('vpc_endpoint_dns_name'),
    },
    storagegateway_smb_file_share(name, block): {
      local resource = blockType.resource('aws_storagegateway_smb_file_share', name),
      _: resource._(block, {
        access_based_enumeration: build.template(std.get(block, 'access_based_enumeration', null)),
        admin_user_list: build.template(std.get(block, 'admin_user_list', null)),
        arn: build.template(std.get(block, 'arn', null)),
        audit_destination_arn: build.template(std.get(block, 'audit_destination_arn', null)),
        authentication: build.template(std.get(block, 'authentication', null)),
        bucket_region: build.template(std.get(block, 'bucket_region', null)),
        case_sensitivity: build.template(std.get(block, 'case_sensitivity', null)),
        default_storage_class: build.template(std.get(block, 'default_storage_class', null)),
        file_share_name: build.template(std.get(block, 'file_share_name', null)),
        fileshare_id: build.template(std.get(block, 'fileshare_id', null)),
        gateway_arn: build.template(block.gateway_arn),
        guess_mime_type_enabled: build.template(std.get(block, 'guess_mime_type_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        invalid_user_list: build.template(std.get(block, 'invalid_user_list', null)),
        kms_encrypted: build.template(std.get(block, 'kms_encrypted', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        location_arn: build.template(block.location_arn),
        notification_policy: build.template(std.get(block, 'notification_policy', null)),
        object_acl: build.template(std.get(block, 'object_acl', null)),
        oplocks_enabled: build.template(std.get(block, 'oplocks_enabled', null)),
        path: build.template(std.get(block, 'path', null)),
        read_only: build.template(std.get(block, 'read_only', null)),
        requester_pays: build.template(std.get(block, 'requester_pays', null)),
        role_arn: build.template(block.role_arn),
        smb_acl_enabled: build.template(std.get(block, 'smb_acl_enabled', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        valid_user_list: build.template(std.get(block, 'valid_user_list', null)),
        vpc_endpoint_dns_name: build.template(std.get(block, 'vpc_endpoint_dns_name', null)),
      }),
      access_based_enumeration: resource.field('access_based_enumeration'),
      admin_user_list: resource.field('admin_user_list'),
      arn: resource.field('arn'),
      audit_destination_arn: resource.field('audit_destination_arn'),
      authentication: resource.field('authentication'),
      bucket_region: resource.field('bucket_region'),
      case_sensitivity: resource.field('case_sensitivity'),
      default_storage_class: resource.field('default_storage_class'),
      file_share_name: resource.field('file_share_name'),
      fileshare_id: resource.field('fileshare_id'),
      gateway_arn: resource.field('gateway_arn'),
      guess_mime_type_enabled: resource.field('guess_mime_type_enabled'),
      id: resource.field('id'),
      invalid_user_list: resource.field('invalid_user_list'),
      kms_encrypted: resource.field('kms_encrypted'),
      kms_key_arn: resource.field('kms_key_arn'),
      location_arn: resource.field('location_arn'),
      notification_policy: resource.field('notification_policy'),
      object_acl: resource.field('object_acl'),
      oplocks_enabled: resource.field('oplocks_enabled'),
      path: resource.field('path'),
      read_only: resource.field('read_only'),
      requester_pays: resource.field('requester_pays'),
      role_arn: resource.field('role_arn'),
      smb_acl_enabled: resource.field('smb_acl_enabled'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      valid_user_list: resource.field('valid_user_list'),
      vpc_endpoint_dns_name: resource.field('vpc_endpoint_dns_name'),
    },
    storagegateway_stored_iscsi_volume(name, block): {
      local resource = blockType.resource('aws_storagegateway_stored_iscsi_volume', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        chap_enabled: build.template(std.get(block, 'chap_enabled', null)),
        disk_id: build.template(block.disk_id),
        gateway_arn: build.template(block.gateway_arn),
        id: build.template(std.get(block, 'id', null)),
        kms_encrypted: build.template(std.get(block, 'kms_encrypted', null)),
        kms_key: build.template(std.get(block, 'kms_key', null)),
        lun_number: build.template(std.get(block, 'lun_number', null)),
        network_interface_id: build.template(block.network_interface_id),
        network_interface_port: build.template(std.get(block, 'network_interface_port', null)),
        preserve_existing_data: build.template(block.preserve_existing_data),
        snapshot_id: build.template(std.get(block, 'snapshot_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        target_arn: build.template(std.get(block, 'target_arn', null)),
        target_name: build.template(block.target_name),
        volume_attachment_status: build.template(std.get(block, 'volume_attachment_status', null)),
        volume_id: build.template(std.get(block, 'volume_id', null)),
        volume_size_in_bytes: build.template(std.get(block, 'volume_size_in_bytes', null)),
        volume_status: build.template(std.get(block, 'volume_status', null)),
        volume_type: build.template(std.get(block, 'volume_type', null)),
      }),
      arn: resource.field('arn'),
      chap_enabled: resource.field('chap_enabled'),
      disk_id: resource.field('disk_id'),
      gateway_arn: resource.field('gateway_arn'),
      id: resource.field('id'),
      kms_encrypted: resource.field('kms_encrypted'),
      kms_key: resource.field('kms_key'),
      lun_number: resource.field('lun_number'),
      network_interface_id: resource.field('network_interface_id'),
      network_interface_port: resource.field('network_interface_port'),
      preserve_existing_data: resource.field('preserve_existing_data'),
      snapshot_id: resource.field('snapshot_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      target_arn: resource.field('target_arn'),
      target_name: resource.field('target_name'),
      volume_attachment_status: resource.field('volume_attachment_status'),
      volume_id: resource.field('volume_id'),
      volume_size_in_bytes: resource.field('volume_size_in_bytes'),
      volume_status: resource.field('volume_status'),
      volume_type: resource.field('volume_type'),
    },
    storagegateway_tape_pool(name, block): {
      local resource = blockType.resource('aws_storagegateway_tape_pool', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        pool_name: build.template(block.pool_name),
        retention_lock_time_in_days: build.template(std.get(block, 'retention_lock_time_in_days', null)),
        retention_lock_type: build.template(std.get(block, 'retention_lock_type', null)),
        storage_class: build.template(block.storage_class),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      pool_name: resource.field('pool_name'),
      retention_lock_time_in_days: resource.field('retention_lock_time_in_days'),
      retention_lock_type: resource.field('retention_lock_type'),
      storage_class: resource.field('storage_class'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    storagegateway_upload_buffer(name, block): {
      local resource = blockType.resource('aws_storagegateway_upload_buffer', name),
      _: resource._(block, {
        disk_id: build.template(std.get(block, 'disk_id', null)),
        disk_path: build.template(std.get(block, 'disk_path', null)),
        gateway_arn: build.template(block.gateway_arn),
        id: build.template(std.get(block, 'id', null)),
      }),
      disk_id: resource.field('disk_id'),
      disk_path: resource.field('disk_path'),
      gateway_arn: resource.field('gateway_arn'),
      id: resource.field('id'),
    },
    storagegateway_working_storage(name, block): {
      local resource = blockType.resource('aws_storagegateway_working_storage', name),
      _: resource._(block, {
        disk_id: build.template(block.disk_id),
        gateway_arn: build.template(block.gateway_arn),
        id: build.template(std.get(block, 'id', null)),
      }),
      disk_id: resource.field('disk_id'),
      gateway_arn: resource.field('gateway_arn'),
      id: resource.field('id'),
    },
    subnet(name, block): {
      local resource = blockType.resource('aws_subnet', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        assign_ipv6_address_on_creation: build.template(std.get(block, 'assign_ipv6_address_on_creation', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        availability_zone_id: build.template(std.get(block, 'availability_zone_id', null)),
        cidr_block: build.template(std.get(block, 'cidr_block', null)),
        customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null)),
        enable_dns64: build.template(std.get(block, 'enable_dns64', null)),
        enable_lni_at_device_index: build.template(std.get(block, 'enable_lni_at_device_index', null)),
        enable_resource_name_dns_a_record_on_launch: build.template(std.get(block, 'enable_resource_name_dns_a_record_on_launch', null)),
        enable_resource_name_dns_aaaa_record_on_launch: build.template(std.get(block, 'enable_resource_name_dns_aaaa_record_on_launch', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv6_cidr_block: build.template(std.get(block, 'ipv6_cidr_block', null)),
        ipv6_cidr_block_association_id: build.template(std.get(block, 'ipv6_cidr_block_association_id', null)),
        ipv6_native: build.template(std.get(block, 'ipv6_native', null)),
        map_customer_owned_ip_on_launch: build.template(std.get(block, 'map_customer_owned_ip_on_launch', null)),
        map_public_ip_on_launch: build.template(std.get(block, 'map_public_ip_on_launch', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        private_dns_hostname_type_on_launch: build.template(std.get(block, 'private_dns_hostname_type_on_launch', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      arn: resource.field('arn'),
      assign_ipv6_address_on_creation: resource.field('assign_ipv6_address_on_creation'),
      availability_zone: resource.field('availability_zone'),
      availability_zone_id: resource.field('availability_zone_id'),
      cidr_block: resource.field('cidr_block'),
      customer_owned_ipv4_pool: resource.field('customer_owned_ipv4_pool'),
      enable_dns64: resource.field('enable_dns64'),
      enable_lni_at_device_index: resource.field('enable_lni_at_device_index'),
      enable_resource_name_dns_a_record_on_launch: resource.field('enable_resource_name_dns_a_record_on_launch'),
      enable_resource_name_dns_aaaa_record_on_launch: resource.field('enable_resource_name_dns_aaaa_record_on_launch'),
      id: resource.field('id'),
      ipv6_cidr_block: resource.field('ipv6_cidr_block'),
      ipv6_cidr_block_association_id: resource.field('ipv6_cidr_block_association_id'),
      ipv6_native: resource.field('ipv6_native'),
      map_customer_owned_ip_on_launch: resource.field('map_customer_owned_ip_on_launch'),
      map_public_ip_on_launch: resource.field('map_public_ip_on_launch'),
      outpost_arn: resource.field('outpost_arn'),
      owner_id: resource.field('owner_id'),
      private_dns_hostname_type_on_launch: resource.field('private_dns_hostname_type_on_launch'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    swf_domain(name, block): {
      local resource = blockType.resource('aws_swf_domain', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        workflow_execution_retention_period_in_days: build.template(block.workflow_execution_retention_period_in_days),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      workflow_execution_retention_period_in_days: resource.field('workflow_execution_retention_period_in_days'),
    },
    synthetics_canary(name, block): {
      local resource = blockType.resource('aws_synthetics_canary', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        artifact_s3_location: build.template(block.artifact_s3_location),
        delete_lambda: build.template(std.get(block, 'delete_lambda', null)),
        engine_arn: build.template(std.get(block, 'engine_arn', null)),
        execution_role_arn: build.template(block.execution_role_arn),
        failure_retention_period: build.template(std.get(block, 'failure_retention_period', null)),
        handler: build.template(block.handler),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        runtime_version: build.template(block.runtime_version),
        s3_bucket: build.template(std.get(block, 's3_bucket', null)),
        s3_key: build.template(std.get(block, 's3_key', null)),
        s3_version: build.template(std.get(block, 's3_version', null)),
        source_location_arn: build.template(std.get(block, 'source_location_arn', null)),
        start_canary: build.template(std.get(block, 'start_canary', null)),
        status: build.template(std.get(block, 'status', null)),
        success_retention_period: build.template(std.get(block, 'success_retention_period', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        timeline: build.template(std.get(block, 'timeline', null)),
        zip_file: build.template(std.get(block, 'zip_file', null)),
      }),
      arn: resource.field('arn'),
      artifact_s3_location: resource.field('artifact_s3_location'),
      delete_lambda: resource.field('delete_lambda'),
      engine_arn: resource.field('engine_arn'),
      execution_role_arn: resource.field('execution_role_arn'),
      failure_retention_period: resource.field('failure_retention_period'),
      handler: resource.field('handler'),
      id: resource.field('id'),
      name: resource.field('name'),
      runtime_version: resource.field('runtime_version'),
      s3_bucket: resource.field('s3_bucket'),
      s3_key: resource.field('s3_key'),
      s3_version: resource.field('s3_version'),
      source_location_arn: resource.field('source_location_arn'),
      start_canary: resource.field('start_canary'),
      status: resource.field('status'),
      success_retention_period: resource.field('success_retention_period'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      timeline: resource.field('timeline'),
      zip_file: resource.field('zip_file'),
    },
    synthetics_group(name, block): {
      local resource = blockType.resource('aws_synthetics_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        group_id: build.template(std.get(block, 'group_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      group_id: resource.field('group_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    synthetics_group_association(name, block): {
      local resource = blockType.resource('aws_synthetics_group_association', name),
      _: resource._(block, {
        canary_arn: build.template(block.canary_arn),
        group_arn: build.template(std.get(block, 'group_arn', null)),
        group_id: build.template(std.get(block, 'group_id', null)),
        group_name: build.template(block.group_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      canary_arn: resource.field('canary_arn'),
      group_arn: resource.field('group_arn'),
      group_id: resource.field('group_id'),
      group_name: resource.field('group_name'),
      id: resource.field('id'),
    },
    timestreaminfluxdb_db_instance(name, block): {
      local resource = blockType.resource('aws_timestreaminfluxdb_db_instance', name),
      _: resource._(block, {
        allocated_storage: build.template(block.allocated_storage),
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        bucket: build.template(block.bucket),
        db_instance_type: build.template(block.db_instance_type),
        db_parameter_group_identifier: build.template(std.get(block, 'db_parameter_group_identifier', null)),
        db_storage_type: build.template(std.get(block, 'db_storage_type', null)),
        deployment_type: build.template(std.get(block, 'deployment_type', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        influx_auth_parameters_secret_arn: build.template(std.get(block, 'influx_auth_parameters_secret_arn', null)),
        name: build.template(block.name),
        organization: build.template(block.organization),
        password: build.template(block.password),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        secondary_availability_zone: build.template(std.get(block, 'secondary_availability_zone', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        username: build.template(block.username),
        vpc_security_group_ids: build.template(block.vpc_security_group_ids),
        vpc_subnet_ids: build.template(block.vpc_subnet_ids),
      }),
      allocated_storage: resource.field('allocated_storage'),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      bucket: resource.field('bucket'),
      db_instance_type: resource.field('db_instance_type'),
      db_parameter_group_identifier: resource.field('db_parameter_group_identifier'),
      db_storage_type: resource.field('db_storage_type'),
      deployment_type: resource.field('deployment_type'),
      endpoint: resource.field('endpoint'),
      id: resource.field('id'),
      influx_auth_parameters_secret_arn: resource.field('influx_auth_parameters_secret_arn'),
      name: resource.field('name'),
      organization: resource.field('organization'),
      password: resource.field('password'),
      publicly_accessible: resource.field('publicly_accessible'),
      secondary_availability_zone: resource.field('secondary_availability_zone'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      username: resource.field('username'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
      vpc_subnet_ids: resource.field('vpc_subnet_ids'),
    },
    timestreamwrite_database(name, block): {
      local resource = blockType.resource('aws_timestreamwrite_database', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        database_name: build.template(block.database_name),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        table_count: build.template(std.get(block, 'table_count', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      database_name: resource.field('database_name'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      table_count: resource.field('table_count'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    timestreamwrite_table(name, block): {
      local resource = blockType.resource('aws_timestreamwrite_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        database_name: build.template(block.database_name),
        id: build.template(std.get(block, 'id', null)),
        table_name: build.template(block.table_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      database_name: resource.field('database_name'),
      id: resource.field('id'),
      table_name: resource.field('table_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    transcribe_language_model(name, block): {
      local resource = blockType.resource('aws_transcribe_language_model', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        base_model_name: build.template(block.base_model_name),
        id: build.template(std.get(block, 'id', null)),
        language_code: build.template(block.language_code),
        model_name: build.template(block.model_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      base_model_name: resource.field('base_model_name'),
      id: resource.field('id'),
      language_code: resource.field('language_code'),
      model_name: resource.field('model_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    transcribe_medical_vocabulary(name, block): {
      local resource = blockType.resource('aws_transcribe_medical_vocabulary', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        download_uri: build.template(std.get(block, 'download_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        language_code: build.template(block.language_code),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vocabulary_file_uri: build.template(block.vocabulary_file_uri),
        vocabulary_name: build.template(block.vocabulary_name),
      }),
      arn: resource.field('arn'),
      download_uri: resource.field('download_uri'),
      id: resource.field('id'),
      language_code: resource.field('language_code'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vocabulary_file_uri: resource.field('vocabulary_file_uri'),
      vocabulary_name: resource.field('vocabulary_name'),
    },
    transcribe_vocabulary(name, block): {
      local resource = blockType.resource('aws_transcribe_vocabulary', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        download_uri: build.template(std.get(block, 'download_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        language_code: build.template(block.language_code),
        phrases: build.template(std.get(block, 'phrases', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vocabulary_file_uri: build.template(std.get(block, 'vocabulary_file_uri', null)),
        vocabulary_name: build.template(block.vocabulary_name),
      }),
      arn: resource.field('arn'),
      download_uri: resource.field('download_uri'),
      id: resource.field('id'),
      language_code: resource.field('language_code'),
      phrases: resource.field('phrases'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vocabulary_file_uri: resource.field('vocabulary_file_uri'),
      vocabulary_name: resource.field('vocabulary_name'),
    },
    transcribe_vocabulary_filter(name, block): {
      local resource = blockType.resource('aws_transcribe_vocabulary_filter', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        download_uri: build.template(std.get(block, 'download_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        language_code: build.template(block.language_code),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vocabulary_filter_file_uri: build.template(std.get(block, 'vocabulary_filter_file_uri', null)),
        vocabulary_filter_name: build.template(block.vocabulary_filter_name),
        words: build.template(std.get(block, 'words', null)),
      }),
      arn: resource.field('arn'),
      download_uri: resource.field('download_uri'),
      id: resource.field('id'),
      language_code: resource.field('language_code'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vocabulary_filter_file_uri: resource.field('vocabulary_filter_file_uri'),
      vocabulary_filter_name: resource.field('vocabulary_filter_name'),
      words: resource.field('words'),
    },
    transfer_access(name, block): {
      local resource = blockType.resource('aws_transfer_access', name),
      _: resource._(block, {
        external_id: build.template(block.external_id),
        home_directory: build.template(std.get(block, 'home_directory', null)),
        home_directory_type: build.template(std.get(block, 'home_directory_type', null)),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(std.get(block, 'policy', null)),
        role: build.template(std.get(block, 'role', null)),
        server_id: build.template(block.server_id),
      }),
      external_id: resource.field('external_id'),
      home_directory: resource.field('home_directory'),
      home_directory_type: resource.field('home_directory_type'),
      id: resource.field('id'),
      policy: resource.field('policy'),
      role: resource.field('role'),
      server_id: resource.field('server_id'),
    },
    transfer_agreement(name, block): {
      local resource = blockType.resource('aws_transfer_agreement', name),
      _: resource._(block, {
        access_role: build.template(block.access_role),
        agreement_id: build.template(std.get(block, 'agreement_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        base_directory: build.template(block.base_directory),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        local_profile_id: build.template(block.local_profile_id),
        partner_profile_id: build.template(block.partner_profile_id),
        server_id: build.template(block.server_id),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      access_role: resource.field('access_role'),
      agreement_id: resource.field('agreement_id'),
      arn: resource.field('arn'),
      base_directory: resource.field('base_directory'),
      description: resource.field('description'),
      id: resource.field('id'),
      local_profile_id: resource.field('local_profile_id'),
      partner_profile_id: resource.field('partner_profile_id'),
      server_id: resource.field('server_id'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    transfer_certificate(name, block): {
      local resource = blockType.resource('aws_transfer_certificate', name),
      _: resource._(block, {
        active_date: build.template(std.get(block, 'active_date', null)),
        arn: build.template(std.get(block, 'arn', null)),
        certificate: build.template(block.certificate),
        certificate_chain: build.template(std.get(block, 'certificate_chain', null)),
        certificate_id: build.template(std.get(block, 'certificate_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        inactive_date: build.template(std.get(block, 'inactive_date', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        usage: build.template(block.usage),
      }),
      active_date: resource.field('active_date'),
      arn: resource.field('arn'),
      certificate: resource.field('certificate'),
      certificate_chain: resource.field('certificate_chain'),
      certificate_id: resource.field('certificate_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      inactive_date: resource.field('inactive_date'),
      private_key: resource.field('private_key'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      usage: resource.field('usage'),
    },
    transfer_connector(name, block): {
      local resource = blockType.resource('aws_transfer_connector', name),
      _: resource._(block, {
        access_role: build.template(block.access_role),
        arn: build.template(std.get(block, 'arn', null)),
        connector_id: build.template(std.get(block, 'connector_id', null)),
        id: build.template(std.get(block, 'id', null)),
        logging_role: build.template(std.get(block, 'logging_role', null)),
        security_policy_name: build.template(std.get(block, 'security_policy_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        url: build.template(block.url),
      }),
      access_role: resource.field('access_role'),
      arn: resource.field('arn'),
      connector_id: resource.field('connector_id'),
      id: resource.field('id'),
      logging_role: resource.field('logging_role'),
      security_policy_name: resource.field('security_policy_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      url: resource.field('url'),
    },
    transfer_profile(name, block): {
      local resource = blockType.resource('aws_transfer_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        as2_id: build.template(block.as2_id),
        certificate_ids: build.template(std.get(block, 'certificate_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        profile_id: build.template(std.get(block, 'profile_id', null)),
        profile_type: build.template(block.profile_type),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      as2_id: resource.field('as2_id'),
      certificate_ids: resource.field('certificate_ids'),
      id: resource.field('id'),
      profile_id: resource.field('profile_id'),
      profile_type: resource.field('profile_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    transfer_server(name, block): {
      local resource = blockType.resource('aws_transfer_server', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        certificate: build.template(std.get(block, 'certificate', null)),
        directory_id: build.template(std.get(block, 'directory_id', null)),
        domain: build.template(std.get(block, 'domain', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        endpoint_type: build.template(std.get(block, 'endpoint_type', null)),
        force_destroy: build.template(std.get(block, 'force_destroy', null)),
        'function': build.template(std.get(block, 'function', null)),
        host_key: build.template(std.get(block, 'host_key', null)),
        host_key_fingerprint: build.template(std.get(block, 'host_key_fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_provider_type: build.template(std.get(block, 'identity_provider_type', null)),
        invocation_role: build.template(std.get(block, 'invocation_role', null)),
        logging_role: build.template(std.get(block, 'logging_role', null)),
        post_authentication_login_banner: build.template(std.get(block, 'post_authentication_login_banner', null)),
        pre_authentication_login_banner: build.template(std.get(block, 'pre_authentication_login_banner', null)),
        protocols: build.template(std.get(block, 'protocols', null)),
        security_policy_name: build.template(std.get(block, 'security_policy_name', null)),
        sftp_authentication_methods: build.template(std.get(block, 'sftp_authentication_methods', null)),
        structured_log_destinations: build.template(std.get(block, 'structured_log_destinations', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      arn: resource.field('arn'),
      certificate: resource.field('certificate'),
      directory_id: resource.field('directory_id'),
      domain: resource.field('domain'),
      endpoint: resource.field('endpoint'),
      endpoint_type: resource.field('endpoint_type'),
      force_destroy: resource.field('force_destroy'),
      'function': resource.field('function'),
      host_key: resource.field('host_key'),
      host_key_fingerprint: resource.field('host_key_fingerprint'),
      id: resource.field('id'),
      identity_provider_type: resource.field('identity_provider_type'),
      invocation_role: resource.field('invocation_role'),
      logging_role: resource.field('logging_role'),
      post_authentication_login_banner: resource.field('post_authentication_login_banner'),
      pre_authentication_login_banner: resource.field('pre_authentication_login_banner'),
      protocols: resource.field('protocols'),
      security_policy_name: resource.field('security_policy_name'),
      sftp_authentication_methods: resource.field('sftp_authentication_methods'),
      structured_log_destinations: resource.field('structured_log_destinations'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      url: resource.field('url'),
    },
    transfer_ssh_key(name, block): {
      local resource = blockType.resource('aws_transfer_ssh_key', name),
      _: resource._(block, {
        body: build.template(block.body),
        id: build.template(std.get(block, 'id', null)),
        server_id: build.template(block.server_id),
        ssh_key_id: build.template(std.get(block, 'ssh_key_id', null)),
        user_name: build.template(block.user_name),
      }),
      body: resource.field('body'),
      id: resource.field('id'),
      server_id: resource.field('server_id'),
      ssh_key_id: resource.field('ssh_key_id'),
      user_name: resource.field('user_name'),
    },
    transfer_tag(name, block): {
      local resource = blockType.resource('aws_transfer_tag', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        resource_arn: build.template(block.resource_arn),
        value: build.template(block.value),
      }),
      id: resource.field('id'),
      key: resource.field('key'),
      resource_arn: resource.field('resource_arn'),
      value: resource.field('value'),
    },
    transfer_user(name, block): {
      local resource = blockType.resource('aws_transfer_user', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        home_directory: build.template(std.get(block, 'home_directory', null)),
        home_directory_type: build.template(std.get(block, 'home_directory_type', null)),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(std.get(block, 'policy', null)),
        role: build.template(block.role),
        server_id: build.template(block.server_id),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_name: build.template(block.user_name),
      }),
      arn: resource.field('arn'),
      home_directory: resource.field('home_directory'),
      home_directory_type: resource.field('home_directory_type'),
      id: resource.field('id'),
      policy: resource.field('policy'),
      role: resource.field('role'),
      server_id: resource.field('server_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_name: resource.field('user_name'),
    },
    transfer_workflow(name, block): {
      local resource = blockType.resource('aws_transfer_workflow', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    verifiedaccess_endpoint(name, block): {
      local resource = blockType.resource('aws_verifiedaccess_endpoint', name),
      _: resource._(block, {
        application_domain: build.template(block.application_domain),
        attachment_type: build.template(block.attachment_type),
        description: build.template(std.get(block, 'description', null)),
        device_validation_domain: build.template(std.get(block, 'device_validation_domain', null)),
        domain_certificate_arn: build.template(block.domain_certificate_arn),
        endpoint_domain: build.template(std.get(block, 'endpoint_domain', null)),
        endpoint_domain_prefix: build.template(block.endpoint_domain_prefix),
        endpoint_type: build.template(block.endpoint_type),
        id: build.template(std.get(block, 'id', null)),
        policy_document: build.template(std.get(block, 'policy_document', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        verified_access_group_id: build.template(block.verified_access_group_id),
        verified_access_instance_id: build.template(std.get(block, 'verified_access_instance_id', null)),
      }),
      application_domain: resource.field('application_domain'),
      attachment_type: resource.field('attachment_type'),
      description: resource.field('description'),
      device_validation_domain: resource.field('device_validation_domain'),
      domain_certificate_arn: resource.field('domain_certificate_arn'),
      endpoint_domain: resource.field('endpoint_domain'),
      endpoint_domain_prefix: resource.field('endpoint_domain_prefix'),
      endpoint_type: resource.field('endpoint_type'),
      id: resource.field('id'),
      policy_document: resource.field('policy_document'),
      security_group_ids: resource.field('security_group_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      verified_access_group_id: resource.field('verified_access_group_id'),
      verified_access_instance_id: resource.field('verified_access_instance_id'),
    },
    verifiedaccess_group(name, block): {
      local resource = blockType.resource('aws_verifiedaccess_group', name),
      _: resource._(block, {
        creation_time: build.template(std.get(block, 'creation_time', null)),
        deletion_time: build.template(std.get(block, 'deletion_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        owner: build.template(std.get(block, 'owner', null)),
        policy_document: build.template(std.get(block, 'policy_document', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        verifiedaccess_group_arn: build.template(std.get(block, 'verifiedaccess_group_arn', null)),
        verifiedaccess_group_id: build.template(std.get(block, 'verifiedaccess_group_id', null)),
        verifiedaccess_instance_id: build.template(block.verifiedaccess_instance_id),
      }),
      creation_time: resource.field('creation_time'),
      deletion_time: resource.field('deletion_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_updated_time: resource.field('last_updated_time'),
      owner: resource.field('owner'),
      policy_document: resource.field('policy_document'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      verifiedaccess_group_arn: resource.field('verifiedaccess_group_arn'),
      verifiedaccess_group_id: resource.field('verifiedaccess_group_id'),
      verifiedaccess_instance_id: resource.field('verifiedaccess_instance_id'),
    },
    verifiedaccess_instance(name, block): {
      local resource = blockType.resource('aws_verifiedaccess_instance', name),
      _: resource._(block, {
        creation_time: build.template(std.get(block, 'creation_time', null)),
        description: build.template(std.get(block, 'description', null)),
        fips_enabled: build.template(std.get(block, 'fips_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        verified_access_trust_providers: build.template(std.get(block, 'verified_access_trust_providers', null)),
      }),
      creation_time: resource.field('creation_time'),
      description: resource.field('description'),
      fips_enabled: resource.field('fips_enabled'),
      id: resource.field('id'),
      last_updated_time: resource.field('last_updated_time'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      verified_access_trust_providers: resource.field('verified_access_trust_providers'),
    },
    verifiedaccess_instance_logging_configuration(name, block): {
      local resource = blockType.resource('aws_verifiedaccess_instance_logging_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        verifiedaccess_instance_id: build.template(block.verifiedaccess_instance_id),
      }),
      id: resource.field('id'),
      verifiedaccess_instance_id: resource.field('verifiedaccess_instance_id'),
    },
    verifiedaccess_instance_trust_provider_attachment(name, block): {
      local resource = blockType.resource('aws_verifiedaccess_instance_trust_provider_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        verifiedaccess_instance_id: build.template(block.verifiedaccess_instance_id),
        verifiedaccess_trust_provider_id: build.template(block.verifiedaccess_trust_provider_id),
      }),
      id: resource.field('id'),
      verifiedaccess_instance_id: resource.field('verifiedaccess_instance_id'),
      verifiedaccess_trust_provider_id: resource.field('verifiedaccess_trust_provider_id'),
    },
    verifiedaccess_trust_provider(name, block): {
      local resource = blockType.resource('aws_verifiedaccess_trust_provider', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        device_trust_provider_type: build.template(std.get(block, 'device_trust_provider_type', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_reference_name: build.template(block.policy_reference_name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        trust_provider_type: build.template(block.trust_provider_type),
        user_trust_provider_type: build.template(std.get(block, 'user_trust_provider_type', null)),
      }),
      description: resource.field('description'),
      device_trust_provider_type: resource.field('device_trust_provider_type'),
      id: resource.field('id'),
      policy_reference_name: resource.field('policy_reference_name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      trust_provider_type: resource.field('trust_provider_type'),
      user_trust_provider_type: resource.field('user_trust_provider_type'),
    },
    verifiedpermissions_identity_source(name, block): {
      local resource = blockType.resource('aws_verifiedpermissions_identity_source', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy_store_id: build.template(block.policy_store_id),
        principal_entity_type: build.template(std.get(block, 'principal_entity_type', null)),
      }),
      id: resource.field('id'),
      policy_store_id: resource.field('policy_store_id'),
      principal_entity_type: resource.field('principal_entity_type'),
    },
    verifiedpermissions_policy(name, block): {
      local resource = blockType.resource('aws_verifiedpermissions_policy', name),
      _: resource._(block, {
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_id: build.template(std.get(block, 'policy_id', null)),
        policy_store_id: build.template(block.policy_store_id),
      }),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      policy_id: resource.field('policy_id'),
      policy_store_id: resource.field('policy_store_id'),
    },
    verifiedpermissions_policy_store(name, block): {
      local resource = blockType.resource('aws_verifiedpermissions_policy_store', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_store_id: build.template(std.get(block, 'policy_store_id', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      policy_store_id: resource.field('policy_store_id'),
    },
    verifiedpermissions_policy_template(name, block): {
      local resource = blockType.resource('aws_verifiedpermissions_policy_template', name),
      _: resource._(block, {
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_store_id: build.template(block.policy_store_id),
        policy_template_id: build.template(std.get(block, 'policy_template_id', null)),
        statement: build.template(block.statement),
      }),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      policy_store_id: resource.field('policy_store_id'),
      policy_template_id: resource.field('policy_template_id'),
      statement: resource.field('statement'),
    },
    verifiedpermissions_schema(name, block): {
      local resource = blockType.resource('aws_verifiedpermissions_schema', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        namespaces: build.template(std.get(block, 'namespaces', null)),
        policy_store_id: build.template(block.policy_store_id),
      }),
      id: resource.field('id'),
      namespaces: resource.field('namespaces'),
      policy_store_id: resource.field('policy_store_id'),
    },
    volume_attachment(name, block): {
      local resource = blockType.resource('aws_volume_attachment', name),
      _: resource._(block, {
        device_name: build.template(block.device_name),
        force_detach: build.template(std.get(block, 'force_detach', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        skip_destroy: build.template(std.get(block, 'skip_destroy', null)),
        stop_instance_before_detaching: build.template(std.get(block, 'stop_instance_before_detaching', null)),
        volume_id: build.template(block.volume_id),
      }),
      device_name: resource.field('device_name'),
      force_detach: resource.field('force_detach'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      skip_destroy: resource.field('skip_destroy'),
      stop_instance_before_detaching: resource.field('stop_instance_before_detaching'),
      volume_id: resource.field('volume_id'),
    },
    vpc(name, block): {
      local resource = blockType.resource('aws_vpc', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        assign_generated_ipv6_cidr_block: build.template(std.get(block, 'assign_generated_ipv6_cidr_block', null)),
        cidr_block: build.template(std.get(block, 'cidr_block', null)),
        default_network_acl_id: build.template(std.get(block, 'default_network_acl_id', null)),
        default_route_table_id: build.template(std.get(block, 'default_route_table_id', null)),
        default_security_group_id: build.template(std.get(block, 'default_security_group_id', null)),
        dhcp_options_id: build.template(std.get(block, 'dhcp_options_id', null)),
        enable_dns_hostnames: build.template(std.get(block, 'enable_dns_hostnames', null)),
        enable_dns_support: build.template(std.get(block, 'enable_dns_support', null)),
        enable_network_address_usage_metrics: build.template(std.get(block, 'enable_network_address_usage_metrics', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_tenancy: build.template(std.get(block, 'instance_tenancy', null)),
        ipv4_ipam_pool_id: build.template(std.get(block, 'ipv4_ipam_pool_id', null)),
        ipv4_netmask_length: build.template(std.get(block, 'ipv4_netmask_length', null)),
        ipv6_association_id: build.template(std.get(block, 'ipv6_association_id', null)),
        ipv6_cidr_block: build.template(std.get(block, 'ipv6_cidr_block', null)),
        ipv6_cidr_block_network_border_group: build.template(std.get(block, 'ipv6_cidr_block_network_border_group', null)),
        ipv6_ipam_pool_id: build.template(std.get(block, 'ipv6_ipam_pool_id', null)),
        ipv6_netmask_length: build.template(std.get(block, 'ipv6_netmask_length', null)),
        main_route_table_id: build.template(std.get(block, 'main_route_table_id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      assign_generated_ipv6_cidr_block: resource.field('assign_generated_ipv6_cidr_block'),
      cidr_block: resource.field('cidr_block'),
      default_network_acl_id: resource.field('default_network_acl_id'),
      default_route_table_id: resource.field('default_route_table_id'),
      default_security_group_id: resource.field('default_security_group_id'),
      dhcp_options_id: resource.field('dhcp_options_id'),
      enable_dns_hostnames: resource.field('enable_dns_hostnames'),
      enable_dns_support: resource.field('enable_dns_support'),
      enable_network_address_usage_metrics: resource.field('enable_network_address_usage_metrics'),
      id: resource.field('id'),
      instance_tenancy: resource.field('instance_tenancy'),
      ipv4_ipam_pool_id: resource.field('ipv4_ipam_pool_id'),
      ipv4_netmask_length: resource.field('ipv4_netmask_length'),
      ipv6_association_id: resource.field('ipv6_association_id'),
      ipv6_cidr_block: resource.field('ipv6_cidr_block'),
      ipv6_cidr_block_network_border_group: resource.field('ipv6_cidr_block_network_border_group'),
      ipv6_ipam_pool_id: resource.field('ipv6_ipam_pool_id'),
      ipv6_netmask_length: resource.field('ipv6_netmask_length'),
      main_route_table_id: resource.field('main_route_table_id'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    vpc_dhcp_options(name, block): {
      local resource = blockType.resource('aws_vpc_dhcp_options', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        domain_name_servers: build.template(std.get(block, 'domain_name_servers', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv6_address_preferred_lease_time: build.template(std.get(block, 'ipv6_address_preferred_lease_time', null)),
        netbios_name_servers: build.template(std.get(block, 'netbios_name_servers', null)),
        netbios_node_type: build.template(std.get(block, 'netbios_node_type', null)),
        ntp_servers: build.template(std.get(block, 'ntp_servers', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      domain_name: resource.field('domain_name'),
      domain_name_servers: resource.field('domain_name_servers'),
      id: resource.field('id'),
      ipv6_address_preferred_lease_time: resource.field('ipv6_address_preferred_lease_time'),
      netbios_name_servers: resource.field('netbios_name_servers'),
      netbios_node_type: resource.field('netbios_node_type'),
      ntp_servers: resource.field('ntp_servers'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    vpc_dhcp_options_association(name, block): {
      local resource = blockType.resource('aws_vpc_dhcp_options_association', name),
      _: resource._(block, {
        dhcp_options_id: build.template(block.dhcp_options_id),
        id: build.template(std.get(block, 'id', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      dhcp_options_id: resource.field('dhcp_options_id'),
      id: resource.field('id'),
      vpc_id: resource.field('vpc_id'),
    },
    vpc_endpoint(name, block): {
      local resource = blockType.resource('aws_vpc_endpoint', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_accept: build.template(std.get(block, 'auto_accept', null)),
        cidr_blocks: build.template(std.get(block, 'cidr_blocks', null)),
        dns_entry: build.template(std.get(block, 'dns_entry', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        network_interface_ids: build.template(std.get(block, 'network_interface_ids', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        policy: build.template(std.get(block, 'policy', null)),
        prefix_list_id: build.template(std.get(block, 'prefix_list_id', null)),
        private_dns_enabled: build.template(std.get(block, 'private_dns_enabled', null)),
        requester_managed: build.template(std.get(block, 'requester_managed', null)),
        route_table_ids: build.template(std.get(block, 'route_table_ids', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        service_name: build.template(block.service_name),
        state: build.template(std.get(block, 'state', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_endpoint_type: build.template(std.get(block, 'vpc_endpoint_type', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      arn: resource.field('arn'),
      auto_accept: resource.field('auto_accept'),
      cidr_blocks: resource.field('cidr_blocks'),
      dns_entry: resource.field('dns_entry'),
      id: resource.field('id'),
      ip_address_type: resource.field('ip_address_type'),
      network_interface_ids: resource.field('network_interface_ids'),
      owner_id: resource.field('owner_id'),
      policy: resource.field('policy'),
      prefix_list_id: resource.field('prefix_list_id'),
      private_dns_enabled: resource.field('private_dns_enabled'),
      requester_managed: resource.field('requester_managed'),
      route_table_ids: resource.field('route_table_ids'),
      security_group_ids: resource.field('security_group_ids'),
      service_name: resource.field('service_name'),
      state: resource.field('state'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_endpoint_type: resource.field('vpc_endpoint_type'),
      vpc_id: resource.field('vpc_id'),
    },
    vpc_endpoint_connection_accepter(name, block): {
      local resource = blockType.resource('aws_vpc_endpoint_connection_accepter', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        vpc_endpoint_id: build.template(block.vpc_endpoint_id),
        vpc_endpoint_service_id: build.template(block.vpc_endpoint_service_id),
        vpc_endpoint_state: build.template(std.get(block, 'vpc_endpoint_state', null)),
      }),
      id: resource.field('id'),
      vpc_endpoint_id: resource.field('vpc_endpoint_id'),
      vpc_endpoint_service_id: resource.field('vpc_endpoint_service_id'),
      vpc_endpoint_state: resource.field('vpc_endpoint_state'),
    },
    vpc_endpoint_connection_notification(name, block): {
      local resource = blockType.resource('aws_vpc_endpoint_connection_notification', name),
      _: resource._(block, {
        connection_events: build.template(block.connection_events),
        connection_notification_arn: build.template(block.connection_notification_arn),
        id: build.template(std.get(block, 'id', null)),
        notification_type: build.template(std.get(block, 'notification_type', null)),
        state: build.template(std.get(block, 'state', null)),
        vpc_endpoint_id: build.template(std.get(block, 'vpc_endpoint_id', null)),
        vpc_endpoint_service_id: build.template(std.get(block, 'vpc_endpoint_service_id', null)),
      }),
      connection_events: resource.field('connection_events'),
      connection_notification_arn: resource.field('connection_notification_arn'),
      id: resource.field('id'),
      notification_type: resource.field('notification_type'),
      state: resource.field('state'),
      vpc_endpoint_id: resource.field('vpc_endpoint_id'),
      vpc_endpoint_service_id: resource.field('vpc_endpoint_service_id'),
    },
    vpc_endpoint_policy(name, block): {
      local resource = blockType.resource('aws_vpc_endpoint_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(std.get(block, 'policy', null)),
        vpc_endpoint_id: build.template(block.vpc_endpoint_id),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      vpc_endpoint_id: resource.field('vpc_endpoint_id'),
    },
    vpc_endpoint_private_dns(name, block): {
      local resource = blockType.resource('aws_vpc_endpoint_private_dns', name),
      _: resource._(block, {
        private_dns_enabled: build.template(block.private_dns_enabled),
        vpc_endpoint_id: build.template(block.vpc_endpoint_id),
      }),
      private_dns_enabled: resource.field('private_dns_enabled'),
      vpc_endpoint_id: resource.field('vpc_endpoint_id'),
    },
    vpc_endpoint_route_table_association(name, block): {
      local resource = blockType.resource('aws_vpc_endpoint_route_table_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        route_table_id: build.template(block.route_table_id),
        vpc_endpoint_id: build.template(block.vpc_endpoint_id),
      }),
      id: resource.field('id'),
      route_table_id: resource.field('route_table_id'),
      vpc_endpoint_id: resource.field('vpc_endpoint_id'),
    },
    vpc_endpoint_security_group_association(name, block): {
      local resource = blockType.resource('aws_vpc_endpoint_security_group_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        replace_default_association: build.template(std.get(block, 'replace_default_association', null)),
        security_group_id: build.template(block.security_group_id),
        vpc_endpoint_id: build.template(block.vpc_endpoint_id),
      }),
      id: resource.field('id'),
      replace_default_association: resource.field('replace_default_association'),
      security_group_id: resource.field('security_group_id'),
      vpc_endpoint_id: resource.field('vpc_endpoint_id'),
    },
    vpc_endpoint_service(name, block): {
      local resource = blockType.resource('aws_vpc_endpoint_service', name),
      _: resource._(block, {
        acceptance_required: build.template(block.acceptance_required),
        allowed_principals: build.template(std.get(block, 'allowed_principals', null)),
        arn: build.template(std.get(block, 'arn', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        base_endpoint_dns_names: build.template(std.get(block, 'base_endpoint_dns_names', null)),
        gateway_load_balancer_arns: build.template(std.get(block, 'gateway_load_balancer_arns', null)),
        id: build.template(std.get(block, 'id', null)),
        manages_vpc_endpoints: build.template(std.get(block, 'manages_vpc_endpoints', null)),
        network_load_balancer_arns: build.template(std.get(block, 'network_load_balancer_arns', null)),
        private_dns_name: build.template(std.get(block, 'private_dns_name', null)),
        private_dns_name_configuration: build.template(std.get(block, 'private_dns_name_configuration', null)),
        service_name: build.template(std.get(block, 'service_name', null)),
        service_type: build.template(std.get(block, 'service_type', null)),
        state: build.template(std.get(block, 'state', null)),
        supported_ip_address_types: build.template(std.get(block, 'supported_ip_address_types', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      acceptance_required: resource.field('acceptance_required'),
      allowed_principals: resource.field('allowed_principals'),
      arn: resource.field('arn'),
      availability_zones: resource.field('availability_zones'),
      base_endpoint_dns_names: resource.field('base_endpoint_dns_names'),
      gateway_load_balancer_arns: resource.field('gateway_load_balancer_arns'),
      id: resource.field('id'),
      manages_vpc_endpoints: resource.field('manages_vpc_endpoints'),
      network_load_balancer_arns: resource.field('network_load_balancer_arns'),
      private_dns_name: resource.field('private_dns_name'),
      private_dns_name_configuration: resource.field('private_dns_name_configuration'),
      service_name: resource.field('service_name'),
      service_type: resource.field('service_type'),
      state: resource.field('state'),
      supported_ip_address_types: resource.field('supported_ip_address_types'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    vpc_endpoint_service_allowed_principal(name, block): {
      local resource = blockType.resource('aws_vpc_endpoint_service_allowed_principal', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        principal_arn: build.template(block.principal_arn),
        vpc_endpoint_service_id: build.template(block.vpc_endpoint_service_id),
      }),
      id: resource.field('id'),
      principal_arn: resource.field('principal_arn'),
      vpc_endpoint_service_id: resource.field('vpc_endpoint_service_id'),
    },
    vpc_endpoint_service_private_dns_verification(name, block): {
      local resource = blockType.resource('aws_vpc_endpoint_service_private_dns_verification', name),
      _: resource._(block, {
        service_id: build.template(block.service_id),
        wait_for_verification: build.template(std.get(block, 'wait_for_verification', null)),
      }),
      service_id: resource.field('service_id'),
      wait_for_verification: resource.field('wait_for_verification'),
    },
    vpc_endpoint_subnet_association(name, block): {
      local resource = blockType.resource('aws_vpc_endpoint_subnet_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        subnet_id: build.template(block.subnet_id),
        vpc_endpoint_id: build.template(block.vpc_endpoint_id),
      }),
      id: resource.field('id'),
      subnet_id: resource.field('subnet_id'),
      vpc_endpoint_id: resource.field('vpc_endpoint_id'),
    },
    vpc_ipam(name, block): {
      local resource = blockType.resource('aws_vpc_ipam', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cascade: build.template(std.get(block, 'cascade', null)),
        default_resource_discovery_association_id: build.template(std.get(block, 'default_resource_discovery_association_id', null)),
        default_resource_discovery_id: build.template(std.get(block, 'default_resource_discovery_id', null)),
        description: build.template(std.get(block, 'description', null)),
        enable_private_gua: build.template(std.get(block, 'enable_private_gua', null)),
        id: build.template(std.get(block, 'id', null)),
        private_default_scope_id: build.template(std.get(block, 'private_default_scope_id', null)),
        public_default_scope_id: build.template(std.get(block, 'public_default_scope_id', null)),
        scope_count: build.template(std.get(block, 'scope_count', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        tier: build.template(std.get(block, 'tier', null)),
      }),
      arn: resource.field('arn'),
      cascade: resource.field('cascade'),
      default_resource_discovery_association_id: resource.field('default_resource_discovery_association_id'),
      default_resource_discovery_id: resource.field('default_resource_discovery_id'),
      description: resource.field('description'),
      enable_private_gua: resource.field('enable_private_gua'),
      id: resource.field('id'),
      private_default_scope_id: resource.field('private_default_scope_id'),
      public_default_scope_id: resource.field('public_default_scope_id'),
      scope_count: resource.field('scope_count'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      tier: resource.field('tier'),
    },
    vpc_ipam_organization_admin_account(name, block): {
      local resource = blockType.resource('aws_vpc_ipam_organization_admin_account', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        delegated_admin_account_id: build.template(block.delegated_admin_account_id),
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        service_principal: build.template(std.get(block, 'service_principal', null)),
      }),
      arn: resource.field('arn'),
      delegated_admin_account_id: resource.field('delegated_admin_account_id'),
      email: resource.field('email'),
      id: resource.field('id'),
      name: resource.field('name'),
      service_principal: resource.field('service_principal'),
    },
    vpc_ipam_pool(name, block): {
      local resource = blockType.resource('aws_vpc_ipam_pool', name),
      _: resource._(block, {
        address_family: build.template(block.address_family),
        allocation_default_netmask_length: build.template(std.get(block, 'allocation_default_netmask_length', null)),
        allocation_max_netmask_length: build.template(std.get(block, 'allocation_max_netmask_length', null)),
        allocation_min_netmask_length: build.template(std.get(block, 'allocation_min_netmask_length', null)),
        allocation_resource_tags: build.template(std.get(block, 'allocation_resource_tags', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_import: build.template(std.get(block, 'auto_import', null)),
        aws_service: build.template(std.get(block, 'aws_service', null)),
        cascade: build.template(std.get(block, 'cascade', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        ipam_scope_id: build.template(block.ipam_scope_id),
        ipam_scope_type: build.template(std.get(block, 'ipam_scope_type', null)),
        locale: build.template(std.get(block, 'locale', null)),
        pool_depth: build.template(std.get(block, 'pool_depth', null)),
        public_ip_source: build.template(std.get(block, 'public_ip_source', null)),
        publicly_advertisable: build.template(std.get(block, 'publicly_advertisable', null)),
        source_ipam_pool_id: build.template(std.get(block, 'source_ipam_pool_id', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      address_family: resource.field('address_family'),
      allocation_default_netmask_length: resource.field('allocation_default_netmask_length'),
      allocation_max_netmask_length: resource.field('allocation_max_netmask_length'),
      allocation_min_netmask_length: resource.field('allocation_min_netmask_length'),
      allocation_resource_tags: resource.field('allocation_resource_tags'),
      arn: resource.field('arn'),
      auto_import: resource.field('auto_import'),
      aws_service: resource.field('aws_service'),
      cascade: resource.field('cascade'),
      description: resource.field('description'),
      id: resource.field('id'),
      ipam_scope_id: resource.field('ipam_scope_id'),
      ipam_scope_type: resource.field('ipam_scope_type'),
      locale: resource.field('locale'),
      pool_depth: resource.field('pool_depth'),
      public_ip_source: resource.field('public_ip_source'),
      publicly_advertisable: resource.field('publicly_advertisable'),
      source_ipam_pool_id: resource.field('source_ipam_pool_id'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    vpc_ipam_pool_cidr(name, block): {
      local resource = blockType.resource('aws_vpc_ipam_pool_cidr', name),
      _: resource._(block, {
        cidr: build.template(std.get(block, 'cidr', null)),
        id: build.template(std.get(block, 'id', null)),
        ipam_pool_cidr_id: build.template(std.get(block, 'ipam_pool_cidr_id', null)),
        ipam_pool_id: build.template(block.ipam_pool_id),
        netmask_length: build.template(std.get(block, 'netmask_length', null)),
      }),
      cidr: resource.field('cidr'),
      id: resource.field('id'),
      ipam_pool_cidr_id: resource.field('ipam_pool_cidr_id'),
      ipam_pool_id: resource.field('ipam_pool_id'),
      netmask_length: resource.field('netmask_length'),
    },
    vpc_ipam_pool_cidr_allocation(name, block): {
      local resource = blockType.resource('aws_vpc_ipam_pool_cidr_allocation', name),
      _: resource._(block, {
        cidr: build.template(std.get(block, 'cidr', null)),
        description: build.template(std.get(block, 'description', null)),
        disallowed_cidrs: build.template(std.get(block, 'disallowed_cidrs', null)),
        id: build.template(std.get(block, 'id', null)),
        ipam_pool_allocation_id: build.template(std.get(block, 'ipam_pool_allocation_id', null)),
        ipam_pool_id: build.template(block.ipam_pool_id),
        netmask_length: build.template(std.get(block, 'netmask_length', null)),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        resource_type: build.template(std.get(block, 'resource_type', null)),
      }),
      cidr: resource.field('cidr'),
      description: resource.field('description'),
      disallowed_cidrs: resource.field('disallowed_cidrs'),
      id: resource.field('id'),
      ipam_pool_allocation_id: resource.field('ipam_pool_allocation_id'),
      ipam_pool_id: resource.field('ipam_pool_id'),
      netmask_length: resource.field('netmask_length'),
      resource_id: resource.field('resource_id'),
      resource_owner: resource.field('resource_owner'),
      resource_type: resource.field('resource_type'),
    },
    vpc_ipam_preview_next_cidr(name, block): {
      local resource = blockType.resource('aws_vpc_ipam_preview_next_cidr', name),
      _: resource._(block, {
        cidr: build.template(std.get(block, 'cidr', null)),
        disallowed_cidrs: build.template(std.get(block, 'disallowed_cidrs', null)),
        id: build.template(std.get(block, 'id', null)),
        ipam_pool_id: build.template(block.ipam_pool_id),
        netmask_length: build.template(std.get(block, 'netmask_length', null)),
      }),
      cidr: resource.field('cidr'),
      disallowed_cidrs: resource.field('disallowed_cidrs'),
      id: resource.field('id'),
      ipam_pool_id: resource.field('ipam_pool_id'),
      netmask_length: resource.field('netmask_length'),
    },
    vpc_ipam_resource_discovery(name, block): {
      local resource = blockType.resource('aws_vpc_ipam_resource_discovery', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        ipam_resource_discovery_region: build.template(std.get(block, 'ipam_resource_discovery_region', null)),
        is_default: build.template(std.get(block, 'is_default', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      ipam_resource_discovery_region: resource.field('ipam_resource_discovery_region'),
      is_default: resource.field('is_default'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    vpc_ipam_resource_discovery_association(name, block): {
      local resource = blockType.resource('aws_vpc_ipam_resource_discovery_association', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        ipam_arn: build.template(std.get(block, 'ipam_arn', null)),
        ipam_id: build.template(block.ipam_id),
        ipam_region: build.template(std.get(block, 'ipam_region', null)),
        ipam_resource_discovery_id: build.template(block.ipam_resource_discovery_id),
        is_default: build.template(std.get(block, 'is_default', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      ipam_arn: resource.field('ipam_arn'),
      ipam_id: resource.field('ipam_id'),
      ipam_region: resource.field('ipam_region'),
      ipam_resource_discovery_id: resource.field('ipam_resource_discovery_id'),
      is_default: resource.field('is_default'),
      owner_id: resource.field('owner_id'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    vpc_ipam_scope(name, block): {
      local resource = blockType.resource('aws_vpc_ipam_scope', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        ipam_arn: build.template(std.get(block, 'ipam_arn', null)),
        ipam_id: build.template(block.ipam_id),
        ipam_scope_type: build.template(std.get(block, 'ipam_scope_type', null)),
        is_default: build.template(std.get(block, 'is_default', null)),
        pool_count: build.template(std.get(block, 'pool_count', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      ipam_arn: resource.field('ipam_arn'),
      ipam_id: resource.field('ipam_id'),
      ipam_scope_type: resource.field('ipam_scope_type'),
      is_default: resource.field('is_default'),
      pool_count: resource.field('pool_count'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    vpc_ipv4_cidr_block_association(name, block): {
      local resource = blockType.resource('aws_vpc_ipv4_cidr_block_association', name),
      _: resource._(block, {
        cidr_block: build.template(std.get(block, 'cidr_block', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv4_ipam_pool_id: build.template(std.get(block, 'ipv4_ipam_pool_id', null)),
        ipv4_netmask_length: build.template(std.get(block, 'ipv4_netmask_length', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      cidr_block: resource.field('cidr_block'),
      id: resource.field('id'),
      ipv4_ipam_pool_id: resource.field('ipv4_ipam_pool_id'),
      ipv4_netmask_length: resource.field('ipv4_netmask_length'),
      vpc_id: resource.field('vpc_id'),
    },
    vpc_ipv6_cidr_block_association(name, block): {
      local resource = blockType.resource('aws_vpc_ipv6_cidr_block_association', name),
      _: resource._(block, {
        assign_generated_ipv6_cidr_block: build.template(std.get(block, 'assign_generated_ipv6_cidr_block', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_source: build.template(std.get(block, 'ip_source', null)),
        ipv6_address_attribute: build.template(std.get(block, 'ipv6_address_attribute', null)),
        ipv6_cidr_block: build.template(std.get(block, 'ipv6_cidr_block', null)),
        ipv6_ipam_pool_id: build.template(std.get(block, 'ipv6_ipam_pool_id', null)),
        ipv6_netmask_length: build.template(std.get(block, 'ipv6_netmask_length', null)),
        ipv6_pool: build.template(std.get(block, 'ipv6_pool', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      assign_generated_ipv6_cidr_block: resource.field('assign_generated_ipv6_cidr_block'),
      id: resource.field('id'),
      ip_source: resource.field('ip_source'),
      ipv6_address_attribute: resource.field('ipv6_address_attribute'),
      ipv6_cidr_block: resource.field('ipv6_cidr_block'),
      ipv6_ipam_pool_id: resource.field('ipv6_ipam_pool_id'),
      ipv6_netmask_length: resource.field('ipv6_netmask_length'),
      ipv6_pool: resource.field('ipv6_pool'),
      vpc_id: resource.field('vpc_id'),
    },
    vpc_network_performance_metric_subscription(name, block): {
      local resource = blockType.resource('aws_vpc_network_performance_metric_subscription', name),
      _: resource._(block, {
        destination: build.template(block.destination),
        id: build.template(std.get(block, 'id', null)),
        metric: build.template(std.get(block, 'metric', null)),
        period: build.template(std.get(block, 'period', null)),
        source: build.template(block.source),
        statistic: build.template(std.get(block, 'statistic', null)),
      }),
      destination: resource.field('destination'),
      id: resource.field('id'),
      metric: resource.field('metric'),
      period: resource.field('period'),
      source: resource.field('source'),
      statistic: resource.field('statistic'),
    },
    vpc_peering_connection(name, block): {
      local resource = blockType.resource('aws_vpc_peering_connection', name),
      _: resource._(block, {
        accept_status: build.template(std.get(block, 'accept_status', null)),
        auto_accept: build.template(std.get(block, 'auto_accept', null)),
        id: build.template(std.get(block, 'id', null)),
        peer_owner_id: build.template(std.get(block, 'peer_owner_id', null)),
        peer_region: build.template(std.get(block, 'peer_region', null)),
        peer_vpc_id: build.template(block.peer_vpc_id),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      accept_status: resource.field('accept_status'),
      auto_accept: resource.field('auto_accept'),
      id: resource.field('id'),
      peer_owner_id: resource.field('peer_owner_id'),
      peer_region: resource.field('peer_region'),
      peer_vpc_id: resource.field('peer_vpc_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    vpc_peering_connection_accepter(name, block): {
      local resource = blockType.resource('aws_vpc_peering_connection_accepter', name),
      _: resource._(block, {
        accept_status: build.template(std.get(block, 'accept_status', null)),
        auto_accept: build.template(std.get(block, 'auto_accept', null)),
        id: build.template(std.get(block, 'id', null)),
        peer_owner_id: build.template(std.get(block, 'peer_owner_id', null)),
        peer_region: build.template(std.get(block, 'peer_region', null)),
        peer_vpc_id: build.template(std.get(block, 'peer_vpc_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        vpc_peering_connection_id: build.template(block.vpc_peering_connection_id),
      }),
      accept_status: resource.field('accept_status'),
      auto_accept: resource.field('auto_accept'),
      id: resource.field('id'),
      peer_owner_id: resource.field('peer_owner_id'),
      peer_region: resource.field('peer_region'),
      peer_vpc_id: resource.field('peer_vpc_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
      vpc_peering_connection_id: resource.field('vpc_peering_connection_id'),
    },
    vpc_peering_connection_options(name, block): {
      local resource = blockType.resource('aws_vpc_peering_connection_options', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        vpc_peering_connection_id: build.template(block.vpc_peering_connection_id),
      }),
      id: resource.field('id'),
      vpc_peering_connection_id: resource.field('vpc_peering_connection_id'),
    },
    vpc_security_group_egress_rule(name, block): {
      local resource = blockType.resource('aws_vpc_security_group_egress_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cidr_ipv4: build.template(std.get(block, 'cidr_ipv4', null)),
        cidr_ipv6: build.template(std.get(block, 'cidr_ipv6', null)),
        description: build.template(std.get(block, 'description', null)),
        from_port: build.template(std.get(block, 'from_port', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_protocol: build.template(block.ip_protocol),
        prefix_list_id: build.template(std.get(block, 'prefix_list_id', null)),
        referenced_security_group_id: build.template(std.get(block, 'referenced_security_group_id', null)),
        security_group_id: build.template(block.security_group_id),
        security_group_rule_id: build.template(std.get(block, 'security_group_rule_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        to_port: build.template(std.get(block, 'to_port', null)),
      }),
      arn: resource.field('arn'),
      cidr_ipv4: resource.field('cidr_ipv4'),
      cidr_ipv6: resource.field('cidr_ipv6'),
      description: resource.field('description'),
      from_port: resource.field('from_port'),
      id: resource.field('id'),
      ip_protocol: resource.field('ip_protocol'),
      prefix_list_id: resource.field('prefix_list_id'),
      referenced_security_group_id: resource.field('referenced_security_group_id'),
      security_group_id: resource.field('security_group_id'),
      security_group_rule_id: resource.field('security_group_rule_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      to_port: resource.field('to_port'),
    },
    vpc_security_group_ingress_rule(name, block): {
      local resource = blockType.resource('aws_vpc_security_group_ingress_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cidr_ipv4: build.template(std.get(block, 'cidr_ipv4', null)),
        cidr_ipv6: build.template(std.get(block, 'cidr_ipv6', null)),
        description: build.template(std.get(block, 'description', null)),
        from_port: build.template(std.get(block, 'from_port', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_protocol: build.template(block.ip_protocol),
        prefix_list_id: build.template(std.get(block, 'prefix_list_id', null)),
        referenced_security_group_id: build.template(std.get(block, 'referenced_security_group_id', null)),
        security_group_id: build.template(block.security_group_id),
        security_group_rule_id: build.template(std.get(block, 'security_group_rule_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        to_port: build.template(std.get(block, 'to_port', null)),
      }),
      arn: resource.field('arn'),
      cidr_ipv4: resource.field('cidr_ipv4'),
      cidr_ipv6: resource.field('cidr_ipv6'),
      description: resource.field('description'),
      from_port: resource.field('from_port'),
      id: resource.field('id'),
      ip_protocol: resource.field('ip_protocol'),
      prefix_list_id: resource.field('prefix_list_id'),
      referenced_security_group_id: resource.field('referenced_security_group_id'),
      security_group_id: resource.field('security_group_id'),
      security_group_rule_id: resource.field('security_group_rule_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      to_port: resource.field('to_port'),
    },
    vpc_security_group_vpc_association(name, block): {
      local resource = blockType.resource('aws_vpc_security_group_vpc_association', name),
      _: resource._(block, {
        security_group_id: build.template(block.security_group_id),
        state: build.template(std.get(block, 'state', null)),
        vpc_id: build.template(block.vpc_id),
      }),
      security_group_id: resource.field('security_group_id'),
      state: resource.field('state'),
      vpc_id: resource.field('vpc_id'),
    },
    vpclattice_access_log_subscription(name, block): {
      local resource = blockType.resource('aws_vpclattice_access_log_subscription', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        destination_arn: build.template(block.destination_arn),
        id: build.template(std.get(block, 'id', null)),
        resource_arn: build.template(std.get(block, 'resource_arn', null)),
        resource_identifier: build.template(block.resource_identifier),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      destination_arn: resource.field('destination_arn'),
      id: resource.field('id'),
      resource_arn: resource.field('resource_arn'),
      resource_identifier: resource.field('resource_identifier'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    vpclattice_auth_policy(name, block): {
      local resource = blockType.resource('aws_vpclattice_auth_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        resource_identifier: build.template(block.resource_identifier),
        state: build.template(std.get(block, 'state', null)),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      resource_identifier: resource.field('resource_identifier'),
      state: resource.field('state'),
    },
    vpclattice_listener(name, block): {
      local resource = blockType.resource('aws_vpclattice_listener', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_at: build.template(std.get(block, 'last_updated_at', null)),
        listener_id: build.template(std.get(block, 'listener_id', null)),
        name: build.template(block.name),
        port: build.template(std.get(block, 'port', null)),
        protocol: build.template(block.protocol),
        service_arn: build.template(std.get(block, 'service_arn', null)),
        service_identifier: build.template(std.get(block, 'service_identifier', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      last_updated_at: resource.field('last_updated_at'),
      listener_id: resource.field('listener_id'),
      name: resource.field('name'),
      port: resource.field('port'),
      protocol: resource.field('protocol'),
      service_arn: resource.field('service_arn'),
      service_identifier: resource.field('service_identifier'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    vpclattice_listener_rule(name, block): {
      local resource = blockType.resource('aws_vpclattice_listener_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        listener_identifier: build.template(block.listener_identifier),
        name: build.template(block.name),
        priority: build.template(block.priority),
        rule_id: build.template(std.get(block, 'rule_id', null)),
        service_identifier: build.template(block.service_identifier),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      listener_identifier: resource.field('listener_identifier'),
      name: resource.field('name'),
      priority: resource.field('priority'),
      rule_id: resource.field('rule_id'),
      service_identifier: resource.field('service_identifier'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    vpclattice_resource_policy(name, block): {
      local resource = blockType.resource('aws_vpclattice_resource_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(block.policy),
        resource_arn: build.template(block.resource_arn),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      resource_arn: resource.field('resource_arn'),
    },
    vpclattice_service(name, block): {
      local resource = blockType.resource('aws_vpclattice_service', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auth_type: build.template(std.get(block, 'auth_type', null)),
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        custom_domain_name: build.template(std.get(block, 'custom_domain_name', null)),
        dns_entry: build.template(std.get(block, 'dns_entry', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      auth_type: resource.field('auth_type'),
      certificate_arn: resource.field('certificate_arn'),
      custom_domain_name: resource.field('custom_domain_name'),
      dns_entry: resource.field('dns_entry'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    vpclattice_service_network(name, block): {
      local resource = blockType.resource('aws_vpclattice_service_network', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auth_type: build.template(std.get(block, 'auth_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      auth_type: resource.field('auth_type'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    vpclattice_service_network_service_association(name, block): {
      local resource = blockType.resource('aws_vpclattice_service_network_service_association', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        custom_domain_name: build.template(std.get(block, 'custom_domain_name', null)),
        dns_entry: build.template(std.get(block, 'dns_entry', null)),
        id: build.template(std.get(block, 'id', null)),
        service_identifier: build.template(block.service_identifier),
        service_network_identifier: build.template(block.service_network_identifier),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      created_by: resource.field('created_by'),
      custom_domain_name: resource.field('custom_domain_name'),
      dns_entry: resource.field('dns_entry'),
      id: resource.field('id'),
      service_identifier: resource.field('service_identifier'),
      service_network_identifier: resource.field('service_network_identifier'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    vpclattice_service_network_vpc_association(name, block): {
      local resource = blockType.resource('aws_vpclattice_service_network_vpc_association', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        id: build.template(std.get(block, 'id', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        service_network_identifier: build.template(block.service_network_identifier),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_identifier: build.template(block.vpc_identifier),
      }),
      arn: resource.field('arn'),
      created_by: resource.field('created_by'),
      id: resource.field('id'),
      security_group_ids: resource.field('security_group_ids'),
      service_network_identifier: resource.field('service_network_identifier'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_identifier: resource.field('vpc_identifier'),
    },
    vpclattice_target_group(name, block): {
      local resource = blockType.resource('aws_vpclattice_target_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
    },
    vpclattice_target_group_attachment(name, block): {
      local resource = blockType.resource('aws_vpclattice_target_group_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        target_group_identifier: build.template(block.target_group_identifier),
      }),
      id: resource.field('id'),
      target_group_identifier: resource.field('target_group_identifier'),
    },
    vpn_connection(name, block): {
      local resource = blockType.resource('aws_vpn_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        core_network_arn: build.template(std.get(block, 'core_network_arn', null)),
        core_network_attachment_arn: build.template(std.get(block, 'core_network_attachment_arn', null)),
        customer_gateway_configuration: build.template(std.get(block, 'customer_gateway_configuration', null)),
        customer_gateway_id: build.template(block.customer_gateway_id),
        enable_acceleration: build.template(std.get(block, 'enable_acceleration', null)),
        id: build.template(std.get(block, 'id', null)),
        local_ipv4_network_cidr: build.template(std.get(block, 'local_ipv4_network_cidr', null)),
        local_ipv6_network_cidr: build.template(std.get(block, 'local_ipv6_network_cidr', null)),
        outside_ip_address_type: build.template(std.get(block, 'outside_ip_address_type', null)),
        remote_ipv4_network_cidr: build.template(std.get(block, 'remote_ipv4_network_cidr', null)),
        remote_ipv6_network_cidr: build.template(std.get(block, 'remote_ipv6_network_cidr', null)),
        routes: build.template(std.get(block, 'routes', null)),
        static_routes_only: build.template(std.get(block, 'static_routes_only', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        transit_gateway_attachment_id: build.template(std.get(block, 'transit_gateway_attachment_id', null)),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
        transport_transit_gateway_attachment_id: build.template(std.get(block, 'transport_transit_gateway_attachment_id', null)),
        tunnel1_address: build.template(std.get(block, 'tunnel1_address', null)),
        tunnel1_bgp_asn: build.template(std.get(block, 'tunnel1_bgp_asn', null)),
        tunnel1_bgp_holdtime: build.template(std.get(block, 'tunnel1_bgp_holdtime', null)),
        tunnel1_cgw_inside_address: build.template(std.get(block, 'tunnel1_cgw_inside_address', null)),
        tunnel1_dpd_timeout_action: build.template(std.get(block, 'tunnel1_dpd_timeout_action', null)),
        tunnel1_dpd_timeout_seconds: build.template(std.get(block, 'tunnel1_dpd_timeout_seconds', null)),
        tunnel1_enable_tunnel_lifecycle_control: build.template(std.get(block, 'tunnel1_enable_tunnel_lifecycle_control', null)),
        tunnel1_ike_versions: build.template(std.get(block, 'tunnel1_ike_versions', null)),
        tunnel1_inside_cidr: build.template(std.get(block, 'tunnel1_inside_cidr', null)),
        tunnel1_inside_ipv6_cidr: build.template(std.get(block, 'tunnel1_inside_ipv6_cidr', null)),
        tunnel1_phase1_dh_group_numbers: build.template(std.get(block, 'tunnel1_phase1_dh_group_numbers', null)),
        tunnel1_phase1_encryption_algorithms: build.template(std.get(block, 'tunnel1_phase1_encryption_algorithms', null)),
        tunnel1_phase1_integrity_algorithms: build.template(std.get(block, 'tunnel1_phase1_integrity_algorithms', null)),
        tunnel1_phase1_lifetime_seconds: build.template(std.get(block, 'tunnel1_phase1_lifetime_seconds', null)),
        tunnel1_phase2_dh_group_numbers: build.template(std.get(block, 'tunnel1_phase2_dh_group_numbers', null)),
        tunnel1_phase2_encryption_algorithms: build.template(std.get(block, 'tunnel1_phase2_encryption_algorithms', null)),
        tunnel1_phase2_integrity_algorithms: build.template(std.get(block, 'tunnel1_phase2_integrity_algorithms', null)),
        tunnel1_phase2_lifetime_seconds: build.template(std.get(block, 'tunnel1_phase2_lifetime_seconds', null)),
        tunnel1_preshared_key: build.template(std.get(block, 'tunnel1_preshared_key', null)),
        tunnel1_rekey_fuzz_percentage: build.template(std.get(block, 'tunnel1_rekey_fuzz_percentage', null)),
        tunnel1_rekey_margin_time_seconds: build.template(std.get(block, 'tunnel1_rekey_margin_time_seconds', null)),
        tunnel1_replay_window_size: build.template(std.get(block, 'tunnel1_replay_window_size', null)),
        tunnel1_startup_action: build.template(std.get(block, 'tunnel1_startup_action', null)),
        tunnel1_vgw_inside_address: build.template(std.get(block, 'tunnel1_vgw_inside_address', null)),
        tunnel2_address: build.template(std.get(block, 'tunnel2_address', null)),
        tunnel2_bgp_asn: build.template(std.get(block, 'tunnel2_bgp_asn', null)),
        tunnel2_bgp_holdtime: build.template(std.get(block, 'tunnel2_bgp_holdtime', null)),
        tunnel2_cgw_inside_address: build.template(std.get(block, 'tunnel2_cgw_inside_address', null)),
        tunnel2_dpd_timeout_action: build.template(std.get(block, 'tunnel2_dpd_timeout_action', null)),
        tunnel2_dpd_timeout_seconds: build.template(std.get(block, 'tunnel2_dpd_timeout_seconds', null)),
        tunnel2_enable_tunnel_lifecycle_control: build.template(std.get(block, 'tunnel2_enable_tunnel_lifecycle_control', null)),
        tunnel2_ike_versions: build.template(std.get(block, 'tunnel2_ike_versions', null)),
        tunnel2_inside_cidr: build.template(std.get(block, 'tunnel2_inside_cidr', null)),
        tunnel2_inside_ipv6_cidr: build.template(std.get(block, 'tunnel2_inside_ipv6_cidr', null)),
        tunnel2_phase1_dh_group_numbers: build.template(std.get(block, 'tunnel2_phase1_dh_group_numbers', null)),
        tunnel2_phase1_encryption_algorithms: build.template(std.get(block, 'tunnel2_phase1_encryption_algorithms', null)),
        tunnel2_phase1_integrity_algorithms: build.template(std.get(block, 'tunnel2_phase1_integrity_algorithms', null)),
        tunnel2_phase1_lifetime_seconds: build.template(std.get(block, 'tunnel2_phase1_lifetime_seconds', null)),
        tunnel2_phase2_dh_group_numbers: build.template(std.get(block, 'tunnel2_phase2_dh_group_numbers', null)),
        tunnel2_phase2_encryption_algorithms: build.template(std.get(block, 'tunnel2_phase2_encryption_algorithms', null)),
        tunnel2_phase2_integrity_algorithms: build.template(std.get(block, 'tunnel2_phase2_integrity_algorithms', null)),
        tunnel2_phase2_lifetime_seconds: build.template(std.get(block, 'tunnel2_phase2_lifetime_seconds', null)),
        tunnel2_preshared_key: build.template(std.get(block, 'tunnel2_preshared_key', null)),
        tunnel2_rekey_fuzz_percentage: build.template(std.get(block, 'tunnel2_rekey_fuzz_percentage', null)),
        tunnel2_rekey_margin_time_seconds: build.template(std.get(block, 'tunnel2_rekey_margin_time_seconds', null)),
        tunnel2_replay_window_size: build.template(std.get(block, 'tunnel2_replay_window_size', null)),
        tunnel2_startup_action: build.template(std.get(block, 'tunnel2_startup_action', null)),
        tunnel2_vgw_inside_address: build.template(std.get(block, 'tunnel2_vgw_inside_address', null)),
        tunnel_inside_ip_version: build.template(std.get(block, 'tunnel_inside_ip_version', null)),
        type: build.template(block.type),
        vgw_telemetry: build.template(std.get(block, 'vgw_telemetry', null)),
        vpn_gateway_id: build.template(std.get(block, 'vpn_gateway_id', null)),
      }),
      arn: resource.field('arn'),
      core_network_arn: resource.field('core_network_arn'),
      core_network_attachment_arn: resource.field('core_network_attachment_arn'),
      customer_gateway_configuration: resource.field('customer_gateway_configuration'),
      customer_gateway_id: resource.field('customer_gateway_id'),
      enable_acceleration: resource.field('enable_acceleration'),
      id: resource.field('id'),
      local_ipv4_network_cidr: resource.field('local_ipv4_network_cidr'),
      local_ipv6_network_cidr: resource.field('local_ipv6_network_cidr'),
      outside_ip_address_type: resource.field('outside_ip_address_type'),
      remote_ipv4_network_cidr: resource.field('remote_ipv4_network_cidr'),
      remote_ipv6_network_cidr: resource.field('remote_ipv6_network_cidr'),
      routes: resource.field('routes'),
      static_routes_only: resource.field('static_routes_only'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      transport_transit_gateway_attachment_id: resource.field('transport_transit_gateway_attachment_id'),
      tunnel1_address: resource.field('tunnel1_address'),
      tunnel1_bgp_asn: resource.field('tunnel1_bgp_asn'),
      tunnel1_bgp_holdtime: resource.field('tunnel1_bgp_holdtime'),
      tunnel1_cgw_inside_address: resource.field('tunnel1_cgw_inside_address'),
      tunnel1_dpd_timeout_action: resource.field('tunnel1_dpd_timeout_action'),
      tunnel1_dpd_timeout_seconds: resource.field('tunnel1_dpd_timeout_seconds'),
      tunnel1_enable_tunnel_lifecycle_control: resource.field('tunnel1_enable_tunnel_lifecycle_control'),
      tunnel1_ike_versions: resource.field('tunnel1_ike_versions'),
      tunnel1_inside_cidr: resource.field('tunnel1_inside_cidr'),
      tunnel1_inside_ipv6_cidr: resource.field('tunnel1_inside_ipv6_cidr'),
      tunnel1_phase1_dh_group_numbers: resource.field('tunnel1_phase1_dh_group_numbers'),
      tunnel1_phase1_encryption_algorithms: resource.field('tunnel1_phase1_encryption_algorithms'),
      tunnel1_phase1_integrity_algorithms: resource.field('tunnel1_phase1_integrity_algorithms'),
      tunnel1_phase1_lifetime_seconds: resource.field('tunnel1_phase1_lifetime_seconds'),
      tunnel1_phase2_dh_group_numbers: resource.field('tunnel1_phase2_dh_group_numbers'),
      tunnel1_phase2_encryption_algorithms: resource.field('tunnel1_phase2_encryption_algorithms'),
      tunnel1_phase2_integrity_algorithms: resource.field('tunnel1_phase2_integrity_algorithms'),
      tunnel1_phase2_lifetime_seconds: resource.field('tunnel1_phase2_lifetime_seconds'),
      tunnel1_preshared_key: resource.field('tunnel1_preshared_key'),
      tunnel1_rekey_fuzz_percentage: resource.field('tunnel1_rekey_fuzz_percentage'),
      tunnel1_rekey_margin_time_seconds: resource.field('tunnel1_rekey_margin_time_seconds'),
      tunnel1_replay_window_size: resource.field('tunnel1_replay_window_size'),
      tunnel1_startup_action: resource.field('tunnel1_startup_action'),
      tunnel1_vgw_inside_address: resource.field('tunnel1_vgw_inside_address'),
      tunnel2_address: resource.field('tunnel2_address'),
      tunnel2_bgp_asn: resource.field('tunnel2_bgp_asn'),
      tunnel2_bgp_holdtime: resource.field('tunnel2_bgp_holdtime'),
      tunnel2_cgw_inside_address: resource.field('tunnel2_cgw_inside_address'),
      tunnel2_dpd_timeout_action: resource.field('tunnel2_dpd_timeout_action'),
      tunnel2_dpd_timeout_seconds: resource.field('tunnel2_dpd_timeout_seconds'),
      tunnel2_enable_tunnel_lifecycle_control: resource.field('tunnel2_enable_tunnel_lifecycle_control'),
      tunnel2_ike_versions: resource.field('tunnel2_ike_versions'),
      tunnel2_inside_cidr: resource.field('tunnel2_inside_cidr'),
      tunnel2_inside_ipv6_cidr: resource.field('tunnel2_inside_ipv6_cidr'),
      tunnel2_phase1_dh_group_numbers: resource.field('tunnel2_phase1_dh_group_numbers'),
      tunnel2_phase1_encryption_algorithms: resource.field('tunnel2_phase1_encryption_algorithms'),
      tunnel2_phase1_integrity_algorithms: resource.field('tunnel2_phase1_integrity_algorithms'),
      tunnel2_phase1_lifetime_seconds: resource.field('tunnel2_phase1_lifetime_seconds'),
      tunnel2_phase2_dh_group_numbers: resource.field('tunnel2_phase2_dh_group_numbers'),
      tunnel2_phase2_encryption_algorithms: resource.field('tunnel2_phase2_encryption_algorithms'),
      tunnel2_phase2_integrity_algorithms: resource.field('tunnel2_phase2_integrity_algorithms'),
      tunnel2_phase2_lifetime_seconds: resource.field('tunnel2_phase2_lifetime_seconds'),
      tunnel2_preshared_key: resource.field('tunnel2_preshared_key'),
      tunnel2_rekey_fuzz_percentage: resource.field('tunnel2_rekey_fuzz_percentage'),
      tunnel2_rekey_margin_time_seconds: resource.field('tunnel2_rekey_margin_time_seconds'),
      tunnel2_replay_window_size: resource.field('tunnel2_replay_window_size'),
      tunnel2_startup_action: resource.field('tunnel2_startup_action'),
      tunnel2_vgw_inside_address: resource.field('tunnel2_vgw_inside_address'),
      tunnel_inside_ip_version: resource.field('tunnel_inside_ip_version'),
      type: resource.field('type'),
      vgw_telemetry: resource.field('vgw_telemetry'),
      vpn_gateway_id: resource.field('vpn_gateway_id'),
    },
    vpn_connection_route(name, block): {
      local resource = blockType.resource('aws_vpn_connection_route', name),
      _: resource._(block, {
        destination_cidr_block: build.template(block.destination_cidr_block),
        id: build.template(std.get(block, 'id', null)),
        vpn_connection_id: build.template(block.vpn_connection_id),
      }),
      destination_cidr_block: resource.field('destination_cidr_block'),
      id: resource.field('id'),
      vpn_connection_id: resource.field('vpn_connection_id'),
    },
    vpn_gateway(name, block): {
      local resource = blockType.resource('aws_vpn_gateway', name),
      _: resource._(block, {
        amazon_side_asn: build.template(std.get(block, 'amazon_side_asn', null)),
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      amazon_side_asn: resource.field('amazon_side_asn'),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      vpc_id: resource.field('vpc_id'),
    },
    vpn_gateway_attachment(name, block): {
      local resource = blockType.resource('aws_vpn_gateway_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        vpc_id: build.template(block.vpc_id),
        vpn_gateway_id: build.template(block.vpn_gateway_id),
      }),
      id: resource.field('id'),
      vpc_id: resource.field('vpc_id'),
      vpn_gateway_id: resource.field('vpn_gateway_id'),
    },
    vpn_gateway_route_propagation(name, block): {
      local resource = blockType.resource('aws_vpn_gateway_route_propagation', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        route_table_id: build.template(block.route_table_id),
        vpn_gateway_id: build.template(block.vpn_gateway_id),
      }),
      id: resource.field('id'),
      route_table_id: resource.field('route_table_id'),
      vpn_gateway_id: resource.field('vpn_gateway_id'),
    },
    waf_byte_match_set(name, block): {
      local resource = blockType.resource('aws_waf_byte_match_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    waf_geo_match_set(name, block): {
      local resource = blockType.resource('aws_waf_geo_match_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    waf_ipset(name, block): {
      local resource = blockType.resource('aws_waf_ipset', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    waf_rate_based_rule(name, block): {
      local resource = blockType.resource('aws_waf_rate_based_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        metric_name: build.template(block.metric_name),
        name: build.template(block.name),
        rate_key: build.template(block.rate_key),
        rate_limit: build.template(block.rate_limit),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      metric_name: resource.field('metric_name'),
      name: resource.field('name'),
      rate_key: resource.field('rate_key'),
      rate_limit: resource.field('rate_limit'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    waf_regex_match_set(name, block): {
      local resource = blockType.resource('aws_waf_regex_match_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    waf_regex_pattern_set(name, block): {
      local resource = blockType.resource('aws_waf_regex_pattern_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        regex_pattern_strings: build.template(std.get(block, 'regex_pattern_strings', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      regex_pattern_strings: resource.field('regex_pattern_strings'),
    },
    waf_rule(name, block): {
      local resource = blockType.resource('aws_waf_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        metric_name: build.template(block.metric_name),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      metric_name: resource.field('metric_name'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    waf_rule_group(name, block): {
      local resource = blockType.resource('aws_waf_rule_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        metric_name: build.template(block.metric_name),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      metric_name: resource.field('metric_name'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    waf_size_constraint_set(name, block): {
      local resource = blockType.resource('aws_waf_size_constraint_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    waf_sql_injection_match_set(name, block): {
      local resource = blockType.resource('aws_waf_sql_injection_match_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    waf_web_acl(name, block): {
      local resource = blockType.resource('aws_waf_web_acl', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        metric_name: build.template(block.metric_name),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      metric_name: resource.field('metric_name'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    waf_xss_match_set(name, block): {
      local resource = blockType.resource('aws_waf_xss_match_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    wafregional_byte_match_set(name, block): {
      local resource = blockType.resource('aws_wafregional_byte_match_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    wafregional_geo_match_set(name, block): {
      local resource = blockType.resource('aws_wafregional_geo_match_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    wafregional_ipset(name, block): {
      local resource = blockType.resource('aws_wafregional_ipset', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    wafregional_rate_based_rule(name, block): {
      local resource = blockType.resource('aws_wafregional_rate_based_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        metric_name: build.template(block.metric_name),
        name: build.template(block.name),
        rate_key: build.template(block.rate_key),
        rate_limit: build.template(block.rate_limit),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      metric_name: resource.field('metric_name'),
      name: resource.field('name'),
      rate_key: resource.field('rate_key'),
      rate_limit: resource.field('rate_limit'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    wafregional_regex_match_set(name, block): {
      local resource = blockType.resource('aws_wafregional_regex_match_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    wafregional_regex_pattern_set(name, block): {
      local resource = blockType.resource('aws_wafregional_regex_pattern_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        regex_pattern_strings: build.template(std.get(block, 'regex_pattern_strings', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      regex_pattern_strings: resource.field('regex_pattern_strings'),
    },
    wafregional_rule(name, block): {
      local resource = blockType.resource('aws_wafregional_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        metric_name: build.template(block.metric_name),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      metric_name: resource.field('metric_name'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    wafregional_rule_group(name, block): {
      local resource = blockType.resource('aws_wafregional_rule_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        metric_name: build.template(block.metric_name),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      metric_name: resource.field('metric_name'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    wafregional_size_constraint_set(name, block): {
      local resource = blockType.resource('aws_wafregional_size_constraint_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    wafregional_sql_injection_match_set(name, block): {
      local resource = blockType.resource('aws_wafregional_sql_injection_match_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    wafregional_web_acl(name, block): {
      local resource = blockType.resource('aws_wafregional_web_acl', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        metric_name: build.template(block.metric_name),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      metric_name: resource.field('metric_name'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    wafregional_web_acl_association(name, block): {
      local resource = blockType.resource('aws_wafregional_web_acl_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        resource_arn: build.template(block.resource_arn),
        web_acl_id: build.template(block.web_acl_id),
      }),
      id: resource.field('id'),
      resource_arn: resource.field('resource_arn'),
      web_acl_id: resource.field('web_acl_id'),
    },
    wafregional_xss_match_set(name, block): {
      local resource = blockType.resource('aws_wafregional_xss_match_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    wafv2_ip_set(name, block): {
      local resource = blockType.resource('aws_wafv2_ip_set', name),
      _: resource._(block, {
        addresses: build.template(std.get(block, 'addresses', null)),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_version: build.template(block.ip_address_version),
        lock_token: build.template(std.get(block, 'lock_token', null)),
        name: build.template(block.name),
        scope: build.template(block.scope),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      addresses: resource.field('addresses'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      ip_address_version: resource.field('ip_address_version'),
      lock_token: resource.field('lock_token'),
      name: resource.field('name'),
      scope: resource.field('scope'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    wafv2_regex_pattern_set(name, block): {
      local resource = blockType.resource('aws_wafv2_regex_pattern_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        lock_token: build.template(std.get(block, 'lock_token', null)),
        name: build.template(block.name),
        scope: build.template(block.scope),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      lock_token: resource.field('lock_token'),
      name: resource.field('name'),
      scope: resource.field('scope'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    wafv2_rule_group(name, block): {
      local resource = blockType.resource('aws_wafv2_rule_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        capacity: build.template(block.capacity),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        lock_token: build.template(std.get(block, 'lock_token', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        scope: build.template(block.scope),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      capacity: resource.field('capacity'),
      description: resource.field('description'),
      id: resource.field('id'),
      lock_token: resource.field('lock_token'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      scope: resource.field('scope'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    wafv2_web_acl(name, block): {
      local resource = blockType.resource('aws_wafv2_web_acl', name),
      _: resource._(block, {
        application_integration_url: build.template(std.get(block, 'application_integration_url', null)),
        arn: build.template(std.get(block, 'arn', null)),
        capacity: build.template(std.get(block, 'capacity', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        lock_token: build.template(std.get(block, 'lock_token', null)),
        name: build.template(block.name),
        rule_json: build.template(std.get(block, 'rule_json', null)),
        scope: build.template(block.scope),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        token_domains: build.template(std.get(block, 'token_domains', null)),
      }),
      application_integration_url: resource.field('application_integration_url'),
      arn: resource.field('arn'),
      capacity: resource.field('capacity'),
      description: resource.field('description'),
      id: resource.field('id'),
      lock_token: resource.field('lock_token'),
      name: resource.field('name'),
      rule_json: resource.field('rule_json'),
      scope: resource.field('scope'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      token_domains: resource.field('token_domains'),
    },
    wafv2_web_acl_association(name, block): {
      local resource = blockType.resource('aws_wafv2_web_acl_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        resource_arn: build.template(block.resource_arn),
        web_acl_arn: build.template(block.web_acl_arn),
      }),
      id: resource.field('id'),
      resource_arn: resource.field('resource_arn'),
      web_acl_arn: resource.field('web_acl_arn'),
    },
    wafv2_web_acl_logging_configuration(name, block): {
      local resource = blockType.resource('aws_wafv2_web_acl_logging_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_destination_configs: build.template(block.log_destination_configs),
        resource_arn: build.template(block.resource_arn),
      }),
      id: resource.field('id'),
      log_destination_configs: resource.field('log_destination_configs'),
      resource_arn: resource.field('resource_arn'),
    },
    worklink_fleet(name, block): {
      local resource = blockType.resource('aws_worklink_fleet', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        audit_stream_arn: build.template(std.get(block, 'audit_stream_arn', null)),
        company_code: build.template(std.get(block, 'company_code', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        device_ca_certificate: build.template(std.get(block, 'device_ca_certificate', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        name: build.template(block.name),
        optimize_for_end_user_location: build.template(std.get(block, 'optimize_for_end_user_location', null)),
      }),
      arn: resource.field('arn'),
      audit_stream_arn: resource.field('audit_stream_arn'),
      company_code: resource.field('company_code'),
      created_time: resource.field('created_time'),
      device_ca_certificate: resource.field('device_ca_certificate'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      last_updated_time: resource.field('last_updated_time'),
      name: resource.field('name'),
      optimize_for_end_user_location: resource.field('optimize_for_end_user_location'),
    },
    worklink_website_certificate_authority_association(name, block): {
      local resource = blockType.resource('aws_worklink_website_certificate_authority_association', name),
      _: resource._(block, {
        certificate: build.template(block.certificate),
        display_name: build.template(std.get(block, 'display_name', null)),
        fleet_arn: build.template(block.fleet_arn),
        id: build.template(std.get(block, 'id', null)),
        website_ca_id: build.template(std.get(block, 'website_ca_id', null)),
      }),
      certificate: resource.field('certificate'),
      display_name: resource.field('display_name'),
      fleet_arn: resource.field('fleet_arn'),
      id: resource.field('id'),
      website_ca_id: resource.field('website_ca_id'),
    },
    workspaces_connection_alias(name, block): {
      local resource = blockType.resource('aws_workspaces_connection_alias', name),
      _: resource._(block, {
        connection_string: build.template(block.connection_string),
        id: build.template(std.get(block, 'id', null)),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      connection_string: resource.field('connection_string'),
      id: resource.field('id'),
      owner_account_id: resource.field('owner_account_id'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    workspaces_directory(name, block): {
      local resource = blockType.resource('aws_workspaces_directory', name),
      _: resource._(block, {
        alias: build.template(std.get(block, 'alias', null)),
        customer_user_name: build.template(std.get(block, 'customer_user_name', null)),
        directory_id: build.template(block.directory_id),
        directory_name: build.template(std.get(block, 'directory_name', null)),
        directory_type: build.template(std.get(block, 'directory_type', null)),
        dns_ip_addresses: build.template(std.get(block, 'dns_ip_addresses', null)),
        iam_role_id: build.template(std.get(block, 'iam_role_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_group_ids: build.template(std.get(block, 'ip_group_ids', null)),
        registration_code: build.template(std.get(block, 'registration_code', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        workspace_security_group_id: build.template(std.get(block, 'workspace_security_group_id', null)),
      }),
      alias: resource.field('alias'),
      customer_user_name: resource.field('customer_user_name'),
      directory_id: resource.field('directory_id'),
      directory_name: resource.field('directory_name'),
      directory_type: resource.field('directory_type'),
      dns_ip_addresses: resource.field('dns_ip_addresses'),
      iam_role_id: resource.field('iam_role_id'),
      id: resource.field('id'),
      ip_group_ids: resource.field('ip_group_ids'),
      registration_code: resource.field('registration_code'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      workspace_security_group_id: resource.field('workspace_security_group_id'),
    },
    workspaces_ip_group(name, block): {
      local resource = blockType.resource('aws_workspaces_ip_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    workspaces_workspace(name, block): {
      local resource = blockType.resource('aws_workspaces_workspace', name),
      _: resource._(block, {
        bundle_id: build.template(block.bundle_id),
        computer_name: build.template(std.get(block, 'computer_name', null)),
        directory_id: build.template(block.directory_id),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        root_volume_encryption_enabled: build.template(std.get(block, 'root_volume_encryption_enabled', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        user_name: build.template(block.user_name),
        user_volume_encryption_enabled: build.template(std.get(block, 'user_volume_encryption_enabled', null)),
        volume_encryption_key: build.template(std.get(block, 'volume_encryption_key', null)),
      }),
      bundle_id: resource.field('bundle_id'),
      computer_name: resource.field('computer_name'),
      directory_id: resource.field('directory_id'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      root_volume_encryption_enabled: resource.field('root_volume_encryption_enabled'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      user_name: resource.field('user_name'),
      user_volume_encryption_enabled: resource.field('user_volume_encryption_enabled'),
      volume_encryption_key: resource.field('volume_encryption_key'),
    },
    xray_encryption_config(name, block): {
      local resource = blockType.resource('aws_xray_encryption_config', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_id: build.template(std.get(block, 'key_id', null)),
        type: build.template(block.type),
      }),
      id: resource.field('id'),
      key_id: resource.field('key_id'),
      type: resource.field('type'),
    },
    xray_group(name, block): {
      local resource = blockType.resource('aws_xray_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        filter_expression: build.template(block.filter_expression),
        group_name: build.template(block.group_name),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      filter_expression: resource.field('filter_expression'),
      group_name: resource.field('group_name'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    xray_sampling_rule(name, block): {
      local resource = blockType.resource('aws_xray_sampling_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attributes: build.template(std.get(block, 'attributes', null)),
        fixed_rate: build.template(block.fixed_rate),
        host: build.template(block.host),
        http_method: build.template(block.http_method),
        id: build.template(std.get(block, 'id', null)),
        priority: build.template(block.priority),
        reservoir_size: build.template(block.reservoir_size),
        resource_arn: build.template(block.resource_arn),
        rule_name: build.template(std.get(block, 'rule_name', null)),
        service_name: build.template(block.service_name),
        service_type: build.template(block.service_type),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        url_path: build.template(block.url_path),
        version: build.template(block.version),
      }),
      arn: resource.field('arn'),
      attributes: resource.field('attributes'),
      fixed_rate: resource.field('fixed_rate'),
      host: resource.field('host'),
      http_method: resource.field('http_method'),
      id: resource.field('id'),
      priority: resource.field('priority'),
      reservoir_size: resource.field('reservoir_size'),
      resource_arn: resource.field('resource_arn'),
      rule_name: resource.field('rule_name'),
      service_name: resource.field('service_name'),
      service_type: resource.field('service_type'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      url_path: resource.field('url_path'),
      version: resource.field('version'),
    },
  },
  data: {
    local blockType = provider.blockType('data'),
    acm_certificate(name, block): {
      local resource = blockType.resource('aws_acm_certificate', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        certificate: build.template(std.get(block, 'certificate', null)),
        certificate_chain: build.template(std.get(block, 'certificate_chain', null)),
        domain: build.template(std.get(block, 'domain', null)),
        id: build.template(std.get(block, 'id', null)),
        key_types: build.template(std.get(block, 'key_types', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        status: build.template(std.get(block, 'status', null)),
        statuses: build.template(std.get(block, 'statuses', null)),
        tags: build.template(std.get(block, 'tags', null)),
        types: build.template(std.get(block, 'types', null)),
      }),
      arn: resource.field('arn'),
      certificate: resource.field('certificate'),
      certificate_chain: resource.field('certificate_chain'),
      domain: resource.field('domain'),
      id: resource.field('id'),
      key_types: resource.field('key_types'),
      most_recent: resource.field('most_recent'),
      status: resource.field('status'),
      statuses: resource.field('statuses'),
      tags: resource.field('tags'),
      types: resource.field('types'),
    },
    acmpca_certificate(name, block): {
      local resource = blockType.resource('aws_acmpca_certificate', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        certificate: build.template(std.get(block, 'certificate', null)),
        certificate_authority_arn: build.template(block.certificate_authority_arn),
        certificate_chain: build.template(std.get(block, 'certificate_chain', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      arn: resource.field('arn'),
      certificate: resource.field('certificate'),
      certificate_authority_arn: resource.field('certificate_authority_arn'),
      certificate_chain: resource.field('certificate_chain'),
      id: resource.field('id'),
    },
    acmpca_certificate_authority(name, block): {
      local resource = blockType.resource('aws_acmpca_certificate_authority', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        certificate: build.template(std.get(block, 'certificate', null)),
        certificate_chain: build.template(std.get(block, 'certificate_chain', null)),
        certificate_signing_request: build.template(std.get(block, 'certificate_signing_request', null)),
        id: build.template(std.get(block, 'id', null)),
        key_storage_security_standard: build.template(std.get(block, 'key_storage_security_standard', null)),
        not_after: build.template(std.get(block, 'not_after', null)),
        not_before: build.template(std.get(block, 'not_before', null)),
        revocation_configuration: build.template(std.get(block, 'revocation_configuration', null)),
        serial: build.template(std.get(block, 'serial', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
        usage_mode: build.template(std.get(block, 'usage_mode', null)),
      }),
      arn: resource.field('arn'),
      certificate: resource.field('certificate'),
      certificate_chain: resource.field('certificate_chain'),
      certificate_signing_request: resource.field('certificate_signing_request'),
      id: resource.field('id'),
      key_storage_security_standard: resource.field('key_storage_security_standard'),
      not_after: resource.field('not_after'),
      not_before: resource.field('not_before'),
      revocation_configuration: resource.field('revocation_configuration'),
      serial: resource.field('serial'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      type: resource.field('type'),
      usage_mode: resource.field('usage_mode'),
    },
    alb(name, block): {
      local resource = blockType.resource('aws_alb', name),
      _: resource._(block, {
        access_logs: build.template(std.get(block, 'access_logs', null)),
        arn: build.template(std.get(block, 'arn', null)),
        arn_suffix: build.template(std.get(block, 'arn_suffix', null)),
        client_keep_alive: build.template(std.get(block, 'client_keep_alive', null)),
        connection_logs: build.template(std.get(block, 'connection_logs', null)),
        customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null)),
        desync_mitigation_mode: build.template(std.get(block, 'desync_mitigation_mode', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        dns_record_client_routing_policy: build.template(std.get(block, 'dns_record_client_routing_policy', null)),
        drop_invalid_header_fields: build.template(std.get(block, 'drop_invalid_header_fields', null)),
        enable_cross_zone_load_balancing: build.template(std.get(block, 'enable_cross_zone_load_balancing', null)),
        enable_deletion_protection: build.template(std.get(block, 'enable_deletion_protection', null)),
        enable_http2: build.template(std.get(block, 'enable_http2', null)),
        enable_tls_version_and_cipher_suite_headers: build.template(std.get(block, 'enable_tls_version_and_cipher_suite_headers', null)),
        enable_waf_fail_open: build.template(std.get(block, 'enable_waf_fail_open', null)),
        enable_xff_client_port: build.template(std.get(block, 'enable_xff_client_port', null)),
        enable_zonal_shift: build.template(std.get(block, 'enable_zonal_shift', null)),
        enforce_security_group_inbound_rules_on_private_link_traffic: build.template(std.get(block, 'enforce_security_group_inbound_rules_on_private_link_traffic', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout: build.template(std.get(block, 'idle_timeout', null)),
        internal: build.template(std.get(block, 'internal', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        load_balancer_type: build.template(std.get(block, 'load_balancer_type', null)),
        name: build.template(std.get(block, 'name', null)),
        preserve_host_header: build.template(std.get(block, 'preserve_host_header', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        subnet_mapping: build.template(std.get(block, 'subnet_mapping', null)),
        subnets: build.template(std.get(block, 'subnets', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        xff_header_processing_mode: build.template(std.get(block, 'xff_header_processing_mode', null)),
        zone_id: build.template(std.get(block, 'zone_id', null)),
      }),
      access_logs: resource.field('access_logs'),
      arn: resource.field('arn'),
      arn_suffix: resource.field('arn_suffix'),
      client_keep_alive: resource.field('client_keep_alive'),
      connection_logs: resource.field('connection_logs'),
      customer_owned_ipv4_pool: resource.field('customer_owned_ipv4_pool'),
      desync_mitigation_mode: resource.field('desync_mitigation_mode'),
      dns_name: resource.field('dns_name'),
      dns_record_client_routing_policy: resource.field('dns_record_client_routing_policy'),
      drop_invalid_header_fields: resource.field('drop_invalid_header_fields'),
      enable_cross_zone_load_balancing: resource.field('enable_cross_zone_load_balancing'),
      enable_deletion_protection: resource.field('enable_deletion_protection'),
      enable_http2: resource.field('enable_http2'),
      enable_tls_version_and_cipher_suite_headers: resource.field('enable_tls_version_and_cipher_suite_headers'),
      enable_waf_fail_open: resource.field('enable_waf_fail_open'),
      enable_xff_client_port: resource.field('enable_xff_client_port'),
      enable_zonal_shift: resource.field('enable_zonal_shift'),
      enforce_security_group_inbound_rules_on_private_link_traffic: resource.field('enforce_security_group_inbound_rules_on_private_link_traffic'),
      id: resource.field('id'),
      idle_timeout: resource.field('idle_timeout'),
      internal: resource.field('internal'),
      ip_address_type: resource.field('ip_address_type'),
      load_balancer_type: resource.field('load_balancer_type'),
      name: resource.field('name'),
      preserve_host_header: resource.field('preserve_host_header'),
      security_groups: resource.field('security_groups'),
      subnet_mapping: resource.field('subnet_mapping'),
      subnets: resource.field('subnets'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
      xff_header_processing_mode: resource.field('xff_header_processing_mode'),
      zone_id: resource.field('zone_id'),
    },
    alb_listener(name, block): {
      local resource = blockType.resource('aws_alb_listener', name),
      _: resource._(block, {
        alpn_policy: build.template(std.get(block, 'alpn_policy', null)),
        arn: build.template(std.get(block, 'arn', null)),
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        default_action: build.template(std.get(block, 'default_action', null)),
        id: build.template(std.get(block, 'id', null)),
        load_balancer_arn: build.template(std.get(block, 'load_balancer_arn', null)),
        mutual_authentication: build.template(std.get(block, 'mutual_authentication', null)),
        port: build.template(std.get(block, 'port', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        ssl_policy: build.template(std.get(block, 'ssl_policy', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      alpn_policy: resource.field('alpn_policy'),
      arn: resource.field('arn'),
      certificate_arn: resource.field('certificate_arn'),
      default_action: resource.field('default_action'),
      id: resource.field('id'),
      load_balancer_arn: resource.field('load_balancer_arn'),
      mutual_authentication: resource.field('mutual_authentication'),
      port: resource.field('port'),
      protocol: resource.field('protocol'),
      ssl_policy: resource.field('ssl_policy'),
      tags: resource.field('tags'),
    },
    alb_target_group(name, block): {
      local resource = blockType.resource('aws_alb_target_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        arn_suffix: build.template(std.get(block, 'arn_suffix', null)),
        connection_termination: build.template(std.get(block, 'connection_termination', null)),
        deregistration_delay: build.template(std.get(block, 'deregistration_delay', null)),
        health_check: build.template(std.get(block, 'health_check', null)),
        id: build.template(std.get(block, 'id', null)),
        lambda_multi_value_headers_enabled: build.template(std.get(block, 'lambda_multi_value_headers_enabled', null)),
        load_balancer_arns: build.template(std.get(block, 'load_balancer_arns', null)),
        load_balancing_algorithm_type: build.template(std.get(block, 'load_balancing_algorithm_type', null)),
        load_balancing_anomaly_mitigation: build.template(std.get(block, 'load_balancing_anomaly_mitigation', null)),
        load_balancing_cross_zone_enabled: build.template(std.get(block, 'load_balancing_cross_zone_enabled', null)),
        name: build.template(std.get(block, 'name', null)),
        port: build.template(std.get(block, 'port', null)),
        preserve_client_ip: build.template(std.get(block, 'preserve_client_ip', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        protocol_version: build.template(std.get(block, 'protocol_version', null)),
        proxy_protocol_v2: build.template(std.get(block, 'proxy_protocol_v2', null)),
        slow_start: build.template(std.get(block, 'slow_start', null)),
        stickiness: build.template(std.get(block, 'stickiness', null)),
        tags: build.template(std.get(block, 'tags', null)),
        target_type: build.template(std.get(block, 'target_type', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      arn_suffix: resource.field('arn_suffix'),
      connection_termination: resource.field('connection_termination'),
      deregistration_delay: resource.field('deregistration_delay'),
      health_check: resource.field('health_check'),
      id: resource.field('id'),
      lambda_multi_value_headers_enabled: resource.field('lambda_multi_value_headers_enabled'),
      load_balancer_arns: resource.field('load_balancer_arns'),
      load_balancing_algorithm_type: resource.field('load_balancing_algorithm_type'),
      load_balancing_anomaly_mitigation: resource.field('load_balancing_anomaly_mitigation'),
      load_balancing_cross_zone_enabled: resource.field('load_balancing_cross_zone_enabled'),
      name: resource.field('name'),
      port: resource.field('port'),
      preserve_client_ip: resource.field('preserve_client_ip'),
      protocol: resource.field('protocol'),
      protocol_version: resource.field('protocol_version'),
      proxy_protocol_v2: resource.field('proxy_protocol_v2'),
      slow_start: resource.field('slow_start'),
      stickiness: resource.field('stickiness'),
      tags: resource.field('tags'),
      target_type: resource.field('target_type'),
      vpc_id: resource.field('vpc_id'),
    },
    ami(name, block): {
      local resource = blockType.resource('aws_ami', name),
      _: resource._(block, {
        architecture: build.template(std.get(block, 'architecture', null)),
        arn: build.template(std.get(block, 'arn', null)),
        block_device_mappings: build.template(std.get(block, 'block_device_mappings', null)),
        boot_mode: build.template(std.get(block, 'boot_mode', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        deprecation_time: build.template(std.get(block, 'deprecation_time', null)),
        description: build.template(std.get(block, 'description', null)),
        ena_support: build.template(std.get(block, 'ena_support', null)),
        executable_users: build.template(std.get(block, 'executable_users', null)),
        hypervisor: build.template(std.get(block, 'hypervisor', null)),
        id: build.template(std.get(block, 'id', null)),
        image_id: build.template(std.get(block, 'image_id', null)),
        image_location: build.template(std.get(block, 'image_location', null)),
        image_owner_alias: build.template(std.get(block, 'image_owner_alias', null)),
        image_type: build.template(std.get(block, 'image_type', null)),
        imds_support: build.template(std.get(block, 'imds_support', null)),
        include_deprecated: build.template(std.get(block, 'include_deprecated', null)),
        kernel_id: build.template(std.get(block, 'kernel_id', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        name: build.template(std.get(block, 'name', null)),
        name_regex: build.template(std.get(block, 'name_regex', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        owners: build.template(std.get(block, 'owners', null)),
        platform: build.template(std.get(block, 'platform', null)),
        platform_details: build.template(std.get(block, 'platform_details', null)),
        product_codes: build.template(std.get(block, 'product_codes', null)),
        public: build.template(std.get(block, 'public', null)),
        ramdisk_id: build.template(std.get(block, 'ramdisk_id', null)),
        root_device_name: build.template(std.get(block, 'root_device_name', null)),
        root_device_type: build.template(std.get(block, 'root_device_type', null)),
        root_snapshot_id: build.template(std.get(block, 'root_snapshot_id', null)),
        sriov_net_support: build.template(std.get(block, 'sriov_net_support', null)),
        state: build.template(std.get(block, 'state', null)),
        state_reason: build.template(std.get(block, 'state_reason', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tpm_support: build.template(std.get(block, 'tpm_support', null)),
        usage_operation: build.template(std.get(block, 'usage_operation', null)),
        virtualization_type: build.template(std.get(block, 'virtualization_type', null)),
      }),
      architecture: resource.field('architecture'),
      arn: resource.field('arn'),
      block_device_mappings: resource.field('block_device_mappings'),
      boot_mode: resource.field('boot_mode'),
      creation_date: resource.field('creation_date'),
      deprecation_time: resource.field('deprecation_time'),
      description: resource.field('description'),
      ena_support: resource.field('ena_support'),
      executable_users: resource.field('executable_users'),
      hypervisor: resource.field('hypervisor'),
      id: resource.field('id'),
      image_id: resource.field('image_id'),
      image_location: resource.field('image_location'),
      image_owner_alias: resource.field('image_owner_alias'),
      image_type: resource.field('image_type'),
      imds_support: resource.field('imds_support'),
      include_deprecated: resource.field('include_deprecated'),
      kernel_id: resource.field('kernel_id'),
      most_recent: resource.field('most_recent'),
      name: resource.field('name'),
      name_regex: resource.field('name_regex'),
      owner_id: resource.field('owner_id'),
      owners: resource.field('owners'),
      platform: resource.field('platform'),
      platform_details: resource.field('platform_details'),
      product_codes: resource.field('product_codes'),
      public: resource.field('public'),
      ramdisk_id: resource.field('ramdisk_id'),
      root_device_name: resource.field('root_device_name'),
      root_device_type: resource.field('root_device_type'),
      root_snapshot_id: resource.field('root_snapshot_id'),
      sriov_net_support: resource.field('sriov_net_support'),
      state: resource.field('state'),
      state_reason: resource.field('state_reason'),
      tags: resource.field('tags'),
      tpm_support: resource.field('tpm_support'),
      usage_operation: resource.field('usage_operation'),
      virtualization_type: resource.field('virtualization_type'),
    },
    ami_ids(name, block): {
      local resource = blockType.resource('aws_ami_ids', name),
      _: resource._(block, {
        executable_users: build.template(std.get(block, 'executable_users', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        include_deprecated: build.template(std.get(block, 'include_deprecated', null)),
        name_regex: build.template(std.get(block, 'name_regex', null)),
        owners: build.template(block.owners),
        sort_ascending: build.template(std.get(block, 'sort_ascending', null)),
      }),
      executable_users: resource.field('executable_users'),
      id: resource.field('id'),
      ids: resource.field('ids'),
      include_deprecated: resource.field('include_deprecated'),
      name_regex: resource.field('name_regex'),
      owners: resource.field('owners'),
      sort_ascending: resource.field('sort_ascending'),
    },
    api_gateway_api_key(name, block): {
      local resource = blockType.resource('aws_api_gateway_api_key', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        customer_id: build.template(std.get(block, 'customer_id', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(block.id),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        value: build.template(std.get(block, 'value', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      customer_id: resource.field('customer_id'),
      description: resource.field('description'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      value: resource.field('value'),
    },
    api_gateway_authorizer(name, block): {
      local resource = blockType.resource('aws_api_gateway_authorizer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        authorizer_credentials: build.template(std.get(block, 'authorizer_credentials', null)),
        authorizer_id: build.template(block.authorizer_id),
        authorizer_result_ttl_in_seconds: build.template(std.get(block, 'authorizer_result_ttl_in_seconds', null)),
        authorizer_uri: build.template(std.get(block, 'authorizer_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_source: build.template(std.get(block, 'identity_source', null)),
        identity_validation_expression: build.template(std.get(block, 'identity_validation_expression', null)),
        name: build.template(std.get(block, 'name', null)),
        provider_arns: build.template(std.get(block, 'provider_arns', null)),
        rest_api_id: build.template(block.rest_api_id),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      authorizer_credentials: resource.field('authorizer_credentials'),
      authorizer_id: resource.field('authorizer_id'),
      authorizer_result_ttl_in_seconds: resource.field('authorizer_result_ttl_in_seconds'),
      authorizer_uri: resource.field('authorizer_uri'),
      id: resource.field('id'),
      identity_source: resource.field('identity_source'),
      identity_validation_expression: resource.field('identity_validation_expression'),
      name: resource.field('name'),
      provider_arns: resource.field('provider_arns'),
      rest_api_id: resource.field('rest_api_id'),
      type: resource.field('type'),
    },
    api_gateway_authorizers(name, block): {
      local resource = blockType.resource('aws_api_gateway_authorizers', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        rest_api_id: build.template(block.rest_api_id),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      rest_api_id: resource.field('rest_api_id'),
    },
    api_gateway_domain_name(name, block): {
      local resource = blockType.resource('aws_api_gateway_domain_name', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        certificate_name: build.template(std.get(block, 'certificate_name', null)),
        certificate_upload_date: build.template(std.get(block, 'certificate_upload_date', null)),
        cloudfront_domain_name: build.template(std.get(block, 'cloudfront_domain_name', null)),
        cloudfront_zone_id: build.template(std.get(block, 'cloudfront_zone_id', null)),
        domain_name: build.template(block.domain_name),
        endpoint_configuration: build.template(std.get(block, 'endpoint_configuration', null)),
        id: build.template(std.get(block, 'id', null)),
        regional_certificate_arn: build.template(std.get(block, 'regional_certificate_arn', null)),
        regional_certificate_name: build.template(std.get(block, 'regional_certificate_name', null)),
        regional_domain_name: build.template(std.get(block, 'regional_domain_name', null)),
        regional_zone_id: build.template(std.get(block, 'regional_zone_id', null)),
        security_policy: build.template(std.get(block, 'security_policy', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      certificate_arn: resource.field('certificate_arn'),
      certificate_name: resource.field('certificate_name'),
      certificate_upload_date: resource.field('certificate_upload_date'),
      cloudfront_domain_name: resource.field('cloudfront_domain_name'),
      cloudfront_zone_id: resource.field('cloudfront_zone_id'),
      domain_name: resource.field('domain_name'),
      endpoint_configuration: resource.field('endpoint_configuration'),
      id: resource.field('id'),
      regional_certificate_arn: resource.field('regional_certificate_arn'),
      regional_certificate_name: resource.field('regional_certificate_name'),
      regional_domain_name: resource.field('regional_domain_name'),
      regional_zone_id: resource.field('regional_zone_id'),
      security_policy: resource.field('security_policy'),
      tags: resource.field('tags'),
    },
    api_gateway_export(name, block): {
      local resource = blockType.resource('aws_api_gateway_export', name),
      _: resource._(block, {
        accepts: build.template(std.get(block, 'accepts', null)),
        body: build.template(std.get(block, 'body', null)),
        content_disposition: build.template(std.get(block, 'content_disposition', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        export_type: build.template(block.export_type),
        id: build.template(std.get(block, 'id', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        rest_api_id: build.template(block.rest_api_id),
        stage_name: build.template(block.stage_name),
      }),
      accepts: resource.field('accepts'),
      body: resource.field('body'),
      content_disposition: resource.field('content_disposition'),
      content_type: resource.field('content_type'),
      export_type: resource.field('export_type'),
      id: resource.field('id'),
      parameters: resource.field('parameters'),
      rest_api_id: resource.field('rest_api_id'),
      stage_name: resource.field('stage_name'),
    },
    api_gateway_resource(name, block): {
      local resource = blockType.resource('aws_api_gateway_resource', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        parent_id: build.template(std.get(block, 'parent_id', null)),
        path: build.template(block.path),
        path_part: build.template(std.get(block, 'path_part', null)),
        rest_api_id: build.template(block.rest_api_id),
      }),
      id: resource.field('id'),
      parent_id: resource.field('parent_id'),
      path: resource.field('path'),
      path_part: resource.field('path_part'),
      rest_api_id: resource.field('rest_api_id'),
    },
    api_gateway_rest_api(name, block): {
      local resource = blockType.resource('aws_api_gateway_rest_api', name),
      _: resource._(block, {
        api_key_source: build.template(std.get(block, 'api_key_source', null)),
        arn: build.template(std.get(block, 'arn', null)),
        binary_media_types: build.template(std.get(block, 'binary_media_types', null)),
        description: build.template(std.get(block, 'description', null)),
        endpoint_configuration: build.template(std.get(block, 'endpoint_configuration', null)),
        execution_arn: build.template(std.get(block, 'execution_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        minimum_compression_size: build.template(std.get(block, 'minimum_compression_size', null)),
        name: build.template(block.name),
        policy: build.template(std.get(block, 'policy', null)),
        root_resource_id: build.template(std.get(block, 'root_resource_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      api_key_source: resource.field('api_key_source'),
      arn: resource.field('arn'),
      binary_media_types: resource.field('binary_media_types'),
      description: resource.field('description'),
      endpoint_configuration: resource.field('endpoint_configuration'),
      execution_arn: resource.field('execution_arn'),
      id: resource.field('id'),
      minimum_compression_size: resource.field('minimum_compression_size'),
      name: resource.field('name'),
      policy: resource.field('policy'),
      root_resource_id: resource.field('root_resource_id'),
      tags: resource.field('tags'),
    },
    api_gateway_sdk(name, block): {
      local resource = blockType.resource('aws_api_gateway_sdk', name),
      _: resource._(block, {
        body: build.template(std.get(block, 'body', null)),
        content_disposition: build.template(std.get(block, 'content_disposition', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        id: build.template(std.get(block, 'id', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        rest_api_id: build.template(block.rest_api_id),
        sdk_type: build.template(block.sdk_type),
        stage_name: build.template(block.stage_name),
      }),
      body: resource.field('body'),
      content_disposition: resource.field('content_disposition'),
      content_type: resource.field('content_type'),
      id: resource.field('id'),
      parameters: resource.field('parameters'),
      rest_api_id: resource.field('rest_api_id'),
      sdk_type: resource.field('sdk_type'),
      stage_name: resource.field('stage_name'),
    },
    api_gateway_vpc_link(name, block): {
      local resource = blockType.resource('aws_api_gateway_vpc_link', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        status_message: build.template(std.get(block, 'status_message', null)),
        tags: build.template(std.get(block, 'tags', null)),
        target_arns: build.template(std.get(block, 'target_arns', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
      status_message: resource.field('status_message'),
      tags: resource.field('tags'),
      target_arns: resource.field('target_arns'),
    },
    apigatewayv2_api(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_api', name),
      _: resource._(block, {
        api_endpoint: build.template(std.get(block, 'api_endpoint', null)),
        api_id: build.template(block.api_id),
        api_key_selection_expression: build.template(std.get(block, 'api_key_selection_expression', null)),
        arn: build.template(std.get(block, 'arn', null)),
        cors_configuration: build.template(std.get(block, 'cors_configuration', null)),
        description: build.template(std.get(block, 'description', null)),
        disable_execute_api_endpoint: build.template(std.get(block, 'disable_execute_api_endpoint', null)),
        execution_arn: build.template(std.get(block, 'execution_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        protocol_type: build.template(std.get(block, 'protocol_type', null)),
        route_selection_expression: build.template(std.get(block, 'route_selection_expression', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      api_endpoint: resource.field('api_endpoint'),
      api_id: resource.field('api_id'),
      api_key_selection_expression: resource.field('api_key_selection_expression'),
      arn: resource.field('arn'),
      cors_configuration: resource.field('cors_configuration'),
      description: resource.field('description'),
      disable_execute_api_endpoint: resource.field('disable_execute_api_endpoint'),
      execution_arn: resource.field('execution_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      protocol_type: resource.field('protocol_type'),
      route_selection_expression: resource.field('route_selection_expression'),
      tags: resource.field('tags'),
      version: resource.field('version'),
    },
    apigatewayv2_apis(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_apis', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        name: build.template(std.get(block, 'name', null)),
        protocol_type: build.template(std.get(block, 'protocol_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      name: resource.field('name'),
      protocol_type: resource.field('protocol_type'),
      tags: resource.field('tags'),
    },
    apigatewayv2_export(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_export', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        body: build.template(std.get(block, 'body', null)),
        export_version: build.template(std.get(block, 'export_version', null)),
        id: build.template(std.get(block, 'id', null)),
        include_extensions: build.template(std.get(block, 'include_extensions', null)),
        output_type: build.template(block.output_type),
        specification: build.template(block.specification),
        stage_name: build.template(std.get(block, 'stage_name', null)),
      }),
      api_id: resource.field('api_id'),
      body: resource.field('body'),
      export_version: resource.field('export_version'),
      id: resource.field('id'),
      include_extensions: resource.field('include_extensions'),
      output_type: resource.field('output_type'),
      specification: resource.field('specification'),
      stage_name: resource.field('stage_name'),
    },
    apigatewayv2_vpc_link(name, block): {
      local resource = blockType.resource('aws_apigatewayv2_vpc_link', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_link_id: build.template(block.vpc_link_id),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      security_group_ids: resource.field('security_group_ids'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      vpc_link_id: resource.field('vpc_link_id'),
    },
    appconfig_configuration_profile(name, block): {
      local resource = blockType.resource('aws_appconfig_configuration_profile', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        arn: build.template(std.get(block, 'arn', null)),
        configuration_profile_id: build.template(block.configuration_profile_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_identifier: build.template(std.get(block, 'kms_key_identifier', null)),
        location_uri: build.template(std.get(block, 'location_uri', null)),
        name: build.template(std.get(block, 'name', null)),
        retrieval_role_arn: build.template(std.get(block, 'retrieval_role_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
        validator: build.template(std.get(block, 'validator', null)),
      }),
      application_id: resource.field('application_id'),
      arn: resource.field('arn'),
      configuration_profile_id: resource.field('configuration_profile_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      kms_key_identifier: resource.field('kms_key_identifier'),
      location_uri: resource.field('location_uri'),
      name: resource.field('name'),
      retrieval_role_arn: resource.field('retrieval_role_arn'),
      tags: resource.field('tags'),
      type: resource.field('type'),
      validator: resource.field('validator'),
    },
    appconfig_configuration_profiles(name, block): {
      local resource = blockType.resource('aws_appconfig_configuration_profiles', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        configuration_profile_ids: build.template(std.get(block, 'configuration_profile_ids', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      application_id: resource.field('application_id'),
      configuration_profile_ids: resource.field('configuration_profile_ids'),
      id: resource.field('id'),
    },
    appconfig_environment(name, block): {
      local resource = blockType.resource('aws_appconfig_environment', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        environment_id: build.template(block.environment_id),
        id: build.template(std.get(block, 'id', null)),
        monitor: build.template(std.get(block, 'monitor', null)),
        name: build.template(std.get(block, 'name', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      application_id: resource.field('application_id'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      environment_id: resource.field('environment_id'),
      id: resource.field('id'),
      monitor: resource.field('monitor'),
      name: resource.field('name'),
      state: resource.field('state'),
      tags: resource.field('tags'),
    },
    appconfig_environments(name, block): {
      local resource = blockType.resource('aws_appconfig_environments', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        environment_ids: build.template(std.get(block, 'environment_ids', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      application_id: resource.field('application_id'),
      environment_ids: resource.field('environment_ids'),
      id: resource.field('id'),
    },
    appintegrations_event_integration(name, block): {
      local resource = blockType.resource('aws_appintegrations_event_integration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        event_filter: build.template(std.get(block, 'event_filter', null)),
        eventbridge_bus: build.template(std.get(block, 'eventbridge_bus', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      event_filter: resource.field('event_filter'),
      eventbridge_bus: resource.field('eventbridge_bus'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
    },
    appmesh_gateway_route(name, block): {
      local resource = blockType.resource('aws_appmesh_gateway_route', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_name: build.template(block.mesh_name),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        spec: build.template(std.get(block, 'spec', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_gateway_name: build.template(block.virtual_gateway_name),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_name: resource.field('mesh_name'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      spec: resource.field('spec'),
      tags: resource.field('tags'),
      virtual_gateway_name: resource.field('virtual_gateway_name'),
    },
    appmesh_mesh(name, block): {
      local resource = blockType.resource('aws_appmesh_mesh', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        spec: build.template(std.get(block, 'spec', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      spec: resource.field('spec'),
      tags: resource.field('tags'),
    },
    appmesh_route(name, block): {
      local resource = blockType.resource('aws_appmesh_route', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_name: build.template(block.mesh_name),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        spec: build.template(std.get(block, 'spec', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_router_name: build.template(block.virtual_router_name),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_name: resource.field('mesh_name'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      spec: resource.field('spec'),
      tags: resource.field('tags'),
      virtual_router_name: resource.field('virtual_router_name'),
    },
    appmesh_virtual_gateway(name, block): {
      local resource = blockType.resource('aws_appmesh_virtual_gateway', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_name: build.template(block.mesh_name),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        spec: build.template(std.get(block, 'spec', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_name: resource.field('mesh_name'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      spec: resource.field('spec'),
      tags: resource.field('tags'),
    },
    appmesh_virtual_node(name, block): {
      local resource = blockType.resource('aws_appmesh_virtual_node', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_name: build.template(block.mesh_name),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        spec: build.template(std.get(block, 'spec', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_name: resource.field('mesh_name'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      spec: resource.field('spec'),
      tags: resource.field('tags'),
    },
    appmesh_virtual_router(name, block): {
      local resource = blockType.resource('aws_appmesh_virtual_router', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_name: build.template(block.mesh_name),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        spec: build.template(std.get(block, 'spec', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_name: resource.field('mesh_name'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      spec: resource.field('spec'),
      tags: resource.field('tags'),
    },
    appmesh_virtual_service(name, block): {
      local resource = blockType.resource('aws_appmesh_virtual_service', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        mesh_name: build.template(block.mesh_name),
        mesh_owner: build.template(std.get(block, 'mesh_owner', null)),
        name: build.template(block.name),
        resource_owner: build.template(std.get(block, 'resource_owner', null)),
        spec: build.template(std.get(block, 'spec', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      mesh_name: resource.field('mesh_name'),
      mesh_owner: resource.field('mesh_owner'),
      name: resource.field('name'),
      resource_owner: resource.field('resource_owner'),
      spec: resource.field('spec'),
      tags: resource.field('tags'),
    },
    apprunner_hosted_zone_id(name, block): {
      local resource = blockType.resource('aws_apprunner_hosted_zone_id', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      id: resource.field('id'),
      region: resource.field('region'),
    },
    appstream_image(name, block): {
      local resource = blockType.resource('aws_appstream_image', name),
      _: resource._(block, {
        applications: build.template(std.get(block, 'applications', null)),
        appstream_agent_version: build.template(std.get(block, 'appstream_agent_version', null)),
        arn: build.template(std.get(block, 'arn', null)),
        base_image_arn: build.template(std.get(block, 'base_image_arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        image_builder_name: build.template(std.get(block, 'image_builder_name', null)),
        image_builder_supported: build.template(std.get(block, 'image_builder_supported', null)),
        image_permissions: build.template(std.get(block, 'image_permissions', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        name: build.template(std.get(block, 'name', null)),
        name_regex: build.template(std.get(block, 'name_regex', null)),
        platform: build.template(std.get(block, 'platform', null)),
        public_base_image_released_date: build.template(std.get(block, 'public_base_image_released_date', null)),
        state: build.template(std.get(block, 'state', null)),
        state_change_reason: build.template(std.get(block, 'state_change_reason', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      applications: resource.field('applications'),
      appstream_agent_version: resource.field('appstream_agent_version'),
      arn: resource.field('arn'),
      base_image_arn: resource.field('base_image_arn'),
      created_time: resource.field('created_time'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      image_builder_name: resource.field('image_builder_name'),
      image_builder_supported: resource.field('image_builder_supported'),
      image_permissions: resource.field('image_permissions'),
      most_recent: resource.field('most_recent'),
      name: resource.field('name'),
      name_regex: resource.field('name_regex'),
      platform: resource.field('platform'),
      public_base_image_released_date: resource.field('public_base_image_released_date'),
      state: resource.field('state'),
      state_change_reason: resource.field('state_change_reason'),
      type: resource.field('type'),
    },
    arn(name, block): {
      local resource = blockType.resource('aws_arn', name),
      _: resource._(block, {
        account: build.template(std.get(block, 'account', null)),
        arn: build.template(block.arn),
        id: build.template(std.get(block, 'id', null)),
        partition: build.template(std.get(block, 'partition', null)),
        region: build.template(std.get(block, 'region', null)),
        resource: build.template(std.get(block, 'resource', null)),
        service: build.template(std.get(block, 'service', null)),
      }),
      account: resource.field('account'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      partition: resource.field('partition'),
      region: resource.field('region'),
      resource: resource.field('resource'),
      service: resource.field('service'),
    },
    athena_named_query(name, block): {
      local resource = blockType.resource('aws_athena_named_query', name),
      _: resource._(block, {
        database: build.template(std.get(block, 'database', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        querystring: build.template(std.get(block, 'querystring', null)),
        workgroup: build.template(std.get(block, 'workgroup', null)),
      }),
      database: resource.field('database'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      querystring: resource.field('querystring'),
      workgroup: resource.field('workgroup'),
    },
    auditmanager_control(name, block): {
      local resource = blockType.resource('aws_auditmanager_control', name),
      _: resource._(block, {
        action_plan_instructions: build.template(std.get(block, 'action_plan_instructions', null)),
        action_plan_title: build.template(std.get(block, 'action_plan_title', null)),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        testing_information: build.template(std.get(block, 'testing_information', null)),
        type: build.template(block.type),
      }),
      action_plan_instructions: resource.field('action_plan_instructions'),
      action_plan_title: resource.field('action_plan_title'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      testing_information: resource.field('testing_information'),
      type: resource.field('type'),
    },
    auditmanager_framework(name, block): {
      local resource = blockType.resource('aws_auditmanager_framework', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        compliance_type: build.template(std.get(block, 'compliance_type', null)),
        description: build.template(std.get(block, 'description', null)),
        framework_type: build.template(block.framework_type),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      compliance_type: resource.field('compliance_type'),
      description: resource.field('description'),
      framework_type: resource.field('framework_type'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
    },
    autoscaling_group(name, block): {
      local resource = blockType.resource('aws_autoscaling_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        default_cooldown: build.template(std.get(block, 'default_cooldown', null)),
        desired_capacity: build.template(std.get(block, 'desired_capacity', null)),
        desired_capacity_type: build.template(std.get(block, 'desired_capacity_type', null)),
        enabled_metrics: build.template(std.get(block, 'enabled_metrics', null)),
        health_check_grace_period: build.template(std.get(block, 'health_check_grace_period', null)),
        health_check_type: build.template(std.get(block, 'health_check_type', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_maintenance_policy: build.template(std.get(block, 'instance_maintenance_policy', null)),
        launch_configuration: build.template(std.get(block, 'launch_configuration', null)),
        launch_template: build.template(std.get(block, 'launch_template', null)),
        load_balancers: build.template(std.get(block, 'load_balancers', null)),
        max_instance_lifetime: build.template(std.get(block, 'max_instance_lifetime', null)),
        max_size: build.template(std.get(block, 'max_size', null)),
        min_size: build.template(std.get(block, 'min_size', null)),
        mixed_instances_policy: build.template(std.get(block, 'mixed_instances_policy', null)),
        name: build.template(block.name),
        new_instances_protected_from_scale_in: build.template(std.get(block, 'new_instances_protected_from_scale_in', null)),
        placement_group: build.template(std.get(block, 'placement_group', null)),
        predicted_capacity: build.template(std.get(block, 'predicted_capacity', null)),
        service_linked_role_arn: build.template(std.get(block, 'service_linked_role_arn', null)),
        status: build.template(std.get(block, 'status', null)),
        suspended_processes: build.template(std.get(block, 'suspended_processes', null)),
        tag: build.template(std.get(block, 'tag', null)),
        target_group_arns: build.template(std.get(block, 'target_group_arns', null)),
        termination_policies: build.template(std.get(block, 'termination_policies', null)),
        traffic_source: build.template(std.get(block, 'traffic_source', null)),
        vpc_zone_identifier: build.template(std.get(block, 'vpc_zone_identifier', null)),
        warm_pool: build.template(std.get(block, 'warm_pool', null)),
        warm_pool_size: build.template(std.get(block, 'warm_pool_size', null)),
      }),
      arn: resource.field('arn'),
      availability_zones: resource.field('availability_zones'),
      default_cooldown: resource.field('default_cooldown'),
      desired_capacity: resource.field('desired_capacity'),
      desired_capacity_type: resource.field('desired_capacity_type'),
      enabled_metrics: resource.field('enabled_metrics'),
      health_check_grace_period: resource.field('health_check_grace_period'),
      health_check_type: resource.field('health_check_type'),
      id: resource.field('id'),
      instance_maintenance_policy: resource.field('instance_maintenance_policy'),
      launch_configuration: resource.field('launch_configuration'),
      launch_template: resource.field('launch_template'),
      load_balancers: resource.field('load_balancers'),
      max_instance_lifetime: resource.field('max_instance_lifetime'),
      max_size: resource.field('max_size'),
      min_size: resource.field('min_size'),
      mixed_instances_policy: resource.field('mixed_instances_policy'),
      name: resource.field('name'),
      new_instances_protected_from_scale_in: resource.field('new_instances_protected_from_scale_in'),
      placement_group: resource.field('placement_group'),
      predicted_capacity: resource.field('predicted_capacity'),
      service_linked_role_arn: resource.field('service_linked_role_arn'),
      status: resource.field('status'),
      suspended_processes: resource.field('suspended_processes'),
      tag: resource.field('tag'),
      target_group_arns: resource.field('target_group_arns'),
      termination_policies: resource.field('termination_policies'),
      traffic_source: resource.field('traffic_source'),
      vpc_zone_identifier: resource.field('vpc_zone_identifier'),
      warm_pool: resource.field('warm_pool'),
      warm_pool_size: resource.field('warm_pool_size'),
    },
    autoscaling_groups(name, block): {
      local resource = blockType.resource('aws_autoscaling_groups', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      names: resource.field('names'),
    },
    availability_zone(name, block): {
      local resource = blockType.resource('aws_availability_zone', name),
      _: resource._(block, {
        all_availability_zones: build.template(std.get(block, 'all_availability_zones', null)),
        group_name: build.template(std.get(block, 'group_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_suffix: build.template(std.get(block, 'name_suffix', null)),
        network_border_group: build.template(std.get(block, 'network_border_group', null)),
        opt_in_status: build.template(std.get(block, 'opt_in_status', null)),
        parent_zone_id: build.template(std.get(block, 'parent_zone_id', null)),
        parent_zone_name: build.template(std.get(block, 'parent_zone_name', null)),
        region: build.template(std.get(block, 'region', null)),
        state: build.template(std.get(block, 'state', null)),
        zone_id: build.template(std.get(block, 'zone_id', null)),
        zone_type: build.template(std.get(block, 'zone_type', null)),
      }),
      all_availability_zones: resource.field('all_availability_zones'),
      group_name: resource.field('group_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_suffix: resource.field('name_suffix'),
      network_border_group: resource.field('network_border_group'),
      opt_in_status: resource.field('opt_in_status'),
      parent_zone_id: resource.field('parent_zone_id'),
      parent_zone_name: resource.field('parent_zone_name'),
      region: resource.field('region'),
      state: resource.field('state'),
      zone_id: resource.field('zone_id'),
      zone_type: resource.field('zone_type'),
    },
    availability_zones(name, block): {
      local resource = blockType.resource('aws_availability_zones', name),
      _: resource._(block, {
        all_availability_zones: build.template(std.get(block, 'all_availability_zones', null)),
        exclude_names: build.template(std.get(block, 'exclude_names', null)),
        exclude_zone_ids: build.template(std.get(block, 'exclude_zone_ids', null)),
        group_names: build.template(std.get(block, 'group_names', null)),
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
        state: build.template(std.get(block, 'state', null)),
        zone_ids: build.template(std.get(block, 'zone_ids', null)),
      }),
      all_availability_zones: resource.field('all_availability_zones'),
      exclude_names: resource.field('exclude_names'),
      exclude_zone_ids: resource.field('exclude_zone_ids'),
      group_names: resource.field('group_names'),
      id: resource.field('id'),
      names: resource.field('names'),
      state: resource.field('state'),
      zone_ids: resource.field('zone_ids'),
    },
    backup_framework(name, block): {
      local resource = blockType.resource('aws_backup_framework', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        control: build.template(std.get(block, 'control', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        deployment_status: build.template(std.get(block, 'deployment_status', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      control: resource.field('control'),
      creation_time: resource.field('creation_time'),
      deployment_status: resource.field('deployment_status'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
      tags: resource.field('tags'),
    },
    backup_plan(name, block): {
      local resource = blockType.resource('aws_backup_plan', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        plan_id: build.template(block.plan_id),
        rule: build.template(std.get(block, 'rule', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      plan_id: resource.field('plan_id'),
      rule: resource.field('rule'),
      tags: resource.field('tags'),
      version: resource.field('version'),
    },
    backup_report_plan(name, block): {
      local resource = blockType.resource('aws_backup_report_plan', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        deployment_status: build.template(std.get(block, 'deployment_status', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        report_delivery_channel: build.template(std.get(block, 'report_delivery_channel', null)),
        report_setting: build.template(std.get(block, 'report_setting', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      deployment_status: resource.field('deployment_status'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      report_delivery_channel: resource.field('report_delivery_channel'),
      report_setting: resource.field('report_setting'),
      tags: resource.field('tags'),
    },
    backup_selection(name, block): {
      local resource = blockType.resource('aws_backup_selection', name),
      _: resource._(block, {
        iam_role_arn: build.template(std.get(block, 'iam_role_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        plan_id: build.template(block.plan_id),
        resources: build.template(std.get(block, 'resources', null)),
        selection_id: build.template(block.selection_id),
      }),
      iam_role_arn: resource.field('iam_role_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      plan_id: resource.field('plan_id'),
      resources: resource.field('resources'),
      selection_id: resource.field('selection_id'),
    },
    backup_vault(name, block): {
      local resource = blockType.resource('aws_backup_vault', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        name: build.template(block.name),
        recovery_points: build.template(std.get(block, 'recovery_points', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      name: resource.field('name'),
      recovery_points: resource.field('recovery_points'),
      tags: resource.field('tags'),
    },
    batch_compute_environment(name, block): {
      local resource = blockType.resource('aws_batch_compute_environment', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        compute_environment_name: build.template(block.compute_environment_name),
        ecs_cluster_arn: build.template(std.get(block, 'ecs_cluster_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        service_role: build.template(std.get(block, 'service_role', null)),
        state: build.template(std.get(block, 'state', null)),
        status: build.template(std.get(block, 'status', null)),
        status_reason: build.template(std.get(block, 'status_reason', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
        update_policy: build.template(std.get(block, 'update_policy', null)),
      }),
      arn: resource.field('arn'),
      compute_environment_name: resource.field('compute_environment_name'),
      ecs_cluster_arn: resource.field('ecs_cluster_arn'),
      id: resource.field('id'),
      service_role: resource.field('service_role'),
      state: resource.field('state'),
      status: resource.field('status'),
      status_reason: resource.field('status_reason'),
      tags: resource.field('tags'),
      type: resource.field('type'),
      update_policy: resource.field('update_policy'),
    },
    batch_job_definition(name, block): {
      local resource = blockType.resource('aws_batch_job_definition', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        arn_prefix: build.template(std.get(block, 'arn_prefix', null)),
        container_orchestration_type: build.template(std.get(block, 'container_orchestration_type', null)),
        eks_properties: build.template(std.get(block, 'eks_properties', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        node_properties: build.template(std.get(block, 'node_properties', null)),
        retry_strategy: build.template(std.get(block, 'retry_strategy', null)),
        revision: build.template(std.get(block, 'revision', null)),
        scheduling_priority: build.template(std.get(block, 'scheduling_priority', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      arn_prefix: resource.field('arn_prefix'),
      container_orchestration_type: resource.field('container_orchestration_type'),
      eks_properties: resource.field('eks_properties'),
      id: resource.field('id'),
      name: resource.field('name'),
      node_properties: resource.field('node_properties'),
      retry_strategy: resource.field('retry_strategy'),
      revision: resource.field('revision'),
      scheduling_priority: resource.field('scheduling_priority'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      timeout: resource.field('timeout'),
      type: resource.field('type'),
    },
    batch_job_queue(name, block): {
      local resource = blockType.resource('aws_batch_job_queue', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        compute_environment_order: build.template(std.get(block, 'compute_environment_order', null)),
        id: build.template(std.get(block, 'id', null)),
        job_state_time_limit_action: build.template(std.get(block, 'job_state_time_limit_action', null)),
        name: build.template(block.name),
        priority: build.template(std.get(block, 'priority', null)),
        scheduling_policy_arn: build.template(std.get(block, 'scheduling_policy_arn', null)),
        state: build.template(std.get(block, 'state', null)),
        status: build.template(std.get(block, 'status', null)),
        status_reason: build.template(std.get(block, 'status_reason', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      compute_environment_order: resource.field('compute_environment_order'),
      id: resource.field('id'),
      job_state_time_limit_action: resource.field('job_state_time_limit_action'),
      name: resource.field('name'),
      priority: resource.field('priority'),
      scheduling_policy_arn: resource.field('scheduling_policy_arn'),
      state: resource.field('state'),
      status: resource.field('status'),
      status_reason: resource.field('status_reason'),
      tags: resource.field('tags'),
    },
    batch_scheduling_policy(name, block): {
      local resource = blockType.resource('aws_batch_scheduling_policy', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        fair_share_policy: build.template(std.get(block, 'fair_share_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      fair_share_policy: resource.field('fair_share_policy'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
    },
    bedrock_custom_model(name, block): {
      local resource = blockType.resource('aws_bedrock_custom_model', name),
      _: resource._(block, {
        base_model_arn: build.template(std.get(block, 'base_model_arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        hyperparameters: build.template(std.get(block, 'hyperparameters', null)),
        id: build.template(std.get(block, 'id', null)),
        job_arn: build.template(std.get(block, 'job_arn', null)),
        job_name: build.template(std.get(block, 'job_name', null)),
        job_tags: build.template(std.get(block, 'job_tags', null)),
        model_arn: build.template(std.get(block, 'model_arn', null)),
        model_id: build.template(block.model_id),
        model_kms_key_arn: build.template(std.get(block, 'model_kms_key_arn', null)),
        model_name: build.template(std.get(block, 'model_name', null)),
        model_tags: build.template(std.get(block, 'model_tags', null)),
        output_data_config: build.template(std.get(block, 'output_data_config', null)),
        training_data_config: build.template(std.get(block, 'training_data_config', null)),
        training_metrics: build.template(std.get(block, 'training_metrics', null)),
        validation_data_config: build.template(std.get(block, 'validation_data_config', null)),
        validation_metrics: build.template(std.get(block, 'validation_metrics', null)),
      }),
      base_model_arn: resource.field('base_model_arn'),
      creation_time: resource.field('creation_time'),
      hyperparameters: resource.field('hyperparameters'),
      id: resource.field('id'),
      job_arn: resource.field('job_arn'),
      job_name: resource.field('job_name'),
      job_tags: resource.field('job_tags'),
      model_arn: resource.field('model_arn'),
      model_id: resource.field('model_id'),
      model_kms_key_arn: resource.field('model_kms_key_arn'),
      model_name: resource.field('model_name'),
      model_tags: resource.field('model_tags'),
      output_data_config: resource.field('output_data_config'),
      training_data_config: resource.field('training_data_config'),
      training_metrics: resource.field('training_metrics'),
      validation_data_config: resource.field('validation_data_config'),
      validation_metrics: resource.field('validation_metrics'),
    },
    bedrock_custom_models(name, block): {
      local resource = blockType.resource('aws_bedrock_custom_models', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        model_summaries: build.template(std.get(block, 'model_summaries', null)),
      }),
      id: resource.field('id'),
      model_summaries: resource.field('model_summaries'),
    },
    bedrock_foundation_model(name, block): {
      local resource = blockType.resource('aws_bedrock_foundation_model', name),
      _: resource._(block, {
        customizations_supported: build.template(std.get(block, 'customizations_supported', null)),
        id: build.template(std.get(block, 'id', null)),
        inference_types_supported: build.template(std.get(block, 'inference_types_supported', null)),
        input_modalities: build.template(std.get(block, 'input_modalities', null)),
        model_arn: build.template(std.get(block, 'model_arn', null)),
        model_id: build.template(block.model_id),
        model_name: build.template(std.get(block, 'model_name', null)),
        output_modalities: build.template(std.get(block, 'output_modalities', null)),
        provider_name: build.template(std.get(block, 'provider_name', null)),
        response_streaming_supported: build.template(std.get(block, 'response_streaming_supported', null)),
      }),
      customizations_supported: resource.field('customizations_supported'),
      id: resource.field('id'),
      inference_types_supported: resource.field('inference_types_supported'),
      input_modalities: resource.field('input_modalities'),
      model_arn: resource.field('model_arn'),
      model_id: resource.field('model_id'),
      model_name: resource.field('model_name'),
      output_modalities: resource.field('output_modalities'),
      provider_name: resource.field('provider_name'),
      response_streaming_supported: resource.field('response_streaming_supported'),
    },
    bedrock_foundation_models(name, block): {
      local resource = blockType.resource('aws_bedrock_foundation_models', name),
      _: resource._(block, {
        by_customization_type: build.template(std.get(block, 'by_customization_type', null)),
        by_inference_type: build.template(std.get(block, 'by_inference_type', null)),
        by_output_modality: build.template(std.get(block, 'by_output_modality', null)),
        by_provider: build.template(std.get(block, 'by_provider', null)),
        id: build.template(std.get(block, 'id', null)),
        model_summaries: build.template(std.get(block, 'model_summaries', null)),
      }),
      by_customization_type: resource.field('by_customization_type'),
      by_inference_type: resource.field('by_inference_type'),
      by_output_modality: resource.field('by_output_modality'),
      by_provider: resource.field('by_provider'),
      id: resource.field('id'),
      model_summaries: resource.field('model_summaries'),
    },
    bedrock_inference_profile(name, block): {
      local resource = blockType.resource('aws_bedrock_inference_profile', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        inference_profile_arn: build.template(std.get(block, 'inference_profile_arn', null)),
        inference_profile_id: build.template(block.inference_profile_id),
        inference_profile_name: build.template(std.get(block, 'inference_profile_name', null)),
        models: build.template(std.get(block, 'models', null)),
        status: build.template(std.get(block, 'status', null)),
        type: build.template(std.get(block, 'type', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      created_at: resource.field('created_at'),
      description: resource.field('description'),
      inference_profile_arn: resource.field('inference_profile_arn'),
      inference_profile_id: resource.field('inference_profile_id'),
      inference_profile_name: resource.field('inference_profile_name'),
      models: resource.field('models'),
      status: resource.field('status'),
      type: resource.field('type'),
      updated_at: resource.field('updated_at'),
    },
    bedrock_inference_profiles(name, block): {
      local resource = blockType.resource('aws_bedrock_inference_profiles', name),
      _: resource._(block, {
        inference_profile_summaries: build.template(std.get(block, 'inference_profile_summaries', null)),
      }),
      inference_profile_summaries: resource.field('inference_profile_summaries'),
    },
    bedrockagent_agent_versions(name, block): {
      local resource = blockType.resource('aws_bedrockagent_agent_versions', name),
      _: resource._(block, {
        agent_id: build.template(block.agent_id),
      }),
      agent_id: resource.field('agent_id'),
    },
    billing_service_account(name, block): {
      local resource = blockType.resource('aws_billing_service_account', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
    },
    budgets_budget(name, block): {
      local resource = blockType.resource('aws_budgets_budget', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_adjust_data: build.template(std.get(block, 'auto_adjust_data', null)),
        budget_exceeded: build.template(std.get(block, 'budget_exceeded', null)),
        budget_limit: build.template(std.get(block, 'budget_limit', null)),
        budget_type: build.template(std.get(block, 'budget_type', null)),
        calculated_spend: build.template(std.get(block, 'calculated_spend', null)),
        cost_filter: build.template(std.get(block, 'cost_filter', null)),
        cost_types: build.template(std.get(block, 'cost_types', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        notification: build.template(std.get(block, 'notification', null)),
        planned_limit: build.template(std.get(block, 'planned_limit', null)),
        tags: build.template(std.get(block, 'tags', null)),
        time_period_end: build.template(std.get(block, 'time_period_end', null)),
        time_period_start: build.template(std.get(block, 'time_period_start', null)),
        time_unit: build.template(std.get(block, 'time_unit', null)),
      }),
      account_id: resource.field('account_id'),
      arn: resource.field('arn'),
      auto_adjust_data: resource.field('auto_adjust_data'),
      budget_exceeded: resource.field('budget_exceeded'),
      budget_limit: resource.field('budget_limit'),
      budget_type: resource.field('budget_type'),
      calculated_spend: resource.field('calculated_spend'),
      cost_filter: resource.field('cost_filter'),
      cost_types: resource.field('cost_types'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      notification: resource.field('notification'),
      planned_limit: resource.field('planned_limit'),
      tags: resource.field('tags'),
      time_period_end: resource.field('time_period_end'),
      time_period_start: resource.field('time_period_start'),
      time_unit: resource.field('time_unit'),
    },
    caller_identity(name, block): {
      local resource = blockType.resource('aws_caller_identity', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        user_id: build.template(std.get(block, 'user_id', null)),
      }),
      account_id: resource.field('account_id'),
      arn: resource.field('arn'),
      id: resource.field('id'),
      user_id: resource.field('user_id'),
    },
    canonical_user_id(name, block): {
      local resource = blockType.resource('aws_canonical_user_id', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
    },
    ce_cost_category(name, block): {
      local resource = blockType.resource('aws_ce_cost_category', name),
      _: resource._(block, {
        cost_category_arn: build.template(block.cost_category_arn),
        default_value: build.template(std.get(block, 'default_value', null)),
        effective_end: build.template(std.get(block, 'effective_end', null)),
        effective_start: build.template(std.get(block, 'effective_start', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        rule: build.template(std.get(block, 'rule', null)),
        rule_version: build.template(std.get(block, 'rule_version', null)),
        split_charge_rule: build.template(std.get(block, 'split_charge_rule', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      cost_category_arn: resource.field('cost_category_arn'),
      default_value: resource.field('default_value'),
      effective_end: resource.field('effective_end'),
      effective_start: resource.field('effective_start'),
      id: resource.field('id'),
      name: resource.field('name'),
      rule: resource.field('rule'),
      rule_version: resource.field('rule_version'),
      split_charge_rule: resource.field('split_charge_rule'),
      tags: resource.field('tags'),
    },
    ce_tags(name, block): {
      local resource = blockType.resource('aws_ce_tags', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        search_string: build.template(std.get(block, 'search_string', null)),
        tag_key: build.template(std.get(block, 'tag_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      search_string: resource.field('search_string'),
      tag_key: resource.field('tag_key'),
      tags: resource.field('tags'),
    },
    chatbot_slack_workspace(name, block): {
      local resource = blockType.resource('aws_chatbot_slack_workspace', name),
      _: resource._(block, {
        slack_team_id: build.template(std.get(block, 'slack_team_id', null)),
        slack_team_name: build.template(block.slack_team_name),
      }),
      slack_team_id: resource.field('slack_team_id'),
      slack_team_name: resource.field('slack_team_name'),
    },
    cloudcontrolapi_resource(name, block): {
      local resource = blockType.resource('aws_cloudcontrolapi_resource', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identifier: build.template(block.identifier),
        properties: build.template(std.get(block, 'properties', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        type_name: build.template(block.type_name),
        type_version_id: build.template(std.get(block, 'type_version_id', null)),
      }),
      id: resource.field('id'),
      identifier: resource.field('identifier'),
      properties: resource.field('properties'),
      role_arn: resource.field('role_arn'),
      type_name: resource.field('type_name'),
      type_version_id: resource.field('type_version_id'),
    },
    cloudformation_export(name, block): {
      local resource = blockType.resource('aws_cloudformation_export', name),
      _: resource._(block, {
        exporting_stack_id: build.template(std.get(block, 'exporting_stack_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        value: build.template(std.get(block, 'value', null)),
      }),
      exporting_stack_id: resource.field('exporting_stack_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      value: resource.field('value'),
    },
    cloudformation_stack(name, block): {
      local resource = blockType.resource('aws_cloudformation_stack', name),
      _: resource._(block, {
        capabilities: build.template(std.get(block, 'capabilities', null)),
        description: build.template(std.get(block, 'description', null)),
        disable_rollback: build.template(std.get(block, 'disable_rollback', null)),
        iam_role_arn: build.template(std.get(block, 'iam_role_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        notification_arns: build.template(std.get(block, 'notification_arns', null)),
        outputs: build.template(std.get(block, 'outputs', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        tags: build.template(std.get(block, 'tags', null)),
        template_body: build.template(std.get(block, 'template_body', null)),
        timeout_in_minutes: build.template(std.get(block, 'timeout_in_minutes', null)),
      }),
      capabilities: resource.field('capabilities'),
      description: resource.field('description'),
      disable_rollback: resource.field('disable_rollback'),
      iam_role_arn: resource.field('iam_role_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      notification_arns: resource.field('notification_arns'),
      outputs: resource.field('outputs'),
      parameters: resource.field('parameters'),
      tags: resource.field('tags'),
      template_body: resource.field('template_body'),
      timeout_in_minutes: resource.field('timeout_in_minutes'),
    },
    cloudformation_type(name, block): {
      local resource = blockType.resource('aws_cloudformation_type', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_version_id: build.template(std.get(block, 'default_version_id', null)),
        deprecated_status: build.template(std.get(block, 'deprecated_status', null)),
        description: build.template(std.get(block, 'description', null)),
        documentation_url: build.template(std.get(block, 'documentation_url', null)),
        execution_role_arn: build.template(std.get(block, 'execution_role_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        is_default_version: build.template(std.get(block, 'is_default_version', null)),
        logging_config: build.template(std.get(block, 'logging_config', null)),
        provisioning_type: build.template(std.get(block, 'provisioning_type', null)),
        schema: build.template(std.get(block, 'schema', null)),
        source_url: build.template(std.get(block, 'source_url', null)),
        type: build.template(std.get(block, 'type', null)),
        type_arn: build.template(std.get(block, 'type_arn', null)),
        type_name: build.template(std.get(block, 'type_name', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
        visibility: build.template(std.get(block, 'visibility', null)),
      }),
      arn: resource.field('arn'),
      default_version_id: resource.field('default_version_id'),
      deprecated_status: resource.field('deprecated_status'),
      description: resource.field('description'),
      documentation_url: resource.field('documentation_url'),
      execution_role_arn: resource.field('execution_role_arn'),
      id: resource.field('id'),
      is_default_version: resource.field('is_default_version'),
      logging_config: resource.field('logging_config'),
      provisioning_type: resource.field('provisioning_type'),
      schema: resource.field('schema'),
      source_url: resource.field('source_url'),
      type: resource.field('type'),
      type_arn: resource.field('type_arn'),
      type_name: resource.field('type_name'),
      version_id: resource.field('version_id'),
      visibility: resource.field('visibility'),
    },
    cloudfront_cache_policy(name, block): {
      local resource = blockType.resource('aws_cloudfront_cache_policy', name),
      _: resource._(block, {
        comment: build.template(std.get(block, 'comment', null)),
        default_ttl: build.template(std.get(block, 'default_ttl', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        max_ttl: build.template(std.get(block, 'max_ttl', null)),
        min_ttl: build.template(std.get(block, 'min_ttl', null)),
        name: build.template(std.get(block, 'name', null)),
        parameters_in_cache_key_and_forwarded_to_origin: build.template(std.get(block, 'parameters_in_cache_key_and_forwarded_to_origin', null)),
      }),
      comment: resource.field('comment'),
      default_ttl: resource.field('default_ttl'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      max_ttl: resource.field('max_ttl'),
      min_ttl: resource.field('min_ttl'),
      name: resource.field('name'),
      parameters_in_cache_key_and_forwarded_to_origin: resource.field('parameters_in_cache_key_and_forwarded_to_origin'),
    },
    cloudfront_distribution(name, block): {
      local resource = blockType.resource('aws_cloudfront_distribution', name),
      _: resource._(block, {
        aliases: build.template(std.get(block, 'aliases', null)),
        arn: build.template(std.get(block, 'arn', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        etag: build.template(std.get(block, 'etag', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        id: build.template(block.id),
        in_progress_validation_batches: build.template(std.get(block, 'in_progress_validation_batches', null)),
        last_modified_time: build.template(std.get(block, 'last_modified_time', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        web_acl_id: build.template(std.get(block, 'web_acl_id', null)),
      }),
      aliases: resource.field('aliases'),
      arn: resource.field('arn'),
      domain_name: resource.field('domain_name'),
      enabled: resource.field('enabled'),
      etag: resource.field('etag'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      id: resource.field('id'),
      in_progress_validation_batches: resource.field('in_progress_validation_batches'),
      last_modified_time: resource.field('last_modified_time'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      web_acl_id: resource.field('web_acl_id'),
    },
    cloudfront_function(name, block): {
      local resource = blockType.resource('aws_cloudfront_function', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        code: build.template(std.get(block, 'code', null)),
        comment: build.template(std.get(block, 'comment', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key_value_store_associations: build.template(std.get(block, 'key_value_store_associations', null)),
        last_modified_time: build.template(std.get(block, 'last_modified_time', null)),
        name: build.template(block.name),
        runtime: build.template(std.get(block, 'runtime', null)),
        stage: build.template(block.stage),
        status: build.template(std.get(block, 'status', null)),
      }),
      arn: resource.field('arn'),
      code: resource.field('code'),
      comment: resource.field('comment'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      key_value_store_associations: resource.field('key_value_store_associations'),
      last_modified_time: resource.field('last_modified_time'),
      name: resource.field('name'),
      runtime: resource.field('runtime'),
      stage: resource.field('stage'),
      status: resource.field('status'),
    },
    cloudfront_log_delivery_canonical_user_id(name, block): {
      local resource = blockType.resource('aws_cloudfront_log_delivery_canonical_user_id', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      id: resource.field('id'),
      region: resource.field('region'),
    },
    cloudfront_origin_access_control(name, block): {
      local resource = blockType.resource('aws_cloudfront_origin_access_control', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(block.id),
        name: build.template(std.get(block, 'name', null)),
        origin_access_control_origin_type: build.template(std.get(block, 'origin_access_control_origin_type', null)),
        signing_behavior: build.template(std.get(block, 'signing_behavior', null)),
        signing_protocol: build.template(std.get(block, 'signing_protocol', null)),
      }),
      description: resource.field('description'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      origin_access_control_origin_type: resource.field('origin_access_control_origin_type'),
      signing_behavior: resource.field('signing_behavior'),
      signing_protocol: resource.field('signing_protocol'),
    },
    cloudfront_origin_access_identities(name, block): {
      local resource = blockType.resource('aws_cloudfront_origin_access_identities', name),
      _: resource._(block, {
        comments: build.template(std.get(block, 'comments', null)),
        iam_arns: build.template(std.get(block, 'iam_arns', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        s3_canonical_user_ids: build.template(std.get(block, 's3_canonical_user_ids', null)),
      }),
      comments: resource.field('comments'),
      iam_arns: resource.field('iam_arns'),
      id: resource.field('id'),
      ids: resource.field('ids'),
      s3_canonical_user_ids: resource.field('s3_canonical_user_ids'),
    },
    cloudfront_origin_access_identity(name, block): {
      local resource = blockType.resource('aws_cloudfront_origin_access_identity', name),
      _: resource._(block, {
        caller_reference: build.template(std.get(block, 'caller_reference', null)),
        cloudfront_access_identity_path: build.template(std.get(block, 'cloudfront_access_identity_path', null)),
        comment: build.template(std.get(block, 'comment', null)),
        etag: build.template(std.get(block, 'etag', null)),
        iam_arn: build.template(std.get(block, 'iam_arn', null)),
        id: build.template(block.id),
        s3_canonical_user_id: build.template(std.get(block, 's3_canonical_user_id', null)),
      }),
      caller_reference: resource.field('caller_reference'),
      cloudfront_access_identity_path: resource.field('cloudfront_access_identity_path'),
      comment: resource.field('comment'),
      etag: resource.field('etag'),
      iam_arn: resource.field('iam_arn'),
      id: resource.field('id'),
      s3_canonical_user_id: resource.field('s3_canonical_user_id'),
    },
    cloudfront_origin_request_policy(name, block): {
      local resource = blockType.resource('aws_cloudfront_origin_request_policy', name),
      _: resource._(block, {
        comment: build.template(std.get(block, 'comment', null)),
        cookies_config: build.template(std.get(block, 'cookies_config', null)),
        etag: build.template(std.get(block, 'etag', null)),
        headers_config: build.template(std.get(block, 'headers_config', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        query_strings_config: build.template(std.get(block, 'query_strings_config', null)),
      }),
      comment: resource.field('comment'),
      cookies_config: resource.field('cookies_config'),
      etag: resource.field('etag'),
      headers_config: resource.field('headers_config'),
      id: resource.field('id'),
      name: resource.field('name'),
      query_strings_config: resource.field('query_strings_config'),
    },
    cloudfront_realtime_log_config(name, block): {
      local resource = blockType.resource('aws_cloudfront_realtime_log_config', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        fields: build.template(std.get(block, 'fields', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        sampling_rate: build.template(std.get(block, 'sampling_rate', null)),
      }),
      arn: resource.field('arn'),
      endpoint: resource.field('endpoint'),
      fields: resource.field('fields'),
      id: resource.field('id'),
      name: resource.field('name'),
      sampling_rate: resource.field('sampling_rate'),
    },
    cloudfront_response_headers_policy(name, block): {
      local resource = blockType.resource('aws_cloudfront_response_headers_policy', name),
      _: resource._(block, {
        comment: build.template(std.get(block, 'comment', null)),
        cors_config: build.template(std.get(block, 'cors_config', null)),
        custom_headers_config: build.template(std.get(block, 'custom_headers_config', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        remove_headers_config: build.template(std.get(block, 'remove_headers_config', null)),
        security_headers_config: build.template(std.get(block, 'security_headers_config', null)),
        server_timing_headers_config: build.template(std.get(block, 'server_timing_headers_config', null)),
      }),
      comment: resource.field('comment'),
      cors_config: resource.field('cors_config'),
      custom_headers_config: resource.field('custom_headers_config'),
      etag: resource.field('etag'),
      id: resource.field('id'),
      name: resource.field('name'),
      remove_headers_config: resource.field('remove_headers_config'),
      security_headers_config: resource.field('security_headers_config'),
      server_timing_headers_config: resource.field('server_timing_headers_config'),
    },
    cloudhsm_v2_cluster(name, block): {
      local resource = blockType.resource('aws_cloudhsm_v2_cluster', name),
      _: resource._(block, {
        cluster_certificates: build.template(std.get(block, 'cluster_certificates', null)),
        cluster_id: build.template(block.cluster_id),
        cluster_state: build.template(std.get(block, 'cluster_state', null)),
        id: build.template(std.get(block, 'id', null)),
        security_group_id: build.template(std.get(block, 'security_group_id', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      cluster_certificates: resource.field('cluster_certificates'),
      cluster_id: resource.field('cluster_id'),
      cluster_state: resource.field('cluster_state'),
      id: resource.field('id'),
      security_group_id: resource.field('security_group_id'),
      subnet_ids: resource.field('subnet_ids'),
      vpc_id: resource.field('vpc_id'),
    },
    cloudtrail_service_account(name, block): {
      local resource = blockType.resource('aws_cloudtrail_service_account', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      region: resource.field('region'),
    },
    cloudwatch_event_bus(name, block): {
      local resource = blockType.resource('aws_cloudwatch_event_bus', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_identifier: build.template(std.get(block, 'kms_key_identifier', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      kms_key_identifier: resource.field('kms_key_identifier'),
      name: resource.field('name'),
    },
    cloudwatch_event_connection(name, block): {
      local resource = blockType.resource('aws_cloudwatch_event_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        authorization_type: build.template(std.get(block, 'authorization_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        secret_arn: build.template(std.get(block, 'secret_arn', null)),
      }),
      arn: resource.field('arn'),
      authorization_type: resource.field('authorization_type'),
      id: resource.field('id'),
      name: resource.field('name'),
      secret_arn: resource.field('secret_arn'),
    },
    cloudwatch_event_source(name, block): {
      local resource = blockType.resource('aws_cloudwatch_event_source', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        state: build.template(std.get(block, 'state', null)),
      }),
      arn: resource.field('arn'),
      created_by: resource.field('created_by'),
      id: resource.field('id'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      state: resource.field('state'),
    },
    cloudwatch_log_data_protection_policy_document(name, block): {
      local resource = blockType.resource('aws_cloudwatch_log_data_protection_policy_document', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        json: build.template(std.get(block, 'json', null)),
        name: build.template(block.name),
        version: build.template(std.get(block, 'version', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      json: resource.field('json'),
      name: resource.field('name'),
      version: resource.field('version'),
    },
    cloudwatch_log_group(name, block): {
      local resource = blockType.resource('aws_cloudwatch_log_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        log_group_class: build.template(std.get(block, 'log_group_class', null)),
        name: build.template(block.name),
        retention_in_days: build.template(std.get(block, 'retention_in_days', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      log_group_class: resource.field('log_group_class'),
      name: resource.field('name'),
      retention_in_days: resource.field('retention_in_days'),
      tags: resource.field('tags'),
    },
    cloudwatch_log_groups(name, block): {
      local resource = blockType.resource('aws_cloudwatch_log_groups', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        log_group_name_prefix: build.template(std.get(block, 'log_group_name_prefix', null)),
        log_group_names: build.template(std.get(block, 'log_group_names', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      log_group_name_prefix: resource.field('log_group_name_prefix'),
      log_group_names: resource.field('log_group_names'),
    },
    codeartifact_authorization_token(name, block): {
      local resource = blockType.resource('aws_codeartifact_authorization_token', name),
      _: resource._(block, {
        authorization_token: build.template(std.get(block, 'authorization_token', null)),
        domain: build.template(block.domain),
        domain_owner: build.template(std.get(block, 'domain_owner', null)),
        duration_seconds: build.template(std.get(block, 'duration_seconds', null)),
        expiration: build.template(std.get(block, 'expiration', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      authorization_token: resource.field('authorization_token'),
      domain: resource.field('domain'),
      domain_owner: resource.field('domain_owner'),
      duration_seconds: resource.field('duration_seconds'),
      expiration: resource.field('expiration'),
      id: resource.field('id'),
    },
    codeartifact_repository_endpoint(name, block): {
      local resource = blockType.resource('aws_codeartifact_repository_endpoint', name),
      _: resource._(block, {
        domain: build.template(block.domain),
        domain_owner: build.template(std.get(block, 'domain_owner', null)),
        format: build.template(block.format),
        id: build.template(std.get(block, 'id', null)),
        repository: build.template(block.repository),
        repository_endpoint: build.template(std.get(block, 'repository_endpoint', null)),
      }),
      domain: resource.field('domain'),
      domain_owner: resource.field('domain_owner'),
      format: resource.field('format'),
      id: resource.field('id'),
      repository: resource.field('repository'),
      repository_endpoint: resource.field('repository_endpoint'),
    },
    codebuild_fleet(name, block): {
      local resource = blockType.resource('aws_codebuild_fleet', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        base_capacity: build.template(std.get(block, 'base_capacity', null)),
        compute_type: build.template(std.get(block, 'compute_type', null)),
        created: build.template(std.get(block, 'created', null)),
        environment_type: build.template(std.get(block, 'environment_type', null)),
        fleet_service_role: build.template(std.get(block, 'fleet_service_role', null)),
        id: build.template(std.get(block, 'id', null)),
        image_id: build.template(std.get(block, 'image_id', null)),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        name: build.template(block.name),
        overflow_behavior: build.template(std.get(block, 'overflow_behavior', null)),
        scaling_configuration: build.template(std.get(block, 'scaling_configuration', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_config: build.template(std.get(block, 'vpc_config', null)),
      }),
      arn: resource.field('arn'),
      base_capacity: resource.field('base_capacity'),
      compute_type: resource.field('compute_type'),
      created: resource.field('created'),
      environment_type: resource.field('environment_type'),
      fleet_service_role: resource.field('fleet_service_role'),
      id: resource.field('id'),
      image_id: resource.field('image_id'),
      last_modified: resource.field('last_modified'),
      name: resource.field('name'),
      overflow_behavior: resource.field('overflow_behavior'),
      scaling_configuration: resource.field('scaling_configuration'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      vpc_config: resource.field('vpc_config'),
    },
    codecatalyst_dev_environment(name, block): {
      local resource = blockType.resource('aws_codecatalyst_dev_environment', name),
      _: resource._(block, {
        alias: build.template(std.get(block, 'alias', null)),
        creator_id: build.template(std.get(block, 'creator_id', null)),
        env_id: build.template(block.env_id),
        id: build.template(std.get(block, 'id', null)),
        ides: build.template(std.get(block, 'ides', null)),
        inactivity_timeout_minutes: build.template(std.get(block, 'inactivity_timeout_minutes', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        persistent_storage: build.template(std.get(block, 'persistent_storage', null)),
        project_name: build.template(block.project_name),
        space_name: build.template(block.space_name),
        status: build.template(std.get(block, 'status', null)),
        status_reason: build.template(std.get(block, 'status_reason', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      alias: resource.field('alias'),
      creator_id: resource.field('creator_id'),
      env_id: resource.field('env_id'),
      id: resource.field('id'),
      ides: resource.field('ides'),
      inactivity_timeout_minutes: resource.field('inactivity_timeout_minutes'),
      instance_type: resource.field('instance_type'),
      last_updated_time: resource.field('last_updated_time'),
      persistent_storage: resource.field('persistent_storage'),
      project_name: resource.field('project_name'),
      space_name: resource.field('space_name'),
      status: resource.field('status'),
      status_reason: resource.field('status_reason'),
      tags: resource.field('tags'),
    },
    codecommit_approval_rule_template(name, block): {
      local resource = blockType.resource('aws_codecommit_approval_rule_template', name),
      _: resource._(block, {
        approval_rule_template_id: build.template(std.get(block, 'approval_rule_template_id', null)),
        content: build.template(std.get(block, 'content', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified_date: build.template(std.get(block, 'last_modified_date', null)),
        last_modified_user: build.template(std.get(block, 'last_modified_user', null)),
        name: build.template(block.name),
        rule_content_sha256: build.template(std.get(block, 'rule_content_sha256', null)),
      }),
      approval_rule_template_id: resource.field('approval_rule_template_id'),
      content: resource.field('content'),
      creation_date: resource.field('creation_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_modified_date: resource.field('last_modified_date'),
      last_modified_user: resource.field('last_modified_user'),
      name: resource.field('name'),
      rule_content_sha256: resource.field('rule_content_sha256'),
    },
    codecommit_repository(name, block): {
      local resource = blockType.resource('aws_codecommit_repository', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        clone_url_http: build.template(std.get(block, 'clone_url_http', null)),
        clone_url_ssh: build.template(std.get(block, 'clone_url_ssh', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        repository_id: build.template(std.get(block, 'repository_id', null)),
        repository_name: build.template(block.repository_name),
      }),
      arn: resource.field('arn'),
      clone_url_http: resource.field('clone_url_http'),
      clone_url_ssh: resource.field('clone_url_ssh'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      repository_id: resource.field('repository_id'),
      repository_name: resource.field('repository_name'),
    },
    codeguruprofiler_profiling_group(name, block): {
      local resource = blockType.resource('aws_codeguruprofiler_profiling_group', name),
      _: resource._(block, {
        agent_orchestration_config: build.template(std.get(block, 'agent_orchestration_config', null)),
        arn: build.template(std.get(block, 'arn', null)),
        compute_platform: build.template(std.get(block, 'compute_platform', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        profiling_status: build.template(std.get(block, 'profiling_status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      agent_orchestration_config: resource.field('agent_orchestration_config'),
      arn: resource.field('arn'),
      compute_platform: resource.field('compute_platform'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      name: resource.field('name'),
      profiling_status: resource.field('profiling_status'),
      tags: resource.field('tags'),
      updated_at: resource.field('updated_at'),
    },
    codestarconnections_connection(name, block): {
      local resource = blockType.resource('aws_codestarconnections_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        connection_status: build.template(std.get(block, 'connection_status', null)),
        host_arn: build.template(std.get(block, 'host_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        provider_type: build.template(std.get(block, 'provider_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      connection_status: resource.field('connection_status'),
      host_arn: resource.field('host_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      provider_type: resource.field('provider_type'),
      tags: resource.field('tags'),
    },
    cognito_identity_pool(name, block): {
      local resource = blockType.resource('aws_cognito_identity_pool', name),
      _: resource._(block, {
        allow_classic_flow: build.template(std.get(block, 'allow_classic_flow', null)),
        allow_unauthenticated_identities: build.template(std.get(block, 'allow_unauthenticated_identities', null)),
        arn: build.template(std.get(block, 'arn', null)),
        cognito_identity_providers: build.template(std.get(block, 'cognito_identity_providers', null)),
        developer_provider_name: build.template(std.get(block, 'developer_provider_name', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_pool_name: build.template(block.identity_pool_name),
        openid_connect_provider_arns: build.template(std.get(block, 'openid_connect_provider_arns', null)),
        saml_provider_arns: build.template(std.get(block, 'saml_provider_arns', null)),
        supported_login_providers: build.template(std.get(block, 'supported_login_providers', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      allow_classic_flow: resource.field('allow_classic_flow'),
      allow_unauthenticated_identities: resource.field('allow_unauthenticated_identities'),
      arn: resource.field('arn'),
      cognito_identity_providers: resource.field('cognito_identity_providers'),
      developer_provider_name: resource.field('developer_provider_name'),
      id: resource.field('id'),
      identity_pool_name: resource.field('identity_pool_name'),
      openid_connect_provider_arns: resource.field('openid_connect_provider_arns'),
      saml_provider_arns: resource.field('saml_provider_arns'),
      supported_login_providers: resource.field('supported_login_providers'),
      tags: resource.field('tags'),
    },
    cognito_user_group(name, block): {
      local resource = blockType.resource('aws_cognito_user_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        precedence: build.template(std.get(block, 'precedence', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        user_pool_id: build.template(block.user_pool_id),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      precedence: resource.field('precedence'),
      role_arn: resource.field('role_arn'),
      user_pool_id: resource.field('user_pool_id'),
    },
    cognito_user_groups(name, block): {
      local resource = blockType.resource('aws_cognito_user_groups', name),
      _: resource._(block, {
        groups: build.template(std.get(block, 'groups', null)),
        id: build.template(std.get(block, 'id', null)),
        user_pool_id: build.template(block.user_pool_id),
      }),
      groups: resource.field('groups'),
      id: resource.field('id'),
      user_pool_id: resource.field('user_pool_id'),
    },
    cognito_user_pool(name, block): {
      local resource = blockType.resource('aws_cognito_user_pool', name),
      _: resource._(block, {
        account_recovery_setting: build.template(std.get(block, 'account_recovery_setting', null)),
        admin_create_user_config: build.template(std.get(block, 'admin_create_user_config', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_verified_attributes: build.template(std.get(block, 'auto_verified_attributes', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        custom_domain: build.template(std.get(block, 'custom_domain', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        device_configuration: build.template(std.get(block, 'device_configuration', null)),
        domain: build.template(std.get(block, 'domain', null)),
        email_configuration: build.template(std.get(block, 'email_configuration', null)),
        estimated_number_of_users: build.template(std.get(block, 'estimated_number_of_users', null)),
        id: build.template(std.get(block, 'id', null)),
        lambda_config: build.template(std.get(block, 'lambda_config', null)),
        last_modified_date: build.template(std.get(block, 'last_modified_date', null)),
        mfa_configuration: build.template(std.get(block, 'mfa_configuration', null)),
        name: build.template(std.get(block, 'name', null)),
        schema_attributes: build.template(std.get(block, 'schema_attributes', null)),
        sms_authentication_message: build.template(std.get(block, 'sms_authentication_message', null)),
        sms_configuration_failure: build.template(std.get(block, 'sms_configuration_failure', null)),
        sms_verification_message: build.template(std.get(block, 'sms_verification_message', null)),
        tags: build.template(std.get(block, 'tags', null)),
        user_pool_id: build.template(block.user_pool_id),
        user_pool_tags: build.template(std.get(block, 'user_pool_tags', null)),
        username_attributes: build.template(std.get(block, 'username_attributes', null)),
      }),
      account_recovery_setting: resource.field('account_recovery_setting'),
      admin_create_user_config: resource.field('admin_create_user_config'),
      arn: resource.field('arn'),
      auto_verified_attributes: resource.field('auto_verified_attributes'),
      creation_date: resource.field('creation_date'),
      custom_domain: resource.field('custom_domain'),
      deletion_protection: resource.field('deletion_protection'),
      device_configuration: resource.field('device_configuration'),
      domain: resource.field('domain'),
      email_configuration: resource.field('email_configuration'),
      estimated_number_of_users: resource.field('estimated_number_of_users'),
      id: resource.field('id'),
      lambda_config: resource.field('lambda_config'),
      last_modified_date: resource.field('last_modified_date'),
      mfa_configuration: resource.field('mfa_configuration'),
      name: resource.field('name'),
      schema_attributes: resource.field('schema_attributes'),
      sms_authentication_message: resource.field('sms_authentication_message'),
      sms_configuration_failure: resource.field('sms_configuration_failure'),
      sms_verification_message: resource.field('sms_verification_message'),
      tags: resource.field('tags'),
      user_pool_id: resource.field('user_pool_id'),
      user_pool_tags: resource.field('user_pool_tags'),
      username_attributes: resource.field('username_attributes'),
    },
    cognito_user_pool_client(name, block): {
      local resource = blockType.resource('aws_cognito_user_pool_client', name),
      _: resource._(block, {
        access_token_validity: build.template(std.get(block, 'access_token_validity', null)),
        allowed_oauth_flows: build.template(std.get(block, 'allowed_oauth_flows', null)),
        allowed_oauth_flows_user_pool_client: build.template(std.get(block, 'allowed_oauth_flows_user_pool_client', null)),
        allowed_oauth_scopes: build.template(std.get(block, 'allowed_oauth_scopes', null)),
        analytics_configuration: build.template(std.get(block, 'analytics_configuration', null)),
        callback_urls: build.template(std.get(block, 'callback_urls', null)),
        client_id: build.template(block.client_id),
        client_secret: build.template(std.get(block, 'client_secret', null)),
        default_redirect_uri: build.template(std.get(block, 'default_redirect_uri', null)),
        enable_propagate_additional_user_context_data: build.template(std.get(block, 'enable_propagate_additional_user_context_data', null)),
        enable_token_revocation: build.template(std.get(block, 'enable_token_revocation', null)),
        explicit_auth_flows: build.template(std.get(block, 'explicit_auth_flows', null)),
        generate_secret: build.template(std.get(block, 'generate_secret', null)),
        id: build.template(std.get(block, 'id', null)),
        id_token_validity: build.template(std.get(block, 'id_token_validity', null)),
        logout_urls: build.template(std.get(block, 'logout_urls', null)),
        name: build.template(std.get(block, 'name', null)),
        prevent_user_existence_errors: build.template(std.get(block, 'prevent_user_existence_errors', null)),
        read_attributes: build.template(std.get(block, 'read_attributes', null)),
        refresh_token_validity: build.template(std.get(block, 'refresh_token_validity', null)),
        supported_identity_providers: build.template(std.get(block, 'supported_identity_providers', null)),
        token_validity_units: build.template(std.get(block, 'token_validity_units', null)),
        user_pool_id: build.template(block.user_pool_id),
        write_attributes: build.template(std.get(block, 'write_attributes', null)),
      }),
      access_token_validity: resource.field('access_token_validity'),
      allowed_oauth_flows: resource.field('allowed_oauth_flows'),
      allowed_oauth_flows_user_pool_client: resource.field('allowed_oauth_flows_user_pool_client'),
      allowed_oauth_scopes: resource.field('allowed_oauth_scopes'),
      analytics_configuration: resource.field('analytics_configuration'),
      callback_urls: resource.field('callback_urls'),
      client_id: resource.field('client_id'),
      client_secret: resource.field('client_secret'),
      default_redirect_uri: resource.field('default_redirect_uri'),
      enable_propagate_additional_user_context_data: resource.field('enable_propagate_additional_user_context_data'),
      enable_token_revocation: resource.field('enable_token_revocation'),
      explicit_auth_flows: resource.field('explicit_auth_flows'),
      generate_secret: resource.field('generate_secret'),
      id: resource.field('id'),
      id_token_validity: resource.field('id_token_validity'),
      logout_urls: resource.field('logout_urls'),
      name: resource.field('name'),
      prevent_user_existence_errors: resource.field('prevent_user_existence_errors'),
      read_attributes: resource.field('read_attributes'),
      refresh_token_validity: resource.field('refresh_token_validity'),
      supported_identity_providers: resource.field('supported_identity_providers'),
      token_validity_units: resource.field('token_validity_units'),
      user_pool_id: resource.field('user_pool_id'),
      write_attributes: resource.field('write_attributes'),
    },
    cognito_user_pool_clients(name, block): {
      local resource = blockType.resource('aws_cognito_user_pool_clients', name),
      _: resource._(block, {
        client_ids: build.template(std.get(block, 'client_ids', null)),
        client_names: build.template(std.get(block, 'client_names', null)),
        id: build.template(std.get(block, 'id', null)),
        user_pool_id: build.template(block.user_pool_id),
      }),
      client_ids: resource.field('client_ids'),
      client_names: resource.field('client_names'),
      id: resource.field('id'),
      user_pool_id: resource.field('user_pool_id'),
    },
    cognito_user_pool_signing_certificate(name, block): {
      local resource = blockType.resource('aws_cognito_user_pool_signing_certificate', name),
      _: resource._(block, {
        certificate: build.template(std.get(block, 'certificate', null)),
        id: build.template(std.get(block, 'id', null)),
        user_pool_id: build.template(block.user_pool_id),
      }),
      certificate: resource.field('certificate'),
      id: resource.field('id'),
      user_pool_id: resource.field('user_pool_id'),
    },
    cognito_user_pools(name, block): {
      local resource = blockType.resource('aws_cognito_user_pools', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        name: build.template(block.name),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      ids: resource.field('ids'),
      name: resource.field('name'),
    },
    connect_bot_association(name, block): {
      local resource = blockType.resource('aws_connect_bot_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
      }),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
    },
    connect_contact_flow(name, block): {
      local resource = blockType.resource('aws_connect_contact_flow', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        contact_flow_id: build.template(std.get(block, 'contact_flow_id', null)),
        content: build.template(std.get(block, 'content', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      contact_flow_id: resource.field('contact_flow_id'),
      content: resource.field('content'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      type: resource.field('type'),
    },
    connect_contact_flow_module(name, block): {
      local resource = blockType.resource('aws_connect_contact_flow_module', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        contact_flow_module_id: build.template(std.get(block, 'contact_flow_module_id', null)),
        content: build.template(std.get(block, 'content', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(std.get(block, 'name', null)),
        state: build.template(std.get(block, 'state', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      contact_flow_module_id: resource.field('contact_flow_module_id'),
      content: resource.field('content'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      state: resource.field('state'),
      status: resource.field('status'),
      tags: resource.field('tags'),
    },
    connect_hours_of_operation(name, block): {
      local resource = blockType.resource('aws_connect_hours_of_operation', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        config: build.template(std.get(block, 'config', null)),
        description: build.template(std.get(block, 'description', null)),
        hours_of_operation_id: build.template(std.get(block, 'hours_of_operation_id', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
      }),
      arn: resource.field('arn'),
      config: resource.field('config'),
      description: resource.field('description'),
      hours_of_operation_id: resource.field('hours_of_operation_id'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      time_zone: resource.field('time_zone'),
    },
    connect_instance(name, block): {
      local resource = blockType.resource('aws_connect_instance', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auto_resolve_best_voices_enabled: build.template(std.get(block, 'auto_resolve_best_voices_enabled', null)),
        contact_flow_logs_enabled: build.template(std.get(block, 'contact_flow_logs_enabled', null)),
        contact_lens_enabled: build.template(std.get(block, 'contact_lens_enabled', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        early_media_enabled: build.template(std.get(block, 'early_media_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_management_type: build.template(std.get(block, 'identity_management_type', null)),
        inbound_calls_enabled: build.template(std.get(block, 'inbound_calls_enabled', null)),
        instance_alias: build.template(std.get(block, 'instance_alias', null)),
        instance_id: build.template(std.get(block, 'instance_id', null)),
        multi_party_conference_enabled: build.template(std.get(block, 'multi_party_conference_enabled', null)),
        outbound_calls_enabled: build.template(std.get(block, 'outbound_calls_enabled', null)),
        service_role: build.template(std.get(block, 'service_role', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      auto_resolve_best_voices_enabled: resource.field('auto_resolve_best_voices_enabled'),
      contact_flow_logs_enabled: resource.field('contact_flow_logs_enabled'),
      contact_lens_enabled: resource.field('contact_lens_enabled'),
      created_time: resource.field('created_time'),
      early_media_enabled: resource.field('early_media_enabled'),
      id: resource.field('id'),
      identity_management_type: resource.field('identity_management_type'),
      inbound_calls_enabled: resource.field('inbound_calls_enabled'),
      instance_alias: resource.field('instance_alias'),
      instance_id: resource.field('instance_id'),
      multi_party_conference_enabled: resource.field('multi_party_conference_enabled'),
      outbound_calls_enabled: resource.field('outbound_calls_enabled'),
      service_role: resource.field('service_role'),
      status: resource.field('status'),
      tags: resource.field('tags'),
    },
    connect_instance_storage_config(name, block): {
      local resource = blockType.resource('aws_connect_instance_storage_config', name),
      _: resource._(block, {
        association_id: build.template(block.association_id),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        resource_type: build.template(block.resource_type),
        storage_config: build.template(std.get(block, 'storage_config', null)),
      }),
      association_id: resource.field('association_id'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      resource_type: resource.field('resource_type'),
      storage_config: resource.field('storage_config'),
    },
    connect_lambda_function_association(name, block): {
      local resource = blockType.resource('aws_connect_lambda_function_association', name),
      _: resource._(block, {
        function_arn: build.template(block.function_arn),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
      }),
      function_arn: resource.field('function_arn'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
    },
    connect_prompt(name, block): {
      local resource = blockType.resource('aws_connect_prompt', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(block.name),
        prompt_id: build.template(std.get(block, 'prompt_id', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      prompt_id: resource.field('prompt_id'),
    },
    connect_queue(name, block): {
      local resource = blockType.resource('aws_connect_queue', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        hours_of_operation_id: build.template(std.get(block, 'hours_of_operation_id', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        max_contacts: build.template(std.get(block, 'max_contacts', null)),
        name: build.template(std.get(block, 'name', null)),
        outbound_caller_config: build.template(std.get(block, 'outbound_caller_config', null)),
        queue_id: build.template(std.get(block, 'queue_id', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      hours_of_operation_id: resource.field('hours_of_operation_id'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      max_contacts: resource.field('max_contacts'),
      name: resource.field('name'),
      outbound_caller_config: resource.field('outbound_caller_config'),
      queue_id: resource.field('queue_id'),
      status: resource.field('status'),
      tags: resource.field('tags'),
    },
    connect_quick_connect(name, block): {
      local resource = blockType.resource('aws_connect_quick_connect', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(std.get(block, 'name', null)),
        quick_connect_config: build.template(std.get(block, 'quick_connect_config', null)),
        quick_connect_id: build.template(std.get(block, 'quick_connect_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      quick_connect_config: resource.field('quick_connect_config'),
      quick_connect_id: resource.field('quick_connect_id'),
      tags: resource.field('tags'),
    },
    connect_routing_profile(name, block): {
      local resource = blockType.resource('aws_connect_routing_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_outbound_queue_id: build.template(std.get(block, 'default_outbound_queue_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        media_concurrencies: build.template(std.get(block, 'media_concurrencies', null)),
        name: build.template(std.get(block, 'name', null)),
        queue_configs: build.template(std.get(block, 'queue_configs', null)),
        routing_profile_id: build.template(std.get(block, 'routing_profile_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      default_outbound_queue_id: resource.field('default_outbound_queue_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      media_concurrencies: resource.field('media_concurrencies'),
      name: resource.field('name'),
      queue_configs: resource.field('queue_configs'),
      routing_profile_id: resource.field('routing_profile_id'),
      tags: resource.field('tags'),
    },
    connect_security_profile(name, block): {
      local resource = blockType.resource('aws_connect_security_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(std.get(block, 'name', null)),
        organization_resource_id: build.template(std.get(block, 'organization_resource_id', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
        security_profile_id: build.template(std.get(block, 'security_profile_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      organization_resource_id: resource.field('organization_resource_id'),
      permissions: resource.field('permissions'),
      security_profile_id: resource.field('security_profile_id'),
      tags: resource.field('tags'),
    },
    connect_user(name, block): {
      local resource = blockType.resource('aws_connect_user', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        directory_user_id: build.template(std.get(block, 'directory_user_id', null)),
        hierarchy_group_id: build.template(std.get(block, 'hierarchy_group_id', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_info: build.template(std.get(block, 'identity_info', null)),
        instance_id: build.template(block.instance_id),
        name: build.template(std.get(block, 'name', null)),
        phone_config: build.template(std.get(block, 'phone_config', null)),
        routing_profile_id: build.template(std.get(block, 'routing_profile_id', null)),
        security_profile_ids: build.template(std.get(block, 'security_profile_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        user_id: build.template(std.get(block, 'user_id', null)),
      }),
      arn: resource.field('arn'),
      directory_user_id: resource.field('directory_user_id'),
      hierarchy_group_id: resource.field('hierarchy_group_id'),
      id: resource.field('id'),
      identity_info: resource.field('identity_info'),
      instance_id: resource.field('instance_id'),
      name: resource.field('name'),
      phone_config: resource.field('phone_config'),
      routing_profile_id: resource.field('routing_profile_id'),
      security_profile_ids: resource.field('security_profile_ids'),
      tags: resource.field('tags'),
      user_id: resource.field('user_id'),
    },
    connect_user_hierarchy_group(name, block): {
      local resource = blockType.resource('aws_connect_user_hierarchy_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        hierarchy_group_id: build.template(std.get(block, 'hierarchy_group_id', null)),
        hierarchy_path: build.template(std.get(block, 'hierarchy_path', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        level_id: build.template(std.get(block, 'level_id', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      hierarchy_group_id: resource.field('hierarchy_group_id'),
      hierarchy_path: resource.field('hierarchy_path'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      level_id: resource.field('level_id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
    },
    connect_user_hierarchy_structure(name, block): {
      local resource = blockType.resource('aws_connect_user_hierarchy_structure', name),
      _: resource._(block, {
        hierarchy_structure: build.template(std.get(block, 'hierarchy_structure', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
      }),
      hierarchy_structure: resource.field('hierarchy_structure'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
    },
    connect_vocabulary(name, block): {
      local resource = blockType.resource('aws_connect_vocabulary', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        content: build.template(std.get(block, 'content', null)),
        failure_reason: build.template(std.get(block, 'failure_reason', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(block.instance_id),
        language_code: build.template(std.get(block, 'language_code', null)),
        last_modified_time: build.template(std.get(block, 'last_modified_time', null)),
        name: build.template(std.get(block, 'name', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vocabulary_id: build.template(std.get(block, 'vocabulary_id', null)),
      }),
      arn: resource.field('arn'),
      content: resource.field('content'),
      failure_reason: resource.field('failure_reason'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      language_code: resource.field('language_code'),
      last_modified_time: resource.field('last_modified_time'),
      name: resource.field('name'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      vocabulary_id: resource.field('vocabulary_id'),
    },
    controltower_controls(name, block): {
      local resource = blockType.resource('aws_controltower_controls', name),
      _: resource._(block, {
        enabled_controls: build.template(std.get(block, 'enabled_controls', null)),
        id: build.template(std.get(block, 'id', null)),
        target_identifier: build.template(block.target_identifier),
      }),
      enabled_controls: resource.field('enabled_controls'),
      id: resource.field('id'),
      target_identifier: resource.field('target_identifier'),
    },
    cur_report_definition(name, block): {
      local resource = blockType.resource('aws_cur_report_definition', name),
      _: resource._(block, {
        additional_artifacts: build.template(std.get(block, 'additional_artifacts', null)),
        additional_schema_elements: build.template(std.get(block, 'additional_schema_elements', null)),
        compression: build.template(std.get(block, 'compression', null)),
        format: build.template(std.get(block, 'format', null)),
        id: build.template(std.get(block, 'id', null)),
        refresh_closed_reports: build.template(std.get(block, 'refresh_closed_reports', null)),
        report_name: build.template(block.report_name),
        report_versioning: build.template(std.get(block, 'report_versioning', null)),
        s3_bucket: build.template(std.get(block, 's3_bucket', null)),
        s3_prefix: build.template(std.get(block, 's3_prefix', null)),
        s3_region: build.template(std.get(block, 's3_region', null)),
        tags: build.template(std.get(block, 'tags', null)),
        time_unit: build.template(std.get(block, 'time_unit', null)),
      }),
      additional_artifacts: resource.field('additional_artifacts'),
      additional_schema_elements: resource.field('additional_schema_elements'),
      compression: resource.field('compression'),
      format: resource.field('format'),
      id: resource.field('id'),
      refresh_closed_reports: resource.field('refresh_closed_reports'),
      report_name: resource.field('report_name'),
      report_versioning: resource.field('report_versioning'),
      s3_bucket: resource.field('s3_bucket'),
      s3_prefix: resource.field('s3_prefix'),
      s3_region: resource.field('s3_region'),
      tags: resource.field('tags'),
      time_unit: resource.field('time_unit'),
    },
    customer_gateway(name, block): {
      local resource = blockType.resource('aws_customer_gateway', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bgp_asn: build.template(std.get(block, 'bgp_asn', null)),
        bgp_asn_extended: build.template(std.get(block, 'bgp_asn_extended', null)),
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        device_name: build.template(std.get(block, 'device_name', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      bgp_asn: resource.field('bgp_asn'),
      bgp_asn_extended: resource.field('bgp_asn_extended'),
      certificate_arn: resource.field('certificate_arn'),
      device_name: resource.field('device_name'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      tags: resource.field('tags'),
      type: resource.field('type'),
    },
    datapipeline_pipeline(name, block): {
      local resource = blockType.resource('aws_datapipeline_pipeline', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        pipeline_id: build.template(block.pipeline_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      pipeline_id: resource.field('pipeline_id'),
      tags: resource.field('tags'),
    },
    datapipeline_pipeline_definition(name, block): {
      local resource = blockType.resource('aws_datapipeline_pipeline_definition', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        parameter_object: build.template(std.get(block, 'parameter_object', null)),
        pipeline_id: build.template(block.pipeline_id),
        pipeline_object: build.template(std.get(block, 'pipeline_object', null)),
      }),
      id: resource.field('id'),
      parameter_object: resource.field('parameter_object'),
      pipeline_id: resource.field('pipeline_id'),
      pipeline_object: resource.field('pipeline_object'),
    },
    datazone_environment_blueprint(name, block): {
      local resource = blockType.resource('aws_datazone_environment_blueprint', name),
      _: resource._(block, {
        blueprint_provider: build.template(std.get(block, 'blueprint_provider', null)),
        description: build.template(std.get(block, 'description', null)),
        domain_id: build.template(block.domain_id),
        id: build.template(std.get(block, 'id', null)),
        managed: build.template(block.managed),
        name: build.template(block.name),
      }),
      blueprint_provider: resource.field('blueprint_provider'),
      description: resource.field('description'),
      domain_id: resource.field('domain_id'),
      id: resource.field('id'),
      managed: resource.field('managed'),
      name: resource.field('name'),
    },
    db_cluster_snapshot(name, block): {
      local resource = blockType.resource('aws_db_cluster_snapshot', name),
      _: resource._(block, {
        allocated_storage: build.template(std.get(block, 'allocated_storage', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        db_cluster_identifier: build.template(std.get(block, 'db_cluster_identifier', null)),
        db_cluster_snapshot_arn: build.template(std.get(block, 'db_cluster_snapshot_arn', null)),
        db_cluster_snapshot_identifier: build.template(std.get(block, 'db_cluster_snapshot_identifier', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        include_public: build.template(std.get(block, 'include_public', null)),
        include_shared: build.template(std.get(block, 'include_shared', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        license_model: build.template(std.get(block, 'license_model', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        port: build.template(std.get(block, 'port', null)),
        snapshot_create_time: build.template(std.get(block, 'snapshot_create_time', null)),
        snapshot_type: build.template(std.get(block, 'snapshot_type', null)),
        source_db_cluster_snapshot_arn: build.template(std.get(block, 'source_db_cluster_snapshot_arn', null)),
        status: build.template(std.get(block, 'status', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      allocated_storage: resource.field('allocated_storage'),
      availability_zones: resource.field('availability_zones'),
      db_cluster_identifier: resource.field('db_cluster_identifier'),
      db_cluster_snapshot_arn: resource.field('db_cluster_snapshot_arn'),
      db_cluster_snapshot_identifier: resource.field('db_cluster_snapshot_identifier'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      include_public: resource.field('include_public'),
      include_shared: resource.field('include_shared'),
      kms_key_id: resource.field('kms_key_id'),
      license_model: resource.field('license_model'),
      most_recent: resource.field('most_recent'),
      port: resource.field('port'),
      snapshot_create_time: resource.field('snapshot_create_time'),
      snapshot_type: resource.field('snapshot_type'),
      source_db_cluster_snapshot_arn: resource.field('source_db_cluster_snapshot_arn'),
      status: resource.field('status'),
      storage_encrypted: resource.field('storage_encrypted'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    db_event_categories(name, block): {
      local resource = blockType.resource('aws_db_event_categories', name),
      _: resource._(block, {
        event_categories: build.template(std.get(block, 'event_categories', null)),
        id: build.template(std.get(block, 'id', null)),
        source_type: build.template(std.get(block, 'source_type', null)),
      }),
      event_categories: resource.field('event_categories'),
      id: resource.field('id'),
      source_type: resource.field('source_type'),
    },
    db_instance(name, block): {
      local resource = blockType.resource('aws_db_instance', name),
      _: resource._(block, {
        address: build.template(std.get(block, 'address', null)),
        allocated_storage: build.template(std.get(block, 'allocated_storage', null)),
        auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        backup_retention_period: build.template(std.get(block, 'backup_retention_period', null)),
        ca_cert_identifier: build.template(std.get(block, 'ca_cert_identifier', null)),
        db_cluster_identifier: build.template(std.get(block, 'db_cluster_identifier', null)),
        db_instance_arn: build.template(std.get(block, 'db_instance_arn', null)),
        db_instance_class: build.template(std.get(block, 'db_instance_class', null)),
        db_instance_identifier: build.template(std.get(block, 'db_instance_identifier', null)),
        db_instance_port: build.template(std.get(block, 'db_instance_port', null)),
        db_name: build.template(std.get(block, 'db_name', null)),
        db_parameter_groups: build.template(std.get(block, 'db_parameter_groups', null)),
        db_subnet_group: build.template(std.get(block, 'db_subnet_group', null)),
        enabled_cloudwatch_logs_exports: build.template(std.get(block, 'enabled_cloudwatch_logs_exports', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        id: build.template(std.get(block, 'id', null)),
        iops: build.template(std.get(block, 'iops', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        license_model: build.template(std.get(block, 'license_model', null)),
        master_user_secret: build.template(std.get(block, 'master_user_secret', null)),
        master_username: build.template(std.get(block, 'master_username', null)),
        max_allocated_storage: build.template(std.get(block, 'max_allocated_storage', null)),
        monitoring_interval: build.template(std.get(block, 'monitoring_interval', null)),
        monitoring_role_arn: build.template(std.get(block, 'monitoring_role_arn', null)),
        multi_az: build.template(std.get(block, 'multi_az', null)),
        network_type: build.template(std.get(block, 'network_type', null)),
        option_group_memberships: build.template(std.get(block, 'option_group_memberships', null)),
        port: build.template(std.get(block, 'port', null)),
        preferred_backup_window: build.template(std.get(block, 'preferred_backup_window', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        replicate_source_db: build.template(std.get(block, 'replicate_source_db', null)),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
        storage_throughput: build.template(std.get(block, 'storage_throughput', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        timezone: build.template(std.get(block, 'timezone', null)),
        vpc_security_groups: build.template(std.get(block, 'vpc_security_groups', null)),
      }),
      address: resource.field('address'),
      allocated_storage: resource.field('allocated_storage'),
      auto_minor_version_upgrade: resource.field('auto_minor_version_upgrade'),
      availability_zone: resource.field('availability_zone'),
      backup_retention_period: resource.field('backup_retention_period'),
      ca_cert_identifier: resource.field('ca_cert_identifier'),
      db_cluster_identifier: resource.field('db_cluster_identifier'),
      db_instance_arn: resource.field('db_instance_arn'),
      db_instance_class: resource.field('db_instance_class'),
      db_instance_identifier: resource.field('db_instance_identifier'),
      db_instance_port: resource.field('db_instance_port'),
      db_name: resource.field('db_name'),
      db_parameter_groups: resource.field('db_parameter_groups'),
      db_subnet_group: resource.field('db_subnet_group'),
      enabled_cloudwatch_logs_exports: resource.field('enabled_cloudwatch_logs_exports'),
      endpoint: resource.field('endpoint'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      id: resource.field('id'),
      iops: resource.field('iops'),
      kms_key_id: resource.field('kms_key_id'),
      license_model: resource.field('license_model'),
      master_user_secret: resource.field('master_user_secret'),
      master_username: resource.field('master_username'),
      max_allocated_storage: resource.field('max_allocated_storage'),
      monitoring_interval: resource.field('monitoring_interval'),
      monitoring_role_arn: resource.field('monitoring_role_arn'),
      multi_az: resource.field('multi_az'),
      network_type: resource.field('network_type'),
      option_group_memberships: resource.field('option_group_memberships'),
      port: resource.field('port'),
      preferred_backup_window: resource.field('preferred_backup_window'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      publicly_accessible: resource.field('publicly_accessible'),
      replicate_source_db: resource.field('replicate_source_db'),
      resource_id: resource.field('resource_id'),
      storage_encrypted: resource.field('storage_encrypted'),
      storage_throughput: resource.field('storage_throughput'),
      storage_type: resource.field('storage_type'),
      tags: resource.field('tags'),
      timezone: resource.field('timezone'),
      vpc_security_groups: resource.field('vpc_security_groups'),
    },
    db_instances(name, block): {
      local resource = blockType.resource('aws_db_instances', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_arns: build.template(std.get(block, 'instance_arns', null)),
        instance_identifiers: build.template(std.get(block, 'instance_identifiers', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      instance_arns: resource.field('instance_arns'),
      instance_identifiers: resource.field('instance_identifiers'),
      tags: resource.field('tags'),
    },
    db_parameter_group(name, block): {
      local resource = blockType.resource('aws_db_parameter_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        family: build.template(std.get(block, 'family', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      family: resource.field('family'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    db_proxy(name, block): {
      local resource = blockType.resource('aws_db_proxy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auth: build.template(std.get(block, 'auth', null)),
        debug_logging: build.template(std.get(block, 'debug_logging', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        engine_family: build.template(std.get(block, 'engine_family', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_client_timeout: build.template(std.get(block, 'idle_client_timeout', null)),
        name: build.template(block.name),
        require_tls: build.template(std.get(block, 'require_tls', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
        vpc_subnet_ids: build.template(std.get(block, 'vpc_subnet_ids', null)),
      }),
      arn: resource.field('arn'),
      auth: resource.field('auth'),
      debug_logging: resource.field('debug_logging'),
      endpoint: resource.field('endpoint'),
      engine_family: resource.field('engine_family'),
      id: resource.field('id'),
      idle_client_timeout: resource.field('idle_client_timeout'),
      name: resource.field('name'),
      require_tls: resource.field('require_tls'),
      role_arn: resource.field('role_arn'),
      vpc_id: resource.field('vpc_id'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
      vpc_subnet_ids: resource.field('vpc_subnet_ids'),
    },
    db_snapshot(name, block): {
      local resource = blockType.resource('aws_db_snapshot', name),
      _: resource._(block, {
        allocated_storage: build.template(std.get(block, 'allocated_storage', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        db_instance_identifier: build.template(std.get(block, 'db_instance_identifier', null)),
        db_snapshot_arn: build.template(std.get(block, 'db_snapshot_arn', null)),
        db_snapshot_identifier: build.template(std.get(block, 'db_snapshot_identifier', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        include_public: build.template(std.get(block, 'include_public', null)),
        include_shared: build.template(std.get(block, 'include_shared', null)),
        iops: build.template(std.get(block, 'iops', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        license_model: build.template(std.get(block, 'license_model', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        option_group_name: build.template(std.get(block, 'option_group_name', null)),
        original_snapshot_create_time: build.template(std.get(block, 'original_snapshot_create_time', null)),
        port: build.template(std.get(block, 'port', null)),
        snapshot_create_time: build.template(std.get(block, 'snapshot_create_time', null)),
        snapshot_type: build.template(std.get(block, 'snapshot_type', null)),
        source_db_snapshot_identifier: build.template(std.get(block, 'source_db_snapshot_identifier', null)),
        source_region: build.template(std.get(block, 'source_region', null)),
        status: build.template(std.get(block, 'status', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      allocated_storage: resource.field('allocated_storage'),
      availability_zone: resource.field('availability_zone'),
      db_instance_identifier: resource.field('db_instance_identifier'),
      db_snapshot_arn: resource.field('db_snapshot_arn'),
      db_snapshot_identifier: resource.field('db_snapshot_identifier'),
      encrypted: resource.field('encrypted'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      include_public: resource.field('include_public'),
      include_shared: resource.field('include_shared'),
      iops: resource.field('iops'),
      kms_key_id: resource.field('kms_key_id'),
      license_model: resource.field('license_model'),
      most_recent: resource.field('most_recent'),
      option_group_name: resource.field('option_group_name'),
      original_snapshot_create_time: resource.field('original_snapshot_create_time'),
      port: resource.field('port'),
      snapshot_create_time: resource.field('snapshot_create_time'),
      snapshot_type: resource.field('snapshot_type'),
      source_db_snapshot_identifier: resource.field('source_db_snapshot_identifier'),
      source_region: resource.field('source_region'),
      status: resource.field('status'),
      storage_type: resource.field('storage_type'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    db_subnet_group(name, block): {
      local resource = blockType.resource('aws_db_subnet_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        supported_network_types: build.template(std.get(block, 'supported_network_types', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
      subnet_ids: resource.field('subnet_ids'),
      supported_network_types: resource.field('supported_network_types'),
      vpc_id: resource.field('vpc_id'),
    },
    default_tags(name, block): {
      local resource = blockType.resource('aws_default_tags', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      tags: resource.field('tags'),
    },
    devopsguru_notification_channel(name, block): {
      local resource = blockType.resource('aws_devopsguru_notification_channel', name),
      _: resource._(block, {
        id: build.template(block.id),
      }),
      id: resource.field('id'),
    },
    devopsguru_resource_collection(name, block): {
      local resource = blockType.resource('aws_devopsguru_resource_collection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        type: build.template(block.type),
      }),
      id: resource.field('id'),
      type: resource.field('type'),
    },
    directory_service_directory(name, block): {
      local resource = blockType.resource('aws_directory_service_directory', name),
      _: resource._(block, {
        access_url: build.template(std.get(block, 'access_url', null)),
        alias: build.template(std.get(block, 'alias', null)),
        connect_settings: build.template(std.get(block, 'connect_settings', null)),
        description: build.template(std.get(block, 'description', null)),
        directory_id: build.template(block.directory_id),
        dns_ip_addresses: build.template(std.get(block, 'dns_ip_addresses', null)),
        edition: build.template(std.get(block, 'edition', null)),
        enable_sso: build.template(std.get(block, 'enable_sso', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        radius_settings: build.template(std.get(block, 'radius_settings', null)),
        security_group_id: build.template(std.get(block, 'security_group_id', null)),
        short_name: build.template(std.get(block, 'short_name', null)),
        size: build.template(std.get(block, 'size', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
        vpc_settings: build.template(std.get(block, 'vpc_settings', null)),
      }),
      access_url: resource.field('access_url'),
      alias: resource.field('alias'),
      connect_settings: resource.field('connect_settings'),
      description: resource.field('description'),
      directory_id: resource.field('directory_id'),
      dns_ip_addresses: resource.field('dns_ip_addresses'),
      edition: resource.field('edition'),
      enable_sso: resource.field('enable_sso'),
      id: resource.field('id'),
      name: resource.field('name'),
      radius_settings: resource.field('radius_settings'),
      security_group_id: resource.field('security_group_id'),
      short_name: resource.field('short_name'),
      size: resource.field('size'),
      tags: resource.field('tags'),
      type: resource.field('type'),
      vpc_settings: resource.field('vpc_settings'),
    },
    dms_certificate(name, block): {
      local resource = blockType.resource('aws_dms_certificate', name),
      _: resource._(block, {
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        certificate_creation_date: build.template(std.get(block, 'certificate_creation_date', null)),
        certificate_id: build.template(block.certificate_id),
        certificate_owner: build.template(std.get(block, 'certificate_owner', null)),
        certificate_pem: build.template(std.get(block, 'certificate_pem', null)),
        certificate_wallet: build.template(std.get(block, 'certificate_wallet', null)),
        id: build.template(std.get(block, 'id', null)),
        key_length: build.template(std.get(block, 'key_length', null)),
        signing_algorithm: build.template(std.get(block, 'signing_algorithm', null)),
        tags: build.template(std.get(block, 'tags', null)),
        valid_from_date: build.template(std.get(block, 'valid_from_date', null)),
        valid_to_date: build.template(std.get(block, 'valid_to_date', null)),
      }),
      certificate_arn: resource.field('certificate_arn'),
      certificate_creation_date: resource.field('certificate_creation_date'),
      certificate_id: resource.field('certificate_id'),
      certificate_owner: resource.field('certificate_owner'),
      certificate_pem: resource.field('certificate_pem'),
      certificate_wallet: resource.field('certificate_wallet'),
      id: resource.field('id'),
      key_length: resource.field('key_length'),
      signing_algorithm: resource.field('signing_algorithm'),
      tags: resource.field('tags'),
      valid_from_date: resource.field('valid_from_date'),
      valid_to_date: resource.field('valid_to_date'),
    },
    dms_endpoint(name, block): {
      local resource = blockType.resource('aws_dms_endpoint', name),
      _: resource._(block, {
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        database_name: build.template(std.get(block, 'database_name', null)),
        elasticsearch_settings: build.template(std.get(block, 'elasticsearch_settings', null)),
        endpoint_arn: build.template(std.get(block, 'endpoint_arn', null)),
        endpoint_id: build.template(block.endpoint_id),
        endpoint_type: build.template(std.get(block, 'endpoint_type', null)),
        engine_name: build.template(std.get(block, 'engine_name', null)),
        extra_connection_attributes: build.template(std.get(block, 'extra_connection_attributes', null)),
        id: build.template(std.get(block, 'id', null)),
        kafka_settings: build.template(std.get(block, 'kafka_settings', null)),
        kinesis_settings: build.template(std.get(block, 'kinesis_settings', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        mongodb_settings: build.template(std.get(block, 'mongodb_settings', null)),
        password: build.template(std.get(block, 'password', null)),
        port: build.template(std.get(block, 'port', null)),
        postgres_settings: build.template(std.get(block, 'postgres_settings', null)),
        redis_settings: build.template(std.get(block, 'redis_settings', null)),
        redshift_settings: build.template(std.get(block, 'redshift_settings', null)),
        s3_settings: build.template(std.get(block, 's3_settings', null)),
        secrets_manager_access_role_arn: build.template(std.get(block, 'secrets_manager_access_role_arn', null)),
        secrets_manager_arn: build.template(std.get(block, 'secrets_manager_arn', null)),
        server_name: build.template(std.get(block, 'server_name', null)),
        service_access_role: build.template(std.get(block, 'service_access_role', null)),
        ssl_mode: build.template(std.get(block, 'ssl_mode', null)),
        tags: build.template(std.get(block, 'tags', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      certificate_arn: resource.field('certificate_arn'),
      database_name: resource.field('database_name'),
      elasticsearch_settings: resource.field('elasticsearch_settings'),
      endpoint_arn: resource.field('endpoint_arn'),
      endpoint_id: resource.field('endpoint_id'),
      endpoint_type: resource.field('endpoint_type'),
      engine_name: resource.field('engine_name'),
      extra_connection_attributes: resource.field('extra_connection_attributes'),
      id: resource.field('id'),
      kafka_settings: resource.field('kafka_settings'),
      kinesis_settings: resource.field('kinesis_settings'),
      kms_key_arn: resource.field('kms_key_arn'),
      mongodb_settings: resource.field('mongodb_settings'),
      password: resource.field('password'),
      port: resource.field('port'),
      postgres_settings: resource.field('postgres_settings'),
      redis_settings: resource.field('redis_settings'),
      redshift_settings: resource.field('redshift_settings'),
      s3_settings: resource.field('s3_settings'),
      secrets_manager_access_role_arn: resource.field('secrets_manager_access_role_arn'),
      secrets_manager_arn: resource.field('secrets_manager_arn'),
      server_name: resource.field('server_name'),
      service_access_role: resource.field('service_access_role'),
      ssl_mode: resource.field('ssl_mode'),
      tags: resource.field('tags'),
      username: resource.field('username'),
    },
    dms_replication_instance(name, block): {
      local resource = blockType.resource('aws_dms_replication_instance', name),
      _: resource._(block, {
        allocated_storage: build.template(std.get(block, 'allocated_storage', null)),
        auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        multi_az: build.template(std.get(block, 'multi_az', null)),
        network_type: build.template(std.get(block, 'network_type', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        replication_instance_arn: build.template(std.get(block, 'replication_instance_arn', null)),
        replication_instance_class: build.template(std.get(block, 'replication_instance_class', null)),
        replication_instance_id: build.template(block.replication_instance_id),
        replication_instance_private_ips: build.template(std.get(block, 'replication_instance_private_ips', null)),
        replication_instance_public_ips: build.template(std.get(block, 'replication_instance_public_ips', null)),
        replication_subnet_group_id: build.template(std.get(block, 'replication_subnet_group_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      allocated_storage: resource.field('allocated_storage'),
      auto_minor_version_upgrade: resource.field('auto_minor_version_upgrade'),
      availability_zone: resource.field('availability_zone'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      multi_az: resource.field('multi_az'),
      network_type: resource.field('network_type'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      publicly_accessible: resource.field('publicly_accessible'),
      replication_instance_arn: resource.field('replication_instance_arn'),
      replication_instance_class: resource.field('replication_instance_class'),
      replication_instance_id: resource.field('replication_instance_id'),
      replication_instance_private_ips: resource.field('replication_instance_private_ips'),
      replication_instance_public_ips: resource.field('replication_instance_public_ips'),
      replication_subnet_group_id: resource.field('replication_subnet_group_id'),
      tags: resource.field('tags'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    dms_replication_subnet_group(name, block): {
      local resource = blockType.resource('aws_dms_replication_subnet_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        replication_subnet_group_arn: build.template(std.get(block, 'replication_subnet_group_arn', null)),
        replication_subnet_group_description: build.template(std.get(block, 'replication_subnet_group_description', null)),
        replication_subnet_group_id: build.template(block.replication_subnet_group_id),
        subnet_group_status: build.template(std.get(block, 'subnet_group_status', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      id: resource.field('id'),
      replication_subnet_group_arn: resource.field('replication_subnet_group_arn'),
      replication_subnet_group_description: resource.field('replication_subnet_group_description'),
      replication_subnet_group_id: resource.field('replication_subnet_group_id'),
      subnet_group_status: resource.field('subnet_group_status'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    dms_replication_task(name, block): {
      local resource = blockType.resource('aws_dms_replication_task', name),
      _: resource._(block, {
        cdc_start_position: build.template(std.get(block, 'cdc_start_position', null)),
        cdc_start_time: build.template(std.get(block, 'cdc_start_time', null)),
        id: build.template(std.get(block, 'id', null)),
        migration_type: build.template(std.get(block, 'migration_type', null)),
        replication_instance_arn: build.template(std.get(block, 'replication_instance_arn', null)),
        replication_task_arn: build.template(std.get(block, 'replication_task_arn', null)),
        replication_task_id: build.template(block.replication_task_id),
        replication_task_settings: build.template(std.get(block, 'replication_task_settings', null)),
        source_endpoint_arn: build.template(std.get(block, 'source_endpoint_arn', null)),
        start_replication_task: build.template(std.get(block, 'start_replication_task', null)),
        status: build.template(std.get(block, 'status', null)),
        table_mappings: build.template(std.get(block, 'table_mappings', null)),
        tags: build.template(std.get(block, 'tags', null)),
        target_endpoint_arn: build.template(std.get(block, 'target_endpoint_arn', null)),
      }),
      cdc_start_position: resource.field('cdc_start_position'),
      cdc_start_time: resource.field('cdc_start_time'),
      id: resource.field('id'),
      migration_type: resource.field('migration_type'),
      replication_instance_arn: resource.field('replication_instance_arn'),
      replication_task_arn: resource.field('replication_task_arn'),
      replication_task_id: resource.field('replication_task_id'),
      replication_task_settings: resource.field('replication_task_settings'),
      source_endpoint_arn: resource.field('source_endpoint_arn'),
      start_replication_task: resource.field('start_replication_task'),
      status: resource.field('status'),
      table_mappings: resource.field('table_mappings'),
      tags: resource.field('tags'),
      target_endpoint_arn: resource.field('target_endpoint_arn'),
    },
    docdb_engine_version(name, block): {
      local resource = blockType.resource('aws_docdb_engine_version', name),
      _: resource._(block, {
        engine: build.template(std.get(block, 'engine', null)),
        engine_description: build.template(std.get(block, 'engine_description', null)),
        exportable_log_types: build.template(std.get(block, 'exportable_log_types', null)),
        id: build.template(std.get(block, 'id', null)),
        parameter_group_family: build.template(std.get(block, 'parameter_group_family', null)),
        preferred_versions: build.template(std.get(block, 'preferred_versions', null)),
        supports_log_exports_to_cloudwatch: build.template(std.get(block, 'supports_log_exports_to_cloudwatch', null)),
        valid_upgrade_targets: build.template(std.get(block, 'valid_upgrade_targets', null)),
        version: build.template(std.get(block, 'version', null)),
        version_description: build.template(std.get(block, 'version_description', null)),
      }),
      engine: resource.field('engine'),
      engine_description: resource.field('engine_description'),
      exportable_log_types: resource.field('exportable_log_types'),
      id: resource.field('id'),
      parameter_group_family: resource.field('parameter_group_family'),
      preferred_versions: resource.field('preferred_versions'),
      supports_log_exports_to_cloudwatch: resource.field('supports_log_exports_to_cloudwatch'),
      valid_upgrade_targets: resource.field('valid_upgrade_targets'),
      version: resource.field('version'),
      version_description: resource.field('version_description'),
    },
    docdb_orderable_db_instance(name, block): {
      local resource = blockType.resource('aws_docdb_orderable_db_instance', name),
      _: resource._(block, {
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_class: build.template(std.get(block, 'instance_class', null)),
        license_model: build.template(std.get(block, 'license_model', null)),
        preferred_instance_classes: build.template(std.get(block, 'preferred_instance_classes', null)),
        vpc: build.template(std.get(block, 'vpc', null)),
      }),
      availability_zones: resource.field('availability_zones'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      instance_class: resource.field('instance_class'),
      license_model: resource.field('license_model'),
      preferred_instance_classes: resource.field('preferred_instance_classes'),
      vpc: resource.field('vpc'),
    },
    dx_connection(name, block): {
      local resource = blockType.resource('aws_dx_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_device: build.template(std.get(block, 'aws_device', null)),
        bandwidth: build.template(std.get(block, 'bandwidth', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
        partner_name: build.template(std.get(block, 'partner_name', null)),
        provider_name: build.template(std.get(block, 'provider_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vlan_id: build.template(std.get(block, 'vlan_id', null)),
      }),
      arn: resource.field('arn'),
      aws_device: resource.field('aws_device'),
      bandwidth: resource.field('bandwidth'),
      id: resource.field('id'),
      location: resource.field('location'),
      name: resource.field('name'),
      owner_account_id: resource.field('owner_account_id'),
      partner_name: resource.field('partner_name'),
      provider_name: resource.field('provider_name'),
      tags: resource.field('tags'),
      vlan_id: resource.field('vlan_id'),
    },
    dx_gateway(name, block): {
      local resource = blockType.resource('aws_dx_gateway', name),
      _: resource._(block, {
        amazon_side_asn: build.template(std.get(block, 'amazon_side_asn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner_account_id: build.template(std.get(block, 'owner_account_id', null)),
      }),
      amazon_side_asn: resource.field('amazon_side_asn'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner_account_id: resource.field('owner_account_id'),
    },
    dx_location(name, block): {
      local resource = blockType.resource('aws_dx_location', name),
      _: resource._(block, {
        available_macsec_port_speeds: build.template(std.get(block, 'available_macsec_port_speeds', null)),
        available_port_speeds: build.template(std.get(block, 'available_port_speeds', null)),
        available_providers: build.template(std.get(block, 'available_providers', null)),
        id: build.template(std.get(block, 'id', null)),
        location_code: build.template(block.location_code),
        location_name: build.template(std.get(block, 'location_name', null)),
      }),
      available_macsec_port_speeds: resource.field('available_macsec_port_speeds'),
      available_port_speeds: resource.field('available_port_speeds'),
      available_providers: resource.field('available_providers'),
      id: resource.field('id'),
      location_code: resource.field('location_code'),
      location_name: resource.field('location_name'),
    },
    dx_locations(name, block): {
      local resource = blockType.resource('aws_dx_locations', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location_codes: build.template(std.get(block, 'location_codes', null)),
      }),
      id: resource.field('id'),
      location_codes: resource.field('location_codes'),
    },
    dx_router_configuration(name, block): {
      local resource = blockType.resource('aws_dx_router_configuration', name),
      _: resource._(block, {
        customer_router_config: build.template(std.get(block, 'customer_router_config', null)),
        id: build.template(std.get(block, 'id', null)),
        router: build.template(std.get(block, 'router', null)),
        router_type_identifier: build.template(block.router_type_identifier),
        virtual_interface_id: build.template(block.virtual_interface_id),
        virtual_interface_name: build.template(std.get(block, 'virtual_interface_name', null)),
      }),
      customer_router_config: resource.field('customer_router_config'),
      id: resource.field('id'),
      router: resource.field('router'),
      router_type_identifier: resource.field('router_type_identifier'),
      virtual_interface_id: resource.field('virtual_interface_id'),
      virtual_interface_name: resource.field('virtual_interface_name'),
    },
    dynamodb_table(name, block): {
      local resource = blockType.resource('aws_dynamodb_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attribute: build.template(std.get(block, 'attribute', null)),
        billing_mode: build.template(std.get(block, 'billing_mode', null)),
        deletion_protection_enabled: build.template(std.get(block, 'deletion_protection_enabled', null)),
        global_secondary_index: build.template(std.get(block, 'global_secondary_index', null)),
        hash_key: build.template(std.get(block, 'hash_key', null)),
        id: build.template(std.get(block, 'id', null)),
        local_secondary_index: build.template(std.get(block, 'local_secondary_index', null)),
        name: build.template(block.name),
        point_in_time_recovery: build.template(std.get(block, 'point_in_time_recovery', null)),
        range_key: build.template(std.get(block, 'range_key', null)),
        read_capacity: build.template(std.get(block, 'read_capacity', null)),
        replica: build.template(std.get(block, 'replica', null)),
        stream_arn: build.template(std.get(block, 'stream_arn', null)),
        stream_enabled: build.template(std.get(block, 'stream_enabled', null)),
        stream_label: build.template(std.get(block, 'stream_label', null)),
        stream_view_type: build.template(std.get(block, 'stream_view_type', null)),
        table_class: build.template(std.get(block, 'table_class', null)),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        write_capacity: build.template(std.get(block, 'write_capacity', null)),
      }),
      arn: resource.field('arn'),
      attribute: resource.field('attribute'),
      billing_mode: resource.field('billing_mode'),
      deletion_protection_enabled: resource.field('deletion_protection_enabled'),
      global_secondary_index: resource.field('global_secondary_index'),
      hash_key: resource.field('hash_key'),
      id: resource.field('id'),
      local_secondary_index: resource.field('local_secondary_index'),
      name: resource.field('name'),
      point_in_time_recovery: resource.field('point_in_time_recovery'),
      range_key: resource.field('range_key'),
      read_capacity: resource.field('read_capacity'),
      replica: resource.field('replica'),
      stream_arn: resource.field('stream_arn'),
      stream_enabled: resource.field('stream_enabled'),
      stream_label: resource.field('stream_label'),
      stream_view_type: resource.field('stream_view_type'),
      table_class: resource.field('table_class'),
      tags: resource.field('tags'),
      ttl: resource.field('ttl'),
      write_capacity: resource.field('write_capacity'),
    },
    dynamodb_table_item(name, block): {
      local resource = blockType.resource('aws_dynamodb_table_item', name),
      _: resource._(block, {
        expression_attribute_names: build.template(std.get(block, 'expression_attribute_names', null)),
        id: build.template(std.get(block, 'id', null)),
        item: build.template(std.get(block, 'item', null)),
        key: build.template(block.key),
        projection_expression: build.template(std.get(block, 'projection_expression', null)),
        table_name: build.template(block.table_name),
      }),
      expression_attribute_names: resource.field('expression_attribute_names'),
      id: resource.field('id'),
      item: resource.field('item'),
      key: resource.field('key'),
      projection_expression: resource.field('projection_expression'),
      table_name: resource.field('table_name'),
    },
    ebs_default_kms_key(name, block): {
      local resource = blockType.resource('aws_ebs_default_kms_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_arn: build.template(std.get(block, 'key_arn', null)),
      }),
      id: resource.field('id'),
      key_arn: resource.field('key_arn'),
    },
    ebs_encryption_by_default(name, block): {
      local resource = blockType.resource('aws_ebs_encryption_by_default', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
    },
    ebs_snapshot(name, block): {
      local resource = blockType.resource('aws_ebs_snapshot', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        data_encryption_key_id: build.template(std.get(block, 'data_encryption_key_id', null)),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        owner_alias: build.template(std.get(block, 'owner_alias', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        owners: build.template(std.get(block, 'owners', null)),
        restorable_by_user_ids: build.template(std.get(block, 'restorable_by_user_ids', null)),
        snapshot_id: build.template(std.get(block, 'snapshot_id', null)),
        snapshot_ids: build.template(std.get(block, 'snapshot_ids', null)),
        start_time: build.template(std.get(block, 'start_time', null)),
        state: build.template(std.get(block, 'state', null)),
        storage_tier: build.template(std.get(block, 'storage_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
        volume_id: build.template(std.get(block, 'volume_id', null)),
        volume_size: build.template(std.get(block, 'volume_size', null)),
      }),
      arn: resource.field('arn'),
      data_encryption_key_id: resource.field('data_encryption_key_id'),
      description: resource.field('description'),
      encrypted: resource.field('encrypted'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      most_recent: resource.field('most_recent'),
      outpost_arn: resource.field('outpost_arn'),
      owner_alias: resource.field('owner_alias'),
      owner_id: resource.field('owner_id'),
      owners: resource.field('owners'),
      restorable_by_user_ids: resource.field('restorable_by_user_ids'),
      snapshot_id: resource.field('snapshot_id'),
      snapshot_ids: resource.field('snapshot_ids'),
      start_time: resource.field('start_time'),
      state: resource.field('state'),
      storage_tier: resource.field('storage_tier'),
      tags: resource.field('tags'),
      volume_id: resource.field('volume_id'),
      volume_size: resource.field('volume_size'),
    },
    ebs_snapshot_ids(name, block): {
      local resource = blockType.resource('aws_ebs_snapshot_ids', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        owners: build.template(std.get(block, 'owners', null)),
        restorable_by_user_ids: build.template(std.get(block, 'restorable_by_user_ids', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      owners: resource.field('owners'),
      restorable_by_user_ids: resource.field('restorable_by_user_ids'),
    },
    ebs_volume(name, block): {
      local resource = blockType.resource('aws_ebs_volume', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        iops: build.template(std.get(block, 'iops', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        multi_attach_enabled: build.template(std.get(block, 'multi_attach_enabled', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        size: build.template(std.get(block, 'size', null)),
        snapshot_id: build.template(std.get(block, 'snapshot_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        throughput: build.template(std.get(block, 'throughput', null)),
        volume_id: build.template(std.get(block, 'volume_id', null)),
        volume_type: build.template(std.get(block, 'volume_type', null)),
      }),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      encrypted: resource.field('encrypted'),
      id: resource.field('id'),
      iops: resource.field('iops'),
      kms_key_id: resource.field('kms_key_id'),
      most_recent: resource.field('most_recent'),
      multi_attach_enabled: resource.field('multi_attach_enabled'),
      outpost_arn: resource.field('outpost_arn'),
      size: resource.field('size'),
      snapshot_id: resource.field('snapshot_id'),
      tags: resource.field('tags'),
      throughput: resource.field('throughput'),
      volume_id: resource.field('volume_id'),
      volume_type: resource.field('volume_type'),
    },
    ebs_volumes(name, block): {
      local resource = blockType.resource('aws_ebs_volumes', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    ec2_capacity_block_offering(name, block): {
      local resource = blockType.resource('aws_ec2_capacity_block_offering', name),
      _: resource._(block, {
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        capacity_block_offering_id: build.template(std.get(block, 'capacity_block_offering_id', null)),
        capacity_duration_hours: build.template(block.capacity_duration_hours),
        currency_code: build.template(std.get(block, 'currency_code', null)),
        end_date_range: build.template(std.get(block, 'end_date_range', null)),
        instance_count: build.template(block.instance_count),
        instance_type: build.template(block.instance_type),
        start_date_range: build.template(std.get(block, 'start_date_range', null)),
        tenancy: build.template(std.get(block, 'tenancy', null)),
        upfront_fee: build.template(std.get(block, 'upfront_fee', null)),
      }),
      availability_zone: resource.field('availability_zone'),
      capacity_block_offering_id: resource.field('capacity_block_offering_id'),
      capacity_duration_hours: resource.field('capacity_duration_hours'),
      currency_code: resource.field('currency_code'),
      end_date_range: resource.field('end_date_range'),
      instance_count: resource.field('instance_count'),
      instance_type: resource.field('instance_type'),
      start_date_range: resource.field('start_date_range'),
      tenancy: resource.field('tenancy'),
      upfront_fee: resource.field('upfront_fee'),
    },
    ec2_client_vpn_endpoint(name, block): {
      local resource = blockType.resource('aws_ec2_client_vpn_endpoint', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        authentication_options: build.template(std.get(block, 'authentication_options', null)),
        client_cidr_block: build.template(std.get(block, 'client_cidr_block', null)),
        client_connect_options: build.template(std.get(block, 'client_connect_options', null)),
        client_login_banner_options: build.template(std.get(block, 'client_login_banner_options', null)),
        client_vpn_endpoint_id: build.template(std.get(block, 'client_vpn_endpoint_id', null)),
        connection_log_options: build.template(std.get(block, 'connection_log_options', null)),
        description: build.template(std.get(block, 'description', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        dns_servers: build.template(std.get(block, 'dns_servers', null)),
        id: build.template(std.get(block, 'id', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        self_service_portal: build.template(std.get(block, 'self_service_portal', null)),
        self_service_portal_url: build.template(std.get(block, 'self_service_portal_url', null)),
        server_certificate_arn: build.template(std.get(block, 'server_certificate_arn', null)),
        session_timeout_hours: build.template(std.get(block, 'session_timeout_hours', null)),
        split_tunnel: build.template(std.get(block, 'split_tunnel', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transport_protocol: build.template(std.get(block, 'transport_protocol', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        vpn_port: build.template(std.get(block, 'vpn_port', null)),
      }),
      arn: resource.field('arn'),
      authentication_options: resource.field('authentication_options'),
      client_cidr_block: resource.field('client_cidr_block'),
      client_connect_options: resource.field('client_connect_options'),
      client_login_banner_options: resource.field('client_login_banner_options'),
      client_vpn_endpoint_id: resource.field('client_vpn_endpoint_id'),
      connection_log_options: resource.field('connection_log_options'),
      description: resource.field('description'),
      dns_name: resource.field('dns_name'),
      dns_servers: resource.field('dns_servers'),
      id: resource.field('id'),
      security_group_ids: resource.field('security_group_ids'),
      self_service_portal: resource.field('self_service_portal'),
      self_service_portal_url: resource.field('self_service_portal_url'),
      server_certificate_arn: resource.field('server_certificate_arn'),
      session_timeout_hours: resource.field('session_timeout_hours'),
      split_tunnel: resource.field('split_tunnel'),
      tags: resource.field('tags'),
      transport_protocol: resource.field('transport_protocol'),
      vpc_id: resource.field('vpc_id'),
      vpn_port: resource.field('vpn_port'),
    },
    ec2_coip_pool(name, block): {
      local resource = blockType.resource('aws_ec2_coip_pool', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        local_gateway_route_table_id: build.template(std.get(block, 'local_gateway_route_table_id', null)),
        pool_cidrs: build.template(std.get(block, 'pool_cidrs', null)),
        pool_id: build.template(std.get(block, 'pool_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      local_gateway_route_table_id: resource.field('local_gateway_route_table_id'),
      pool_cidrs: resource.field('pool_cidrs'),
      pool_id: resource.field('pool_id'),
      tags: resource.field('tags'),
    },
    ec2_coip_pools(name, block): {
      local resource = blockType.resource('aws_ec2_coip_pools', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        pool_ids: build.template(std.get(block, 'pool_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      pool_ids: resource.field('pool_ids'),
      tags: resource.field('tags'),
    },
    ec2_host(name, block): {
      local resource = blockType.resource('aws_ec2_host', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        asset_id: build.template(std.get(block, 'asset_id', null)),
        auto_placement: build.template(std.get(block, 'auto_placement', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        cores: build.template(std.get(block, 'cores', null)),
        host_id: build.template(std.get(block, 'host_id', null)),
        host_recovery: build.template(std.get(block, 'host_recovery', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_family: build.template(std.get(block, 'instance_family', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        sockets: build.template(std.get(block, 'sockets', null)),
        tags: build.template(std.get(block, 'tags', null)),
        total_vcpus: build.template(std.get(block, 'total_vcpus', null)),
      }),
      arn: resource.field('arn'),
      asset_id: resource.field('asset_id'),
      auto_placement: resource.field('auto_placement'),
      availability_zone: resource.field('availability_zone'),
      cores: resource.field('cores'),
      host_id: resource.field('host_id'),
      host_recovery: resource.field('host_recovery'),
      id: resource.field('id'),
      instance_family: resource.field('instance_family'),
      instance_type: resource.field('instance_type'),
      outpost_arn: resource.field('outpost_arn'),
      owner_id: resource.field('owner_id'),
      sockets: resource.field('sockets'),
      tags: resource.field('tags'),
      total_vcpus: resource.field('total_vcpus'),
    },
    ec2_instance_type(name, block): {
      local resource = blockType.resource('aws_ec2_instance_type', name),
      _: resource._(block, {
        auto_recovery_supported: build.template(std.get(block, 'auto_recovery_supported', null)),
        bare_metal: build.template(std.get(block, 'bare_metal', null)),
        burstable_performance_supported: build.template(std.get(block, 'burstable_performance_supported', null)),
        current_generation: build.template(std.get(block, 'current_generation', null)),
        dedicated_hosts_supported: build.template(std.get(block, 'dedicated_hosts_supported', null)),
        default_cores: build.template(std.get(block, 'default_cores', null)),
        default_threads_per_core: build.template(std.get(block, 'default_threads_per_core', null)),
        default_vcpus: build.template(std.get(block, 'default_vcpus', null)),
        ebs_encryption_support: build.template(std.get(block, 'ebs_encryption_support', null)),
        ebs_nvme_support: build.template(std.get(block, 'ebs_nvme_support', null)),
        ebs_optimized_support: build.template(std.get(block, 'ebs_optimized_support', null)),
        ebs_performance_baseline_bandwidth: build.template(std.get(block, 'ebs_performance_baseline_bandwidth', null)),
        ebs_performance_baseline_iops: build.template(std.get(block, 'ebs_performance_baseline_iops', null)),
        ebs_performance_baseline_throughput: build.template(std.get(block, 'ebs_performance_baseline_throughput', null)),
        ebs_performance_maximum_bandwidth: build.template(std.get(block, 'ebs_performance_maximum_bandwidth', null)),
        ebs_performance_maximum_iops: build.template(std.get(block, 'ebs_performance_maximum_iops', null)),
        ebs_performance_maximum_throughput: build.template(std.get(block, 'ebs_performance_maximum_throughput', null)),
        efa_supported: build.template(std.get(block, 'efa_supported', null)),
        ena_support: build.template(std.get(block, 'ena_support', null)),
        encryption_in_transit_supported: build.template(std.get(block, 'encryption_in_transit_supported', null)),
        fpgas: build.template(std.get(block, 'fpgas', null)),
        free_tier_eligible: build.template(std.get(block, 'free_tier_eligible', null)),
        gpus: build.template(std.get(block, 'gpus', null)),
        hibernation_supported: build.template(std.get(block, 'hibernation_supported', null)),
        hypervisor: build.template(std.get(block, 'hypervisor', null)),
        id: build.template(std.get(block, 'id', null)),
        inference_accelerators: build.template(std.get(block, 'inference_accelerators', null)),
        instance_disks: build.template(std.get(block, 'instance_disks', null)),
        instance_storage_supported: build.template(std.get(block, 'instance_storage_supported', null)),
        instance_type: build.template(block.instance_type),
        ipv6_supported: build.template(std.get(block, 'ipv6_supported', null)),
        maximum_ipv4_addresses_per_interface: build.template(std.get(block, 'maximum_ipv4_addresses_per_interface', null)),
        maximum_ipv6_addresses_per_interface: build.template(std.get(block, 'maximum_ipv6_addresses_per_interface', null)),
        maximum_network_cards: build.template(std.get(block, 'maximum_network_cards', null)),
        maximum_network_interfaces: build.template(std.get(block, 'maximum_network_interfaces', null)),
        memory_size: build.template(std.get(block, 'memory_size', null)),
        network_performance: build.template(std.get(block, 'network_performance', null)),
        supported_architectures: build.template(std.get(block, 'supported_architectures', null)),
        supported_placement_strategies: build.template(std.get(block, 'supported_placement_strategies', null)),
        supported_root_device_types: build.template(std.get(block, 'supported_root_device_types', null)),
        supported_usages_classes: build.template(std.get(block, 'supported_usages_classes', null)),
        supported_virtualization_types: build.template(std.get(block, 'supported_virtualization_types', null)),
        sustained_clock_speed: build.template(std.get(block, 'sustained_clock_speed', null)),
        total_fpga_memory: build.template(std.get(block, 'total_fpga_memory', null)),
        total_gpu_memory: build.template(std.get(block, 'total_gpu_memory', null)),
        total_instance_storage: build.template(std.get(block, 'total_instance_storage', null)),
        valid_cores: build.template(std.get(block, 'valid_cores', null)),
        valid_threads_per_core: build.template(std.get(block, 'valid_threads_per_core', null)),
      }),
      auto_recovery_supported: resource.field('auto_recovery_supported'),
      bare_metal: resource.field('bare_metal'),
      burstable_performance_supported: resource.field('burstable_performance_supported'),
      current_generation: resource.field('current_generation'),
      dedicated_hosts_supported: resource.field('dedicated_hosts_supported'),
      default_cores: resource.field('default_cores'),
      default_threads_per_core: resource.field('default_threads_per_core'),
      default_vcpus: resource.field('default_vcpus'),
      ebs_encryption_support: resource.field('ebs_encryption_support'),
      ebs_nvme_support: resource.field('ebs_nvme_support'),
      ebs_optimized_support: resource.field('ebs_optimized_support'),
      ebs_performance_baseline_bandwidth: resource.field('ebs_performance_baseline_bandwidth'),
      ebs_performance_baseline_iops: resource.field('ebs_performance_baseline_iops'),
      ebs_performance_baseline_throughput: resource.field('ebs_performance_baseline_throughput'),
      ebs_performance_maximum_bandwidth: resource.field('ebs_performance_maximum_bandwidth'),
      ebs_performance_maximum_iops: resource.field('ebs_performance_maximum_iops'),
      ebs_performance_maximum_throughput: resource.field('ebs_performance_maximum_throughput'),
      efa_supported: resource.field('efa_supported'),
      ena_support: resource.field('ena_support'),
      encryption_in_transit_supported: resource.field('encryption_in_transit_supported'),
      fpgas: resource.field('fpgas'),
      free_tier_eligible: resource.field('free_tier_eligible'),
      gpus: resource.field('gpus'),
      hibernation_supported: resource.field('hibernation_supported'),
      hypervisor: resource.field('hypervisor'),
      id: resource.field('id'),
      inference_accelerators: resource.field('inference_accelerators'),
      instance_disks: resource.field('instance_disks'),
      instance_storage_supported: resource.field('instance_storage_supported'),
      instance_type: resource.field('instance_type'),
      ipv6_supported: resource.field('ipv6_supported'),
      maximum_ipv4_addresses_per_interface: resource.field('maximum_ipv4_addresses_per_interface'),
      maximum_ipv6_addresses_per_interface: resource.field('maximum_ipv6_addresses_per_interface'),
      maximum_network_cards: resource.field('maximum_network_cards'),
      maximum_network_interfaces: resource.field('maximum_network_interfaces'),
      memory_size: resource.field('memory_size'),
      network_performance: resource.field('network_performance'),
      supported_architectures: resource.field('supported_architectures'),
      supported_placement_strategies: resource.field('supported_placement_strategies'),
      supported_root_device_types: resource.field('supported_root_device_types'),
      supported_usages_classes: resource.field('supported_usages_classes'),
      supported_virtualization_types: resource.field('supported_virtualization_types'),
      sustained_clock_speed: resource.field('sustained_clock_speed'),
      total_fpga_memory: resource.field('total_fpga_memory'),
      total_gpu_memory: resource.field('total_gpu_memory'),
      total_instance_storage: resource.field('total_instance_storage'),
      valid_cores: resource.field('valid_cores'),
      valid_threads_per_core: resource.field('valid_threads_per_core'),
    },
    ec2_instance_type_offering(name, block): {
      local resource = blockType.resource('aws_ec2_instance_type_offering', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        location_type: build.template(std.get(block, 'location_type', null)),
        preferred_instance_types: build.template(std.get(block, 'preferred_instance_types', null)),
      }),
      id: resource.field('id'),
      instance_type: resource.field('instance_type'),
      location_type: resource.field('location_type'),
      preferred_instance_types: resource.field('preferred_instance_types'),
    },
    ec2_instance_type_offerings(name, block): {
      local resource = blockType.resource('aws_ec2_instance_type_offerings', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_types: build.template(std.get(block, 'instance_types', null)),
        location_type: build.template(std.get(block, 'location_type', null)),
        location_types: build.template(std.get(block, 'location_types', null)),
        locations: build.template(std.get(block, 'locations', null)),
      }),
      id: resource.field('id'),
      instance_types: resource.field('instance_types'),
      location_type: resource.field('location_type'),
      location_types: resource.field('location_types'),
      locations: resource.field('locations'),
    },
    ec2_instance_types(name, block): {
      local resource = blockType.resource('aws_ec2_instance_types', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_types: build.template(std.get(block, 'instance_types', null)),
      }),
      id: resource.field('id'),
      instance_types: resource.field('instance_types'),
    },
    ec2_local_gateway(name, block): {
      local resource = blockType.resource('aws_ec2_local_gateway', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      outpost_arn: resource.field('outpost_arn'),
      owner_id: resource.field('owner_id'),
      state: resource.field('state'),
      tags: resource.field('tags'),
    },
    ec2_local_gateway_route_table(name, block): {
      local resource = blockType.resource('aws_ec2_local_gateway_route_table', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        local_gateway_id: build.template(std.get(block, 'local_gateway_id', null)),
        local_gateway_route_table_id: build.template(std.get(block, 'local_gateway_route_table_id', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      local_gateway_id: resource.field('local_gateway_id'),
      local_gateway_route_table_id: resource.field('local_gateway_route_table_id'),
      outpost_arn: resource.field('outpost_arn'),
      state: resource.field('state'),
      tags: resource.field('tags'),
    },
    ec2_local_gateway_route_tables(name, block): {
      local resource = blockType.resource('aws_ec2_local_gateway_route_tables', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    ec2_local_gateway_virtual_interface(name, block): {
      local resource = blockType.resource('aws_ec2_local_gateway_virtual_interface', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        local_address: build.template(std.get(block, 'local_address', null)),
        local_bgp_asn: build.template(std.get(block, 'local_bgp_asn', null)),
        local_gateway_id: build.template(std.get(block, 'local_gateway_id', null)),
        local_gateway_virtual_interface_ids: build.template(std.get(block, 'local_gateway_virtual_interface_ids', null)),
        peer_address: build.template(std.get(block, 'peer_address', null)),
        peer_bgp_asn: build.template(std.get(block, 'peer_bgp_asn', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vlan: build.template(std.get(block, 'vlan', null)),
      }),
      id: resource.field('id'),
      local_address: resource.field('local_address'),
      local_bgp_asn: resource.field('local_bgp_asn'),
      local_gateway_id: resource.field('local_gateway_id'),
      local_gateway_virtual_interface_ids: resource.field('local_gateway_virtual_interface_ids'),
      peer_address: resource.field('peer_address'),
      peer_bgp_asn: resource.field('peer_bgp_asn'),
      tags: resource.field('tags'),
      vlan: resource.field('vlan'),
    },
    ec2_local_gateway_virtual_interface_group(name, block): {
      local resource = blockType.resource('aws_ec2_local_gateway_virtual_interface_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        local_gateway_id: build.template(std.get(block, 'local_gateway_id', null)),
        local_gateway_virtual_interface_ids: build.template(std.get(block, 'local_gateway_virtual_interface_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      local_gateway_id: resource.field('local_gateway_id'),
      local_gateway_virtual_interface_ids: resource.field('local_gateway_virtual_interface_ids'),
      tags: resource.field('tags'),
    },
    ec2_local_gateway_virtual_interface_groups(name, block): {
      local resource = blockType.resource('aws_ec2_local_gateway_virtual_interface_groups', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        local_gateway_virtual_interface_ids: build.template(std.get(block, 'local_gateway_virtual_interface_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      local_gateway_virtual_interface_ids: resource.field('local_gateway_virtual_interface_ids'),
      tags: resource.field('tags'),
    },
    ec2_local_gateways(name, block): {
      local resource = blockType.resource('aws_ec2_local_gateways', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    ec2_managed_prefix_list(name, block): {
      local resource = blockType.resource('aws_ec2_managed_prefix_list', name),
      _: resource._(block, {
        address_family: build.template(std.get(block, 'address_family', null)),
        arn: build.template(std.get(block, 'arn', null)),
        entries: build.template(std.get(block, 'entries', null)),
        id: build.template(std.get(block, 'id', null)),
        max_entries: build.template(std.get(block, 'max_entries', null)),
        name: build.template(std.get(block, 'name', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      address_family: resource.field('address_family'),
      arn: resource.field('arn'),
      entries: resource.field('entries'),
      id: resource.field('id'),
      max_entries: resource.field('max_entries'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
      version: resource.field('version'),
    },
    ec2_managed_prefix_lists(name, block): {
      local resource = blockType.resource('aws_ec2_managed_prefix_lists', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    ec2_network_insights_analysis(name, block): {
      local resource = blockType.resource('aws_ec2_network_insights_analysis', name),
      _: resource._(block, {
        alternate_path_hints: build.template(std.get(block, 'alternate_path_hints', null)),
        arn: build.template(std.get(block, 'arn', null)),
        explanations: build.template(std.get(block, 'explanations', null)),
        filter_in_arns: build.template(std.get(block, 'filter_in_arns', null)),
        forward_path_components: build.template(std.get(block, 'forward_path_components', null)),
        id: build.template(std.get(block, 'id', null)),
        network_insights_analysis_id: build.template(std.get(block, 'network_insights_analysis_id', null)),
        network_insights_path_id: build.template(std.get(block, 'network_insights_path_id', null)),
        path_found: build.template(std.get(block, 'path_found', null)),
        return_path_components: build.template(std.get(block, 'return_path_components', null)),
        start_date: build.template(std.get(block, 'start_date', null)),
        status: build.template(std.get(block, 'status', null)),
        status_message: build.template(std.get(block, 'status_message', null)),
        tags: build.template(std.get(block, 'tags', null)),
        warning_message: build.template(std.get(block, 'warning_message', null)),
      }),
      alternate_path_hints: resource.field('alternate_path_hints'),
      arn: resource.field('arn'),
      explanations: resource.field('explanations'),
      filter_in_arns: resource.field('filter_in_arns'),
      forward_path_components: resource.field('forward_path_components'),
      id: resource.field('id'),
      network_insights_analysis_id: resource.field('network_insights_analysis_id'),
      network_insights_path_id: resource.field('network_insights_path_id'),
      path_found: resource.field('path_found'),
      return_path_components: resource.field('return_path_components'),
      start_date: resource.field('start_date'),
      status: resource.field('status'),
      status_message: resource.field('status_message'),
      tags: resource.field('tags'),
      warning_message: resource.field('warning_message'),
    },
    ec2_network_insights_path(name, block): {
      local resource = blockType.resource('aws_ec2_network_insights_path', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        destination: build.template(std.get(block, 'destination', null)),
        destination_arn: build.template(std.get(block, 'destination_arn', null)),
        destination_ip: build.template(std.get(block, 'destination_ip', null)),
        destination_port: build.template(std.get(block, 'destination_port', null)),
        id: build.template(std.get(block, 'id', null)),
        network_insights_path_id: build.template(std.get(block, 'network_insights_path_id', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        source: build.template(std.get(block, 'source', null)),
        source_arn: build.template(std.get(block, 'source_arn', null)),
        source_ip: build.template(std.get(block, 'source_ip', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      destination: resource.field('destination'),
      destination_arn: resource.field('destination_arn'),
      destination_ip: resource.field('destination_ip'),
      destination_port: resource.field('destination_port'),
      id: resource.field('id'),
      network_insights_path_id: resource.field('network_insights_path_id'),
      protocol: resource.field('protocol'),
      source: resource.field('source'),
      source_arn: resource.field('source_arn'),
      source_ip: resource.field('source_ip'),
      tags: resource.field('tags'),
    },
    ec2_public_ipv4_pool(name, block): {
      local resource = blockType.resource('aws_ec2_public_ipv4_pool', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        network_border_group: build.template(std.get(block, 'network_border_group', null)),
        pool_address_ranges: build.template(std.get(block, 'pool_address_ranges', null)),
        pool_id: build.template(block.pool_id),
        tags: build.template(std.get(block, 'tags', null)),
        total_address_count: build.template(std.get(block, 'total_address_count', null)),
        total_available_address_count: build.template(std.get(block, 'total_available_address_count', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      network_border_group: resource.field('network_border_group'),
      pool_address_ranges: resource.field('pool_address_ranges'),
      pool_id: resource.field('pool_id'),
      tags: resource.field('tags'),
      total_address_count: resource.field('total_address_count'),
      total_available_address_count: resource.field('total_available_address_count'),
    },
    ec2_public_ipv4_pools(name, block): {
      local resource = blockType.resource('aws_ec2_public_ipv4_pools', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        pool_ids: build.template(std.get(block, 'pool_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      pool_ids: resource.field('pool_ids'),
      tags: resource.field('tags'),
    },
    ec2_serial_console_access(name, block): {
      local resource = blockType.resource('aws_ec2_serial_console_access', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
    },
    ec2_spot_price(name, block): {
      local resource = blockType.resource('aws_ec2_spot_price', name),
      _: resource._(block, {
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        spot_price: build.template(std.get(block, 'spot_price', null)),
        spot_price_timestamp: build.template(std.get(block, 'spot_price_timestamp', null)),
      }),
      availability_zone: resource.field('availability_zone'),
      id: resource.field('id'),
      instance_type: resource.field('instance_type'),
      spot_price: resource.field('spot_price'),
      spot_price_timestamp: resource.field('spot_price_timestamp'),
    },
    ec2_transit_gateway(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway', name),
      _: resource._(block, {
        amazon_side_asn: build.template(std.get(block, 'amazon_side_asn', null)),
        arn: build.template(std.get(block, 'arn', null)),
        association_default_route_table_id: build.template(std.get(block, 'association_default_route_table_id', null)),
        auto_accept_shared_attachments: build.template(std.get(block, 'auto_accept_shared_attachments', null)),
        default_route_table_association: build.template(std.get(block, 'default_route_table_association', null)),
        default_route_table_propagation: build.template(std.get(block, 'default_route_table_propagation', null)),
        description: build.template(std.get(block, 'description', null)),
        dns_support: build.template(std.get(block, 'dns_support', null)),
        id: build.template(std.get(block, 'id', null)),
        multicast_support: build.template(std.get(block, 'multicast_support', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        propagation_default_route_table_id: build.template(std.get(block, 'propagation_default_route_table_id', null)),
        security_group_referencing_support: build.template(std.get(block, 'security_group_referencing_support', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transit_gateway_cidr_blocks: build.template(std.get(block, 'transit_gateway_cidr_blocks', null)),
        vpn_ecmp_support: build.template(std.get(block, 'vpn_ecmp_support', null)),
      }),
      amazon_side_asn: resource.field('amazon_side_asn'),
      arn: resource.field('arn'),
      association_default_route_table_id: resource.field('association_default_route_table_id'),
      auto_accept_shared_attachments: resource.field('auto_accept_shared_attachments'),
      default_route_table_association: resource.field('default_route_table_association'),
      default_route_table_propagation: resource.field('default_route_table_propagation'),
      description: resource.field('description'),
      dns_support: resource.field('dns_support'),
      id: resource.field('id'),
      multicast_support: resource.field('multicast_support'),
      owner_id: resource.field('owner_id'),
      propagation_default_route_table_id: resource.field('propagation_default_route_table_id'),
      security_group_referencing_support: resource.field('security_group_referencing_support'),
      tags: resource.field('tags'),
      transit_gateway_cidr_blocks: resource.field('transit_gateway_cidr_blocks'),
      vpn_ecmp_support: resource.field('vpn_ecmp_support'),
    },
    ec2_transit_gateway_attachment(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_attachment', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        association_state: build.template(std.get(block, 'association_state', null)),
        association_transit_gateway_route_table_id: build.template(std.get(block, 'association_transit_gateway_route_table_id', null)),
        id: build.template(std.get(block, 'id', null)),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        resource_owner_id: build.template(std.get(block, 'resource_owner_id', null)),
        resource_type: build.template(std.get(block, 'resource_type', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transit_gateway_attachment_id: build.template(std.get(block, 'transit_gateway_attachment_id', null)),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
        transit_gateway_owner_id: build.template(std.get(block, 'transit_gateway_owner_id', null)),
      }),
      arn: resource.field('arn'),
      association_state: resource.field('association_state'),
      association_transit_gateway_route_table_id: resource.field('association_transit_gateway_route_table_id'),
      id: resource.field('id'),
      resource_id: resource.field('resource_id'),
      resource_owner_id: resource.field('resource_owner_id'),
      resource_type: resource.field('resource_type'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      transit_gateway_owner_id: resource.field('transit_gateway_owner_id'),
    },
    ec2_transit_gateway_attachments(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_attachments', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    ec2_transit_gateway_connect(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_connect', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transit_gateway_connect_id: build.template(std.get(block, 'transit_gateway_connect_id', null)),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
        transport_attachment_id: build.template(std.get(block, 'transport_attachment_id', null)),
      }),
      id: resource.field('id'),
      protocol: resource.field('protocol'),
      tags: resource.field('tags'),
      transit_gateway_connect_id: resource.field('transit_gateway_connect_id'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      transport_attachment_id: resource.field('transport_attachment_id'),
    },
    ec2_transit_gateway_connect_peer(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_connect_peer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bgp_asn: build.template(std.get(block, 'bgp_asn', null)),
        bgp_peer_address: build.template(std.get(block, 'bgp_peer_address', null)),
        bgp_transit_gateway_addresses: build.template(std.get(block, 'bgp_transit_gateway_addresses', null)),
        id: build.template(std.get(block, 'id', null)),
        inside_cidr_blocks: build.template(std.get(block, 'inside_cidr_blocks', null)),
        peer_address: build.template(std.get(block, 'peer_address', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transit_gateway_address: build.template(std.get(block, 'transit_gateway_address', null)),
        transit_gateway_attachment_id: build.template(std.get(block, 'transit_gateway_attachment_id', null)),
        transit_gateway_connect_peer_id: build.template(std.get(block, 'transit_gateway_connect_peer_id', null)),
      }),
      arn: resource.field('arn'),
      bgp_asn: resource.field('bgp_asn'),
      bgp_peer_address: resource.field('bgp_peer_address'),
      bgp_transit_gateway_addresses: resource.field('bgp_transit_gateway_addresses'),
      id: resource.field('id'),
      inside_cidr_blocks: resource.field('inside_cidr_blocks'),
      peer_address: resource.field('peer_address'),
      tags: resource.field('tags'),
      transit_gateway_address: resource.field('transit_gateway_address'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
      transit_gateway_connect_peer_id: resource.field('transit_gateway_connect_peer_id'),
    },
    ec2_transit_gateway_dx_gateway_attachment(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_dx_gateway_attachment', name),
      _: resource._(block, {
        dx_gateway_id: build.template(std.get(block, 'dx_gateway_id', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
      }),
      dx_gateway_id: resource.field('dx_gateway_id'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      transit_gateway_id: resource.field('transit_gateway_id'),
    },
    ec2_transit_gateway_multicast_domain(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_multicast_domain', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        associations: build.template(std.get(block, 'associations', null)),
        auto_accept_shared_associations: build.template(std.get(block, 'auto_accept_shared_associations', null)),
        id: build.template(std.get(block, 'id', null)),
        igmpv2_support: build.template(std.get(block, 'igmpv2_support', null)),
        members: build.template(std.get(block, 'members', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        sources: build.template(std.get(block, 'sources', null)),
        state: build.template(std.get(block, 'state', null)),
        static_sources_support: build.template(std.get(block, 'static_sources_support', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transit_gateway_attachment_id: build.template(std.get(block, 'transit_gateway_attachment_id', null)),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
        transit_gateway_multicast_domain_id: build.template(std.get(block, 'transit_gateway_multicast_domain_id', null)),
      }),
      arn: resource.field('arn'),
      associations: resource.field('associations'),
      auto_accept_shared_associations: resource.field('auto_accept_shared_associations'),
      id: resource.field('id'),
      igmpv2_support: resource.field('igmpv2_support'),
      members: resource.field('members'),
      owner_id: resource.field('owner_id'),
      sources: resource.field('sources'),
      state: resource.field('state'),
      static_sources_support: resource.field('static_sources_support'),
      tags: resource.field('tags'),
      transit_gateway_attachment_id: resource.field('transit_gateway_attachment_id'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      transit_gateway_multicast_domain_id: resource.field('transit_gateway_multicast_domain_id'),
    },
    ec2_transit_gateway_peering_attachment(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_peering_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        peer_account_id: build.template(std.get(block, 'peer_account_id', null)),
        peer_region: build.template(std.get(block, 'peer_region', null)),
        peer_transit_gateway_id: build.template(std.get(block, 'peer_transit_gateway_id', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
      }),
      id: resource.field('id'),
      peer_account_id: resource.field('peer_account_id'),
      peer_region: resource.field('peer_region'),
      peer_transit_gateway_id: resource.field('peer_transit_gateway_id'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      transit_gateway_id: resource.field('transit_gateway_id'),
    },
    ec2_transit_gateway_peering_attachments(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_peering_attachments', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
    },
    ec2_transit_gateway_route_table(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_route_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        default_association_route_table: build.template(std.get(block, 'default_association_route_table', null)),
        default_propagation_route_table: build.template(std.get(block, 'default_propagation_route_table', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
      }),
      arn: resource.field('arn'),
      default_association_route_table: resource.field('default_association_route_table'),
      default_propagation_route_table: resource.field('default_propagation_route_table'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      transit_gateway_id: resource.field('transit_gateway_id'),
    },
    ec2_transit_gateway_route_table_associations(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_route_table_associations', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      transit_gateway_route_table_id: resource.field('transit_gateway_route_table_id'),
    },
    ec2_transit_gateway_route_table_propagations(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_route_table_propagations', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      transit_gateway_route_table_id: resource.field('transit_gateway_route_table_id'),
    },
    ec2_transit_gateway_route_table_routes(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_route_table_routes', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        routes: build.template(std.get(block, 'routes', null)),
        transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
      }),
      id: resource.field('id'),
      routes: resource.field('routes'),
      transit_gateway_route_table_id: resource.field('transit_gateway_route_table_id'),
    },
    ec2_transit_gateway_route_tables(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_route_tables', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    ec2_transit_gateway_vpc_attachment(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_vpc_attachment', name),
      _: resource._(block, {
        appliance_mode_support: build.template(std.get(block, 'appliance_mode_support', null)),
        dns_support: build.template(std.get(block, 'dns_support', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv6_support: build.template(std.get(block, 'ipv6_support', null)),
        security_group_referencing_support: build.template(std.get(block, 'security_group_referencing_support', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        vpc_owner_id: build.template(std.get(block, 'vpc_owner_id', null)),
      }),
      appliance_mode_support: resource.field('appliance_mode_support'),
      dns_support: resource.field('dns_support'),
      id: resource.field('id'),
      ipv6_support: resource.field('ipv6_support'),
      security_group_referencing_support: resource.field('security_group_referencing_support'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      vpc_id: resource.field('vpc_id'),
      vpc_owner_id: resource.field('vpc_owner_id'),
    },
    ec2_transit_gateway_vpc_attachments(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_vpc_attachments', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
    },
    ec2_transit_gateway_vpn_attachment(name, block): {
      local resource = blockType.resource('aws_ec2_transit_gateway_vpn_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
        vpn_connection_id: build.template(std.get(block, 'vpn_connection_id', null)),
      }),
      id: resource.field('id'),
      tags: resource.field('tags'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      vpn_connection_id: resource.field('vpn_connection_id'),
    },
    ecr_authorization_token(name, block): {
      local resource = blockType.resource('aws_ecr_authorization_token', name),
      _: resource._(block, {
        authorization_token: build.template(std.get(block, 'authorization_token', null)),
        expires_at: build.template(std.get(block, 'expires_at', null)),
        id: build.template(std.get(block, 'id', null)),
        password: build.template(std.get(block, 'password', null)),
        proxy_endpoint: build.template(std.get(block, 'proxy_endpoint', null)),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        user_name: build.template(std.get(block, 'user_name', null)),
      }),
      authorization_token: resource.field('authorization_token'),
      expires_at: resource.field('expires_at'),
      id: resource.field('id'),
      password: resource.field('password'),
      proxy_endpoint: resource.field('proxy_endpoint'),
      registry_id: resource.field('registry_id'),
      user_name: resource.field('user_name'),
    },
    ecr_image(name, block): {
      local resource = blockType.resource('aws_ecr_image', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        image_digest: build.template(std.get(block, 'image_digest', null)),
        image_pushed_at: build.template(std.get(block, 'image_pushed_at', null)),
        image_size_in_bytes: build.template(std.get(block, 'image_size_in_bytes', null)),
        image_tag: build.template(std.get(block, 'image_tag', null)),
        image_tags: build.template(std.get(block, 'image_tags', null)),
        image_uri: build.template(std.get(block, 'image_uri', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        repository_name: build.template(block.repository_name),
      }),
      id: resource.field('id'),
      image_digest: resource.field('image_digest'),
      image_pushed_at: resource.field('image_pushed_at'),
      image_size_in_bytes: resource.field('image_size_in_bytes'),
      image_tag: resource.field('image_tag'),
      image_tags: resource.field('image_tags'),
      image_uri: resource.field('image_uri'),
      most_recent: resource.field('most_recent'),
      registry_id: resource.field('registry_id'),
      repository_name: resource.field('repository_name'),
    },
    ecr_lifecycle_policy_document(name, block): {
      local resource = blockType.resource('aws_ecr_lifecycle_policy_document', name),
      _: resource._(block, {
        json: build.template(std.get(block, 'json', null)),
      }),
      json: resource.field('json'),
    },
    ecr_pull_through_cache_rule(name, block): {
      local resource = blockType.resource('aws_ecr_pull_through_cache_rule', name),
      _: resource._(block, {
        credential_arn: build.template(std.get(block, 'credential_arn', null)),
        ecr_repository_prefix: build.template(block.ecr_repository_prefix),
        id: build.template(std.get(block, 'id', null)),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        upstream_registry_url: build.template(std.get(block, 'upstream_registry_url', null)),
      }),
      credential_arn: resource.field('credential_arn'),
      ecr_repository_prefix: resource.field('ecr_repository_prefix'),
      id: resource.field('id'),
      registry_id: resource.field('registry_id'),
      upstream_registry_url: resource.field('upstream_registry_url'),
    },
    ecr_repositories(name, block): {
      local resource = blockType.resource('aws_ecr_repositories', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
      }),
      id: resource.field('id'),
      names: resource.field('names'),
    },
    ecr_repository(name, block): {
      local resource = blockType.resource('aws_ecr_repository', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        encryption_configuration: build.template(std.get(block, 'encryption_configuration', null)),
        id: build.template(std.get(block, 'id', null)),
        image_scanning_configuration: build.template(std.get(block, 'image_scanning_configuration', null)),
        image_tag_mutability: build.template(std.get(block, 'image_tag_mutability', null)),
        most_recent_image_tags: build.template(std.get(block, 'most_recent_image_tags', null)),
        name: build.template(block.name),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        repository_url: build.template(std.get(block, 'repository_url', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      encryption_configuration: resource.field('encryption_configuration'),
      id: resource.field('id'),
      image_scanning_configuration: resource.field('image_scanning_configuration'),
      image_tag_mutability: resource.field('image_tag_mutability'),
      most_recent_image_tags: resource.field('most_recent_image_tags'),
      name: resource.field('name'),
      registry_id: resource.field('registry_id'),
      repository_url: resource.field('repository_url'),
      tags: resource.field('tags'),
    },
    ecr_repository_creation_template(name, block): {
      local resource = blockType.resource('aws_ecr_repository_creation_template', name),
      _: resource._(block, {
        applied_for: build.template(std.get(block, 'applied_for', null)),
        custom_role_arn: build.template(std.get(block, 'custom_role_arn', null)),
        description: build.template(std.get(block, 'description', null)),
        encryption_configuration: build.template(std.get(block, 'encryption_configuration', null)),
        id: build.template(std.get(block, 'id', null)),
        image_tag_mutability: build.template(std.get(block, 'image_tag_mutability', null)),
        lifecycle_policy: build.template(std.get(block, 'lifecycle_policy', null)),
        prefix: build.template(block.prefix),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        repository_policy: build.template(std.get(block, 'repository_policy', null)),
        resource_tags: build.template(std.get(block, 'resource_tags', null)),
      }),
      applied_for: resource.field('applied_for'),
      custom_role_arn: resource.field('custom_role_arn'),
      description: resource.field('description'),
      encryption_configuration: resource.field('encryption_configuration'),
      id: resource.field('id'),
      image_tag_mutability: resource.field('image_tag_mutability'),
      lifecycle_policy: resource.field('lifecycle_policy'),
      prefix: resource.field('prefix'),
      registry_id: resource.field('registry_id'),
      repository_policy: resource.field('repository_policy'),
      resource_tags: resource.field('resource_tags'),
    },
    ecrpublic_authorization_token(name, block): {
      local resource = blockType.resource('aws_ecrpublic_authorization_token', name),
      _: resource._(block, {
        authorization_token: build.template(std.get(block, 'authorization_token', null)),
        expires_at: build.template(std.get(block, 'expires_at', null)),
        id: build.template(std.get(block, 'id', null)),
        password: build.template(std.get(block, 'password', null)),
        user_name: build.template(std.get(block, 'user_name', null)),
      }),
      authorization_token: resource.field('authorization_token'),
      expires_at: resource.field('expires_at'),
      id: resource.field('id'),
      password: resource.field('password'),
      user_name: resource.field('user_name'),
    },
    ecs_cluster(name, block): {
      local resource = blockType.resource('aws_ecs_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster_name: build.template(block.cluster_name),
        id: build.template(std.get(block, 'id', null)),
        pending_tasks_count: build.template(std.get(block, 'pending_tasks_count', null)),
        registered_container_instances_count: build.template(std.get(block, 'registered_container_instances_count', null)),
        running_tasks_count: build.template(std.get(block, 'running_tasks_count', null)),
        service_connect_defaults: build.template(std.get(block, 'service_connect_defaults', null)),
        setting: build.template(std.get(block, 'setting', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      cluster_name: resource.field('cluster_name'),
      id: resource.field('id'),
      pending_tasks_count: resource.field('pending_tasks_count'),
      registered_container_instances_count: resource.field('registered_container_instances_count'),
      running_tasks_count: resource.field('running_tasks_count'),
      service_connect_defaults: resource.field('service_connect_defaults'),
      setting: resource.field('setting'),
      status: resource.field('status'),
      tags: resource.field('tags'),
    },
    ecs_container_definition(name, block): {
      local resource = blockType.resource('aws_ecs_container_definition', name),
      _: resource._(block, {
        container_name: build.template(block.container_name),
        cpu: build.template(std.get(block, 'cpu', null)),
        disable_networking: build.template(std.get(block, 'disable_networking', null)),
        docker_labels: build.template(std.get(block, 'docker_labels', null)),
        environment: build.template(std.get(block, 'environment', null)),
        id: build.template(std.get(block, 'id', null)),
        image: build.template(std.get(block, 'image', null)),
        image_digest: build.template(std.get(block, 'image_digest', null)),
        memory: build.template(std.get(block, 'memory', null)),
        memory_reservation: build.template(std.get(block, 'memory_reservation', null)),
        task_definition: build.template(block.task_definition),
      }),
      container_name: resource.field('container_name'),
      cpu: resource.field('cpu'),
      disable_networking: resource.field('disable_networking'),
      docker_labels: resource.field('docker_labels'),
      environment: resource.field('environment'),
      id: resource.field('id'),
      image: resource.field('image'),
      image_digest: resource.field('image_digest'),
      memory: resource.field('memory'),
      memory_reservation: resource.field('memory_reservation'),
      task_definition: resource.field('task_definition'),
    },
    ecs_service(name, block): {
      local resource = blockType.resource('aws_ecs_service', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster_arn: build.template(block.cluster_arn),
        desired_count: build.template(std.get(block, 'desired_count', null)),
        id: build.template(std.get(block, 'id', null)),
        launch_type: build.template(std.get(block, 'launch_type', null)),
        scheduling_strategy: build.template(std.get(block, 'scheduling_strategy', null)),
        service_name: build.template(block.service_name),
        tags: build.template(std.get(block, 'tags', null)),
        task_definition: build.template(std.get(block, 'task_definition', null)),
      }),
      arn: resource.field('arn'),
      cluster_arn: resource.field('cluster_arn'),
      desired_count: resource.field('desired_count'),
      id: resource.field('id'),
      launch_type: resource.field('launch_type'),
      scheduling_strategy: resource.field('scheduling_strategy'),
      service_name: resource.field('service_name'),
      tags: resource.field('tags'),
      task_definition: resource.field('task_definition'),
    },
    ecs_task_definition(name, block): {
      local resource = blockType.resource('aws_ecs_task_definition', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        arn_without_revision: build.template(std.get(block, 'arn_without_revision', null)),
        execution_role_arn: build.template(std.get(block, 'execution_role_arn', null)),
        family: build.template(std.get(block, 'family', null)),
        id: build.template(std.get(block, 'id', null)),
        network_mode: build.template(std.get(block, 'network_mode', null)),
        revision: build.template(std.get(block, 'revision', null)),
        status: build.template(std.get(block, 'status', null)),
        task_definition: build.template(block.task_definition),
        task_role_arn: build.template(std.get(block, 'task_role_arn', null)),
      }),
      arn: resource.field('arn'),
      arn_without_revision: resource.field('arn_without_revision'),
      execution_role_arn: resource.field('execution_role_arn'),
      family: resource.field('family'),
      id: resource.field('id'),
      network_mode: resource.field('network_mode'),
      revision: resource.field('revision'),
      status: resource.field('status'),
      task_definition: resource.field('task_definition'),
      task_role_arn: resource.field('task_role_arn'),
    },
    ecs_task_execution(name, block): {
      local resource = blockType.resource('aws_ecs_task_execution', name),
      _: resource._(block, {
        client_token: build.template(std.get(block, 'client_token', null)),
        cluster: build.template(block.cluster),
        desired_count: build.template(std.get(block, 'desired_count', null)),
        enable_ecs_managed_tags: build.template(std.get(block, 'enable_ecs_managed_tags', null)),
        enable_execute_command: build.template(std.get(block, 'enable_execute_command', null)),
        group: build.template(std.get(block, 'group', null)),
        id: build.template(std.get(block, 'id', null)),
        launch_type: build.template(std.get(block, 'launch_type', null)),
        platform_version: build.template(std.get(block, 'platform_version', null)),
        propagate_tags: build.template(std.get(block, 'propagate_tags', null)),
        reference_id: build.template(std.get(block, 'reference_id', null)),
        started_by: build.template(std.get(block, 'started_by', null)),
        tags: build.template(std.get(block, 'tags', null)),
        task_arns: build.template(std.get(block, 'task_arns', null)),
        task_definition: build.template(block.task_definition),
      }),
      client_token: resource.field('client_token'),
      cluster: resource.field('cluster'),
      desired_count: resource.field('desired_count'),
      enable_ecs_managed_tags: resource.field('enable_ecs_managed_tags'),
      enable_execute_command: resource.field('enable_execute_command'),
      group: resource.field('group'),
      id: resource.field('id'),
      launch_type: resource.field('launch_type'),
      platform_version: resource.field('platform_version'),
      propagate_tags: resource.field('propagate_tags'),
      reference_id: resource.field('reference_id'),
      started_by: resource.field('started_by'),
      tags: resource.field('tags'),
      task_arns: resource.field('task_arns'),
      task_definition: resource.field('task_definition'),
    },
    efs_access_point(name, block): {
      local resource = blockType.resource('aws_efs_access_point', name),
      _: resource._(block, {
        access_point_id: build.template(block.access_point_id),
        arn: build.template(std.get(block, 'arn', null)),
        file_system_arn: build.template(std.get(block, 'file_system_arn', null)),
        file_system_id: build.template(std.get(block, 'file_system_id', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        posix_user: build.template(std.get(block, 'posix_user', null)),
        root_directory: build.template(std.get(block, 'root_directory', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      access_point_id: resource.field('access_point_id'),
      arn: resource.field('arn'),
      file_system_arn: resource.field('file_system_arn'),
      file_system_id: resource.field('file_system_id'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      posix_user: resource.field('posix_user'),
      root_directory: resource.field('root_directory'),
      tags: resource.field('tags'),
    },
    efs_access_points(name, block): {
      local resource = blockType.resource('aws_efs_access_points', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        file_system_id: build.template(block.file_system_id),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
      }),
      arns: resource.field('arns'),
      file_system_id: resource.field('file_system_id'),
      id: resource.field('id'),
      ids: resource.field('ids'),
    },
    efs_file_system(name, block): {
      local resource = blockType.resource('aws_efs_file_system', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone_id: build.template(std.get(block, 'availability_zone_id', null)),
        availability_zone_name: build.template(std.get(block, 'availability_zone_name', null)),
        creation_token: build.template(std.get(block, 'creation_token', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        file_system_id: build.template(std.get(block, 'file_system_id', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        lifecycle_policy: build.template(std.get(block, 'lifecycle_policy', null)),
        name: build.template(std.get(block, 'name', null)),
        performance_mode: build.template(std.get(block, 'performance_mode', null)),
        protection: build.template(std.get(block, 'protection', null)),
        provisioned_throughput_in_mibps: build.template(std.get(block, 'provisioned_throughput_in_mibps', null)),
        size_in_bytes: build.template(std.get(block, 'size_in_bytes', null)),
        tags: build.template(std.get(block, 'tags', null)),
        throughput_mode: build.template(std.get(block, 'throughput_mode', null)),
      }),
      arn: resource.field('arn'),
      availability_zone_id: resource.field('availability_zone_id'),
      availability_zone_name: resource.field('availability_zone_name'),
      creation_token: resource.field('creation_token'),
      dns_name: resource.field('dns_name'),
      encrypted: resource.field('encrypted'),
      file_system_id: resource.field('file_system_id'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      lifecycle_policy: resource.field('lifecycle_policy'),
      name: resource.field('name'),
      performance_mode: resource.field('performance_mode'),
      protection: resource.field('protection'),
      provisioned_throughput_in_mibps: resource.field('provisioned_throughput_in_mibps'),
      size_in_bytes: resource.field('size_in_bytes'),
      tags: resource.field('tags'),
      throughput_mode: resource.field('throughput_mode'),
    },
    efs_mount_target(name, block): {
      local resource = blockType.resource('aws_efs_mount_target', name),
      _: resource._(block, {
        access_point_id: build.template(std.get(block, 'access_point_id', null)),
        availability_zone_id: build.template(std.get(block, 'availability_zone_id', null)),
        availability_zone_name: build.template(std.get(block, 'availability_zone_name', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        file_system_arn: build.template(std.get(block, 'file_system_arn', null)),
        file_system_id: build.template(std.get(block, 'file_system_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        mount_target_dns_name: build.template(std.get(block, 'mount_target_dns_name', null)),
        mount_target_id: build.template(std.get(block, 'mount_target_id', null)),
        network_interface_id: build.template(std.get(block, 'network_interface_id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
      }),
      access_point_id: resource.field('access_point_id'),
      availability_zone_id: resource.field('availability_zone_id'),
      availability_zone_name: resource.field('availability_zone_name'),
      dns_name: resource.field('dns_name'),
      file_system_arn: resource.field('file_system_arn'),
      file_system_id: resource.field('file_system_id'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      mount_target_dns_name: resource.field('mount_target_dns_name'),
      mount_target_id: resource.field('mount_target_id'),
      network_interface_id: resource.field('network_interface_id'),
      owner_id: resource.field('owner_id'),
      security_groups: resource.field('security_groups'),
      subnet_id: resource.field('subnet_id'),
    },
    eip(name, block): {
      local resource = blockType.resource('aws_eip', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        association_id: build.template(std.get(block, 'association_id', null)),
        carrier_ip: build.template(std.get(block, 'carrier_ip', null)),
        customer_owned_ip: build.template(std.get(block, 'customer_owned_ip', null)),
        customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null)),
        domain: build.template(std.get(block, 'domain', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(std.get(block, 'instance_id', null)),
        ipam_pool_id: build.template(std.get(block, 'ipam_pool_id', null)),
        network_interface_id: build.template(std.get(block, 'network_interface_id', null)),
        network_interface_owner_id: build.template(std.get(block, 'network_interface_owner_id', null)),
        private_dns: build.template(std.get(block, 'private_dns', null)),
        private_ip: build.template(std.get(block, 'private_ip', null)),
        ptr_record: build.template(std.get(block, 'ptr_record', null)),
        public_dns: build.template(std.get(block, 'public_dns', null)),
        public_ip: build.template(std.get(block, 'public_ip', null)),
        public_ipv4_pool: build.template(std.get(block, 'public_ipv4_pool', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      association_id: resource.field('association_id'),
      carrier_ip: resource.field('carrier_ip'),
      customer_owned_ip: resource.field('customer_owned_ip'),
      customer_owned_ipv4_pool: resource.field('customer_owned_ipv4_pool'),
      domain: resource.field('domain'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      ipam_pool_id: resource.field('ipam_pool_id'),
      network_interface_id: resource.field('network_interface_id'),
      network_interface_owner_id: resource.field('network_interface_owner_id'),
      private_dns: resource.field('private_dns'),
      private_ip: resource.field('private_ip'),
      ptr_record: resource.field('ptr_record'),
      public_dns: resource.field('public_dns'),
      public_ip: resource.field('public_ip'),
      public_ipv4_pool: resource.field('public_ipv4_pool'),
      tags: resource.field('tags'),
    },
    eips(name, block): {
      local resource = blockType.resource('aws_eips', name),
      _: resource._(block, {
        allocation_ids: build.template(std.get(block, 'allocation_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        public_ips: build.template(std.get(block, 'public_ips', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      allocation_ids: resource.field('allocation_ids'),
      id: resource.field('id'),
      public_ips: resource.field('public_ips'),
      tags: resource.field('tags'),
    },
    eks_access_entry(name, block): {
      local resource = blockType.resource('aws_eks_access_entry', name),
      _: resource._(block, {
        access_entry_arn: build.template(std.get(block, 'access_entry_arn', null)),
        cluster_name: build.template(block.cluster_name),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        kubernetes_groups: build.template(std.get(block, 'kubernetes_groups', null)),
        modified_at: build.template(std.get(block, 'modified_at', null)),
        principal_arn: build.template(block.principal_arn),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
        type: build.template(std.get(block, 'type', null)),
        user_name: build.template(std.get(block, 'user_name', null)),
      }),
      access_entry_arn: resource.field('access_entry_arn'),
      cluster_name: resource.field('cluster_name'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      kubernetes_groups: resource.field('kubernetes_groups'),
      modified_at: resource.field('modified_at'),
      principal_arn: resource.field('principal_arn'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
      type: resource.field('type'),
      user_name: resource.field('user_name'),
    },
    eks_addon(name, block): {
      local resource = blockType.resource('aws_eks_addon', name),
      _: resource._(block, {
        addon_name: build.template(block.addon_name),
        addon_version: build.template(std.get(block, 'addon_version', null)),
        arn: build.template(std.get(block, 'arn', null)),
        cluster_name: build.template(block.cluster_name),
        configuration_values: build.template(std.get(block, 'configuration_values', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        modified_at: build.template(std.get(block, 'modified_at', null)),
        pod_identity_association: build.template(std.get(block, 'pod_identity_association', null)),
        service_account_role_arn: build.template(std.get(block, 'service_account_role_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      addon_name: resource.field('addon_name'),
      addon_version: resource.field('addon_version'),
      arn: resource.field('arn'),
      cluster_name: resource.field('cluster_name'),
      configuration_values: resource.field('configuration_values'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      modified_at: resource.field('modified_at'),
      pod_identity_association: resource.field('pod_identity_association'),
      service_account_role_arn: resource.field('service_account_role_arn'),
      tags: resource.field('tags'),
    },
    eks_addon_version(name, block): {
      local resource = blockType.resource('aws_eks_addon_version', name),
      _: resource._(block, {
        addon_name: build.template(block.addon_name),
        id: build.template(std.get(block, 'id', null)),
        kubernetes_version: build.template(block.kubernetes_version),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      addon_name: resource.field('addon_name'),
      id: resource.field('id'),
      kubernetes_version: resource.field('kubernetes_version'),
      most_recent: resource.field('most_recent'),
      version: resource.field('version'),
    },
    eks_cluster(name, block): {
      local resource = blockType.resource('aws_eks_cluster', name),
      _: resource._(block, {
        access_config: build.template(std.get(block, 'access_config', null)),
        arn: build.template(std.get(block, 'arn', null)),
        certificate_authority: build.template(std.get(block, 'certificate_authority', null)),
        cluster_id: build.template(std.get(block, 'cluster_id', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        enabled_cluster_log_types: build.template(std.get(block, 'enabled_cluster_log_types', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        kubernetes_network_config: build.template(std.get(block, 'kubernetes_network_config', null)),
        name: build.template(block.name),
        outpost_config: build.template(std.get(block, 'outpost_config', null)),
        platform_version: build.template(std.get(block, 'platform_version', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        upgrade_policy: build.template(std.get(block, 'upgrade_policy', null)),
        version: build.template(std.get(block, 'version', null)),
        vpc_config: build.template(std.get(block, 'vpc_config', null)),
        zonal_shift_config: build.template(std.get(block, 'zonal_shift_config', null)),
      }),
      access_config: resource.field('access_config'),
      arn: resource.field('arn'),
      certificate_authority: resource.field('certificate_authority'),
      cluster_id: resource.field('cluster_id'),
      created_at: resource.field('created_at'),
      enabled_cluster_log_types: resource.field('enabled_cluster_log_types'),
      endpoint: resource.field('endpoint'),
      id: resource.field('id'),
      identity: resource.field('identity'),
      kubernetes_network_config: resource.field('kubernetes_network_config'),
      name: resource.field('name'),
      outpost_config: resource.field('outpost_config'),
      platform_version: resource.field('platform_version'),
      role_arn: resource.field('role_arn'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      upgrade_policy: resource.field('upgrade_policy'),
      version: resource.field('version'),
      vpc_config: resource.field('vpc_config'),
      zonal_shift_config: resource.field('zonal_shift_config'),
    },
    eks_cluster_auth(name, block): {
      local resource = blockType.resource('aws_eks_cluster_auth', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        token: build.template(std.get(block, 'token', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      token: resource.field('token'),
    },
    eks_clusters(name, block): {
      local resource = blockType.resource('aws_eks_clusters', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
      }),
      id: resource.field('id'),
      names: resource.field('names'),
    },
    eks_node_group(name, block): {
      local resource = blockType.resource('aws_eks_node_group', name),
      _: resource._(block, {
        ami_type: build.template(std.get(block, 'ami_type', null)),
        arn: build.template(std.get(block, 'arn', null)),
        capacity_type: build.template(std.get(block, 'capacity_type', null)),
        cluster_name: build.template(block.cluster_name),
        disk_size: build.template(std.get(block, 'disk_size', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_types: build.template(std.get(block, 'instance_types', null)),
        labels: build.template(std.get(block, 'labels', null)),
        launch_template: build.template(std.get(block, 'launch_template', null)),
        node_group_name: build.template(block.node_group_name),
        node_role_arn: build.template(std.get(block, 'node_role_arn', null)),
        release_version: build.template(std.get(block, 'release_version', null)),
        remote_access: build.template(std.get(block, 'remote_access', null)),
        resources: build.template(std.get(block, 'resources', null)),
        scaling_config: build.template(std.get(block, 'scaling_config', null)),
        status: build.template(std.get(block, 'status', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        taints: build.template(std.get(block, 'taints', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      ami_type: resource.field('ami_type'),
      arn: resource.field('arn'),
      capacity_type: resource.field('capacity_type'),
      cluster_name: resource.field('cluster_name'),
      disk_size: resource.field('disk_size'),
      id: resource.field('id'),
      instance_types: resource.field('instance_types'),
      labels: resource.field('labels'),
      launch_template: resource.field('launch_template'),
      node_group_name: resource.field('node_group_name'),
      node_role_arn: resource.field('node_role_arn'),
      release_version: resource.field('release_version'),
      remote_access: resource.field('remote_access'),
      resources: resource.field('resources'),
      scaling_config: resource.field('scaling_config'),
      status: resource.field('status'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      taints: resource.field('taints'),
      version: resource.field('version'),
    },
    eks_node_groups(name, block): {
      local resource = blockType.resource('aws_eks_node_groups', name),
      _: resource._(block, {
        cluster_name: build.template(block.cluster_name),
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
      }),
      cluster_name: resource.field('cluster_name'),
      id: resource.field('id'),
      names: resource.field('names'),
    },
    elastic_beanstalk_application(name, block): {
      local resource = blockType.resource('aws_elastic_beanstalk_application', name),
      _: resource._(block, {
        appversion_lifecycle: build.template(std.get(block, 'appversion_lifecycle', null)),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      appversion_lifecycle: resource.field('appversion_lifecycle'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    elastic_beanstalk_hosted_zone(name, block): {
      local resource = blockType.resource('aws_elastic_beanstalk_hosted_zone', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      id: resource.field('id'),
      region: resource.field('region'),
    },
    elastic_beanstalk_solution_stack(name, block): {
      local resource = blockType.resource('aws_elastic_beanstalk_solution_stack', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        name: build.template(std.get(block, 'name', null)),
        name_regex: build.template(block.name_regex),
      }),
      id: resource.field('id'),
      most_recent: resource.field('most_recent'),
      name: resource.field('name'),
      name_regex: resource.field('name_regex'),
    },
    elasticache_cluster(name, block): {
      local resource = blockType.resource('aws_elasticache_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        cache_nodes: build.template(std.get(block, 'cache_nodes', null)),
        cluster_address: build.template(std.get(block, 'cluster_address', null)),
        cluster_id: build.template(block.cluster_id),
        configuration_endpoint: build.template(std.get(block, 'configuration_endpoint', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_discovery: build.template(std.get(block, 'ip_discovery', null)),
        log_delivery_configuration: build.template(std.get(block, 'log_delivery_configuration', null)),
        maintenance_window: build.template(std.get(block, 'maintenance_window', null)),
        network_type: build.template(std.get(block, 'network_type', null)),
        node_type: build.template(std.get(block, 'node_type', null)),
        notification_topic_arn: build.template(std.get(block, 'notification_topic_arn', null)),
        num_cache_nodes: build.template(std.get(block, 'num_cache_nodes', null)),
        parameter_group_name: build.template(std.get(block, 'parameter_group_name', null)),
        port: build.template(std.get(block, 'port', null)),
        preferred_outpost_arn: build.template(std.get(block, 'preferred_outpost_arn', null)),
        replication_group_id: build.template(std.get(block, 'replication_group_id', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        snapshot_retention_limit: build.template(std.get(block, 'snapshot_retention_limit', null)),
        snapshot_window: build.template(std.get(block, 'snapshot_window', null)),
        subnet_group_name: build.template(std.get(block, 'subnet_group_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      cache_nodes: resource.field('cache_nodes'),
      cluster_address: resource.field('cluster_address'),
      cluster_id: resource.field('cluster_id'),
      configuration_endpoint: resource.field('configuration_endpoint'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      ip_discovery: resource.field('ip_discovery'),
      log_delivery_configuration: resource.field('log_delivery_configuration'),
      maintenance_window: resource.field('maintenance_window'),
      network_type: resource.field('network_type'),
      node_type: resource.field('node_type'),
      notification_topic_arn: resource.field('notification_topic_arn'),
      num_cache_nodes: resource.field('num_cache_nodes'),
      parameter_group_name: resource.field('parameter_group_name'),
      port: resource.field('port'),
      preferred_outpost_arn: resource.field('preferred_outpost_arn'),
      replication_group_id: resource.field('replication_group_id'),
      security_group_ids: resource.field('security_group_ids'),
      snapshot_retention_limit: resource.field('snapshot_retention_limit'),
      snapshot_window: resource.field('snapshot_window'),
      subnet_group_name: resource.field('subnet_group_name'),
      tags: resource.field('tags'),
    },
    elasticache_replication_group(name, block): {
      local resource = blockType.resource('aws_elasticache_replication_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auth_token_enabled: build.template(std.get(block, 'auth_token_enabled', null)),
        automatic_failover_enabled: build.template(std.get(block, 'automatic_failover_enabled', null)),
        cluster_mode: build.template(std.get(block, 'cluster_mode', null)),
        configuration_endpoint_address: build.template(std.get(block, 'configuration_endpoint_address', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        log_delivery_configuration: build.template(std.get(block, 'log_delivery_configuration', null)),
        member_clusters: build.template(std.get(block, 'member_clusters', null)),
        multi_az_enabled: build.template(std.get(block, 'multi_az_enabled', null)),
        node_type: build.template(std.get(block, 'node_type', null)),
        num_cache_clusters: build.template(std.get(block, 'num_cache_clusters', null)),
        num_node_groups: build.template(std.get(block, 'num_node_groups', null)),
        port: build.template(std.get(block, 'port', null)),
        primary_endpoint_address: build.template(std.get(block, 'primary_endpoint_address', null)),
        reader_endpoint_address: build.template(std.get(block, 'reader_endpoint_address', null)),
        replicas_per_node_group: build.template(std.get(block, 'replicas_per_node_group', null)),
        replication_group_id: build.template(block.replication_group_id),
        snapshot_retention_limit: build.template(std.get(block, 'snapshot_retention_limit', null)),
        snapshot_window: build.template(std.get(block, 'snapshot_window', null)),
      }),
      arn: resource.field('arn'),
      auth_token_enabled: resource.field('auth_token_enabled'),
      automatic_failover_enabled: resource.field('automatic_failover_enabled'),
      cluster_mode: resource.field('cluster_mode'),
      configuration_endpoint_address: resource.field('configuration_endpoint_address'),
      description: resource.field('description'),
      id: resource.field('id'),
      log_delivery_configuration: resource.field('log_delivery_configuration'),
      member_clusters: resource.field('member_clusters'),
      multi_az_enabled: resource.field('multi_az_enabled'),
      node_type: resource.field('node_type'),
      num_cache_clusters: resource.field('num_cache_clusters'),
      num_node_groups: resource.field('num_node_groups'),
      port: resource.field('port'),
      primary_endpoint_address: resource.field('primary_endpoint_address'),
      reader_endpoint_address: resource.field('reader_endpoint_address'),
      replicas_per_node_group: resource.field('replicas_per_node_group'),
      replication_group_id: resource.field('replication_group_id'),
      snapshot_retention_limit: resource.field('snapshot_retention_limit'),
      snapshot_window: resource.field('snapshot_window'),
    },
    elasticache_reserved_cache_node_offering(name, block): {
      local resource = blockType.resource('aws_elasticache_reserved_cache_node_offering', name),
      _: resource._(block, {
        cache_node_type: build.template(block.cache_node_type),
        duration: build.template(block.duration),
        fixed_price: build.template(std.get(block, 'fixed_price', null)),
        offering_id: build.template(std.get(block, 'offering_id', null)),
        offering_type: build.template(block.offering_type),
        product_description: build.template(block.product_description),
      }),
      cache_node_type: resource.field('cache_node_type'),
      duration: resource.field('duration'),
      fixed_price: resource.field('fixed_price'),
      offering_id: resource.field('offering_id'),
      offering_type: resource.field('offering_type'),
      product_description: resource.field('product_description'),
    },
    elasticache_serverless_cache(name, block): {
      local resource = blockType.resource('aws_elasticache_serverless_cache', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cache_usage_limits: build.template(std.get(block, 'cache_usage_limits', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        daily_snapshot_time: build.template(std.get(block, 'daily_snapshot_time', null)),
        description: build.template(std.get(block, 'description', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        engine: build.template(std.get(block, 'engine', null)),
        full_engine_version: build.template(std.get(block, 'full_engine_version', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        major_engine_version: build.template(std.get(block, 'major_engine_version', null)),
        name: build.template(block.name),
        reader_endpoint: build.template(std.get(block, 'reader_endpoint', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        snapshot_retention_limit: build.template(std.get(block, 'snapshot_retention_limit', null)),
        status: build.template(std.get(block, 'status', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        user_group_id: build.template(std.get(block, 'user_group_id', null)),
      }),
      arn: resource.field('arn'),
      cache_usage_limits: resource.field('cache_usage_limits'),
      create_time: resource.field('create_time'),
      daily_snapshot_time: resource.field('daily_snapshot_time'),
      description: resource.field('description'),
      endpoint: resource.field('endpoint'),
      engine: resource.field('engine'),
      full_engine_version: resource.field('full_engine_version'),
      kms_key_id: resource.field('kms_key_id'),
      major_engine_version: resource.field('major_engine_version'),
      name: resource.field('name'),
      reader_endpoint: resource.field('reader_endpoint'),
      security_group_ids: resource.field('security_group_ids'),
      snapshot_retention_limit: resource.field('snapshot_retention_limit'),
      status: resource.field('status'),
      subnet_ids: resource.field('subnet_ids'),
      user_group_id: resource.field('user_group_id'),
    },
    elasticache_subnet_group(name, block): {
      local resource = blockType.resource('aws_elasticache_subnet_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    elasticache_user(name, block): {
      local resource = blockType.resource('aws_elasticache_user', name),
      _: resource._(block, {
        access_string: build.template(std.get(block, 'access_string', null)),
        engine: build.template(std.get(block, 'engine', null)),
        id: build.template(std.get(block, 'id', null)),
        no_password_required: build.template(std.get(block, 'no_password_required', null)),
        passwords: build.template(std.get(block, 'passwords', null)),
        user_id: build.template(block.user_id),
        user_name: build.template(std.get(block, 'user_name', null)),
      }),
      access_string: resource.field('access_string'),
      engine: resource.field('engine'),
      id: resource.field('id'),
      no_password_required: resource.field('no_password_required'),
      passwords: resource.field('passwords'),
      user_id: resource.field('user_id'),
      user_name: resource.field('user_name'),
    },
    elasticsearch_domain(name, block): {
      local resource = blockType.resource('aws_elasticsearch_domain', name),
      _: resource._(block, {
        access_policies: build.template(std.get(block, 'access_policies', null)),
        advanced_options: build.template(std.get(block, 'advanced_options', null)),
        advanced_security_options: build.template(std.get(block, 'advanced_security_options', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_tune_options: build.template(std.get(block, 'auto_tune_options', null)),
        cluster_config: build.template(std.get(block, 'cluster_config', null)),
        cognito_options: build.template(std.get(block, 'cognito_options', null)),
        created: build.template(std.get(block, 'created', null)),
        deleted: build.template(std.get(block, 'deleted', null)),
        domain_id: build.template(std.get(block, 'domain_id', null)),
        domain_name: build.template(block.domain_name),
        ebs_options: build.template(std.get(block, 'ebs_options', null)),
        elasticsearch_version: build.template(std.get(block, 'elasticsearch_version', null)),
        encryption_at_rest: build.template(std.get(block, 'encryption_at_rest', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        kibana_endpoint: build.template(std.get(block, 'kibana_endpoint', null)),
        log_publishing_options: build.template(std.get(block, 'log_publishing_options', null)),
        node_to_node_encryption: build.template(std.get(block, 'node_to_node_encryption', null)),
        processing: build.template(std.get(block, 'processing', null)),
        snapshot_options: build.template(std.get(block, 'snapshot_options', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_options: build.template(std.get(block, 'vpc_options', null)),
      }),
      access_policies: resource.field('access_policies'),
      advanced_options: resource.field('advanced_options'),
      advanced_security_options: resource.field('advanced_security_options'),
      arn: resource.field('arn'),
      auto_tune_options: resource.field('auto_tune_options'),
      cluster_config: resource.field('cluster_config'),
      cognito_options: resource.field('cognito_options'),
      created: resource.field('created'),
      deleted: resource.field('deleted'),
      domain_id: resource.field('domain_id'),
      domain_name: resource.field('domain_name'),
      ebs_options: resource.field('ebs_options'),
      elasticsearch_version: resource.field('elasticsearch_version'),
      encryption_at_rest: resource.field('encryption_at_rest'),
      endpoint: resource.field('endpoint'),
      id: resource.field('id'),
      kibana_endpoint: resource.field('kibana_endpoint'),
      log_publishing_options: resource.field('log_publishing_options'),
      node_to_node_encryption: resource.field('node_to_node_encryption'),
      processing: resource.field('processing'),
      snapshot_options: resource.field('snapshot_options'),
      tags: resource.field('tags'),
      vpc_options: resource.field('vpc_options'),
    },
    elb(name, block): {
      local resource = blockType.resource('aws_elb', name),
      _: resource._(block, {
        access_logs: build.template(std.get(block, 'access_logs', null)),
        arn: build.template(std.get(block, 'arn', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        connection_draining: build.template(std.get(block, 'connection_draining', null)),
        connection_draining_timeout: build.template(std.get(block, 'connection_draining_timeout', null)),
        cross_zone_load_balancing: build.template(std.get(block, 'cross_zone_load_balancing', null)),
        desync_mitigation_mode: build.template(std.get(block, 'desync_mitigation_mode', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        health_check: build.template(std.get(block, 'health_check', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout: build.template(std.get(block, 'idle_timeout', null)),
        instances: build.template(std.get(block, 'instances', null)),
        internal: build.template(std.get(block, 'internal', null)),
        listener: build.template(std.get(block, 'listener', null)),
        name: build.template(block.name),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        source_security_group: build.template(std.get(block, 'source_security_group', null)),
        source_security_group_id: build.template(std.get(block, 'source_security_group_id', null)),
        subnets: build.template(std.get(block, 'subnets', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zone_id: build.template(std.get(block, 'zone_id', null)),
      }),
      access_logs: resource.field('access_logs'),
      arn: resource.field('arn'),
      availability_zones: resource.field('availability_zones'),
      connection_draining: resource.field('connection_draining'),
      connection_draining_timeout: resource.field('connection_draining_timeout'),
      cross_zone_load_balancing: resource.field('cross_zone_load_balancing'),
      desync_mitigation_mode: resource.field('desync_mitigation_mode'),
      dns_name: resource.field('dns_name'),
      health_check: resource.field('health_check'),
      id: resource.field('id'),
      idle_timeout: resource.field('idle_timeout'),
      instances: resource.field('instances'),
      internal: resource.field('internal'),
      listener: resource.field('listener'),
      name: resource.field('name'),
      security_groups: resource.field('security_groups'),
      source_security_group: resource.field('source_security_group'),
      source_security_group_id: resource.field('source_security_group_id'),
      subnets: resource.field('subnets'),
      tags: resource.field('tags'),
      zone_id: resource.field('zone_id'),
    },
    elb_hosted_zone_id(name, block): {
      local resource = blockType.resource('aws_elb_hosted_zone_id', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      id: resource.field('id'),
      region: resource.field('region'),
    },
    elb_service_account(name, block): {
      local resource = blockType.resource('aws_elb_service_account', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      region: resource.field('region'),
    },
    emr_release_labels(name, block): {
      local resource = blockType.resource('aws_emr_release_labels', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        release_labels: build.template(std.get(block, 'release_labels', null)),
      }),
      id: resource.field('id'),
      release_labels: resource.field('release_labels'),
    },
    emr_supported_instance_types(name, block): {
      local resource = blockType.resource('aws_emr_supported_instance_types', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        release_label: build.template(block.release_label),
      }),
      id: resource.field('id'),
      release_label: resource.field('release_label'),
    },
    emrcontainers_virtual_cluster(name, block): {
      local resource = blockType.resource('aws_emrcontainers_virtual_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        container_provider: build.template(std.get(block, 'container_provider', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_cluster_id: build.template(block.virtual_cluster_id),
      }),
      arn: resource.field('arn'),
      container_provider: resource.field('container_provider'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      name: resource.field('name'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      virtual_cluster_id: resource.field('virtual_cluster_id'),
    },
    fsx_ontap_file_system(name, block): {
      local resource = blockType.resource('aws_fsx_ontap_file_system', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        automatic_backup_retention_days: build.template(std.get(block, 'automatic_backup_retention_days', null)),
        daily_automatic_backup_start_time: build.template(std.get(block, 'daily_automatic_backup_start_time', null)),
        deployment_type: build.template(std.get(block, 'deployment_type', null)),
        disk_iops_configuration: build.template(std.get(block, 'disk_iops_configuration', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        endpoint_ip_address_range: build.template(std.get(block, 'endpoint_ip_address_range', null)),
        endpoints: build.template(std.get(block, 'endpoints', null)),
        ha_pairs: build.template(std.get(block, 'ha_pairs', null)),
        id: build.template(block.id),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        network_interface_ids: build.template(std.get(block, 'network_interface_ids', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        preferred_subnet_id: build.template(std.get(block, 'preferred_subnet_id', null)),
        route_table_ids: build.template(std.get(block, 'route_table_ids', null)),
        storage_capacity: build.template(std.get(block, 'storage_capacity', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        throughput_capacity: build.template(std.get(block, 'throughput_capacity', null)),
        throughput_capacity_per_ha_pair: build.template(std.get(block, 'throughput_capacity_per_ha_pair', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        weekly_maintenance_start_time: build.template(std.get(block, 'weekly_maintenance_start_time', null)),
      }),
      arn: resource.field('arn'),
      automatic_backup_retention_days: resource.field('automatic_backup_retention_days'),
      daily_automatic_backup_start_time: resource.field('daily_automatic_backup_start_time'),
      deployment_type: resource.field('deployment_type'),
      disk_iops_configuration: resource.field('disk_iops_configuration'),
      dns_name: resource.field('dns_name'),
      endpoint_ip_address_range: resource.field('endpoint_ip_address_range'),
      endpoints: resource.field('endpoints'),
      ha_pairs: resource.field('ha_pairs'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      network_interface_ids: resource.field('network_interface_ids'),
      owner_id: resource.field('owner_id'),
      preferred_subnet_id: resource.field('preferred_subnet_id'),
      route_table_ids: resource.field('route_table_ids'),
      storage_capacity: resource.field('storage_capacity'),
      storage_type: resource.field('storage_type'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      throughput_capacity: resource.field('throughput_capacity'),
      throughput_capacity_per_ha_pair: resource.field('throughput_capacity_per_ha_pair'),
      vpc_id: resource.field('vpc_id'),
      weekly_maintenance_start_time: resource.field('weekly_maintenance_start_time'),
    },
    fsx_ontap_storage_virtual_machine(name, block): {
      local resource = blockType.resource('aws_fsx_ontap_storage_virtual_machine', name),
      _: resource._(block, {
        active_directory_configuration: build.template(std.get(block, 'active_directory_configuration', null)),
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        endpoints: build.template(std.get(block, 'endpoints', null)),
        file_system_id: build.template(std.get(block, 'file_system_id', null)),
        id: build.template(std.get(block, 'id', null)),
        lifecycle_status: build.template(std.get(block, 'lifecycle_status', null)),
        lifecycle_transition_reason: build.template(std.get(block, 'lifecycle_transition_reason', null)),
        name: build.template(std.get(block, 'name', null)),
        subtype: build.template(std.get(block, 'subtype', null)),
        tags: build.template(std.get(block, 'tags', null)),
        uuid: build.template(std.get(block, 'uuid', null)),
      }),
      active_directory_configuration: resource.field('active_directory_configuration'),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      endpoints: resource.field('endpoints'),
      file_system_id: resource.field('file_system_id'),
      id: resource.field('id'),
      lifecycle_status: resource.field('lifecycle_status'),
      lifecycle_transition_reason: resource.field('lifecycle_transition_reason'),
      name: resource.field('name'),
      subtype: resource.field('subtype'),
      tags: resource.field('tags'),
      uuid: resource.field('uuid'),
    },
    fsx_ontap_storage_virtual_machines(name, block): {
      local resource = blockType.resource('aws_fsx_ontap_storage_virtual_machines', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
    },
    fsx_openzfs_snapshot(name, block): {
      local resource = blockType.resource('aws_fsx_openzfs_snapshot', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        id: build.template(std.get(block, 'id', null)),
        most_recent: build.template(std.get(block, 'most_recent', null)),
        name: build.template(std.get(block, 'name', null)),
        snapshot_id: build.template(std.get(block, 'snapshot_id', null)),
        snapshot_ids: build.template(std.get(block, 'snapshot_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        volume_id: build.template(std.get(block, 'volume_id', null)),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      id: resource.field('id'),
      most_recent: resource.field('most_recent'),
      name: resource.field('name'),
      snapshot_id: resource.field('snapshot_id'),
      snapshot_ids: resource.field('snapshot_ids'),
      tags: resource.field('tags'),
      volume_id: resource.field('volume_id'),
    },
    fsx_windows_file_system(name, block): {
      local resource = blockType.resource('aws_fsx_windows_file_system', name),
      _: resource._(block, {
        active_directory_id: build.template(std.get(block, 'active_directory_id', null)),
        aliases: build.template(std.get(block, 'aliases', null)),
        arn: build.template(std.get(block, 'arn', null)),
        audit_log_configuration: build.template(std.get(block, 'audit_log_configuration', null)),
        automatic_backup_retention_days: build.template(std.get(block, 'automatic_backup_retention_days', null)),
        backup_id: build.template(std.get(block, 'backup_id', null)),
        copy_tags_to_backups: build.template(std.get(block, 'copy_tags_to_backups', null)),
        daily_automatic_backup_start_time: build.template(std.get(block, 'daily_automatic_backup_start_time', null)),
        deployment_type: build.template(std.get(block, 'deployment_type', null)),
        disk_iops_configuration: build.template(std.get(block, 'disk_iops_configuration', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        id: build.template(block.id),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        network_interface_ids: build.template(std.get(block, 'network_interface_ids', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        preferred_file_server_ip: build.template(std.get(block, 'preferred_file_server_ip', null)),
        preferred_subnet_id: build.template(std.get(block, 'preferred_subnet_id', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        skip_final_backup: build.template(std.get(block, 'skip_final_backup', null)),
        storage_capacity: build.template(std.get(block, 'storage_capacity', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        throughput_capacity: build.template(std.get(block, 'throughput_capacity', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        weekly_maintenance_start_time: build.template(std.get(block, 'weekly_maintenance_start_time', null)),
      }),
      active_directory_id: resource.field('active_directory_id'),
      aliases: resource.field('aliases'),
      arn: resource.field('arn'),
      audit_log_configuration: resource.field('audit_log_configuration'),
      automatic_backup_retention_days: resource.field('automatic_backup_retention_days'),
      backup_id: resource.field('backup_id'),
      copy_tags_to_backups: resource.field('copy_tags_to_backups'),
      daily_automatic_backup_start_time: resource.field('daily_automatic_backup_start_time'),
      deployment_type: resource.field('deployment_type'),
      disk_iops_configuration: resource.field('disk_iops_configuration'),
      dns_name: resource.field('dns_name'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      network_interface_ids: resource.field('network_interface_ids'),
      owner_id: resource.field('owner_id'),
      preferred_file_server_ip: resource.field('preferred_file_server_ip'),
      preferred_subnet_id: resource.field('preferred_subnet_id'),
      security_group_ids: resource.field('security_group_ids'),
      skip_final_backup: resource.field('skip_final_backup'),
      storage_capacity: resource.field('storage_capacity'),
      storage_type: resource.field('storage_type'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      throughput_capacity: resource.field('throughput_capacity'),
      vpc_id: resource.field('vpc_id'),
      weekly_maintenance_start_time: resource.field('weekly_maintenance_start_time'),
    },
    globalaccelerator_accelerator(name, block): {
      local resource = blockType.resource('aws_globalaccelerator_accelerator', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attributes: build.template(std.get(block, 'attributes', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        dual_stack_dns_name: build.template(std.get(block, 'dual_stack_dns_name', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        ip_sets: build.template(std.get(block, 'ip_sets', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      attributes: resource.field('attributes'),
      dns_name: resource.field('dns_name'),
      dual_stack_dns_name: resource.field('dual_stack_dns_name'),
      enabled: resource.field('enabled'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      id: resource.field('id'),
      ip_address_type: resource.field('ip_address_type'),
      ip_sets: resource.field('ip_sets'),
      name: resource.field('name'),
      tags: resource.field('tags'),
    },
    globalaccelerator_custom_routing_accelerator(name, block): {
      local resource = blockType.resource('aws_globalaccelerator_custom_routing_accelerator', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attributes: build.template(std.get(block, 'attributes', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        ip_sets: build.template(std.get(block, 'ip_sets', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      attributes: resource.field('attributes'),
      dns_name: resource.field('dns_name'),
      enabled: resource.field('enabled'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      id: resource.field('id'),
      ip_address_type: resource.field('ip_address_type'),
      ip_sets: resource.field('ip_sets'),
      name: resource.field('name'),
      tags: resource.field('tags'),
    },
    glue_catalog_table(name, block): {
      local resource = blockType.resource('aws_glue_catalog_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        database_name: build.template(block.database_name),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner: build.template(std.get(block, 'owner', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        partition_index: build.template(std.get(block, 'partition_index', null)),
        partition_keys: build.template(std.get(block, 'partition_keys', null)),
        query_as_of_time: build.template(std.get(block, 'query_as_of_time', null)),
        retention: build.template(std.get(block, 'retention', null)),
        storage_descriptor: build.template(std.get(block, 'storage_descriptor', null)),
        table_type: build.template(std.get(block, 'table_type', null)),
        target_table: build.template(std.get(block, 'target_table', null)),
        transaction_id: build.template(std.get(block, 'transaction_id', null)),
        view_expanded_text: build.template(std.get(block, 'view_expanded_text', null)),
        view_original_text: build.template(std.get(block, 'view_original_text', null)),
      }),
      arn: resource.field('arn'),
      catalog_id: resource.field('catalog_id'),
      database_name: resource.field('database_name'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      parameters: resource.field('parameters'),
      partition_index: resource.field('partition_index'),
      partition_keys: resource.field('partition_keys'),
      query_as_of_time: resource.field('query_as_of_time'),
      retention: resource.field('retention'),
      storage_descriptor: resource.field('storage_descriptor'),
      table_type: resource.field('table_type'),
      target_table: resource.field('target_table'),
      transaction_id: resource.field('transaction_id'),
      view_expanded_text: resource.field('view_expanded_text'),
      view_original_text: resource.field('view_original_text'),
    },
    glue_connection(name, block): {
      local resource = blockType.resource('aws_glue_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        connection_properties: build.template(std.get(block, 'connection_properties', null)),
        connection_type: build.template(std.get(block, 'connection_type', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(block.id),
        match_criteria: build.template(std.get(block, 'match_criteria', null)),
        name: build.template(std.get(block, 'name', null)),
        physical_connection_requirements: build.template(std.get(block, 'physical_connection_requirements', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      catalog_id: resource.field('catalog_id'),
      connection_properties: resource.field('connection_properties'),
      connection_type: resource.field('connection_type'),
      description: resource.field('description'),
      id: resource.field('id'),
      match_criteria: resource.field('match_criteria'),
      name: resource.field('name'),
      physical_connection_requirements: resource.field('physical_connection_requirements'),
      tags: resource.field('tags'),
    },
    glue_data_catalog_encryption_settings(name, block): {
      local resource = blockType.resource('aws_glue_data_catalog_encryption_settings', name),
      _: resource._(block, {
        catalog_id: build.template(block.catalog_id),
        data_catalog_encryption_settings: build.template(std.get(block, 'data_catalog_encryption_settings', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      catalog_id: resource.field('catalog_id'),
      data_catalog_encryption_settings: resource.field('data_catalog_encryption_settings'),
      id: resource.field('id'),
    },
    glue_registry(name, block): {
      local resource = blockType.resource('aws_glue_registry', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      name: resource.field('name'),
    },
    glue_script(name, block): {
      local resource = blockType.resource('aws_glue_script', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        language: build.template(std.get(block, 'language', null)),
        python_script: build.template(std.get(block, 'python_script', null)),
        scala_code: build.template(std.get(block, 'scala_code', null)),
      }),
      id: resource.field('id'),
      language: resource.field('language'),
      python_script: resource.field('python_script'),
      scala_code: resource.field('scala_code'),
    },
    grafana_workspace(name, block): {
      local resource = blockType.resource('aws_grafana_workspace', name),
      _: resource._(block, {
        account_access_type: build.template(std.get(block, 'account_access_type', null)),
        arn: build.template(std.get(block, 'arn', null)),
        authentication_providers: build.template(std.get(block, 'authentication_providers', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        data_sources: build.template(std.get(block, 'data_sources', null)),
        description: build.template(std.get(block, 'description', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        grafana_version: build.template(std.get(block, 'grafana_version', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        name: build.template(std.get(block, 'name', null)),
        notification_destinations: build.template(std.get(block, 'notification_destinations', null)),
        organization_role_name: build.template(std.get(block, 'organization_role_name', null)),
        organizational_units: build.template(std.get(block, 'organizational_units', null)),
        permission_type: build.template(std.get(block, 'permission_type', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        saml_configuration_status: build.template(std.get(block, 'saml_configuration_status', null)),
        stack_set_name: build.template(std.get(block, 'stack_set_name', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      account_access_type: resource.field('account_access_type'),
      arn: resource.field('arn'),
      authentication_providers: resource.field('authentication_providers'),
      created_date: resource.field('created_date'),
      data_sources: resource.field('data_sources'),
      description: resource.field('description'),
      endpoint: resource.field('endpoint'),
      grafana_version: resource.field('grafana_version'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      name: resource.field('name'),
      notification_destinations: resource.field('notification_destinations'),
      organization_role_name: resource.field('organization_role_name'),
      organizational_units: resource.field('organizational_units'),
      permission_type: resource.field('permission_type'),
      role_arn: resource.field('role_arn'),
      saml_configuration_status: resource.field('saml_configuration_status'),
      stack_set_name: resource.field('stack_set_name'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      workspace_id: resource.field('workspace_id'),
    },
    guardduty_detector(name, block): {
      local resource = blockType.resource('aws_guardduty_detector', name),
      _: resource._(block, {
        features: build.template(std.get(block, 'features', null)),
        finding_publishing_frequency: build.template(std.get(block, 'finding_publishing_frequency', null)),
        id: build.template(std.get(block, 'id', null)),
        service_role_arn: build.template(std.get(block, 'service_role_arn', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      features: resource.field('features'),
      finding_publishing_frequency: resource.field('finding_publishing_frequency'),
      id: resource.field('id'),
      service_role_arn: resource.field('service_role_arn'),
      status: resource.field('status'),
    },
    guardduty_finding_ids(name, block): {
      local resource = blockType.resource('aws_guardduty_finding_ids', name),
      _: resource._(block, {
        detector_id: build.template(block.detector_id),
        finding_ids: build.template(std.get(block, 'finding_ids', null)),
        has_findings: build.template(std.get(block, 'has_findings', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      detector_id: resource.field('detector_id'),
      finding_ids: resource.field('finding_ids'),
      has_findings: resource.field('has_findings'),
      id: resource.field('id'),
    },
    iam_access_keys(name, block): {
      local resource = blockType.resource('aws_iam_access_keys', name),
      _: resource._(block, {
        access_keys: build.template(std.get(block, 'access_keys', null)),
        id: build.template(std.get(block, 'id', null)),
        user: build.template(block.user),
      }),
      access_keys: resource.field('access_keys'),
      id: resource.field('id'),
      user: resource.field('user'),
    },
    iam_account_alias(name, block): {
      local resource = blockType.resource('aws_iam_account_alias', name),
      _: resource._(block, {
        account_alias: build.template(std.get(block, 'account_alias', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      account_alias: resource.field('account_alias'),
      id: resource.field('id'),
    },
    iam_group(name, block): {
      local resource = blockType.resource('aws_iam_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        group_id: build.template(std.get(block, 'group_id', null)),
        group_name: build.template(block.group_name),
        id: build.template(std.get(block, 'id', null)),
        path: build.template(std.get(block, 'path', null)),
        users: build.template(std.get(block, 'users', null)),
      }),
      arn: resource.field('arn'),
      group_id: resource.field('group_id'),
      group_name: resource.field('group_name'),
      id: resource.field('id'),
      path: resource.field('path'),
      users: resource.field('users'),
    },
    iam_instance_profile(name, block): {
      local resource = blockType.resource('aws_iam_instance_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        create_date: build.template(std.get(block, 'create_date', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        path: build.template(std.get(block, 'path', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        role_id: build.template(std.get(block, 'role_id', null)),
        role_name: build.template(std.get(block, 'role_name', null)),
      }),
      arn: resource.field('arn'),
      create_date: resource.field('create_date'),
      id: resource.field('id'),
      name: resource.field('name'),
      path: resource.field('path'),
      role_arn: resource.field('role_arn'),
      role_id: resource.field('role_id'),
      role_name: resource.field('role_name'),
    },
    iam_instance_profiles(name, block): {
      local resource = blockType.resource('aws_iam_instance_profiles', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
        paths: build.template(std.get(block, 'paths', null)),
        role_name: build.template(block.role_name),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      names: resource.field('names'),
      paths: resource.field('paths'),
      role_name: resource.field('role_name'),
    },
    iam_openid_connect_provider(name, block): {
      local resource = blockType.resource('aws_iam_openid_connect_provider', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        client_id_list: build.template(std.get(block, 'client_id_list', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        thumbprint_list: build.template(std.get(block, 'thumbprint_list', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      arn: resource.field('arn'),
      client_id_list: resource.field('client_id_list'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      thumbprint_list: resource.field('thumbprint_list'),
      url: resource.field('url'),
    },
    iam_policy(name, block): {
      local resource = blockType.resource('aws_iam_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attachment_count: build.template(std.get(block, 'attachment_count', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        path: build.template(std.get(block, 'path', null)),
        path_prefix: build.template(std.get(block, 'path_prefix', null)),
        policy: build.template(std.get(block, 'policy', null)),
        policy_id: build.template(std.get(block, 'policy_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      attachment_count: resource.field('attachment_count'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      path: resource.field('path'),
      path_prefix: resource.field('path_prefix'),
      policy: resource.field('policy'),
      policy_id: resource.field('policy_id'),
      tags: resource.field('tags'),
    },
    iam_policy_document(name, block): {
      local resource = blockType.resource('aws_iam_policy_document', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        json: build.template(std.get(block, 'json', null)),
        minified_json: build.template(std.get(block, 'minified_json', null)),
        override_json: build.template(std.get(block, 'override_json', null)),
        override_policy_documents: build.template(std.get(block, 'override_policy_documents', null)),
        policy_id: build.template(std.get(block, 'policy_id', null)),
        source_json: build.template(std.get(block, 'source_json', null)),
        source_policy_documents: build.template(std.get(block, 'source_policy_documents', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      id: resource.field('id'),
      json: resource.field('json'),
      minified_json: resource.field('minified_json'),
      override_json: resource.field('override_json'),
      override_policy_documents: resource.field('override_policy_documents'),
      policy_id: resource.field('policy_id'),
      source_json: resource.field('source_json'),
      source_policy_documents: resource.field('source_policy_documents'),
      version: resource.field('version'),
    },
    iam_principal_policy_simulation(name, block): {
      local resource = blockType.resource('aws_iam_principal_policy_simulation', name),
      _: resource._(block, {
        action_names: build.template(block.action_names),
        additional_policies_json: build.template(std.get(block, 'additional_policies_json', null)),
        all_allowed: build.template(std.get(block, 'all_allowed', null)),
        caller_arn: build.template(std.get(block, 'caller_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        permissions_boundary_policies_json: build.template(std.get(block, 'permissions_boundary_policies_json', null)),
        policy_source_arn: build.template(block.policy_source_arn),
        resource_arns: build.template(std.get(block, 'resource_arns', null)),
        resource_handling_option: build.template(std.get(block, 'resource_handling_option', null)),
        resource_owner_account_id: build.template(std.get(block, 'resource_owner_account_id', null)),
        resource_policy_json: build.template(std.get(block, 'resource_policy_json', null)),
        results: build.template(std.get(block, 'results', null)),
      }),
      action_names: resource.field('action_names'),
      additional_policies_json: resource.field('additional_policies_json'),
      all_allowed: resource.field('all_allowed'),
      caller_arn: resource.field('caller_arn'),
      id: resource.field('id'),
      permissions_boundary_policies_json: resource.field('permissions_boundary_policies_json'),
      policy_source_arn: resource.field('policy_source_arn'),
      resource_arns: resource.field('resource_arns'),
      resource_handling_option: resource.field('resource_handling_option'),
      resource_owner_account_id: resource.field('resource_owner_account_id'),
      resource_policy_json: resource.field('resource_policy_json'),
      results: resource.field('results'),
    },
    iam_role(name, block): {
      local resource = blockType.resource('aws_iam_role', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        assume_role_policy: build.template(std.get(block, 'assume_role_policy', null)),
        create_date: build.template(std.get(block, 'create_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        max_session_duration: build.template(std.get(block, 'max_session_duration', null)),
        name: build.template(block.name),
        path: build.template(std.get(block, 'path', null)),
        permissions_boundary: build.template(std.get(block, 'permissions_boundary', null)),
        role_last_used: build.template(std.get(block, 'role_last_used', null)),
        tags: build.template(std.get(block, 'tags', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
      }),
      arn: resource.field('arn'),
      assume_role_policy: resource.field('assume_role_policy'),
      create_date: resource.field('create_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      max_session_duration: resource.field('max_session_duration'),
      name: resource.field('name'),
      path: resource.field('path'),
      permissions_boundary: resource.field('permissions_boundary'),
      role_last_used: resource.field('role_last_used'),
      tags: resource.field('tags'),
      unique_id: resource.field('unique_id'),
    },
    iam_roles(name, block): {
      local resource = blockType.resource('aws_iam_roles', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        name_regex: build.template(std.get(block, 'name_regex', null)),
        names: build.template(std.get(block, 'names', null)),
        path_prefix: build.template(std.get(block, 'path_prefix', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      name_regex: resource.field('name_regex'),
      names: resource.field('names'),
      path_prefix: resource.field('path_prefix'),
    },
    iam_saml_provider(name, block): {
      local resource = blockType.resource('aws_iam_saml_provider', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        create_date: build.template(std.get(block, 'create_date', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        saml_metadata_document: build.template(std.get(block, 'saml_metadata_document', null)),
        tags: build.template(std.get(block, 'tags', null)),
        valid_until: build.template(std.get(block, 'valid_until', null)),
      }),
      arn: resource.field('arn'),
      create_date: resource.field('create_date'),
      id: resource.field('id'),
      name: resource.field('name'),
      saml_metadata_document: resource.field('saml_metadata_document'),
      tags: resource.field('tags'),
      valid_until: resource.field('valid_until'),
    },
    iam_server_certificate(name, block): {
      local resource = blockType.resource('aws_iam_server_certificate', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        certificate_body: build.template(std.get(block, 'certificate_body', null)),
        certificate_chain: build.template(std.get(block, 'certificate_chain', null)),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        id: build.template(std.get(block, 'id', null)),
        latest: build.template(std.get(block, 'latest', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        path: build.template(std.get(block, 'path', null)),
        path_prefix: build.template(std.get(block, 'path_prefix', null)),
        upload_date: build.template(std.get(block, 'upload_date', null)),
      }),
      arn: resource.field('arn'),
      certificate_body: resource.field('certificate_body'),
      certificate_chain: resource.field('certificate_chain'),
      expiration_date: resource.field('expiration_date'),
      id: resource.field('id'),
      latest: resource.field('latest'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      path: resource.field('path'),
      path_prefix: resource.field('path_prefix'),
      upload_date: resource.field('upload_date'),
    },
    iam_session_context(name, block): {
      local resource = blockType.resource('aws_iam_session_context', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        id: build.template(std.get(block, 'id', null)),
        issuer_arn: build.template(std.get(block, 'issuer_arn', null)),
        issuer_id: build.template(std.get(block, 'issuer_id', null)),
        issuer_name: build.template(std.get(block, 'issuer_name', null)),
        session_name: build.template(std.get(block, 'session_name', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      issuer_arn: resource.field('issuer_arn'),
      issuer_id: resource.field('issuer_id'),
      issuer_name: resource.field('issuer_name'),
      session_name: resource.field('session_name'),
    },
    iam_user(name, block): {
      local resource = blockType.resource('aws_iam_user', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        path: build.template(std.get(block, 'path', null)),
        permissions_boundary: build.template(std.get(block, 'permissions_boundary', null)),
        tags: build.template(std.get(block, 'tags', null)),
        user_id: build.template(std.get(block, 'user_id', null)),
        user_name: build.template(block.user_name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      path: resource.field('path'),
      permissions_boundary: resource.field('permissions_boundary'),
      tags: resource.field('tags'),
      user_id: resource.field('user_id'),
      user_name: resource.field('user_name'),
    },
    iam_user_ssh_key(name, block): {
      local resource = blockType.resource('aws_iam_user_ssh_key', name),
      _: resource._(block, {
        encoding: build.template(block.encoding),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        public_key: build.template(std.get(block, 'public_key', null)),
        ssh_public_key_id: build.template(block.ssh_public_key_id),
        status: build.template(std.get(block, 'status', null)),
        username: build.template(block.username),
      }),
      encoding: resource.field('encoding'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      public_key: resource.field('public_key'),
      ssh_public_key_id: resource.field('ssh_public_key_id'),
      status: resource.field('status'),
      username: resource.field('username'),
    },
    iam_users(name, block): {
      local resource = blockType.resource('aws_iam_users', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        name_regex: build.template(std.get(block, 'name_regex', null)),
        names: build.template(std.get(block, 'names', null)),
        path_prefix: build.template(std.get(block, 'path_prefix', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      name_regex: resource.field('name_regex'),
      names: resource.field('names'),
      path_prefix: resource.field('path_prefix'),
    },
    identitystore_group(name, block): {
      local resource = blockType.resource('aws_identitystore_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        external_ids: build.template(std.get(block, 'external_ids', null)),
        group_id: build.template(std.get(block, 'group_id', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_store_id: build.template(block.identity_store_id),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      external_ids: resource.field('external_ids'),
      group_id: resource.field('group_id'),
      id: resource.field('id'),
      identity_store_id: resource.field('identity_store_id'),
    },
    identitystore_groups(name, block): {
      local resource = blockType.resource('aws_identitystore_groups', name),
      _: resource._(block, {
        groups: build.template(std.get(block, 'groups', null)),
        identity_store_id: build.template(block.identity_store_id),
      }),
      groups: resource.field('groups'),
      identity_store_id: resource.field('identity_store_id'),
    },
    identitystore_user(name, block): {
      local resource = blockType.resource('aws_identitystore_user', name),
      _: resource._(block, {
        addresses: build.template(std.get(block, 'addresses', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        emails: build.template(std.get(block, 'emails', null)),
        external_ids: build.template(std.get(block, 'external_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_store_id: build.template(block.identity_store_id),
        locale: build.template(std.get(block, 'locale', null)),
        name: build.template(std.get(block, 'name', null)),
        nickname: build.template(std.get(block, 'nickname', null)),
        phone_numbers: build.template(std.get(block, 'phone_numbers', null)),
        preferred_language: build.template(std.get(block, 'preferred_language', null)),
        profile_url: build.template(std.get(block, 'profile_url', null)),
        timezone: build.template(std.get(block, 'timezone', null)),
        title: build.template(std.get(block, 'title', null)),
        user_id: build.template(std.get(block, 'user_id', null)),
        user_name: build.template(std.get(block, 'user_name', null)),
        user_type: build.template(std.get(block, 'user_type', null)),
      }),
      addresses: resource.field('addresses'),
      display_name: resource.field('display_name'),
      emails: resource.field('emails'),
      external_ids: resource.field('external_ids'),
      id: resource.field('id'),
      identity_store_id: resource.field('identity_store_id'),
      locale: resource.field('locale'),
      name: resource.field('name'),
      nickname: resource.field('nickname'),
      phone_numbers: resource.field('phone_numbers'),
      preferred_language: resource.field('preferred_language'),
      profile_url: resource.field('profile_url'),
      timezone: resource.field('timezone'),
      title: resource.field('title'),
      user_id: resource.field('user_id'),
      user_name: resource.field('user_name'),
      user_type: resource.field('user_type'),
    },
    imagebuilder_component(name, block): {
      local resource = blockType.resource('aws_imagebuilder_component', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        change_description: build.template(std.get(block, 'change_description', null)),
        data: build.template(std.get(block, 'data', null)),
        date_created: build.template(std.get(block, 'date_created', null)),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        name: build.template(std.get(block, 'name', null)),
        owner: build.template(std.get(block, 'owner', null)),
        platform: build.template(std.get(block, 'platform', null)),
        supported_os_versions: build.template(std.get(block, 'supported_os_versions', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      change_description: resource.field('change_description'),
      data: resource.field('data'),
      date_created: resource.field('date_created'),
      description: resource.field('description'),
      encrypted: resource.field('encrypted'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      platform: resource.field('platform'),
      supported_os_versions: resource.field('supported_os_versions'),
      tags: resource.field('tags'),
      type: resource.field('type'),
      version: resource.field('version'),
    },
    imagebuilder_components(name, block): {
      local resource = blockType.resource('aws_imagebuilder_components', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
        owner: build.template(std.get(block, 'owner', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      names: resource.field('names'),
      owner: resource.field('owner'),
    },
    imagebuilder_container_recipe(name, block): {
      local resource = blockType.resource('aws_imagebuilder_container_recipe', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        component: build.template(std.get(block, 'component', null)),
        container_type: build.template(std.get(block, 'container_type', null)),
        date_created: build.template(std.get(block, 'date_created', null)),
        description: build.template(std.get(block, 'description', null)),
        dockerfile_template_data: build.template(std.get(block, 'dockerfile_template_data', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_configuration: build.template(std.get(block, 'instance_configuration', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        name: build.template(std.get(block, 'name', null)),
        owner: build.template(std.get(block, 'owner', null)),
        parent_image: build.template(std.get(block, 'parent_image', null)),
        platform: build.template(std.get(block, 'platform', null)),
        tags: build.template(std.get(block, 'tags', null)),
        target_repository: build.template(std.get(block, 'target_repository', null)),
        version: build.template(std.get(block, 'version', null)),
        working_directory: build.template(std.get(block, 'working_directory', null)),
      }),
      arn: resource.field('arn'),
      component: resource.field('component'),
      container_type: resource.field('container_type'),
      date_created: resource.field('date_created'),
      description: resource.field('description'),
      dockerfile_template_data: resource.field('dockerfile_template_data'),
      encrypted: resource.field('encrypted'),
      id: resource.field('id'),
      instance_configuration: resource.field('instance_configuration'),
      kms_key_id: resource.field('kms_key_id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      parent_image: resource.field('parent_image'),
      platform: resource.field('platform'),
      tags: resource.field('tags'),
      target_repository: resource.field('target_repository'),
      version: resource.field('version'),
      working_directory: resource.field('working_directory'),
    },
    imagebuilder_container_recipes(name, block): {
      local resource = blockType.resource('aws_imagebuilder_container_recipes', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
        owner: build.template(std.get(block, 'owner', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      names: resource.field('names'),
      owner: resource.field('owner'),
    },
    imagebuilder_distribution_configuration(name, block): {
      local resource = blockType.resource('aws_imagebuilder_distribution_configuration', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        date_created: build.template(std.get(block, 'date_created', null)),
        date_updated: build.template(std.get(block, 'date_updated', null)),
        description: build.template(std.get(block, 'description', null)),
        distribution: build.template(std.get(block, 'distribution', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      date_created: resource.field('date_created'),
      date_updated: resource.field('date_updated'),
      description: resource.field('description'),
      distribution: resource.field('distribution'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
    },
    imagebuilder_distribution_configurations(name, block): {
      local resource = blockType.resource('aws_imagebuilder_distribution_configurations', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      names: resource.field('names'),
    },
    imagebuilder_image(name, block): {
      local resource = blockType.resource('aws_imagebuilder_image', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        build_version_arn: build.template(std.get(block, 'build_version_arn', null)),
        container_recipe_arn: build.template(std.get(block, 'container_recipe_arn', null)),
        date_created: build.template(std.get(block, 'date_created', null)),
        distribution_configuration_arn: build.template(std.get(block, 'distribution_configuration_arn', null)),
        enhanced_image_metadata_enabled: build.template(std.get(block, 'enhanced_image_metadata_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        image_recipe_arn: build.template(std.get(block, 'image_recipe_arn', null)),
        image_scanning_configuration: build.template(std.get(block, 'image_scanning_configuration', null)),
        image_tests_configuration: build.template(std.get(block, 'image_tests_configuration', null)),
        infrastructure_configuration_arn: build.template(std.get(block, 'infrastructure_configuration_arn', null)),
        name: build.template(std.get(block, 'name', null)),
        os_version: build.template(std.get(block, 'os_version', null)),
        output_resources: build.template(std.get(block, 'output_resources', null)),
        platform: build.template(std.get(block, 'platform', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      build_version_arn: resource.field('build_version_arn'),
      container_recipe_arn: resource.field('container_recipe_arn'),
      date_created: resource.field('date_created'),
      distribution_configuration_arn: resource.field('distribution_configuration_arn'),
      enhanced_image_metadata_enabled: resource.field('enhanced_image_metadata_enabled'),
      id: resource.field('id'),
      image_recipe_arn: resource.field('image_recipe_arn'),
      image_scanning_configuration: resource.field('image_scanning_configuration'),
      image_tests_configuration: resource.field('image_tests_configuration'),
      infrastructure_configuration_arn: resource.field('infrastructure_configuration_arn'),
      name: resource.field('name'),
      os_version: resource.field('os_version'),
      output_resources: resource.field('output_resources'),
      platform: resource.field('platform'),
      tags: resource.field('tags'),
      version: resource.field('version'),
    },
    imagebuilder_image_pipeline(name, block): {
      local resource = blockType.resource('aws_imagebuilder_image_pipeline', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        container_recipe_arn: build.template(std.get(block, 'container_recipe_arn', null)),
        date_created: build.template(std.get(block, 'date_created', null)),
        date_last_run: build.template(std.get(block, 'date_last_run', null)),
        date_next_run: build.template(std.get(block, 'date_next_run', null)),
        date_updated: build.template(std.get(block, 'date_updated', null)),
        description: build.template(std.get(block, 'description', null)),
        distribution_configuration_arn: build.template(std.get(block, 'distribution_configuration_arn', null)),
        enhanced_image_metadata_enabled: build.template(std.get(block, 'enhanced_image_metadata_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        image_recipe_arn: build.template(std.get(block, 'image_recipe_arn', null)),
        image_scanning_configuration: build.template(std.get(block, 'image_scanning_configuration', null)),
        image_tests_configuration: build.template(std.get(block, 'image_tests_configuration', null)),
        infrastructure_configuration_arn: build.template(std.get(block, 'infrastructure_configuration_arn', null)),
        name: build.template(std.get(block, 'name', null)),
        platform: build.template(std.get(block, 'platform', null)),
        schedule: build.template(std.get(block, 'schedule', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      container_recipe_arn: resource.field('container_recipe_arn'),
      date_created: resource.field('date_created'),
      date_last_run: resource.field('date_last_run'),
      date_next_run: resource.field('date_next_run'),
      date_updated: resource.field('date_updated'),
      description: resource.field('description'),
      distribution_configuration_arn: resource.field('distribution_configuration_arn'),
      enhanced_image_metadata_enabled: resource.field('enhanced_image_metadata_enabled'),
      id: resource.field('id'),
      image_recipe_arn: resource.field('image_recipe_arn'),
      image_scanning_configuration: resource.field('image_scanning_configuration'),
      image_tests_configuration: resource.field('image_tests_configuration'),
      infrastructure_configuration_arn: resource.field('infrastructure_configuration_arn'),
      name: resource.field('name'),
      platform: resource.field('platform'),
      schedule: resource.field('schedule'),
      status: resource.field('status'),
      tags: resource.field('tags'),
    },
    imagebuilder_image_pipelines(name, block): {
      local resource = blockType.resource('aws_imagebuilder_image_pipelines', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      names: resource.field('names'),
    },
    imagebuilder_image_recipe(name, block): {
      local resource = blockType.resource('aws_imagebuilder_image_recipe', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        block_device_mapping: build.template(std.get(block, 'block_device_mapping', null)),
        component: build.template(std.get(block, 'component', null)),
        date_created: build.template(std.get(block, 'date_created', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        owner: build.template(std.get(block, 'owner', null)),
        parent_image: build.template(std.get(block, 'parent_image', null)),
        platform: build.template(std.get(block, 'platform', null)),
        tags: build.template(std.get(block, 'tags', null)),
        user_data_base64: build.template(std.get(block, 'user_data_base64', null)),
        version: build.template(std.get(block, 'version', null)),
        working_directory: build.template(std.get(block, 'working_directory', null)),
      }),
      arn: resource.field('arn'),
      block_device_mapping: resource.field('block_device_mapping'),
      component: resource.field('component'),
      date_created: resource.field('date_created'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      parent_image: resource.field('parent_image'),
      platform: resource.field('platform'),
      tags: resource.field('tags'),
      user_data_base64: resource.field('user_data_base64'),
      version: resource.field('version'),
      working_directory: resource.field('working_directory'),
    },
    imagebuilder_image_recipes(name, block): {
      local resource = blockType.resource('aws_imagebuilder_image_recipes', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
        owner: build.template(std.get(block, 'owner', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      names: resource.field('names'),
      owner: resource.field('owner'),
    },
    imagebuilder_infrastructure_configuration(name, block): {
      local resource = blockType.resource('aws_imagebuilder_infrastructure_configuration', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        date_created: build.template(std.get(block, 'date_created', null)),
        date_updated: build.template(std.get(block, 'date_updated', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_metadata_options: build.template(std.get(block, 'instance_metadata_options', null)),
        instance_profile_name: build.template(std.get(block, 'instance_profile_name', null)),
        instance_types: build.template(std.get(block, 'instance_types', null)),
        key_pair: build.template(std.get(block, 'key_pair', null)),
        logging: build.template(std.get(block, 'logging', null)),
        name: build.template(std.get(block, 'name', null)),
        resource_tags: build.template(std.get(block, 'resource_tags', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        sns_topic_arn: build.template(std.get(block, 'sns_topic_arn', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        terminate_instance_on_failure: build.template(std.get(block, 'terminate_instance_on_failure', null)),
      }),
      arn: resource.field('arn'),
      date_created: resource.field('date_created'),
      date_updated: resource.field('date_updated'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_metadata_options: resource.field('instance_metadata_options'),
      instance_profile_name: resource.field('instance_profile_name'),
      instance_types: resource.field('instance_types'),
      key_pair: resource.field('key_pair'),
      logging: resource.field('logging'),
      name: resource.field('name'),
      resource_tags: resource.field('resource_tags'),
      security_group_ids: resource.field('security_group_ids'),
      sns_topic_arn: resource.field('sns_topic_arn'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      terminate_instance_on_failure: resource.field('terminate_instance_on_failure'),
    },
    imagebuilder_infrastructure_configurations(name, block): {
      local resource = blockType.resource('aws_imagebuilder_infrastructure_configurations', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      names: resource.field('names'),
    },
    inspector_rules_packages(name, block): {
      local resource = blockType.resource('aws_inspector_rules_packages', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
    },
    instance(name, block): {
      local resource = blockType.resource('aws_instance', name),
      _: resource._(block, {
        ami: build.template(std.get(block, 'ami', null)),
        arn: build.template(std.get(block, 'arn', null)),
        associate_public_ip_address: build.template(std.get(block, 'associate_public_ip_address', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        credit_specification: build.template(std.get(block, 'credit_specification', null)),
        disable_api_stop: build.template(std.get(block, 'disable_api_stop', null)),
        disable_api_termination: build.template(std.get(block, 'disable_api_termination', null)),
        ebs_block_device: build.template(std.get(block, 'ebs_block_device', null)),
        ebs_optimized: build.template(std.get(block, 'ebs_optimized', null)),
        enclave_options: build.template(std.get(block, 'enclave_options', null)),
        ephemeral_block_device: build.template(std.get(block, 'ephemeral_block_device', null)),
        get_password_data: build.template(std.get(block, 'get_password_data', null)),
        get_user_data: build.template(std.get(block, 'get_user_data', null)),
        host_id: build.template(std.get(block, 'host_id', null)),
        host_resource_group_arn: build.template(std.get(block, 'host_resource_group_arn', null)),
        iam_instance_profile: build.template(std.get(block, 'iam_instance_profile', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(std.get(block, 'instance_id', null)),
        instance_state: build.template(std.get(block, 'instance_state', null)),
        instance_tags: build.template(std.get(block, 'instance_tags', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        ipv6_addresses: build.template(std.get(block, 'ipv6_addresses', null)),
        key_name: build.template(std.get(block, 'key_name', null)),
        launch_time: build.template(std.get(block, 'launch_time', null)),
        maintenance_options: build.template(std.get(block, 'maintenance_options', null)),
        metadata_options: build.template(std.get(block, 'metadata_options', null)),
        monitoring: build.template(std.get(block, 'monitoring', null)),
        network_interface_id: build.template(std.get(block, 'network_interface_id', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        password_data: build.template(std.get(block, 'password_data', null)),
        placement_group: build.template(std.get(block, 'placement_group', null)),
        placement_partition_number: build.template(std.get(block, 'placement_partition_number', null)),
        private_dns: build.template(std.get(block, 'private_dns', null)),
        private_dns_name_options: build.template(std.get(block, 'private_dns_name_options', null)),
        private_ip: build.template(std.get(block, 'private_ip', null)),
        public_dns: build.template(std.get(block, 'public_dns', null)),
        public_ip: build.template(std.get(block, 'public_ip', null)),
        root_block_device: build.template(std.get(block, 'root_block_device', null)),
        secondary_private_ips: build.template(std.get(block, 'secondary_private_ips', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        source_dest_check: build.template(std.get(block, 'source_dest_check', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tenancy: build.template(std.get(block, 'tenancy', null)),
        user_data: build.template(std.get(block, 'user_data', null)),
        user_data_base64: build.template(std.get(block, 'user_data_base64', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      ami: resource.field('ami'),
      arn: resource.field('arn'),
      associate_public_ip_address: resource.field('associate_public_ip_address'),
      availability_zone: resource.field('availability_zone'),
      credit_specification: resource.field('credit_specification'),
      disable_api_stop: resource.field('disable_api_stop'),
      disable_api_termination: resource.field('disable_api_termination'),
      ebs_block_device: resource.field('ebs_block_device'),
      ebs_optimized: resource.field('ebs_optimized'),
      enclave_options: resource.field('enclave_options'),
      ephemeral_block_device: resource.field('ephemeral_block_device'),
      get_password_data: resource.field('get_password_data'),
      get_user_data: resource.field('get_user_data'),
      host_id: resource.field('host_id'),
      host_resource_group_arn: resource.field('host_resource_group_arn'),
      iam_instance_profile: resource.field('iam_instance_profile'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      instance_state: resource.field('instance_state'),
      instance_tags: resource.field('instance_tags'),
      instance_type: resource.field('instance_type'),
      ipv6_addresses: resource.field('ipv6_addresses'),
      key_name: resource.field('key_name'),
      launch_time: resource.field('launch_time'),
      maintenance_options: resource.field('maintenance_options'),
      metadata_options: resource.field('metadata_options'),
      monitoring: resource.field('monitoring'),
      network_interface_id: resource.field('network_interface_id'),
      outpost_arn: resource.field('outpost_arn'),
      password_data: resource.field('password_data'),
      placement_group: resource.field('placement_group'),
      placement_partition_number: resource.field('placement_partition_number'),
      private_dns: resource.field('private_dns'),
      private_dns_name_options: resource.field('private_dns_name_options'),
      private_ip: resource.field('private_ip'),
      public_dns: resource.field('public_dns'),
      public_ip: resource.field('public_ip'),
      root_block_device: resource.field('root_block_device'),
      secondary_private_ips: resource.field('secondary_private_ips'),
      security_groups: resource.field('security_groups'),
      source_dest_check: resource.field('source_dest_check'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      tenancy: resource.field('tenancy'),
      user_data: resource.field('user_data'),
      user_data_base64: resource.field('user_data_base64'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    instances(name, block): {
      local resource = blockType.resource('aws_instances', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        instance_state_names: build.template(std.get(block, 'instance_state_names', null)),
        instance_tags: build.template(std.get(block, 'instance_tags', null)),
        ipv6_addresses: build.template(std.get(block, 'ipv6_addresses', null)),
        private_ips: build.template(std.get(block, 'private_ips', null)),
        public_ips: build.template(std.get(block, 'public_ips', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      instance_state_names: resource.field('instance_state_names'),
      instance_tags: resource.field('instance_tags'),
      ipv6_addresses: resource.field('ipv6_addresses'),
      private_ips: resource.field('private_ips'),
      public_ips: resource.field('public_ips'),
    },
    internet_gateway(name, block): {
      local resource = blockType.resource('aws_internet_gateway', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attachments: build.template(std.get(block, 'attachments', null)),
        id: build.template(std.get(block, 'id', null)),
        internet_gateway_id: build.template(std.get(block, 'internet_gateway_id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      attachments: resource.field('attachments'),
      id: resource.field('id'),
      internet_gateway_id: resource.field('internet_gateway_id'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
    },
    iot_endpoint(name, block): {
      local resource = blockType.resource('aws_iot_endpoint', name),
      _: resource._(block, {
        endpoint_address: build.template(std.get(block, 'endpoint_address', null)),
        endpoint_type: build.template(std.get(block, 'endpoint_type', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      endpoint_address: resource.field('endpoint_address'),
      endpoint_type: resource.field('endpoint_type'),
      id: resource.field('id'),
    },
    iot_registration_code(name, block): {
      local resource = blockType.resource('aws_iot_registration_code', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        registration_code: build.template(std.get(block, 'registration_code', null)),
      }),
      id: resource.field('id'),
      registration_code: resource.field('registration_code'),
    },
    ip_ranges(name, block): {
      local resource = blockType.resource('aws_ip_ranges', name),
      _: resource._(block, {
        cidr_blocks: build.template(std.get(block, 'cidr_blocks', null)),
        create_date: build.template(std.get(block, 'create_date', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv6_cidr_blocks: build.template(std.get(block, 'ipv6_cidr_blocks', null)),
        regions: build.template(std.get(block, 'regions', null)),
        services: build.template(block.services),
        sync_token: build.template(std.get(block, 'sync_token', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      cidr_blocks: resource.field('cidr_blocks'),
      create_date: resource.field('create_date'),
      id: resource.field('id'),
      ipv6_cidr_blocks: resource.field('ipv6_cidr_blocks'),
      regions: resource.field('regions'),
      services: resource.field('services'),
      sync_token: resource.field('sync_token'),
      url: resource.field('url'),
    },
    ivs_stream_key(name, block): {
      local resource = blockType.resource('aws_ivs_stream_key', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        channel_arn: build.template(block.channel_arn),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        value: build.template(std.get(block, 'value', null)),
      }),
      arn: resource.field('arn'),
      channel_arn: resource.field('channel_arn'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      value: resource.field('value'),
    },
    kendra_experience(name, block): {
      local resource = blockType.resource('aws_kendra_experience', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        configuration: build.template(std.get(block, 'configuration', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        endpoints: build.template(std.get(block, 'endpoints', null)),
        error_message: build.template(std.get(block, 'error_message', null)),
        experience_id: build.template(block.experience_id),
        id: build.template(std.get(block, 'id', null)),
        index_id: build.template(block.index_id),
        name: build.template(std.get(block, 'name', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        status: build.template(std.get(block, 'status', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      arn: resource.field('arn'),
      configuration: resource.field('configuration'),
      created_at: resource.field('created_at'),
      description: resource.field('description'),
      endpoints: resource.field('endpoints'),
      error_message: resource.field('error_message'),
      experience_id: resource.field('experience_id'),
      id: resource.field('id'),
      index_id: resource.field('index_id'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      status: resource.field('status'),
      updated_at: resource.field('updated_at'),
    },
    kendra_faq(name, block): {
      local resource = blockType.resource('aws_kendra_faq', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        error_message: build.template(std.get(block, 'error_message', null)),
        faq_id: build.template(block.faq_id),
        file_format: build.template(std.get(block, 'file_format', null)),
        id: build.template(std.get(block, 'id', null)),
        index_id: build.template(block.index_id),
        language_code: build.template(std.get(block, 'language_code', null)),
        name: build.template(std.get(block, 'name', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        s3_path: build.template(std.get(block, 's3_path', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      description: resource.field('description'),
      error_message: resource.field('error_message'),
      faq_id: resource.field('faq_id'),
      file_format: resource.field('file_format'),
      id: resource.field('id'),
      index_id: resource.field('index_id'),
      language_code: resource.field('language_code'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      s3_path: resource.field('s3_path'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      updated_at: resource.field('updated_at'),
    },
    kendra_index(name, block): {
      local resource = blockType.resource('aws_kendra_index', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        capacity_units: build.template(std.get(block, 'capacity_units', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        document_metadata_configuration_updates: build.template(std.get(block, 'document_metadata_configuration_updates', null)),
        edition: build.template(std.get(block, 'edition', null)),
        error_message: build.template(std.get(block, 'error_message', null)),
        id: build.template(block.id),
        index_statistics: build.template(std.get(block, 'index_statistics', null)),
        name: build.template(std.get(block, 'name', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        server_side_encryption_configuration: build.template(std.get(block, 'server_side_encryption_configuration', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        user_context_policy: build.template(std.get(block, 'user_context_policy', null)),
        user_group_resolution_configuration: build.template(std.get(block, 'user_group_resolution_configuration', null)),
        user_token_configurations: build.template(std.get(block, 'user_token_configurations', null)),
      }),
      arn: resource.field('arn'),
      capacity_units: resource.field('capacity_units'),
      created_at: resource.field('created_at'),
      description: resource.field('description'),
      document_metadata_configuration_updates: resource.field('document_metadata_configuration_updates'),
      edition: resource.field('edition'),
      error_message: resource.field('error_message'),
      id: resource.field('id'),
      index_statistics: resource.field('index_statistics'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      server_side_encryption_configuration: resource.field('server_side_encryption_configuration'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      updated_at: resource.field('updated_at'),
      user_context_policy: resource.field('user_context_policy'),
      user_group_resolution_configuration: resource.field('user_group_resolution_configuration'),
      user_token_configurations: resource.field('user_token_configurations'),
    },
    kendra_query_suggestions_block_list(name, block): {
      local resource = blockType.resource('aws_kendra_query_suggestions_block_list', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        error_message: build.template(std.get(block, 'error_message', null)),
        file_size_bytes: build.template(std.get(block, 'file_size_bytes', null)),
        id: build.template(std.get(block, 'id', null)),
        index_id: build.template(block.index_id),
        item_count: build.template(std.get(block, 'item_count', null)),
        name: build.template(std.get(block, 'name', null)),
        query_suggestions_block_list_id: build.template(block.query_suggestions_block_list_id),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        source_s3_path: build.template(std.get(block, 'source_s3_path', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      description: resource.field('description'),
      error_message: resource.field('error_message'),
      file_size_bytes: resource.field('file_size_bytes'),
      id: resource.field('id'),
      index_id: resource.field('index_id'),
      item_count: resource.field('item_count'),
      name: resource.field('name'),
      query_suggestions_block_list_id: resource.field('query_suggestions_block_list_id'),
      role_arn: resource.field('role_arn'),
      source_s3_path: resource.field('source_s3_path'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      updated_at: resource.field('updated_at'),
    },
    kendra_thesaurus(name, block): {
      local resource = blockType.resource('aws_kendra_thesaurus', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        error_message: build.template(std.get(block, 'error_message', null)),
        file_size_bytes: build.template(std.get(block, 'file_size_bytes', null)),
        id: build.template(std.get(block, 'id', null)),
        index_id: build.template(block.index_id),
        name: build.template(std.get(block, 'name', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        source_s3_path: build.template(std.get(block, 'source_s3_path', null)),
        status: build.template(std.get(block, 'status', null)),
        synonym_rule_count: build.template(std.get(block, 'synonym_rule_count', null)),
        tags: build.template(std.get(block, 'tags', null)),
        term_count: build.template(std.get(block, 'term_count', null)),
        thesaurus_id: build.template(block.thesaurus_id),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      description: resource.field('description'),
      error_message: resource.field('error_message'),
      file_size_bytes: resource.field('file_size_bytes'),
      id: resource.field('id'),
      index_id: resource.field('index_id'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      source_s3_path: resource.field('source_s3_path'),
      status: resource.field('status'),
      synonym_rule_count: resource.field('synonym_rule_count'),
      tags: resource.field('tags'),
      term_count: resource.field('term_count'),
      thesaurus_id: resource.field('thesaurus_id'),
      updated_at: resource.field('updated_at'),
    },
    key_pair(name, block): {
      local resource = blockType.resource('aws_key_pair', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        fingerprint: build.template(std.get(block, 'fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        include_public_key: build.template(std.get(block, 'include_public_key', null)),
        key_name: build.template(std.get(block, 'key_name', null)),
        key_pair_id: build.template(std.get(block, 'key_pair_id', null)),
        key_type: build.template(std.get(block, 'key_type', null)),
        public_key: build.template(std.get(block, 'public_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      create_time: resource.field('create_time'),
      fingerprint: resource.field('fingerprint'),
      id: resource.field('id'),
      include_public_key: resource.field('include_public_key'),
      key_name: resource.field('key_name'),
      key_pair_id: resource.field('key_pair_id'),
      key_type: resource.field('key_type'),
      public_key: resource.field('public_key'),
      tags: resource.field('tags'),
    },
    kinesis_firehose_delivery_stream(name, block): {
      local resource = blockType.resource('aws_kinesis_firehose_delivery_stream', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    kinesis_stream(name, block): {
      local resource = blockType.resource('aws_kinesis_stream', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        closed_shards: build.template(std.get(block, 'closed_shards', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        encryption_type: build.template(std.get(block, 'encryption_type', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        name: build.template(block.name),
        open_shards: build.template(std.get(block, 'open_shards', null)),
        retention_period: build.template(std.get(block, 'retention_period', null)),
        shard_level_metrics: build.template(std.get(block, 'shard_level_metrics', null)),
        status: build.template(std.get(block, 'status', null)),
        stream_mode_details: build.template(std.get(block, 'stream_mode_details', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      closed_shards: resource.field('closed_shards'),
      creation_timestamp: resource.field('creation_timestamp'),
      encryption_type: resource.field('encryption_type'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      name: resource.field('name'),
      open_shards: resource.field('open_shards'),
      retention_period: resource.field('retention_period'),
      shard_level_metrics: resource.field('shard_level_metrics'),
      status: resource.field('status'),
      stream_mode_details: resource.field('stream_mode_details'),
      tags: resource.field('tags'),
    },
    kinesis_stream_consumer(name, block): {
      local resource = blockType.resource('aws_kinesis_stream_consumer', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_timestamp: build.template(std.get(block, 'creation_timestamp', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        status: build.template(std.get(block, 'status', null)),
        stream_arn: build.template(block.stream_arn),
      }),
      arn: resource.field('arn'),
      creation_timestamp: resource.field('creation_timestamp'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
      stream_arn: resource.field('stream_arn'),
    },
    kms_alias(name, block): {
      local resource = blockType.resource('aws_kms_alias', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        target_key_arn: build.template(std.get(block, 'target_key_arn', null)),
        target_key_id: build.template(std.get(block, 'target_key_id', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      target_key_arn: resource.field('target_key_arn'),
      target_key_id: resource.field('target_key_id'),
    },
    kms_ciphertext(name, block): {
      local resource = blockType.resource('aws_kms_ciphertext', name),
      _: resource._(block, {
        ciphertext_blob: build.template(std.get(block, 'ciphertext_blob', null)),
        context: build.template(std.get(block, 'context', null)),
        id: build.template(std.get(block, 'id', null)),
        key_id: build.template(block.key_id),
        plaintext: build.template(block.plaintext),
      }),
      ciphertext_blob: resource.field('ciphertext_blob'),
      context: resource.field('context'),
      id: resource.field('id'),
      key_id: resource.field('key_id'),
      plaintext: resource.field('plaintext'),
    },
    kms_custom_key_store(name, block): {
      local resource = blockType.resource('aws_kms_custom_key_store', name),
      _: resource._(block, {
        cloud_hsm_cluster_id: build.template(std.get(block, 'cloud_hsm_cluster_id', null)),
        connection_state: build.template(std.get(block, 'connection_state', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        custom_key_store_id: build.template(std.get(block, 'custom_key_store_id', null)),
        custom_key_store_name: build.template(std.get(block, 'custom_key_store_name', null)),
        id: build.template(std.get(block, 'id', null)),
        trust_anchor_certificate: build.template(std.get(block, 'trust_anchor_certificate', null)),
      }),
      cloud_hsm_cluster_id: resource.field('cloud_hsm_cluster_id'),
      connection_state: resource.field('connection_state'),
      creation_date: resource.field('creation_date'),
      custom_key_store_id: resource.field('custom_key_store_id'),
      custom_key_store_name: resource.field('custom_key_store_name'),
      id: resource.field('id'),
      trust_anchor_certificate: resource.field('trust_anchor_certificate'),
    },
    kms_key(name, block): {
      local resource = blockType.resource('aws_kms_key', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        cloud_hsm_cluster_id: build.template(std.get(block, 'cloud_hsm_cluster_id', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        custom_key_store_id: build.template(std.get(block, 'custom_key_store_id', null)),
        customer_master_key_spec: build.template(std.get(block, 'customer_master_key_spec', null)),
        deletion_date: build.template(std.get(block, 'deletion_date', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        expiration_model: build.template(std.get(block, 'expiration_model', null)),
        grant_tokens: build.template(std.get(block, 'grant_tokens', null)),
        id: build.template(std.get(block, 'id', null)),
        key_id: build.template(block.key_id),
        key_manager: build.template(std.get(block, 'key_manager', null)),
        key_spec: build.template(std.get(block, 'key_spec', null)),
        key_state: build.template(std.get(block, 'key_state', null)),
        key_usage: build.template(std.get(block, 'key_usage', null)),
        multi_region: build.template(std.get(block, 'multi_region', null)),
        multi_region_configuration: build.template(std.get(block, 'multi_region_configuration', null)),
        origin: build.template(std.get(block, 'origin', null)),
        pending_deletion_window_in_days: build.template(std.get(block, 'pending_deletion_window_in_days', null)),
        valid_to: build.template(std.get(block, 'valid_to', null)),
        xks_key_configuration: build.template(std.get(block, 'xks_key_configuration', null)),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      cloud_hsm_cluster_id: resource.field('cloud_hsm_cluster_id'),
      creation_date: resource.field('creation_date'),
      custom_key_store_id: resource.field('custom_key_store_id'),
      customer_master_key_spec: resource.field('customer_master_key_spec'),
      deletion_date: resource.field('deletion_date'),
      description: resource.field('description'),
      enabled: resource.field('enabled'),
      expiration_model: resource.field('expiration_model'),
      grant_tokens: resource.field('grant_tokens'),
      id: resource.field('id'),
      key_id: resource.field('key_id'),
      key_manager: resource.field('key_manager'),
      key_spec: resource.field('key_spec'),
      key_state: resource.field('key_state'),
      key_usage: resource.field('key_usage'),
      multi_region: resource.field('multi_region'),
      multi_region_configuration: resource.field('multi_region_configuration'),
      origin: resource.field('origin'),
      pending_deletion_window_in_days: resource.field('pending_deletion_window_in_days'),
      valid_to: resource.field('valid_to'),
      xks_key_configuration: resource.field('xks_key_configuration'),
    },
    kms_public_key(name, block): {
      local resource = blockType.resource('aws_kms_public_key', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        customer_master_key_spec: build.template(std.get(block, 'customer_master_key_spec', null)),
        encryption_algorithms: build.template(std.get(block, 'encryption_algorithms', null)),
        grant_tokens: build.template(std.get(block, 'grant_tokens', null)),
        id: build.template(std.get(block, 'id', null)),
        key_id: build.template(block.key_id),
        key_usage: build.template(std.get(block, 'key_usage', null)),
        public_key: build.template(std.get(block, 'public_key', null)),
        public_key_pem: build.template(std.get(block, 'public_key_pem', null)),
        signing_algorithms: build.template(std.get(block, 'signing_algorithms', null)),
      }),
      arn: resource.field('arn'),
      customer_master_key_spec: resource.field('customer_master_key_spec'),
      encryption_algorithms: resource.field('encryption_algorithms'),
      grant_tokens: resource.field('grant_tokens'),
      id: resource.field('id'),
      key_id: resource.field('key_id'),
      key_usage: resource.field('key_usage'),
      public_key: resource.field('public_key'),
      public_key_pem: resource.field('public_key_pem'),
      signing_algorithms: resource.field('signing_algorithms'),
    },
    kms_secret(name, block): {
      local resource = blockType.resource('aws_kms_secret', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    kms_secrets(name, block): {
      local resource = blockType.resource('aws_kms_secrets', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        plaintext: build.template(std.get(block, 'plaintext', null)),
      }),
      id: resource.field('id'),
      plaintext: resource.field('plaintext'),
    },
    lakeformation_data_lake_settings(name, block): {
      local resource = blockType.resource('aws_lakeformation_data_lake_settings', name),
      _: resource._(block, {
        admins: build.template(std.get(block, 'admins', null)),
        allow_external_data_filtering: build.template(std.get(block, 'allow_external_data_filtering', null)),
        allow_full_table_external_data_access: build.template(std.get(block, 'allow_full_table_external_data_access', null)),
        authorized_session_tag_value_list: build.template(std.get(block, 'authorized_session_tag_value_list', null)),
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        create_database_default_permissions: build.template(std.get(block, 'create_database_default_permissions', null)),
        create_table_default_permissions: build.template(std.get(block, 'create_table_default_permissions', null)),
        external_data_filtering_allow_list: build.template(std.get(block, 'external_data_filtering_allow_list', null)),
        id: build.template(std.get(block, 'id', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        read_only_admins: build.template(std.get(block, 'read_only_admins', null)),
        trusted_resource_owners: build.template(std.get(block, 'trusted_resource_owners', null)),
      }),
      admins: resource.field('admins'),
      allow_external_data_filtering: resource.field('allow_external_data_filtering'),
      allow_full_table_external_data_access: resource.field('allow_full_table_external_data_access'),
      authorized_session_tag_value_list: resource.field('authorized_session_tag_value_list'),
      catalog_id: resource.field('catalog_id'),
      create_database_default_permissions: resource.field('create_database_default_permissions'),
      create_table_default_permissions: resource.field('create_table_default_permissions'),
      external_data_filtering_allow_list: resource.field('external_data_filtering_allow_list'),
      id: resource.field('id'),
      parameters: resource.field('parameters'),
      read_only_admins: resource.field('read_only_admins'),
      trusted_resource_owners: resource.field('trusted_resource_owners'),
    },
    lakeformation_permissions(name, block): {
      local resource = blockType.resource('aws_lakeformation_permissions', name),
      _: resource._(block, {
        catalog_id: build.template(std.get(block, 'catalog_id', null)),
        catalog_resource: build.template(std.get(block, 'catalog_resource', null)),
        id: build.template(std.get(block, 'id', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
        permissions_with_grant_option: build.template(std.get(block, 'permissions_with_grant_option', null)),
        principal: build.template(block.principal),
      }),
      catalog_id: resource.field('catalog_id'),
      catalog_resource: resource.field('catalog_resource'),
      id: resource.field('id'),
      permissions: resource.field('permissions'),
      permissions_with_grant_option: resource.field('permissions_with_grant_option'),
      principal: resource.field('principal'),
    },
    lakeformation_resource(name, block): {
      local resource = blockType.resource('aws_lakeformation_resource', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        id: build.template(std.get(block, 'id', null)),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      last_modified: resource.field('last_modified'),
      role_arn: resource.field('role_arn'),
    },
    lambda_alias(name, block): {
      local resource = blockType.resource('aws_lambda_alias', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        function_name: build.template(block.function_name),
        function_version: build.template(std.get(block, 'function_version', null)),
        id: build.template(std.get(block, 'id', null)),
        invoke_arn: build.template(std.get(block, 'invoke_arn', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      function_name: resource.field('function_name'),
      function_version: resource.field('function_version'),
      id: resource.field('id'),
      invoke_arn: resource.field('invoke_arn'),
      name: resource.field('name'),
    },
    lambda_code_signing_config(name, block): {
      local resource = blockType.resource('aws_lambda_code_signing_config', name),
      _: resource._(block, {
        allowed_publishers: build.template(std.get(block, 'allowed_publishers', null)),
        arn: build.template(block.arn),
        config_id: build.template(std.get(block, 'config_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        policies: build.template(std.get(block, 'policies', null)),
      }),
      allowed_publishers: resource.field('allowed_publishers'),
      arn: resource.field('arn'),
      config_id: resource.field('config_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_modified: resource.field('last_modified'),
      policies: resource.field('policies'),
    },
    lambda_function(name, block): {
      local resource = blockType.resource('aws_lambda_function', name),
      _: resource._(block, {
        architectures: build.template(std.get(block, 'architectures', null)),
        arn: build.template(std.get(block, 'arn', null)),
        code_sha256: build.template(std.get(block, 'code_sha256', null)),
        code_signing_config_arn: build.template(std.get(block, 'code_signing_config_arn', null)),
        dead_letter_config: build.template(std.get(block, 'dead_letter_config', null)),
        description: build.template(std.get(block, 'description', null)),
        environment: build.template(std.get(block, 'environment', null)),
        ephemeral_storage: build.template(std.get(block, 'ephemeral_storage', null)),
        file_system_config: build.template(std.get(block, 'file_system_config', null)),
        function_name: build.template(block.function_name),
        handler: build.template(std.get(block, 'handler', null)),
        id: build.template(std.get(block, 'id', null)),
        image_uri: build.template(std.get(block, 'image_uri', null)),
        invoke_arn: build.template(std.get(block, 'invoke_arn', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        layers: build.template(std.get(block, 'layers', null)),
        logging_config: build.template(std.get(block, 'logging_config', null)),
        memory_size: build.template(std.get(block, 'memory_size', null)),
        qualified_arn: build.template(std.get(block, 'qualified_arn', null)),
        qualified_invoke_arn: build.template(std.get(block, 'qualified_invoke_arn', null)),
        qualifier: build.template(std.get(block, 'qualifier', null)),
        reserved_concurrent_executions: build.template(std.get(block, 'reserved_concurrent_executions', null)),
        role: build.template(std.get(block, 'role', null)),
        runtime: build.template(std.get(block, 'runtime', null)),
        signing_job_arn: build.template(std.get(block, 'signing_job_arn', null)),
        signing_profile_version_arn: build.template(std.get(block, 'signing_profile_version_arn', null)),
        source_code_hash: build.template(std.get(block, 'source_code_hash', null)),
        source_code_size: build.template(std.get(block, 'source_code_size', null)),
        tags: build.template(std.get(block, 'tags', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
        tracing_config: build.template(std.get(block, 'tracing_config', null)),
        version: build.template(std.get(block, 'version', null)),
        vpc_config: build.template(std.get(block, 'vpc_config', null)),
      }),
      architectures: resource.field('architectures'),
      arn: resource.field('arn'),
      code_sha256: resource.field('code_sha256'),
      code_signing_config_arn: resource.field('code_signing_config_arn'),
      dead_letter_config: resource.field('dead_letter_config'),
      description: resource.field('description'),
      environment: resource.field('environment'),
      ephemeral_storage: resource.field('ephemeral_storage'),
      file_system_config: resource.field('file_system_config'),
      function_name: resource.field('function_name'),
      handler: resource.field('handler'),
      id: resource.field('id'),
      image_uri: resource.field('image_uri'),
      invoke_arn: resource.field('invoke_arn'),
      kms_key_arn: resource.field('kms_key_arn'),
      last_modified: resource.field('last_modified'),
      layers: resource.field('layers'),
      logging_config: resource.field('logging_config'),
      memory_size: resource.field('memory_size'),
      qualified_arn: resource.field('qualified_arn'),
      qualified_invoke_arn: resource.field('qualified_invoke_arn'),
      qualifier: resource.field('qualifier'),
      reserved_concurrent_executions: resource.field('reserved_concurrent_executions'),
      role: resource.field('role'),
      runtime: resource.field('runtime'),
      signing_job_arn: resource.field('signing_job_arn'),
      signing_profile_version_arn: resource.field('signing_profile_version_arn'),
      source_code_hash: resource.field('source_code_hash'),
      source_code_size: resource.field('source_code_size'),
      tags: resource.field('tags'),
      timeout: resource.field('timeout'),
      tracing_config: resource.field('tracing_config'),
      version: resource.field('version'),
      vpc_config: resource.field('vpc_config'),
    },
    lambda_function_url(name, block): {
      local resource = blockType.resource('aws_lambda_function_url', name),
      _: resource._(block, {
        authorization_type: build.template(std.get(block, 'authorization_type', null)),
        cors: build.template(std.get(block, 'cors', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        function_arn: build.template(std.get(block, 'function_arn', null)),
        function_name: build.template(block.function_name),
        function_url: build.template(std.get(block, 'function_url', null)),
        id: build.template(std.get(block, 'id', null)),
        invoke_mode: build.template(std.get(block, 'invoke_mode', null)),
        last_modified_time: build.template(std.get(block, 'last_modified_time', null)),
        qualifier: build.template(std.get(block, 'qualifier', null)),
        url_id: build.template(std.get(block, 'url_id', null)),
      }),
      authorization_type: resource.field('authorization_type'),
      cors: resource.field('cors'),
      creation_time: resource.field('creation_time'),
      function_arn: resource.field('function_arn'),
      function_name: resource.field('function_name'),
      function_url: resource.field('function_url'),
      id: resource.field('id'),
      invoke_mode: resource.field('invoke_mode'),
      last_modified_time: resource.field('last_modified_time'),
      qualifier: resource.field('qualifier'),
      url_id: resource.field('url_id'),
    },
    lambda_functions(name, block): {
      local resource = blockType.resource('aws_lambda_functions', name),
      _: resource._(block, {
        function_arns: build.template(std.get(block, 'function_arns', null)),
        function_names: build.template(std.get(block, 'function_names', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      function_arns: resource.field('function_arns'),
      function_names: resource.field('function_names'),
      id: resource.field('id'),
    },
    lambda_invocation(name, block): {
      local resource = blockType.resource('aws_lambda_invocation', name),
      _: resource._(block, {
        function_name: build.template(block.function_name),
        id: build.template(std.get(block, 'id', null)),
        input: build.template(block.input),
        qualifier: build.template(std.get(block, 'qualifier', null)),
        result: build.template(std.get(block, 'result', null)),
      }),
      function_name: resource.field('function_name'),
      id: resource.field('id'),
      input: resource.field('input'),
      qualifier: resource.field('qualifier'),
      result: resource.field('result'),
    },
    lambda_layer_version(name, block): {
      local resource = blockType.resource('aws_lambda_layer_version', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        code_sha256: build.template(std.get(block, 'code_sha256', null)),
        compatible_architecture: build.template(std.get(block, 'compatible_architecture', null)),
        compatible_architectures: build.template(std.get(block, 'compatible_architectures', null)),
        compatible_runtime: build.template(std.get(block, 'compatible_runtime', null)),
        compatible_runtimes: build.template(std.get(block, 'compatible_runtimes', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        layer_arn: build.template(std.get(block, 'layer_arn', null)),
        layer_name: build.template(block.layer_name),
        license_info: build.template(std.get(block, 'license_info', null)),
        signing_job_arn: build.template(std.get(block, 'signing_job_arn', null)),
        signing_profile_version_arn: build.template(std.get(block, 'signing_profile_version_arn', null)),
        source_code_hash: build.template(std.get(block, 'source_code_hash', null)),
        source_code_size: build.template(std.get(block, 'source_code_size', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      code_sha256: resource.field('code_sha256'),
      compatible_architecture: resource.field('compatible_architecture'),
      compatible_architectures: resource.field('compatible_architectures'),
      compatible_runtime: resource.field('compatible_runtime'),
      compatible_runtimes: resource.field('compatible_runtimes'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      layer_arn: resource.field('layer_arn'),
      layer_name: resource.field('layer_name'),
      license_info: resource.field('license_info'),
      signing_job_arn: resource.field('signing_job_arn'),
      signing_profile_version_arn: resource.field('signing_profile_version_arn'),
      source_code_hash: resource.field('source_code_hash'),
      source_code_size: resource.field('source_code_size'),
      version: resource.field('version'),
    },
    launch_configuration(name, block): {
      local resource = blockType.resource('aws_launch_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        associate_public_ip_address: build.template(std.get(block, 'associate_public_ip_address', null)),
        ebs_block_device: build.template(std.get(block, 'ebs_block_device', null)),
        ebs_optimized: build.template(std.get(block, 'ebs_optimized', null)),
        enable_monitoring: build.template(std.get(block, 'enable_monitoring', null)),
        ephemeral_block_device: build.template(std.get(block, 'ephemeral_block_device', null)),
        iam_instance_profile: build.template(std.get(block, 'iam_instance_profile', null)),
        id: build.template(std.get(block, 'id', null)),
        image_id: build.template(std.get(block, 'image_id', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        key_name: build.template(std.get(block, 'key_name', null)),
        metadata_options: build.template(std.get(block, 'metadata_options', null)),
        name: build.template(block.name),
        placement_tenancy: build.template(std.get(block, 'placement_tenancy', null)),
        root_block_device: build.template(std.get(block, 'root_block_device', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        spot_price: build.template(std.get(block, 'spot_price', null)),
        user_data: build.template(std.get(block, 'user_data', null)),
      }),
      arn: resource.field('arn'),
      associate_public_ip_address: resource.field('associate_public_ip_address'),
      ebs_block_device: resource.field('ebs_block_device'),
      ebs_optimized: resource.field('ebs_optimized'),
      enable_monitoring: resource.field('enable_monitoring'),
      ephemeral_block_device: resource.field('ephemeral_block_device'),
      iam_instance_profile: resource.field('iam_instance_profile'),
      id: resource.field('id'),
      image_id: resource.field('image_id'),
      instance_type: resource.field('instance_type'),
      key_name: resource.field('key_name'),
      metadata_options: resource.field('metadata_options'),
      name: resource.field('name'),
      placement_tenancy: resource.field('placement_tenancy'),
      root_block_device: resource.field('root_block_device'),
      security_groups: resource.field('security_groups'),
      spot_price: resource.field('spot_price'),
      user_data: resource.field('user_data'),
    },
    launch_template(name, block): {
      local resource = blockType.resource('aws_launch_template', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        block_device_mappings: build.template(std.get(block, 'block_device_mappings', null)),
        capacity_reservation_specification: build.template(std.get(block, 'capacity_reservation_specification', null)),
        cpu_options: build.template(std.get(block, 'cpu_options', null)),
        credit_specification: build.template(std.get(block, 'credit_specification', null)),
        default_version: build.template(std.get(block, 'default_version', null)),
        description: build.template(std.get(block, 'description', null)),
        disable_api_stop: build.template(std.get(block, 'disable_api_stop', null)),
        disable_api_termination: build.template(std.get(block, 'disable_api_termination', null)),
        ebs_optimized: build.template(std.get(block, 'ebs_optimized', null)),
        elastic_gpu_specifications: build.template(std.get(block, 'elastic_gpu_specifications', null)),
        elastic_inference_accelerator: build.template(std.get(block, 'elastic_inference_accelerator', null)),
        enclave_options: build.template(std.get(block, 'enclave_options', null)),
        hibernation_options: build.template(std.get(block, 'hibernation_options', null)),
        iam_instance_profile: build.template(std.get(block, 'iam_instance_profile', null)),
        id: build.template(std.get(block, 'id', null)),
        image_id: build.template(std.get(block, 'image_id', null)),
        instance_initiated_shutdown_behavior: build.template(std.get(block, 'instance_initiated_shutdown_behavior', null)),
        instance_market_options: build.template(std.get(block, 'instance_market_options', null)),
        instance_requirements: build.template(std.get(block, 'instance_requirements', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        kernel_id: build.template(std.get(block, 'kernel_id', null)),
        key_name: build.template(std.get(block, 'key_name', null)),
        latest_version: build.template(std.get(block, 'latest_version', null)),
        license_specification: build.template(std.get(block, 'license_specification', null)),
        maintenance_options: build.template(std.get(block, 'maintenance_options', null)),
        metadata_options: build.template(std.get(block, 'metadata_options', null)),
        monitoring: build.template(std.get(block, 'monitoring', null)),
        name: build.template(std.get(block, 'name', null)),
        network_interfaces: build.template(std.get(block, 'network_interfaces', null)),
        placement: build.template(std.get(block, 'placement', null)),
        private_dns_name_options: build.template(std.get(block, 'private_dns_name_options', null)),
        ram_disk_id: build.template(std.get(block, 'ram_disk_id', null)),
        security_group_names: build.template(std.get(block, 'security_group_names', null)),
        tag_specifications: build.template(std.get(block, 'tag_specifications', null)),
        tags: build.template(std.get(block, 'tags', null)),
        user_data: build.template(std.get(block, 'user_data', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      arn: resource.field('arn'),
      block_device_mappings: resource.field('block_device_mappings'),
      capacity_reservation_specification: resource.field('capacity_reservation_specification'),
      cpu_options: resource.field('cpu_options'),
      credit_specification: resource.field('credit_specification'),
      default_version: resource.field('default_version'),
      description: resource.field('description'),
      disable_api_stop: resource.field('disable_api_stop'),
      disable_api_termination: resource.field('disable_api_termination'),
      ebs_optimized: resource.field('ebs_optimized'),
      elastic_gpu_specifications: resource.field('elastic_gpu_specifications'),
      elastic_inference_accelerator: resource.field('elastic_inference_accelerator'),
      enclave_options: resource.field('enclave_options'),
      hibernation_options: resource.field('hibernation_options'),
      iam_instance_profile: resource.field('iam_instance_profile'),
      id: resource.field('id'),
      image_id: resource.field('image_id'),
      instance_initiated_shutdown_behavior: resource.field('instance_initiated_shutdown_behavior'),
      instance_market_options: resource.field('instance_market_options'),
      instance_requirements: resource.field('instance_requirements'),
      instance_type: resource.field('instance_type'),
      kernel_id: resource.field('kernel_id'),
      key_name: resource.field('key_name'),
      latest_version: resource.field('latest_version'),
      license_specification: resource.field('license_specification'),
      maintenance_options: resource.field('maintenance_options'),
      metadata_options: resource.field('metadata_options'),
      monitoring: resource.field('monitoring'),
      name: resource.field('name'),
      network_interfaces: resource.field('network_interfaces'),
      placement: resource.field('placement'),
      private_dns_name_options: resource.field('private_dns_name_options'),
      ram_disk_id: resource.field('ram_disk_id'),
      security_group_names: resource.field('security_group_names'),
      tag_specifications: resource.field('tag_specifications'),
      tags: resource.field('tags'),
      user_data: resource.field('user_data'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    lb(name, block): {
      local resource = blockType.resource('aws_lb', name),
      _: resource._(block, {
        access_logs: build.template(std.get(block, 'access_logs', null)),
        arn: build.template(std.get(block, 'arn', null)),
        arn_suffix: build.template(std.get(block, 'arn_suffix', null)),
        client_keep_alive: build.template(std.get(block, 'client_keep_alive', null)),
        connection_logs: build.template(std.get(block, 'connection_logs', null)),
        customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null)),
        desync_mitigation_mode: build.template(std.get(block, 'desync_mitigation_mode', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        dns_record_client_routing_policy: build.template(std.get(block, 'dns_record_client_routing_policy', null)),
        drop_invalid_header_fields: build.template(std.get(block, 'drop_invalid_header_fields', null)),
        enable_cross_zone_load_balancing: build.template(std.get(block, 'enable_cross_zone_load_balancing', null)),
        enable_deletion_protection: build.template(std.get(block, 'enable_deletion_protection', null)),
        enable_http2: build.template(std.get(block, 'enable_http2', null)),
        enable_tls_version_and_cipher_suite_headers: build.template(std.get(block, 'enable_tls_version_and_cipher_suite_headers', null)),
        enable_waf_fail_open: build.template(std.get(block, 'enable_waf_fail_open', null)),
        enable_xff_client_port: build.template(std.get(block, 'enable_xff_client_port', null)),
        enable_zonal_shift: build.template(std.get(block, 'enable_zonal_shift', null)),
        enforce_security_group_inbound_rules_on_private_link_traffic: build.template(std.get(block, 'enforce_security_group_inbound_rules_on_private_link_traffic', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout: build.template(std.get(block, 'idle_timeout', null)),
        internal: build.template(std.get(block, 'internal', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        load_balancer_type: build.template(std.get(block, 'load_balancer_type', null)),
        name: build.template(std.get(block, 'name', null)),
        preserve_host_header: build.template(std.get(block, 'preserve_host_header', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        subnet_mapping: build.template(std.get(block, 'subnet_mapping', null)),
        subnets: build.template(std.get(block, 'subnets', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        xff_header_processing_mode: build.template(std.get(block, 'xff_header_processing_mode', null)),
        zone_id: build.template(std.get(block, 'zone_id', null)),
      }),
      access_logs: resource.field('access_logs'),
      arn: resource.field('arn'),
      arn_suffix: resource.field('arn_suffix'),
      client_keep_alive: resource.field('client_keep_alive'),
      connection_logs: resource.field('connection_logs'),
      customer_owned_ipv4_pool: resource.field('customer_owned_ipv4_pool'),
      desync_mitigation_mode: resource.field('desync_mitigation_mode'),
      dns_name: resource.field('dns_name'),
      dns_record_client_routing_policy: resource.field('dns_record_client_routing_policy'),
      drop_invalid_header_fields: resource.field('drop_invalid_header_fields'),
      enable_cross_zone_load_balancing: resource.field('enable_cross_zone_load_balancing'),
      enable_deletion_protection: resource.field('enable_deletion_protection'),
      enable_http2: resource.field('enable_http2'),
      enable_tls_version_and_cipher_suite_headers: resource.field('enable_tls_version_and_cipher_suite_headers'),
      enable_waf_fail_open: resource.field('enable_waf_fail_open'),
      enable_xff_client_port: resource.field('enable_xff_client_port'),
      enable_zonal_shift: resource.field('enable_zonal_shift'),
      enforce_security_group_inbound_rules_on_private_link_traffic: resource.field('enforce_security_group_inbound_rules_on_private_link_traffic'),
      id: resource.field('id'),
      idle_timeout: resource.field('idle_timeout'),
      internal: resource.field('internal'),
      ip_address_type: resource.field('ip_address_type'),
      load_balancer_type: resource.field('load_balancer_type'),
      name: resource.field('name'),
      preserve_host_header: resource.field('preserve_host_header'),
      security_groups: resource.field('security_groups'),
      subnet_mapping: resource.field('subnet_mapping'),
      subnets: resource.field('subnets'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
      xff_header_processing_mode: resource.field('xff_header_processing_mode'),
      zone_id: resource.field('zone_id'),
    },
    lb_hosted_zone_id(name, block): {
      local resource = blockType.resource('aws_lb_hosted_zone_id', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        load_balancer_type: build.template(std.get(block, 'load_balancer_type', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      id: resource.field('id'),
      load_balancer_type: resource.field('load_balancer_type'),
      region: resource.field('region'),
    },
    lb_listener(name, block): {
      local resource = blockType.resource('aws_lb_listener', name),
      _: resource._(block, {
        alpn_policy: build.template(std.get(block, 'alpn_policy', null)),
        arn: build.template(std.get(block, 'arn', null)),
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        default_action: build.template(std.get(block, 'default_action', null)),
        id: build.template(std.get(block, 'id', null)),
        load_balancer_arn: build.template(std.get(block, 'load_balancer_arn', null)),
        mutual_authentication: build.template(std.get(block, 'mutual_authentication', null)),
        port: build.template(std.get(block, 'port', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        ssl_policy: build.template(std.get(block, 'ssl_policy', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      alpn_policy: resource.field('alpn_policy'),
      arn: resource.field('arn'),
      certificate_arn: resource.field('certificate_arn'),
      default_action: resource.field('default_action'),
      id: resource.field('id'),
      load_balancer_arn: resource.field('load_balancer_arn'),
      mutual_authentication: resource.field('mutual_authentication'),
      port: resource.field('port'),
      protocol: resource.field('protocol'),
      ssl_policy: resource.field('ssl_policy'),
      tags: resource.field('tags'),
    },
    lb_listener_rule(name, block): {
      local resource = blockType.resource('aws_lb_listener_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        listener_arn: build.template(std.get(block, 'listener_arn', null)),
        priority: build.template(std.get(block, 'priority', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      listener_arn: resource.field('listener_arn'),
      priority: resource.field('priority'),
      tags: resource.field('tags'),
    },
    lb_target_group(name, block): {
      local resource = blockType.resource('aws_lb_target_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        arn_suffix: build.template(std.get(block, 'arn_suffix', null)),
        connection_termination: build.template(std.get(block, 'connection_termination', null)),
        deregistration_delay: build.template(std.get(block, 'deregistration_delay', null)),
        health_check: build.template(std.get(block, 'health_check', null)),
        id: build.template(std.get(block, 'id', null)),
        lambda_multi_value_headers_enabled: build.template(std.get(block, 'lambda_multi_value_headers_enabled', null)),
        load_balancer_arns: build.template(std.get(block, 'load_balancer_arns', null)),
        load_balancing_algorithm_type: build.template(std.get(block, 'load_balancing_algorithm_type', null)),
        load_balancing_anomaly_mitigation: build.template(std.get(block, 'load_balancing_anomaly_mitigation', null)),
        load_balancing_cross_zone_enabled: build.template(std.get(block, 'load_balancing_cross_zone_enabled', null)),
        name: build.template(std.get(block, 'name', null)),
        port: build.template(std.get(block, 'port', null)),
        preserve_client_ip: build.template(std.get(block, 'preserve_client_ip', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        protocol_version: build.template(std.get(block, 'protocol_version', null)),
        proxy_protocol_v2: build.template(std.get(block, 'proxy_protocol_v2', null)),
        slow_start: build.template(std.get(block, 'slow_start', null)),
        stickiness: build.template(std.get(block, 'stickiness', null)),
        tags: build.template(std.get(block, 'tags', null)),
        target_type: build.template(std.get(block, 'target_type', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      arn_suffix: resource.field('arn_suffix'),
      connection_termination: resource.field('connection_termination'),
      deregistration_delay: resource.field('deregistration_delay'),
      health_check: resource.field('health_check'),
      id: resource.field('id'),
      lambda_multi_value_headers_enabled: resource.field('lambda_multi_value_headers_enabled'),
      load_balancer_arns: resource.field('load_balancer_arns'),
      load_balancing_algorithm_type: resource.field('load_balancing_algorithm_type'),
      load_balancing_anomaly_mitigation: resource.field('load_balancing_anomaly_mitigation'),
      load_balancing_cross_zone_enabled: resource.field('load_balancing_cross_zone_enabled'),
      name: resource.field('name'),
      port: resource.field('port'),
      preserve_client_ip: resource.field('preserve_client_ip'),
      protocol: resource.field('protocol'),
      protocol_version: resource.field('protocol_version'),
      proxy_protocol_v2: resource.field('proxy_protocol_v2'),
      slow_start: resource.field('slow_start'),
      stickiness: resource.field('stickiness'),
      tags: resource.field('tags'),
      target_type: resource.field('target_type'),
      vpc_id: resource.field('vpc_id'),
    },
    lb_trust_store(name, block): {
      local resource = blockType.resource('aws_lb_trust_store', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    lbs(name, block): {
      local resource = blockType.resource('aws_lbs', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      tags: resource.field('tags'),
    },
    lex_bot(name, block): {
      local resource = blockType.resource('aws_lex_bot', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        checksum: build.template(std.get(block, 'checksum', null)),
        child_directed: build.template(std.get(block, 'child_directed', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        detect_sentiment: build.template(std.get(block, 'detect_sentiment', null)),
        enable_model_improvements: build.template(std.get(block, 'enable_model_improvements', null)),
        failure_reason: build.template(std.get(block, 'failure_reason', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_session_ttl_in_seconds: build.template(std.get(block, 'idle_session_ttl_in_seconds', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        locale: build.template(std.get(block, 'locale', null)),
        name: build.template(block.name),
        nlu_intent_confidence_threshold: build.template(std.get(block, 'nlu_intent_confidence_threshold', null)),
        status: build.template(std.get(block, 'status', null)),
        version: build.template(std.get(block, 'version', null)),
        voice_id: build.template(std.get(block, 'voice_id', null)),
      }),
      arn: resource.field('arn'),
      checksum: resource.field('checksum'),
      child_directed: resource.field('child_directed'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      detect_sentiment: resource.field('detect_sentiment'),
      enable_model_improvements: resource.field('enable_model_improvements'),
      failure_reason: resource.field('failure_reason'),
      id: resource.field('id'),
      idle_session_ttl_in_seconds: resource.field('idle_session_ttl_in_seconds'),
      last_updated_date: resource.field('last_updated_date'),
      locale: resource.field('locale'),
      name: resource.field('name'),
      nlu_intent_confidence_threshold: resource.field('nlu_intent_confidence_threshold'),
      status: resource.field('status'),
      version: resource.field('version'),
      voice_id: resource.field('voice_id'),
    },
    lex_bot_alias(name, block): {
      local resource = blockType.resource('aws_lex_bot_alias', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bot_name: build.template(block.bot_name),
        bot_version: build.template(std.get(block, 'bot_version', null)),
        checksum: build.template(std.get(block, 'checksum', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      bot_name: resource.field('bot_name'),
      bot_version: resource.field('bot_version'),
      checksum: resource.field('checksum'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      name: resource.field('name'),
    },
    lex_intent(name, block): {
      local resource = blockType.resource('aws_lex_intent', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        checksum: build.template(std.get(block, 'checksum', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        name: build.template(block.name),
        parent_intent_signature: build.template(std.get(block, 'parent_intent_signature', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      checksum: resource.field('checksum'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      name: resource.field('name'),
      parent_intent_signature: resource.field('parent_intent_signature'),
      version: resource.field('version'),
    },
    lex_slot_type(name, block): {
      local resource = blockType.resource('aws_lex_slot_type', name),
      _: resource._(block, {
        checksum: build.template(std.get(block, 'checksum', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        enumeration_value: build.template(std.get(block, 'enumeration_value', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        name: build.template(block.name),
        value_selection_strategy: build.template(std.get(block, 'value_selection_strategy', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      checksum: resource.field('checksum'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      enumeration_value: resource.field('enumeration_value'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      name: resource.field('name'),
      value_selection_strategy: resource.field('value_selection_strategy'),
      version: resource.field('version'),
    },
    licensemanager_grants(name, block): {
      local resource = blockType.resource('aws_licensemanager_grants', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
    },
    licensemanager_received_license(name, block): {
      local resource = blockType.resource('aws_licensemanager_received_license', name),
      _: resource._(block, {
        beneficiary: build.template(std.get(block, 'beneficiary', null)),
        consumption_configuration: build.template(std.get(block, 'consumption_configuration', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        entitlements: build.template(std.get(block, 'entitlements', null)),
        home_region: build.template(std.get(block, 'home_region', null)),
        id: build.template(std.get(block, 'id', null)),
        issuer: build.template(std.get(block, 'issuer', null)),
        license_arn: build.template(block.license_arn),
        license_metadata: build.template(std.get(block, 'license_metadata', null)),
        license_name: build.template(std.get(block, 'license_name', null)),
        product_name: build.template(std.get(block, 'product_name', null)),
        product_sku: build.template(std.get(block, 'product_sku', null)),
        received_metadata: build.template(std.get(block, 'received_metadata', null)),
        status: build.template(std.get(block, 'status', null)),
        validity: build.template(std.get(block, 'validity', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      beneficiary: resource.field('beneficiary'),
      consumption_configuration: resource.field('consumption_configuration'),
      create_time: resource.field('create_time'),
      entitlements: resource.field('entitlements'),
      home_region: resource.field('home_region'),
      id: resource.field('id'),
      issuer: resource.field('issuer'),
      license_arn: resource.field('license_arn'),
      license_metadata: resource.field('license_metadata'),
      license_name: resource.field('license_name'),
      product_name: resource.field('product_name'),
      product_sku: resource.field('product_sku'),
      received_metadata: resource.field('received_metadata'),
      status: resource.field('status'),
      validity: resource.field('validity'),
      version: resource.field('version'),
    },
    licensemanager_received_licenses(name, block): {
      local resource = blockType.resource('aws_licensemanager_received_licenses', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
    },
    location_geofence_collection(name, block): {
      local resource = blockType.resource('aws_location_geofence_collection', name),
      _: resource._(block, {
        collection_arn: build.template(std.get(block, 'collection_arn', null)),
        collection_name: build.template(block.collection_name),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      collection_arn: resource.field('collection_arn'),
      collection_name: resource.field('collection_name'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      tags: resource.field('tags'),
      update_time: resource.field('update_time'),
    },
    location_map(name, block): {
      local resource = blockType.resource('aws_location_map', name),
      _: resource._(block, {
        configuration: build.template(std.get(block, 'configuration', null)),
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        map_arn: build.template(std.get(block, 'map_arn', null)),
        map_name: build.template(block.map_name),
        tags: build.template(std.get(block, 'tags', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      configuration: resource.field('configuration'),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      map_arn: resource.field('map_arn'),
      map_name: resource.field('map_name'),
      tags: resource.field('tags'),
      update_time: resource.field('update_time'),
    },
    location_place_index(name, block): {
      local resource = blockType.resource('aws_location_place_index', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        data_source: build.template(std.get(block, 'data_source', null)),
        data_source_configuration: build.template(std.get(block, 'data_source_configuration', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        index_arn: build.template(std.get(block, 'index_arn', null)),
        index_name: build.template(block.index_name),
        tags: build.template(std.get(block, 'tags', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      data_source: resource.field('data_source'),
      data_source_configuration: resource.field('data_source_configuration'),
      description: resource.field('description'),
      id: resource.field('id'),
      index_arn: resource.field('index_arn'),
      index_name: resource.field('index_name'),
      tags: resource.field('tags'),
      update_time: resource.field('update_time'),
    },
    location_route_calculator(name, block): {
      local resource = blockType.resource('aws_location_route_calculator', name),
      _: resource._(block, {
        calculator_arn: build.template(std.get(block, 'calculator_arn', null)),
        calculator_name: build.template(block.calculator_name),
        create_time: build.template(std.get(block, 'create_time', null)),
        data_source: build.template(std.get(block, 'data_source', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      calculator_arn: resource.field('calculator_arn'),
      calculator_name: resource.field('calculator_name'),
      create_time: resource.field('create_time'),
      data_source: resource.field('data_source'),
      description: resource.field('description'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      update_time: resource.field('update_time'),
    },
    location_tracker(name, block): {
      local resource = blockType.resource('aws_location_tracker', name),
      _: resource._(block, {
        create_time: build.template(std.get(block, 'create_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        position_filtering: build.template(std.get(block, 'position_filtering', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tracker_arn: build.template(std.get(block, 'tracker_arn', null)),
        tracker_name: build.template(block.tracker_name),
        update_time: build.template(std.get(block, 'update_time', null)),
      }),
      create_time: resource.field('create_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      position_filtering: resource.field('position_filtering'),
      tags: resource.field('tags'),
      tracker_arn: resource.field('tracker_arn'),
      tracker_name: resource.field('tracker_name'),
      update_time: resource.field('update_time'),
    },
    location_tracker_association(name, block): {
      local resource = blockType.resource('aws_location_tracker_association', name),
      _: resource._(block, {
        consumer_arn: build.template(block.consumer_arn),
        id: build.template(std.get(block, 'id', null)),
        tracker_name: build.template(block.tracker_name),
      }),
      consumer_arn: resource.field('consumer_arn'),
      id: resource.field('id'),
      tracker_name: resource.field('tracker_name'),
    },
    location_tracker_associations(name, block): {
      local resource = blockType.resource('aws_location_tracker_associations', name),
      _: resource._(block, {
        consumer_arns: build.template(std.get(block, 'consumer_arns', null)),
        id: build.template(std.get(block, 'id', null)),
        tracker_name: build.template(block.tracker_name),
      }),
      consumer_arns: resource.field('consumer_arns'),
      id: resource.field('id'),
      tracker_name: resource.field('tracker_name'),
    },
    media_convert_queue(name, block): {
      local resource = blockType.resource('aws_media_convert_queue', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(block.id),
        name: build.template(std.get(block, 'name', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      status: resource.field('status'),
      tags: resource.field('tags'),
    },
    medialive_input(name, block): {
      local resource = blockType.resource('aws_medialive_input', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        attached_channels: build.template(std.get(block, 'attached_channels', null)),
        destinations: build.template(std.get(block, 'destinations', null)),
        id: build.template(block.id),
        input_class: build.template(std.get(block, 'input_class', null)),
        input_devices: build.template(std.get(block, 'input_devices', null)),
        input_partner_ids: build.template(std.get(block, 'input_partner_ids', null)),
        input_source_type: build.template(std.get(block, 'input_source_type', null)),
        media_connect_flows: build.template(std.get(block, 'media_connect_flows', null)),
        name: build.template(std.get(block, 'name', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        sources: build.template(std.get(block, 'sources', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      attached_channels: resource.field('attached_channels'),
      destinations: resource.field('destinations'),
      id: resource.field('id'),
      input_class: resource.field('input_class'),
      input_devices: resource.field('input_devices'),
      input_partner_ids: resource.field('input_partner_ids'),
      input_source_type: resource.field('input_source_type'),
      media_connect_flows: resource.field('media_connect_flows'),
      name: resource.field('name'),
      role_arn: resource.field('role_arn'),
      security_groups: resource.field('security_groups'),
      sources: resource.field('sources'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      type: resource.field('type'),
    },
    memorydb_acl(name, block): {
      local resource = blockType.resource('aws_memorydb_acl', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        minimum_engine_version: build.template(std.get(block, 'minimum_engine_version', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        user_names: build.template(std.get(block, 'user_names', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      minimum_engine_version: resource.field('minimum_engine_version'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      user_names: resource.field('user_names'),
    },
    memorydb_cluster(name, block): {
      local resource = blockType.resource('aws_memorydb_cluster', name),
      _: resource._(block, {
        acl_name: build.template(std.get(block, 'acl_name', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null)),
        cluster_endpoint: build.template(std.get(block, 'cluster_endpoint', null)),
        data_tiering: build.template(std.get(block, 'data_tiering', null)),
        description: build.template(std.get(block, 'description', null)),
        engine_patch_version: build.template(std.get(block, 'engine_patch_version', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        final_snapshot_name: build.template(std.get(block, 'final_snapshot_name', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        maintenance_window: build.template(std.get(block, 'maintenance_window', null)),
        name: build.template(block.name),
        node_type: build.template(std.get(block, 'node_type', null)),
        num_replicas_per_shard: build.template(std.get(block, 'num_replicas_per_shard', null)),
        num_shards: build.template(std.get(block, 'num_shards', null)),
        parameter_group_name: build.template(std.get(block, 'parameter_group_name', null)),
        port: build.template(std.get(block, 'port', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        shards: build.template(std.get(block, 'shards', null)),
        snapshot_retention_limit: build.template(std.get(block, 'snapshot_retention_limit', null)),
        snapshot_window: build.template(std.get(block, 'snapshot_window', null)),
        sns_topic_arn: build.template(std.get(block, 'sns_topic_arn', null)),
        subnet_group_name: build.template(std.get(block, 'subnet_group_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tls_enabled: build.template(std.get(block, 'tls_enabled', null)),
      }),
      acl_name: resource.field('acl_name'),
      arn: resource.field('arn'),
      auto_minor_version_upgrade: resource.field('auto_minor_version_upgrade'),
      cluster_endpoint: resource.field('cluster_endpoint'),
      data_tiering: resource.field('data_tiering'),
      description: resource.field('description'),
      engine_patch_version: resource.field('engine_patch_version'),
      engine_version: resource.field('engine_version'),
      final_snapshot_name: resource.field('final_snapshot_name'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      maintenance_window: resource.field('maintenance_window'),
      name: resource.field('name'),
      node_type: resource.field('node_type'),
      num_replicas_per_shard: resource.field('num_replicas_per_shard'),
      num_shards: resource.field('num_shards'),
      parameter_group_name: resource.field('parameter_group_name'),
      port: resource.field('port'),
      security_group_ids: resource.field('security_group_ids'),
      shards: resource.field('shards'),
      snapshot_retention_limit: resource.field('snapshot_retention_limit'),
      snapshot_window: resource.field('snapshot_window'),
      sns_topic_arn: resource.field('sns_topic_arn'),
      subnet_group_name: resource.field('subnet_group_name'),
      tags: resource.field('tags'),
      tls_enabled: resource.field('tls_enabled'),
    },
    memorydb_parameter_group(name, block): {
      local resource = blockType.resource('aws_memorydb_parameter_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        family: build.template(std.get(block, 'family', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parameter: build.template(std.get(block, 'parameter', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      family: resource.field('family'),
      id: resource.field('id'),
      name: resource.field('name'),
      parameter: resource.field('parameter'),
      tags: resource.field('tags'),
    },
    memorydb_snapshot(name, block): {
      local resource = blockType.resource('aws_memorydb_snapshot', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cluster_configuration: build.template(std.get(block, 'cluster_configuration', null)),
        cluster_name: build.template(std.get(block, 'cluster_name', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        name: build.template(block.name),
        source: build.template(std.get(block, 'source', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      cluster_configuration: resource.field('cluster_configuration'),
      cluster_name: resource.field('cluster_name'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      name: resource.field('name'),
      source: resource.field('source'),
      tags: resource.field('tags'),
    },
    memorydb_subnet_group(name, block): {
      local resource = blockType.resource('aws_memorydb_subnet_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    memorydb_user(name, block): {
      local resource = blockType.resource('aws_memorydb_user', name),
      _: resource._(block, {
        access_string: build.template(std.get(block, 'access_string', null)),
        arn: build.template(std.get(block, 'arn', null)),
        authentication_mode: build.template(std.get(block, 'authentication_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        minimum_engine_version: build.template(std.get(block, 'minimum_engine_version', null)),
        tags: build.template(std.get(block, 'tags', null)),
        user_name: build.template(block.user_name),
      }),
      access_string: resource.field('access_string'),
      arn: resource.field('arn'),
      authentication_mode: resource.field('authentication_mode'),
      id: resource.field('id'),
      minimum_engine_version: resource.field('minimum_engine_version'),
      tags: resource.field('tags'),
      user_name: resource.field('user_name'),
    },
    mq_broker(name, block): {
      local resource = blockType.resource('aws_mq_broker', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        authentication_strategy: build.template(std.get(block, 'authentication_strategy', null)),
        auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null)),
        broker_id: build.template(std.get(block, 'broker_id', null)),
        broker_name: build.template(std.get(block, 'broker_name', null)),
        configuration: build.template(std.get(block, 'configuration', null)),
        deployment_mode: build.template(std.get(block, 'deployment_mode', null)),
        encryption_options: build.template(std.get(block, 'encryption_options', null)),
        engine_type: build.template(std.get(block, 'engine_type', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        host_instance_type: build.template(std.get(block, 'host_instance_type', null)),
        id: build.template(std.get(block, 'id', null)),
        instances: build.template(std.get(block, 'instances', null)),
        ldap_server_metadata: build.template(std.get(block, 'ldap_server_metadata', null)),
        logs: build.template(std.get(block, 'logs', null)),
        maintenance_window_start_time: build.template(std.get(block, 'maintenance_window_start_time', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        user: build.template(std.get(block, 'user', null)),
      }),
      arn: resource.field('arn'),
      authentication_strategy: resource.field('authentication_strategy'),
      auto_minor_version_upgrade: resource.field('auto_minor_version_upgrade'),
      broker_id: resource.field('broker_id'),
      broker_name: resource.field('broker_name'),
      configuration: resource.field('configuration'),
      deployment_mode: resource.field('deployment_mode'),
      encryption_options: resource.field('encryption_options'),
      engine_type: resource.field('engine_type'),
      engine_version: resource.field('engine_version'),
      host_instance_type: resource.field('host_instance_type'),
      id: resource.field('id'),
      instances: resource.field('instances'),
      ldap_server_metadata: resource.field('ldap_server_metadata'),
      logs: resource.field('logs'),
      maintenance_window_start_time: resource.field('maintenance_window_start_time'),
      publicly_accessible: resource.field('publicly_accessible'),
      security_groups: resource.field('security_groups'),
      storage_type: resource.field('storage_type'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      user: resource.field('user'),
    },
    mq_broker_engine_types(name, block): {
      local resource = blockType.resource('aws_mq_broker_engine_types', name),
      _: resource._(block, {
        broker_engine_types: build.template(std.get(block, 'broker_engine_types', null)),
        engine_type: build.template(std.get(block, 'engine_type', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      broker_engine_types: resource.field('broker_engine_types'),
      engine_type: resource.field('engine_type'),
      id: resource.field('id'),
    },
    mq_broker_instance_type_offerings(name, block): {
      local resource = blockType.resource('aws_mq_broker_instance_type_offerings', name),
      _: resource._(block, {
        broker_instance_options: build.template(std.get(block, 'broker_instance_options', null)),
        engine_type: build.template(std.get(block, 'engine_type', null)),
        host_instance_type: build.template(std.get(block, 'host_instance_type', null)),
        id: build.template(std.get(block, 'id', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
      }),
      broker_instance_options: resource.field('broker_instance_options'),
      engine_type: resource.field('engine_type'),
      host_instance_type: resource.field('host_instance_type'),
      id: resource.field('id'),
      storage_type: resource.field('storage_type'),
    },
    msk_bootstrap_brokers(name, block): {
      local resource = blockType.resource('aws_msk_bootstrap_brokers', name),
      _: resource._(block, {
        bootstrap_brokers: build.template(std.get(block, 'bootstrap_brokers', null)),
        bootstrap_brokers_public_sasl_iam: build.template(std.get(block, 'bootstrap_brokers_public_sasl_iam', null)),
        bootstrap_brokers_public_sasl_scram: build.template(std.get(block, 'bootstrap_brokers_public_sasl_scram', null)),
        bootstrap_brokers_public_tls: build.template(std.get(block, 'bootstrap_brokers_public_tls', null)),
        bootstrap_brokers_sasl_iam: build.template(std.get(block, 'bootstrap_brokers_sasl_iam', null)),
        bootstrap_brokers_sasl_scram: build.template(std.get(block, 'bootstrap_brokers_sasl_scram', null)),
        bootstrap_brokers_tls: build.template(std.get(block, 'bootstrap_brokers_tls', null)),
        bootstrap_brokers_vpc_connectivity_sasl_iam: build.template(std.get(block, 'bootstrap_brokers_vpc_connectivity_sasl_iam', null)),
        bootstrap_brokers_vpc_connectivity_sasl_scram: build.template(std.get(block, 'bootstrap_brokers_vpc_connectivity_sasl_scram', null)),
        bootstrap_brokers_vpc_connectivity_tls: build.template(std.get(block, 'bootstrap_brokers_vpc_connectivity_tls', null)),
        cluster_arn: build.template(block.cluster_arn),
        id: build.template(std.get(block, 'id', null)),
      }),
      bootstrap_brokers: resource.field('bootstrap_brokers'),
      bootstrap_brokers_public_sasl_iam: resource.field('bootstrap_brokers_public_sasl_iam'),
      bootstrap_brokers_public_sasl_scram: resource.field('bootstrap_brokers_public_sasl_scram'),
      bootstrap_brokers_public_tls: resource.field('bootstrap_brokers_public_tls'),
      bootstrap_brokers_sasl_iam: resource.field('bootstrap_brokers_sasl_iam'),
      bootstrap_brokers_sasl_scram: resource.field('bootstrap_brokers_sasl_scram'),
      bootstrap_brokers_tls: resource.field('bootstrap_brokers_tls'),
      bootstrap_brokers_vpc_connectivity_sasl_iam: resource.field('bootstrap_brokers_vpc_connectivity_sasl_iam'),
      bootstrap_brokers_vpc_connectivity_sasl_scram: resource.field('bootstrap_brokers_vpc_connectivity_sasl_scram'),
      bootstrap_brokers_vpc_connectivity_tls: resource.field('bootstrap_brokers_vpc_connectivity_tls'),
      cluster_arn: resource.field('cluster_arn'),
      id: resource.field('id'),
    },
    msk_broker_nodes(name, block): {
      local resource = blockType.resource('aws_msk_broker_nodes', name),
      _: resource._(block, {
        cluster_arn: build.template(block.cluster_arn),
        id: build.template(std.get(block, 'id', null)),
        node_info_list: build.template(std.get(block, 'node_info_list', null)),
      }),
      cluster_arn: resource.field('cluster_arn'),
      id: resource.field('id'),
      node_info_list: resource.field('node_info_list'),
    },
    msk_cluster(name, block): {
      local resource = blockType.resource('aws_msk_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bootstrap_brokers: build.template(std.get(block, 'bootstrap_brokers', null)),
        bootstrap_brokers_public_sasl_iam: build.template(std.get(block, 'bootstrap_brokers_public_sasl_iam', null)),
        bootstrap_brokers_public_sasl_scram: build.template(std.get(block, 'bootstrap_brokers_public_sasl_scram', null)),
        bootstrap_brokers_public_tls: build.template(std.get(block, 'bootstrap_brokers_public_tls', null)),
        bootstrap_brokers_sasl_iam: build.template(std.get(block, 'bootstrap_brokers_sasl_iam', null)),
        bootstrap_brokers_sasl_scram: build.template(std.get(block, 'bootstrap_brokers_sasl_scram', null)),
        bootstrap_brokers_tls: build.template(std.get(block, 'bootstrap_brokers_tls', null)),
        broker_node_group_info: build.template(std.get(block, 'broker_node_group_info', null)),
        cluster_name: build.template(block.cluster_name),
        cluster_uuid: build.template(std.get(block, 'cluster_uuid', null)),
        id: build.template(std.get(block, 'id', null)),
        kafka_version: build.template(std.get(block, 'kafka_version', null)),
        number_of_broker_nodes: build.template(std.get(block, 'number_of_broker_nodes', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zookeeper_connect_string: build.template(std.get(block, 'zookeeper_connect_string', null)),
        zookeeper_connect_string_tls: build.template(std.get(block, 'zookeeper_connect_string_tls', null)),
      }),
      arn: resource.field('arn'),
      bootstrap_brokers: resource.field('bootstrap_brokers'),
      bootstrap_brokers_public_sasl_iam: resource.field('bootstrap_brokers_public_sasl_iam'),
      bootstrap_brokers_public_sasl_scram: resource.field('bootstrap_brokers_public_sasl_scram'),
      bootstrap_brokers_public_tls: resource.field('bootstrap_brokers_public_tls'),
      bootstrap_brokers_sasl_iam: resource.field('bootstrap_brokers_sasl_iam'),
      bootstrap_brokers_sasl_scram: resource.field('bootstrap_brokers_sasl_scram'),
      bootstrap_brokers_tls: resource.field('bootstrap_brokers_tls'),
      broker_node_group_info: resource.field('broker_node_group_info'),
      cluster_name: resource.field('cluster_name'),
      cluster_uuid: resource.field('cluster_uuid'),
      id: resource.field('id'),
      kafka_version: resource.field('kafka_version'),
      number_of_broker_nodes: resource.field('number_of_broker_nodes'),
      tags: resource.field('tags'),
      zookeeper_connect_string: resource.field('zookeeper_connect_string'),
      zookeeper_connect_string_tls: resource.field('zookeeper_connect_string_tls'),
    },
    msk_configuration(name, block): {
      local resource = blockType.resource('aws_msk_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kafka_versions: build.template(std.get(block, 'kafka_versions', null)),
        latest_revision: build.template(std.get(block, 'latest_revision', null)),
        name: build.template(block.name),
        server_properties: build.template(std.get(block, 'server_properties', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      kafka_versions: resource.field('kafka_versions'),
      latest_revision: resource.field('latest_revision'),
      name: resource.field('name'),
      server_properties: resource.field('server_properties'),
    },
    msk_kafka_version(name, block): {
      local resource = blockType.resource('aws_msk_kafka_version', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        preferred_versions: build.template(std.get(block, 'preferred_versions', null)),
        status: build.template(std.get(block, 'status', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      id: resource.field('id'),
      preferred_versions: resource.field('preferred_versions'),
      status: resource.field('status'),
      version: resource.field('version'),
    },
    msk_vpc_connection(name, block): {
      local resource = blockType.resource('aws_msk_vpc_connection', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        authentication: build.template(std.get(block, 'authentication', null)),
        client_subnets: build.template(std.get(block, 'client_subnets', null)),
        id: build.template(std.get(block, 'id', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        tags: build.template(std.get(block, 'tags', null)),
        target_cluster_arn: build.template(std.get(block, 'target_cluster_arn', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      authentication: resource.field('authentication'),
      client_subnets: resource.field('client_subnets'),
      id: resource.field('id'),
      security_groups: resource.field('security_groups'),
      tags: resource.field('tags'),
      target_cluster_arn: resource.field('target_cluster_arn'),
      vpc_id: resource.field('vpc_id'),
    },
    mskconnect_connector(name, block): {
      local resource = blockType.resource('aws_mskconnect_connector', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      version: resource.field('version'),
    },
    mskconnect_custom_plugin(name, block): {
      local resource = blockType.resource('aws_mskconnect_custom_plugin', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        latest_revision: build.template(std.get(block, 'latest_revision', null)),
        name: build.template(block.name),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      latest_revision: resource.field('latest_revision'),
      name: resource.field('name'),
      state: resource.field('state'),
      tags: resource.field('tags'),
    },
    mskconnect_worker_configuration(name, block): {
      local resource = blockType.resource('aws_mskconnect_worker_configuration', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        latest_revision: build.template(std.get(block, 'latest_revision', null)),
        name: build.template(block.name),
        properties_file_content: build.template(std.get(block, 'properties_file_content', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      latest_revision: resource.field('latest_revision'),
      name: resource.field('name'),
      properties_file_content: resource.field('properties_file_content'),
      tags: resource.field('tags'),
    },
    nat_gateway(name, block): {
      local resource = blockType.resource('aws_nat_gateway', name),
      _: resource._(block, {
        allocation_id: build.template(std.get(block, 'allocation_id', null)),
        association_id: build.template(std.get(block, 'association_id', null)),
        connectivity_type: build.template(std.get(block, 'connectivity_type', null)),
        id: build.template(std.get(block, 'id', null)),
        network_interface_id: build.template(std.get(block, 'network_interface_id', null)),
        private_ip: build.template(std.get(block, 'private_ip', null)),
        public_ip: build.template(std.get(block, 'public_ip', null)),
        secondary_allocation_ids: build.template(std.get(block, 'secondary_allocation_ids', null)),
        secondary_private_ip_address_count: build.template(std.get(block, 'secondary_private_ip_address_count', null)),
        secondary_private_ip_addresses: build.template(std.get(block, 'secondary_private_ip_addresses', null)),
        state: build.template(std.get(block, 'state', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      allocation_id: resource.field('allocation_id'),
      association_id: resource.field('association_id'),
      connectivity_type: resource.field('connectivity_type'),
      id: resource.field('id'),
      network_interface_id: resource.field('network_interface_id'),
      private_ip: resource.field('private_ip'),
      public_ip: resource.field('public_ip'),
      secondary_allocation_ids: resource.field('secondary_allocation_ids'),
      secondary_private_ip_address_count: resource.field('secondary_private_ip_address_count'),
      secondary_private_ip_addresses: resource.field('secondary_private_ip_addresses'),
      state: resource.field('state'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    nat_gateways(name, block): {
      local resource = blockType.resource('aws_nat_gateways', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    neptune_engine_version(name, block): {
      local resource = blockType.resource('aws_neptune_engine_version', name),
      _: resource._(block, {
        engine: build.template(std.get(block, 'engine', null)),
        engine_description: build.template(std.get(block, 'engine_description', null)),
        exportable_log_types: build.template(std.get(block, 'exportable_log_types', null)),
        id: build.template(std.get(block, 'id', null)),
        parameter_group_family: build.template(std.get(block, 'parameter_group_family', null)),
        preferred_versions: build.template(std.get(block, 'preferred_versions', null)),
        supported_timezones: build.template(std.get(block, 'supported_timezones', null)),
        supports_log_exports_to_cloudwatch: build.template(std.get(block, 'supports_log_exports_to_cloudwatch', null)),
        supports_read_replica: build.template(std.get(block, 'supports_read_replica', null)),
        valid_upgrade_targets: build.template(std.get(block, 'valid_upgrade_targets', null)),
        version: build.template(std.get(block, 'version', null)),
        version_description: build.template(std.get(block, 'version_description', null)),
      }),
      engine: resource.field('engine'),
      engine_description: resource.field('engine_description'),
      exportable_log_types: resource.field('exportable_log_types'),
      id: resource.field('id'),
      parameter_group_family: resource.field('parameter_group_family'),
      preferred_versions: resource.field('preferred_versions'),
      supported_timezones: resource.field('supported_timezones'),
      supports_log_exports_to_cloudwatch: resource.field('supports_log_exports_to_cloudwatch'),
      supports_read_replica: resource.field('supports_read_replica'),
      valid_upgrade_targets: resource.field('valid_upgrade_targets'),
      version: resource.field('version'),
      version_description: resource.field('version_description'),
    },
    neptune_orderable_db_instance(name, block): {
      local resource = blockType.resource('aws_neptune_orderable_db_instance', name),
      _: resource._(block, {
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_class: build.template(std.get(block, 'instance_class', null)),
        license_model: build.template(std.get(block, 'license_model', null)),
        max_iops_per_db_instance: build.template(std.get(block, 'max_iops_per_db_instance', null)),
        max_iops_per_gib: build.template(std.get(block, 'max_iops_per_gib', null)),
        max_storage_size: build.template(std.get(block, 'max_storage_size', null)),
        min_iops_per_db_instance: build.template(std.get(block, 'min_iops_per_db_instance', null)),
        min_iops_per_gib: build.template(std.get(block, 'min_iops_per_gib', null)),
        min_storage_size: build.template(std.get(block, 'min_storage_size', null)),
        multi_az_capable: build.template(std.get(block, 'multi_az_capable', null)),
        preferred_instance_classes: build.template(std.get(block, 'preferred_instance_classes', null)),
        read_replica_capable: build.template(std.get(block, 'read_replica_capable', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        supports_enhanced_monitoring: build.template(std.get(block, 'supports_enhanced_monitoring', null)),
        supports_iam_database_authentication: build.template(std.get(block, 'supports_iam_database_authentication', null)),
        supports_iops: build.template(std.get(block, 'supports_iops', null)),
        supports_performance_insights: build.template(std.get(block, 'supports_performance_insights', null)),
        supports_storage_encryption: build.template(std.get(block, 'supports_storage_encryption', null)),
        vpc: build.template(std.get(block, 'vpc', null)),
      }),
      availability_zones: resource.field('availability_zones'),
      engine: resource.field('engine'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      instance_class: resource.field('instance_class'),
      license_model: resource.field('license_model'),
      max_iops_per_db_instance: resource.field('max_iops_per_db_instance'),
      max_iops_per_gib: resource.field('max_iops_per_gib'),
      max_storage_size: resource.field('max_storage_size'),
      min_iops_per_db_instance: resource.field('min_iops_per_db_instance'),
      min_iops_per_gib: resource.field('min_iops_per_gib'),
      min_storage_size: resource.field('min_storage_size'),
      multi_az_capable: resource.field('multi_az_capable'),
      preferred_instance_classes: resource.field('preferred_instance_classes'),
      read_replica_capable: resource.field('read_replica_capable'),
      storage_type: resource.field('storage_type'),
      supports_enhanced_monitoring: resource.field('supports_enhanced_monitoring'),
      supports_iam_database_authentication: resource.field('supports_iam_database_authentication'),
      supports_iops: resource.field('supports_iops'),
      supports_performance_insights: resource.field('supports_performance_insights'),
      supports_storage_encryption: resource.field('supports_storage_encryption'),
      vpc: resource.field('vpc'),
    },
    network_acls(name, block): {
      local resource = blockType.resource('aws_network_acls', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    network_interface(name, block): {
      local resource = blockType.resource('aws_network_interface', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        association: build.template(std.get(block, 'association', null)),
        attachment: build.template(std.get(block, 'attachment', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        interface_type: build.template(std.get(block, 'interface_type', null)),
        ipv6_addresses: build.template(std.get(block, 'ipv6_addresses', null)),
        mac_address: build.template(std.get(block, 'mac_address', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        private_dns_name: build.template(std.get(block, 'private_dns_name', null)),
        private_ip: build.template(std.get(block, 'private_ip', null)),
        private_ips: build.template(std.get(block, 'private_ips', null)),
        requester_id: build.template(std.get(block, 'requester_id', null)),
        security_groups: build.template(std.get(block, 'security_groups', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      association: resource.field('association'),
      attachment: resource.field('attachment'),
      availability_zone: resource.field('availability_zone'),
      description: resource.field('description'),
      id: resource.field('id'),
      interface_type: resource.field('interface_type'),
      ipv6_addresses: resource.field('ipv6_addresses'),
      mac_address: resource.field('mac_address'),
      outpost_arn: resource.field('outpost_arn'),
      owner_id: resource.field('owner_id'),
      private_dns_name: resource.field('private_dns_name'),
      private_ip: resource.field('private_ip'),
      private_ips: resource.field('private_ips'),
      requester_id: resource.field('requester_id'),
      security_groups: resource.field('security_groups'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    network_interfaces(name, block): {
      local resource = blockType.resource('aws_network_interfaces', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    networkfirewall_firewall(name, block): {
      local resource = blockType.resource('aws_networkfirewall_firewall', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        delete_protection: build.template(std.get(block, 'delete_protection', null)),
        description: build.template(std.get(block, 'description', null)),
        encryption_configuration: build.template(std.get(block, 'encryption_configuration', null)),
        firewall_policy_arn: build.template(std.get(block, 'firewall_policy_arn', null)),
        firewall_policy_change_protection: build.template(std.get(block, 'firewall_policy_change_protection', null)),
        firewall_status: build.template(std.get(block, 'firewall_status', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        subnet_change_protection: build.template(std.get(block, 'subnet_change_protection', null)),
        subnet_mapping: build.template(std.get(block, 'subnet_mapping', null)),
        tags: build.template(std.get(block, 'tags', null)),
        update_token: build.template(std.get(block, 'update_token', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      delete_protection: resource.field('delete_protection'),
      description: resource.field('description'),
      encryption_configuration: resource.field('encryption_configuration'),
      firewall_policy_arn: resource.field('firewall_policy_arn'),
      firewall_policy_change_protection: resource.field('firewall_policy_change_protection'),
      firewall_status: resource.field('firewall_status'),
      id: resource.field('id'),
      name: resource.field('name'),
      subnet_change_protection: resource.field('subnet_change_protection'),
      subnet_mapping: resource.field('subnet_mapping'),
      tags: resource.field('tags'),
      update_token: resource.field('update_token'),
      vpc_id: resource.field('vpc_id'),
    },
    networkfirewall_firewall_policy(name, block): {
      local resource = blockType.resource('aws_networkfirewall_firewall_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        firewall_policy: build.template(std.get(block, 'firewall_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        update_token: build.template(std.get(block, 'update_token', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      firewall_policy: resource.field('firewall_policy'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      update_token: resource.field('update_token'),
    },
    networkfirewall_resource_policy(name, block): {
      local resource = blockType.resource('aws_networkfirewall_resource_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(std.get(block, 'policy', null)),
        resource_arn: build.template(block.resource_arn),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      resource_arn: resource.field('resource_arn'),
    },
    networkmanager_connection(name, block): {
      local resource = blockType.resource('aws_networkmanager_connection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        connected_device_id: build.template(std.get(block, 'connected_device_id', null)),
        connected_link_id: build.template(std.get(block, 'connected_link_id', null)),
        connection_id: build.template(block.connection_id),
        description: build.template(std.get(block, 'description', null)),
        device_id: build.template(std.get(block, 'device_id', null)),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        link_id: build.template(std.get(block, 'link_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      connected_device_id: resource.field('connected_device_id'),
      connected_link_id: resource.field('connected_link_id'),
      connection_id: resource.field('connection_id'),
      description: resource.field('description'),
      device_id: resource.field('device_id'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      link_id: resource.field('link_id'),
      tags: resource.field('tags'),
    },
    networkmanager_connections(name, block): {
      local resource = blockType.resource('aws_networkmanager_connections', name),
      _: resource._(block, {
        device_id: build.template(std.get(block, 'device_id', null)),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      device_id: resource.field('device_id'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    networkmanager_core_network_policy_document(name, block): {
      local resource = blockType.resource('aws_networkmanager_core_network_policy_document', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        json: build.template(std.get(block, 'json', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      id: resource.field('id'),
      json: resource.field('json'),
      version: resource.field('version'),
    },
    networkmanager_device(name, block): {
      local resource = blockType.resource('aws_networkmanager_device', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_location: build.template(std.get(block, 'aws_location', null)),
        description: build.template(std.get(block, 'description', null)),
        device_id: build.template(block.device_id),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        model: build.template(std.get(block, 'model', null)),
        serial_number: build.template(std.get(block, 'serial_number', null)),
        site_id: build.template(std.get(block, 'site_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
        vendor: build.template(std.get(block, 'vendor', null)),
      }),
      arn: resource.field('arn'),
      aws_location: resource.field('aws_location'),
      description: resource.field('description'),
      device_id: resource.field('device_id'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      location: resource.field('location'),
      model: resource.field('model'),
      serial_number: resource.field('serial_number'),
      site_id: resource.field('site_id'),
      tags: resource.field('tags'),
      type: resource.field('type'),
      vendor: resource.field('vendor'),
    },
    networkmanager_devices(name, block): {
      local resource = blockType.resource('aws_networkmanager_devices', name),
      _: resource._(block, {
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        site_id: build.template(std.get(block, 'site_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      ids: resource.field('ids'),
      site_id: resource.field('site_id'),
      tags: resource.field('tags'),
    },
    networkmanager_global_network(name, block): {
      local resource = blockType.resource('aws_networkmanager_global_network', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      tags: resource.field('tags'),
    },
    networkmanager_global_networks(name, block): {
      local resource = blockType.resource('aws_networkmanager_global_networks', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    networkmanager_link(name, block): {
      local resource = blockType.resource('aws_networkmanager_link', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bandwidth: build.template(std.get(block, 'bandwidth', null)),
        description: build.template(std.get(block, 'description', null)),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        link_id: build.template(block.link_id),
        provider_name: build.template(std.get(block, 'provider_name', null)),
        site_id: build.template(std.get(block, 'site_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      bandwidth: resource.field('bandwidth'),
      description: resource.field('description'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      link_id: resource.field('link_id'),
      provider_name: resource.field('provider_name'),
      site_id: resource.field('site_id'),
      tags: resource.field('tags'),
      type: resource.field('type'),
    },
    networkmanager_links(name, block): {
      local resource = blockType.resource('aws_networkmanager_links', name),
      _: resource._(block, {
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        provider_name: build.template(std.get(block, 'provider_name', null)),
        site_id: build.template(std.get(block, 'site_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      ids: resource.field('ids'),
      provider_name: resource.field('provider_name'),
      site_id: resource.field('site_id'),
      tags: resource.field('tags'),
      type: resource.field('type'),
    },
    networkmanager_site(name, block): {
      local resource = blockType.resource('aws_networkmanager_site', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        site_id: build.template(block.site_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      location: resource.field('location'),
      site_id: resource.field('site_id'),
      tags: resource.field('tags'),
    },
    networkmanager_sites(name, block): {
      local resource = blockType.resource('aws_networkmanager_sites', name),
      _: resource._(block, {
        global_network_id: build.template(block.global_network_id),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      global_network_id: resource.field('global_network_id'),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    oam_link(name, block): {
      local resource = blockType.resource('aws_oam_link', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        label: build.template(std.get(block, 'label', null)),
        label_template: build.template(std.get(block, 'label_template', null)),
        link_configuration: build.template(std.get(block, 'link_configuration', null)),
        link_id: build.template(std.get(block, 'link_id', null)),
        link_identifier: build.template(block.link_identifier),
        resource_types: build.template(std.get(block, 'resource_types', null)),
        sink_arn: build.template(std.get(block, 'sink_arn', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      label: resource.field('label'),
      label_template: resource.field('label_template'),
      link_configuration: resource.field('link_configuration'),
      link_id: resource.field('link_id'),
      link_identifier: resource.field('link_identifier'),
      resource_types: resource.field('resource_types'),
      sink_arn: resource.field('sink_arn'),
      tags: resource.field('tags'),
    },
    oam_links(name, block): {
      local resource = blockType.resource('aws_oam_links', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
    },
    oam_sink(name, block): {
      local resource = blockType.resource('aws_oam_sink', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        sink_id: build.template(std.get(block, 'sink_id', null)),
        sink_identifier: build.template(block.sink_identifier),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      sink_id: resource.field('sink_id'),
      sink_identifier: resource.field('sink_identifier'),
      tags: resource.field('tags'),
    },
    oam_sinks(name, block): {
      local resource = blockType.resource('aws_oam_sinks', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
    },
    opensearch_domain(name, block): {
      local resource = blockType.resource('aws_opensearch_domain', name),
      _: resource._(block, {
        access_policies: build.template(std.get(block, 'access_policies', null)),
        advanced_options: build.template(std.get(block, 'advanced_options', null)),
        advanced_security_options: build.template(std.get(block, 'advanced_security_options', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_tune_options: build.template(std.get(block, 'auto_tune_options', null)),
        cluster_config: build.template(std.get(block, 'cluster_config', null)),
        cognito_options: build.template(std.get(block, 'cognito_options', null)),
        created: build.template(std.get(block, 'created', null)),
        dashboard_endpoint: build.template(std.get(block, 'dashboard_endpoint', null)),
        dashboard_endpoint_v2: build.template(std.get(block, 'dashboard_endpoint_v2', null)),
        deleted: build.template(std.get(block, 'deleted', null)),
        domain_endpoint_v2_hosted_zone_id: build.template(std.get(block, 'domain_endpoint_v2_hosted_zone_id', null)),
        domain_id: build.template(std.get(block, 'domain_id', null)),
        domain_name: build.template(block.domain_name),
        ebs_options: build.template(std.get(block, 'ebs_options', null)),
        encryption_at_rest: build.template(std.get(block, 'encryption_at_rest', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        endpoint_v2: build.template(std.get(block, 'endpoint_v2', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        kibana_endpoint: build.template(std.get(block, 'kibana_endpoint', null)),
        log_publishing_options: build.template(std.get(block, 'log_publishing_options', null)),
        node_to_node_encryption: build.template(std.get(block, 'node_to_node_encryption', null)),
        processing: build.template(std.get(block, 'processing', null)),
        snapshot_options: build.template(std.get(block, 'snapshot_options', null)),
        software_update_options: build.template(std.get(block, 'software_update_options', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_options: build.template(std.get(block, 'vpc_options', null)),
      }),
      access_policies: resource.field('access_policies'),
      advanced_options: resource.field('advanced_options'),
      advanced_security_options: resource.field('advanced_security_options'),
      arn: resource.field('arn'),
      auto_tune_options: resource.field('auto_tune_options'),
      cluster_config: resource.field('cluster_config'),
      cognito_options: resource.field('cognito_options'),
      created: resource.field('created'),
      dashboard_endpoint: resource.field('dashboard_endpoint'),
      dashboard_endpoint_v2: resource.field('dashboard_endpoint_v2'),
      deleted: resource.field('deleted'),
      domain_endpoint_v2_hosted_zone_id: resource.field('domain_endpoint_v2_hosted_zone_id'),
      domain_id: resource.field('domain_id'),
      domain_name: resource.field('domain_name'),
      ebs_options: resource.field('ebs_options'),
      encryption_at_rest: resource.field('encryption_at_rest'),
      endpoint: resource.field('endpoint'),
      endpoint_v2: resource.field('endpoint_v2'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      ip_address_type: resource.field('ip_address_type'),
      kibana_endpoint: resource.field('kibana_endpoint'),
      log_publishing_options: resource.field('log_publishing_options'),
      node_to_node_encryption: resource.field('node_to_node_encryption'),
      processing: resource.field('processing'),
      snapshot_options: resource.field('snapshot_options'),
      software_update_options: resource.field('software_update_options'),
      tags: resource.field('tags'),
      vpc_options: resource.field('vpc_options'),
    },
    opensearchserverless_access_policy(name, block): {
      local resource = blockType.resource('aws_opensearchserverless_access_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy: build.template(std.get(block, 'policy', null)),
        policy_version: build.template(std.get(block, 'policy_version', null)),
        type: build.template(block.type),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy: resource.field('policy'),
      policy_version: resource.field('policy_version'),
      type: resource.field('type'),
    },
    opensearchserverless_collection(name, block): {
      local resource = blockType.resource('aws_opensearchserverless_collection', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        collection_endpoint: build.template(std.get(block, 'collection_endpoint', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        dashboard_endpoint: build.template(std.get(block, 'dashboard_endpoint', null)),
        description: build.template(std.get(block, 'description', null)),
        failure_code: build.template(std.get(block, 'failure_code', null)),
        failure_message: build.template(std.get(block, 'failure_message', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        last_modified_date: build.template(std.get(block, 'last_modified_date', null)),
        name: build.template(std.get(block, 'name', null)),
        standby_replicas: build.template(std.get(block, 'standby_replicas', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      collection_endpoint: resource.field('collection_endpoint'),
      created_date: resource.field('created_date'),
      dashboard_endpoint: resource.field('dashboard_endpoint'),
      description: resource.field('description'),
      failure_code: resource.field('failure_code'),
      failure_message: resource.field('failure_message'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      last_modified_date: resource.field('last_modified_date'),
      name: resource.field('name'),
      standby_replicas: resource.field('standby_replicas'),
      tags: resource.field('tags'),
      type: resource.field('type'),
    },
    opensearchserverless_lifecycle_policy(name, block): {
      local resource = blockType.resource('aws_opensearchserverless_lifecycle_policy', name),
      _: resource._(block, {
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified_date: build.template(std.get(block, 'last_modified_date', null)),
        name: build.template(block.name),
        policy: build.template(std.get(block, 'policy', null)),
        policy_version: build.template(std.get(block, 'policy_version', null)),
        type: build.template(block.type),
      }),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_modified_date: resource.field('last_modified_date'),
      name: resource.field('name'),
      policy: resource.field('policy'),
      policy_version: resource.field('policy_version'),
      type: resource.field('type'),
    },
    opensearchserverless_security_config(name, block): {
      local resource = blockType.resource('aws_opensearchserverless_security_config', name),
      _: resource._(block, {
        config_version: build.template(std.get(block, 'config_version', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(block.id),
        last_modified_date: build.template(std.get(block, 'last_modified_date', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      config_version: resource.field('config_version'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_modified_date: resource.field('last_modified_date'),
      type: resource.field('type'),
    },
    opensearchserverless_security_policy(name, block): {
      local resource = blockType.resource('aws_opensearchserverless_security_policy', name),
      _: resource._(block, {
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified_date: build.template(std.get(block, 'last_modified_date', null)),
        name: build.template(block.name),
        policy: build.template(std.get(block, 'policy', null)),
        policy_version: build.template(std.get(block, 'policy_version', null)),
        type: build.template(block.type),
      }),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_modified_date: resource.field('last_modified_date'),
      name: resource.field('name'),
      policy: resource.field('policy'),
      policy_version: resource.field('policy_version'),
      type: resource.field('type'),
    },
    opensearchserverless_vpc_endpoint(name, block): {
      local resource = blockType.resource('aws_opensearchserverless_vpc_endpoint', name),
      _: resource._(block, {
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        vpc_endpoint_id: build.template(block.vpc_endpoint_id),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      name: resource.field('name'),
      security_group_ids: resource.field('security_group_ids'),
      subnet_ids: resource.field('subnet_ids'),
      vpc_endpoint_id: resource.field('vpc_endpoint_id'),
      vpc_id: resource.field('vpc_id'),
    },
    organizations_delegated_administrators(name, block): {
      local resource = blockType.resource('aws_organizations_delegated_administrators', name),
      _: resource._(block, {
        delegated_administrators: build.template(std.get(block, 'delegated_administrators', null)),
        id: build.template(std.get(block, 'id', null)),
        service_principal: build.template(std.get(block, 'service_principal', null)),
      }),
      delegated_administrators: resource.field('delegated_administrators'),
      id: resource.field('id'),
      service_principal: resource.field('service_principal'),
    },
    organizations_delegated_services(name, block): {
      local resource = blockType.resource('aws_organizations_delegated_services', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        delegated_services: build.template(std.get(block, 'delegated_services', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      account_id: resource.field('account_id'),
      delegated_services: resource.field('delegated_services'),
      id: resource.field('id'),
    },
    organizations_organization(name, block): {
      local resource = blockType.resource('aws_organizations_organization', name),
      _: resource._(block, {
        accounts: build.template(std.get(block, 'accounts', null)),
        arn: build.template(std.get(block, 'arn', null)),
        aws_service_access_principals: build.template(std.get(block, 'aws_service_access_principals', null)),
        enabled_policy_types: build.template(std.get(block, 'enabled_policy_types', null)),
        feature_set: build.template(std.get(block, 'feature_set', null)),
        id: build.template(std.get(block, 'id', null)),
        master_account_arn: build.template(std.get(block, 'master_account_arn', null)),
        master_account_email: build.template(std.get(block, 'master_account_email', null)),
        master_account_id: build.template(std.get(block, 'master_account_id', null)),
        master_account_name: build.template(std.get(block, 'master_account_name', null)),
        non_master_accounts: build.template(std.get(block, 'non_master_accounts', null)),
        roots: build.template(std.get(block, 'roots', null)),
      }),
      accounts: resource.field('accounts'),
      arn: resource.field('arn'),
      aws_service_access_principals: resource.field('aws_service_access_principals'),
      enabled_policy_types: resource.field('enabled_policy_types'),
      feature_set: resource.field('feature_set'),
      id: resource.field('id'),
      master_account_arn: resource.field('master_account_arn'),
      master_account_email: resource.field('master_account_email'),
      master_account_id: resource.field('master_account_id'),
      master_account_name: resource.field('master_account_name'),
      non_master_accounts: resource.field('non_master_accounts'),
      roots: resource.field('roots'),
    },
    organizations_organizational_unit(name, block): {
      local resource = blockType.resource('aws_organizations_organizational_unit', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parent_id: build.template(block.parent_id),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      parent_id: resource.field('parent_id'),
    },
    organizations_organizational_unit_child_accounts(name, block): {
      local resource = blockType.resource('aws_organizations_organizational_unit_child_accounts', name),
      _: resource._(block, {
        accounts: build.template(std.get(block, 'accounts', null)),
        id: build.template(std.get(block, 'id', null)),
        parent_id: build.template(block.parent_id),
      }),
      accounts: resource.field('accounts'),
      id: resource.field('id'),
      parent_id: resource.field('parent_id'),
    },
    organizations_organizational_unit_descendant_accounts(name, block): {
      local resource = blockType.resource('aws_organizations_organizational_unit_descendant_accounts', name),
      _: resource._(block, {
        accounts: build.template(std.get(block, 'accounts', null)),
        id: build.template(std.get(block, 'id', null)),
        parent_id: build.template(block.parent_id),
      }),
      accounts: resource.field('accounts'),
      id: resource.field('id'),
      parent_id: resource.field('parent_id'),
    },
    organizations_organizational_unit_descendant_organizational_units(name, block): {
      local resource = blockType.resource('aws_organizations_organizational_unit_descendant_organizational_units', name),
      _: resource._(block, {
        children: build.template(std.get(block, 'children', null)),
        id: build.template(std.get(block, 'id', null)),
        parent_id: build.template(block.parent_id),
      }),
      children: resource.field('children'),
      id: resource.field('id'),
      parent_id: resource.field('parent_id'),
    },
    organizations_organizational_units(name, block): {
      local resource = blockType.resource('aws_organizations_organizational_units', name),
      _: resource._(block, {
        children: build.template(std.get(block, 'children', null)),
        id: build.template(std.get(block, 'id', null)),
        parent_id: build.template(block.parent_id),
      }),
      children: resource.field('children'),
      id: resource.field('id'),
      parent_id: resource.field('parent_id'),
    },
    organizations_policies(name, block): {
      local resource = blockType.resource('aws_organizations_policies', name),
      _: resource._(block, {
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
      }),
      filter: resource.field('filter'),
      id: resource.field('id'),
      ids: resource.field('ids'),
    },
    organizations_policies_for_target(name, block): {
      local resource = blockType.resource('aws_organizations_policies_for_target', name),
      _: resource._(block, {
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        target_id: build.template(block.target_id),
      }),
      filter: resource.field('filter'),
      id: resource.field('id'),
      ids: resource.field('ids'),
      target_id: resource.field('target_id'),
    },
    organizations_policy(name, block): {
      local resource = blockType.resource('aws_organizations_policy', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_managed: build.template(std.get(block, 'aws_managed', null)),
        content: build.template(std.get(block, 'content', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        policy_id: build.template(block.policy_id),
        type: build.template(std.get(block, 'type', null)),
      }),
      arn: resource.field('arn'),
      aws_managed: resource.field('aws_managed'),
      content: resource.field('content'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_id: resource.field('policy_id'),
      type: resource.field('type'),
    },
    organizations_resource_tags(name, block): {
      local resource = blockType.resource('aws_organizations_resource_tags', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        resource_id: build.template(block.resource_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      resource_id: resource.field('resource_id'),
      tags: resource.field('tags'),
    },
    outposts_asset(name, block): {
      local resource = blockType.resource('aws_outposts_asset', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        asset_id: build.template(block.asset_id),
        asset_type: build.template(std.get(block, 'asset_type', null)),
        host_id: build.template(std.get(block, 'host_id', null)),
        id: build.template(std.get(block, 'id', null)),
        rack_elevation: build.template(std.get(block, 'rack_elevation', null)),
        rack_id: build.template(std.get(block, 'rack_id', null)),
      }),
      arn: resource.field('arn'),
      asset_id: resource.field('asset_id'),
      asset_type: resource.field('asset_type'),
      host_id: resource.field('host_id'),
      id: resource.field('id'),
      rack_elevation: resource.field('rack_elevation'),
      rack_id: resource.field('rack_id'),
    },
    outposts_assets(name, block): {
      local resource = blockType.resource('aws_outposts_assets', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        asset_ids: build.template(std.get(block, 'asset_ids', null)),
        host_id_filter: build.template(std.get(block, 'host_id_filter', null)),
        id: build.template(std.get(block, 'id', null)),
        status_id_filter: build.template(std.get(block, 'status_id_filter', null)),
      }),
      arn: resource.field('arn'),
      asset_ids: resource.field('asset_ids'),
      host_id_filter: resource.field('host_id_filter'),
      id: resource.field('id'),
      status_id_filter: resource.field('status_id_filter'),
    },
    outposts_outpost(name, block): {
      local resource = blockType.resource('aws_outposts_outpost', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        availability_zone_id: build.template(std.get(block, 'availability_zone_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        lifecycle_status: build.template(std.get(block, 'lifecycle_status', null)),
        name: build.template(std.get(block, 'name', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        site_arn: build.template(std.get(block, 'site_arn', null)),
        site_id: build.template(std.get(block, 'site_id', null)),
        supported_hardware_type: build.template(std.get(block, 'supported_hardware_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      availability_zone: resource.field('availability_zone'),
      availability_zone_id: resource.field('availability_zone_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      lifecycle_status: resource.field('lifecycle_status'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      site_arn: resource.field('site_arn'),
      site_id: resource.field('site_id'),
      supported_hardware_type: resource.field('supported_hardware_type'),
      tags: resource.field('tags'),
    },
    outposts_outpost_instance_type(name, block): {
      local resource = blockType.resource('aws_outposts_outpost_instance_type', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        id: build.template(std.get(block, 'id', null)),
        instance_type: build.template(std.get(block, 'instance_type', null)),
        preferred_instance_types: build.template(std.get(block, 'preferred_instance_types', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      instance_type: resource.field('instance_type'),
      preferred_instance_types: resource.field('preferred_instance_types'),
    },
    outposts_outpost_instance_types(name, block): {
      local resource = blockType.resource('aws_outposts_outpost_instance_types', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        id: build.template(std.get(block, 'id', null)),
        instance_types: build.template(std.get(block, 'instance_types', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      instance_types: resource.field('instance_types'),
    },
    outposts_outposts(name, block): {
      local resource = blockType.resource('aws_outposts_outposts', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        availability_zone_id: build.template(std.get(block, 'availability_zone_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        site_id: build.template(std.get(block, 'site_id', null)),
      }),
      arns: resource.field('arns'),
      availability_zone: resource.field('availability_zone'),
      availability_zone_id: resource.field('availability_zone_id'),
      id: resource.field('id'),
      ids: resource.field('ids'),
      owner_id: resource.field('owner_id'),
      site_id: resource.field('site_id'),
    },
    outposts_site(name, block): {
      local resource = blockType.resource('aws_outposts_site', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      account_id: resource.field('account_id'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    outposts_sites(name, block): {
      local resource = blockType.resource('aws_outposts_sites', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
    },
    partition(name, block): {
      local resource = blockType.resource('aws_partition', name),
      _: resource._(block, {
        dns_suffix: build.template(std.get(block, 'dns_suffix', null)),
        id: build.template(std.get(block, 'id', null)),
        partition: build.template(std.get(block, 'partition', null)),
        reverse_dns_prefix: build.template(std.get(block, 'reverse_dns_prefix', null)),
      }),
      dns_suffix: resource.field('dns_suffix'),
      id: resource.field('id'),
      partition: resource.field('partition'),
      reverse_dns_prefix: resource.field('reverse_dns_prefix'),
    },
    polly_voices(name, block): {
      local resource = blockType.resource('aws_polly_voices', name),
      _: resource._(block, {
        engine: build.template(std.get(block, 'engine', null)),
        id: build.template(std.get(block, 'id', null)),
        include_additional_language_codes: build.template(std.get(block, 'include_additional_language_codes', null)),
        language_code: build.template(std.get(block, 'language_code', null)),
      }),
      engine: resource.field('engine'),
      id: resource.field('id'),
      include_additional_language_codes: resource.field('include_additional_language_codes'),
      language_code: resource.field('language_code'),
    },
    prefix_list(name, block): {
      local resource = blockType.resource('aws_prefix_list', name),
      _: resource._(block, {
        cidr_blocks: build.template(std.get(block, 'cidr_blocks', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        prefix_list_id: build.template(std.get(block, 'prefix_list_id', null)),
      }),
      cidr_blocks: resource.field('cidr_blocks'),
      id: resource.field('id'),
      name: resource.field('name'),
      prefix_list_id: resource.field('prefix_list_id'),
    },
    pricing_product(name, block): {
      local resource = blockType.resource('aws_pricing_product', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        result: build.template(std.get(block, 'result', null)),
        service_code: build.template(block.service_code),
      }),
      id: resource.field('id'),
      result: resource.field('result'),
      service_code: resource.field('service_code'),
    },
    prometheus_default_scraper_configuration(name, block): {
      local resource = blockType.resource('aws_prometheus_default_scraper_configuration', name),
      _: resource._(block, {
        configuration: build.template(std.get(block, 'configuration', null)),
      }),
      configuration: resource.field('configuration'),
    },
    prometheus_workspace(name, block): {
      local resource = blockType.resource('aws_prometheus_workspace', name),
      _: resource._(block, {
        alias: build.template(std.get(block, 'alias', null)),
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_arn: build.template(std.get(block, 'kms_key_arn', null)),
        prometheus_endpoint: build.template(std.get(block, 'prometheus_endpoint', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      alias: resource.field('alias'),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      kms_key_arn: resource.field('kms_key_arn'),
      prometheus_endpoint: resource.field('prometheus_endpoint'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      workspace_id: resource.field('workspace_id'),
    },
    prometheus_workspaces(name, block): {
      local resource = blockType.resource('aws_prometheus_workspaces', name),
      _: resource._(block, {
        alias_prefix: build.template(std.get(block, 'alias_prefix', null)),
        aliases: build.template(std.get(block, 'aliases', null)),
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        workspace_ids: build.template(std.get(block, 'workspace_ids', null)),
      }),
      alias_prefix: resource.field('alias_prefix'),
      aliases: resource.field('aliases'),
      arns: resource.field('arns'),
      id: resource.field('id'),
      workspace_ids: resource.field('workspace_ids'),
    },
    qldb_ledger(name, block): {
      local resource = blockType.resource('aws_qldb_ledger', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        deletion_protection: build.template(std.get(block, 'deletion_protection', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key: build.template(std.get(block, 'kms_key', null)),
        name: build.template(block.name),
        permissions_mode: build.template(std.get(block, 'permissions_mode', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      deletion_protection: resource.field('deletion_protection'),
      id: resource.field('id'),
      kms_key: resource.field('kms_key'),
      name: resource.field('name'),
      permissions_mode: resource.field('permissions_mode'),
      tags: resource.field('tags'),
    },
    quicksight_analysis(name, block): {
      local resource = blockType.resource('aws_quicksight_analysis', name),
      _: resource._(block, {
        analysis_id: build.template(block.analysis_id),
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        definition: build.template(std.get(block, 'definition', null)),
        id: build.template(std.get(block, 'id', null)),
        last_published_time: build.template(std.get(block, 'last_published_time', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        name: build.template(std.get(block, 'name', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        theme_arn: build.template(std.get(block, 'theme_arn', null)),
      }),
      analysis_id: resource.field('analysis_id'),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      created_time: resource.field('created_time'),
      definition: resource.field('definition'),
      id: resource.field('id'),
      last_published_time: resource.field('last_published_time'),
      last_updated_time: resource.field('last_updated_time'),
      name: resource.field('name'),
      permissions: resource.field('permissions'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      theme_arn: resource.field('theme_arn'),
    },
    quicksight_data_set(name, block): {
      local resource = blockType.resource('aws_quicksight_data_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        column_groups: build.template(std.get(block, 'column_groups', null)),
        column_level_permission_rules: build.template(std.get(block, 'column_level_permission_rules', null)),
        data_set_id: build.template(block.data_set_id),
        data_set_usage_configuration: build.template(std.get(block, 'data_set_usage_configuration', null)),
        field_folders: build.template(std.get(block, 'field_folders', null)),
        id: build.template(std.get(block, 'id', null)),
        import_mode: build.template(std.get(block, 'import_mode', null)),
        logical_table_map: build.template(std.get(block, 'logical_table_map', null)),
        name: build.template(std.get(block, 'name', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
        physical_table_map: build.template(std.get(block, 'physical_table_map', null)),
        row_level_permission_data_set: build.template(std.get(block, 'row_level_permission_data_set', null)),
        row_level_permission_tag_configuration: build.template(std.get(block, 'row_level_permission_tag_configuration', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      column_groups: resource.field('column_groups'),
      column_level_permission_rules: resource.field('column_level_permission_rules'),
      data_set_id: resource.field('data_set_id'),
      data_set_usage_configuration: resource.field('data_set_usage_configuration'),
      field_folders: resource.field('field_folders'),
      id: resource.field('id'),
      import_mode: resource.field('import_mode'),
      logical_table_map: resource.field('logical_table_map'),
      name: resource.field('name'),
      permissions: resource.field('permissions'),
      physical_table_map: resource.field('physical_table_map'),
      row_level_permission_data_set: resource.field('row_level_permission_data_set'),
      row_level_permission_tag_configuration: resource.field('row_level_permission_tag_configuration'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    quicksight_group(name, block): {
      local resource = blockType.resource('aws_quicksight_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        description: build.template(std.get(block, 'description', null)),
        group_name: build.template(block.group_name),
        id: build.template(std.get(block, 'id', null)),
        namespace: build.template(std.get(block, 'namespace', null)),
        principal_id: build.template(std.get(block, 'principal_id', null)),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      description: resource.field('description'),
      group_name: resource.field('group_name'),
      id: resource.field('id'),
      namespace: resource.field('namespace'),
      principal_id: resource.field('principal_id'),
    },
    quicksight_theme(name, block): {
      local resource = blockType.resource('aws_quicksight_theme', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        base_theme_id: build.template(std.get(block, 'base_theme_id', null)),
        configuration: build.template(std.get(block, 'configuration', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        name: build.template(std.get(block, 'name', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        theme_id: build.template(block.theme_id),
        version_description: build.template(std.get(block, 'version_description', null)),
        version_number: build.template(std.get(block, 'version_number', null)),
      }),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      base_theme_id: resource.field('base_theme_id'),
      configuration: resource.field('configuration'),
      created_time: resource.field('created_time'),
      id: resource.field('id'),
      last_updated_time: resource.field('last_updated_time'),
      name: resource.field('name'),
      permissions: resource.field('permissions'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      theme_id: resource.field('theme_id'),
      version_description: resource.field('version_description'),
      version_number: resource.field('version_number'),
    },
    quicksight_user(name, block): {
      local resource = blockType.resource('aws_quicksight_user', name),
      _: resource._(block, {
        active: build.template(std.get(block, 'active', null)),
        arn: build.template(std.get(block, 'arn', null)),
        aws_account_id: build.template(std.get(block, 'aws_account_id', null)),
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_type: build.template(std.get(block, 'identity_type', null)),
        namespace: build.template(std.get(block, 'namespace', null)),
        principal_id: build.template(std.get(block, 'principal_id', null)),
        user_name: build.template(block.user_name),
        user_role: build.template(std.get(block, 'user_role', null)),
      }),
      active: resource.field('active'),
      arn: resource.field('arn'),
      aws_account_id: resource.field('aws_account_id'),
      email: resource.field('email'),
      id: resource.field('id'),
      identity_type: resource.field('identity_type'),
      namespace: resource.field('namespace'),
      principal_id: resource.field('principal_id'),
      user_name: resource.field('user_name'),
      user_role: resource.field('user_role'),
    },
    ram_resource_share(name, block): {
      local resource = blockType.resource('aws_ram_resource_share', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        owning_account_id: build.template(std.get(block, 'owning_account_id', null)),
        resource_arns: build.template(std.get(block, 'resource_arns', null)),
        resource_owner: build.template(block.resource_owner),
        resource_share_status: build.template(std.get(block, 'resource_share_status', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      owning_account_id: resource.field('owning_account_id'),
      resource_arns: resource.field('resource_arns'),
      resource_owner: resource.field('resource_owner'),
      resource_share_status: resource.field('resource_share_status'),
      status: resource.field('status'),
      tags: resource.field('tags'),
    },
    rds_certificate(name, block): {
      local resource = blockType.resource('aws_rds_certificate', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        certificate_type: build.template(std.get(block, 'certificate_type', null)),
        customer_override: build.template(std.get(block, 'customer_override', null)),
        customer_override_valid_till: build.template(std.get(block, 'customer_override_valid_till', null)),
        id: build.template(std.get(block, 'id', null)),
        latest_valid_till: build.template(std.get(block, 'latest_valid_till', null)),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
        valid_from: build.template(std.get(block, 'valid_from', null)),
        valid_till: build.template(std.get(block, 'valid_till', null)),
      }),
      arn: resource.field('arn'),
      certificate_type: resource.field('certificate_type'),
      customer_override: resource.field('customer_override'),
      customer_override_valid_till: resource.field('customer_override_valid_till'),
      id: resource.field('id'),
      latest_valid_till: resource.field('latest_valid_till'),
      thumbprint: resource.field('thumbprint'),
      valid_from: resource.field('valid_from'),
      valid_till: resource.field('valid_till'),
    },
    rds_cluster(name, block): {
      local resource = blockType.resource('aws_rds_cluster', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        backtrack_window: build.template(std.get(block, 'backtrack_window', null)),
        backup_retention_period: build.template(std.get(block, 'backup_retention_period', null)),
        cluster_identifier: build.template(block.cluster_identifier),
        cluster_members: build.template(std.get(block, 'cluster_members', null)),
        cluster_resource_id: build.template(std.get(block, 'cluster_resource_id', null)),
        database_name: build.template(std.get(block, 'database_name', null)),
        db_cluster_parameter_group_name: build.template(std.get(block, 'db_cluster_parameter_group_name', null)),
        db_subnet_group_name: build.template(std.get(block, 'db_subnet_group_name', null)),
        db_system_id: build.template(std.get(block, 'db_system_id', null)),
        enabled_cloudwatch_logs_exports: build.template(std.get(block, 'enabled_cloudwatch_logs_exports', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        engine: build.template(std.get(block, 'engine', null)),
        engine_mode: build.template(std.get(block, 'engine_mode', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        iam_database_authentication_enabled: build.template(std.get(block, 'iam_database_authentication_enabled', null)),
        iam_roles: build.template(std.get(block, 'iam_roles', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        master_user_secret: build.template(std.get(block, 'master_user_secret', null)),
        master_username: build.template(std.get(block, 'master_username', null)),
        network_type: build.template(std.get(block, 'network_type', null)),
        port: build.template(std.get(block, 'port', null)),
        preferred_backup_window: build.template(std.get(block, 'preferred_backup_window', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        reader_endpoint: build.template(std.get(block, 'reader_endpoint', null)),
        replication_source_identifier: build.template(std.get(block, 'replication_source_identifier', null)),
        storage_encrypted: build.template(std.get(block, 'storage_encrypted', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      arn: resource.field('arn'),
      availability_zones: resource.field('availability_zones'),
      backtrack_window: resource.field('backtrack_window'),
      backup_retention_period: resource.field('backup_retention_period'),
      cluster_identifier: resource.field('cluster_identifier'),
      cluster_members: resource.field('cluster_members'),
      cluster_resource_id: resource.field('cluster_resource_id'),
      database_name: resource.field('database_name'),
      db_cluster_parameter_group_name: resource.field('db_cluster_parameter_group_name'),
      db_subnet_group_name: resource.field('db_subnet_group_name'),
      db_system_id: resource.field('db_system_id'),
      enabled_cloudwatch_logs_exports: resource.field('enabled_cloudwatch_logs_exports'),
      endpoint: resource.field('endpoint'),
      engine: resource.field('engine'),
      engine_mode: resource.field('engine_mode'),
      engine_version: resource.field('engine_version'),
      final_snapshot_identifier: resource.field('final_snapshot_identifier'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      iam_database_authentication_enabled: resource.field('iam_database_authentication_enabled'),
      iam_roles: resource.field('iam_roles'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      master_user_secret: resource.field('master_user_secret'),
      master_username: resource.field('master_username'),
      network_type: resource.field('network_type'),
      port: resource.field('port'),
      preferred_backup_window: resource.field('preferred_backup_window'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      reader_endpoint: resource.field('reader_endpoint'),
      replication_source_identifier: resource.field('replication_source_identifier'),
      storage_encrypted: resource.field('storage_encrypted'),
      tags: resource.field('tags'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    rds_cluster_parameter_group(name, block): {
      local resource = blockType.resource('aws_rds_cluster_parameter_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        family: build.template(std.get(block, 'family', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      family: resource.field('family'),
      name: resource.field('name'),
    },
    rds_clusters(name, block): {
      local resource = blockType.resource('aws_rds_clusters', name),
      _: resource._(block, {
        cluster_arns: build.template(std.get(block, 'cluster_arns', null)),
        cluster_identifiers: build.template(std.get(block, 'cluster_identifiers', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      cluster_arns: resource.field('cluster_arns'),
      cluster_identifiers: resource.field('cluster_identifiers'),
      id: resource.field('id'),
    },
    rds_engine_version(name, block): {
      local resource = blockType.resource('aws_rds_engine_version', name),
      _: resource._(block, {
        default_character_set: build.template(std.get(block, 'default_character_set', null)),
        default_only: build.template(std.get(block, 'default_only', null)),
        engine: build.template(block.engine),
        engine_description: build.template(std.get(block, 'engine_description', null)),
        exportable_log_types: build.template(std.get(block, 'exportable_log_types', null)),
        has_major_target: build.template(std.get(block, 'has_major_target', null)),
        has_minor_target: build.template(std.get(block, 'has_minor_target', null)),
        id: build.template(std.get(block, 'id', null)),
        include_all: build.template(std.get(block, 'include_all', null)),
        latest: build.template(std.get(block, 'latest', null)),
        parameter_group_family: build.template(std.get(block, 'parameter_group_family', null)),
        preferred_major_targets: build.template(std.get(block, 'preferred_major_targets', null)),
        preferred_upgrade_targets: build.template(std.get(block, 'preferred_upgrade_targets', null)),
        preferred_versions: build.template(std.get(block, 'preferred_versions', null)),
        status: build.template(std.get(block, 'status', null)),
        supported_character_sets: build.template(std.get(block, 'supported_character_sets', null)),
        supported_feature_names: build.template(std.get(block, 'supported_feature_names', null)),
        supported_modes: build.template(std.get(block, 'supported_modes', null)),
        supported_timezones: build.template(std.get(block, 'supported_timezones', null)),
        supports_global_databases: build.template(std.get(block, 'supports_global_databases', null)),
        supports_limitless_database: build.template(std.get(block, 'supports_limitless_database', null)),
        supports_log_exports_to_cloudwatch: build.template(std.get(block, 'supports_log_exports_to_cloudwatch', null)),
        supports_parallel_query: build.template(std.get(block, 'supports_parallel_query', null)),
        supports_read_replica: build.template(std.get(block, 'supports_read_replica', null)),
        valid_major_targets: build.template(std.get(block, 'valid_major_targets', null)),
        valid_minor_targets: build.template(std.get(block, 'valid_minor_targets', null)),
        valid_upgrade_targets: build.template(std.get(block, 'valid_upgrade_targets', null)),
        version: build.template(std.get(block, 'version', null)),
        version_actual: build.template(std.get(block, 'version_actual', null)),
        version_description: build.template(std.get(block, 'version_description', null)),
      }),
      default_character_set: resource.field('default_character_set'),
      default_only: resource.field('default_only'),
      engine: resource.field('engine'),
      engine_description: resource.field('engine_description'),
      exportable_log_types: resource.field('exportable_log_types'),
      has_major_target: resource.field('has_major_target'),
      has_minor_target: resource.field('has_minor_target'),
      id: resource.field('id'),
      include_all: resource.field('include_all'),
      latest: resource.field('latest'),
      parameter_group_family: resource.field('parameter_group_family'),
      preferred_major_targets: resource.field('preferred_major_targets'),
      preferred_upgrade_targets: resource.field('preferred_upgrade_targets'),
      preferred_versions: resource.field('preferred_versions'),
      status: resource.field('status'),
      supported_character_sets: resource.field('supported_character_sets'),
      supported_feature_names: resource.field('supported_feature_names'),
      supported_modes: resource.field('supported_modes'),
      supported_timezones: resource.field('supported_timezones'),
      supports_global_databases: resource.field('supports_global_databases'),
      supports_limitless_database: resource.field('supports_limitless_database'),
      supports_log_exports_to_cloudwatch: resource.field('supports_log_exports_to_cloudwatch'),
      supports_parallel_query: resource.field('supports_parallel_query'),
      supports_read_replica: resource.field('supports_read_replica'),
      valid_major_targets: resource.field('valid_major_targets'),
      valid_minor_targets: resource.field('valid_minor_targets'),
      valid_upgrade_targets: resource.field('valid_upgrade_targets'),
      version: resource.field('version'),
      version_actual: resource.field('version_actual'),
      version_description: resource.field('version_description'),
    },
    rds_orderable_db_instance(name, block): {
      local resource = blockType.resource('aws_rds_orderable_db_instance', name),
      _: resource._(block, {
        availability_zone_group: build.template(std.get(block, 'availability_zone_group', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        engine: build.template(block.engine),
        engine_latest_version: build.template(std.get(block, 'engine_latest_version', null)),
        engine_version: build.template(std.get(block, 'engine_version', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_class: build.template(std.get(block, 'instance_class', null)),
        license_model: build.template(std.get(block, 'license_model', null)),
        max_iops_per_db_instance: build.template(std.get(block, 'max_iops_per_db_instance', null)),
        max_iops_per_gib: build.template(std.get(block, 'max_iops_per_gib', null)),
        max_storage_size: build.template(std.get(block, 'max_storage_size', null)),
        min_iops_per_db_instance: build.template(std.get(block, 'min_iops_per_db_instance', null)),
        min_iops_per_gib: build.template(std.get(block, 'min_iops_per_gib', null)),
        min_storage_size: build.template(std.get(block, 'min_storage_size', null)),
        multi_az_capable: build.template(std.get(block, 'multi_az_capable', null)),
        outpost_capable: build.template(std.get(block, 'outpost_capable', null)),
        preferred_engine_versions: build.template(std.get(block, 'preferred_engine_versions', null)),
        preferred_instance_classes: build.template(std.get(block, 'preferred_instance_classes', null)),
        read_replica_capable: build.template(std.get(block, 'read_replica_capable', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        supported_engine_modes: build.template(std.get(block, 'supported_engine_modes', null)),
        supported_network_types: build.template(std.get(block, 'supported_network_types', null)),
        supports_clusters: build.template(std.get(block, 'supports_clusters', null)),
        supports_enhanced_monitoring: build.template(std.get(block, 'supports_enhanced_monitoring', null)),
        supports_global_databases: build.template(std.get(block, 'supports_global_databases', null)),
        supports_iam_database_authentication: build.template(std.get(block, 'supports_iam_database_authentication', null)),
        supports_iops: build.template(std.get(block, 'supports_iops', null)),
        supports_kerberos_authentication: build.template(std.get(block, 'supports_kerberos_authentication', null)),
        supports_multi_az: build.template(std.get(block, 'supports_multi_az', null)),
        supports_performance_insights: build.template(std.get(block, 'supports_performance_insights', null)),
        supports_storage_autoscaling: build.template(std.get(block, 'supports_storage_autoscaling', null)),
        supports_storage_encryption: build.template(std.get(block, 'supports_storage_encryption', null)),
        vpc: build.template(std.get(block, 'vpc', null)),
      }),
      availability_zone_group: resource.field('availability_zone_group'),
      availability_zones: resource.field('availability_zones'),
      engine: resource.field('engine'),
      engine_latest_version: resource.field('engine_latest_version'),
      engine_version: resource.field('engine_version'),
      id: resource.field('id'),
      instance_class: resource.field('instance_class'),
      license_model: resource.field('license_model'),
      max_iops_per_db_instance: resource.field('max_iops_per_db_instance'),
      max_iops_per_gib: resource.field('max_iops_per_gib'),
      max_storage_size: resource.field('max_storage_size'),
      min_iops_per_db_instance: resource.field('min_iops_per_db_instance'),
      min_iops_per_gib: resource.field('min_iops_per_gib'),
      min_storage_size: resource.field('min_storage_size'),
      multi_az_capable: resource.field('multi_az_capable'),
      outpost_capable: resource.field('outpost_capable'),
      preferred_engine_versions: resource.field('preferred_engine_versions'),
      preferred_instance_classes: resource.field('preferred_instance_classes'),
      read_replica_capable: resource.field('read_replica_capable'),
      storage_type: resource.field('storage_type'),
      supported_engine_modes: resource.field('supported_engine_modes'),
      supported_network_types: resource.field('supported_network_types'),
      supports_clusters: resource.field('supports_clusters'),
      supports_enhanced_monitoring: resource.field('supports_enhanced_monitoring'),
      supports_global_databases: resource.field('supports_global_databases'),
      supports_iam_database_authentication: resource.field('supports_iam_database_authentication'),
      supports_iops: resource.field('supports_iops'),
      supports_kerberos_authentication: resource.field('supports_kerberos_authentication'),
      supports_multi_az: resource.field('supports_multi_az'),
      supports_performance_insights: resource.field('supports_performance_insights'),
      supports_storage_autoscaling: resource.field('supports_storage_autoscaling'),
      supports_storage_encryption: resource.field('supports_storage_encryption'),
      vpc: resource.field('vpc'),
    },
    rds_reserved_instance_offering(name, block): {
      local resource = blockType.resource('aws_rds_reserved_instance_offering', name),
      _: resource._(block, {
        currency_code: build.template(std.get(block, 'currency_code', null)),
        db_instance_class: build.template(block.db_instance_class),
        duration: build.template(block.duration),
        fixed_price: build.template(std.get(block, 'fixed_price', null)),
        id: build.template(std.get(block, 'id', null)),
        multi_az: build.template(block.multi_az),
        offering_id: build.template(std.get(block, 'offering_id', null)),
        offering_type: build.template(block.offering_type),
        product_description: build.template(block.product_description),
      }),
      currency_code: resource.field('currency_code'),
      db_instance_class: resource.field('db_instance_class'),
      duration: resource.field('duration'),
      fixed_price: resource.field('fixed_price'),
      id: resource.field('id'),
      multi_az: resource.field('multi_az'),
      offering_id: resource.field('offering_id'),
      offering_type: resource.field('offering_type'),
      product_description: resource.field('product_description'),
    },
    redshift_cluster(name, block): {
      local resource = blockType.resource('aws_redshift_cluster', name),
      _: resource._(block, {
        allow_version_upgrade: build.template(std.get(block, 'allow_version_upgrade', null)),
        aqua_configuration_status: build.template(std.get(block, 'aqua_configuration_status', null)),
        arn: build.template(std.get(block, 'arn', null)),
        automated_snapshot_retention_period: build.template(std.get(block, 'automated_snapshot_retention_period', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        availability_zone_relocation_enabled: build.template(std.get(block, 'availability_zone_relocation_enabled', null)),
        bucket_name: build.template(std.get(block, 'bucket_name', null)),
        cluster_identifier: build.template(block.cluster_identifier),
        cluster_namespace_arn: build.template(std.get(block, 'cluster_namespace_arn', null)),
        cluster_nodes: build.template(std.get(block, 'cluster_nodes', null)),
        cluster_parameter_group_name: build.template(std.get(block, 'cluster_parameter_group_name', null)),
        cluster_public_key: build.template(std.get(block, 'cluster_public_key', null)),
        cluster_revision_number: build.template(std.get(block, 'cluster_revision_number', null)),
        cluster_subnet_group_name: build.template(std.get(block, 'cluster_subnet_group_name', null)),
        cluster_type: build.template(std.get(block, 'cluster_type', null)),
        cluster_version: build.template(std.get(block, 'cluster_version', null)),
        database_name: build.template(std.get(block, 'database_name', null)),
        default_iam_role_arn: build.template(std.get(block, 'default_iam_role_arn', null)),
        elastic_ip: build.template(std.get(block, 'elastic_ip', null)),
        enable_logging: build.template(std.get(block, 'enable_logging', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        enhanced_vpc_routing: build.template(std.get(block, 'enhanced_vpc_routing', null)),
        iam_roles: build.template(std.get(block, 'iam_roles', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        log_destination_type: build.template(std.get(block, 'log_destination_type', null)),
        log_exports: build.template(std.get(block, 'log_exports', null)),
        maintenance_track_name: build.template(std.get(block, 'maintenance_track_name', null)),
        manual_snapshot_retention_period: build.template(std.get(block, 'manual_snapshot_retention_period', null)),
        master_username: build.template(std.get(block, 'master_username', null)),
        multi_az: build.template(std.get(block, 'multi_az', null)),
        node_type: build.template(std.get(block, 'node_type', null)),
        number_of_nodes: build.template(std.get(block, 'number_of_nodes', null)),
        port: build.template(std.get(block, 'port', null)),
        preferred_maintenance_window: build.template(std.get(block, 'preferred_maintenance_window', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        s3_key_prefix: build.template(std.get(block, 's3_key_prefix', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null)),
      }),
      allow_version_upgrade: resource.field('allow_version_upgrade'),
      aqua_configuration_status: resource.field('aqua_configuration_status'),
      arn: resource.field('arn'),
      automated_snapshot_retention_period: resource.field('automated_snapshot_retention_period'),
      availability_zone: resource.field('availability_zone'),
      availability_zone_relocation_enabled: resource.field('availability_zone_relocation_enabled'),
      bucket_name: resource.field('bucket_name'),
      cluster_identifier: resource.field('cluster_identifier'),
      cluster_namespace_arn: resource.field('cluster_namespace_arn'),
      cluster_nodes: resource.field('cluster_nodes'),
      cluster_parameter_group_name: resource.field('cluster_parameter_group_name'),
      cluster_public_key: resource.field('cluster_public_key'),
      cluster_revision_number: resource.field('cluster_revision_number'),
      cluster_subnet_group_name: resource.field('cluster_subnet_group_name'),
      cluster_type: resource.field('cluster_type'),
      cluster_version: resource.field('cluster_version'),
      database_name: resource.field('database_name'),
      default_iam_role_arn: resource.field('default_iam_role_arn'),
      elastic_ip: resource.field('elastic_ip'),
      enable_logging: resource.field('enable_logging'),
      encrypted: resource.field('encrypted'),
      endpoint: resource.field('endpoint'),
      enhanced_vpc_routing: resource.field('enhanced_vpc_routing'),
      iam_roles: resource.field('iam_roles'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      log_destination_type: resource.field('log_destination_type'),
      log_exports: resource.field('log_exports'),
      maintenance_track_name: resource.field('maintenance_track_name'),
      manual_snapshot_retention_period: resource.field('manual_snapshot_retention_period'),
      master_username: resource.field('master_username'),
      multi_az: resource.field('multi_az'),
      node_type: resource.field('node_type'),
      number_of_nodes: resource.field('number_of_nodes'),
      port: resource.field('port'),
      preferred_maintenance_window: resource.field('preferred_maintenance_window'),
      publicly_accessible: resource.field('publicly_accessible'),
      s3_key_prefix: resource.field('s3_key_prefix'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
      vpc_security_group_ids: resource.field('vpc_security_group_ids'),
    },
    redshift_cluster_credentials(name, block): {
      local resource = blockType.resource('aws_redshift_cluster_credentials', name),
      _: resource._(block, {
        auto_create: build.template(std.get(block, 'auto_create', null)),
        cluster_identifier: build.template(block.cluster_identifier),
        db_groups: build.template(std.get(block, 'db_groups', null)),
        db_name: build.template(std.get(block, 'db_name', null)),
        db_password: build.template(std.get(block, 'db_password', null)),
        db_user: build.template(block.db_user),
        duration_seconds: build.template(std.get(block, 'duration_seconds', null)),
        expiration: build.template(std.get(block, 'expiration', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      auto_create: resource.field('auto_create'),
      cluster_identifier: resource.field('cluster_identifier'),
      db_groups: resource.field('db_groups'),
      db_name: resource.field('db_name'),
      db_password: resource.field('db_password'),
      db_user: resource.field('db_user'),
      duration_seconds: resource.field('duration_seconds'),
      expiration: resource.field('expiration'),
      id: resource.field('id'),
    },
    redshift_data_shares(name, block): {
      local resource = blockType.resource('aws_redshift_data_shares', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    redshift_orderable_cluster(name, block): {
      local resource = blockType.resource('aws_redshift_orderable_cluster', name),
      _: resource._(block, {
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        cluster_type: build.template(std.get(block, 'cluster_type', null)),
        cluster_version: build.template(std.get(block, 'cluster_version', null)),
        id: build.template(std.get(block, 'id', null)),
        node_type: build.template(std.get(block, 'node_type', null)),
        preferred_node_types: build.template(std.get(block, 'preferred_node_types', null)),
      }),
      availability_zones: resource.field('availability_zones'),
      cluster_type: resource.field('cluster_type'),
      cluster_version: resource.field('cluster_version'),
      id: resource.field('id'),
      node_type: resource.field('node_type'),
      preferred_node_types: resource.field('preferred_node_types'),
    },
    redshift_producer_data_shares(name, block): {
      local resource = blockType.resource('aws_redshift_producer_data_shares', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        producer_arn: build.template(block.producer_arn),
        status: build.template(std.get(block, 'status', null)),
      }),
      id: resource.field('id'),
      producer_arn: resource.field('producer_arn'),
      status: resource.field('status'),
    },
    redshift_service_account(name, block): {
      local resource = blockType.resource('aws_redshift_service_account', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        region: build.template(std.get(block, 'region', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      region: resource.field('region'),
    },
    redshift_subnet_group(name, block): {
      local resource = blockType.resource('aws_redshift_subnet_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
    },
    redshiftserverless_credentials(name, block): {
      local resource = blockType.resource('aws_redshiftserverless_credentials', name),
      _: resource._(block, {
        db_name: build.template(std.get(block, 'db_name', null)),
        db_password: build.template(std.get(block, 'db_password', null)),
        db_user: build.template(std.get(block, 'db_user', null)),
        duration_seconds: build.template(std.get(block, 'duration_seconds', null)),
        expiration: build.template(std.get(block, 'expiration', null)),
        id: build.template(std.get(block, 'id', null)),
        workgroup_name: build.template(block.workgroup_name),
      }),
      db_name: resource.field('db_name'),
      db_password: resource.field('db_password'),
      db_user: resource.field('db_user'),
      duration_seconds: resource.field('duration_seconds'),
      expiration: resource.field('expiration'),
      id: resource.field('id'),
      workgroup_name: resource.field('workgroup_name'),
    },
    redshiftserverless_namespace(name, block): {
      local resource = blockType.resource('aws_redshiftserverless_namespace', name),
      _: resource._(block, {
        admin_username: build.template(std.get(block, 'admin_username', null)),
        arn: build.template(std.get(block, 'arn', null)),
        db_name: build.template(std.get(block, 'db_name', null)),
        default_iam_role_arn: build.template(std.get(block, 'default_iam_role_arn', null)),
        iam_roles: build.template(std.get(block, 'iam_roles', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        log_exports: build.template(std.get(block, 'log_exports', null)),
        namespace_id: build.template(std.get(block, 'namespace_id', null)),
        namespace_name: build.template(block.namespace_name),
      }),
      admin_username: resource.field('admin_username'),
      arn: resource.field('arn'),
      db_name: resource.field('db_name'),
      default_iam_role_arn: resource.field('default_iam_role_arn'),
      iam_roles: resource.field('iam_roles'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      log_exports: resource.field('log_exports'),
      namespace_id: resource.field('namespace_id'),
      namespace_name: resource.field('namespace_name'),
    },
    redshiftserverless_workgroup(name, block): {
      local resource = blockType.resource('aws_redshiftserverless_workgroup', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        enhanced_vpc_routing: build.template(std.get(block, 'enhanced_vpc_routing', null)),
        id: build.template(std.get(block, 'id', null)),
        namespace_name: build.template(std.get(block, 'namespace_name', null)),
        publicly_accessible: build.template(std.get(block, 'publicly_accessible', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        workgroup_id: build.template(std.get(block, 'workgroup_id', null)),
        workgroup_name: build.template(block.workgroup_name),
      }),
      arn: resource.field('arn'),
      endpoint: resource.field('endpoint'),
      enhanced_vpc_routing: resource.field('enhanced_vpc_routing'),
      id: resource.field('id'),
      namespace_name: resource.field('namespace_name'),
      publicly_accessible: resource.field('publicly_accessible'),
      security_group_ids: resource.field('security_group_ids'),
      subnet_ids: resource.field('subnet_ids'),
      workgroup_id: resource.field('workgroup_id'),
      workgroup_name: resource.field('workgroup_name'),
    },
    region(name, block): {
      local resource = blockType.resource('aws_region', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      description: resource.field('description'),
      endpoint: resource.field('endpoint'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    regions(name, block): {
      local resource = blockType.resource('aws_regions', name),
      _: resource._(block, {
        all_regions: build.template(std.get(block, 'all_regions', null)),
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
      }),
      all_regions: resource.field('all_regions'),
      id: resource.field('id'),
      names: resource.field('names'),
    },
    resourceexplorer2_search(name, block): {
      local resource = blockType.resource('aws_resourceexplorer2_search', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        query_string: build.template(block.query_string),
        resource_count: build.template(std.get(block, 'resource_count', null)),
        resources: build.template(std.get(block, 'resources', null)),
        view_arn: build.template(std.get(block, 'view_arn', null)),
      }),
      id: resource.field('id'),
      query_string: resource.field('query_string'),
      resource_count: resource.field('resource_count'),
      resources: resource.field('resources'),
      view_arn: resource.field('view_arn'),
    },
    resourcegroupstaggingapi_resources(name, block): {
      local resource = blockType.resource('aws_resourcegroupstaggingapi_resources', name),
      _: resource._(block, {
        exclude_compliant_resources: build.template(std.get(block, 'exclude_compliant_resources', null)),
        id: build.template(std.get(block, 'id', null)),
        include_compliance_details: build.template(std.get(block, 'include_compliance_details', null)),
        resource_arn_list: build.template(std.get(block, 'resource_arn_list', null)),
        resource_tag_mapping_list: build.template(std.get(block, 'resource_tag_mapping_list', null)),
        resource_type_filters: build.template(std.get(block, 'resource_type_filters', null)),
      }),
      exclude_compliant_resources: resource.field('exclude_compliant_resources'),
      id: resource.field('id'),
      include_compliance_details: resource.field('include_compliance_details'),
      resource_arn_list: resource.field('resource_arn_list'),
      resource_tag_mapping_list: resource.field('resource_tag_mapping_list'),
      resource_type_filters: resource.field('resource_type_filters'),
    },
    route(name, block): {
      local resource = blockType.resource('aws_route', name),
      _: resource._(block, {
        carrier_gateway_id: build.template(std.get(block, 'carrier_gateway_id', null)),
        core_network_arn: build.template(std.get(block, 'core_network_arn', null)),
        destination_cidr_block: build.template(std.get(block, 'destination_cidr_block', null)),
        destination_ipv6_cidr_block: build.template(std.get(block, 'destination_ipv6_cidr_block', null)),
        destination_prefix_list_id: build.template(std.get(block, 'destination_prefix_list_id', null)),
        egress_only_gateway_id: build.template(std.get(block, 'egress_only_gateway_id', null)),
        gateway_id: build.template(std.get(block, 'gateway_id', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_id: build.template(std.get(block, 'instance_id', null)),
        local_gateway_id: build.template(std.get(block, 'local_gateway_id', null)),
        nat_gateway_id: build.template(std.get(block, 'nat_gateway_id', null)),
        network_interface_id: build.template(std.get(block, 'network_interface_id', null)),
        route_table_id: build.template(block.route_table_id),
        transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null)),
        vpc_peering_connection_id: build.template(std.get(block, 'vpc_peering_connection_id', null)),
      }),
      carrier_gateway_id: resource.field('carrier_gateway_id'),
      core_network_arn: resource.field('core_network_arn'),
      destination_cidr_block: resource.field('destination_cidr_block'),
      destination_ipv6_cidr_block: resource.field('destination_ipv6_cidr_block'),
      destination_prefix_list_id: resource.field('destination_prefix_list_id'),
      egress_only_gateway_id: resource.field('egress_only_gateway_id'),
      gateway_id: resource.field('gateway_id'),
      id: resource.field('id'),
      instance_id: resource.field('instance_id'),
      local_gateway_id: resource.field('local_gateway_id'),
      nat_gateway_id: resource.field('nat_gateway_id'),
      network_interface_id: resource.field('network_interface_id'),
      route_table_id: resource.field('route_table_id'),
      transit_gateway_id: resource.field('transit_gateway_id'),
      vpc_peering_connection_id: resource.field('vpc_peering_connection_id'),
    },
    route53_delegation_set(name, block): {
      local resource = blockType.resource('aws_route53_delegation_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        caller_reference: build.template(std.get(block, 'caller_reference', null)),
        id: build.template(block.id),
        name_servers: build.template(std.get(block, 'name_servers', null)),
      }),
      arn: resource.field('arn'),
      caller_reference: resource.field('caller_reference'),
      id: resource.field('id'),
      name_servers: resource.field('name_servers'),
    },
    route53_resolver_endpoint(name, block): {
      local resource = blockType.resource('aws_route53_resolver_endpoint', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        direction: build.template(std.get(block, 'direction', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_addresses: build.template(std.get(block, 'ip_addresses', null)),
        name: build.template(std.get(block, 'name', null)),
        protocols: build.template(std.get(block, 'protocols', null)),
        resolver_endpoint_id: build.template(std.get(block, 'resolver_endpoint_id', null)),
        resolver_endpoint_type: build.template(std.get(block, 'resolver_endpoint_type', null)),
        status: build.template(std.get(block, 'status', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      direction: resource.field('direction'),
      id: resource.field('id'),
      ip_addresses: resource.field('ip_addresses'),
      name: resource.field('name'),
      protocols: resource.field('protocols'),
      resolver_endpoint_id: resource.field('resolver_endpoint_id'),
      resolver_endpoint_type: resource.field('resolver_endpoint_type'),
      status: resource.field('status'),
      vpc_id: resource.field('vpc_id'),
    },
    route53_resolver_firewall_config(name, block): {
      local resource = blockType.resource('aws_route53_resolver_firewall_config', name),
      _: resource._(block, {
        firewall_fail_open: build.template(std.get(block, 'firewall_fail_open', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        resource_id: build.template(block.resource_id),
      }),
      firewall_fail_open: resource.field('firewall_fail_open'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      resource_id: resource.field('resource_id'),
    },
    route53_resolver_firewall_domain_list(name, block): {
      local resource = blockType.resource('aws_route53_resolver_firewall_domain_list', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        creator_request_id: build.template(std.get(block, 'creator_request_id', null)),
        domain_count: build.template(std.get(block, 'domain_count', null)),
        firewall_domain_list_id: build.template(block.firewall_domain_list_id),
        id: build.template(std.get(block, 'id', null)),
        managed_owner_name: build.template(std.get(block, 'managed_owner_name', null)),
        modification_time: build.template(std.get(block, 'modification_time', null)),
        name: build.template(std.get(block, 'name', null)),
        status: build.template(std.get(block, 'status', null)),
        status_message: build.template(std.get(block, 'status_message', null)),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      creator_request_id: resource.field('creator_request_id'),
      domain_count: resource.field('domain_count'),
      firewall_domain_list_id: resource.field('firewall_domain_list_id'),
      id: resource.field('id'),
      managed_owner_name: resource.field('managed_owner_name'),
      modification_time: resource.field('modification_time'),
      name: resource.field('name'),
      status: resource.field('status'),
      status_message: resource.field('status_message'),
    },
    route53_resolver_firewall_rule_group(name, block): {
      local resource = blockType.resource('aws_route53_resolver_firewall_rule_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        creator_request_id: build.template(std.get(block, 'creator_request_id', null)),
        firewall_rule_group_id: build.template(block.firewall_rule_group_id),
        id: build.template(std.get(block, 'id', null)),
        modification_time: build.template(std.get(block, 'modification_time', null)),
        name: build.template(std.get(block, 'name', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        rule_count: build.template(std.get(block, 'rule_count', null)),
        share_status: build.template(std.get(block, 'share_status', null)),
        status: build.template(std.get(block, 'status', null)),
        status_message: build.template(std.get(block, 'status_message', null)),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      creator_request_id: resource.field('creator_request_id'),
      firewall_rule_group_id: resource.field('firewall_rule_group_id'),
      id: resource.field('id'),
      modification_time: resource.field('modification_time'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      rule_count: resource.field('rule_count'),
      share_status: resource.field('share_status'),
      status: resource.field('status'),
      status_message: resource.field('status_message'),
    },
    route53_resolver_firewall_rule_group_association(name, block): {
      local resource = blockType.resource('aws_route53_resolver_firewall_rule_group_association', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        creator_request_id: build.template(std.get(block, 'creator_request_id', null)),
        firewall_rule_group_association_id: build.template(block.firewall_rule_group_association_id),
        firewall_rule_group_id: build.template(std.get(block, 'firewall_rule_group_id', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_owner_name: build.template(std.get(block, 'managed_owner_name', null)),
        modification_time: build.template(std.get(block, 'modification_time', null)),
        mutation_protection: build.template(std.get(block, 'mutation_protection', null)),
        name: build.template(std.get(block, 'name', null)),
        priority: build.template(std.get(block, 'priority', null)),
        status: build.template(std.get(block, 'status', null)),
        status_message: build.template(std.get(block, 'status_message', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      creator_request_id: resource.field('creator_request_id'),
      firewall_rule_group_association_id: resource.field('firewall_rule_group_association_id'),
      firewall_rule_group_id: resource.field('firewall_rule_group_id'),
      id: resource.field('id'),
      managed_owner_name: resource.field('managed_owner_name'),
      modification_time: resource.field('modification_time'),
      mutation_protection: resource.field('mutation_protection'),
      name: resource.field('name'),
      priority: resource.field('priority'),
      status: resource.field('status'),
      status_message: resource.field('status_message'),
      vpc_id: resource.field('vpc_id'),
    },
    route53_resolver_firewall_rules(name, block): {
      local resource = blockType.resource('aws_route53_resolver_firewall_rules', name),
      _: resource._(block, {
        action: build.template(std.get(block, 'action', null)),
        firewall_rule_group_id: build.template(block.firewall_rule_group_id),
        firewall_rules: build.template(std.get(block, 'firewall_rules', null)),
        id: build.template(std.get(block, 'id', null)),
        priority: build.template(std.get(block, 'priority', null)),
      }),
      action: resource.field('action'),
      firewall_rule_group_id: resource.field('firewall_rule_group_id'),
      firewall_rules: resource.field('firewall_rules'),
      id: resource.field('id'),
      priority: resource.field('priority'),
    },
    route53_resolver_query_log_config(name, block): {
      local resource = blockType.resource('aws_route53_resolver_query_log_config', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        destination_arn: build.template(std.get(block, 'destination_arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        resolver_query_log_config_id: build.template(std.get(block, 'resolver_query_log_config_id', null)),
        share_status: build.template(std.get(block, 'share_status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      destination_arn: resource.field('destination_arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      resolver_query_log_config_id: resource.field('resolver_query_log_config_id'),
      share_status: resource.field('share_status'),
      tags: resource.field('tags'),
    },
    route53_resolver_rule(name, block): {
      local resource = blockType.resource('aws_route53_resolver_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        resolver_endpoint_id: build.template(std.get(block, 'resolver_endpoint_id', null)),
        resolver_rule_id: build.template(std.get(block, 'resolver_rule_id', null)),
        rule_type: build.template(std.get(block, 'rule_type', null)),
        share_status: build.template(std.get(block, 'share_status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner_id: resource.field('owner_id'),
      resolver_endpoint_id: resource.field('resolver_endpoint_id'),
      resolver_rule_id: resource.field('resolver_rule_id'),
      rule_type: resource.field('rule_type'),
      share_status: resource.field('share_status'),
      tags: resource.field('tags'),
    },
    route53_resolver_rules(name, block): {
      local resource = blockType.resource('aws_route53_resolver_rules', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name_regex: build.template(std.get(block, 'name_regex', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        resolver_endpoint_id: build.template(std.get(block, 'resolver_endpoint_id', null)),
        resolver_rule_ids: build.template(std.get(block, 'resolver_rule_ids', null)),
        rule_type: build.template(std.get(block, 'rule_type', null)),
        share_status: build.template(std.get(block, 'share_status', null)),
      }),
      id: resource.field('id'),
      name_regex: resource.field('name_regex'),
      owner_id: resource.field('owner_id'),
      resolver_endpoint_id: resource.field('resolver_endpoint_id'),
      resolver_rule_ids: resource.field('resolver_rule_ids'),
      rule_type: resource.field('rule_type'),
      share_status: resource.field('share_status'),
    },
    route53_traffic_policy_document(name, block): {
      local resource = blockType.resource('aws_route53_traffic_policy_document', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        json: build.template(std.get(block, 'json', null)),
        record_type: build.template(std.get(block, 'record_type', null)),
        start_endpoint: build.template(std.get(block, 'start_endpoint', null)),
        start_rule: build.template(std.get(block, 'start_rule', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      id: resource.field('id'),
      json: resource.field('json'),
      record_type: resource.field('record_type'),
      start_endpoint: resource.field('start_endpoint'),
      start_rule: resource.field('start_rule'),
      version: resource.field('version'),
    },
    route53_zone(name, block): {
      local resource = blockType.resource('aws_route53_zone', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        caller_reference: build.template(std.get(block, 'caller_reference', null)),
        comment: build.template(std.get(block, 'comment', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_service_description: build.template(std.get(block, 'linked_service_description', null)),
        linked_service_principal: build.template(std.get(block, 'linked_service_principal', null)),
        name: build.template(std.get(block, 'name', null)),
        name_servers: build.template(std.get(block, 'name_servers', null)),
        primary_name_server: build.template(std.get(block, 'primary_name_server', null)),
        private_zone: build.template(std.get(block, 'private_zone', null)),
        resource_record_set_count: build.template(std.get(block, 'resource_record_set_count', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
        zone_id: build.template(std.get(block, 'zone_id', null)),
      }),
      arn: resource.field('arn'),
      caller_reference: resource.field('caller_reference'),
      comment: resource.field('comment'),
      id: resource.field('id'),
      linked_service_description: resource.field('linked_service_description'),
      linked_service_principal: resource.field('linked_service_principal'),
      name: resource.field('name'),
      name_servers: resource.field('name_servers'),
      primary_name_server: resource.field('primary_name_server'),
      private_zone: resource.field('private_zone'),
      resource_record_set_count: resource.field('resource_record_set_count'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
      zone_id: resource.field('zone_id'),
    },
    route53_zones(name, block): {
      local resource = blockType.resource('aws_route53_zones', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
    },
    route53profiles_profiles(name, block): {
      local resource = blockType.resource('aws_route53profiles_profiles', name),
      _: resource._(block, {
        profiles: build.template(std.get(block, 'profiles', null)),
      }),
      profiles: resource.field('profiles'),
    },
    route_table(name, block): {
      local resource = blockType.resource('aws_route_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        associations: build.template(std.get(block, 'associations', null)),
        gateway_id: build.template(std.get(block, 'gateway_id', null)),
        id: build.template(std.get(block, 'id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        route_table_id: build.template(std.get(block, 'route_table_id', null)),
        routes: build.template(std.get(block, 'routes', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      associations: resource.field('associations'),
      gateway_id: resource.field('gateway_id'),
      id: resource.field('id'),
      owner_id: resource.field('owner_id'),
      route_table_id: resource.field('route_table_id'),
      routes: resource.field('routes'),
      subnet_id: resource.field('subnet_id'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    route_tables(name, block): {
      local resource = blockType.resource('aws_route_tables', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    s3_account_public_access_block(name, block): {
      local resource = blockType.resource('aws_s3_account_public_access_block', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        block_public_acls: build.template(std.get(block, 'block_public_acls', null)),
        block_public_policy: build.template(std.get(block, 'block_public_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_public_acls: build.template(std.get(block, 'ignore_public_acls', null)),
        restrict_public_buckets: build.template(std.get(block, 'restrict_public_buckets', null)),
      }),
      account_id: resource.field('account_id'),
      block_public_acls: resource.field('block_public_acls'),
      block_public_policy: resource.field('block_public_policy'),
      id: resource.field('id'),
      ignore_public_acls: resource.field('ignore_public_acls'),
      restrict_public_buckets: resource.field('restrict_public_buckets'),
    },
    s3_bucket(name, block): {
      local resource = blockType.resource('aws_s3_bucket', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        bucket: build.template(block.bucket),
        bucket_domain_name: build.template(std.get(block, 'bucket_domain_name', null)),
        bucket_regional_domain_name: build.template(std.get(block, 'bucket_regional_domain_name', null)),
        hosted_zone_id: build.template(std.get(block, 'hosted_zone_id', null)),
        id: build.template(std.get(block, 'id', null)),
        region: build.template(std.get(block, 'region', null)),
        website_domain: build.template(std.get(block, 'website_domain', null)),
        website_endpoint: build.template(std.get(block, 'website_endpoint', null)),
      }),
      arn: resource.field('arn'),
      bucket: resource.field('bucket'),
      bucket_domain_name: resource.field('bucket_domain_name'),
      bucket_regional_domain_name: resource.field('bucket_regional_domain_name'),
      hosted_zone_id: resource.field('hosted_zone_id'),
      id: resource.field('id'),
      region: resource.field('region'),
      website_domain: resource.field('website_domain'),
      website_endpoint: resource.field('website_endpoint'),
    },
    s3_bucket_object(name, block): {
      local resource = blockType.resource('aws_s3_bucket_object', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        body: build.template(std.get(block, 'body', null)),
        bucket: build.template(block.bucket),
        bucket_key_enabled: build.template(std.get(block, 'bucket_key_enabled', null)),
        cache_control: build.template(std.get(block, 'cache_control', null)),
        content_disposition: build.template(std.get(block, 'content_disposition', null)),
        content_encoding: build.template(std.get(block, 'content_encoding', null)),
        content_language: build.template(std.get(block, 'content_language', null)),
        content_length: build.template(std.get(block, 'content_length', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        etag: build.template(std.get(block, 'etag', null)),
        expiration: build.template(std.get(block, 'expiration', null)),
        expires: build.template(std.get(block, 'expires', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        object_lock_legal_hold_status: build.template(std.get(block, 'object_lock_legal_hold_status', null)),
        object_lock_mode: build.template(std.get(block, 'object_lock_mode', null)),
        object_lock_retain_until_date: build.template(std.get(block, 'object_lock_retain_until_date', null)),
        range: build.template(std.get(block, 'range', null)),
        server_side_encryption: build.template(std.get(block, 'server_side_encryption', null)),
        sse_kms_key_id: build.template(std.get(block, 'sse_kms_key_id', null)),
        storage_class: build.template(std.get(block, 'storage_class', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
        website_redirect_location: build.template(std.get(block, 'website_redirect_location', null)),
      }),
      arn: resource.field('arn'),
      body: resource.field('body'),
      bucket: resource.field('bucket'),
      bucket_key_enabled: resource.field('bucket_key_enabled'),
      cache_control: resource.field('cache_control'),
      content_disposition: resource.field('content_disposition'),
      content_encoding: resource.field('content_encoding'),
      content_language: resource.field('content_language'),
      content_length: resource.field('content_length'),
      content_type: resource.field('content_type'),
      etag: resource.field('etag'),
      expiration: resource.field('expiration'),
      expires: resource.field('expires'),
      id: resource.field('id'),
      key: resource.field('key'),
      last_modified: resource.field('last_modified'),
      metadata: resource.field('metadata'),
      object_lock_legal_hold_status: resource.field('object_lock_legal_hold_status'),
      object_lock_mode: resource.field('object_lock_mode'),
      object_lock_retain_until_date: resource.field('object_lock_retain_until_date'),
      range: resource.field('range'),
      server_side_encryption: resource.field('server_side_encryption'),
      sse_kms_key_id: resource.field('sse_kms_key_id'),
      storage_class: resource.field('storage_class'),
      tags: resource.field('tags'),
      version_id: resource.field('version_id'),
      website_redirect_location: resource.field('website_redirect_location'),
    },
    s3_bucket_objects(name, block): {
      local resource = blockType.resource('aws_s3_bucket_objects', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        common_prefixes: build.template(std.get(block, 'common_prefixes', null)),
        delimiter: build.template(std.get(block, 'delimiter', null)),
        encoding_type: build.template(std.get(block, 'encoding_type', null)),
        fetch_owner: build.template(std.get(block, 'fetch_owner', null)),
        id: build.template(std.get(block, 'id', null)),
        keys: build.template(std.get(block, 'keys', null)),
        max_keys: build.template(std.get(block, 'max_keys', null)),
        owners: build.template(std.get(block, 'owners', null)),
        prefix: build.template(std.get(block, 'prefix', null)),
        start_after: build.template(std.get(block, 'start_after', null)),
      }),
      bucket: resource.field('bucket'),
      common_prefixes: resource.field('common_prefixes'),
      delimiter: resource.field('delimiter'),
      encoding_type: resource.field('encoding_type'),
      fetch_owner: resource.field('fetch_owner'),
      id: resource.field('id'),
      keys: resource.field('keys'),
      max_keys: resource.field('max_keys'),
      owners: resource.field('owners'),
      prefix: resource.field('prefix'),
      start_after: resource.field('start_after'),
    },
    s3_bucket_policy(name, block): {
      local resource = blockType.resource('aws_s3_bucket_policy', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(std.get(block, 'policy', null)),
      }),
      bucket: resource.field('bucket'),
      id: resource.field('id'),
      policy: resource.field('policy'),
    },
    s3_directory_buckets(name, block): {
      local resource = blockType.resource('aws_s3_directory_buckets', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        buckets: build.template(std.get(block, 'buckets', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      arns: resource.field('arns'),
      buckets: resource.field('buckets'),
      id: resource.field('id'),
    },
    s3_object(name, block): {
      local resource = blockType.resource('aws_s3_object', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        body: build.template(std.get(block, 'body', null)),
        bucket: build.template(block.bucket),
        bucket_key_enabled: build.template(std.get(block, 'bucket_key_enabled', null)),
        cache_control: build.template(std.get(block, 'cache_control', null)),
        checksum_crc32: build.template(std.get(block, 'checksum_crc32', null)),
        checksum_crc32c: build.template(std.get(block, 'checksum_crc32c', null)),
        checksum_mode: build.template(std.get(block, 'checksum_mode', null)),
        checksum_sha1: build.template(std.get(block, 'checksum_sha1', null)),
        checksum_sha256: build.template(std.get(block, 'checksum_sha256', null)),
        content_disposition: build.template(std.get(block, 'content_disposition', null)),
        content_encoding: build.template(std.get(block, 'content_encoding', null)),
        content_language: build.template(std.get(block, 'content_language', null)),
        content_length: build.template(std.get(block, 'content_length', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        etag: build.template(std.get(block, 'etag', null)),
        expiration: build.template(std.get(block, 'expiration', null)),
        expires: build.template(std.get(block, 'expires', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        object_lock_legal_hold_status: build.template(std.get(block, 'object_lock_legal_hold_status', null)),
        object_lock_mode: build.template(std.get(block, 'object_lock_mode', null)),
        object_lock_retain_until_date: build.template(std.get(block, 'object_lock_retain_until_date', null)),
        range: build.template(std.get(block, 'range', null)),
        server_side_encryption: build.template(std.get(block, 'server_side_encryption', null)),
        sse_kms_key_id: build.template(std.get(block, 'sse_kms_key_id', null)),
        storage_class: build.template(std.get(block, 'storage_class', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
        website_redirect_location: build.template(std.get(block, 'website_redirect_location', null)),
      }),
      arn: resource.field('arn'),
      body: resource.field('body'),
      bucket: resource.field('bucket'),
      bucket_key_enabled: resource.field('bucket_key_enabled'),
      cache_control: resource.field('cache_control'),
      checksum_crc32: resource.field('checksum_crc32'),
      checksum_crc32c: resource.field('checksum_crc32c'),
      checksum_mode: resource.field('checksum_mode'),
      checksum_sha1: resource.field('checksum_sha1'),
      checksum_sha256: resource.field('checksum_sha256'),
      content_disposition: resource.field('content_disposition'),
      content_encoding: resource.field('content_encoding'),
      content_language: resource.field('content_language'),
      content_length: resource.field('content_length'),
      content_type: resource.field('content_type'),
      etag: resource.field('etag'),
      expiration: resource.field('expiration'),
      expires: resource.field('expires'),
      id: resource.field('id'),
      key: resource.field('key'),
      last_modified: resource.field('last_modified'),
      metadata: resource.field('metadata'),
      object_lock_legal_hold_status: resource.field('object_lock_legal_hold_status'),
      object_lock_mode: resource.field('object_lock_mode'),
      object_lock_retain_until_date: resource.field('object_lock_retain_until_date'),
      range: resource.field('range'),
      server_side_encryption: resource.field('server_side_encryption'),
      sse_kms_key_id: resource.field('sse_kms_key_id'),
      storage_class: resource.field('storage_class'),
      tags: resource.field('tags'),
      version_id: resource.field('version_id'),
      website_redirect_location: resource.field('website_redirect_location'),
    },
    s3_objects(name, block): {
      local resource = blockType.resource('aws_s3_objects', name),
      _: resource._(block, {
        bucket: build.template(block.bucket),
        common_prefixes: build.template(std.get(block, 'common_prefixes', null)),
        delimiter: build.template(std.get(block, 'delimiter', null)),
        encoding_type: build.template(std.get(block, 'encoding_type', null)),
        fetch_owner: build.template(std.get(block, 'fetch_owner', null)),
        id: build.template(std.get(block, 'id', null)),
        keys: build.template(std.get(block, 'keys', null)),
        max_keys: build.template(std.get(block, 'max_keys', null)),
        owners: build.template(std.get(block, 'owners', null)),
        prefix: build.template(std.get(block, 'prefix', null)),
        request_charged: build.template(std.get(block, 'request_charged', null)),
        request_payer: build.template(std.get(block, 'request_payer', null)),
        start_after: build.template(std.get(block, 'start_after', null)),
      }),
      bucket: resource.field('bucket'),
      common_prefixes: resource.field('common_prefixes'),
      delimiter: resource.field('delimiter'),
      encoding_type: resource.field('encoding_type'),
      fetch_owner: resource.field('fetch_owner'),
      id: resource.field('id'),
      keys: resource.field('keys'),
      max_keys: resource.field('max_keys'),
      owners: resource.field('owners'),
      prefix: resource.field('prefix'),
      request_charged: resource.field('request_charged'),
      request_payer: resource.field('request_payer'),
      start_after: resource.field('start_after'),
    },
    s3control_multi_region_access_point(name, block): {
      local resource = blockType.resource('aws_s3control_multi_region_access_point', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        alias: build.template(std.get(block, 'alias', null)),
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        public_access_block: build.template(std.get(block, 'public_access_block', null)),
        regions: build.template(std.get(block, 'regions', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      account_id: resource.field('account_id'),
      alias: resource.field('alias'),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      domain_name: resource.field('domain_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      public_access_block: resource.field('public_access_block'),
      regions: resource.field('regions'),
      status: resource.field('status'),
    },
    sagemaker_prebuilt_ecr_image(name, block): {
      local resource = blockType.resource('aws_sagemaker_prebuilt_ecr_image', name),
      _: resource._(block, {
        dns_suffix: build.template(std.get(block, 'dns_suffix', null)),
        id: build.template(std.get(block, 'id', null)),
        image_tag: build.template(std.get(block, 'image_tag', null)),
        region: build.template(std.get(block, 'region', null)),
        registry_id: build.template(std.get(block, 'registry_id', null)),
        registry_path: build.template(std.get(block, 'registry_path', null)),
        repository_name: build.template(block.repository_name),
      }),
      dns_suffix: resource.field('dns_suffix'),
      id: resource.field('id'),
      image_tag: resource.field('image_tag'),
      region: resource.field('region'),
      registry_id: resource.field('registry_id'),
      registry_path: resource.field('registry_path'),
      repository_name: resource.field('repository_name'),
    },
    secretsmanager_random_password(name, block): {
      local resource = blockType.resource('aws_secretsmanager_random_password', name),
      _: resource._(block, {
        exclude_characters: build.template(std.get(block, 'exclude_characters', null)),
        exclude_lowercase: build.template(std.get(block, 'exclude_lowercase', null)),
        exclude_numbers: build.template(std.get(block, 'exclude_numbers', null)),
        exclude_punctuation: build.template(std.get(block, 'exclude_punctuation', null)),
        exclude_uppercase: build.template(std.get(block, 'exclude_uppercase', null)),
        id: build.template(std.get(block, 'id', null)),
        include_space: build.template(std.get(block, 'include_space', null)),
        password_length: build.template(std.get(block, 'password_length', null)),
        random_password: build.template(std.get(block, 'random_password', null)),
        require_each_included_type: build.template(std.get(block, 'require_each_included_type', null)),
      }),
      exclude_characters: resource.field('exclude_characters'),
      exclude_lowercase: resource.field('exclude_lowercase'),
      exclude_numbers: resource.field('exclude_numbers'),
      exclude_punctuation: resource.field('exclude_punctuation'),
      exclude_uppercase: resource.field('exclude_uppercase'),
      id: resource.field('id'),
      include_space: resource.field('include_space'),
      password_length: resource.field('password_length'),
      random_password: resource.field('random_password'),
      require_each_included_type: resource.field('require_each_included_type'),
    },
    secretsmanager_secret(name, block): {
      local resource = blockType.resource('aws_secretsmanager_secret', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        last_changed_date: build.template(std.get(block, 'last_changed_date', null)),
        name: build.template(std.get(block, 'name', null)),
        policy: build.template(std.get(block, 'policy', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      kms_key_id: resource.field('kms_key_id'),
      last_changed_date: resource.field('last_changed_date'),
      name: resource.field('name'),
      policy: resource.field('policy'),
      tags: resource.field('tags'),
    },
    secretsmanager_secret_rotation(name, block): {
      local resource = blockType.resource('aws_secretsmanager_secret_rotation', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        rotation_enabled: build.template(std.get(block, 'rotation_enabled', null)),
        rotation_lambda_arn: build.template(std.get(block, 'rotation_lambda_arn', null)),
        rotation_rules: build.template(std.get(block, 'rotation_rules', null)),
        secret_id: build.template(block.secret_id),
      }),
      id: resource.field('id'),
      rotation_enabled: resource.field('rotation_enabled'),
      rotation_lambda_arn: resource.field('rotation_lambda_arn'),
      rotation_rules: resource.field('rotation_rules'),
      secret_id: resource.field('secret_id'),
    },
    secretsmanager_secret_version(name, block): {
      local resource = blockType.resource('aws_secretsmanager_secret_version', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        id: build.template(std.get(block, 'id', null)),
        secret_binary: build.template(std.get(block, 'secret_binary', null)),
        secret_id: build.template(block.secret_id),
        secret_string: build.template(std.get(block, 'secret_string', null)),
        version_id: build.template(std.get(block, 'version_id', null)),
        version_stage: build.template(std.get(block, 'version_stage', null)),
        version_stages: build.template(std.get(block, 'version_stages', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      id: resource.field('id'),
      secret_binary: resource.field('secret_binary'),
      secret_id: resource.field('secret_id'),
      secret_string: resource.field('secret_string'),
      version_id: resource.field('version_id'),
      version_stage: resource.field('version_stage'),
      version_stages: resource.field('version_stages'),
    },
    secretsmanager_secret_versions(name, block): {
      local resource = blockType.resource('aws_secretsmanager_secret_versions', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        include_deprecated: build.template(std.get(block, 'include_deprecated', null)),
        name: build.template(std.get(block, 'name', null)),
        secret_id: build.template(block.secret_id),
        versions: build.template(std.get(block, 'versions', null)),
      }),
      arn: resource.field('arn'),
      include_deprecated: resource.field('include_deprecated'),
      name: resource.field('name'),
      secret_id: resource.field('secret_id'),
      versions: resource.field('versions'),
    },
    secretsmanager_secrets(name, block): {
      local resource = blockType.resource('aws_secretsmanager_secrets', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      names: resource.field('names'),
    },
    security_group(name, block): {
      local resource = blockType.resource('aws_security_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    security_groups(name, block): {
      local resource = blockType.resource('aws_security_groups', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_ids: build.template(std.get(block, 'vpc_ids', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
      vpc_ids: resource.field('vpc_ids'),
    },
    securityhub_standards_control_associations(name, block): {
      local resource = blockType.resource('aws_securityhub_standards_control_associations', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        security_control_id: build.template(block.security_control_id),
        standards_control_associations: build.template(std.get(block, 'standards_control_associations', null)),
      }),
      id: resource.field('id'),
      security_control_id: resource.field('security_control_id'),
      standards_control_associations: resource.field('standards_control_associations'),
    },
    serverlessapplicationrepository_application(name, block): {
      local resource = blockType.resource('aws_serverlessapplicationrepository_application', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        required_capabilities: build.template(std.get(block, 'required_capabilities', null)),
        semantic_version: build.template(std.get(block, 'semantic_version', null)),
        source_code_url: build.template(std.get(block, 'source_code_url', null)),
        template_url: build.template(std.get(block, 'template_url', null)),
      }),
      application_id: resource.field('application_id'),
      id: resource.field('id'),
      name: resource.field('name'),
      required_capabilities: resource.field('required_capabilities'),
      semantic_version: resource.field('semantic_version'),
      source_code_url: resource.field('source_code_url'),
      template_url: resource.field('template_url'),
    },
    service(name, block): {
      local resource = blockType.resource('aws_service', name),
      _: resource._(block, {
        dns_name: build.template(std.get(block, 'dns_name', null)),
        id: build.template(std.get(block, 'id', null)),
        partition: build.template(std.get(block, 'partition', null)),
        region: build.template(std.get(block, 'region', null)),
        reverse_dns_name: build.template(std.get(block, 'reverse_dns_name', null)),
        reverse_dns_prefix: build.template(std.get(block, 'reverse_dns_prefix', null)),
        service_id: build.template(std.get(block, 'service_id', null)),
        supported: build.template(std.get(block, 'supported', null)),
      }),
      dns_name: resource.field('dns_name'),
      id: resource.field('id'),
      partition: resource.field('partition'),
      region: resource.field('region'),
      reverse_dns_name: resource.field('reverse_dns_name'),
      reverse_dns_prefix: resource.field('reverse_dns_prefix'),
      service_id: resource.field('service_id'),
      supported: resource.field('supported'),
    },
    service_discovery_dns_namespace(name, block): {
      local resource = blockType.resource('aws_service_discovery_dns_namespace', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        hosted_zone: build.template(std.get(block, 'hosted_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(block.type),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      hosted_zone: resource.field('hosted_zone'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      type: resource.field('type'),
    },
    service_discovery_http_namespace(name, block): {
      local resource = blockType.resource('aws_service_discovery_http_namespace', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        http_name: build.template(std.get(block, 'http_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      http_name: resource.field('http_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
    },
    service_discovery_service(name, block): {
      local resource = blockType.resource('aws_service_discovery_service', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        dns_config: build.template(std.get(block, 'dns_config', null)),
        health_check_config: build.template(std.get(block, 'health_check_config', null)),
        health_check_custom_config: build.template(std.get(block, 'health_check_custom_config', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace_id: build.template(block.namespace_id),
        tags: build.template(std.get(block, 'tags', null)),
        tags_all: build.template(std.get(block, 'tags_all', null)),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      dns_config: resource.field('dns_config'),
      health_check_config: resource.field('health_check_config'),
      health_check_custom_config: resource.field('health_check_custom_config'),
      id: resource.field('id'),
      name: resource.field('name'),
      namespace_id: resource.field('namespace_id'),
      tags: resource.field('tags'),
      tags_all: resource.field('tags_all'),
    },
    service_principal(name, block): {
      local resource = blockType.resource('aws_service_principal', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        region: build.template(std.get(block, 'region', null)),
        service_name: build.template(block.service_name),
        suffix: build.template(std.get(block, 'suffix', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      region: resource.field('region'),
      service_name: resource.field('service_name'),
      suffix: resource.field('suffix'),
    },
    servicecatalog_constraint(name, block): {
      local resource = blockType.resource('aws_servicecatalog_constraint', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(block.id),
        owner: build.template(std.get(block, 'owner', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        portfolio_id: build.template(std.get(block, 'portfolio_id', null)),
        product_id: build.template(std.get(block, 'product_id', null)),
        status: build.template(std.get(block, 'status', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      accept_language: resource.field('accept_language'),
      description: resource.field('description'),
      id: resource.field('id'),
      owner: resource.field('owner'),
      parameters: resource.field('parameters'),
      portfolio_id: resource.field('portfolio_id'),
      product_id: resource.field('product_id'),
      status: resource.field('status'),
      type: resource.field('type'),
    },
    servicecatalog_launch_paths(name, block): {
      local resource = blockType.resource('aws_servicecatalog_launch_paths', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        id: build.template(std.get(block, 'id', null)),
        product_id: build.template(block.product_id),
        summaries: build.template(std.get(block, 'summaries', null)),
      }),
      accept_language: resource.field('accept_language'),
      id: resource.field('id'),
      product_id: resource.field('product_id'),
      summaries: resource.field('summaries'),
    },
    servicecatalog_portfolio(name, block): {
      local resource = blockType.resource('aws_servicecatalog_portfolio', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        arn: build.template(std.get(block, 'arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(block.id),
        name: build.template(std.get(block, 'name', null)),
        provider_name: build.template(std.get(block, 'provider_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      accept_language: resource.field('accept_language'),
      arn: resource.field('arn'),
      created_time: resource.field('created_time'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      provider_name: resource.field('provider_name'),
      tags: resource.field('tags'),
    },
    servicecatalog_portfolio_constraints(name, block): {
      local resource = blockType.resource('aws_servicecatalog_portfolio_constraints', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        details: build.template(std.get(block, 'details', null)),
        id: build.template(std.get(block, 'id', null)),
        portfolio_id: build.template(block.portfolio_id),
        product_id: build.template(std.get(block, 'product_id', null)),
      }),
      accept_language: resource.field('accept_language'),
      details: resource.field('details'),
      id: resource.field('id'),
      portfolio_id: resource.field('portfolio_id'),
      product_id: resource.field('product_id'),
    },
    servicecatalog_product(name, block): {
      local resource = blockType.resource('aws_servicecatalog_product', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        arn: build.template(std.get(block, 'arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        description: build.template(std.get(block, 'description', null)),
        distributor: build.template(std.get(block, 'distributor', null)),
        has_default_path: build.template(std.get(block, 'has_default_path', null)),
        id: build.template(block.id),
        name: build.template(std.get(block, 'name', null)),
        owner: build.template(std.get(block, 'owner', null)),
        status: build.template(std.get(block, 'status', null)),
        support_description: build.template(std.get(block, 'support_description', null)),
        support_email: build.template(std.get(block, 'support_email', null)),
        support_url: build.template(std.get(block, 'support_url', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      accept_language: resource.field('accept_language'),
      arn: resource.field('arn'),
      created_time: resource.field('created_time'),
      description: resource.field('description'),
      distributor: resource.field('distributor'),
      has_default_path: resource.field('has_default_path'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      status: resource.field('status'),
      support_description: resource.field('support_description'),
      support_email: resource.field('support_email'),
      support_url: resource.field('support_url'),
      tags: resource.field('tags'),
      type: resource.field('type'),
    },
    servicecatalog_provisioning_artifacts(name, block): {
      local resource = blockType.resource('aws_servicecatalog_provisioning_artifacts', name),
      _: resource._(block, {
        accept_language: build.template(std.get(block, 'accept_language', null)),
        id: build.template(std.get(block, 'id', null)),
        product_id: build.template(block.product_id),
        provisioning_artifact_details: build.template(std.get(block, 'provisioning_artifact_details', null)),
      }),
      accept_language: resource.field('accept_language'),
      id: resource.field('id'),
      product_id: resource.field('product_id'),
      provisioning_artifact_details: resource.field('provisioning_artifact_details'),
    },
    servicecatalogappregistry_application(name, block): {
      local resource = blockType.resource('aws_servicecatalogappregistry_application', name),
      _: resource._(block, {
        application_tag: build.template(std.get(block, 'application_tag', null)),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(block.id),
        name: build.template(std.get(block, 'name', null)),
      }),
      application_tag: resource.field('application_tag'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    servicequotas_service(name, block): {
      local resource = blockType.resource('aws_servicequotas_service', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        service_code: build.template(std.get(block, 'service_code', null)),
        service_name: build.template(block.service_name),
      }),
      id: resource.field('id'),
      service_code: resource.field('service_code'),
      service_name: resource.field('service_name'),
    },
    servicequotas_service_quota(name, block): {
      local resource = blockType.resource('aws_servicequotas_service_quota', name),
      _: resource._(block, {
        adjustable: build.template(std.get(block, 'adjustable', null)),
        arn: build.template(std.get(block, 'arn', null)),
        default_value: build.template(std.get(block, 'default_value', null)),
        global_quota: build.template(std.get(block, 'global_quota', null)),
        id: build.template(std.get(block, 'id', null)),
        quota_code: build.template(std.get(block, 'quota_code', null)),
        quota_name: build.template(std.get(block, 'quota_name', null)),
        service_code: build.template(block.service_code),
        service_name: build.template(std.get(block, 'service_name', null)),
        usage_metric: build.template(std.get(block, 'usage_metric', null)),
        value: build.template(std.get(block, 'value', null)),
      }),
      adjustable: resource.field('adjustable'),
      arn: resource.field('arn'),
      default_value: resource.field('default_value'),
      global_quota: resource.field('global_quota'),
      id: resource.field('id'),
      quota_code: resource.field('quota_code'),
      quota_name: resource.field('quota_name'),
      service_code: resource.field('service_code'),
      service_name: resource.field('service_name'),
      usage_metric: resource.field('usage_metric'),
      value: resource.field('value'),
    },
    servicequotas_templates(name, block): {
      local resource = blockType.resource('aws_servicequotas_templates', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        region: build.template(block.region),
      }),
      id: resource.field('id'),
      region: resource.field('region'),
    },
    ses_active_receipt_rule_set(name, block): {
      local resource = blockType.resource('aws_ses_active_receipt_rule_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        rule_set_name: build.template(std.get(block, 'rule_set_name', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      rule_set_name: resource.field('rule_set_name'),
    },
    ses_domain_identity(name, block): {
      local resource = blockType.resource('aws_ses_domain_identity', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        domain: build.template(block.domain),
        id: build.template(std.get(block, 'id', null)),
        verification_token: build.template(std.get(block, 'verification_token', null)),
      }),
      arn: resource.field('arn'),
      domain: resource.field('domain'),
      id: resource.field('id'),
      verification_token: resource.field('verification_token'),
    },
    ses_email_identity(name, block): {
      local resource = blockType.resource('aws_ses_email_identity', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
      }),
      arn: resource.field('arn'),
      email: resource.field('email'),
      id: resource.field('id'),
    },
    sesv2_configuration_set(name, block): {
      local resource = blockType.resource('aws_sesv2_configuration_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        configuration_set_name: build.template(block.configuration_set_name),
        delivery_options: build.template(std.get(block, 'delivery_options', null)),
        id: build.template(std.get(block, 'id', null)),
        reputation_options: build.template(std.get(block, 'reputation_options', null)),
        sending_options: build.template(std.get(block, 'sending_options', null)),
        suppression_options: build.template(std.get(block, 'suppression_options', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tracking_options: build.template(std.get(block, 'tracking_options', null)),
        vdm_options: build.template(std.get(block, 'vdm_options', null)),
      }),
      arn: resource.field('arn'),
      configuration_set_name: resource.field('configuration_set_name'),
      delivery_options: resource.field('delivery_options'),
      id: resource.field('id'),
      reputation_options: resource.field('reputation_options'),
      sending_options: resource.field('sending_options'),
      suppression_options: resource.field('suppression_options'),
      tags: resource.field('tags'),
      tracking_options: resource.field('tracking_options'),
      vdm_options: resource.field('vdm_options'),
    },
    sesv2_dedicated_ip_pool(name, block): {
      local resource = blockType.resource('aws_sesv2_dedicated_ip_pool', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        dedicated_ips: build.template(std.get(block, 'dedicated_ips', null)),
        id: build.template(std.get(block, 'id', null)),
        pool_name: build.template(block.pool_name),
        scaling_mode: build.template(std.get(block, 'scaling_mode', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      dedicated_ips: resource.field('dedicated_ips'),
      id: resource.field('id'),
      pool_name: resource.field('pool_name'),
      scaling_mode: resource.field('scaling_mode'),
      tags: resource.field('tags'),
    },
    sesv2_email_identity(name, block): {
      local resource = blockType.resource('aws_sesv2_email_identity', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        configuration_set_name: build.template(std.get(block, 'configuration_set_name', null)),
        dkim_signing_attributes: build.template(std.get(block, 'dkim_signing_attributes', null)),
        email_identity: build.template(block.email_identity),
        id: build.template(std.get(block, 'id', null)),
        identity_type: build.template(std.get(block, 'identity_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        verified_for_sending_status: build.template(std.get(block, 'verified_for_sending_status', null)),
      }),
      arn: resource.field('arn'),
      configuration_set_name: resource.field('configuration_set_name'),
      dkim_signing_attributes: resource.field('dkim_signing_attributes'),
      email_identity: resource.field('email_identity'),
      id: resource.field('id'),
      identity_type: resource.field('identity_type'),
      tags: resource.field('tags'),
      verified_for_sending_status: resource.field('verified_for_sending_status'),
    },
    sesv2_email_identity_mail_from_attributes(name, block): {
      local resource = blockType.resource('aws_sesv2_email_identity_mail_from_attributes', name),
      _: resource._(block, {
        behavior_on_mx_failure: build.template(std.get(block, 'behavior_on_mx_failure', null)),
        email_identity: build.template(block.email_identity),
        id: build.template(std.get(block, 'id', null)),
        mail_from_domain: build.template(std.get(block, 'mail_from_domain', null)),
      }),
      behavior_on_mx_failure: resource.field('behavior_on_mx_failure'),
      email_identity: resource.field('email_identity'),
      id: resource.field('id'),
      mail_from_domain: resource.field('mail_from_domain'),
    },
    sfn_activity(name, block): {
      local resource = blockType.resource('aws_sfn_activity', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      arn: resource.field('arn'),
      creation_date: resource.field('creation_date'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    sfn_alias(name, block): {
      local resource = blockType.resource('aws_sfn_alias', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        routing_configuration: build.template(std.get(block, 'routing_configuration', null)),
        statemachine_arn: build.template(block.statemachine_arn),
      }),
      arn: resource.field('arn'),
      creation_date: resource.field('creation_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      routing_configuration: resource.field('routing_configuration'),
      statemachine_arn: resource.field('statemachine_arn'),
    },
    sfn_state_machine(name, block): {
      local resource = blockType.resource('aws_sfn_state_machine', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_date: build.template(std.get(block, 'creation_date', null)),
        definition: build.template(std.get(block, 'definition', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        revision_id: build.template(std.get(block, 'revision_id', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      arn: resource.field('arn'),
      creation_date: resource.field('creation_date'),
      definition: resource.field('definition'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      revision_id: resource.field('revision_id'),
      role_arn: resource.field('role_arn'),
      status: resource.field('status'),
    },
    sfn_state_machine_versions(name, block): {
      local resource = blockType.resource('aws_sfn_state_machine_versions', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        statemachine_arn: build.template(block.statemachine_arn),
        statemachine_versions: build.template(std.get(block, 'statemachine_versions', null)),
      }),
      id: resource.field('id'),
      statemachine_arn: resource.field('statemachine_arn'),
      statemachine_versions: resource.field('statemachine_versions'),
    },
    shield_protection(name, block): {
      local resource = blockType.resource('aws_shield_protection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        protection_arn: build.template(std.get(block, 'protection_arn', null)),
        protection_id: build.template(std.get(block, 'protection_id', null)),
        resource_arn: build.template(std.get(block, 'resource_arn', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      protection_arn: resource.field('protection_arn'),
      protection_id: resource.field('protection_id'),
      resource_arn: resource.field('resource_arn'),
    },
    signer_signing_job(name, block): {
      local resource = blockType.resource('aws_signer_signing_job', name),
      _: resource._(block, {
        completed_at: build.template(std.get(block, 'completed_at', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        job_id: build.template(block.job_id),
        job_invoker: build.template(std.get(block, 'job_invoker', null)),
        job_owner: build.template(std.get(block, 'job_owner', null)),
        platform_display_name: build.template(std.get(block, 'platform_display_name', null)),
        platform_id: build.template(std.get(block, 'platform_id', null)),
        profile_name: build.template(std.get(block, 'profile_name', null)),
        profile_version: build.template(std.get(block, 'profile_version', null)),
        requested_by: build.template(std.get(block, 'requested_by', null)),
        revocation_record: build.template(std.get(block, 'revocation_record', null)),
        signature_expires_at: build.template(std.get(block, 'signature_expires_at', null)),
        signed_object: build.template(std.get(block, 'signed_object', null)),
        source: build.template(std.get(block, 'source', null)),
        status: build.template(std.get(block, 'status', null)),
        status_reason: build.template(std.get(block, 'status_reason', null)),
      }),
      completed_at: resource.field('completed_at'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      job_id: resource.field('job_id'),
      job_invoker: resource.field('job_invoker'),
      job_owner: resource.field('job_owner'),
      platform_display_name: resource.field('platform_display_name'),
      platform_id: resource.field('platform_id'),
      profile_name: resource.field('profile_name'),
      profile_version: resource.field('profile_version'),
      requested_by: resource.field('requested_by'),
      revocation_record: resource.field('revocation_record'),
      signature_expires_at: resource.field('signature_expires_at'),
      signed_object: resource.field('signed_object'),
      source: resource.field('source'),
      status: resource.field('status'),
      status_reason: resource.field('status_reason'),
    },
    signer_signing_profile(name, block): {
      local resource = blockType.resource('aws_signer_signing_profile', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        platform_display_name: build.template(std.get(block, 'platform_display_name', null)),
        platform_id: build.template(std.get(block, 'platform_id', null)),
        revocation_record: build.template(std.get(block, 'revocation_record', null)),
        signature_validity_period: build.template(std.get(block, 'signature_validity_period', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
        version_arn: build.template(std.get(block, 'version_arn', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      platform_display_name: resource.field('platform_display_name'),
      platform_id: resource.field('platform_id'),
      revocation_record: resource.field('revocation_record'),
      signature_validity_period: resource.field('signature_validity_period'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      version: resource.field('version'),
      version_arn: resource.field('version_arn'),
    },
    sns_topic(name, block): {
      local resource = blockType.resource('aws_sns_topic', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
    },
    spot_datafeed_subscription(name, block): {
      local resource = blockType.resource('aws_spot_datafeed_subscription', name),
      _: resource._(block, {
        bucket: build.template(std.get(block, 'bucket', null)),
        prefix: build.template(std.get(block, 'prefix', null)),
      }),
      bucket: resource.field('bucket'),
      prefix: resource.field('prefix'),
    },
    sqs_queue(name, block): {
      local resource = blockType.resource('aws_sqs_queue', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      name: resource.field('name'),
      tags: resource.field('tags'),
      url: resource.field('url'),
    },
    sqs_queues(name, block): {
      local resource = blockType.resource('aws_sqs_queues', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        queue_name_prefix: build.template(std.get(block, 'queue_name_prefix', null)),
        queue_urls: build.template(std.get(block, 'queue_urls', null)),
      }),
      id: resource.field('id'),
      queue_name_prefix: resource.field('queue_name_prefix'),
      queue_urls: resource.field('queue_urls'),
    },
    ssm_document(name, block): {
      local resource = blockType.resource('aws_ssm_document', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        content: build.template(std.get(block, 'content', null)),
        document_format: build.template(std.get(block, 'document_format', null)),
        document_type: build.template(std.get(block, 'document_type', null)),
        document_version: build.template(std.get(block, 'document_version', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      arn: resource.field('arn'),
      content: resource.field('content'),
      document_format: resource.field('document_format'),
      document_type: resource.field('document_type'),
      document_version: resource.field('document_version'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    ssm_instances(name, block): {
      local resource = blockType.resource('aws_ssm_instances', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
    },
    ssm_maintenance_windows(name, block): {
      local resource = blockType.resource('aws_ssm_maintenance_windows', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
    },
    ssm_parameter(name, block): {
      local resource = blockType.resource('aws_ssm_parameter', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        id: build.template(std.get(block, 'id', null)),
        insecure_value: build.template(std.get(block, 'insecure_value', null)),
        name: build.template(block.name),
        type: build.template(std.get(block, 'type', null)),
        value: build.template(std.get(block, 'value', null)),
        version: build.template(std.get(block, 'version', null)),
        with_decryption: build.template(std.get(block, 'with_decryption', null)),
      }),
      arn: resource.field('arn'),
      id: resource.field('id'),
      insecure_value: resource.field('insecure_value'),
      name: resource.field('name'),
      type: resource.field('type'),
      value: resource.field('value'),
      version: resource.field('version'),
      with_decryption: resource.field('with_decryption'),
    },
    ssm_parameters_by_path(name, block): {
      local resource = blockType.resource('aws_ssm_parameters_by_path', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        names: build.template(std.get(block, 'names', null)),
        path: build.template(block.path),
        recursive: build.template(std.get(block, 'recursive', null)),
        types: build.template(std.get(block, 'types', null)),
        values: build.template(std.get(block, 'values', null)),
        with_decryption: build.template(std.get(block, 'with_decryption', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      names: resource.field('names'),
      path: resource.field('path'),
      recursive: resource.field('recursive'),
      types: resource.field('types'),
      values: resource.field('values'),
      with_decryption: resource.field('with_decryption'),
    },
    ssm_patch_baseline(name, block): {
      local resource = blockType.resource('aws_ssm_patch_baseline', name),
      _: resource._(block, {
        approval_rule: build.template(std.get(block, 'approval_rule', null)),
        approved_patches: build.template(std.get(block, 'approved_patches', null)),
        approved_patches_compliance_level: build.template(std.get(block, 'approved_patches_compliance_level', null)),
        approved_patches_enable_non_security: build.template(std.get(block, 'approved_patches_enable_non_security', null)),
        default_baseline: build.template(std.get(block, 'default_baseline', null)),
        description: build.template(std.get(block, 'description', null)),
        global_filter: build.template(std.get(block, 'global_filter', null)),
        id: build.template(std.get(block, 'id', null)),
        json: build.template(std.get(block, 'json', null)),
        name: build.template(std.get(block, 'name', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        operating_system: build.template(std.get(block, 'operating_system', null)),
        owner: build.template(block.owner),
        rejected_patches: build.template(std.get(block, 'rejected_patches', null)),
        rejected_patches_action: build.template(std.get(block, 'rejected_patches_action', null)),
        source: build.template(std.get(block, 'source', null)),
      }),
      approval_rule: resource.field('approval_rule'),
      approved_patches: resource.field('approved_patches'),
      approved_patches_compliance_level: resource.field('approved_patches_compliance_level'),
      approved_patches_enable_non_security: resource.field('approved_patches_enable_non_security'),
      default_baseline: resource.field('default_baseline'),
      description: resource.field('description'),
      global_filter: resource.field('global_filter'),
      id: resource.field('id'),
      json: resource.field('json'),
      name: resource.field('name'),
      name_prefix: resource.field('name_prefix'),
      operating_system: resource.field('operating_system'),
      owner: resource.field('owner'),
      rejected_patches: resource.field('rejected_patches'),
      rejected_patches_action: resource.field('rejected_patches_action'),
      source: resource.field('source'),
    },
    ssm_patch_baselines(name, block): {
      local resource = blockType.resource('aws_ssm_patch_baselines', name),
      _: resource._(block, {
        baseline_identities: build.template(std.get(block, 'baseline_identities', null)),
        default_baselines: build.template(std.get(block, 'default_baselines', null)),
      }),
      baseline_identities: resource.field('baseline_identities'),
      default_baselines: resource.field('default_baselines'),
    },
    ssmcontacts_contact(name, block): {
      local resource = blockType.resource('aws_ssmcontacts_contact', name),
      _: resource._(block, {
        alias: build.template(std.get(block, 'alias', null)),
        arn: build.template(block.arn),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      alias: resource.field('alias'),
      arn: resource.field('arn'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      tags: resource.field('tags'),
      type: resource.field('type'),
    },
    ssmcontacts_contact_channel(name, block): {
      local resource = blockType.resource('aws_ssmcontacts_contact_channel', name),
      _: resource._(block, {
        activation_status: build.template(std.get(block, 'activation_status', null)),
        arn: build.template(block.arn),
        contact_id: build.template(std.get(block, 'contact_id', null)),
        delivery_address: build.template(std.get(block, 'delivery_address', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      activation_status: resource.field('activation_status'),
      arn: resource.field('arn'),
      contact_id: resource.field('contact_id'),
      delivery_address: resource.field('delivery_address'),
      id: resource.field('id'),
      name: resource.field('name'),
      type: resource.field('type'),
    },
    ssmcontacts_plan(name, block): {
      local resource = blockType.resource('aws_ssmcontacts_plan', name),
      _: resource._(block, {
        contact_id: build.template(block.contact_id),
        id: build.template(std.get(block, 'id', null)),
        stage: build.template(std.get(block, 'stage', null)),
      }),
      contact_id: resource.field('contact_id'),
      id: resource.field('id'),
      stage: resource.field('stage'),
    },
    ssmcontacts_rotation(name, block): {
      local resource = blockType.resource('aws_ssmcontacts_rotation', name),
      _: resource._(block, {
        arn: build.template(block.arn),
        contact_ids: build.template(std.get(block, 'contact_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        recurrence: build.template(std.get(block, 'recurrence', null)),
        start_time: build.template(std.get(block, 'start_time', null)),
        tags: build.template(std.get(block, 'tags', null)),
        time_zone_id: build.template(std.get(block, 'time_zone_id', null)),
      }),
      arn: resource.field('arn'),
      contact_ids: resource.field('contact_ids'),
      id: resource.field('id'),
      name: resource.field('name'),
      recurrence: resource.field('recurrence'),
      start_time: resource.field('start_time'),
      tags: resource.field('tags'),
      time_zone_id: resource.field('time_zone_id'),
    },
    ssmincidents_replication_set(name, block): {
      local resource = blockType.resource('aws_ssmincidents_replication_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        deletion_protected: build.template(std.get(block, 'deletion_protected', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified_by: build.template(std.get(block, 'last_modified_by', null)),
        region: build.template(std.get(block, 'region', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      created_by: resource.field('created_by'),
      deletion_protected: resource.field('deletion_protected'),
      id: resource.field('id'),
      last_modified_by: resource.field('last_modified_by'),
      region: resource.field('region'),
      status: resource.field('status'),
      tags: resource.field('tags'),
    },
    ssmincidents_response_plan(name, block): {
      local resource = blockType.resource('aws_ssmincidents_response_plan', name),
      _: resource._(block, {
        action: build.template(std.get(block, 'action', null)),
        arn: build.template(block.arn),
        chat_channel: build.template(std.get(block, 'chat_channel', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        engagements: build.template(std.get(block, 'engagements', null)),
        id: build.template(std.get(block, 'id', null)),
        incident_template: build.template(std.get(block, 'incident_template', null)),
        integration: build.template(std.get(block, 'integration', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      action: resource.field('action'),
      arn: resource.field('arn'),
      chat_channel: resource.field('chat_channel'),
      display_name: resource.field('display_name'),
      engagements: resource.field('engagements'),
      id: resource.field('id'),
      incident_template: resource.field('incident_template'),
      integration: resource.field('integration'),
      name: resource.field('name'),
      tags: resource.field('tags'),
    },
    ssoadmin_application(name, block): {
      local resource = blockType.resource('aws_ssoadmin_application', name),
      _: resource._(block, {
        application_account: build.template(std.get(block, 'application_account', null)),
        application_arn: build.template(block.application_arn),
        application_provider_arn: build.template(std.get(block, 'application_provider_arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_arn: build.template(std.get(block, 'instance_arn', null)),
        name: build.template(std.get(block, 'name', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      application_account: resource.field('application_account'),
      application_arn: resource.field('application_arn'),
      application_provider_arn: resource.field('application_provider_arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_arn: resource.field('instance_arn'),
      name: resource.field('name'),
      status: resource.field('status'),
    },
    ssoadmin_application_assignments(name, block): {
      local resource = blockType.resource('aws_ssoadmin_application_assignments', name),
      _: resource._(block, {
        application_arn: build.template(block.application_arn),
        id: build.template(std.get(block, 'id', null)),
      }),
      application_arn: resource.field('application_arn'),
      id: resource.field('id'),
    },
    ssoadmin_application_providers(name, block): {
      local resource = blockType.resource('aws_ssoadmin_application_providers', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    ssoadmin_instances(name, block): {
      local resource = blockType.resource('aws_ssoadmin_instances', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_store_ids: build.template(std.get(block, 'identity_store_ids', null)),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      identity_store_ids: resource.field('identity_store_ids'),
    },
    ssoadmin_permission_set(name, block): {
      local resource = blockType.resource('aws_ssoadmin_permission_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_arn: build.template(block.instance_arn),
        name: build.template(std.get(block, 'name', null)),
        relay_state: build.template(std.get(block, 'relay_state', null)),
        session_duration: build.template(std.get(block, 'session_duration', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      instance_arn: resource.field('instance_arn'),
      name: resource.field('name'),
      relay_state: resource.field('relay_state'),
      session_duration: resource.field('session_duration'),
      tags: resource.field('tags'),
    },
    ssoadmin_permission_sets(name, block): {
      local resource = blockType.resource('aws_ssoadmin_permission_sets', name),
      _: resource._(block, {
        arns: build.template(std.get(block, 'arns', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_arn: build.template(block.instance_arn),
      }),
      arns: resource.field('arns'),
      id: resource.field('id'),
      instance_arn: resource.field('instance_arn'),
    },
    ssoadmin_principal_application_assignments(name, block): {
      local resource = blockType.resource('aws_ssoadmin_principal_application_assignments', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instance_arn: build.template(block.instance_arn),
        principal_id: build.template(block.principal_id),
        principal_type: build.template(block.principal_type),
      }),
      id: resource.field('id'),
      instance_arn: resource.field('instance_arn'),
      principal_id: resource.field('principal_id'),
      principal_type: resource.field('principal_type'),
    },
    storagegateway_local_disk(name, block): {
      local resource = blockType.resource('aws_storagegateway_local_disk', name),
      _: resource._(block, {
        disk_id: build.template(std.get(block, 'disk_id', null)),
        disk_node: build.template(std.get(block, 'disk_node', null)),
        disk_path: build.template(std.get(block, 'disk_path', null)),
        gateway_arn: build.template(block.gateway_arn),
        id: build.template(std.get(block, 'id', null)),
      }),
      disk_id: resource.field('disk_id'),
      disk_node: resource.field('disk_node'),
      disk_path: resource.field('disk_path'),
      gateway_arn: resource.field('gateway_arn'),
      id: resource.field('id'),
    },
    subnet(name, block): {
      local resource = blockType.resource('aws_subnet', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        assign_ipv6_address_on_creation: build.template(std.get(block, 'assign_ipv6_address_on_creation', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        availability_zone_id: build.template(std.get(block, 'availability_zone_id', null)),
        available_ip_address_count: build.template(std.get(block, 'available_ip_address_count', null)),
        cidr_block: build.template(std.get(block, 'cidr_block', null)),
        customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null)),
        default_for_az: build.template(std.get(block, 'default_for_az', null)),
        enable_dns64: build.template(std.get(block, 'enable_dns64', null)),
        enable_lni_at_device_index: build.template(std.get(block, 'enable_lni_at_device_index', null)),
        enable_resource_name_dns_a_record_on_launch: build.template(std.get(block, 'enable_resource_name_dns_a_record_on_launch', null)),
        enable_resource_name_dns_aaaa_record_on_launch: build.template(std.get(block, 'enable_resource_name_dns_aaaa_record_on_launch', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv6_cidr_block: build.template(std.get(block, 'ipv6_cidr_block', null)),
        ipv6_cidr_block_association_id: build.template(std.get(block, 'ipv6_cidr_block_association_id', null)),
        ipv6_native: build.template(std.get(block, 'ipv6_native', null)),
        map_customer_owned_ip_on_launch: build.template(std.get(block, 'map_customer_owned_ip_on_launch', null)),
        map_public_ip_on_launch: build.template(std.get(block, 'map_public_ip_on_launch', null)),
        outpost_arn: build.template(std.get(block, 'outpost_arn', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        private_dns_hostname_type_on_launch: build.template(std.get(block, 'private_dns_hostname_type_on_launch', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      assign_ipv6_address_on_creation: resource.field('assign_ipv6_address_on_creation'),
      availability_zone: resource.field('availability_zone'),
      availability_zone_id: resource.field('availability_zone_id'),
      available_ip_address_count: resource.field('available_ip_address_count'),
      cidr_block: resource.field('cidr_block'),
      customer_owned_ipv4_pool: resource.field('customer_owned_ipv4_pool'),
      default_for_az: resource.field('default_for_az'),
      enable_dns64: resource.field('enable_dns64'),
      enable_lni_at_device_index: resource.field('enable_lni_at_device_index'),
      enable_resource_name_dns_a_record_on_launch: resource.field('enable_resource_name_dns_a_record_on_launch'),
      enable_resource_name_dns_aaaa_record_on_launch: resource.field('enable_resource_name_dns_aaaa_record_on_launch'),
      id: resource.field('id'),
      ipv6_cidr_block: resource.field('ipv6_cidr_block'),
      ipv6_cidr_block_association_id: resource.field('ipv6_cidr_block_association_id'),
      ipv6_native: resource.field('ipv6_native'),
      map_customer_owned_ip_on_launch: resource.field('map_customer_owned_ip_on_launch'),
      map_public_ip_on_launch: resource.field('map_public_ip_on_launch'),
      outpost_arn: resource.field('outpost_arn'),
      owner_id: resource.field('owner_id'),
      private_dns_hostname_type_on_launch: resource.field('private_dns_hostname_type_on_launch'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    subnets(name, block): {
      local resource = blockType.resource('aws_subnets', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    synthetics_runtime_version(name, block): {
      local resource = blockType.resource('aws_synthetics_runtime_version', name),
      _: resource._(block, {
        deprecation_date: build.template(std.get(block, 'deprecation_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        latest: build.template(std.get(block, 'latest', null)),
        prefix: build.template(block.prefix),
        release_date: build.template(std.get(block, 'release_date', null)),
        version: build.template(std.get(block, 'version', null)),
        version_name: build.template(std.get(block, 'version_name', null)),
      }),
      deprecation_date: resource.field('deprecation_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      latest: resource.field('latest'),
      prefix: resource.field('prefix'),
      release_date: resource.field('release_date'),
      version: resource.field('version'),
      version_name: resource.field('version_name'),
    },
    synthetics_runtime_versions(name, block): {
      local resource = blockType.resource('aws_synthetics_runtime_versions', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field('id'),
    },
    timestreamwrite_database(name, block): {
      local resource = blockType.resource('aws_timestreamwrite_database', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_time: build.template(std.get(block, 'created_time', null)),
        kms_key_id: build.template(std.get(block, 'kms_key_id', null)),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        name: build.template(block.name),
        table_count: build.template(std.get(block, 'table_count', null)),
      }),
      arn: resource.field('arn'),
      created_time: resource.field('created_time'),
      kms_key_id: resource.field('kms_key_id'),
      last_updated_time: resource.field('last_updated_time'),
      name: resource.field('name'),
      table_count: resource.field('table_count'),
    },
    timestreamwrite_table(name, block): {
      local resource = blockType.resource('aws_timestreamwrite_table', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        database_name: build.template(block.database_name),
        last_updated_time: build.template(std.get(block, 'last_updated_time', null)),
        magnetic_store_write_properties: build.template(std.get(block, 'magnetic_store_write_properties', null)),
        name: build.template(block.name),
        retention_properties: build.template(std.get(block, 'retention_properties', null)),
        schema: build.template(std.get(block, 'schema', null)),
        table_status: build.template(std.get(block, 'table_status', null)),
      }),
      arn: resource.field('arn'),
      creation_time: resource.field('creation_time'),
      database_name: resource.field('database_name'),
      last_updated_time: resource.field('last_updated_time'),
      magnetic_store_write_properties: resource.field('magnetic_store_write_properties'),
      name: resource.field('name'),
      retention_properties: resource.field('retention_properties'),
      schema: resource.field('schema'),
      table_status: resource.field('table_status'),
    },
    transfer_connector(name, block): {
      local resource = blockType.resource('aws_transfer_connector', name),
      _: resource._(block, {
        access_role: build.template(std.get(block, 'access_role', null)),
        arn: build.template(std.get(block, 'arn', null)),
        as2_config: build.template(std.get(block, 'as2_config', null)),
        id: build.template(block.id),
        logging_role: build.template(std.get(block, 'logging_role', null)),
        security_policy_name: build.template(std.get(block, 'security_policy_name', null)),
        service_managed_egress_ip_addresses: build.template(std.get(block, 'service_managed_egress_ip_addresses', null)),
        sftp_config: build.template(std.get(block, 'sftp_config', null)),
        tags: build.template(std.get(block, 'tags', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      access_role: resource.field('access_role'),
      arn: resource.field('arn'),
      as2_config: resource.field('as2_config'),
      id: resource.field('id'),
      logging_role: resource.field('logging_role'),
      security_policy_name: resource.field('security_policy_name'),
      service_managed_egress_ip_addresses: resource.field('service_managed_egress_ip_addresses'),
      sftp_config: resource.field('sftp_config'),
      tags: resource.field('tags'),
      url: resource.field('url'),
    },
    transfer_server(name, block): {
      local resource = blockType.resource('aws_transfer_server', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        certificate: build.template(std.get(block, 'certificate', null)),
        domain: build.template(std.get(block, 'domain', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        endpoint_type: build.template(std.get(block, 'endpoint_type', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_provider_type: build.template(std.get(block, 'identity_provider_type', null)),
        invocation_role: build.template(std.get(block, 'invocation_role', null)),
        logging_role: build.template(std.get(block, 'logging_role', null)),
        protocols: build.template(std.get(block, 'protocols', null)),
        security_policy_name: build.template(std.get(block, 'security_policy_name', null)),
        server_id: build.template(block.server_id),
        structured_log_destinations: build.template(std.get(block, 'structured_log_destinations', null)),
        tags: build.template(std.get(block, 'tags', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      arn: resource.field('arn'),
      certificate: resource.field('certificate'),
      domain: resource.field('domain'),
      endpoint: resource.field('endpoint'),
      endpoint_type: resource.field('endpoint_type'),
      id: resource.field('id'),
      identity_provider_type: resource.field('identity_provider_type'),
      invocation_role: resource.field('invocation_role'),
      logging_role: resource.field('logging_role'),
      protocols: resource.field('protocols'),
      security_policy_name: resource.field('security_policy_name'),
      server_id: resource.field('server_id'),
      structured_log_destinations: resource.field('structured_log_destinations'),
      tags: resource.field('tags'),
      url: resource.field('url'),
    },
    verifiedpermissions_policy_store(name, block): {
      local resource = blockType.resource('aws_verifiedpermissions_policy_store', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_date: build.template(std.get(block, 'created_date', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(block.id),
        last_updated_date: build.template(std.get(block, 'last_updated_date', null)),
        validation_settings: build.template(std.get(block, 'validation_settings', null)),
      }),
      arn: resource.field('arn'),
      created_date: resource.field('created_date'),
      description: resource.field('description'),
      id: resource.field('id'),
      last_updated_date: resource.field('last_updated_date'),
      validation_settings: resource.field('validation_settings'),
    },
    vpc(name, block): {
      local resource = blockType.resource('aws_vpc', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cidr_block: build.template(std.get(block, 'cidr_block', null)),
        cidr_block_associations: build.template(std.get(block, 'cidr_block_associations', null)),
        default: build.template(std.get(block, 'default', null)),
        dhcp_options_id: build.template(std.get(block, 'dhcp_options_id', null)),
        enable_dns_hostnames: build.template(std.get(block, 'enable_dns_hostnames', null)),
        enable_dns_support: build.template(std.get(block, 'enable_dns_support', null)),
        enable_network_address_usage_metrics: build.template(std.get(block, 'enable_network_address_usage_metrics', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_tenancy: build.template(std.get(block, 'instance_tenancy', null)),
        ipv6_association_id: build.template(std.get(block, 'ipv6_association_id', null)),
        ipv6_cidr_block: build.template(std.get(block, 'ipv6_cidr_block', null)),
        main_route_table_id: build.template(std.get(block, 'main_route_table_id', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      cidr_block: resource.field('cidr_block'),
      cidr_block_associations: resource.field('cidr_block_associations'),
      default: resource.field('default'),
      dhcp_options_id: resource.field('dhcp_options_id'),
      enable_dns_hostnames: resource.field('enable_dns_hostnames'),
      enable_dns_support: resource.field('enable_dns_support'),
      enable_network_address_usage_metrics: resource.field('enable_network_address_usage_metrics'),
      id: resource.field('id'),
      instance_tenancy: resource.field('instance_tenancy'),
      ipv6_association_id: resource.field('ipv6_association_id'),
      ipv6_cidr_block: resource.field('ipv6_cidr_block'),
      main_route_table_id: resource.field('main_route_table_id'),
      owner_id: resource.field('owner_id'),
      state: resource.field('state'),
      tags: resource.field('tags'),
    },
    vpc_dhcp_options(name, block): {
      local resource = blockType.resource('aws_vpc_dhcp_options', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        dhcp_options_id: build.template(std.get(block, 'dhcp_options_id', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        domain_name_servers: build.template(std.get(block, 'domain_name_servers', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv6_address_preferred_lease_time: build.template(std.get(block, 'ipv6_address_preferred_lease_time', null)),
        netbios_name_servers: build.template(std.get(block, 'netbios_name_servers', null)),
        netbios_node_type: build.template(std.get(block, 'netbios_node_type', null)),
        ntp_servers: build.template(std.get(block, 'ntp_servers', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      dhcp_options_id: resource.field('dhcp_options_id'),
      domain_name: resource.field('domain_name'),
      domain_name_servers: resource.field('domain_name_servers'),
      id: resource.field('id'),
      ipv6_address_preferred_lease_time: resource.field('ipv6_address_preferred_lease_time'),
      netbios_name_servers: resource.field('netbios_name_servers'),
      netbios_node_type: resource.field('netbios_node_type'),
      ntp_servers: resource.field('ntp_servers'),
      owner_id: resource.field('owner_id'),
      tags: resource.field('tags'),
    },
    vpc_endpoint(name, block): {
      local resource = blockType.resource('aws_vpc_endpoint', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cidr_blocks: build.template(std.get(block, 'cidr_blocks', null)),
        dns_entry: build.template(std.get(block, 'dns_entry', null)),
        dns_options: build.template(std.get(block, 'dns_options', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        network_interface_ids: build.template(std.get(block, 'network_interface_ids', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        policy: build.template(std.get(block, 'policy', null)),
        prefix_list_id: build.template(std.get(block, 'prefix_list_id', null)),
        private_dns_enabled: build.template(std.get(block, 'private_dns_enabled', null)),
        requester_managed: build.template(std.get(block, 'requester_managed', null)),
        route_table_ids: build.template(std.get(block, 'route_table_ids', null)),
        security_group_ids: build.template(std.get(block, 'security_group_ids', null)),
        service_name: build.template(std.get(block, 'service_name', null)),
        state: build.template(std.get(block, 'state', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_endpoint_type: build.template(std.get(block, 'vpc_endpoint_type', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      arn: resource.field('arn'),
      cidr_blocks: resource.field('cidr_blocks'),
      dns_entry: resource.field('dns_entry'),
      dns_options: resource.field('dns_options'),
      id: resource.field('id'),
      ip_address_type: resource.field('ip_address_type'),
      network_interface_ids: resource.field('network_interface_ids'),
      owner_id: resource.field('owner_id'),
      policy: resource.field('policy'),
      prefix_list_id: resource.field('prefix_list_id'),
      private_dns_enabled: resource.field('private_dns_enabled'),
      requester_managed: resource.field('requester_managed'),
      route_table_ids: resource.field('route_table_ids'),
      security_group_ids: resource.field('security_group_ids'),
      service_name: resource.field('service_name'),
      state: resource.field('state'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      vpc_endpoint_type: resource.field('vpc_endpoint_type'),
      vpc_id: resource.field('vpc_id'),
    },
    vpc_endpoint_service(name, block): {
      local resource = blockType.resource('aws_vpc_endpoint_service', name),
      _: resource._(block, {
        acceptance_required: build.template(std.get(block, 'acceptance_required', null)),
        arn: build.template(std.get(block, 'arn', null)),
        availability_zones: build.template(std.get(block, 'availability_zones', null)),
        base_endpoint_dns_names: build.template(std.get(block, 'base_endpoint_dns_names', null)),
        id: build.template(std.get(block, 'id', null)),
        manages_vpc_endpoints: build.template(std.get(block, 'manages_vpc_endpoints', null)),
        owner: build.template(std.get(block, 'owner', null)),
        private_dns_name: build.template(std.get(block, 'private_dns_name', null)),
        private_dns_names: build.template(std.get(block, 'private_dns_names', null)),
        service: build.template(std.get(block, 'service', null)),
        service_id: build.template(std.get(block, 'service_id', null)),
        service_name: build.template(std.get(block, 'service_name', null)),
        service_type: build.template(std.get(block, 'service_type', null)),
        supported_ip_address_types: build.template(std.get(block, 'supported_ip_address_types', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_endpoint_policy_supported: build.template(std.get(block, 'vpc_endpoint_policy_supported', null)),
      }),
      acceptance_required: resource.field('acceptance_required'),
      arn: resource.field('arn'),
      availability_zones: resource.field('availability_zones'),
      base_endpoint_dns_names: resource.field('base_endpoint_dns_names'),
      id: resource.field('id'),
      manages_vpc_endpoints: resource.field('manages_vpc_endpoints'),
      owner: resource.field('owner'),
      private_dns_name: resource.field('private_dns_name'),
      private_dns_names: resource.field('private_dns_names'),
      service: resource.field('service'),
      service_id: resource.field('service_id'),
      service_name: resource.field('service_name'),
      service_type: resource.field('service_type'),
      supported_ip_address_types: resource.field('supported_ip_address_types'),
      tags: resource.field('tags'),
      vpc_endpoint_policy_supported: resource.field('vpc_endpoint_policy_supported'),
    },
    vpc_ipam_pool(name, block): {
      local resource = blockType.resource('aws_vpc_ipam_pool', name),
      _: resource._(block, {
        address_family: build.template(std.get(block, 'address_family', null)),
        allocation_default_netmask_length: build.template(std.get(block, 'allocation_default_netmask_length', null)),
        allocation_max_netmask_length: build.template(std.get(block, 'allocation_max_netmask_length', null)),
        allocation_min_netmask_length: build.template(std.get(block, 'allocation_min_netmask_length', null)),
        allocation_resource_tags: build.template(std.get(block, 'allocation_resource_tags', null)),
        arn: build.template(std.get(block, 'arn', null)),
        auto_import: build.template(std.get(block, 'auto_import', null)),
        aws_service: build.template(std.get(block, 'aws_service', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        ipam_pool_id: build.template(std.get(block, 'ipam_pool_id', null)),
        ipam_scope_id: build.template(std.get(block, 'ipam_scope_id', null)),
        ipam_scope_type: build.template(std.get(block, 'ipam_scope_type', null)),
        locale: build.template(std.get(block, 'locale', null)),
        pool_depth: build.template(std.get(block, 'pool_depth', null)),
        publicly_advertisable: build.template(std.get(block, 'publicly_advertisable', null)),
        source_ipam_pool_id: build.template(std.get(block, 'source_ipam_pool_id', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      address_family: resource.field('address_family'),
      allocation_default_netmask_length: resource.field('allocation_default_netmask_length'),
      allocation_max_netmask_length: resource.field('allocation_max_netmask_length'),
      allocation_min_netmask_length: resource.field('allocation_min_netmask_length'),
      allocation_resource_tags: resource.field('allocation_resource_tags'),
      arn: resource.field('arn'),
      auto_import: resource.field('auto_import'),
      aws_service: resource.field('aws_service'),
      description: resource.field('description'),
      id: resource.field('id'),
      ipam_pool_id: resource.field('ipam_pool_id'),
      ipam_scope_id: resource.field('ipam_scope_id'),
      ipam_scope_type: resource.field('ipam_scope_type'),
      locale: resource.field('locale'),
      pool_depth: resource.field('pool_depth'),
      publicly_advertisable: resource.field('publicly_advertisable'),
      source_ipam_pool_id: resource.field('source_ipam_pool_id'),
      state: resource.field('state'),
      tags: resource.field('tags'),
    },
    vpc_ipam_pool_cidrs(name, block): {
      local resource = blockType.resource('aws_vpc_ipam_pool_cidrs', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ipam_pool_cidrs: build.template(std.get(block, 'ipam_pool_cidrs', null)),
        ipam_pool_id: build.template(block.ipam_pool_id),
      }),
      id: resource.field('id'),
      ipam_pool_cidrs: resource.field('ipam_pool_cidrs'),
      ipam_pool_id: resource.field('ipam_pool_id'),
    },
    vpc_ipam_pools(name, block): {
      local resource = blockType.resource('aws_vpc_ipam_pools', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ipam_pools: build.template(std.get(block, 'ipam_pools', null)),
      }),
      id: resource.field('id'),
      ipam_pools: resource.field('ipam_pools'),
    },
    vpc_ipam_preview_next_cidr(name, block): {
      local resource = blockType.resource('aws_vpc_ipam_preview_next_cidr', name),
      _: resource._(block, {
        cidr: build.template(std.get(block, 'cidr', null)),
        disallowed_cidrs: build.template(std.get(block, 'disallowed_cidrs', null)),
        id: build.template(std.get(block, 'id', null)),
        ipam_pool_id: build.template(block.ipam_pool_id),
        netmask_length: build.template(std.get(block, 'netmask_length', null)),
      }),
      cidr: resource.field('cidr'),
      disallowed_cidrs: resource.field('disallowed_cidrs'),
      id: resource.field('id'),
      ipam_pool_id: resource.field('ipam_pool_id'),
      netmask_length: resource.field('netmask_length'),
    },
    vpc_peering_connection(name, block): {
      local resource = blockType.resource('aws_vpc_peering_connection', name),
      _: resource._(block, {
        accepter: build.template(std.get(block, 'accepter', null)),
        cidr_block: build.template(std.get(block, 'cidr_block', null)),
        cidr_block_set: build.template(std.get(block, 'cidr_block_set', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv6_cidr_block_set: build.template(std.get(block, 'ipv6_cidr_block_set', null)),
        owner_id: build.template(std.get(block, 'owner_id', null)),
        peer_cidr_block: build.template(std.get(block, 'peer_cidr_block', null)),
        peer_cidr_block_set: build.template(std.get(block, 'peer_cidr_block_set', null)),
        peer_ipv6_cidr_block_set: build.template(std.get(block, 'peer_ipv6_cidr_block_set', null)),
        peer_owner_id: build.template(std.get(block, 'peer_owner_id', null)),
        peer_region: build.template(std.get(block, 'peer_region', null)),
        peer_vpc_id: build.template(std.get(block, 'peer_vpc_id', null)),
        region: build.template(std.get(block, 'region', null)),
        requester: build.template(std.get(block, 'requester', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vpc_id: build.template(std.get(block, 'vpc_id', null)),
      }),
      accepter: resource.field('accepter'),
      cidr_block: resource.field('cidr_block'),
      cidr_block_set: resource.field('cidr_block_set'),
      id: resource.field('id'),
      ipv6_cidr_block_set: resource.field('ipv6_cidr_block_set'),
      owner_id: resource.field('owner_id'),
      peer_cidr_block: resource.field('peer_cidr_block'),
      peer_cidr_block_set: resource.field('peer_cidr_block_set'),
      peer_ipv6_cidr_block_set: resource.field('peer_ipv6_cidr_block_set'),
      peer_owner_id: resource.field('peer_owner_id'),
      peer_region: resource.field('peer_region'),
      peer_vpc_id: resource.field('peer_vpc_id'),
      region: resource.field('region'),
      requester: resource.field('requester'),
      status: resource.field('status'),
      tags: resource.field('tags'),
      vpc_id: resource.field('vpc_id'),
    },
    vpc_peering_connections(name, block): {
      local resource = blockType.resource('aws_vpc_peering_connections', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    vpc_security_group_rule(name, block): {
      local resource = blockType.resource('aws_vpc_security_group_rule', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        cidr_ipv4: build.template(std.get(block, 'cidr_ipv4', null)),
        cidr_ipv6: build.template(std.get(block, 'cidr_ipv6', null)),
        description: build.template(std.get(block, 'description', null)),
        from_port: build.template(std.get(block, 'from_port', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_protocol: build.template(std.get(block, 'ip_protocol', null)),
        is_egress: build.template(std.get(block, 'is_egress', null)),
        prefix_list_id: build.template(std.get(block, 'prefix_list_id', null)),
        referenced_security_group_id: build.template(std.get(block, 'referenced_security_group_id', null)),
        security_group_id: build.template(std.get(block, 'security_group_id', null)),
        security_group_rule_id: build.template(std.get(block, 'security_group_rule_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        to_port: build.template(std.get(block, 'to_port', null)),
      }),
      arn: resource.field('arn'),
      cidr_ipv4: resource.field('cidr_ipv4'),
      cidr_ipv6: resource.field('cidr_ipv6'),
      description: resource.field('description'),
      from_port: resource.field('from_port'),
      id: resource.field('id'),
      ip_protocol: resource.field('ip_protocol'),
      is_egress: resource.field('is_egress'),
      prefix_list_id: resource.field('prefix_list_id'),
      referenced_security_group_id: resource.field('referenced_security_group_id'),
      security_group_id: resource.field('security_group_id'),
      security_group_rule_id: resource.field('security_group_rule_id'),
      tags: resource.field('tags'),
      to_port: resource.field('to_port'),
    },
    vpc_security_group_rules(name, block): {
      local resource = blockType.resource('aws_vpc_security_group_rules', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    vpclattice_auth_policy(name, block): {
      local resource = blockType.resource('aws_vpclattice_auth_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(std.get(block, 'policy', null)),
        resource_identifier: build.template(block.resource_identifier),
        state: build.template(std.get(block, 'state', null)),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      resource_identifier: resource.field('resource_identifier'),
      state: resource.field('state'),
    },
    vpclattice_listener(name, block): {
      local resource = blockType.resource('aws_vpclattice_listener', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        default_action: build.template(std.get(block, 'default_action', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_at: build.template(std.get(block, 'last_updated_at', null)),
        listener_id: build.template(std.get(block, 'listener_id', null)),
        listener_identifier: build.template(block.listener_identifier),
        name: build.template(std.get(block, 'name', null)),
        port: build.template(std.get(block, 'port', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        service_arn: build.template(std.get(block, 'service_arn', null)),
        service_id: build.template(std.get(block, 'service_id', null)),
        service_identifier: build.template(block.service_identifier),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      created_at: resource.field('created_at'),
      default_action: resource.field('default_action'),
      id: resource.field('id'),
      last_updated_at: resource.field('last_updated_at'),
      listener_id: resource.field('listener_id'),
      listener_identifier: resource.field('listener_identifier'),
      name: resource.field('name'),
      port: resource.field('port'),
      protocol: resource.field('protocol'),
      service_arn: resource.field('service_arn'),
      service_id: resource.field('service_id'),
      service_identifier: resource.field('service_identifier'),
      tags: resource.field('tags'),
    },
    vpclattice_resource_policy(name, block): {
      local resource = blockType.resource('aws_vpclattice_resource_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy: build.template(std.get(block, 'policy', null)),
        resource_arn: build.template(block.resource_arn),
      }),
      id: resource.field('id'),
      policy: resource.field('policy'),
      resource_arn: resource.field('resource_arn'),
    },
    vpclattice_service(name, block): {
      local resource = blockType.resource('aws_vpclattice_service', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auth_type: build.template(std.get(block, 'auth_type', null)),
        certificate_arn: build.template(std.get(block, 'certificate_arn', null)),
        custom_domain_name: build.template(std.get(block, 'custom_domain_name', null)),
        dns_entry: build.template(std.get(block, 'dns_entry', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        service_identifier: build.template(std.get(block, 'service_identifier', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      auth_type: resource.field('auth_type'),
      certificate_arn: resource.field('certificate_arn'),
      custom_domain_name: resource.field('custom_domain_name'),
      dns_entry: resource.field('dns_entry'),
      id: resource.field('id'),
      name: resource.field('name'),
      service_identifier: resource.field('service_identifier'),
      status: resource.field('status'),
      tags: resource.field('tags'),
    },
    vpclattice_service_network(name, block): {
      local resource = blockType.resource('aws_vpclattice_service_network', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        auth_type: build.template(std.get(block, 'auth_type', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        last_updated_at: build.template(std.get(block, 'last_updated_at', null)),
        name: build.template(std.get(block, 'name', null)),
        number_of_associated_services: build.template(std.get(block, 'number_of_associated_services', null)),
        number_of_associated_vpcs: build.template(std.get(block, 'number_of_associated_vpcs', null)),
        service_network_identifier: build.template(block.service_network_identifier),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      arn: resource.field('arn'),
      auth_type: resource.field('auth_type'),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      last_updated_at: resource.field('last_updated_at'),
      name: resource.field('name'),
      number_of_associated_services: resource.field('number_of_associated_services'),
      number_of_associated_vpcs: resource.field('number_of_associated_vpcs'),
      service_network_identifier: resource.field('service_network_identifier'),
      tags: resource.field('tags'),
    },
    vpcs(name, block): {
      local resource = blockType.resource('aws_vpcs', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field('id'),
      ids: resource.field('ids'),
      tags: resource.field('tags'),
    },
    vpn_gateway(name, block): {
      local resource = blockType.resource('aws_vpn_gateway', name),
      _: resource._(block, {
        amazon_side_asn: build.template(std.get(block, 'amazon_side_asn', null)),
        arn: build.template(std.get(block, 'arn', null)),
        attached_vpc_id: build.template(std.get(block, 'attached_vpc_id', null)),
        availability_zone: build.template(std.get(block, 'availability_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      amazon_side_asn: resource.field('amazon_side_asn'),
      arn: resource.field('arn'),
      attached_vpc_id: resource.field('attached_vpc_id'),
      availability_zone: resource.field('availability_zone'),
      id: resource.field('id'),
      state: resource.field('state'),
      tags: resource.field('tags'),
    },
    waf_ipset(name, block): {
      local resource = blockType.resource('aws_waf_ipset', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    waf_rate_based_rule(name, block): {
      local resource = blockType.resource('aws_waf_rate_based_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    waf_rule(name, block): {
      local resource = blockType.resource('aws_waf_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    waf_subscribed_rule_group(name, block): {
      local resource = blockType.resource('aws_waf_subscribed_rule_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        metric_name: build.template(std.get(block, 'metric_name', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      id: resource.field('id'),
      metric_name: resource.field('metric_name'),
      name: resource.field('name'),
    },
    waf_web_acl(name, block): {
      local resource = blockType.resource('aws_waf_web_acl', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    wafregional_ipset(name, block): {
      local resource = blockType.resource('aws_wafregional_ipset', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    wafregional_rate_based_rule(name, block): {
      local resource = blockType.resource('aws_wafregional_rate_based_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    wafregional_rule(name, block): {
      local resource = blockType.resource('aws_wafregional_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    wafregional_subscribed_rule_group(name, block): {
      local resource = blockType.resource('aws_wafregional_subscribed_rule_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        metric_name: build.template(std.get(block, 'metric_name', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      id: resource.field('id'),
      metric_name: resource.field('metric_name'),
      name: resource.field('name'),
    },
    wafregional_web_acl(name, block): {
      local resource = blockType.resource('aws_wafregional_web_acl', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    wafv2_ip_set(name, block): {
      local resource = blockType.resource('aws_wafv2_ip_set', name),
      _: resource._(block, {
        addresses: build.template(std.get(block, 'addresses', null)),
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address_version: build.template(std.get(block, 'ip_address_version', null)),
        name: build.template(block.name),
        scope: build.template(block.scope),
      }),
      addresses: resource.field('addresses'),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      ip_address_version: resource.field('ip_address_version'),
      name: resource.field('name'),
      scope: resource.field('scope'),
    },
    wafv2_regex_pattern_set(name, block): {
      local resource = blockType.resource('aws_wafv2_regex_pattern_set', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        regular_expression: build.template(std.get(block, 'regular_expression', null)),
        scope: build.template(block.scope),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      regular_expression: resource.field('regular_expression'),
      scope: resource.field('scope'),
    },
    wafv2_rule_group(name, block): {
      local resource = blockType.resource('aws_wafv2_rule_group', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        scope: build.template(block.scope),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      scope: resource.field('scope'),
    },
    wafv2_web_acl(name, block): {
      local resource = blockType.resource('aws_wafv2_web_acl', name),
      _: resource._(block, {
        arn: build.template(std.get(block, 'arn', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        scope: build.template(block.scope),
      }),
      arn: resource.field('arn'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      scope: resource.field('scope'),
    },
    workspaces_bundle(name, block): {
      local resource = blockType.resource('aws_workspaces_bundle', name),
      _: resource._(block, {
        bundle_id: build.template(std.get(block, 'bundle_id', null)),
        compute_type: build.template(std.get(block, 'compute_type', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        owner: build.template(std.get(block, 'owner', null)),
        root_storage: build.template(std.get(block, 'root_storage', null)),
        user_storage: build.template(std.get(block, 'user_storage', null)),
      }),
      bundle_id: resource.field('bundle_id'),
      compute_type: resource.field('compute_type'),
      description: resource.field('description'),
      id: resource.field('id'),
      name: resource.field('name'),
      owner: resource.field('owner'),
      root_storage: resource.field('root_storage'),
      user_storage: resource.field('user_storage'),
    },
    workspaces_directory(name, block): {
      local resource = blockType.resource('aws_workspaces_directory', name),
      _: resource._(block, {
        alias: build.template(std.get(block, 'alias', null)),
        customer_user_name: build.template(std.get(block, 'customer_user_name', null)),
        directory_id: build.template(block.directory_id),
        directory_name: build.template(std.get(block, 'directory_name', null)),
        directory_type: build.template(std.get(block, 'directory_type', null)),
        dns_ip_addresses: build.template(std.get(block, 'dns_ip_addresses', null)),
        iam_role_id: build.template(std.get(block, 'iam_role_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_group_ids: build.template(std.get(block, 'ip_group_ids', null)),
        registration_code: build.template(std.get(block, 'registration_code', null)),
        saml_properties: build.template(std.get(block, 'saml_properties', null)),
        self_service_permissions: build.template(std.get(block, 'self_service_permissions', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_access_properties: build.template(std.get(block, 'workspace_access_properties', null)),
        workspace_creation_properties: build.template(std.get(block, 'workspace_creation_properties', null)),
        workspace_security_group_id: build.template(std.get(block, 'workspace_security_group_id', null)),
      }),
      alias: resource.field('alias'),
      customer_user_name: resource.field('customer_user_name'),
      directory_id: resource.field('directory_id'),
      directory_name: resource.field('directory_name'),
      directory_type: resource.field('directory_type'),
      dns_ip_addresses: resource.field('dns_ip_addresses'),
      iam_role_id: resource.field('iam_role_id'),
      id: resource.field('id'),
      ip_group_ids: resource.field('ip_group_ids'),
      registration_code: resource.field('registration_code'),
      saml_properties: resource.field('saml_properties'),
      self_service_permissions: resource.field('self_service_permissions'),
      subnet_ids: resource.field('subnet_ids'),
      tags: resource.field('tags'),
      workspace_access_properties: resource.field('workspace_access_properties'),
      workspace_creation_properties: resource.field('workspace_creation_properties'),
      workspace_security_group_id: resource.field('workspace_security_group_id'),
    },
    workspaces_image(name, block): {
      local resource = blockType.resource('aws_workspaces_image', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        image_id: build.template(block.image_id),
        name: build.template(std.get(block, 'name', null)),
        operating_system_type: build.template(std.get(block, 'operating_system_type', null)),
        required_tenancy: build.template(std.get(block, 'required_tenancy', null)),
        state: build.template(std.get(block, 'state', null)),
      }),
      description: resource.field('description'),
      id: resource.field('id'),
      image_id: resource.field('image_id'),
      name: resource.field('name'),
      operating_system_type: resource.field('operating_system_type'),
      required_tenancy: resource.field('required_tenancy'),
      state: resource.field('state'),
    },
    workspaces_workspace(name, block): {
      local resource = blockType.resource('aws_workspaces_workspace', name),
      _: resource._(block, {
        bundle_id: build.template(std.get(block, 'bundle_id', null)),
        computer_name: build.template(std.get(block, 'computer_name', null)),
        directory_id: build.template(std.get(block, 'directory_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        root_volume_encryption_enabled: build.template(std.get(block, 'root_volume_encryption_enabled', null)),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
        user_name: build.template(std.get(block, 'user_name', null)),
        user_volume_encryption_enabled: build.template(std.get(block, 'user_volume_encryption_enabled', null)),
        volume_encryption_key: build.template(std.get(block, 'volume_encryption_key', null)),
        workspace_id: build.template(std.get(block, 'workspace_id', null)),
        workspace_properties: build.template(std.get(block, 'workspace_properties', null)),
      }),
      bundle_id: resource.field('bundle_id'),
      computer_name: resource.field('computer_name'),
      directory_id: resource.field('directory_id'),
      id: resource.field('id'),
      ip_address: resource.field('ip_address'),
      root_volume_encryption_enabled: resource.field('root_volume_encryption_enabled'),
      state: resource.field('state'),
      tags: resource.field('tags'),
      user_name: resource.field('user_name'),
      user_volume_encryption_enabled: resource.field('user_volume_encryption_enabled'),
      volume_encryption_key: resource.field('volume_encryption_key'),
      workspace_id: resource.field('workspace_id'),
      workspace_properties: resource.field('workspace_properties'),
    },
  },
  func: {
    arn_build(partition, service, region, account_id, resource): provider.func('arn_build', [partition, service, region, account_id, resource]),
    arn_parse(arn): provider.func('arn_parse', [arn]),
    trim_iam_role_path(arn): provider.func('trim_iam_role_path', [arn]),
  },
};

local providerWithConfiguration = provider(null) + {
  withConfiguration(alias, block): provider(std.prune({
    alias: alias,
    access_key: build.template(std.get(block, 'access_key', null)),
    allowed_account_ids: build.template(std.get(block, 'allowed_account_ids', null)),
    custom_ca_bundle: build.template(std.get(block, 'custom_ca_bundle', null)),
    ec2_metadata_service_endpoint: build.template(std.get(block, 'ec2_metadata_service_endpoint', null)),
    ec2_metadata_service_endpoint_mode: build.template(std.get(block, 'ec2_metadata_service_endpoint_mode', null)),
    forbidden_account_ids: build.template(std.get(block, 'forbidden_account_ids', null)),
    http_proxy: build.template(std.get(block, 'http_proxy', null)),
    https_proxy: build.template(std.get(block, 'https_proxy', null)),
    insecure: build.template(std.get(block, 'insecure', null)),
    max_retries: build.template(std.get(block, 'max_retries', null)),
    no_proxy: build.template(std.get(block, 'no_proxy', null)),
    profile: build.template(std.get(block, 'profile', null)),
    region: build.template(std.get(block, 'region', null)),
    retry_mode: build.template(std.get(block, 'retry_mode', null)),
    s3_us_east_1_regional_endpoint: build.template(std.get(block, 's3_us_east_1_regional_endpoint', null)),
    s3_use_path_style: build.template(std.get(block, 's3_use_path_style', null)),
    secret_key: build.template(std.get(block, 'secret_key', null)),
    shared_config_files: build.template(std.get(block, 'shared_config_files', null)),
    shared_credentials_files: build.template(std.get(block, 'shared_credentials_files', null)),
    skip_credentials_validation: build.template(std.get(block, 'skip_credentials_validation', null)),
    skip_metadata_api_check: build.template(std.get(block, 'skip_metadata_api_check', null)),
    skip_region_validation: build.template(std.get(block, 'skip_region_validation', null)),
    skip_requesting_account_id: build.template(std.get(block, 'skip_requesting_account_id', null)),
    sts_region: build.template(std.get(block, 'sts_region', null)),
    token: build.template(std.get(block, 'token', null)),
    token_bucket_rate_limiter_capacity: build.template(std.get(block, 'token_bucket_rate_limiter_capacity', null)),
    use_dualstack_endpoint: build.template(std.get(block, 'use_dualstack_endpoint', null)),
    use_fips_endpoint: build.template(std.get(block, 'use_fips_endpoint', null)),
  })),
};

providerWithConfiguration
