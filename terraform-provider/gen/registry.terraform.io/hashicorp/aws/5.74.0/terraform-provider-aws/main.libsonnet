local build = {
  expression(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then if std.objectHas(val._, 'ref') then val._.ref else '"%s"' % [std.strReplace(val._.str, '\n', '\n')] else std.mapWithKey(function(key, value) self.expression(value), val) else if std.type(val) == 'array' then std.map(function(element) self.expression(element), val) else if std.type(val) == 'string' then '"%s"' % [std.strReplace(val, '\n', '\n')] else val,
  template(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then if std.objectHas(val._, 'ref') then '${%s}' % [val._.ref] else val._.str else std.mapWithKey(function(key, value) self.template(value), val) else if std.type(val) == 'array' then std.map(function(element) self.template(element), val) else if std.type(val) == 'string' then val else val,
  requiredProvider(val): if std.type(val) == 'object' then if std.objectHas(val, '_') then val._.requiredProvider else std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.requiredProvider(val[key]), std.objectFields(val)), {}) else if std.type(val) == 'array' then std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.requiredProvider(val[key]), val), {}) else {},
};

local requiredProvider = {
  _: {
    requiredProvider: {
      aws: {
        source: 'registry.terraform.io/hashicorp/aws',
        version: '5.74.0',
      },
    },
  },
};

local path(segments) = {
  child(segment): path(segments + [segment]),
  out: requiredProvider { _+: { ref: std.join('.', segments) } },
};

local func(name, parameters=[]) =
  local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]);
  requiredProvider { _+: { ref: '%s(%s)' % [name, parameterString] } };

local provider = {
  local name = 'aws',
  provider(block): {
    _: {
      block: {
        provider: {
          [name]: std.prune({
            alias: std.get(block, 'alias', null, true),
          }),
        },
      },
    },
  },
  resource: {
    accessanalyzer_analyzer(name, block): {
      local p = path(['aws_accessanalyzer_analyzer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_accessanalyzer_analyzer: {
              [name]: std.prune({
                analyzer_name: build.template(block.analyzer_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      analyzer_name: p.child('analyzer_name').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    accessanalyzer_archive_rule(name, block): {
      local p = path(['aws_accessanalyzer_archive_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_accessanalyzer_archive_rule: {
              [name]: std.prune({
                analyzer_name: build.template(block.analyzer_name),
                rule_name: build.template(block.rule_name),
              }),
            },
          },
        },
      },
      analyzer_name: p.child('analyzer_name').out,
      id: p.child('id').out,
      rule_name: p.child('rule_name').out,
    },
    account_alternate_contact(name, block): {
      local p = path(['aws_account_alternate_contact', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_account_alternate_contact: {
              [name]: std.prune({
                account_id: build.template(std.get(block, 'account_id', null, true)),
                alternate_contact_type: build.template(block.alternate_contact_type),
                email_address: build.template(block.email_address),
                name: build.template(block.name),
                phone_number: build.template(block.phone_number),
                title: build.template(block.title),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      alternate_contact_type: p.child('alternate_contact_type').out,
      email_address: p.child('email_address').out,
      id: p.child('id').out,
      name: p.child('name').out,
      phone_number: p.child('phone_number').out,
      title: p.child('title').out,
    },
    account_primary_contact(name, block): {
      local p = path(['aws_account_primary_contact', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_account_primary_contact: {
              [name]: std.prune({
                account_id: build.template(std.get(block, 'account_id', null, true)),
                address_line_1: build.template(block.address_line_1),
                address_line_2: build.template(std.get(block, 'address_line_2', null, true)),
                address_line_3: build.template(std.get(block, 'address_line_3', null, true)),
                city: build.template(block.city),
                company_name: build.template(std.get(block, 'company_name', null, true)),
                country_code: build.template(block.country_code),
                district_or_county: build.template(std.get(block, 'district_or_county', null, true)),
                full_name: build.template(block.full_name),
                phone_number: build.template(block.phone_number),
                postal_code: build.template(block.postal_code),
                state_or_region: build.template(std.get(block, 'state_or_region', null, true)),
                website_url: build.template(std.get(block, 'website_url', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      address_line_1: p.child('address_line_1').out,
      address_line_2: p.child('address_line_2').out,
      address_line_3: p.child('address_line_3').out,
      city: p.child('city').out,
      company_name: p.child('company_name').out,
      country_code: p.child('country_code').out,
      district_or_county: p.child('district_or_county').out,
      full_name: p.child('full_name').out,
      id: p.child('id').out,
      phone_number: p.child('phone_number').out,
      postal_code: p.child('postal_code').out,
      state_or_region: p.child('state_or_region').out,
      website_url: p.child('website_url').out,
    },
    account_region(name, block): {
      local p = path(['aws_account_region', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_account_region: {
              [name]: std.prune({
                account_id: build.template(std.get(block, 'account_id', null, true)),
                enabled: build.template(block.enabled),
                region_name: build.template(block.region_name),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      opt_status: p.child('opt_status').out,
      region_name: p.child('region_name').out,
    },
    acm_certificate(name, block): {
      local p = path(['aws_acm_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_acm_certificate: {
              [name]: std.prune({
                certificate_authority_arn: build.template(std.get(block, 'certificate_authority_arn', null, true)),
                certificate_body: build.template(std.get(block, 'certificate_body', null, true)),
                certificate_chain: build.template(std.get(block, 'certificate_chain', null, true)),
                early_renewal_duration: build.template(std.get(block, 'early_renewal_duration', null, true)),
                private_key: build.template(std.get(block, 'private_key', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      certificate_authority_arn: p.child('certificate_authority_arn').out,
      certificate_body: p.child('certificate_body').out,
      certificate_chain: p.child('certificate_chain').out,
      domain_name: p.child('domain_name').out,
      domain_validation_options: p.child('domain_validation_options').out,
      early_renewal_duration: p.child('early_renewal_duration').out,
      id: p.child('id').out,
      key_algorithm: p.child('key_algorithm').out,
      not_after: p.child('not_after').out,
      not_before: p.child('not_before').out,
      pending_renewal: p.child('pending_renewal').out,
      private_key: p.child('private_key').out,
      renewal_eligibility: p.child('renewal_eligibility').out,
      renewal_summary: p.child('renewal_summary').out,
      status: p.child('status').out,
      subject_alternative_names: p.child('subject_alternative_names').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      validation_emails: p.child('validation_emails').out,
      validation_method: p.child('validation_method').out,
    },
    acm_certificate_validation(name, block): {
      local p = path(['aws_acm_certificate_validation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_acm_certificate_validation: {
              [name]: std.prune({
                certificate_arn: build.template(block.certificate_arn),
                validation_record_fqdns: build.template(std.get(block, 'validation_record_fqdns', null, true)),
              }),
            },
          },
        },
      },
      certificate_arn: p.child('certificate_arn').out,
      id: p.child('id').out,
      validation_record_fqdns: p.child('validation_record_fqdns').out,
    },
    acmpca_certificate(name, block): {
      local p = path(['aws_acmpca_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_acmpca_certificate: {
              [name]: std.prune({
                api_passthrough: build.template(std.get(block, 'api_passthrough', null, true)),
                certificate_authority_arn: build.template(block.certificate_authority_arn),
                certificate_signing_request: build.template(block.certificate_signing_request),
                signing_algorithm: build.template(block.signing_algorithm),
                template_arn: build.template(std.get(block, 'template_arn', null, true)),
              }),
            },
          },
        },
      },
      api_passthrough: p.child('api_passthrough').out,
      arn: p.child('arn').out,
      certificate: p.child('certificate').out,
      certificate_authority_arn: p.child('certificate_authority_arn').out,
      certificate_chain: p.child('certificate_chain').out,
      certificate_signing_request: p.child('certificate_signing_request').out,
      id: p.child('id').out,
      signing_algorithm: p.child('signing_algorithm').out,
      template_arn: p.child('template_arn').out,
    },
    acmpca_certificate_authority(name, block): {
      local p = path(['aws_acmpca_certificate_authority', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_acmpca_certificate_authority: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                permanent_deletion_time_in_days: build.template(std.get(block, 'permanent_deletion_time_in_days', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      certificate: p.child('certificate').out,
      certificate_chain: p.child('certificate_chain').out,
      certificate_signing_request: p.child('certificate_signing_request').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      key_storage_security_standard: p.child('key_storage_security_standard').out,
      not_after: p.child('not_after').out,
      not_before: p.child('not_before').out,
      permanent_deletion_time_in_days: p.child('permanent_deletion_time_in_days').out,
      serial: p.child('serial').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      usage_mode: p.child('usage_mode').out,
    },
    acmpca_certificate_authority_certificate(name, block): {
      local p = path(['aws_acmpca_certificate_authority_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_acmpca_certificate_authority_certificate: {
              [name]: std.prune({
                certificate: build.template(block.certificate),
                certificate_authority_arn: build.template(block.certificate_authority_arn),
                certificate_chain: build.template(std.get(block, 'certificate_chain', null, true)),
              }),
            },
          },
        },
      },
      certificate: p.child('certificate').out,
      certificate_authority_arn: p.child('certificate_authority_arn').out,
      certificate_chain: p.child('certificate_chain').out,
      id: p.child('id').out,
    },
    acmpca_permission(name, block): {
      local p = path(['aws_acmpca_permission', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_acmpca_permission: {
              [name]: std.prune({
                actions: build.template(block.actions),
                certificate_authority_arn: build.template(block.certificate_authority_arn),
                principal: build.template(block.principal),
              }),
            },
          },
        },
      },
      actions: p.child('actions').out,
      certificate_authority_arn: p.child('certificate_authority_arn').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
      principal: p.child('principal').out,
      source_account: p.child('source_account').out,
    },
    acmpca_policy(name, block): {
      local p = path(['aws_acmpca_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_acmpca_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      resource_arn: p.child('resource_arn').out,
    },
    alb(name, block): {
      local p = path(['aws_alb', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_alb: {
              [name]: std.prune({
                client_keep_alive: build.template(std.get(block, 'client_keep_alive', null, true)),
                customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null, true)),
                desync_mitigation_mode: build.template(std.get(block, 'desync_mitigation_mode', null, true)),
                dns_record_client_routing_policy: build.template(std.get(block, 'dns_record_client_routing_policy', null, true)),
                drop_invalid_header_fields: build.template(std.get(block, 'drop_invalid_header_fields', null, true)),
                enable_cross_zone_load_balancing: build.template(std.get(block, 'enable_cross_zone_load_balancing', null, true)),
                enable_deletion_protection: build.template(std.get(block, 'enable_deletion_protection', null, true)),
                enable_http2: build.template(std.get(block, 'enable_http2', null, true)),
                enable_tls_version_and_cipher_suite_headers: build.template(std.get(block, 'enable_tls_version_and_cipher_suite_headers', null, true)),
                enable_waf_fail_open: build.template(std.get(block, 'enable_waf_fail_open', null, true)),
                enable_xff_client_port: build.template(std.get(block, 'enable_xff_client_port', null, true)),
                enable_zonal_shift: build.template(std.get(block, 'enable_zonal_shift', null, true)),
                idle_timeout: build.template(std.get(block, 'idle_timeout', null, true)),
                load_balancer_type: build.template(std.get(block, 'load_balancer_type', null, true)),
                preserve_host_header: build.template(std.get(block, 'preserve_host_header', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                xff_header_processing_mode: build.template(std.get(block, 'xff_header_processing_mode', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      arn_suffix: p.child('arn_suffix').out,
      client_keep_alive: p.child('client_keep_alive').out,
      customer_owned_ipv4_pool: p.child('customer_owned_ipv4_pool').out,
      desync_mitigation_mode: p.child('desync_mitigation_mode').out,
      dns_name: p.child('dns_name').out,
      dns_record_client_routing_policy: p.child('dns_record_client_routing_policy').out,
      drop_invalid_header_fields: p.child('drop_invalid_header_fields').out,
      enable_cross_zone_load_balancing: p.child('enable_cross_zone_load_balancing').out,
      enable_deletion_protection: p.child('enable_deletion_protection').out,
      enable_http2: p.child('enable_http2').out,
      enable_tls_version_and_cipher_suite_headers: p.child('enable_tls_version_and_cipher_suite_headers').out,
      enable_waf_fail_open: p.child('enable_waf_fail_open').out,
      enable_xff_client_port: p.child('enable_xff_client_port').out,
      enable_zonal_shift: p.child('enable_zonal_shift').out,
      enforce_security_group_inbound_rules_on_private_link_traffic: p.child('enforce_security_group_inbound_rules_on_private_link_traffic').out,
      id: p.child('id').out,
      idle_timeout: p.child('idle_timeout').out,
      internal: p.child('internal').out,
      ip_address_type: p.child('ip_address_type').out,
      load_balancer_type: p.child('load_balancer_type').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      preserve_host_header: p.child('preserve_host_header').out,
      security_groups: p.child('security_groups').out,
      subnets: p.child('subnets').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
      xff_header_processing_mode: p.child('xff_header_processing_mode').out,
      zone_id: p.child('zone_id').out,
    },
    alb_listener(name, block): {
      local p = path(['aws_alb_listener', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_alb_listener: {
              [name]: std.prune({
                alpn_policy: build.template(std.get(block, 'alpn_policy', null, true)),
                certificate_arn: build.template(std.get(block, 'certificate_arn', null, true)),
                load_balancer_arn: build.template(block.load_balancer_arn),
                port: build.template(std.get(block, 'port', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tcp_idle_timeout_seconds: build.template(std.get(block, 'tcp_idle_timeout_seconds', null, true)),
              }),
            },
          },
        },
      },
      alpn_policy: p.child('alpn_policy').out,
      arn: p.child('arn').out,
      certificate_arn: p.child('certificate_arn').out,
      id: p.child('id').out,
      load_balancer_arn: p.child('load_balancer_arn').out,
      port: p.child('port').out,
      protocol: p.child('protocol').out,
      ssl_policy: p.child('ssl_policy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tcp_idle_timeout_seconds: p.child('tcp_idle_timeout_seconds').out,
    },
    alb_listener_certificate(name, block): {
      local p = path(['aws_alb_listener_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_alb_listener_certificate: {
              [name]: std.prune({
                certificate_arn: build.template(block.certificate_arn),
                listener_arn: build.template(block.listener_arn),
              }),
            },
          },
        },
      },
      certificate_arn: p.child('certificate_arn').out,
      id: p.child('id').out,
      listener_arn: p.child('listener_arn').out,
    },
    alb_listener_rule(name, block): {
      local p = path(['aws_alb_listener_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_alb_listener_rule: {
              [name]: std.prune({
                listener_arn: build.template(block.listener_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      listener_arn: p.child('listener_arn').out,
      priority: p.child('priority').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    alb_target_group(name, block): {
      local p = path(['aws_alb_target_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_alb_target_group: {
              [name]: std.prune({
                deregistration_delay: build.template(std.get(block, 'deregistration_delay', null, true)),
                lambda_multi_value_headers_enabled: build.template(std.get(block, 'lambda_multi_value_headers_enabled', null, true)),
                port: build.template(std.get(block, 'port', null, true)),
                protocol: build.template(std.get(block, 'protocol', null, true)),
                proxy_protocol_v2: build.template(std.get(block, 'proxy_protocol_v2', null, true)),
                slow_start: build.template(std.get(block, 'slow_start', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_type: build.template(std.get(block, 'target_type', null, true)),
                vpc_id: build.template(std.get(block, 'vpc_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      arn_suffix: p.child('arn_suffix').out,
      connection_termination: p.child('connection_termination').out,
      deregistration_delay: p.child('deregistration_delay').out,
      id: p.child('id').out,
      ip_address_type: p.child('ip_address_type').out,
      lambda_multi_value_headers_enabled: p.child('lambda_multi_value_headers_enabled').out,
      load_balancer_arns: p.child('load_balancer_arns').out,
      load_balancing_algorithm_type: p.child('load_balancing_algorithm_type').out,
      load_balancing_anomaly_mitigation: p.child('load_balancing_anomaly_mitigation').out,
      load_balancing_cross_zone_enabled: p.child('load_balancing_cross_zone_enabled').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      port: p.child('port').out,
      preserve_client_ip: p.child('preserve_client_ip').out,
      protocol: p.child('protocol').out,
      protocol_version: p.child('protocol_version').out,
      proxy_protocol_v2: p.child('proxy_protocol_v2').out,
      slow_start: p.child('slow_start').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_type: p.child('target_type').out,
      vpc_id: p.child('vpc_id').out,
    },
    alb_target_group_attachment(name, block): {
      local p = path(['aws_alb_target_group_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_alb_target_group_attachment: {
              [name]: std.prune({
                availability_zone: build.template(std.get(block, 'availability_zone', null, true)),
                port: build.template(std.get(block, 'port', null, true)),
                target_group_arn: build.template(block.target_group_arn),
                target_id: build.template(block.target_id),
              }),
            },
          },
        },
      },
      availability_zone: p.child('availability_zone').out,
      id: p.child('id').out,
      port: p.child('port').out,
      target_group_arn: p.child('target_group_arn').out,
      target_id: p.child('target_id').out,
    },
    ami(name, block): {
      local p = path(['aws_ami', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ami: {
              [name]: std.prune({
                architecture: build.template(std.get(block, 'architecture', null, true)),
                boot_mode: build.template(std.get(block, 'boot_mode', null, true)),
                deprecation_time: build.template(std.get(block, 'deprecation_time', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                ena_support: build.template(std.get(block, 'ena_support', null, true)),
                imds_support: build.template(std.get(block, 'imds_support', null, true)),
                kernel_id: build.template(std.get(block, 'kernel_id', null, true)),
                name: build.template(block.name),
                ramdisk_id: build.template(std.get(block, 'ramdisk_id', null, true)),
                root_device_name: build.template(std.get(block, 'root_device_name', null, true)),
                sriov_net_support: build.template(std.get(block, 'sriov_net_support', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tpm_support: build.template(std.get(block, 'tpm_support', null, true)),
                virtualization_type: build.template(std.get(block, 'virtualization_type', null, true)),
              }),
            },
          },
        },
      },
      architecture: p.child('architecture').out,
      arn: p.child('arn').out,
      boot_mode: p.child('boot_mode').out,
      deprecation_time: p.child('deprecation_time').out,
      description: p.child('description').out,
      ena_support: p.child('ena_support').out,
      hypervisor: p.child('hypervisor').out,
      id: p.child('id').out,
      image_location: p.child('image_location').out,
      image_owner_alias: p.child('image_owner_alias').out,
      image_type: p.child('image_type').out,
      imds_support: p.child('imds_support').out,
      kernel_id: p.child('kernel_id').out,
      manage_ebs_snapshots: p.child('manage_ebs_snapshots').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      platform: p.child('platform').out,
      platform_details: p.child('platform_details').out,
      public: p.child('public').out,
      ramdisk_id: p.child('ramdisk_id').out,
      root_device_name: p.child('root_device_name').out,
      root_snapshot_id: p.child('root_snapshot_id').out,
      sriov_net_support: p.child('sriov_net_support').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tpm_support: p.child('tpm_support').out,
      usage_operation: p.child('usage_operation').out,
      virtualization_type: p.child('virtualization_type').out,
    },
    ami_copy(name, block): {
      local p = path(['aws_ami_copy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ami_copy: {
              [name]: std.prune({
                deprecation_time: build.template(std.get(block, 'deprecation_time', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                destination_outpost_arn: build.template(std.get(block, 'destination_outpost_arn', null, true)),
                encrypted: build.template(std.get(block, 'encrypted', null, true)),
                name: build.template(block.name),
                source_ami_id: build.template(block.source_ami_id),
                source_ami_region: build.template(block.source_ami_region),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      architecture: p.child('architecture').out,
      arn: p.child('arn').out,
      boot_mode: p.child('boot_mode').out,
      deprecation_time: p.child('deprecation_time').out,
      description: p.child('description').out,
      destination_outpost_arn: p.child('destination_outpost_arn').out,
      ena_support: p.child('ena_support').out,
      encrypted: p.child('encrypted').out,
      hypervisor: p.child('hypervisor').out,
      id: p.child('id').out,
      image_location: p.child('image_location').out,
      image_owner_alias: p.child('image_owner_alias').out,
      image_type: p.child('image_type').out,
      imds_support: p.child('imds_support').out,
      kernel_id: p.child('kernel_id').out,
      kms_key_id: p.child('kms_key_id').out,
      manage_ebs_snapshots: p.child('manage_ebs_snapshots').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      platform: p.child('platform').out,
      platform_details: p.child('platform_details').out,
      public: p.child('public').out,
      ramdisk_id: p.child('ramdisk_id').out,
      root_device_name: p.child('root_device_name').out,
      root_snapshot_id: p.child('root_snapshot_id').out,
      source_ami_id: p.child('source_ami_id').out,
      source_ami_region: p.child('source_ami_region').out,
      sriov_net_support: p.child('sriov_net_support').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tpm_support: p.child('tpm_support').out,
      usage_operation: p.child('usage_operation').out,
      virtualization_type: p.child('virtualization_type').out,
    },
    ami_from_instance(name, block): {
      local p = path(['aws_ami_from_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ami_from_instance: {
              [name]: std.prune({
                deprecation_time: build.template(std.get(block, 'deprecation_time', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                snapshot_without_reboot: build.template(std.get(block, 'snapshot_without_reboot', null, true)),
                source_instance_id: build.template(block.source_instance_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      architecture: p.child('architecture').out,
      arn: p.child('arn').out,
      boot_mode: p.child('boot_mode').out,
      deprecation_time: p.child('deprecation_time').out,
      description: p.child('description').out,
      ena_support: p.child('ena_support').out,
      hypervisor: p.child('hypervisor').out,
      id: p.child('id').out,
      image_location: p.child('image_location').out,
      image_owner_alias: p.child('image_owner_alias').out,
      image_type: p.child('image_type').out,
      imds_support: p.child('imds_support').out,
      kernel_id: p.child('kernel_id').out,
      manage_ebs_snapshots: p.child('manage_ebs_snapshots').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      platform: p.child('platform').out,
      platform_details: p.child('platform_details').out,
      public: p.child('public').out,
      ramdisk_id: p.child('ramdisk_id').out,
      root_device_name: p.child('root_device_name').out,
      root_snapshot_id: p.child('root_snapshot_id').out,
      snapshot_without_reboot: p.child('snapshot_without_reboot').out,
      source_instance_id: p.child('source_instance_id').out,
      sriov_net_support: p.child('sriov_net_support').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tpm_support: p.child('tpm_support').out,
      usage_operation: p.child('usage_operation').out,
      virtualization_type: p.child('virtualization_type').out,
    },
    ami_launch_permission(name, block): {
      local p = path(['aws_ami_launch_permission', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ami_launch_permission: {
              [name]: std.prune({
                account_id: build.template(std.get(block, 'account_id', null, true)),
                group: build.template(std.get(block, 'group', null, true)),
                image_id: build.template(block.image_id),
                organization_arn: build.template(std.get(block, 'organization_arn', null, true)),
                organizational_unit_arn: build.template(std.get(block, 'organizational_unit_arn', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      group: p.child('group').out,
      id: p.child('id').out,
      image_id: p.child('image_id').out,
      organization_arn: p.child('organization_arn').out,
      organizational_unit_arn: p.child('organizational_unit_arn').out,
    },
    amplify_app(name, block): {
      local p = path(['aws_amplify_app', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_amplify_app: {
              [name]: std.prune({
                access_token: build.template(std.get(block, 'access_token', null, true)),
                auto_branch_creation_patterns: build.template(std.get(block, 'auto_branch_creation_patterns', null, true)),
                basic_auth_credentials: build.template(std.get(block, 'basic_auth_credentials', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                enable_auto_branch_creation: build.template(std.get(block, 'enable_auto_branch_creation', null, true)),
                enable_basic_auth: build.template(std.get(block, 'enable_basic_auth', null, true)),
                enable_branch_auto_build: build.template(std.get(block, 'enable_branch_auto_build', null, true)),
                enable_branch_auto_deletion: build.template(std.get(block, 'enable_branch_auto_deletion', null, true)),
                environment_variables: build.template(std.get(block, 'environment_variables', null, true)),
                iam_service_role_arn: build.template(std.get(block, 'iam_service_role_arn', null, true)),
                name: build.template(block.name),
                oauth_token: build.template(std.get(block, 'oauth_token', null, true)),
                platform: build.template(std.get(block, 'platform', null, true)),
                repository: build.template(std.get(block, 'repository', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_token: p.child('access_token').out,
      arn: p.child('arn').out,
      auto_branch_creation_patterns: p.child('auto_branch_creation_patterns').out,
      basic_auth_credentials: p.child('basic_auth_credentials').out,
      build_spec: p.child('build_spec').out,
      custom_headers: p.child('custom_headers').out,
      default_domain: p.child('default_domain').out,
      description: p.child('description').out,
      enable_auto_branch_creation: p.child('enable_auto_branch_creation').out,
      enable_basic_auth: p.child('enable_basic_auth').out,
      enable_branch_auto_build: p.child('enable_branch_auto_build').out,
      enable_branch_auto_deletion: p.child('enable_branch_auto_deletion').out,
      environment_variables: p.child('environment_variables').out,
      iam_service_role_arn: p.child('iam_service_role_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      oauth_token: p.child('oauth_token').out,
      platform: p.child('platform').out,
      production_branch: p.child('production_branch').out,
      repository: p.child('repository').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    amplify_backend_environment(name, block): {
      local p = path(['aws_amplify_backend_environment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_amplify_backend_environment: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                environment_name: build.template(block.environment_name),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').out,
      arn: p.child('arn').out,
      deployment_artifacts: p.child('deployment_artifacts').out,
      environment_name: p.child('environment_name').out,
      id: p.child('id').out,
      stack_name: p.child('stack_name').out,
    },
    amplify_branch(name, block): {
      local p = path(['aws_amplify_branch', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_amplify_branch: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                backend_environment_arn: build.template(std.get(block, 'backend_environment_arn', null, true)),
                basic_auth_credentials: build.template(std.get(block, 'basic_auth_credentials', null, true)),
                branch_name: build.template(block.branch_name),
                description: build.template(std.get(block, 'description', null, true)),
                enable_auto_build: build.template(std.get(block, 'enable_auto_build', null, true)),
                enable_basic_auth: build.template(std.get(block, 'enable_basic_auth', null, true)),
                enable_notification: build.template(std.get(block, 'enable_notification', null, true)),
                enable_performance_mode: build.template(std.get(block, 'enable_performance_mode', null, true)),
                enable_pull_request_preview: build.template(std.get(block, 'enable_pull_request_preview', null, true)),
                environment_variables: build.template(std.get(block, 'environment_variables', null, true)),
                framework: build.template(std.get(block, 'framework', null, true)),
                pull_request_environment_name: build.template(std.get(block, 'pull_request_environment_name', null, true)),
                stage: build.template(std.get(block, 'stage', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                ttl: build.template(std.get(block, 'ttl', null, true)),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').out,
      arn: p.child('arn').out,
      associated_resources: p.child('associated_resources').out,
      backend_environment_arn: p.child('backend_environment_arn').out,
      basic_auth_credentials: p.child('basic_auth_credentials').out,
      branch_name: p.child('branch_name').out,
      custom_domains: p.child('custom_domains').out,
      description: p.child('description').out,
      destination_branch: p.child('destination_branch').out,
      display_name: p.child('display_name').out,
      enable_auto_build: p.child('enable_auto_build').out,
      enable_basic_auth: p.child('enable_basic_auth').out,
      enable_notification: p.child('enable_notification').out,
      enable_performance_mode: p.child('enable_performance_mode').out,
      enable_pull_request_preview: p.child('enable_pull_request_preview').out,
      environment_variables: p.child('environment_variables').out,
      framework: p.child('framework').out,
      id: p.child('id').out,
      pull_request_environment_name: p.child('pull_request_environment_name').out,
      source_branch: p.child('source_branch').out,
      stage: p.child('stage').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      ttl: p.child('ttl').out,
    },
    amplify_domain_association(name, block): {
      local p = path(['aws_amplify_domain_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_amplify_domain_association: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                domain_name: build.template(block.domain_name),
                enable_auto_sub_domain: build.template(std.get(block, 'enable_auto_sub_domain', null, true)),
                wait_for_verification: build.template(std.get(block, 'wait_for_verification', null, true)),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').out,
      arn: p.child('arn').out,
      certificate_verification_dns_record: p.child('certificate_verification_dns_record').out,
      domain_name: p.child('domain_name').out,
      enable_auto_sub_domain: p.child('enable_auto_sub_domain').out,
      id: p.child('id').out,
      wait_for_verification: p.child('wait_for_verification').out,
    },
    amplify_webhook(name, block): {
      local p = path(['aws_amplify_webhook', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_amplify_webhook: {
              [name]: std.prune({
                app_id: build.template(block.app_id),
                branch_name: build.template(block.branch_name),
                description: build.template(std.get(block, 'description', null, true)),
              }),
            },
          },
        },
      },
      app_id: p.child('app_id').out,
      arn: p.child('arn').out,
      branch_name: p.child('branch_name').out,
      description: p.child('description').out,
      id: p.child('id').out,
      url: p.child('url').out,
    },
    api_gateway_account(name, block): {
      local p = path(['aws_api_gateway_account', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_account: {
              [name]: std.prune({
                cloudwatch_role_arn: build.template(std.get(block, 'cloudwatch_role_arn', null, true)),
              }),
            },
          },
        },
      },
      api_key_version: p.child('api_key_version').out,
      cloudwatch_role_arn: p.child('cloudwatch_role_arn').out,
      features: p.child('features').out,
      id: p.child('id').out,
      throttle_settings: p.child('throttle_settings').out,
    },
    api_gateway_api_key(name, block): {
      local p = path(['aws_api_gateway_api_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_api_key: {
              [name]: std.prune({
                customer_id: build.template(std.get(block, 'customer_id', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      customer_id: p.child('customer_id').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      value: p.child('value').out,
    },
    api_gateway_authorizer(name, block): {
      local p = path(['aws_api_gateway_authorizer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_authorizer: {
              [name]: std.prune({
                authorizer_credentials: build.template(std.get(block, 'authorizer_credentials', null, true)),
                authorizer_result_ttl_in_seconds: build.template(std.get(block, 'authorizer_result_ttl_in_seconds', null, true)),
                authorizer_uri: build.template(std.get(block, 'authorizer_uri', null, true)),
                identity_source: build.template(std.get(block, 'identity_source', null, true)),
                identity_validation_expression: build.template(std.get(block, 'identity_validation_expression', null, true)),
                name: build.template(block.name),
                provider_arns: build.template(std.get(block, 'provider_arns', null, true)),
                rest_api_id: build.template(block.rest_api_id),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      authorizer_credentials: p.child('authorizer_credentials').out,
      authorizer_result_ttl_in_seconds: p.child('authorizer_result_ttl_in_seconds').out,
      authorizer_uri: p.child('authorizer_uri').out,
      id: p.child('id').out,
      identity_source: p.child('identity_source').out,
      identity_validation_expression: p.child('identity_validation_expression').out,
      name: p.child('name').out,
      provider_arns: p.child('provider_arns').out,
      rest_api_id: p.child('rest_api_id').out,
      type: p.child('type').out,
    },
    api_gateway_base_path_mapping(name, block): {
      local p = path(['aws_api_gateway_base_path_mapping', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_base_path_mapping: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                base_path: build.template(std.get(block, 'base_path', null, true)),
                domain_name: build.template(block.domain_name),
                stage_name: build.template(std.get(block, 'stage_name', null, true)),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      base_path: p.child('base_path').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      stage_name: p.child('stage_name').out,
    },
    api_gateway_client_certificate(name, block): {
      local p = path(['aws_api_gateway_client_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_client_certificate: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      expiration_date: p.child('expiration_date').out,
      id: p.child('id').out,
      pem_encoded_certificate: p.child('pem_encoded_certificate').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    api_gateway_deployment(name, block): {
      local p = path(['aws_api_gateway_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_deployment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                rest_api_id: build.template(block.rest_api_id),
                stage_description: build.template(std.get(block, 'stage_description', null, true)),
                stage_name: build.template(std.get(block, 'stage_name', null, true)),
                triggers: build.template(std.get(block, 'triggers', null, true)),
                variables: build.template(std.get(block, 'variables', null, true)),
              }),
            },
          },
        },
      },
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      execution_arn: p.child('execution_arn').out,
      id: p.child('id').out,
      invoke_url: p.child('invoke_url').out,
      rest_api_id: p.child('rest_api_id').out,
      stage_description: p.child('stage_description').out,
      stage_name: p.child('stage_name').out,
      triggers: p.child('triggers').out,
      variables: p.child('variables').out,
    },
    api_gateway_documentation_part(name, block): {
      local p = path(['aws_api_gateway_documentation_part', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_documentation_part: {
              [name]: std.prune({
                properties: build.template(block.properties),
                rest_api_id: build.template(block.rest_api_id),
              }),
            },
          },
        },
      },
      documentation_part_id: p.child('documentation_part_id').out,
      id: p.child('id').out,
      properties: p.child('properties').out,
      rest_api_id: p.child('rest_api_id').out,
    },
    api_gateway_documentation_version(name, block): {
      local p = path(['aws_api_gateway_documentation_version', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_documentation_version: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                rest_api_id: build.template(block.rest_api_id),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      rest_api_id: p.child('rest_api_id').out,
      version: p.child('version').out,
    },
    api_gateway_domain_name(name, block): {
      local p = path(['aws_api_gateway_domain_name', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_domain_name: {
              [name]: std.prune({
                certificate_arn: build.template(std.get(block, 'certificate_arn', null, true)),
                certificate_body: build.template(std.get(block, 'certificate_body', null, true)),
                certificate_chain: build.template(std.get(block, 'certificate_chain', null, true)),
                certificate_name: build.template(std.get(block, 'certificate_name', null, true)),
                certificate_private_key: build.template(std.get(block, 'certificate_private_key', null, true)),
                domain_name: build.template(block.domain_name),
                regional_certificate_arn: build.template(std.get(block, 'regional_certificate_arn', null, true)),
                regional_certificate_name: build.template(std.get(block, 'regional_certificate_name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      certificate_arn: p.child('certificate_arn').out,
      certificate_body: p.child('certificate_body').out,
      certificate_chain: p.child('certificate_chain').out,
      certificate_name: p.child('certificate_name').out,
      certificate_private_key: p.child('certificate_private_key').out,
      certificate_upload_date: p.child('certificate_upload_date').out,
      cloudfront_domain_name: p.child('cloudfront_domain_name').out,
      cloudfront_zone_id: p.child('cloudfront_zone_id').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      ownership_verification_certificate_arn: p.child('ownership_verification_certificate_arn').out,
      regional_certificate_arn: p.child('regional_certificate_arn').out,
      regional_certificate_name: p.child('regional_certificate_name').out,
      regional_domain_name: p.child('regional_domain_name').out,
      regional_zone_id: p.child('regional_zone_id').out,
      security_policy: p.child('security_policy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    api_gateway_gateway_response(name, block): {
      local p = path(['aws_api_gateway_gateway_response', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_gateway_response: {
              [name]: std.prune({
                response_parameters: build.template(std.get(block, 'response_parameters', null, true)),
                response_templates: build.template(std.get(block, 'response_templates', null, true)),
                response_type: build.template(block.response_type),
                rest_api_id: build.template(block.rest_api_id),
                status_code: build.template(std.get(block, 'status_code', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      response_parameters: p.child('response_parameters').out,
      response_templates: p.child('response_templates').out,
      response_type: p.child('response_type').out,
      rest_api_id: p.child('rest_api_id').out,
      status_code: p.child('status_code').out,
    },
    api_gateway_integration(name, block): {
      local p = path(['aws_api_gateway_integration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_integration: {
              [name]: std.prune({
                cache_key_parameters: build.template(std.get(block, 'cache_key_parameters', null, true)),
                connection_id: build.template(std.get(block, 'connection_id', null, true)),
                connection_type: build.template(std.get(block, 'connection_type', null, true)),
                content_handling: build.template(std.get(block, 'content_handling', null, true)),
                credentials: build.template(std.get(block, 'credentials', null, true)),
                http_method: build.template(block.http_method),
                integration_http_method: build.template(std.get(block, 'integration_http_method', null, true)),
                request_parameters: build.template(std.get(block, 'request_parameters', null, true)),
                request_templates: build.template(std.get(block, 'request_templates', null, true)),
                resource_id: build.template(block.resource_id),
                rest_api_id: build.template(block.rest_api_id),
                timeout_milliseconds: build.template(std.get(block, 'timeout_milliseconds', null, true)),
                type: build.template(block.type),
                uri: build.template(std.get(block, 'uri', null, true)),
              }),
            },
          },
        },
      },
      cache_key_parameters: p.child('cache_key_parameters').out,
      cache_namespace: p.child('cache_namespace').out,
      connection_id: p.child('connection_id').out,
      connection_type: p.child('connection_type').out,
      content_handling: p.child('content_handling').out,
      credentials: p.child('credentials').out,
      http_method: p.child('http_method').out,
      id: p.child('id').out,
      integration_http_method: p.child('integration_http_method').out,
      passthrough_behavior: p.child('passthrough_behavior').out,
      request_parameters: p.child('request_parameters').out,
      request_templates: p.child('request_templates').out,
      resource_id: p.child('resource_id').out,
      rest_api_id: p.child('rest_api_id').out,
      timeout_milliseconds: p.child('timeout_milliseconds').out,
      type: p.child('type').out,
      uri: p.child('uri').out,
    },
    api_gateway_integration_response(name, block): {
      local p = path(['aws_api_gateway_integration_response', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_integration_response: {
              [name]: std.prune({
                content_handling: build.template(std.get(block, 'content_handling', null, true)),
                http_method: build.template(block.http_method),
                resource_id: build.template(block.resource_id),
                response_parameters: build.template(std.get(block, 'response_parameters', null, true)),
                response_templates: build.template(std.get(block, 'response_templates', null, true)),
                rest_api_id: build.template(block.rest_api_id),
                selection_pattern: build.template(std.get(block, 'selection_pattern', null, true)),
                status_code: build.template(block.status_code),
              }),
            },
          },
        },
      },
      content_handling: p.child('content_handling').out,
      http_method: p.child('http_method').out,
      id: p.child('id').out,
      resource_id: p.child('resource_id').out,
      response_parameters: p.child('response_parameters').out,
      response_templates: p.child('response_templates').out,
      rest_api_id: p.child('rest_api_id').out,
      selection_pattern: p.child('selection_pattern').out,
      status_code: p.child('status_code').out,
    },
    api_gateway_method(name, block): {
      local p = path(['aws_api_gateway_method', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_method: {
              [name]: std.prune({
                api_key_required: build.template(std.get(block, 'api_key_required', null, true)),
                authorization: build.template(block.authorization),
                authorization_scopes: build.template(std.get(block, 'authorization_scopes', null, true)),
                authorizer_id: build.template(std.get(block, 'authorizer_id', null, true)),
                http_method: build.template(block.http_method),
                operation_name: build.template(std.get(block, 'operation_name', null, true)),
                request_models: build.template(std.get(block, 'request_models', null, true)),
                request_parameters: build.template(std.get(block, 'request_parameters', null, true)),
                request_validator_id: build.template(std.get(block, 'request_validator_id', null, true)),
                resource_id: build.template(block.resource_id),
                rest_api_id: build.template(block.rest_api_id),
              }),
            },
          },
        },
      },
      api_key_required: p.child('api_key_required').out,
      authorization: p.child('authorization').out,
      authorization_scopes: p.child('authorization_scopes').out,
      authorizer_id: p.child('authorizer_id').out,
      http_method: p.child('http_method').out,
      id: p.child('id').out,
      operation_name: p.child('operation_name').out,
      request_models: p.child('request_models').out,
      request_parameters: p.child('request_parameters').out,
      request_validator_id: p.child('request_validator_id').out,
      resource_id: p.child('resource_id').out,
      rest_api_id: p.child('rest_api_id').out,
    },
    api_gateway_method_response(name, block): {
      local p = path(['aws_api_gateway_method_response', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_method_response: {
              [name]: std.prune({
                http_method: build.template(block.http_method),
                resource_id: build.template(block.resource_id),
                response_models: build.template(std.get(block, 'response_models', null, true)),
                response_parameters: build.template(std.get(block, 'response_parameters', null, true)),
                rest_api_id: build.template(block.rest_api_id),
                status_code: build.template(block.status_code),
              }),
            },
          },
        },
      },
      http_method: p.child('http_method').out,
      id: p.child('id').out,
      resource_id: p.child('resource_id').out,
      response_models: p.child('response_models').out,
      response_parameters: p.child('response_parameters').out,
      rest_api_id: p.child('rest_api_id').out,
      status_code: p.child('status_code').out,
    },
    api_gateway_method_settings(name, block): {
      local p = path(['aws_api_gateway_method_settings', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_method_settings: {
              [name]: std.prune({
                method_path: build.template(block.method_path),
                rest_api_id: build.template(block.rest_api_id),
                stage_name: build.template(block.stage_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      method_path: p.child('method_path').out,
      rest_api_id: p.child('rest_api_id').out,
      stage_name: p.child('stage_name').out,
    },
    api_gateway_model(name, block): {
      local p = path(['aws_api_gateway_model', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_model: {
              [name]: std.prune({
                content_type: build.template(block.content_type),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                rest_api_id: build.template(block.rest_api_id),
                schema: build.template(std.get(block, 'schema', null, true)),
              }),
            },
          },
        },
      },
      content_type: p.child('content_type').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      rest_api_id: p.child('rest_api_id').out,
      schema: p.child('schema').out,
    },
    api_gateway_request_validator(name, block): {
      local p = path(['aws_api_gateway_request_validator', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_request_validator: {
              [name]: std.prune({
                name: build.template(block.name),
                rest_api_id: build.template(block.rest_api_id),
                validate_request_body: build.template(std.get(block, 'validate_request_body', null, true)),
                validate_request_parameters: build.template(std.get(block, 'validate_request_parameters', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      rest_api_id: p.child('rest_api_id').out,
      validate_request_body: p.child('validate_request_body').out,
      validate_request_parameters: p.child('validate_request_parameters').out,
    },
    api_gateway_resource(name, block): {
      local p = path(['aws_api_gateway_resource', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_resource: {
              [name]: std.prune({
                parent_id: build.template(block.parent_id),
                path_part: build.template(block.path_part),
                rest_api_id: build.template(block.rest_api_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      parent_id: p.child('parent_id').out,
      path: p.child('path').out,
      path_part: p.child('path_part').out,
      rest_api_id: p.child('rest_api_id').out,
    },
    api_gateway_rest_api(name, block): {
      local p = path(['aws_api_gateway_rest_api', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_rest_api: {
              [name]: std.prune({
                body: build.template(std.get(block, 'body', null, true)),
                fail_on_warnings: build.template(std.get(block, 'fail_on_warnings', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                put_rest_api_mode: build.template(std.get(block, 'put_rest_api_mode', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      api_key_source: p.child('api_key_source').out,
      arn: p.child('arn').out,
      binary_media_types: p.child('binary_media_types').out,
      body: p.child('body').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      disable_execute_api_endpoint: p.child('disable_execute_api_endpoint').out,
      execution_arn: p.child('execution_arn').out,
      fail_on_warnings: p.child('fail_on_warnings').out,
      id: p.child('id').out,
      minimum_compression_size: p.child('minimum_compression_size').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      policy: p.child('policy').out,
      put_rest_api_mode: p.child('put_rest_api_mode').out,
      root_resource_id: p.child('root_resource_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    api_gateway_rest_api_policy(name, block): {
      local p = path(['aws_api_gateway_rest_api_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_rest_api_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                rest_api_id: build.template(block.rest_api_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      rest_api_id: p.child('rest_api_id').out,
    },
    api_gateway_stage(name, block): {
      local p = path(['aws_api_gateway_stage', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_stage: {
              [name]: std.prune({
                cache_cluster_enabled: build.template(std.get(block, 'cache_cluster_enabled', null, true)),
                cache_cluster_size: build.template(std.get(block, 'cache_cluster_size', null, true)),
                client_certificate_id: build.template(std.get(block, 'client_certificate_id', null, true)),
                deployment_id: build.template(block.deployment_id),
                description: build.template(std.get(block, 'description', null, true)),
                documentation_version: build.template(std.get(block, 'documentation_version', null, true)),
                rest_api_id: build.template(block.rest_api_id),
                stage_name: build.template(block.stage_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                variables: build.template(std.get(block, 'variables', null, true)),
                xray_tracing_enabled: build.template(std.get(block, 'xray_tracing_enabled', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cache_cluster_enabled: p.child('cache_cluster_enabled').out,
      cache_cluster_size: p.child('cache_cluster_size').out,
      client_certificate_id: p.child('client_certificate_id').out,
      deployment_id: p.child('deployment_id').out,
      description: p.child('description').out,
      documentation_version: p.child('documentation_version').out,
      execution_arn: p.child('execution_arn').out,
      id: p.child('id').out,
      invoke_url: p.child('invoke_url').out,
      rest_api_id: p.child('rest_api_id').out,
      stage_name: p.child('stage_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      variables: p.child('variables').out,
      web_acl_arn: p.child('web_acl_arn').out,
      xray_tracing_enabled: p.child('xray_tracing_enabled').out,
    },
    api_gateway_usage_plan(name, block): {
      local p = path(['aws_api_gateway_usage_plan', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_usage_plan: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                product_code: build.template(std.get(block, 'product_code', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      product_code: p.child('product_code').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    api_gateway_usage_plan_key(name, block): {
      local p = path(['aws_api_gateway_usage_plan_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_usage_plan_key: {
              [name]: std.prune({
                key_id: build.template(block.key_id),
                key_type: build.template(block.key_type),
                usage_plan_id: build.template(block.usage_plan_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key_id: p.child('key_id').out,
      key_type: p.child('key_type').out,
      name: p.child('name').out,
      usage_plan_id: p.child('usage_plan_id').out,
      value: p.child('value').out,
    },
    api_gateway_vpc_link(name, block): {
      local p = path(['aws_api_gateway_vpc_link', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_api_gateway_vpc_link: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_arns: build.template(block.target_arns),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_arns: p.child('target_arns').out,
    },
    apigatewayv2_api(name, block): {
      local p = path(['aws_apigatewayv2_api', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apigatewayv2_api: {
              [name]: std.prune({
                api_key_selection_expression: build.template(std.get(block, 'api_key_selection_expression', null, true)),
                body: build.template(std.get(block, 'body', null, true)),
                credentials_arn: build.template(std.get(block, 'credentials_arn', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                disable_execute_api_endpoint: build.template(std.get(block, 'disable_execute_api_endpoint', null, true)),
                fail_on_warnings: build.template(std.get(block, 'fail_on_warnings', null, true)),
                name: build.template(block.name),
                protocol_type: build.template(block.protocol_type),
                route_key: build.template(std.get(block, 'route_key', null, true)),
                route_selection_expression: build.template(std.get(block, 'route_selection_expression', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                target: build.template(std.get(block, 'target', null, true)),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      api_endpoint: p.child('api_endpoint').out,
      api_key_selection_expression: p.child('api_key_selection_expression').out,
      arn: p.child('arn').out,
      body: p.child('body').out,
      credentials_arn: p.child('credentials_arn').out,
      description: p.child('description').out,
      disable_execute_api_endpoint: p.child('disable_execute_api_endpoint').out,
      execution_arn: p.child('execution_arn').out,
      fail_on_warnings: p.child('fail_on_warnings').out,
      id: p.child('id').out,
      name: p.child('name').out,
      protocol_type: p.child('protocol_type').out,
      route_key: p.child('route_key').out,
      route_selection_expression: p.child('route_selection_expression').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target: p.child('target').out,
      version: p.child('version').out,
    },
    apigatewayv2_api_mapping(name, block): {
      local p = path(['aws_apigatewayv2_api_mapping', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apigatewayv2_api_mapping: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                api_mapping_key: build.template(std.get(block, 'api_mapping_key', null, true)),
                domain_name: build.template(block.domain_name),
                stage: build.template(block.stage),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      api_mapping_key: p.child('api_mapping_key').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      stage: p.child('stage').out,
    },
    apigatewayv2_authorizer(name, block): {
      local p = path(['aws_apigatewayv2_authorizer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apigatewayv2_authorizer: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                authorizer_credentials_arn: build.template(std.get(block, 'authorizer_credentials_arn', null, true)),
                authorizer_payload_format_version: build.template(std.get(block, 'authorizer_payload_format_version', null, true)),
                authorizer_type: build.template(block.authorizer_type),
                authorizer_uri: build.template(std.get(block, 'authorizer_uri', null, true)),
                enable_simple_responses: build.template(std.get(block, 'enable_simple_responses', null, true)),
                identity_sources: build.template(std.get(block, 'identity_sources', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      authorizer_credentials_arn: p.child('authorizer_credentials_arn').out,
      authorizer_payload_format_version: p.child('authorizer_payload_format_version').out,
      authorizer_result_ttl_in_seconds: p.child('authorizer_result_ttl_in_seconds').out,
      authorizer_type: p.child('authorizer_type').out,
      authorizer_uri: p.child('authorizer_uri').out,
      enable_simple_responses: p.child('enable_simple_responses').out,
      id: p.child('id').out,
      identity_sources: p.child('identity_sources').out,
      name: p.child('name').out,
    },
    apigatewayv2_deployment(name, block): {
      local p = path(['aws_apigatewayv2_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apigatewayv2_deployment: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                description: build.template(std.get(block, 'description', null, true)),
                triggers: build.template(std.get(block, 'triggers', null, true)),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      auto_deployed: p.child('auto_deployed').out,
      description: p.child('description').out,
      id: p.child('id').out,
      triggers: p.child('triggers').out,
    },
    apigatewayv2_domain_name(name, block): {
      local p = path(['aws_apigatewayv2_domain_name', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apigatewayv2_domain_name: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      api_mapping_selection_expression: p.child('api_mapping_selection_expression').out,
      arn: p.child('arn').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    apigatewayv2_integration(name, block): {
      local p = path(['aws_apigatewayv2_integration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apigatewayv2_integration: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                connection_id: build.template(std.get(block, 'connection_id', null, true)),
                connection_type: build.template(std.get(block, 'connection_type', null, true)),
                content_handling_strategy: build.template(std.get(block, 'content_handling_strategy', null, true)),
                credentials_arn: build.template(std.get(block, 'credentials_arn', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                integration_method: build.template(std.get(block, 'integration_method', null, true)),
                integration_subtype: build.template(std.get(block, 'integration_subtype', null, true)),
                integration_type: build.template(block.integration_type),
                integration_uri: build.template(std.get(block, 'integration_uri', null, true)),
                passthrough_behavior: build.template(std.get(block, 'passthrough_behavior', null, true)),
                payload_format_version: build.template(std.get(block, 'payload_format_version', null, true)),
                request_parameters: build.template(std.get(block, 'request_parameters', null, true)),
                request_templates: build.template(std.get(block, 'request_templates', null, true)),
                template_selection_expression: build.template(std.get(block, 'template_selection_expression', null, true)),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      connection_id: p.child('connection_id').out,
      connection_type: p.child('connection_type').out,
      content_handling_strategy: p.child('content_handling_strategy').out,
      credentials_arn: p.child('credentials_arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      integration_method: p.child('integration_method').out,
      integration_response_selection_expression: p.child('integration_response_selection_expression').out,
      integration_subtype: p.child('integration_subtype').out,
      integration_type: p.child('integration_type').out,
      integration_uri: p.child('integration_uri').out,
      passthrough_behavior: p.child('passthrough_behavior').out,
      payload_format_version: p.child('payload_format_version').out,
      request_parameters: p.child('request_parameters').out,
      request_templates: p.child('request_templates').out,
      template_selection_expression: p.child('template_selection_expression').out,
      timeout_milliseconds: p.child('timeout_milliseconds').out,
    },
    apigatewayv2_integration_response(name, block): {
      local p = path(['aws_apigatewayv2_integration_response', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apigatewayv2_integration_response: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                content_handling_strategy: build.template(std.get(block, 'content_handling_strategy', null, true)),
                integration_id: build.template(block.integration_id),
                integration_response_key: build.template(block.integration_response_key),
                response_templates: build.template(std.get(block, 'response_templates', null, true)),
                template_selection_expression: build.template(std.get(block, 'template_selection_expression', null, true)),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      content_handling_strategy: p.child('content_handling_strategy').out,
      id: p.child('id').out,
      integration_id: p.child('integration_id').out,
      integration_response_key: p.child('integration_response_key').out,
      response_templates: p.child('response_templates').out,
      template_selection_expression: p.child('template_selection_expression').out,
    },
    apigatewayv2_model(name, block): {
      local p = path(['aws_apigatewayv2_model', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apigatewayv2_model: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                content_type: build.template(block.content_type),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                schema: build.template(block.schema),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      content_type: p.child('content_type').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      schema: p.child('schema').out,
    },
    apigatewayv2_route(name, block): {
      local p = path(['aws_apigatewayv2_route', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apigatewayv2_route: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                api_key_required: build.template(std.get(block, 'api_key_required', null, true)),
                authorization_scopes: build.template(std.get(block, 'authorization_scopes', null, true)),
                authorization_type: build.template(std.get(block, 'authorization_type', null, true)),
                authorizer_id: build.template(std.get(block, 'authorizer_id', null, true)),
                model_selection_expression: build.template(std.get(block, 'model_selection_expression', null, true)),
                operation_name: build.template(std.get(block, 'operation_name', null, true)),
                request_models: build.template(std.get(block, 'request_models', null, true)),
                route_key: build.template(block.route_key),
                route_response_selection_expression: build.template(std.get(block, 'route_response_selection_expression', null, true)),
                target: build.template(std.get(block, 'target', null, true)),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      api_key_required: p.child('api_key_required').out,
      authorization_scopes: p.child('authorization_scopes').out,
      authorization_type: p.child('authorization_type').out,
      authorizer_id: p.child('authorizer_id').out,
      id: p.child('id').out,
      model_selection_expression: p.child('model_selection_expression').out,
      operation_name: p.child('operation_name').out,
      request_models: p.child('request_models').out,
      route_key: p.child('route_key').out,
      route_response_selection_expression: p.child('route_response_selection_expression').out,
      target: p.child('target').out,
    },
    apigatewayv2_route_response(name, block): {
      local p = path(['aws_apigatewayv2_route_response', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apigatewayv2_route_response: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                model_selection_expression: build.template(std.get(block, 'model_selection_expression', null, true)),
                response_models: build.template(std.get(block, 'response_models', null, true)),
                route_id: build.template(block.route_id),
                route_response_key: build.template(block.route_response_key),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      id: p.child('id').out,
      model_selection_expression: p.child('model_selection_expression').out,
      response_models: p.child('response_models').out,
      route_id: p.child('route_id').out,
      route_response_key: p.child('route_response_key').out,
    },
    apigatewayv2_stage(name, block): {
      local p = path(['aws_apigatewayv2_stage', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apigatewayv2_stage: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                auto_deploy: build.template(std.get(block, 'auto_deploy', null, true)),
                client_certificate_id: build.template(std.get(block, 'client_certificate_id', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                stage_variables: build.template(std.get(block, 'stage_variables', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      arn: p.child('arn').out,
      auto_deploy: p.child('auto_deploy').out,
      client_certificate_id: p.child('client_certificate_id').out,
      deployment_id: p.child('deployment_id').out,
      description: p.child('description').out,
      execution_arn: p.child('execution_arn').out,
      id: p.child('id').out,
      invoke_url: p.child('invoke_url').out,
      name: p.child('name').out,
      stage_variables: p.child('stage_variables').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    apigatewayv2_vpc_link(name, block): {
      local p = path(['aws_apigatewayv2_vpc_link', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apigatewayv2_vpc_link: {
              [name]: std.prune({
                name: build.template(block.name),
                security_group_ids: build.template(block.security_group_ids),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      security_group_ids: p.child('security_group_ids').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    app_cookie_stickiness_policy(name, block): {
      local p = path(['aws_app_cookie_stickiness_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_app_cookie_stickiness_policy: {
              [name]: std.prune({
                cookie_name: build.template(block.cookie_name),
                lb_port: build.template(block.lb_port),
                load_balancer: build.template(block.load_balancer),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      cookie_name: p.child('cookie_name').out,
      id: p.child('id').out,
      lb_port: p.child('lb_port').out,
      load_balancer: p.child('load_balancer').out,
      name: p.child('name').out,
    },
    appautoscaling_policy(name, block): {
      local p = path(['aws_appautoscaling_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appautoscaling_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy_type: build.template(std.get(block, 'policy_type', null, true)),
                resource_id: build.template(block.resource_id),
                scalable_dimension: build.template(block.scalable_dimension),
                service_namespace: build.template(block.service_namespace),
              }),
            },
          },
        },
      },
      alarm_arns: p.child('alarm_arns').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      policy_type: p.child('policy_type').out,
      resource_id: p.child('resource_id').out,
      scalable_dimension: p.child('scalable_dimension').out,
      service_namespace: p.child('service_namespace').out,
    },
    appautoscaling_scheduled_action(name, block): {
      local p = path(['aws_appautoscaling_scheduled_action', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appautoscaling_scheduled_action: {
              [name]: std.prune({
                end_time: build.template(std.get(block, 'end_time', null, true)),
                name: build.template(block.name),
                resource_id: build.template(block.resource_id),
                scalable_dimension: build.template(block.scalable_dimension),
                schedule: build.template(block.schedule),
                service_namespace: build.template(block.service_namespace),
                start_time: build.template(std.get(block, 'start_time', null, true)),
                timezone: build.template(std.get(block, 'timezone', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      end_time: p.child('end_time').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_id: p.child('resource_id').out,
      scalable_dimension: p.child('scalable_dimension').out,
      schedule: p.child('schedule').out,
      service_namespace: p.child('service_namespace').out,
      start_time: p.child('start_time').out,
      timezone: p.child('timezone').out,
    },
    appautoscaling_target(name, block): {
      local p = path(['aws_appautoscaling_target', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appautoscaling_target: {
              [name]: std.prune({
                max_capacity: build.template(block.max_capacity),
                min_capacity: build.template(block.min_capacity),
                resource_id: build.template(block.resource_id),
                scalable_dimension: build.template(block.scalable_dimension),
                service_namespace: build.template(block.service_namespace),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      max_capacity: p.child('max_capacity').out,
      min_capacity: p.child('min_capacity').out,
      resource_id: p.child('resource_id').out,
      role_arn: p.child('role_arn').out,
      scalable_dimension: p.child('scalable_dimension').out,
      service_namespace: p.child('service_namespace').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appconfig_application(name, block): {
      local p = path(['aws_appconfig_application', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appconfig_application: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appconfig_configuration_profile(name, block): {
      local p = path(['aws_appconfig_configuration_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appconfig_configuration_profile: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                description: build.template(std.get(block, 'description', null, true)),
                kms_key_identifier: build.template(std.get(block, 'kms_key_identifier', null, true)),
                location_uri: build.template(block.location_uri),
                name: build.template(block.name),
                retrieval_role_arn: build.template(std.get(block, 'retrieval_role_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      arn: p.child('arn').out,
      configuration_profile_id: p.child('configuration_profile_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kms_key_identifier: p.child('kms_key_identifier').out,
      location_uri: p.child('location_uri').out,
      name: p.child('name').out,
      retrieval_role_arn: p.child('retrieval_role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    appconfig_deployment(name, block): {
      local p = path(['aws_appconfig_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appconfig_deployment: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                configuration_profile_id: build.template(block.configuration_profile_id),
                configuration_version: build.template(block.configuration_version),
                deployment_strategy_id: build.template(block.deployment_strategy_id),
                description: build.template(std.get(block, 'description', null, true)),
                environment_id: build.template(block.environment_id),
                kms_key_identifier: build.template(std.get(block, 'kms_key_identifier', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      arn: p.child('arn').out,
      configuration_profile_id: p.child('configuration_profile_id').out,
      configuration_version: p.child('configuration_version').out,
      deployment_number: p.child('deployment_number').out,
      deployment_strategy_id: p.child('deployment_strategy_id').out,
      description: p.child('description').out,
      environment_id: p.child('environment_id').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      kms_key_identifier: p.child('kms_key_identifier').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appconfig_deployment_strategy(name, block): {
      local p = path(['aws_appconfig_deployment_strategy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appconfig_deployment_strategy: {
              [name]: std.prune({
                deployment_duration_in_minutes: build.template(block.deployment_duration_in_minutes),
                description: build.template(std.get(block, 'description', null, true)),
                final_bake_time_in_minutes: build.template(std.get(block, 'final_bake_time_in_minutes', null, true)),
                growth_factor: build.template(block.growth_factor),
                growth_type: build.template(std.get(block, 'growth_type', null, true)),
                name: build.template(block.name),
                replicate_to: build.template(block.replicate_to),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      deployment_duration_in_minutes: p.child('deployment_duration_in_minutes').out,
      description: p.child('description').out,
      final_bake_time_in_minutes: p.child('final_bake_time_in_minutes').out,
      growth_factor: p.child('growth_factor').out,
      growth_type: p.child('growth_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      replicate_to: p.child('replicate_to').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appconfig_environment(name, block): {
      local p = path(['aws_appconfig_environment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appconfig_environment: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      environment_id: p.child('environment_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appconfig_extension(name, block): {
      local p = path(['aws_appconfig_extension', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appconfig_extension: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    appconfig_extension_association(name, block): {
      local p = path(['aws_appconfig_extension_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appconfig_extension_association: {
              [name]: std.prune({
                extension_arn: build.template(block.extension_arn),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      extension_arn: p.child('extension_arn').out,
      extension_version: p.child('extension_version').out,
      id: p.child('id').out,
      parameters: p.child('parameters').out,
      resource_arn: p.child('resource_arn').out,
    },
    appconfig_hosted_configuration_version(name, block): {
      local p = path(['aws_appconfig_hosted_configuration_version', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appconfig_hosted_configuration_version: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                configuration_profile_id: build.template(block.configuration_profile_id),
                content: build.template(block.content),
                content_type: build.template(block.content_type),
                description: build.template(std.get(block, 'description', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      arn: p.child('arn').out,
      configuration_profile_id: p.child('configuration_profile_id').out,
      content: p.child('content').out,
      content_type: p.child('content_type').out,
      description: p.child('description').out,
      id: p.child('id').out,
      version_number: p.child('version_number').out,
    },
    appfabric_app_authorization(name, block): {
      local p = path(['aws_appfabric_app_authorization', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appfabric_app_authorization: {
              [name]: std.prune({
                app: build.template(block.app),
                app_bundle_arn: build.template(block.app_bundle_arn),
                auth_type: build.template(block.auth_type),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      app: p.child('app').out,
      app_bundle_arn: p.child('app_bundle_arn').out,
      arn: p.child('arn').out,
      auth_type: p.child('auth_type').out,
      auth_url: p.child('auth_url').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      persona: p.child('persona').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      updated_at: p.child('updated_at').out,
    },
    appfabric_app_authorization_connection(name, block): {
      local p = path(['aws_appfabric_app_authorization_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appfabric_app_authorization_connection: {
              [name]: std.prune({
                app_authorization_arn: build.template(block.app_authorization_arn),
                app_bundle_arn: build.template(block.app_bundle_arn),
              }),
            },
          },
        },
      },
      app: p.child('app').out,
      app_authorization_arn: p.child('app_authorization_arn').out,
      app_bundle_arn: p.child('app_bundle_arn').out,
      id: p.child('id').out,
      tenant: p.child('tenant').out,
    },
    appfabric_app_bundle(name, block): {
      local p = path(['aws_appfabric_app_bundle', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appfabric_app_bundle: {
              [name]: std.prune({
                customer_managed_key_arn: build.template(std.get(block, 'customer_managed_key_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      customer_managed_key_arn: p.child('customer_managed_key_arn').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appfabric_ingestion(name, block): {
      local p = path(['aws_appfabric_ingestion', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appfabric_ingestion: {
              [name]: std.prune({
                app: build.template(block.app),
                app_bundle_arn: build.template(block.app_bundle_arn),
                ingestion_type: build.template(block.ingestion_type),
                tags: build.template(std.get(block, 'tags', null, true)),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      app: p.child('app').out,
      app_bundle_arn: p.child('app_bundle_arn').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      ingestion_type: p.child('ingestion_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tenant_id: p.child('tenant_id').out,
    },
    appfabric_ingestion_destination(name, block): {
      local p = path(['aws_appfabric_ingestion_destination', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appfabric_ingestion_destination: {
              [name]: std.prune({
                app_bundle_arn: build.template(block.app_bundle_arn),
                ingestion_arn: build.template(block.ingestion_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      app_bundle_arn: p.child('app_bundle_arn').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      ingestion_arn: p.child('ingestion_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appflow_connector_profile(name, block): {
      local p = path(['aws_appflow_connector_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appflow_connector_profile: {
              [name]: std.prune({
                connection_mode: build.template(block.connection_mode),
                connector_label: build.template(std.get(block, 'connector_label', null, true)),
                connector_type: build.template(block.connector_type),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      connection_mode: p.child('connection_mode').out,
      connector_label: p.child('connector_label').out,
      connector_type: p.child('connector_type').out,
      credentials_arn: p.child('credentials_arn').out,
      id: p.child('id').out,
      kms_arn: p.child('kms_arn').out,
      name: p.child('name').out,
    },
    appflow_flow(name, block): {
      local p = path(['aws_appflow_flow', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appflow_flow: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      flow_status: p.child('flow_status').out,
      id: p.child('id').out,
      kms_arn: p.child('kms_arn').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appintegrations_data_integration(name, block): {
      local p = path(['aws_appintegrations_data_integration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appintegrations_data_integration: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                kms_key: build.template(block.kms_key),
                name: build.template(block.name),
                source_uri: build.template(block.source_uri),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kms_key: p.child('kms_key').out,
      name: p.child('name').out,
      source_uri: p.child('source_uri').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appintegrations_event_integration(name, block): {
      local p = path(['aws_appintegrations_event_integration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appintegrations_event_integration: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                eventbridge_bus: build.template(block.eventbridge_bus),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      eventbridge_bus: p.child('eventbridge_bus').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    applicationinsights_application(name, block): {
      local p = path(['aws_applicationinsights_application', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_applicationinsights_application: {
              [name]: std.prune({
                auto_config_enabled: build.template(std.get(block, 'auto_config_enabled', null, true)),
                auto_create: build.template(std.get(block, 'auto_create', null, true)),
                cwe_monitor_enabled: build.template(std.get(block, 'cwe_monitor_enabled', null, true)),
                grouping_type: build.template(std.get(block, 'grouping_type', null, true)),
                ops_center_enabled: build.template(std.get(block, 'ops_center_enabled', null, true)),
                ops_item_sns_topic_arn: build.template(std.get(block, 'ops_item_sns_topic_arn', null, true)),
                resource_group_name: build.template(block.resource_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_config_enabled: p.child('auto_config_enabled').out,
      auto_create: p.child('auto_create').out,
      cwe_monitor_enabled: p.child('cwe_monitor_enabled').out,
      grouping_type: p.child('grouping_type').out,
      id: p.child('id').out,
      ops_center_enabled: p.child('ops_center_enabled').out,
      ops_item_sns_topic_arn: p.child('ops_item_sns_topic_arn').out,
      resource_group_name: p.child('resource_group_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appmesh_gateway_route(name, block): {
      local p = path(['aws_appmesh_gateway_route', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appmesh_gateway_route: {
              [name]: std.prune({
                mesh_name: build.template(block.mesh_name),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_gateway_name: build.template(block.virtual_gateway_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_name: p.child('mesh_name').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      virtual_gateway_name: p.child('virtual_gateway_name').out,
    },
    appmesh_mesh(name, block): {
      local p = path(['aws_appmesh_mesh', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appmesh_mesh: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appmesh_route(name, block): {
      local p = path(['aws_appmesh_route', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appmesh_route: {
              [name]: std.prune({
                mesh_name: build.template(block.mesh_name),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_router_name: build.template(block.virtual_router_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_name: p.child('mesh_name').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      virtual_router_name: p.child('virtual_router_name').out,
    },
    appmesh_virtual_gateway(name, block): {
      local p = path(['aws_appmesh_virtual_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appmesh_virtual_gateway: {
              [name]: std.prune({
                mesh_name: build.template(block.mesh_name),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_name: p.child('mesh_name').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appmesh_virtual_node(name, block): {
      local p = path(['aws_appmesh_virtual_node', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appmesh_virtual_node: {
              [name]: std.prune({
                mesh_name: build.template(block.mesh_name),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_name: p.child('mesh_name').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appmesh_virtual_router(name, block): {
      local p = path(['aws_appmesh_virtual_router', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appmesh_virtual_router: {
              [name]: std.prune({
                mesh_name: build.template(block.mesh_name),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_name: p.child('mesh_name').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appmesh_virtual_service(name, block): {
      local p = path(['aws_appmesh_virtual_service', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appmesh_virtual_service: {
              [name]: std.prune({
                mesh_name: build.template(block.mesh_name),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_name: p.child('mesh_name').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    apprunner_auto_scaling_configuration_version(name, block): {
      local p = path(['aws_apprunner_auto_scaling_configuration_version', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apprunner_auto_scaling_configuration_version: {
              [name]: std.prune({
                auto_scaling_configuration_name: build.template(block.auto_scaling_configuration_name),
                max_concurrency: build.template(std.get(block, 'max_concurrency', null, true)),
                max_size: build.template(std.get(block, 'max_size', null, true)),
                min_size: build.template(std.get(block, 'min_size', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_scaling_configuration_name: p.child('auto_scaling_configuration_name').out,
      auto_scaling_configuration_revision: p.child('auto_scaling_configuration_revision').out,
      has_associated_service: p.child('has_associated_service').out,
      id: p.child('id').out,
      is_default: p.child('is_default').out,
      latest: p.child('latest').out,
      max_concurrency: p.child('max_concurrency').out,
      max_size: p.child('max_size').out,
      min_size: p.child('min_size').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    apprunner_connection(name, block): {
      local p = path(['aws_apprunner_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apprunner_connection: {
              [name]: std.prune({
                connection_name: build.template(block.connection_name),
                provider_type: build.template(block.provider_type),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      connection_name: p.child('connection_name').out,
      id: p.child('id').out,
      provider_type: p.child('provider_type').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    apprunner_custom_domain_association(name, block): {
      local p = path(['aws_apprunner_custom_domain_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apprunner_custom_domain_association: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                enable_www_subdomain: build.template(std.get(block, 'enable_www_subdomain', null, true)),
                service_arn: build.template(block.service_arn),
              }),
            },
          },
        },
      },
      certificate_validation_records: p.child('certificate_validation_records').out,
      dns_target: p.child('dns_target').out,
      domain_name: p.child('domain_name').out,
      enable_www_subdomain: p.child('enable_www_subdomain').out,
      id: p.child('id').out,
      service_arn: p.child('service_arn').out,
      status: p.child('status').out,
    },
    apprunner_default_auto_scaling_configuration_version(name, block): {
      local p = path(['aws_apprunner_default_auto_scaling_configuration_version', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apprunner_default_auto_scaling_configuration_version: {
              [name]: std.prune({
                auto_scaling_configuration_arn: build.template(block.auto_scaling_configuration_arn),
              }),
            },
          },
        },
      },
      auto_scaling_configuration_arn: p.child('auto_scaling_configuration_arn').out,
      id: p.child('id').out,
    },
    apprunner_deployment(name, block): {
      local p = path(['aws_apprunner_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apprunner_deployment: {
              [name]: std.prune({
                service_arn: build.template(block.service_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      operation_id: p.child('operation_id').out,
      service_arn: p.child('service_arn').out,
      status: p.child('status').out,
    },
    apprunner_observability_configuration(name, block): {
      local p = path(['aws_apprunner_observability_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apprunner_observability_configuration: {
              [name]: std.prune({
                observability_configuration_name: build.template(block.observability_configuration_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      latest: p.child('latest').out,
      observability_configuration_name: p.child('observability_configuration_name').out,
      observability_configuration_revision: p.child('observability_configuration_revision').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    apprunner_service(name, block): {
      local p = path(['aws_apprunner_service', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apprunner_service: {
              [name]: std.prune({
                service_name: build.template(block.service_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_scaling_configuration_arn: p.child('auto_scaling_configuration_arn').out,
      id: p.child('id').out,
      service_id: p.child('service_id').out,
      service_name: p.child('service_name').out,
      service_url: p.child('service_url').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    apprunner_vpc_connector(name, block): {
      local p = path(['aws_apprunner_vpc_connector', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apprunner_vpc_connector: {
              [name]: std.prune({
                security_groups: build.template(block.security_groups),
                subnets: build.template(block.subnets),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_connector_name: build.template(block.vpc_connector_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      security_groups: p.child('security_groups').out,
      status: p.child('status').out,
      subnets: p.child('subnets').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_connector_name: p.child('vpc_connector_name').out,
      vpc_connector_revision: p.child('vpc_connector_revision').out,
    },
    apprunner_vpc_ingress_connection(name, block): {
      local p = path(['aws_apprunner_vpc_ingress_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_apprunner_vpc_ingress_connection: {
              [name]: std.prune({
                name: build.template(block.name),
                service_arn: build.template(block.service_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      service_arn: p.child('service_arn').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appstream_directory_config(name, block): {
      local p = path(['aws_appstream_directory_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appstream_directory_config: {
              [name]: std.prune({
                directory_name: build.template(block.directory_name),
                organizational_unit_distinguished_names: build.template(block.organizational_unit_distinguished_names),
              }),
            },
          },
        },
      },
      created_time: p.child('created_time').out,
      directory_name: p.child('directory_name').out,
      id: p.child('id').out,
      organizational_unit_distinguished_names: p.child('organizational_unit_distinguished_names').out,
    },
    appstream_fleet(name, block): {
      local p = path(['aws_appstream_fleet', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appstream_fleet: {
              [name]: std.prune({
                idle_disconnect_timeout_in_seconds: build.template(std.get(block, 'idle_disconnect_timeout_in_seconds', null, true)),
                instance_type: build.template(block.instance_type),
                max_sessions_per_instance: build.template(std.get(block, 'max_sessions_per_instance', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_time: p.child('created_time').out,
      description: p.child('description').out,
      disconnect_timeout_in_seconds: p.child('disconnect_timeout_in_seconds').out,
      display_name: p.child('display_name').out,
      enable_default_internet_access: p.child('enable_default_internet_access').out,
      fleet_type: p.child('fleet_type').out,
      iam_role_arn: p.child('iam_role_arn').out,
      id: p.child('id').out,
      idle_disconnect_timeout_in_seconds: p.child('idle_disconnect_timeout_in_seconds').out,
      image_arn: p.child('image_arn').out,
      image_name: p.child('image_name').out,
      instance_type: p.child('instance_type').out,
      max_sessions_per_instance: p.child('max_sessions_per_instance').out,
      max_user_duration_in_seconds: p.child('max_user_duration_in_seconds').out,
      name: p.child('name').out,
      state: p.child('state').out,
      stream_view: p.child('stream_view').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appstream_fleet_stack_association(name, block): {
      local p = path(['aws_appstream_fleet_stack_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appstream_fleet_stack_association: {
              [name]: std.prune({
                fleet_name: build.template(block.fleet_name),
                stack_name: build.template(block.stack_name),
              }),
            },
          },
        },
      },
      fleet_name: p.child('fleet_name').out,
      id: p.child('id').out,
      stack_name: p.child('stack_name').out,
    },
    appstream_image_builder(name, block): {
      local p = path(['aws_appstream_image_builder', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appstream_image_builder: {
              [name]: std.prune({
                instance_type: build.template(block.instance_type),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      appstream_agent_version: p.child('appstream_agent_version').out,
      arn: p.child('arn').out,
      created_time: p.child('created_time').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      enable_default_internet_access: p.child('enable_default_internet_access').out,
      iam_role_arn: p.child('iam_role_arn').out,
      id: p.child('id').out,
      image_arn: p.child('image_arn').out,
      image_name: p.child('image_name').out,
      instance_type: p.child('instance_type').out,
      name: p.child('name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appstream_stack(name, block): {
      local p = path(['aws_appstream_stack', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appstream_stack: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_time: p.child('created_time').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      embed_host_domains: p.child('embed_host_domains').out,
      feedback_url: p.child('feedback_url').out,
      id: p.child('id').out,
      name: p.child('name').out,
      redirect_url: p.child('redirect_url').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    appstream_user(name, block): {
      local p = path(['aws_appstream_user', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appstream_user: {
              [name]: std.prune({
                authentication_type: build.template(block.authentication_type),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                first_name: build.template(std.get(block, 'first_name', null, true)),
                last_name: build.template(std.get(block, 'last_name', null, true)),
                send_email_notification: build.template(std.get(block, 'send_email_notification', null, true)),
                user_name: build.template(block.user_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      authentication_type: p.child('authentication_type').out,
      created_time: p.child('created_time').out,
      enabled: p.child('enabled').out,
      first_name: p.child('first_name').out,
      id: p.child('id').out,
      last_name: p.child('last_name').out,
      send_email_notification: p.child('send_email_notification').out,
      user_name: p.child('user_name').out,
    },
    appstream_user_stack_association(name, block): {
      local p = path(['aws_appstream_user_stack_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appstream_user_stack_association: {
              [name]: std.prune({
                authentication_type: build.template(block.authentication_type),
                send_email_notification: build.template(std.get(block, 'send_email_notification', null, true)),
                stack_name: build.template(block.stack_name),
                user_name: build.template(block.user_name),
              }),
            },
          },
        },
      },
      authentication_type: p.child('authentication_type').out,
      id: p.child('id').out,
      send_email_notification: p.child('send_email_notification').out,
      stack_name: p.child('stack_name').out,
      user_name: p.child('user_name').out,
    },
    appsync_api_cache(name, block): {
      local p = path(['aws_appsync_api_cache', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appsync_api_cache: {
              [name]: std.prune({
                api_caching_behavior: build.template(block.api_caching_behavior),
                api_id: build.template(block.api_id),
                at_rest_encryption_enabled: build.template(std.get(block, 'at_rest_encryption_enabled', null, true)),
                transit_encryption_enabled: build.template(std.get(block, 'transit_encryption_enabled', null, true)),
                ttl: build.template(block.ttl),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      api_caching_behavior: p.child('api_caching_behavior').out,
      api_id: p.child('api_id').out,
      at_rest_encryption_enabled: p.child('at_rest_encryption_enabled').out,
      id: p.child('id').out,
      transit_encryption_enabled: p.child('transit_encryption_enabled').out,
      ttl: p.child('ttl').out,
      type: p.child('type').out,
    },
    appsync_api_key(name, block): {
      local p = path(['aws_appsync_api_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appsync_api_key: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                description: build.template(std.get(block, 'description', null, true)),
                expires: build.template(std.get(block, 'expires', null, true)),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      api_key_id: p.child('api_key_id').out,
      description: p.child('description').out,
      expires: p.child('expires').out,
      id: p.child('id').out,
      key: p.child('key').out,
    },
    appsync_datasource(name, block): {
      local p = path(['aws_appsync_datasource', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appsync_datasource: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                service_role_arn: build.template(std.get(block, 'service_role_arn', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      service_role_arn: p.child('service_role_arn').out,
      type: p.child('type').out,
    },
    appsync_domain_name(name, block): {
      local p = path(['aws_appsync_domain_name', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appsync_domain_name: {
              [name]: std.prune({
                certificate_arn: build.template(block.certificate_arn),
                description: build.template(std.get(block, 'description', null, true)),
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      appsync_domain_name: p.child('appsync_domain_name').out,
      certificate_arn: p.child('certificate_arn').out,
      description: p.child('description').out,
      domain_name: p.child('domain_name').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      id: p.child('id').out,
    },
    appsync_domain_name_api_association(name, block): {
      local p = path(['aws_appsync_domain_name_api_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appsync_domain_name_api_association: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
    },
    appsync_function(name, block): {
      local p = path(['aws_appsync_function', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appsync_function: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                code: build.template(std.get(block, 'code', null, true)),
                data_source: build.template(block.data_source),
                description: build.template(std.get(block, 'description', null, true)),
                max_batch_size: build.template(std.get(block, 'max_batch_size', null, true)),
                name: build.template(block.name),
                request_mapping_template: build.template(std.get(block, 'request_mapping_template', null, true)),
                response_mapping_template: build.template(std.get(block, 'response_mapping_template', null, true)),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      arn: p.child('arn').out,
      code: p.child('code').out,
      data_source: p.child('data_source').out,
      description: p.child('description').out,
      function_id: p.child('function_id').out,
      function_version: p.child('function_version').out,
      id: p.child('id').out,
      max_batch_size: p.child('max_batch_size').out,
      name: p.child('name').out,
      request_mapping_template: p.child('request_mapping_template').out,
      response_mapping_template: p.child('response_mapping_template').out,
    },
    appsync_graphql_api(name, block): {
      local p = path(['aws_appsync_graphql_api', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appsync_graphql_api: {
              [name]: std.prune({
                api_type: build.template(std.get(block, 'api_type', null, true)),
                authentication_type: build.template(block.authentication_type),
                introspection_config: build.template(std.get(block, 'introspection_config', null, true)),
                merged_api_execution_role_arn: build.template(std.get(block, 'merged_api_execution_role_arn', null, true)),
                name: build.template(block.name),
                query_depth_limit: build.template(std.get(block, 'query_depth_limit', null, true)),
                resolver_count_limit: build.template(std.get(block, 'resolver_count_limit', null, true)),
                schema: build.template(std.get(block, 'schema', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                visibility: build.template(std.get(block, 'visibility', null, true)),
                xray_enabled: build.template(std.get(block, 'xray_enabled', null, true)),
              }),
            },
          },
        },
      },
      api_type: p.child('api_type').out,
      arn: p.child('arn').out,
      authentication_type: p.child('authentication_type').out,
      id: p.child('id').out,
      introspection_config: p.child('introspection_config').out,
      merged_api_execution_role_arn: p.child('merged_api_execution_role_arn').out,
      name: p.child('name').out,
      query_depth_limit: p.child('query_depth_limit').out,
      resolver_count_limit: p.child('resolver_count_limit').out,
      schema: p.child('schema').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uris: p.child('uris').out,
      visibility: p.child('visibility').out,
      xray_enabled: p.child('xray_enabled').out,
    },
    appsync_resolver(name, block): {
      local p = path(['aws_appsync_resolver', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appsync_resolver: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                code: build.template(std.get(block, 'code', null, true)),
                data_source: build.template(std.get(block, 'data_source', null, true)),
                field: build.template(block.field),
                kind: build.template(std.get(block, 'kind', null, true)),
                max_batch_size: build.template(std.get(block, 'max_batch_size', null, true)),
                request_template: build.template(std.get(block, 'request_template', null, true)),
                response_template: build.template(std.get(block, 'response_template', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      arn: p.child('arn').out,
      code: p.child('code').out,
      data_source: p.child('data_source').out,
      field: p.child('field').out,
      id: p.child('id').out,
      kind: p.child('kind').out,
      max_batch_size: p.child('max_batch_size').out,
      request_template: p.child('request_template').out,
      response_template: p.child('response_template').out,
      type: p.child('type').out,
    },
    appsync_source_api_association(name, block): {
      local p = path(['aws_appsync_source_api_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appsync_source_api_association: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      association_id: p.child('association_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      merged_api_arn: p.child('merged_api_arn').out,
      merged_api_id: p.child('merged_api_id').out,
      source_api_arn: p.child('source_api_arn').out,
      source_api_association_config: p.child('source_api_association_config').out,
      source_api_id: p.child('source_api_id').out,
    },
    appsync_type(name, block): {
      local p = path(['aws_appsync_type', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_appsync_type: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                definition: build.template(block.definition),
                format: build.template(block.format),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      arn: p.child('arn').out,
      definition: p.child('definition').out,
      description: p.child('description').out,
      format: p.child('format').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    athena_data_catalog(name, block): {
      local p = path(['aws_athena_data_catalog', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_athena_data_catalog: {
              [name]: std.prune({
                description: build.template(block.description),
                name: build.template(block.name),
                parameters: build.template(block.parameters),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    athena_database(name, block): {
      local p = path(['aws_athena_database', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_athena_database: {
              [name]: std.prune({
                bucket: build.template(std.get(block, 'bucket', null, true)),
                comment: build.template(std.get(block, 'comment', null, true)),
                expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                name: build.template(block.name),
                properties: build.template(std.get(block, 'properties', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      comment: p.child('comment').out,
      expected_bucket_owner: p.child('expected_bucket_owner').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      name: p.child('name').out,
      properties: p.child('properties').out,
    },
    athena_named_query(name, block): {
      local p = path(['aws_athena_named_query', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_athena_named_query: {
              [name]: std.prune({
                database: build.template(block.database),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                query: build.template(block.query),
                workgroup: build.template(std.get(block, 'workgroup', null, true)),
              }),
            },
          },
        },
      },
      database: p.child('database').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      query: p.child('query').out,
      workgroup: p.child('workgroup').out,
    },
    athena_prepared_statement(name, block): {
      local p = path(['aws_athena_prepared_statement', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_athena_prepared_statement: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                query_statement: build.template(block.query_statement),
                workgroup: build.template(block.workgroup),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      query_statement: p.child('query_statement').out,
      workgroup: p.child('workgroup').out,
    },
    athena_workgroup(name, block): {
      local p = path(['aws_athena_workgroup', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_athena_workgroup: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                name: build.template(block.name),
                state: build.template(std.get(block, 'state', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      name: p.child('name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    auditmanager_account_registration(name, block): {
      local p = path(['aws_auditmanager_account_registration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_auditmanager_account_registration: {
              [name]: std.prune({
                delegated_admin_account: build.template(std.get(block, 'delegated_admin_account', null, true)),
                deregister_on_destroy: build.template(std.get(block, 'deregister_on_destroy', null, true)),
                kms_key: build.template(std.get(block, 'kms_key', null, true)),
              }),
            },
          },
        },
      },
      delegated_admin_account: p.child('delegated_admin_account').out,
      deregister_on_destroy: p.child('deregister_on_destroy').out,
      id: p.child('id').out,
      kms_key: p.child('kms_key').out,
      status: p.child('status').out,
    },
    auditmanager_assessment(name, block): {
      local p = path(['aws_auditmanager_assessment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_auditmanager_assessment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                framework_id: build.template(block.framework_id),
                name: build.template(block.name),
                roles: build.template(block.roles),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      framework_id: p.child('framework_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      roles: p.child('roles').out,
      roles_all: p.child('roles_all').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    auditmanager_assessment_delegation(name, block): {
      local p = path(['aws_auditmanager_assessment_delegation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_auditmanager_assessment_delegation: {
              [name]: std.prune({
                assessment_id: build.template(block.assessment_id),
                comment: build.template(std.get(block, 'comment', null, true)),
                control_set_id: build.template(block.control_set_id),
                role_arn: build.template(block.role_arn),
                role_type: build.template(block.role_type),
              }),
            },
          },
        },
      },
      assessment_id: p.child('assessment_id').out,
      comment: p.child('comment').out,
      control_set_id: p.child('control_set_id').out,
      delegation_id: p.child('delegation_id').out,
      id: p.child('id').out,
      role_arn: p.child('role_arn').out,
      role_type: p.child('role_type').out,
      status: p.child('status').out,
    },
    auditmanager_assessment_report(name, block): {
      local p = path(['aws_auditmanager_assessment_report', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_auditmanager_assessment_report: {
              [name]: std.prune({
                assessment_id: build.template(block.assessment_id),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      assessment_id: p.child('assessment_id').out,
      author: p.child('author').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
    },
    auditmanager_control(name, block): {
      local p = path(['aws_auditmanager_control', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_auditmanager_control: {
              [name]: std.prune({
                action_plan_instructions: build.template(std.get(block, 'action_plan_instructions', null, true)),
                action_plan_title: build.template(std.get(block, 'action_plan_title', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                testing_information: build.template(std.get(block, 'testing_information', null, true)),
              }),
            },
          },
        },
      },
      action_plan_instructions: p.child('action_plan_instructions').out,
      action_plan_title: p.child('action_plan_title').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      testing_information: p.child('testing_information').out,
      type: p.child('type').out,
    },
    auditmanager_framework(name, block): {
      local p = path(['aws_auditmanager_framework', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_auditmanager_framework: {
              [name]: std.prune({
                compliance_type: build.template(std.get(block, 'compliance_type', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      compliance_type: p.child('compliance_type').out,
      description: p.child('description').out,
      framework_type: p.child('framework_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    auditmanager_framework_share(name, block): {
      local p = path(['aws_auditmanager_framework_share', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_auditmanager_framework_share: {
              [name]: std.prune({
                comment: build.template(std.get(block, 'comment', null, true)),
                destination_account: build.template(block.destination_account),
                destination_region: build.template(block.destination_region),
                framework_id: build.template(block.framework_id),
              }),
            },
          },
        },
      },
      comment: p.child('comment').out,
      destination_account: p.child('destination_account').out,
      destination_region: p.child('destination_region').out,
      framework_id: p.child('framework_id').out,
      id: p.child('id').out,
      status: p.child('status').out,
    },
    auditmanager_organization_admin_account_registration(name, block): {
      local p = path(['aws_auditmanager_organization_admin_account_registration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_auditmanager_organization_admin_account_registration: {
              [name]: std.prune({
                admin_account_id: build.template(block.admin_account_id),
              }),
            },
          },
        },
      },
      admin_account_id: p.child('admin_account_id').out,
      id: p.child('id').out,
      organization_id: p.child('organization_id').out,
    },
    autoscaling_attachment(name, block): {
      local p = path(['aws_autoscaling_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_autoscaling_attachment: {
              [name]: std.prune({
                autoscaling_group_name: build.template(block.autoscaling_group_name),
                elb: build.template(std.get(block, 'elb', null, true)),
                lb_target_group_arn: build.template(std.get(block, 'lb_target_group_arn', null, true)),
              }),
            },
          },
        },
      },
      autoscaling_group_name: p.child('autoscaling_group_name').out,
      elb: p.child('elb').out,
      id: p.child('id').out,
      lb_target_group_arn: p.child('lb_target_group_arn').out,
    },
    autoscaling_group(name, block): {
      local p = path(['aws_autoscaling_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_autoscaling_group: {
              [name]: std.prune({
                capacity_rebalance: build.template(std.get(block, 'capacity_rebalance', null, true)),
                context: build.template(std.get(block, 'context', null, true)),
                default_instance_warmup: build.template(std.get(block, 'default_instance_warmup', null, true)),
                desired_capacity_type: build.template(std.get(block, 'desired_capacity_type', null, true)),
                enabled_metrics: build.template(std.get(block, 'enabled_metrics', null, true)),
                force_delete: build.template(std.get(block, 'force_delete', null, true)),
                force_delete_warm_pool: build.template(std.get(block, 'force_delete_warm_pool', null, true)),
                health_check_grace_period: build.template(std.get(block, 'health_check_grace_period', null, true)),
                ignore_failed_scaling_activities: build.template(std.get(block, 'ignore_failed_scaling_activities', null, true)),
                launch_configuration: build.template(std.get(block, 'launch_configuration', null, true)),
                max_instance_lifetime: build.template(std.get(block, 'max_instance_lifetime', null, true)),
                max_size: build.template(block.max_size),
                metrics_granularity: build.template(std.get(block, 'metrics_granularity', null, true)),
                min_elb_capacity: build.template(std.get(block, 'min_elb_capacity', null, true)),
                min_size: build.template(block.min_size),
                placement_group: build.template(std.get(block, 'placement_group', null, true)),
                protect_from_scale_in: build.template(std.get(block, 'protect_from_scale_in', null, true)),
                suspended_processes: build.template(std.get(block, 'suspended_processes', null, true)),
                termination_policies: build.template(std.get(block, 'termination_policies', null, true)),
                wait_for_capacity_timeout: build.template(std.get(block, 'wait_for_capacity_timeout', null, true)),
                wait_for_elb_capacity: build.template(std.get(block, 'wait_for_elb_capacity', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zones: p.child('availability_zones').out,
      capacity_rebalance: p.child('capacity_rebalance').out,
      context: p.child('context').out,
      default_cooldown: p.child('default_cooldown').out,
      default_instance_warmup: p.child('default_instance_warmup').out,
      desired_capacity: p.child('desired_capacity').out,
      desired_capacity_type: p.child('desired_capacity_type').out,
      enabled_metrics: p.child('enabled_metrics').out,
      force_delete: p.child('force_delete').out,
      force_delete_warm_pool: p.child('force_delete_warm_pool').out,
      health_check_grace_period: p.child('health_check_grace_period').out,
      health_check_type: p.child('health_check_type').out,
      id: p.child('id').out,
      ignore_failed_scaling_activities: p.child('ignore_failed_scaling_activities').out,
      launch_configuration: p.child('launch_configuration').out,
      load_balancers: p.child('load_balancers').out,
      max_instance_lifetime: p.child('max_instance_lifetime').out,
      max_size: p.child('max_size').out,
      metrics_granularity: p.child('metrics_granularity').out,
      min_elb_capacity: p.child('min_elb_capacity').out,
      min_size: p.child('min_size').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      placement_group: p.child('placement_group').out,
      predicted_capacity: p.child('predicted_capacity').out,
      protect_from_scale_in: p.child('protect_from_scale_in').out,
      service_linked_role_arn: p.child('service_linked_role_arn').out,
      suspended_processes: p.child('suspended_processes').out,
      target_group_arns: p.child('target_group_arns').out,
      termination_policies: p.child('termination_policies').out,
      vpc_zone_identifier: p.child('vpc_zone_identifier').out,
      wait_for_capacity_timeout: p.child('wait_for_capacity_timeout').out,
      wait_for_elb_capacity: p.child('wait_for_elb_capacity').out,
      warm_pool_size: p.child('warm_pool_size').out,
    },
    autoscaling_group_tag(name, block): {
      local p = path(['aws_autoscaling_group_tag', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_autoscaling_group_tag: {
              [name]: std.prune({
                autoscaling_group_name: build.template(block.autoscaling_group_name),
              }),
            },
          },
        },
      },
      autoscaling_group_name: p.child('autoscaling_group_name').out,
      id: p.child('id').out,
    },
    autoscaling_lifecycle_hook(name, block): {
      local p = path(['aws_autoscaling_lifecycle_hook', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_autoscaling_lifecycle_hook: {
              [name]: std.prune({
                autoscaling_group_name: build.template(block.autoscaling_group_name),
                heartbeat_timeout: build.template(std.get(block, 'heartbeat_timeout', null, true)),
                lifecycle_transition: build.template(block.lifecycle_transition),
                name: build.template(block.name),
                notification_metadata: build.template(std.get(block, 'notification_metadata', null, true)),
                notification_target_arn: build.template(std.get(block, 'notification_target_arn', null, true)),
                role_arn: build.template(std.get(block, 'role_arn', null, true)),
              }),
            },
          },
        },
      },
      autoscaling_group_name: p.child('autoscaling_group_name').out,
      default_result: p.child('default_result').out,
      heartbeat_timeout: p.child('heartbeat_timeout').out,
      id: p.child('id').out,
      lifecycle_transition: p.child('lifecycle_transition').out,
      name: p.child('name').out,
      notification_metadata: p.child('notification_metadata').out,
      notification_target_arn: p.child('notification_target_arn').out,
      role_arn: p.child('role_arn').out,
    },
    autoscaling_notification(name, block): {
      local p = path(['aws_autoscaling_notification', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_autoscaling_notification: {
              [name]: std.prune({
                group_names: build.template(block.group_names),
                notifications: build.template(block.notifications),
                topic_arn: build.template(block.topic_arn),
              }),
            },
          },
        },
      },
      group_names: p.child('group_names').out,
      id: p.child('id').out,
      notifications: p.child('notifications').out,
      topic_arn: p.child('topic_arn').out,
    },
    autoscaling_policy(name, block): {
      local p = path(['aws_autoscaling_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_autoscaling_policy: {
              [name]: std.prune({
                adjustment_type: build.template(std.get(block, 'adjustment_type', null, true)),
                autoscaling_group_name: build.template(block.autoscaling_group_name),
                cooldown: build.template(std.get(block, 'cooldown', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                estimated_instance_warmup: build.template(std.get(block, 'estimated_instance_warmup', null, true)),
                min_adjustment_magnitude: build.template(std.get(block, 'min_adjustment_magnitude', null, true)),
                name: build.template(block.name),
                policy_type: build.template(std.get(block, 'policy_type', null, true)),
                scaling_adjustment: build.template(std.get(block, 'scaling_adjustment', null, true)),
              }),
            },
          },
        },
      },
      adjustment_type: p.child('adjustment_type').out,
      arn: p.child('arn').out,
      autoscaling_group_name: p.child('autoscaling_group_name').out,
      cooldown: p.child('cooldown').out,
      enabled: p.child('enabled').out,
      estimated_instance_warmup: p.child('estimated_instance_warmup').out,
      id: p.child('id').out,
      metric_aggregation_type: p.child('metric_aggregation_type').out,
      min_adjustment_magnitude: p.child('min_adjustment_magnitude').out,
      name: p.child('name').out,
      policy_type: p.child('policy_type').out,
      scaling_adjustment: p.child('scaling_adjustment').out,
    },
    autoscaling_schedule(name, block): {
      local p = path(['aws_autoscaling_schedule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_autoscaling_schedule: {
              [name]: std.prune({
                autoscaling_group_name: build.template(block.autoscaling_group_name),
                scheduled_action_name: build.template(block.scheduled_action_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      autoscaling_group_name: p.child('autoscaling_group_name').out,
      desired_capacity: p.child('desired_capacity').out,
      end_time: p.child('end_time').out,
      id: p.child('id').out,
      max_size: p.child('max_size').out,
      min_size: p.child('min_size').out,
      recurrence: p.child('recurrence').out,
      scheduled_action_name: p.child('scheduled_action_name').out,
      start_time: p.child('start_time').out,
      time_zone: p.child('time_zone').out,
    },
    autoscaling_traffic_source_attachment(name, block): {
      local p = path(['aws_autoscaling_traffic_source_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_autoscaling_traffic_source_attachment: {
              [name]: std.prune({
                autoscaling_group_name: build.template(block.autoscaling_group_name),
              }),
            },
          },
        },
      },
      autoscaling_group_name: p.child('autoscaling_group_name').out,
      id: p.child('id').out,
    },
    autoscalingplans_scaling_plan(name, block): {
      local p = path(['aws_autoscalingplans_scaling_plan', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_autoscalingplans_scaling_plan: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      scaling_plan_version: p.child('scaling_plan_version').out,
    },
    backup_framework(name, block): {
      local p = path(['aws_backup_framework', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_backup_framework: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      deployment_status: p.child('deployment_status').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    backup_global_settings(name, block): {
      local p = path(['aws_backup_global_settings', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_backup_global_settings: {
              [name]: std.prune({
                global_settings: build.template(block.global_settings),
              }),
            },
          },
        },
      },
      global_settings: p.child('global_settings').out,
      id: p.child('id').out,
    },
    backup_logically_air_gapped_vault(name, block): {
      local p = path(['aws_backup_logically_air_gapped_vault', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_backup_logically_air_gapped_vault: {
              [name]: std.prune({
                max_retention_days: build.template(block.max_retention_days),
                min_retention_days: build.template(block.min_retention_days),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      max_retention_days: p.child('max_retention_days').out,
      min_retention_days: p.child('min_retention_days').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    backup_plan(name, block): {
      local p = path(['aws_backup_plan', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_backup_plan: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    backup_region_settings(name, block): {
      local p = path(['aws_backup_region_settings', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_backup_region_settings: {
              [name]: std.prune({
                resource_type_opt_in_preference: build.template(block.resource_type_opt_in_preference),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      resource_type_management_preference: p.child('resource_type_management_preference').out,
      resource_type_opt_in_preference: p.child('resource_type_opt_in_preference').out,
    },
    backup_report_plan(name, block): {
      local p = path(['aws_backup_report_plan', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_backup_report_plan: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      deployment_status: p.child('deployment_status').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    backup_restore_testing_plan(name, block): {
      local p = path(['aws_backup_restore_testing_plan', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_backup_restore_testing_plan: {
              [name]: std.prune({
                name: build.template(block.name),
                schedule_expression: build.template(block.schedule_expression),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      name: p.child('name').out,
      schedule_expression: p.child('schedule_expression').out,
      schedule_expression_timezone: p.child('schedule_expression_timezone').out,
      start_window_hours: p.child('start_window_hours').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    backup_restore_testing_selection(name, block): {
      local p = path(['aws_backup_restore_testing_selection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_backup_restore_testing_selection: {
              [name]: std.prune({
                iam_role_arn: build.template(block.iam_role_arn),
                name: build.template(block.name),
                protected_resource_type: build.template(block.protected_resource_type),
                restore_testing_plan_name: build.template(block.restore_testing_plan_name),
              }),
            },
          },
        },
      },
      iam_role_arn: p.child('iam_role_arn').out,
      name: p.child('name').out,
      protected_resource_arns: p.child('protected_resource_arns').out,
      protected_resource_type: p.child('protected_resource_type').out,
      restore_metadata_overrides: p.child('restore_metadata_overrides').out,
      restore_testing_plan_name: p.child('restore_testing_plan_name').out,
      validation_window_hours: p.child('validation_window_hours').out,
    },
    backup_selection(name, block): {
      local p = path(['aws_backup_selection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_backup_selection: {
              [name]: std.prune({
                iam_role_arn: build.template(block.iam_role_arn),
                name: build.template(block.name),
                plan_id: build.template(block.plan_id),
                resources: build.template(std.get(block, 'resources', null, true)),
              }),
            },
          },
        },
      },
      iam_role_arn: p.child('iam_role_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      not_resources: p.child('not_resources').out,
      plan_id: p.child('plan_id').out,
      resources: p.child('resources').out,
    },
    backup_vault(name, block): {
      local p = path(['aws_backup_vault', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_backup_vault: {
              [name]: std.prune({
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      name: p.child('name').out,
      recovery_points: p.child('recovery_points').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    backup_vault_lock_configuration(name, block): {
      local p = path(['aws_backup_vault_lock_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_backup_vault_lock_configuration: {
              [name]: std.prune({
                backup_vault_name: build.template(block.backup_vault_name),
                changeable_for_days: build.template(std.get(block, 'changeable_for_days', null, true)),
                max_retention_days: build.template(std.get(block, 'max_retention_days', null, true)),
                min_retention_days: build.template(std.get(block, 'min_retention_days', null, true)),
              }),
            },
          },
        },
      },
      backup_vault_arn: p.child('backup_vault_arn').out,
      backup_vault_name: p.child('backup_vault_name').out,
      changeable_for_days: p.child('changeable_for_days').out,
      id: p.child('id').out,
      max_retention_days: p.child('max_retention_days').out,
      min_retention_days: p.child('min_retention_days').out,
    },
    backup_vault_notifications(name, block): {
      local p = path(['aws_backup_vault_notifications', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_backup_vault_notifications: {
              [name]: std.prune({
                backup_vault_events: build.template(block.backup_vault_events),
                backup_vault_name: build.template(block.backup_vault_name),
                sns_topic_arn: build.template(block.sns_topic_arn),
              }),
            },
          },
        },
      },
      backup_vault_arn: p.child('backup_vault_arn').out,
      backup_vault_events: p.child('backup_vault_events').out,
      backup_vault_name: p.child('backup_vault_name').out,
      id: p.child('id').out,
      sns_topic_arn: p.child('sns_topic_arn').out,
    },
    backup_vault_policy(name, block): {
      local p = path(['aws_backup_vault_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_backup_vault_policy: {
              [name]: std.prune({
                backup_vault_name: build.template(block.backup_vault_name),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      backup_vault_arn: p.child('backup_vault_arn').out,
      backup_vault_name: p.child('backup_vault_name').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
    },
    batch_compute_environment(name, block): {
      local p = path(['aws_batch_compute_environment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_batch_compute_environment: {
              [name]: std.prune({
                state: build.template(std.get(block, 'state', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      compute_environment_name: p.child('compute_environment_name').out,
      compute_environment_name_prefix: p.child('compute_environment_name_prefix').out,
      ecs_cluster_arn: p.child('ecs_cluster_arn').out,
      id: p.child('id').out,
      service_role: p.child('service_role').out,
      state: p.child('state').out,
      status: p.child('status').out,
      status_reason: p.child('status_reason').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    batch_job_definition(name, block): {
      local p = path(['aws_batch_job_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_batch_job_definition: {
              [name]: std.prune({
                container_properties: build.template(std.get(block, 'container_properties', null, true)),
                deregister_on_new_revision: build.template(std.get(block, 'deregister_on_new_revision', null, true)),
                ecs_properties: build.template(std.get(block, 'ecs_properties', null, true)),
                name: build.template(block.name),
                node_properties: build.template(std.get(block, 'node_properties', null, true)),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                platform_capabilities: build.template(std.get(block, 'platform_capabilities', null, true)),
                propagate_tags: build.template(std.get(block, 'propagate_tags', null, true)),
                scheduling_priority: build.template(std.get(block, 'scheduling_priority', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      arn_prefix: p.child('arn_prefix').out,
      container_properties: p.child('container_properties').out,
      deregister_on_new_revision: p.child('deregister_on_new_revision').out,
      ecs_properties: p.child('ecs_properties').out,
      id: p.child('id').out,
      name: p.child('name').out,
      node_properties: p.child('node_properties').out,
      parameters: p.child('parameters').out,
      platform_capabilities: p.child('platform_capabilities').out,
      propagate_tags: p.child('propagate_tags').out,
      revision: p.child('revision').out,
      scheduling_priority: p.child('scheduling_priority').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    batch_job_queue(name, block): {
      local p = path(['aws_batch_job_queue', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_batch_job_queue: {
              [name]: std.prune({
                compute_environments: build.template(std.get(block, 'compute_environments', null, true)),
                name: build.template(block.name),
                priority: build.template(block.priority),
                scheduling_policy_arn: build.template(std.get(block, 'scheduling_policy_arn', null, true)),
                state: build.template(block.state),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      compute_environments: p.child('compute_environments').out,
      id: p.child('id').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      scheduling_policy_arn: p.child('scheduling_policy_arn').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    batch_scheduling_policy(name, block): {
      local p = path(['aws_batch_scheduling_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_batch_scheduling_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    bcmdataexports_export(name, block): {
      local p = path(['aws_bcmdataexports_export', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_bcmdataexports_export: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    bedrock_custom_model(name, block): {
      local p = path(['aws_bedrock_custom_model', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_bedrock_custom_model: {
              [name]: std.prune({
                base_model_identifier: build.template(block.base_model_identifier),
                custom_model_kms_key_id: build.template(std.get(block, 'custom_model_kms_key_id', null, true)),
                custom_model_name: build.template(block.custom_model_name),
                hyperparameters: build.template(block.hyperparameters),
                job_name: build.template(block.job_name),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      base_model_identifier: p.child('base_model_identifier').out,
      custom_model_arn: p.child('custom_model_arn').out,
      custom_model_kms_key_id: p.child('custom_model_kms_key_id').out,
      custom_model_name: p.child('custom_model_name').out,
      customization_type: p.child('customization_type').out,
      hyperparameters: p.child('hyperparameters').out,
      id: p.child('id').out,
      job_arn: p.child('job_arn').out,
      job_name: p.child('job_name').out,
      job_status: p.child('job_status').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      training_metrics: p.child('training_metrics').out,
      validation_metrics: p.child('validation_metrics').out,
    },
    bedrock_guardrail(name, block): {
      local p = path(['aws_bedrock_guardrail', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_bedrock_guardrail: {
              [name]: std.prune({
                blocked_input_messaging: build.template(block.blocked_input_messaging),
                blocked_outputs_messaging: build.template(block.blocked_outputs_messaging),
                kms_key_arn: build.template(std.get(block, 'kms_key_arn', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      blocked_input_messaging: p.child('blocked_input_messaging').out,
      blocked_outputs_messaging: p.child('blocked_outputs_messaging').out,
      created_at: p.child('created_at').out,
      description: p.child('description').out,
      guardrail_arn: p.child('guardrail_arn').out,
      guardrail_id: p.child('guardrail_id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      name: p.child('name').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    bedrock_guardrail_version(name, block): {
      local p = path(['aws_bedrock_guardrail_version', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_bedrock_guardrail_version: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                guardrail_arn: build.template(block.guardrail_arn),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      guardrail_arn: p.child('guardrail_arn').out,
      skip_destroy: p.child('skip_destroy').out,
      version: p.child('version').out,
    },
    bedrock_model_invocation_logging_configuration(name, block): {
      local p = path(['aws_bedrock_model_invocation_logging_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_bedrock_model_invocation_logging_configuration: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    bedrock_provisioned_model_throughput(name, block): {
      local p = path(['aws_bedrock_provisioned_model_throughput', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_bedrock_provisioned_model_throughput: {
              [name]: std.prune({
                commitment_duration: build.template(std.get(block, 'commitment_duration', null, true)),
                model_arn: build.template(block.model_arn),
                model_units: build.template(block.model_units),
                provisioned_model_name: build.template(block.provisioned_model_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      commitment_duration: p.child('commitment_duration').out,
      id: p.child('id').out,
      model_arn: p.child('model_arn').out,
      model_units: p.child('model_units').out,
      provisioned_model_arn: p.child('provisioned_model_arn').out,
      provisioned_model_name: p.child('provisioned_model_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    bedrockagent_agent(name, block): {
      local p = path(['aws_bedrockagent_agent', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_bedrockagent_agent: {
              [name]: std.prune({
                agent_name: build.template(block.agent_name),
                agent_resource_role_arn: build.template(block.agent_resource_role_arn),
                customer_encryption_key_arn: build.template(std.get(block, 'customer_encryption_key_arn', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                foundation_model: build.template(block.foundation_model),
                guardrail_configuration: build.template(std.get(block, 'guardrail_configuration', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      agent_arn: p.child('agent_arn').out,
      agent_id: p.child('agent_id').out,
      agent_name: p.child('agent_name').out,
      agent_resource_role_arn: p.child('agent_resource_role_arn').out,
      agent_version: p.child('agent_version').out,
      customer_encryption_key_arn: p.child('customer_encryption_key_arn').out,
      description: p.child('description').out,
      foundation_model: p.child('foundation_model').out,
      guardrail_configuration: p.child('guardrail_configuration').out,
      id: p.child('id').out,
      idle_session_ttl_in_seconds: p.child('idle_session_ttl_in_seconds').out,
      instruction: p.child('instruction').out,
      prepare_agent: p.child('prepare_agent').out,
      prompt_override_configuration: p.child('prompt_override_configuration').out,
      skip_resource_in_use_check: p.child('skip_resource_in_use_check').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    bedrockagent_agent_action_group(name, block): {
      local p = path(['aws_bedrockagent_agent_action_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_bedrockagent_agent_action_group: {
              [name]: std.prune({
                action_group_name: build.template(block.action_group_name),
                agent_id: build.template(block.agent_id),
                agent_version: build.template(block.agent_version),
                description: build.template(std.get(block, 'description', null, true)),
                parent_action_group_signature: build.template(std.get(block, 'parent_action_group_signature', null, true)),
              }),
            },
          },
        },
      },
      action_group_id: p.child('action_group_id').out,
      action_group_name: p.child('action_group_name').out,
      action_group_state: p.child('action_group_state').out,
      agent_id: p.child('agent_id').out,
      agent_version: p.child('agent_version').out,
      description: p.child('description').out,
      id: p.child('id').out,
      parent_action_group_signature: p.child('parent_action_group_signature').out,
      prepare_agent: p.child('prepare_agent').out,
      skip_resource_in_use_check: p.child('skip_resource_in_use_check').out,
    },
    bedrockagent_agent_alias(name, block): {
      local p = path(['aws_bedrockagent_agent_alias', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_bedrockagent_agent_alias: {
              [name]: std.prune({
                agent_alias_name: build.template(block.agent_alias_name),
                agent_id: build.template(block.agent_id),
                description: build.template(std.get(block, 'description', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      agent_alias_arn: p.child('agent_alias_arn').out,
      agent_alias_id: p.child('agent_alias_id').out,
      agent_alias_name: p.child('agent_alias_name').out,
      agent_id: p.child('agent_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      routing_configuration: p.child('routing_configuration').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    bedrockagent_agent_knowledge_base_association(name, block): {
      local p = path(['aws_bedrockagent_agent_knowledge_base_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_bedrockagent_agent_knowledge_base_association: {
              [name]: std.prune({
                agent_id: build.template(block.agent_id),
                description: build.template(block.description),
                knowledge_base_id: build.template(block.knowledge_base_id),
                knowledge_base_state: build.template(block.knowledge_base_state),
              }),
            },
          },
        },
      },
      agent_id: p.child('agent_id').out,
      agent_version: p.child('agent_version').out,
      description: p.child('description').out,
      id: p.child('id').out,
      knowledge_base_id: p.child('knowledge_base_id').out,
      knowledge_base_state: p.child('knowledge_base_state').out,
    },
    bedrockagent_data_source(name, block): {
      local p = path(['aws_bedrockagent_data_source', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_bedrockagent_data_source: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                knowledge_base_id: build.template(block.knowledge_base_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      data_deletion_policy: p.child('data_deletion_policy').out,
      data_source_id: p.child('data_source_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      knowledge_base_id: p.child('knowledge_base_id').out,
      name: p.child('name').out,
    },
    bedrockagent_knowledge_base(name, block): {
      local p = path(['aws_bedrockagent_knowledge_base', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_bedrockagent_knowledge_base: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      description: p.child('description').out,
      failure_reasons: p.child('failure_reasons').out,
      id: p.child('id').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      updated_at: p.child('updated_at').out,
    },
    budgets_budget(name, block): {
      local p = path(['aws_budgets_budget', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_budgets_budget: {
              [name]: std.prune({
                budget_type: build.template(block.budget_type),
                tags: build.template(std.get(block, 'tags', null, true)),
                time_period_end: build.template(std.get(block, 'time_period_end', null, true)),
                time_unit: build.template(block.time_unit),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      arn: p.child('arn').out,
      budget_type: p.child('budget_type').out,
      id: p.child('id').out,
      limit_amount: p.child('limit_amount').out,
      limit_unit: p.child('limit_unit').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      time_period_end: p.child('time_period_end').out,
      time_period_start: p.child('time_period_start').out,
      time_unit: p.child('time_unit').out,
    },
    budgets_budget_action(name, block): {
      local p = path(['aws_budgets_budget_action', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_budgets_budget_action: {
              [name]: std.prune({
                action_type: build.template(block.action_type),
                approval_model: build.template(block.approval_model),
                budget_name: build.template(block.budget_name),
                execution_role_arn: build.template(block.execution_role_arn),
                notification_type: build.template(block.notification_type),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      action_id: p.child('action_id').out,
      action_type: p.child('action_type').out,
      approval_model: p.child('approval_model').out,
      arn: p.child('arn').out,
      budget_name: p.child('budget_name').out,
      execution_role_arn: p.child('execution_role_arn').out,
      id: p.child('id').out,
      notification_type: p.child('notification_type').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ce_anomaly_monitor(name, block): {
      local p = path(['aws_ce_anomaly_monitor', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ce_anomaly_monitor: {
              [name]: std.prune({
                monitor_dimension: build.template(std.get(block, 'monitor_dimension', null, true)),
                monitor_specification: build.template(std.get(block, 'monitor_specification', null, true)),
                monitor_type: build.template(block.monitor_type),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      monitor_dimension: p.child('monitor_dimension').out,
      monitor_specification: p.child('monitor_specification').out,
      monitor_type: p.child('monitor_type').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ce_anomaly_subscription(name, block): {
      local p = path(['aws_ce_anomaly_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ce_anomaly_subscription: {
              [name]: std.prune({
                frequency: build.template(block.frequency),
                monitor_arn_list: build.template(block.monitor_arn_list),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      arn: p.child('arn').out,
      frequency: p.child('frequency').out,
      id: p.child('id').out,
      monitor_arn_list: p.child('monitor_arn_list').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ce_cost_allocation_tag(name, block): {
      local p = path(['aws_ce_cost_allocation_tag', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ce_cost_allocation_tag: {
              [name]: std.prune({
                status: build.template(block.status),
                tag_key: build.template(block.tag_key),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      status: p.child('status').out,
      tag_key: p.child('tag_key').out,
      type: p.child('type').out,
    },
    ce_cost_category(name, block): {
      local p = path(['aws_ce_cost_category', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ce_cost_category: {
              [name]: std.prune({
                default_value: build.template(std.get(block, 'default_value', null, true)),
                name: build.template(block.name),
                rule_version: build.template(block.rule_version),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_value: p.child('default_value').out,
      effective_end: p.child('effective_end').out,
      effective_start: p.child('effective_start').out,
      id: p.child('id').out,
      name: p.child('name').out,
      rule_version: p.child('rule_version').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    chatbot_slack_channel_configuration(name, block): {
      local p = path(['aws_chatbot_slack_channel_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chatbot_slack_channel_configuration: {
              [name]: std.prune({
                configuration_name: build.template(block.configuration_name),
                iam_role_arn: build.template(block.iam_role_arn),
                slack_channel_id: build.template(block.slack_channel_id),
                slack_team_id: build.template(block.slack_team_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      chat_configuration_arn: p.child('chat_configuration_arn').out,
      configuration_name: p.child('configuration_name').out,
      guardrail_policy_arns: p.child('guardrail_policy_arns').out,
      iam_role_arn: p.child('iam_role_arn').out,
      logging_level: p.child('logging_level').out,
      slack_channel_id: p.child('slack_channel_id').out,
      slack_channel_name: p.child('slack_channel_name').out,
      slack_team_id: p.child('slack_team_id').out,
      slack_team_name: p.child('slack_team_name').out,
      sns_topic_arns: p.child('sns_topic_arns').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_authorization_required: p.child('user_authorization_required').out,
    },
    chatbot_teams_channel_configuration(name, block): {
      local p = path(['aws_chatbot_teams_channel_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chatbot_teams_channel_configuration: {
              [name]: std.prune({
                channel_id: build.template(block.channel_id),
                configuration_name: build.template(block.configuration_name),
                iam_role_arn: build.template(block.iam_role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                team_id: build.template(block.team_id),
                tenant_id: build.template(block.tenant_id),
              }),
            },
          },
        },
      },
      channel_id: p.child('channel_id').out,
      channel_name: p.child('channel_name').out,
      chat_configuration_arn: p.child('chat_configuration_arn').out,
      configuration_name: p.child('configuration_name').out,
      guardrail_policy_arns: p.child('guardrail_policy_arns').out,
      iam_role_arn: p.child('iam_role_arn').out,
      logging_level: p.child('logging_level').out,
      sns_topic_arns: p.child('sns_topic_arns').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      team_id: p.child('team_id').out,
      team_name: p.child('team_name').out,
      tenant_id: p.child('tenant_id').out,
      user_authorization_required: p.child('user_authorization_required').out,
    },
    chime_voice_connector(name, block): {
      local p = path(['aws_chime_voice_connector', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chime_voice_connector: {
              [name]: std.prune({
                name: build.template(block.name),
                require_encryption: build.template(block.require_encryption),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_region: p.child('aws_region').out,
      id: p.child('id').out,
      name: p.child('name').out,
      outbound_host_name: p.child('outbound_host_name').out,
      require_encryption: p.child('require_encryption').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    chime_voice_connector_group(name, block): {
      local p = path(['aws_chime_voice_connector_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chime_voice_connector_group: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    chime_voice_connector_logging(name, block): {
      local p = path(['aws_chime_voice_connector_logging', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chime_voice_connector_logging: {
              [name]: std.prune({
                enable_media_metric_logs: build.template(std.get(block, 'enable_media_metric_logs', null, true)),
                enable_sip_logs: build.template(std.get(block, 'enable_sip_logs', null, true)),
                voice_connector_id: build.template(block.voice_connector_id),
              }),
            },
          },
        },
      },
      enable_media_metric_logs: p.child('enable_media_metric_logs').out,
      enable_sip_logs: p.child('enable_sip_logs').out,
      id: p.child('id').out,
      voice_connector_id: p.child('voice_connector_id').out,
    },
    chime_voice_connector_origination(name, block): {
      local p = path(['aws_chime_voice_connector_origination', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chime_voice_connector_origination: {
              [name]: std.prune({
                disabled: build.template(std.get(block, 'disabled', null, true)),
                voice_connector_id: build.template(block.voice_connector_id),
              }),
            },
          },
        },
      },
      disabled: p.child('disabled').out,
      id: p.child('id').out,
      voice_connector_id: p.child('voice_connector_id').out,
    },
    chime_voice_connector_streaming(name, block): {
      local p = path(['aws_chime_voice_connector_streaming', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chime_voice_connector_streaming: {
              [name]: std.prune({
                data_retention: build.template(block.data_retention),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                streaming_notification_targets: build.template(std.get(block, 'streaming_notification_targets', null, true)),
                voice_connector_id: build.template(block.voice_connector_id),
              }),
            },
          },
        },
      },
      data_retention: p.child('data_retention').out,
      disabled: p.child('disabled').out,
      id: p.child('id').out,
      streaming_notification_targets: p.child('streaming_notification_targets').out,
      voice_connector_id: p.child('voice_connector_id').out,
    },
    chime_voice_connector_termination(name, block): {
      local p = path(['aws_chime_voice_connector_termination', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chime_voice_connector_termination: {
              [name]: std.prune({
                calling_regions: build.template(block.calling_regions),
                cidr_allow_list: build.template(block.cidr_allow_list),
                cps_limit: build.template(std.get(block, 'cps_limit', null, true)),
                default_phone_number: build.template(std.get(block, 'default_phone_number', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                voice_connector_id: build.template(block.voice_connector_id),
              }),
            },
          },
        },
      },
      calling_regions: p.child('calling_regions').out,
      cidr_allow_list: p.child('cidr_allow_list').out,
      cps_limit: p.child('cps_limit').out,
      default_phone_number: p.child('default_phone_number').out,
      disabled: p.child('disabled').out,
      id: p.child('id').out,
      voice_connector_id: p.child('voice_connector_id').out,
    },
    chime_voice_connector_termination_credentials(name, block): {
      local p = path(['aws_chime_voice_connector_termination_credentials', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chime_voice_connector_termination_credentials: {
              [name]: std.prune({
                voice_connector_id: build.template(block.voice_connector_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      voice_connector_id: p.child('voice_connector_id').out,
    },
    chimesdkmediapipelines_media_insights_pipeline_configuration(name, block): {
      local p = path(['aws_chimesdkmediapipelines_media_insights_pipeline_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chimesdkmediapipelines_media_insights_pipeline_configuration: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_access_role_arn: build.template(block.resource_access_role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_access_role_arn: p.child('resource_access_role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    chimesdkvoice_global_settings(name, block): {
      local p = path(['aws_chimesdkvoice_global_settings', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chimesdkvoice_global_settings: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    chimesdkvoice_sip_media_application(name, block): {
      local p = path(['aws_chimesdkvoice_sip_media_application', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chimesdkvoice_sip_media_application: {
              [name]: std.prune({
                aws_region: build.template(block.aws_region),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_region: p.child('aws_region').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    chimesdkvoice_sip_rule(name, block): {
      local p = path(['aws_chimesdkvoice_sip_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chimesdkvoice_sip_rule: {
              [name]: std.prune({
                disabled: build.template(std.get(block, 'disabled', null, true)),
                name: build.template(block.name),
                trigger_type: build.template(block.trigger_type),
                trigger_value: build.template(block.trigger_value),
              }),
            },
          },
        },
      },
      disabled: p.child('disabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      trigger_type: p.child('trigger_type').out,
      trigger_value: p.child('trigger_value').out,
    },
    chimesdkvoice_voice_profile_domain(name, block): {
      local p = path(['aws_chimesdkvoice_voice_profile_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_chimesdkvoice_voice_profile_domain: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    cleanrooms_collaboration(name, block): {
      local p = path(['aws_cleanrooms_collaboration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cleanrooms_collaboration: {
              [name]: std.prune({
                creator_display_name: build.template(block.creator_display_name),
                creator_member_abilities: build.template(block.creator_member_abilities),
                description: build.template(block.description),
                name: build.template(block.name),
                query_log_status: build.template(block.query_log_status),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      create_time: p.child('create_time').out,
      creator_display_name: p.child('creator_display_name').out,
      creator_member_abilities: p.child('creator_member_abilities').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      query_log_status: p.child('query_log_status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      update_time: p.child('update_time').out,
    },
    cleanrooms_configured_table(name, block): {
      local p = path(['aws_cleanrooms_configured_table', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cleanrooms_configured_table: {
              [name]: std.prune({
                allowed_columns: build.template(block.allowed_columns),
                analysis_method: build.template(block.analysis_method),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allowed_columns: p.child('allowed_columns').out,
      analysis_method: p.child('analysis_method').out,
      arn: p.child('arn').out,
      create_time: p.child('create_time').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      update_time: p.child('update_time').out,
    },
    cloud9_environment_ec2(name, block): {
      local p = path(['aws_cloud9_environment_ec2', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloud9_environment_ec2: {
              [name]: std.prune({
                automatic_stop_time_minutes: build.template(std.get(block, 'automatic_stop_time_minutes', null, true)),
                connection_type: build.template(std.get(block, 'connection_type', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                image_id: build.template(block.image_id),
                instance_type: build.template(block.instance_type),
                name: build.template(block.name),
                subnet_id: build.template(std.get(block, 'subnet_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      automatic_stop_time_minutes: p.child('automatic_stop_time_minutes').out,
      connection_type: p.child('connection_type').out,
      description: p.child('description').out,
      id: p.child('id').out,
      image_id: p.child('image_id').out,
      instance_type: p.child('instance_type').out,
      name: p.child('name').out,
      owner_arn: p.child('owner_arn').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    cloud9_environment_membership(name, block): {
      local p = path(['aws_cloud9_environment_membership', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloud9_environment_membership: {
              [name]: std.prune({
                environment_id: build.template(block.environment_id),
                permissions: build.template(block.permissions),
                user_arn: build.template(block.user_arn),
              }),
            },
          },
        },
      },
      environment_id: p.child('environment_id').out,
      id: p.child('id').out,
      permissions: p.child('permissions').out,
      user_arn: p.child('user_arn').out,
      user_id: p.child('user_id').out,
    },
    cloudcontrolapi_resource(name, block): {
      local p = path(['aws_cloudcontrolapi_resource', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudcontrolapi_resource: {
              [name]: std.prune({
                desired_state: build.template(block.desired_state),
                role_arn: build.template(std.get(block, 'role_arn', null, true)),
                type_name: build.template(block.type_name),
                type_version_id: build.template(std.get(block, 'type_version_id', null, true)),
              }),
            },
          },
        },
      },
      desired_state: p.child('desired_state').out,
      id: p.child('id').out,
      properties: p.child('properties').out,
      role_arn: p.child('role_arn').out,
      schema: p.child('schema').out,
      type_name: p.child('type_name').out,
      type_version_id: p.child('type_version_id').out,
    },
    cloudformation_stack(name, block): {
      local p = path(['aws_cloudformation_stack', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudformation_stack: {
              [name]: std.prune({
                capabilities: build.template(std.get(block, 'capabilities', null, true)),
                disable_rollback: build.template(std.get(block, 'disable_rollback', null, true)),
                iam_role_arn: build.template(std.get(block, 'iam_role_arn', null, true)),
                name: build.template(block.name),
                notification_arns: build.template(std.get(block, 'notification_arns', null, true)),
                on_failure: build.template(std.get(block, 'on_failure', null, true)),
                policy_url: build.template(std.get(block, 'policy_url', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                template_url: build.template(std.get(block, 'template_url', null, true)),
                timeout_in_minutes: build.template(std.get(block, 'timeout_in_minutes', null, true)),
              }),
            },
          },
        },
      },
      capabilities: p.child('capabilities').out,
      disable_rollback: p.child('disable_rollback').out,
      iam_role_arn: p.child('iam_role_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      notification_arns: p.child('notification_arns').out,
      on_failure: p.child('on_failure').out,
      outputs: p.child('outputs').out,
      parameters: p.child('parameters').out,
      policy_body: p.child('policy_body').out,
      policy_url: p.child('policy_url').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      template_body: p.child('template_body').out,
      template_url: p.child('template_url').out,
      timeout_in_minutes: p.child('timeout_in_minutes').out,
    },
    cloudformation_stack_instances(name, block): {
      local p = path(['aws_cloudformation_stack_instances', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudformation_stack_instances: {
              [name]: std.prune({
                call_as: build.template(std.get(block, 'call_as', null, true)),
                parameter_overrides: build.template(std.get(block, 'parameter_overrides', null, true)),
                retain_stacks: build.template(std.get(block, 'retain_stacks', null, true)),
                stack_set_name: build.template(block.stack_set_name),
              }),
            },
          },
        },
      },
      accounts: p.child('accounts').out,
      call_as: p.child('call_as').out,
      id: p.child('id').out,
      parameter_overrides: p.child('parameter_overrides').out,
      regions: p.child('regions').out,
      retain_stacks: p.child('retain_stacks').out,
      stack_instance_summaries: p.child('stack_instance_summaries').out,
      stack_set_id: p.child('stack_set_id').out,
      stack_set_name: p.child('stack_set_name').out,
    },
    cloudformation_stack_set(name, block): {
      local p = path(['aws_cloudformation_stack_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudformation_stack_set: {
              [name]: std.prune({
                administration_role_arn: build.template(std.get(block, 'administration_role_arn', null, true)),
                call_as: build.template(std.get(block, 'call_as', null, true)),
                capabilities: build.template(std.get(block, 'capabilities', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                permission_model: build.template(std.get(block, 'permission_model', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                template_url: build.template(std.get(block, 'template_url', null, true)),
              }),
            },
          },
        },
      },
      administration_role_arn: p.child('administration_role_arn').out,
      arn: p.child('arn').out,
      call_as: p.child('call_as').out,
      capabilities: p.child('capabilities').out,
      description: p.child('description').out,
      execution_role_name: p.child('execution_role_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      permission_model: p.child('permission_model').out,
      stack_set_id: p.child('stack_set_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      template_body: p.child('template_body').out,
      template_url: p.child('template_url').out,
    },
    cloudformation_stack_set_instance(name, block): {
      local p = path(['aws_cloudformation_stack_set_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudformation_stack_set_instance: {
              [name]: std.prune({
                call_as: build.template(std.get(block, 'call_as', null, true)),
                parameter_overrides: build.template(std.get(block, 'parameter_overrides', null, true)),
                retain_stack: build.template(std.get(block, 'retain_stack', null, true)),
                stack_set_name: build.template(block.stack_set_name),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      call_as: p.child('call_as').out,
      id: p.child('id').out,
      organizational_unit_id: p.child('organizational_unit_id').out,
      parameter_overrides: p.child('parameter_overrides').out,
      region: p.child('region').out,
      retain_stack: p.child('retain_stack').out,
      stack_id: p.child('stack_id').out,
      stack_instance_summaries: p.child('stack_instance_summaries').out,
      stack_set_name: p.child('stack_set_name').out,
    },
    cloudformation_type(name, block): {
      local p = path(['aws_cloudformation_type', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudformation_type: {
              [name]: std.prune({
                execution_role_arn: build.template(std.get(block, 'execution_role_arn', null, true)),
                schema_handler_package: build.template(block.schema_handler_package),
                type_name: build.template(block.type_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_version_id: p.child('default_version_id').out,
      deprecated_status: p.child('deprecated_status').out,
      description: p.child('description').out,
      documentation_url: p.child('documentation_url').out,
      execution_role_arn: p.child('execution_role_arn').out,
      id: p.child('id').out,
      is_default_version: p.child('is_default_version').out,
      provisioning_type: p.child('provisioning_type').out,
      schema: p.child('schema').out,
      schema_handler_package: p.child('schema_handler_package').out,
      source_url: p.child('source_url').out,
      type: p.child('type').out,
      type_arn: p.child('type_arn').out,
      type_name: p.child('type_name').out,
      version_id: p.child('version_id').out,
      visibility: p.child('visibility').out,
    },
    cloudfront_cache_policy(name, block): {
      local p = path(['aws_cloudfront_cache_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_cache_policy: {
              [name]: std.prune({
                comment: build.template(std.get(block, 'comment', null, true)),
                default_ttl: build.template(std.get(block, 'default_ttl', null, true)),
                max_ttl: build.template(std.get(block, 'max_ttl', null, true)),
                min_ttl: build.template(std.get(block, 'min_ttl', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      comment: p.child('comment').out,
      default_ttl: p.child('default_ttl').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      max_ttl: p.child('max_ttl').out,
      min_ttl: p.child('min_ttl').out,
      name: p.child('name').out,
    },
    cloudfront_continuous_deployment_policy(name, block): {
      local p = path(['aws_cloudfront_continuous_deployment_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_continuous_deployment_policy: {
              [name]: std.prune({
                enabled: build.template(block.enabled),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      last_modified_time: p.child('last_modified_time').out,
    },
    cloudfront_distribution(name, block): {
      local p = path(['aws_cloudfront_distribution', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_distribution: {
              [name]: std.prune({
                aliases: build.template(std.get(block, 'aliases', null, true)),
                comment: build.template(std.get(block, 'comment', null, true)),
                default_root_object: build.template(std.get(block, 'default_root_object', null, true)),
                enabled: build.template(block.enabled),
                http_version: build.template(std.get(block, 'http_version', null, true)),
                is_ipv6_enabled: build.template(std.get(block, 'is_ipv6_enabled', null, true)),
                price_class: build.template(std.get(block, 'price_class', null, true)),
                retain_on_delete: build.template(std.get(block, 'retain_on_delete', null, true)),
                staging: build.template(std.get(block, 'staging', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                wait_for_deployment: build.template(std.get(block, 'wait_for_deployment', null, true)),
                web_acl_id: build.template(std.get(block, 'web_acl_id', null, true)),
              }),
            },
          },
        },
      },
      aliases: p.child('aliases').out,
      arn: p.child('arn').out,
      caller_reference: p.child('caller_reference').out,
      comment: p.child('comment').out,
      continuous_deployment_policy_id: p.child('continuous_deployment_policy_id').out,
      default_root_object: p.child('default_root_object').out,
      domain_name: p.child('domain_name').out,
      enabled: p.child('enabled').out,
      etag: p.child('etag').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      http_version: p.child('http_version').out,
      id: p.child('id').out,
      in_progress_validation_batches: p.child('in_progress_validation_batches').out,
      is_ipv6_enabled: p.child('is_ipv6_enabled').out,
      last_modified_time: p.child('last_modified_time').out,
      price_class: p.child('price_class').out,
      retain_on_delete: p.child('retain_on_delete').out,
      staging: p.child('staging').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      trusted_key_groups: p.child('trusted_key_groups').out,
      trusted_signers: p.child('trusted_signers').out,
      wait_for_deployment: p.child('wait_for_deployment').out,
      web_acl_id: p.child('web_acl_id').out,
    },
    cloudfront_field_level_encryption_config(name, block): {
      local p = path(['aws_cloudfront_field_level_encryption_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_field_level_encryption_config: {
              [name]: std.prune({
                comment: build.template(std.get(block, 'comment', null, true)),
              }),
            },
          },
        },
      },
      caller_reference: p.child('caller_reference').out,
      comment: p.child('comment').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
    },
    cloudfront_field_level_encryption_profile(name, block): {
      local p = path(['aws_cloudfront_field_level_encryption_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_field_level_encryption_profile: {
              [name]: std.prune({
                comment: build.template(std.get(block, 'comment', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      caller_reference: p.child('caller_reference').out,
      comment: p.child('comment').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    cloudfront_function(name, block): {
      local p = path(['aws_cloudfront_function', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_function: {
              [name]: std.prune({
                code: build.template(block.code),
                comment: build.template(std.get(block, 'comment', null, true)),
                key_value_store_associations: build.template(std.get(block, 'key_value_store_associations', null, true)),
                name: build.template(block.name),
                publish: build.template(std.get(block, 'publish', null, true)),
                runtime: build.template(block.runtime),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      code: p.child('code').out,
      comment: p.child('comment').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      key_value_store_associations: p.child('key_value_store_associations').out,
      live_stage_etag: p.child('live_stage_etag').out,
      name: p.child('name').out,
      publish: p.child('publish').out,
      runtime: p.child('runtime').out,
      status: p.child('status').out,
    },
    cloudfront_key_group(name, block): {
      local p = path(['aws_cloudfront_key_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_key_group: {
              [name]: std.prune({
                comment: build.template(std.get(block, 'comment', null, true)),
                items: build.template(block.items),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      comment: p.child('comment').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      items: p.child('items').out,
      name: p.child('name').out,
    },
    cloudfront_key_value_store(name, block): {
      local p = path(['aws_cloudfront_key_value_store', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_key_value_store: {
              [name]: std.prune({
                comment: build.template(std.get(block, 'comment', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      comment: p.child('comment').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      last_modified_time: p.child('last_modified_time').out,
      name: p.child('name').out,
    },
    cloudfront_monitoring_subscription(name, block): {
      local p = path(['aws_cloudfront_monitoring_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_monitoring_subscription: {
              [name]: std.prune({
                distribution_id: build.template(block.distribution_id),
              }),
            },
          },
        },
      },
      distribution_id: p.child('distribution_id').out,
      id: p.child('id').out,
    },
    cloudfront_origin_access_control(name, block): {
      local p = path(['aws_cloudfront_origin_access_control', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_origin_access_control: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                origin_access_control_origin_type: build.template(block.origin_access_control_origin_type),
                signing_behavior: build.template(block.signing_behavior),
                signing_protocol: build.template(block.signing_protocol),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      name: p.child('name').out,
      origin_access_control_origin_type: p.child('origin_access_control_origin_type').out,
      signing_behavior: p.child('signing_behavior').out,
      signing_protocol: p.child('signing_protocol').out,
    },
    cloudfront_origin_access_identity(name, block): {
      local p = path(['aws_cloudfront_origin_access_identity', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_origin_access_identity: {
              [name]: std.prune({
                comment: build.template(std.get(block, 'comment', null, true)),
              }),
            },
          },
        },
      },
      caller_reference: p.child('caller_reference').out,
      cloudfront_access_identity_path: p.child('cloudfront_access_identity_path').out,
      comment: p.child('comment').out,
      etag: p.child('etag').out,
      iam_arn: p.child('iam_arn').out,
      id: p.child('id').out,
      s3_canonical_user_id: p.child('s3_canonical_user_id').out,
    },
    cloudfront_origin_request_policy(name, block): {
      local p = path(['aws_cloudfront_origin_request_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_origin_request_policy: {
              [name]: std.prune({
                comment: build.template(std.get(block, 'comment', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      comment: p.child('comment').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    cloudfront_public_key(name, block): {
      local p = path(['aws_cloudfront_public_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_public_key: {
              [name]: std.prune({
                comment: build.template(std.get(block, 'comment', null, true)),
                encoded_key: build.template(block.encoded_key),
              }),
            },
          },
        },
      },
      caller_reference: p.child('caller_reference').out,
      comment: p.child('comment').out,
      encoded_key: p.child('encoded_key').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
    },
    cloudfront_realtime_log_config(name, block): {
      local p = path(['aws_cloudfront_realtime_log_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_realtime_log_config: {
              [name]: std.prune({
                fields: build.template(block.fields),
                name: build.template(block.name),
                sampling_rate: build.template(block.sampling_rate),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      fields: p.child('fields').out,
      id: p.child('id').out,
      name: p.child('name').out,
      sampling_rate: p.child('sampling_rate').out,
    },
    cloudfront_response_headers_policy(name, block): {
      local p = path(['aws_cloudfront_response_headers_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfront_response_headers_policy: {
              [name]: std.prune({
                comment: build.template(std.get(block, 'comment', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      comment: p.child('comment').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    cloudfrontkeyvaluestore_key(name, block): {
      local p = path(['aws_cloudfrontkeyvaluestore_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudfrontkeyvaluestore_key: {
              [name]: std.prune({
                key: build.template(block.key),
                key_value_store_arn: build.template(block.key_value_store_arn),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key: p.child('key').out,
      key_value_store_arn: p.child('key_value_store_arn').out,
      total_size_in_bytes: p.child('total_size_in_bytes').out,
      value: p.child('value').out,
    },
    cloudhsm_v2_cluster(name, block): {
      local p = path(['aws_cloudhsm_v2_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudhsm_v2_cluster: {
              [name]: std.prune({
                hsm_type: build.template(block.hsm_type),
                source_backup_identifier: build.template(std.get(block, 'source_backup_identifier', null, true)),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      cluster_certificates: p.child('cluster_certificates').out,
      cluster_id: p.child('cluster_id').out,
      cluster_state: p.child('cluster_state').out,
      hsm_type: p.child('hsm_type').out,
      id: p.child('id').out,
      mode: p.child('mode').out,
      security_group_id: p.child('security_group_id').out,
      source_backup_identifier: p.child('source_backup_identifier').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    cloudhsm_v2_hsm(name, block): {
      local p = path(['aws_cloudhsm_v2_hsm', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudhsm_v2_hsm: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
              }),
            },
          },
        },
      },
      availability_zone: p.child('availability_zone').out,
      cluster_id: p.child('cluster_id').out,
      hsm_eni_id: p.child('hsm_eni_id').out,
      hsm_id: p.child('hsm_id').out,
      hsm_state: p.child('hsm_state').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      subnet_id: p.child('subnet_id').out,
    },
    cloudsearch_domain(name, block): {
      local p = path(['aws_cloudsearch_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudsearch_domain: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      document_service_endpoint: p.child('document_service_endpoint').out,
      domain_id: p.child('domain_id').out,
      id: p.child('id').out,
      multi_az: p.child('multi_az').out,
      name: p.child('name').out,
      search_service_endpoint: p.child('search_service_endpoint').out,
    },
    cloudsearch_domain_service_access_policy(name, block): {
      local p = path(['aws_cloudsearch_domain_service_access_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudsearch_domain_service_access_policy: {
              [name]: std.prune({
                access_policy: build.template(block.access_policy),
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      access_policy: p.child('access_policy').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
    },
    cloudtrail(name, block): {
      local p = path(['aws_cloudtrail', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudtrail: {
              [name]: std.prune({
                cloud_watch_logs_group_arn: build.template(std.get(block, 'cloud_watch_logs_group_arn', null, true)),
                cloud_watch_logs_role_arn: build.template(std.get(block, 'cloud_watch_logs_role_arn', null, true)),
                enable_log_file_validation: build.template(std.get(block, 'enable_log_file_validation', null, true)),
                enable_logging: build.template(std.get(block, 'enable_logging', null, true)),
                include_global_service_events: build.template(std.get(block, 'include_global_service_events', null, true)),
                is_multi_region_trail: build.template(std.get(block, 'is_multi_region_trail', null, true)),
                is_organization_trail: build.template(std.get(block, 'is_organization_trail', null, true)),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                name: build.template(block.name),
                s3_bucket_name: build.template(block.s3_bucket_name),
                s3_key_prefix: build.template(std.get(block, 's3_key_prefix', null, true)),
                sns_topic_name: build.template(std.get(block, 'sns_topic_name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cloud_watch_logs_group_arn: p.child('cloud_watch_logs_group_arn').out,
      cloud_watch_logs_role_arn: p.child('cloud_watch_logs_role_arn').out,
      enable_log_file_validation: p.child('enable_log_file_validation').out,
      enable_logging: p.child('enable_logging').out,
      home_region: p.child('home_region').out,
      id: p.child('id').out,
      include_global_service_events: p.child('include_global_service_events').out,
      is_multi_region_trail: p.child('is_multi_region_trail').out,
      is_organization_trail: p.child('is_organization_trail').out,
      kms_key_id: p.child('kms_key_id').out,
      name: p.child('name').out,
      s3_bucket_name: p.child('s3_bucket_name').out,
      s3_key_prefix: p.child('s3_key_prefix').out,
      sns_topic_name: p.child('sns_topic_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    cloudtrail_event_data_store(name, block): {
      local p = path(['aws_cloudtrail_event_data_store', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudtrail_event_data_store: {
              [name]: std.prune({
                billing_mode: build.template(std.get(block, 'billing_mode', null, true)),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                multi_region_enabled: build.template(std.get(block, 'multi_region_enabled', null, true)),
                name: build.template(block.name),
                organization_enabled: build.template(std.get(block, 'organization_enabled', null, true)),
                retention_period: build.template(std.get(block, 'retention_period', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                termination_protection_enabled: build.template(std.get(block, 'termination_protection_enabled', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      billing_mode: p.child('billing_mode').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      multi_region_enabled: p.child('multi_region_enabled').out,
      name: p.child('name').out,
      organization_enabled: p.child('organization_enabled').out,
      retention_period: p.child('retention_period').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      termination_protection_enabled: p.child('termination_protection_enabled').out,
    },
    cloudtrail_organization_delegated_admin_account(name, block): {
      local p = path(['aws_cloudtrail_organization_delegated_admin_account', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudtrail_organization_delegated_admin_account: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      arn: p.child('arn').out,
      email: p.child('email').out,
      id: p.child('id').out,
      name: p.child('name').out,
      service_principal: p.child('service_principal').out,
    },
    cloudwatch_composite_alarm(name, block): {
      local p = path(['aws_cloudwatch_composite_alarm', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_composite_alarm: {
              [name]: std.prune({
                actions_enabled: build.template(std.get(block, 'actions_enabled', null, true)),
                alarm_actions: build.template(std.get(block, 'alarm_actions', null, true)),
                alarm_description: build.template(std.get(block, 'alarm_description', null, true)),
                alarm_name: build.template(block.alarm_name),
                alarm_rule: build.template(block.alarm_rule),
                insufficient_data_actions: build.template(std.get(block, 'insufficient_data_actions', null, true)),
                ok_actions: build.template(std.get(block, 'ok_actions', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      actions_enabled: p.child('actions_enabled').out,
      alarm_actions: p.child('alarm_actions').out,
      alarm_description: p.child('alarm_description').out,
      alarm_name: p.child('alarm_name').out,
      alarm_rule: p.child('alarm_rule').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      insufficient_data_actions: p.child('insufficient_data_actions').out,
      ok_actions: p.child('ok_actions').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    cloudwatch_dashboard(name, block): {
      local p = path(['aws_cloudwatch_dashboard', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_dashboard: {
              [name]: std.prune({
                dashboard_body: build.template(block.dashboard_body),
                dashboard_name: build.template(block.dashboard_name),
              }),
            },
          },
        },
      },
      dashboard_arn: p.child('dashboard_arn').out,
      dashboard_body: p.child('dashboard_body').out,
      dashboard_name: p.child('dashboard_name').out,
      id: p.child('id').out,
    },
    cloudwatch_event_api_destination(name, block): {
      local p = path(['aws_cloudwatch_event_api_destination', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_event_api_destination: {
              [name]: std.prune({
                connection_arn: build.template(block.connection_arn),
                description: build.template(std.get(block, 'description', null, true)),
                http_method: build.template(block.http_method),
                invocation_endpoint: build.template(block.invocation_endpoint),
                invocation_rate_limit_per_second: build.template(std.get(block, 'invocation_rate_limit_per_second', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      connection_arn: p.child('connection_arn').out,
      description: p.child('description').out,
      http_method: p.child('http_method').out,
      id: p.child('id').out,
      invocation_endpoint: p.child('invocation_endpoint').out,
      invocation_rate_limit_per_second: p.child('invocation_rate_limit_per_second').out,
      name: p.child('name').out,
    },
    cloudwatch_event_archive(name, block): {
      local p = path(['aws_cloudwatch_event_archive', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_event_archive: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                event_pattern: build.template(std.get(block, 'event_pattern', null, true)),
                event_source_arn: build.template(block.event_source_arn),
                name: build.template(block.name),
                retention_days: build.template(std.get(block, 'retention_days', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      event_pattern: p.child('event_pattern').out,
      event_source_arn: p.child('event_source_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      retention_days: p.child('retention_days').out,
    },
    cloudwatch_event_bus(name, block): {
      local p = path(['aws_cloudwatch_event_bus', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_event_bus: {
              [name]: std.prune({
                event_source_name: build.template(std.get(block, 'event_source_name', null, true)),
                kms_key_identifier: build.template(std.get(block, 'kms_key_identifier', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      event_source_name: p.child('event_source_name').out,
      id: p.child('id').out,
      kms_key_identifier: p.child('kms_key_identifier').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    cloudwatch_event_bus_policy(name, block): {
      local p = path(['aws_cloudwatch_event_bus_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_event_bus_policy: {
              [name]: std.prune({
                event_bus_name: build.template(std.get(block, 'event_bus_name', null, true)),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      event_bus_name: p.child('event_bus_name').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
    },
    cloudwatch_event_connection(name, block): {
      local p = path(['aws_cloudwatch_event_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_event_connection: {
              [name]: std.prune({
                authorization_type: build.template(block.authorization_type),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      authorization_type: p.child('authorization_type').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      secret_arn: p.child('secret_arn').out,
    },
    cloudwatch_event_endpoint(name, block): {
      local p = path(['aws_cloudwatch_event_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_event_endpoint: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                role_arn: build.template(std.get(block, 'role_arn', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      endpoint_url: p.child('endpoint_url').out,
      id: p.child('id').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
    },
    cloudwatch_event_permission(name, block): {
      local p = path(['aws_cloudwatch_event_permission', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_event_permission: {
              [name]: std.prune({
                action: build.template(std.get(block, 'action', null, true)),
                event_bus_name: build.template(std.get(block, 'event_bus_name', null, true)),
                principal: build.template(block.principal),
                statement_id: build.template(block.statement_id),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      event_bus_name: p.child('event_bus_name').out,
      id: p.child('id').out,
      principal: p.child('principal').out,
      statement_id: p.child('statement_id').out,
    },
    cloudwatch_event_rule(name, block): {
      local p = path(['aws_cloudwatch_event_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_event_rule: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                event_bus_name: build.template(std.get(block, 'event_bus_name', null, true)),
                event_pattern: build.template(std.get(block, 'event_pattern', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                is_enabled: build.template(std.get(block, 'is_enabled', null, true)),
                role_arn: build.template(std.get(block, 'role_arn', null, true)),
                schedule_expression: build.template(std.get(block, 'schedule_expression', null, true)),
                state: build.template(std.get(block, 'state', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      event_bus_name: p.child('event_bus_name').out,
      event_pattern: p.child('event_pattern').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      is_enabled: p.child('is_enabled').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      role_arn: p.child('role_arn').out,
      schedule_expression: p.child('schedule_expression').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    cloudwatch_event_target(name, block): {
      local p = path(['aws_cloudwatch_event_target', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_event_target: {
              [name]: std.prune({
                arn: build.template(block.arn),
                event_bus_name: build.template(std.get(block, 'event_bus_name', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                input: build.template(std.get(block, 'input', null, true)),
                input_path: build.template(std.get(block, 'input_path', null, true)),
                role_arn: build.template(std.get(block, 'role_arn', null, true)),
                rule: build.template(block.rule),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      event_bus_name: p.child('event_bus_name').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      input: p.child('input').out,
      input_path: p.child('input_path').out,
      role_arn: p.child('role_arn').out,
      rule: p.child('rule').out,
      target_id: p.child('target_id').out,
    },
    cloudwatch_log_account_policy(name, block): {
      local p = path(['aws_cloudwatch_log_account_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_log_account_policy: {
              [name]: std.prune({
                policy_document: build.template(block.policy_document),
                policy_name: build.template(block.policy_name),
                policy_type: build.template(block.policy_type),
                scope: build.template(std.get(block, 'scope', null, true)),
                selection_criteria: build.template(std.get(block, 'selection_criteria', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy_document: p.child('policy_document').out,
      policy_name: p.child('policy_name').out,
      policy_type: p.child('policy_type').out,
      scope: p.child('scope').out,
      selection_criteria: p.child('selection_criteria').out,
    },
    cloudwatch_log_data_protection_policy(name, block): {
      local p = path(['aws_cloudwatch_log_data_protection_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_log_data_protection_policy: {
              [name]: std.prune({
                log_group_name: build.template(block.log_group_name),
                policy_document: build.template(block.policy_document),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_group_name: p.child('log_group_name').out,
      policy_document: p.child('policy_document').out,
    },
    cloudwatch_log_destination(name, block): {
      local p = path(['aws_cloudwatch_log_destination', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_log_destination: {
              [name]: std.prune({
                name: build.template(block.name),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_arn: build.template(block.target_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_arn: p.child('target_arn').out,
    },
    cloudwatch_log_destination_policy(name, block): {
      local p = path(['aws_cloudwatch_log_destination_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_log_destination_policy: {
              [name]: std.prune({
                access_policy: build.template(block.access_policy),
                destination_name: build.template(block.destination_name),
                force_update: build.template(std.get(block, 'force_update', null, true)),
              }),
            },
          },
        },
      },
      access_policy: p.child('access_policy').out,
      destination_name: p.child('destination_name').out,
      force_update: p.child('force_update').out,
      id: p.child('id').out,
    },
    cloudwatch_log_group(name, block): {
      local p = path(['aws_cloudwatch_log_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_log_group: {
              [name]: std.prune({
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                retention_in_days: build.template(std.get(block, 'retention_in_days', null, true)),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      log_group_class: p.child('log_group_class').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      retention_in_days: p.child('retention_in_days').out,
      skip_destroy: p.child('skip_destroy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    cloudwatch_log_metric_filter(name, block): {
      local p = path(['aws_cloudwatch_log_metric_filter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_log_metric_filter: {
              [name]: std.prune({
                log_group_name: build.template(block.log_group_name),
                name: build.template(block.name),
                pattern: build.template(block.pattern),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_group_name: p.child('log_group_name').out,
      name: p.child('name').out,
      pattern: p.child('pattern').out,
    },
    cloudwatch_log_resource_policy(name, block): {
      local p = path(['aws_cloudwatch_log_resource_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_log_resource_policy: {
              [name]: std.prune({
                policy_document: build.template(block.policy_document),
                policy_name: build.template(block.policy_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy_document: p.child('policy_document').out,
      policy_name: p.child('policy_name').out,
    },
    cloudwatch_log_stream(name, block): {
      local p = path(['aws_cloudwatch_log_stream', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_log_stream: {
              [name]: std.prune({
                log_group_name: build.template(block.log_group_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      log_group_name: p.child('log_group_name').out,
      name: p.child('name').out,
    },
    cloudwatch_log_subscription_filter(name, block): {
      local p = path(['aws_cloudwatch_log_subscription_filter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_log_subscription_filter: {
              [name]: std.prune({
                destination_arn: build.template(block.destination_arn),
                distribution: build.template(std.get(block, 'distribution', null, true)),
                filter_pattern: build.template(block.filter_pattern),
                log_group_name: build.template(block.log_group_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      destination_arn: p.child('destination_arn').out,
      distribution: p.child('distribution').out,
      filter_pattern: p.child('filter_pattern').out,
      id: p.child('id').out,
      log_group_name: p.child('log_group_name').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
    },
    cloudwatch_metric_alarm(name, block): {
      local p = path(['aws_cloudwatch_metric_alarm', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_metric_alarm: {
              [name]: std.prune({
                actions_enabled: build.template(std.get(block, 'actions_enabled', null, true)),
                alarm_actions: build.template(std.get(block, 'alarm_actions', null, true)),
                alarm_description: build.template(std.get(block, 'alarm_description', null, true)),
                alarm_name: build.template(block.alarm_name),
                comparison_operator: build.template(block.comparison_operator),
                datapoints_to_alarm: build.template(std.get(block, 'datapoints_to_alarm', null, true)),
                dimensions: build.template(std.get(block, 'dimensions', null, true)),
                evaluation_periods: build.template(block.evaluation_periods),
                extended_statistic: build.template(std.get(block, 'extended_statistic', null, true)),
                insufficient_data_actions: build.template(std.get(block, 'insufficient_data_actions', null, true)),
                metric_name: build.template(std.get(block, 'metric_name', null, true)),
                namespace: build.template(std.get(block, 'namespace', null, true)),
                ok_actions: build.template(std.get(block, 'ok_actions', null, true)),
                period: build.template(std.get(block, 'period', null, true)),
                statistic: build.template(std.get(block, 'statistic', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                threshold: build.template(std.get(block, 'threshold', null, true)),
                threshold_metric_id: build.template(std.get(block, 'threshold_metric_id', null, true)),
                treat_missing_data: build.template(std.get(block, 'treat_missing_data', null, true)),
                unit: build.template(std.get(block, 'unit', null, true)),
              }),
            },
          },
        },
      },
      actions_enabled: p.child('actions_enabled').out,
      alarm_actions: p.child('alarm_actions').out,
      alarm_description: p.child('alarm_description').out,
      alarm_name: p.child('alarm_name').out,
      arn: p.child('arn').out,
      comparison_operator: p.child('comparison_operator').out,
      datapoints_to_alarm: p.child('datapoints_to_alarm').out,
      dimensions: p.child('dimensions').out,
      evaluate_low_sample_count_percentiles: p.child('evaluate_low_sample_count_percentiles').out,
      evaluation_periods: p.child('evaluation_periods').out,
      extended_statistic: p.child('extended_statistic').out,
      id: p.child('id').out,
      insufficient_data_actions: p.child('insufficient_data_actions').out,
      metric_name: p.child('metric_name').out,
      namespace: p.child('namespace').out,
      ok_actions: p.child('ok_actions').out,
      period: p.child('period').out,
      statistic: p.child('statistic').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      threshold: p.child('threshold').out,
      threshold_metric_id: p.child('threshold_metric_id').out,
      treat_missing_data: p.child('treat_missing_data').out,
      unit: p.child('unit').out,
    },
    cloudwatch_metric_stream(name, block): {
      local p = path(['aws_cloudwatch_metric_stream', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_metric_stream: {
              [name]: std.prune({
                firehose_arn: build.template(block.firehose_arn),
                include_linked_accounts_metrics: build.template(std.get(block, 'include_linked_accounts_metrics', null, true)),
                output_format: build.template(block.output_format),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_date: p.child('creation_date').out,
      firehose_arn: p.child('firehose_arn').out,
      id: p.child('id').out,
      include_linked_accounts_metrics: p.child('include_linked_accounts_metrics').out,
      last_update_date: p.child('last_update_date').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      output_format: p.child('output_format').out,
      role_arn: p.child('role_arn').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    cloudwatch_query_definition(name, block): {
      local p = path(['aws_cloudwatch_query_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cloudwatch_query_definition: {
              [name]: std.prune({
                log_group_names: build.template(std.get(block, 'log_group_names', null, true)),
                name: build.template(block.name),
                query_string: build.template(block.query_string),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_group_names: p.child('log_group_names').out,
      name: p.child('name').out,
      query_definition_id: p.child('query_definition_id').out,
      query_string: p.child('query_string').out,
    },
    codeartifact_domain(name, block): {
      local p = path(['aws_codeartifact_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codeartifact_domain: {
              [name]: std.prune({
                domain: build.template(block.domain),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      asset_size_bytes: p.child('asset_size_bytes').out,
      created_time: p.child('created_time').out,
      domain: p.child('domain').out,
      encryption_key: p.child('encryption_key').out,
      id: p.child('id').out,
      owner: p.child('owner').out,
      repository_count: p.child('repository_count').out,
      s3_bucket_arn: p.child('s3_bucket_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    codeartifact_domain_permissions_policy(name, block): {
      local p = path(['aws_codeartifact_domain_permissions_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codeartifact_domain_permissions_policy: {
              [name]: std.prune({
                domain: build.template(block.domain),
                policy_document: build.template(block.policy_document),
              }),
            },
          },
        },
      },
      domain: p.child('domain').out,
      domain_owner: p.child('domain_owner').out,
      id: p.child('id').out,
      policy_document: p.child('policy_document').out,
      policy_revision: p.child('policy_revision').out,
      resource_arn: p.child('resource_arn').out,
    },
    codeartifact_repository(name, block): {
      local p = path(['aws_codeartifact_repository', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codeartifact_repository: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                domain: build.template(block.domain),
                repository: build.template(block.repository),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      administrator_account: p.child('administrator_account').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      domain: p.child('domain').out,
      domain_owner: p.child('domain_owner').out,
      id: p.child('id').out,
      repository: p.child('repository').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    codeartifact_repository_permissions_policy(name, block): {
      local p = path(['aws_codeartifact_repository_permissions_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codeartifact_repository_permissions_policy: {
              [name]: std.prune({
                domain: build.template(block.domain),
                policy_document: build.template(block.policy_document),
                repository: build.template(block.repository),
              }),
            },
          },
        },
      },
      domain: p.child('domain').out,
      domain_owner: p.child('domain_owner').out,
      id: p.child('id').out,
      policy_document: p.child('policy_document').out,
      policy_revision: p.child('policy_revision').out,
      repository: p.child('repository').out,
      resource_arn: p.child('resource_arn').out,
    },
    codebuild_fleet(name, block): {
      local p = path(['aws_codebuild_fleet', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codebuild_fleet: {
              [name]: std.prune({
                base_capacity: build.template(block.base_capacity),
                compute_type: build.template(block.compute_type),
                environment_type: build.template(block.environment_type),
                fleet_service_role: build.template(std.get(block, 'fleet_service_role', null, true)),
                image_id: build.template(std.get(block, 'image_id', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      base_capacity: p.child('base_capacity').out,
      compute_type: p.child('compute_type').out,
      created: p.child('created').out,
      environment_type: p.child('environment_type').out,
      fleet_service_role: p.child('fleet_service_role').out,
      id: p.child('id').out,
      image_id: p.child('image_id').out,
      last_modified: p.child('last_modified').out,
      name: p.child('name').out,
      overflow_behavior: p.child('overflow_behavior').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    codebuild_project(name, block): {
      local p = path(['aws_codebuild_project', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codebuild_project: {
              [name]: std.prune({
                badge_enabled: build.template(std.get(block, 'badge_enabled', null, true)),
                build_timeout: build.template(std.get(block, 'build_timeout', null, true)),
                concurrent_build_limit: build.template(std.get(block, 'concurrent_build_limit', null, true)),
                name: build.template(block.name),
                project_visibility: build.template(std.get(block, 'project_visibility', null, true)),
                queued_timeout: build.template(std.get(block, 'queued_timeout', null, true)),
                resource_access_role: build.template(std.get(block, 'resource_access_role', null, true)),
                service_role: build.template(block.service_role),
                source_version: build.template(std.get(block, 'source_version', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      badge_enabled: p.child('badge_enabled').out,
      badge_url: p.child('badge_url').out,
      build_timeout: p.child('build_timeout').out,
      concurrent_build_limit: p.child('concurrent_build_limit').out,
      description: p.child('description').out,
      encryption_key: p.child('encryption_key').out,
      id: p.child('id').out,
      name: p.child('name').out,
      project_visibility: p.child('project_visibility').out,
      public_project_alias: p.child('public_project_alias').out,
      queued_timeout: p.child('queued_timeout').out,
      resource_access_role: p.child('resource_access_role').out,
      service_role: p.child('service_role').out,
      source_version: p.child('source_version').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    codebuild_report_group(name, block): {
      local p = path(['aws_codebuild_report_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codebuild_report_group: {
              [name]: std.prune({
                delete_reports: build.template(std.get(block, 'delete_reports', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created: p.child('created').out,
      delete_reports: p.child('delete_reports').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    codebuild_resource_policy(name, block): {
      local p = path(['aws_codebuild_resource_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codebuild_resource_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      resource_arn: p.child('resource_arn').out,
    },
    codebuild_source_credential(name, block): {
      local p = path(['aws_codebuild_source_credential', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codebuild_source_credential: {
              [name]: std.prune({
                auth_type: build.template(block.auth_type),
                server_type: build.template(block.server_type),
                token: build.template(block.token),
                user_name: build.template(std.get(block, 'user_name', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auth_type: p.child('auth_type').out,
      id: p.child('id').out,
      server_type: p.child('server_type').out,
      token: p.child('token').out,
      user_name: p.child('user_name').out,
    },
    codebuild_webhook(name, block): {
      local p = path(['aws_codebuild_webhook', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codebuild_webhook: {
              [name]: std.prune({
                branch_filter: build.template(std.get(block, 'branch_filter', null, true)),
                build_type: build.template(std.get(block, 'build_type', null, true)),
                project_name: build.template(block.project_name),
              }),
            },
          },
        },
      },
      branch_filter: p.child('branch_filter').out,
      build_type: p.child('build_type').out,
      id: p.child('id').out,
      payload_url: p.child('payload_url').out,
      project_name: p.child('project_name').out,
      secret: p.child('secret').out,
      url: p.child('url').out,
    },
    codecatalyst_dev_environment(name, block): {
      local p = path(['aws_codecatalyst_dev_environment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codecatalyst_dev_environment: {
              [name]: std.prune({
                alias: build.template(std.get(block, 'alias', null, true)),
                inactivity_timeout_minutes: build.template(std.get(block, 'inactivity_timeout_minutes', null, true)),
                instance_type: build.template(block.instance_type),
                project_name: build.template(block.project_name),
                space_name: build.template(block.space_name),
              }),
            },
          },
        },
      },
      alias: p.child('alias').out,
      id: p.child('id').out,
      inactivity_timeout_minutes: p.child('inactivity_timeout_minutes').out,
      instance_type: p.child('instance_type').out,
      project_name: p.child('project_name').out,
      space_name: p.child('space_name').out,
    },
    codecatalyst_project(name, block): {
      local p = path(['aws_codecatalyst_project', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codecatalyst_project: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                space_name: build.template(block.space_name),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      space_name: p.child('space_name').out,
    },
    codecatalyst_source_repository(name, block): {
      local p = path(['aws_codecatalyst_source_repository', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codecatalyst_source_repository: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                project_name: build.template(block.project_name),
                space_name: build.template(block.space_name),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      project_name: p.child('project_name').out,
      space_name: p.child('space_name').out,
    },
    codecommit_approval_rule_template(name, block): {
      local p = path(['aws_codecommit_approval_rule_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codecommit_approval_rule_template: {
              [name]: std.prune({
                content: build.template(block.content),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      approval_rule_template_id: p.child('approval_rule_template_id').out,
      content: p.child('content').out,
      creation_date: p.child('creation_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_modified_date: p.child('last_modified_date').out,
      last_modified_user: p.child('last_modified_user').out,
      name: p.child('name').out,
      rule_content_sha256: p.child('rule_content_sha256').out,
    },
    codecommit_approval_rule_template_association(name, block): {
      local p = path(['aws_codecommit_approval_rule_template_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codecommit_approval_rule_template_association: {
              [name]: std.prune({
                approval_rule_template_name: build.template(block.approval_rule_template_name),
                repository_name: build.template(block.repository_name),
              }),
            },
          },
        },
      },
      approval_rule_template_name: p.child('approval_rule_template_name').out,
      id: p.child('id').out,
      repository_name: p.child('repository_name').out,
    },
    codecommit_repository(name, block): {
      local p = path(['aws_codecommit_repository', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codecommit_repository: {
              [name]: std.prune({
                default_branch: build.template(std.get(block, 'default_branch', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                repository_name: build.template(block.repository_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      clone_url_http: p.child('clone_url_http').out,
      clone_url_ssh: p.child('clone_url_ssh').out,
      default_branch: p.child('default_branch').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      repository_id: p.child('repository_id').out,
      repository_name: p.child('repository_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    codecommit_trigger(name, block): {
      local p = path(['aws_codecommit_trigger', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codecommit_trigger: {
              [name]: std.prune({
                repository_name: build.template(block.repository_name),
              }),
            },
          },
        },
      },
      configuration_id: p.child('configuration_id').out,
      id: p.child('id').out,
      repository_name: p.child('repository_name').out,
    },
    codedeploy_app(name, block): {
      local p = path(['aws_codedeploy_app', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codedeploy_app: {
              [name]: std.prune({
                compute_platform: build.template(std.get(block, 'compute_platform', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      arn: p.child('arn').out,
      compute_platform: p.child('compute_platform').out,
      github_account_name: p.child('github_account_name').out,
      id: p.child('id').out,
      linked_to_github: p.child('linked_to_github').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    codedeploy_deployment_config(name, block): {
      local p = path(['aws_codedeploy_deployment_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codedeploy_deployment_config: {
              [name]: std.prune({
                compute_platform: build.template(std.get(block, 'compute_platform', null, true)),
                deployment_config_name: build.template(block.deployment_config_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      compute_platform: p.child('compute_platform').out,
      deployment_config_id: p.child('deployment_config_id').out,
      deployment_config_name: p.child('deployment_config_name').out,
      id: p.child('id').out,
    },
    codedeploy_deployment_group(name, block): {
      local p = path(['aws_codedeploy_deployment_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codedeploy_deployment_group: {
              [name]: std.prune({
                app_name: build.template(block.app_name),
                autoscaling_groups: build.template(std.get(block, 'autoscaling_groups', null, true)),
                deployment_config_name: build.template(std.get(block, 'deployment_config_name', null, true)),
                deployment_group_name: build.template(block.deployment_group_name),
                outdated_instances_strategy: build.template(std.get(block, 'outdated_instances_strategy', null, true)),
                service_role_arn: build.template(block.service_role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                termination_hook_enabled: build.template(std.get(block, 'termination_hook_enabled', null, true)),
              }),
            },
          },
        },
      },
      app_name: p.child('app_name').out,
      arn: p.child('arn').out,
      autoscaling_groups: p.child('autoscaling_groups').out,
      compute_platform: p.child('compute_platform').out,
      deployment_config_name: p.child('deployment_config_name').out,
      deployment_group_id: p.child('deployment_group_id').out,
      deployment_group_name: p.child('deployment_group_name').out,
      id: p.child('id').out,
      outdated_instances_strategy: p.child('outdated_instances_strategy').out,
      service_role_arn: p.child('service_role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      termination_hook_enabled: p.child('termination_hook_enabled').out,
    },
    codeguruprofiler_profiling_group(name, block): {
      local p = path(['aws_codeguruprofiler_profiling_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codeguruprofiler_profiling_group: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      compute_platform: p.child('compute_platform').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    codegurureviewer_repository_association(name, block): {
      local p = path(['aws_codegurureviewer_repository_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codegurureviewer_repository_association: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      association_id: p.child('association_id').out,
      connection_arn: p.child('connection_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      provider_type: p.child('provider_type').out,
      s3_repository_details: p.child('s3_repository_details').out,
      state: p.child('state').out,
      state_reason: p.child('state_reason').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    codepipeline(name, block): {
      local p = path(['aws_codepipeline', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codepipeline: {
              [name]: std.prune({
                execution_mode: build.template(std.get(block, 'execution_mode', null, true)),
                name: build.template(block.name),
                pipeline_type: build.template(std.get(block, 'pipeline_type', null, true)),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      execution_mode: p.child('execution_mode').out,
      id: p.child('id').out,
      name: p.child('name').out,
      pipeline_type: p.child('pipeline_type').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    codepipeline_custom_action_type(name, block): {
      local p = path(['aws_codepipeline_custom_action_type', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codepipeline_custom_action_type: {
              [name]: std.prune({
                category: build.template(block.category),
                provider_name: build.template(block.provider_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      category: p.child('category').out,
      id: p.child('id').out,
      owner: p.child('owner').out,
      provider_name: p.child('provider_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    codepipeline_webhook(name, block): {
      local p = path(['aws_codepipeline_webhook', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codepipeline_webhook: {
              [name]: std.prune({
                authentication: build.template(block.authentication),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_action: build.template(block.target_action),
                target_pipeline: build.template(block.target_pipeline),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      authentication: p.child('authentication').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_action: p.child('target_action').out,
      target_pipeline: p.child('target_pipeline').out,
      url: p.child('url').out,
    },
    codestarconnections_connection(name, block): {
      local p = path(['aws_codestarconnections_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codestarconnections_connection: {
              [name]: std.prune({
                host_arn: build.template(std.get(block, 'host_arn', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      connection_status: p.child('connection_status').out,
      host_arn: p.child('host_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      provider_type: p.child('provider_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    codestarconnections_host(name, block): {
      local p = path(['aws_codestarconnections_host', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codestarconnections_host: {
              [name]: std.prune({
                name: build.template(block.name),
                provider_endpoint: build.template(block.provider_endpoint),
                provider_type: build.template(block.provider_type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      provider_endpoint: p.child('provider_endpoint').out,
      provider_type: p.child('provider_type').out,
      status: p.child('status').out,
    },
    codestarnotifications_notification_rule(name, block): {
      local p = path(['aws_codestarnotifications_notification_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_codestarnotifications_notification_rule: {
              [name]: std.prune({
                detail_type: build.template(block.detail_type),
                event_type_ids: build.template(block.event_type_ids),
                name: build.template(block.name),
                resource: build.template(block.resource),
                status: build.template(std.get(block, 'status', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      detail_type: p.child('detail_type').out,
      event_type_ids: p.child('event_type_ids').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource: p.child('resource').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    cognito_identity_pool(name, block): {
      local p = path(['aws_cognito_identity_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_identity_pool: {
              [name]: std.prune({
                allow_classic_flow: build.template(std.get(block, 'allow_classic_flow', null, true)),
                allow_unauthenticated_identities: build.template(std.get(block, 'allow_unauthenticated_identities', null, true)),
                developer_provider_name: build.template(std.get(block, 'developer_provider_name', null, true)),
                identity_pool_name: build.template(block.identity_pool_name),
                openid_connect_provider_arns: build.template(std.get(block, 'openid_connect_provider_arns', null, true)),
                saml_provider_arns: build.template(std.get(block, 'saml_provider_arns', null, true)),
                supported_login_providers: build.template(std.get(block, 'supported_login_providers', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allow_classic_flow: p.child('allow_classic_flow').out,
      allow_unauthenticated_identities: p.child('allow_unauthenticated_identities').out,
      arn: p.child('arn').out,
      developer_provider_name: p.child('developer_provider_name').out,
      id: p.child('id').out,
      identity_pool_name: p.child('identity_pool_name').out,
      openid_connect_provider_arns: p.child('openid_connect_provider_arns').out,
      saml_provider_arns: p.child('saml_provider_arns').out,
      supported_login_providers: p.child('supported_login_providers').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    cognito_identity_pool_provider_principal_tag(name, block): {
      local p = path(['aws_cognito_identity_pool_provider_principal_tag', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_identity_pool_provider_principal_tag: {
              [name]: std.prune({
                identity_pool_id: build.template(block.identity_pool_id),
                identity_provider_name: build.template(block.identity_provider_name),
                principal_tags: build.template(std.get(block, 'principal_tags', null, true)),
                use_defaults: build.template(std.get(block, 'use_defaults', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity_pool_id: p.child('identity_pool_id').out,
      identity_provider_name: p.child('identity_provider_name').out,
      principal_tags: p.child('principal_tags').out,
      use_defaults: p.child('use_defaults').out,
    },
    cognito_identity_pool_roles_attachment(name, block): {
      local p = path(['aws_cognito_identity_pool_roles_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_identity_pool_roles_attachment: {
              [name]: std.prune({
                identity_pool_id: build.template(block.identity_pool_id),
                roles: build.template(block.roles),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity_pool_id: p.child('identity_pool_id').out,
      roles: p.child('roles').out,
    },
    cognito_identity_provider(name, block): {
      local p = path(['aws_cognito_identity_provider', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_identity_provider: {
              [name]: std.prune({
                idp_identifiers: build.template(std.get(block, 'idp_identifiers', null, true)),
                provider_details: build.template(block.provider_details),
                provider_name: build.template(block.provider_name),
                provider_type: build.template(block.provider_type),
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      attribute_mapping: p.child('attribute_mapping').out,
      id: p.child('id').out,
      idp_identifiers: p.child('idp_identifiers').out,
      provider_details: p.child('provider_details').out,
      provider_name: p.child('provider_name').out,
      provider_type: p.child('provider_type').out,
      user_pool_id: p.child('user_pool_id').out,
    },
    cognito_managed_user_pool_client(name, block): {
      local p = path(['aws_cognito_managed_user_pool_client', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_managed_user_pool_client: {
              [name]: std.prune({
                name_pattern: build.template(std.get(block, 'name_pattern', null, true)),
                name_prefix: build.template(std.get(block, 'name_prefix', null, true)),
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      access_token_validity: p.child('access_token_validity').out,
      allowed_oauth_flows: p.child('allowed_oauth_flows').out,
      allowed_oauth_flows_user_pool_client: p.child('allowed_oauth_flows_user_pool_client').out,
      allowed_oauth_scopes: p.child('allowed_oauth_scopes').out,
      auth_session_validity: p.child('auth_session_validity').out,
      callback_urls: p.child('callback_urls').out,
      client_secret: p.child('client_secret').out,
      default_redirect_uri: p.child('default_redirect_uri').out,
      enable_propagate_additional_user_context_data: p.child('enable_propagate_additional_user_context_data').out,
      enable_token_revocation: p.child('enable_token_revocation').out,
      explicit_auth_flows: p.child('explicit_auth_flows').out,
      id: p.child('id').out,
      id_token_validity: p.child('id_token_validity').out,
      logout_urls: p.child('logout_urls').out,
      name: p.child('name').out,
      name_pattern: p.child('name_pattern').out,
      name_prefix: p.child('name_prefix').out,
      prevent_user_existence_errors: p.child('prevent_user_existence_errors').out,
      read_attributes: p.child('read_attributes').out,
      refresh_token_validity: p.child('refresh_token_validity').out,
      supported_identity_providers: p.child('supported_identity_providers').out,
      user_pool_id: p.child('user_pool_id').out,
      write_attributes: p.child('write_attributes').out,
    },
    cognito_resource_server(name, block): {
      local p = path(['aws_cognito_resource_server', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_resource_server: {
              [name]: std.prune({
                identifier: build.template(block.identifier),
                name: build.template(block.name),
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identifier: p.child('identifier').out,
      name: p.child('name').out,
      scope_identifiers: p.child('scope_identifiers').out,
      user_pool_id: p.child('user_pool_id').out,
    },
    cognito_risk_configuration(name, block): {
      local p = path(['aws_cognito_risk_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_risk_configuration: {
              [name]: std.prune({
                client_id: build.template(std.get(block, 'client_id', null, true)),
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      client_id: p.child('client_id').out,
      id: p.child('id').out,
      user_pool_id: p.child('user_pool_id').out,
    },
    cognito_user(name, block): {
      local p = path(['aws_cognito_user', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_user: {
              [name]: std.prune({
                attributes: build.template(std.get(block, 'attributes', null, true)),
                client_metadata: build.template(std.get(block, 'client_metadata', null, true)),
                desired_delivery_mediums: build.template(std.get(block, 'desired_delivery_mediums', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                force_alias_creation: build.template(std.get(block, 'force_alias_creation', null, true)),
                message_action: build.template(std.get(block, 'message_action', null, true)),
                password: build.template(std.get(block, 'password', null, true)),
                temporary_password: build.template(std.get(block, 'temporary_password', null, true)),
                user_pool_id: build.template(block.user_pool_id),
                username: build.template(block.username),
                validation_data: build.template(std.get(block, 'validation_data', null, true)),
              }),
            },
          },
        },
      },
      attributes: p.child('attributes').out,
      client_metadata: p.child('client_metadata').out,
      creation_date: p.child('creation_date').out,
      desired_delivery_mediums: p.child('desired_delivery_mediums').out,
      enabled: p.child('enabled').out,
      force_alias_creation: p.child('force_alias_creation').out,
      id: p.child('id').out,
      last_modified_date: p.child('last_modified_date').out,
      message_action: p.child('message_action').out,
      mfa_setting_list: p.child('mfa_setting_list').out,
      password: p.child('password').out,
      preferred_mfa_setting: p.child('preferred_mfa_setting').out,
      status: p.child('status').out,
      sub: p.child('sub').out,
      temporary_password: p.child('temporary_password').out,
      user_pool_id: p.child('user_pool_id').out,
      username: p.child('username').out,
      validation_data: p.child('validation_data').out,
    },
    cognito_user_group(name, block): {
      local p = path(['aws_cognito_user_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_user_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                precedence: build.template(std.get(block, 'precedence', null, true)),
                role_arn: build.template(std.get(block, 'role_arn', null, true)),
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      precedence: p.child('precedence').out,
      role_arn: p.child('role_arn').out,
      user_pool_id: p.child('user_pool_id').out,
    },
    cognito_user_in_group(name, block): {
      local p = path(['aws_cognito_user_in_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_user_in_group: {
              [name]: std.prune({
                group_name: build.template(block.group_name),
                user_pool_id: build.template(block.user_pool_id),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      group_name: p.child('group_name').out,
      id: p.child('id').out,
      user_pool_id: p.child('user_pool_id').out,
      username: p.child('username').out,
    },
    cognito_user_pool(name, block): {
      local p = path(['aws_cognito_user_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_user_pool: {
              [name]: std.prune({
                alias_attributes: build.template(std.get(block, 'alias_attributes', null, true)),
                auto_verified_attributes: build.template(std.get(block, 'auto_verified_attributes', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                mfa_configuration: build.template(std.get(block, 'mfa_configuration', null, true)),
                name: build.template(block.name),
                sms_authentication_message: build.template(std.get(block, 'sms_authentication_message', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                username_attributes: build.template(std.get(block, 'username_attributes', null, true)),
              }),
            },
          },
        },
      },
      alias_attributes: p.child('alias_attributes').out,
      arn: p.child('arn').out,
      auto_verified_attributes: p.child('auto_verified_attributes').out,
      creation_date: p.child('creation_date').out,
      custom_domain: p.child('custom_domain').out,
      deletion_protection: p.child('deletion_protection').out,
      domain: p.child('domain').out,
      email_verification_message: p.child('email_verification_message').out,
      email_verification_subject: p.child('email_verification_subject').out,
      endpoint: p.child('endpoint').out,
      estimated_number_of_users: p.child('estimated_number_of_users').out,
      id: p.child('id').out,
      last_modified_date: p.child('last_modified_date').out,
      mfa_configuration: p.child('mfa_configuration').out,
      name: p.child('name').out,
      sms_authentication_message: p.child('sms_authentication_message').out,
      sms_verification_message: p.child('sms_verification_message').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      username_attributes: p.child('username_attributes').out,
    },
    cognito_user_pool_client(name, block): {
      local p = path(['aws_cognito_user_pool_client', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_user_pool_client: {
              [name]: std.prune({
                generate_secret: build.template(std.get(block, 'generate_secret', null, true)),
                name: build.template(block.name),
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      access_token_validity: p.child('access_token_validity').out,
      allowed_oauth_flows: p.child('allowed_oauth_flows').out,
      allowed_oauth_flows_user_pool_client: p.child('allowed_oauth_flows_user_pool_client').out,
      allowed_oauth_scopes: p.child('allowed_oauth_scopes').out,
      auth_session_validity: p.child('auth_session_validity').out,
      callback_urls: p.child('callback_urls').out,
      client_secret: p.child('client_secret').out,
      default_redirect_uri: p.child('default_redirect_uri').out,
      enable_propagate_additional_user_context_data: p.child('enable_propagate_additional_user_context_data').out,
      enable_token_revocation: p.child('enable_token_revocation').out,
      explicit_auth_flows: p.child('explicit_auth_flows').out,
      generate_secret: p.child('generate_secret').out,
      id: p.child('id').out,
      id_token_validity: p.child('id_token_validity').out,
      logout_urls: p.child('logout_urls').out,
      name: p.child('name').out,
      prevent_user_existence_errors: p.child('prevent_user_existence_errors').out,
      read_attributes: p.child('read_attributes').out,
      refresh_token_validity: p.child('refresh_token_validity').out,
      supported_identity_providers: p.child('supported_identity_providers').out,
      user_pool_id: p.child('user_pool_id').out,
      write_attributes: p.child('write_attributes').out,
    },
    cognito_user_pool_domain(name, block): {
      local p = path(['aws_cognito_user_pool_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_user_pool_domain: {
              [name]: std.prune({
                certificate_arn: build.template(std.get(block, 'certificate_arn', null, true)),
                domain: build.template(block.domain),
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      aws_account_id: p.child('aws_account_id').out,
      certificate_arn: p.child('certificate_arn').out,
      cloudfront_distribution: p.child('cloudfront_distribution').out,
      cloudfront_distribution_arn: p.child('cloudfront_distribution_arn').out,
      cloudfront_distribution_zone_id: p.child('cloudfront_distribution_zone_id').out,
      domain: p.child('domain').out,
      id: p.child('id').out,
      s3_bucket: p.child('s3_bucket').out,
      user_pool_id: p.child('user_pool_id').out,
      version: p.child('version').out,
    },
    cognito_user_pool_ui_customization(name, block): {
      local p = path(['aws_cognito_user_pool_ui_customization', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cognito_user_pool_ui_customization: {
              [name]: std.prune({
                client_id: build.template(std.get(block, 'client_id', null, true)),
                css: build.template(std.get(block, 'css', null, true)),
                image_file: build.template(std.get(block, 'image_file', null, true)),
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      client_id: p.child('client_id').out,
      creation_date: p.child('creation_date').out,
      css: p.child('css').out,
      css_version: p.child('css_version').out,
      id: p.child('id').out,
      image_file: p.child('image_file').out,
      image_url: p.child('image_url').out,
      last_modified_date: p.child('last_modified_date').out,
      user_pool_id: p.child('user_pool_id').out,
    },
    comprehend_document_classifier(name, block): {
      local p = path(['aws_comprehend_document_classifier', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_comprehend_document_classifier: {
              [name]: std.prune({
                data_access_role_arn: build.template(block.data_access_role_arn),
                language_code: build.template(block.language_code),
                mode: build.template(std.get(block, 'mode', null, true)),
                model_kms_key_id: build.template(std.get(block, 'model_kms_key_id', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                volume_kms_key_id: build.template(std.get(block, 'volume_kms_key_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      data_access_role_arn: p.child('data_access_role_arn').out,
      id: p.child('id').out,
      language_code: p.child('language_code').out,
      mode: p.child('mode').out,
      model_kms_key_id: p.child('model_kms_key_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version_name: p.child('version_name').out,
      version_name_prefix: p.child('version_name_prefix').out,
      volume_kms_key_id: p.child('volume_kms_key_id').out,
    },
    comprehend_entity_recognizer(name, block): {
      local p = path(['aws_comprehend_entity_recognizer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_comprehend_entity_recognizer: {
              [name]: std.prune({
                data_access_role_arn: build.template(block.data_access_role_arn),
                language_code: build.template(block.language_code),
                model_kms_key_id: build.template(std.get(block, 'model_kms_key_id', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                volume_kms_key_id: build.template(std.get(block, 'volume_kms_key_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      data_access_role_arn: p.child('data_access_role_arn').out,
      id: p.child('id').out,
      language_code: p.child('language_code').out,
      model_kms_key_id: p.child('model_kms_key_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version_name: p.child('version_name').out,
      version_name_prefix: p.child('version_name_prefix').out,
      volume_kms_key_id: p.child('volume_kms_key_id').out,
    },
    computeoptimizer_enrollment_status(name, block): {
      local p = path(['aws_computeoptimizer_enrollment_status', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_computeoptimizer_enrollment_status: {
              [name]: std.prune({
                status: build.template(block.status),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      include_member_accounts: p.child('include_member_accounts').out,
      number_of_member_accounts_opted_in: p.child('number_of_member_accounts_opted_in').out,
      status: p.child('status').out,
    },
    computeoptimizer_recommendation_preferences(name, block): {
      local p = path(['aws_computeoptimizer_recommendation_preferences', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_computeoptimizer_recommendation_preferences: {
              [name]: std.prune({
                enhanced_infrastructure_metrics: build.template(std.get(block, 'enhanced_infrastructure_metrics', null, true)),
                inferred_workload_types: build.template(std.get(block, 'inferred_workload_types', null, true)),
                resource_type: build.template(block.resource_type),
                savings_estimation_mode: build.template(std.get(block, 'savings_estimation_mode', null, true)),
              }),
            },
          },
        },
      },
      enhanced_infrastructure_metrics: p.child('enhanced_infrastructure_metrics').out,
      id: p.child('id').out,
      inferred_workload_types: p.child('inferred_workload_types').out,
      look_back_period: p.child('look_back_period').out,
      resource_type: p.child('resource_type').out,
      savings_estimation_mode: p.child('savings_estimation_mode').out,
    },
    config_aggregate_authorization(name, block): {
      local p = path(['aws_config_aggregate_authorization', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_config_aggregate_authorization: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
                region: build.template(block.region),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      region: p.child('region').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    config_config_rule(name, block): {
      local p = path(['aws_config_config_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_config_config_rule: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                input_parameters: build.template(std.get(block, 'input_parameters', null, true)),
                maximum_execution_frequency: build.template(std.get(block, 'maximum_execution_frequency', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      input_parameters: p.child('input_parameters').out,
      maximum_execution_frequency: p.child('maximum_execution_frequency').out,
      name: p.child('name').out,
      rule_id: p.child('rule_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    config_configuration_aggregator(name, block): {
      local p = path(['aws_config_configuration_aggregator', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_config_configuration_aggregator: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    config_configuration_recorder(name, block): {
      local p = path(['aws_config_configuration_recorder', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_config_configuration_recorder: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                role_arn: build.template(block.role_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
    },
    config_configuration_recorder_status(name, block): {
      local p = path(['aws_config_configuration_recorder_status', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_config_configuration_recorder_status: {
              [name]: std.prune({
                is_enabled: build.template(block.is_enabled),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      is_enabled: p.child('is_enabled').out,
      name: p.child('name').out,
    },
    config_conformance_pack(name, block): {
      local p = path(['aws_config_conformance_pack', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_config_conformance_pack: {
              [name]: std.prune({
                delivery_s3_bucket: build.template(std.get(block, 'delivery_s3_bucket', null, true)),
                delivery_s3_key_prefix: build.template(std.get(block, 'delivery_s3_key_prefix', null, true)),
                name: build.template(block.name),
                template_body: build.template(std.get(block, 'template_body', null, true)),
                template_s3_uri: build.template(std.get(block, 'template_s3_uri', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      delivery_s3_bucket: p.child('delivery_s3_bucket').out,
      delivery_s3_key_prefix: p.child('delivery_s3_key_prefix').out,
      id: p.child('id').out,
      name: p.child('name').out,
      template_body: p.child('template_body').out,
      template_s3_uri: p.child('template_s3_uri').out,
    },
    config_delivery_channel(name, block): {
      local p = path(['aws_config_delivery_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_config_delivery_channel: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                s3_bucket_name: build.template(block.s3_bucket_name),
                s3_key_prefix: build.template(std.get(block, 's3_key_prefix', null, true)),
                s3_kms_key_arn: build.template(std.get(block, 's3_kms_key_arn', null, true)),
                sns_topic_arn: build.template(std.get(block, 'sns_topic_arn', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      s3_bucket_name: p.child('s3_bucket_name').out,
      s3_key_prefix: p.child('s3_key_prefix').out,
      s3_kms_key_arn: p.child('s3_kms_key_arn').out,
      sns_topic_arn: p.child('sns_topic_arn').out,
    },
    config_organization_conformance_pack(name, block): {
      local p = path(['aws_config_organization_conformance_pack', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_config_organization_conformance_pack: {
              [name]: std.prune({
                delivery_s3_bucket: build.template(std.get(block, 'delivery_s3_bucket', null, true)),
                delivery_s3_key_prefix: build.template(std.get(block, 'delivery_s3_key_prefix', null, true)),
                excluded_accounts: build.template(std.get(block, 'excluded_accounts', null, true)),
                name: build.template(block.name),
                template_body: build.template(std.get(block, 'template_body', null, true)),
                template_s3_uri: build.template(std.get(block, 'template_s3_uri', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      delivery_s3_bucket: p.child('delivery_s3_bucket').out,
      delivery_s3_key_prefix: p.child('delivery_s3_key_prefix').out,
      excluded_accounts: p.child('excluded_accounts').out,
      id: p.child('id').out,
      name: p.child('name').out,
      template_body: p.child('template_body').out,
      template_s3_uri: p.child('template_s3_uri').out,
    },
    config_organization_custom_policy_rule(name, block): {
      local p = path(['aws_config_organization_custom_policy_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_config_organization_custom_policy_rule: {
              [name]: std.prune({
                debug_log_delivery_accounts: build.template(std.get(block, 'debug_log_delivery_accounts', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                excluded_accounts: build.template(std.get(block, 'excluded_accounts', null, true)),
                input_parameters: build.template(std.get(block, 'input_parameters', null, true)),
                maximum_execution_frequency: build.template(std.get(block, 'maximum_execution_frequency', null, true)),
                name: build.template(block.name),
                policy_runtime: build.template(block.policy_runtime),
                policy_text: build.template(block.policy_text),
                resource_id_scope: build.template(std.get(block, 'resource_id_scope', null, true)),
                resource_types_scope: build.template(std.get(block, 'resource_types_scope', null, true)),
                tag_key_scope: build.template(std.get(block, 'tag_key_scope', null, true)),
                tag_value_scope: build.template(std.get(block, 'tag_value_scope', null, true)),
                trigger_types: build.template(block.trigger_types),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      debug_log_delivery_accounts: p.child('debug_log_delivery_accounts').out,
      description: p.child('description').out,
      excluded_accounts: p.child('excluded_accounts').out,
      id: p.child('id').out,
      input_parameters: p.child('input_parameters').out,
      maximum_execution_frequency: p.child('maximum_execution_frequency').out,
      name: p.child('name').out,
      policy_runtime: p.child('policy_runtime').out,
      policy_text: p.child('policy_text').out,
      resource_id_scope: p.child('resource_id_scope').out,
      resource_types_scope: p.child('resource_types_scope').out,
      tag_key_scope: p.child('tag_key_scope').out,
      tag_value_scope: p.child('tag_value_scope').out,
      trigger_types: p.child('trigger_types').out,
    },
    config_organization_custom_rule(name, block): {
      local p = path(['aws_config_organization_custom_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_config_organization_custom_rule: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                excluded_accounts: build.template(std.get(block, 'excluded_accounts', null, true)),
                input_parameters: build.template(std.get(block, 'input_parameters', null, true)),
                lambda_function_arn: build.template(block.lambda_function_arn),
                maximum_execution_frequency: build.template(std.get(block, 'maximum_execution_frequency', null, true)),
                name: build.template(block.name),
                resource_id_scope: build.template(std.get(block, 'resource_id_scope', null, true)),
                resource_types_scope: build.template(std.get(block, 'resource_types_scope', null, true)),
                tag_key_scope: build.template(std.get(block, 'tag_key_scope', null, true)),
                tag_value_scope: build.template(std.get(block, 'tag_value_scope', null, true)),
                trigger_types: build.template(block.trigger_types),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      excluded_accounts: p.child('excluded_accounts').out,
      id: p.child('id').out,
      input_parameters: p.child('input_parameters').out,
      lambda_function_arn: p.child('lambda_function_arn').out,
      maximum_execution_frequency: p.child('maximum_execution_frequency').out,
      name: p.child('name').out,
      resource_id_scope: p.child('resource_id_scope').out,
      resource_types_scope: p.child('resource_types_scope').out,
      tag_key_scope: p.child('tag_key_scope').out,
      tag_value_scope: p.child('tag_value_scope').out,
      trigger_types: p.child('trigger_types').out,
    },
    config_organization_managed_rule(name, block): {
      local p = path(['aws_config_organization_managed_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_config_organization_managed_rule: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                excluded_accounts: build.template(std.get(block, 'excluded_accounts', null, true)),
                input_parameters: build.template(std.get(block, 'input_parameters', null, true)),
                maximum_execution_frequency: build.template(std.get(block, 'maximum_execution_frequency', null, true)),
                name: build.template(block.name),
                resource_id_scope: build.template(std.get(block, 'resource_id_scope', null, true)),
                resource_types_scope: build.template(std.get(block, 'resource_types_scope', null, true)),
                rule_identifier: build.template(block.rule_identifier),
                tag_key_scope: build.template(std.get(block, 'tag_key_scope', null, true)),
                tag_value_scope: build.template(std.get(block, 'tag_value_scope', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      excluded_accounts: p.child('excluded_accounts').out,
      id: p.child('id').out,
      input_parameters: p.child('input_parameters').out,
      maximum_execution_frequency: p.child('maximum_execution_frequency').out,
      name: p.child('name').out,
      resource_id_scope: p.child('resource_id_scope').out,
      resource_types_scope: p.child('resource_types_scope').out,
      rule_identifier: p.child('rule_identifier').out,
      tag_key_scope: p.child('tag_key_scope').out,
      tag_value_scope: p.child('tag_value_scope').out,
    },
    config_remediation_configuration(name, block): {
      local p = path(['aws_config_remediation_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_config_remediation_configuration: {
              [name]: std.prune({
                automatic: build.template(std.get(block, 'automatic', null, true)),
                config_rule_name: build.template(block.config_rule_name),
                maximum_automatic_attempts: build.template(std.get(block, 'maximum_automatic_attempts', null, true)),
                resource_type: build.template(std.get(block, 'resource_type', null, true)),
                retry_attempt_seconds: build.template(std.get(block, 'retry_attempt_seconds', null, true)),
                target_id: build.template(block.target_id),
                target_type: build.template(block.target_type),
                target_version: build.template(std.get(block, 'target_version', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      automatic: p.child('automatic').out,
      config_rule_name: p.child('config_rule_name').out,
      id: p.child('id').out,
      maximum_automatic_attempts: p.child('maximum_automatic_attempts').out,
      resource_type: p.child('resource_type').out,
      retry_attempt_seconds: p.child('retry_attempt_seconds').out,
      target_id: p.child('target_id').out,
      target_type: p.child('target_type').out,
      target_version: p.child('target_version').out,
    },
    config_retention_configuration(name, block): {
      local p = path(['aws_config_retention_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_config_retention_configuration: {
              [name]: std.prune({
                retention_period_in_days: build.template(block.retention_period_in_days),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      retention_period_in_days: p.child('retention_period_in_days').out,
    },
    connect_bot_association(name, block): {
      local p = path(['aws_connect_bot_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_bot_association: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
    },
    connect_contact_flow(name, block): {
      local p = path(['aws_connect_contact_flow', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_contact_flow: {
              [name]: std.prune({
                content_hash: build.template(std.get(block, 'content_hash', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                filename: build.template(std.get(block, 'filename', null, true)),
                instance_id: build.template(block.instance_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      contact_flow_id: p.child('contact_flow_id').out,
      content: p.child('content').out,
      content_hash: p.child('content_hash').out,
      description: p.child('description').out,
      filename: p.child('filename').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    connect_contact_flow_module(name, block): {
      local p = path(['aws_connect_contact_flow_module', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_contact_flow_module: {
              [name]: std.prune({
                content_hash: build.template(std.get(block, 'content_hash', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                filename: build.template(std.get(block, 'filename', null, true)),
                instance_id: build.template(block.instance_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      contact_flow_module_id: p.child('contact_flow_module_id').out,
      content: p.child('content').out,
      content_hash: p.child('content_hash').out,
      description: p.child('description').out,
      filename: p.child('filename').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    connect_hours_of_operation(name, block): {
      local p = path(['aws_connect_hours_of_operation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_hours_of_operation: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                instance_id: build.template(block.instance_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                time_zone: build.template(block.time_zone),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      hours_of_operation_id: p.child('hours_of_operation_id').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      time_zone: p.child('time_zone').out,
    },
    connect_instance(name, block): {
      local p = path(['aws_connect_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_instance: {
              [name]: std.prune({
                auto_resolve_best_voices_enabled: build.template(std.get(block, 'auto_resolve_best_voices_enabled', null, true)),
                contact_flow_logs_enabled: build.template(std.get(block, 'contact_flow_logs_enabled', null, true)),
                contact_lens_enabled: build.template(std.get(block, 'contact_lens_enabled', null, true)),
                directory_id: build.template(std.get(block, 'directory_id', null, true)),
                early_media_enabled: build.template(std.get(block, 'early_media_enabled', null, true)),
                identity_management_type: build.template(block.identity_management_type),
                inbound_calls_enabled: build.template(block.inbound_calls_enabled),
                instance_alias: build.template(std.get(block, 'instance_alias', null, true)),
                multi_party_conference_enabled: build.template(std.get(block, 'multi_party_conference_enabled', null, true)),
                outbound_calls_enabled: build.template(block.outbound_calls_enabled),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_resolve_best_voices_enabled: p.child('auto_resolve_best_voices_enabled').out,
      contact_flow_logs_enabled: p.child('contact_flow_logs_enabled').out,
      contact_lens_enabled: p.child('contact_lens_enabled').out,
      created_time: p.child('created_time').out,
      directory_id: p.child('directory_id').out,
      early_media_enabled: p.child('early_media_enabled').out,
      id: p.child('id').out,
      identity_management_type: p.child('identity_management_type').out,
      inbound_calls_enabled: p.child('inbound_calls_enabled').out,
      instance_alias: p.child('instance_alias').out,
      multi_party_conference_enabled: p.child('multi_party_conference_enabled').out,
      outbound_calls_enabled: p.child('outbound_calls_enabled').out,
      service_role: p.child('service_role').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    connect_instance_storage_config(name, block): {
      local p = path(['aws_connect_instance_storage_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_instance_storage_config: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
                resource_type: build.template(block.resource_type),
              }),
            },
          },
        },
      },
      association_id: p.child('association_id').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      resource_type: p.child('resource_type').out,
    },
    connect_lambda_function_association(name, block): {
      local p = path(['aws_connect_lambda_function_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_lambda_function_association: {
              [name]: std.prune({
                function_arn: build.template(block.function_arn),
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      function_arn: p.child('function_arn').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
    },
    connect_phone_number(name, block): {
      local p = path(['aws_connect_phone_number', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_phone_number: {
              [name]: std.prune({
                country_code: build.template(block.country_code),
                description: build.template(std.get(block, 'description', null, true)),
                prefix: build.template(std.get(block, 'prefix', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_arn: build.template(block.target_arn),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      country_code: p.child('country_code').out,
      description: p.child('description').out,
      id: p.child('id').out,
      phone_number: p.child('phone_number').out,
      prefix: p.child('prefix').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_arn: p.child('target_arn').out,
      type: p.child('type').out,
    },
    connect_queue(name, block): {
      local p = path(['aws_connect_queue', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_queue: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                hours_of_operation_id: build.template(block.hours_of_operation_id),
                instance_id: build.template(block.instance_id),
                max_contacts: build.template(std.get(block, 'max_contacts', null, true)),
                name: build.template(block.name),
                quick_connect_ids: build.template(std.get(block, 'quick_connect_ids', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      hours_of_operation_id: p.child('hours_of_operation_id').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      max_contacts: p.child('max_contacts').out,
      name: p.child('name').out,
      queue_id: p.child('queue_id').out,
      quick_connect_ids: p.child('quick_connect_ids').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    connect_quick_connect(name, block): {
      local p = path(['aws_connect_quick_connect', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_quick_connect: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                instance_id: build.template(block.instance_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      quick_connect_id: p.child('quick_connect_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    connect_routing_profile(name, block): {
      local p = path(['aws_connect_routing_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_routing_profile: {
              [name]: std.prune({
                default_outbound_queue_id: build.template(block.default_outbound_queue_id),
                description: build.template(block.description),
                instance_id: build.template(block.instance_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_outbound_queue_id: p.child('default_outbound_queue_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      routing_profile_id: p.child('routing_profile_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    connect_security_profile(name, block): {
      local p = path(['aws_connect_security_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_security_profile: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                instance_id: build.template(block.instance_id),
                name: build.template(block.name),
                permissions: build.template(std.get(block, 'permissions', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      organization_resource_id: p.child('organization_resource_id').out,
      permissions: p.child('permissions').out,
      security_profile_id: p.child('security_profile_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    connect_user(name, block): {
      local p = path(['aws_connect_user', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_user: {
              [name]: std.prune({
                hierarchy_group_id: build.template(std.get(block, 'hierarchy_group_id', null, true)),
                instance_id: build.template(block.instance_id),
                name: build.template(block.name),
                password: build.template(std.get(block, 'password', null, true)),
                routing_profile_id: build.template(block.routing_profile_id),
                security_profile_ids: build.template(block.security_profile_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      directory_user_id: p.child('directory_user_id').out,
      hierarchy_group_id: p.child('hierarchy_group_id').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      password: p.child('password').out,
      routing_profile_id: p.child('routing_profile_id').out,
      security_profile_ids: p.child('security_profile_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_id: p.child('user_id').out,
    },
    connect_user_hierarchy_group(name, block): {
      local p = path(['aws_connect_user_hierarchy_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_user_hierarchy_group: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
                name: build.template(block.name),
                parent_group_id: build.template(std.get(block, 'parent_group_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      hierarchy_group_id: p.child('hierarchy_group_id').out,
      hierarchy_path: p.child('hierarchy_path').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      level_id: p.child('level_id').out,
      name: p.child('name').out,
      parent_group_id: p.child('parent_group_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    connect_user_hierarchy_structure(name, block): {
      local p = path(['aws_connect_user_hierarchy_structure', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_user_hierarchy_structure: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
    },
    connect_vocabulary(name, block): {
      local p = path(['aws_connect_vocabulary', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_connect_vocabulary: {
              [name]: std.prune({
                content: build.template(block.content),
                instance_id: build.template(block.instance_id),
                language_code: build.template(block.language_code),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      content: p.child('content').out,
      failure_reason: p.child('failure_reason').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      language_code: p.child('language_code').out,
      last_modified_time: p.child('last_modified_time').out,
      name: p.child('name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vocabulary_id: p.child('vocabulary_id').out,
    },
    controltower_control(name, block): {
      local p = path(['aws_controltower_control', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_controltower_control: {
              [name]: std.prune({
                control_identifier: build.template(block.control_identifier),
                target_identifier: build.template(block.target_identifier),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      control_identifier: p.child('control_identifier').out,
      id: p.child('id').out,
      target_identifier: p.child('target_identifier').out,
    },
    controltower_landing_zone(name, block): {
      local p = path(['aws_controltower_landing_zone', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_controltower_landing_zone: {
              [name]: std.prune({
                manifest_json: build.template(block.manifest_json),
                tags: build.template(std.get(block, 'tags', null, true)),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      drift_status: p.child('drift_status').out,
      id: p.child('id').out,
      latest_available_version: p.child('latest_available_version').out,
      manifest_json: p.child('manifest_json').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    costoptimizationhub_enrollment_status(name, block): {
      local p = path(['aws_costoptimizationhub_enrollment_status', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_costoptimizationhub_enrollment_status: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      include_member_accounts: p.child('include_member_accounts').out,
      status: p.child('status').out,
    },
    costoptimizationhub_preferences(name, block): {
      local p = path(['aws_costoptimizationhub_preferences', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_costoptimizationhub_preferences: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      member_account_discount_visibility: p.child('member_account_discount_visibility').out,
      savings_estimation_mode: p.child('savings_estimation_mode').out,
    },
    cur_report_definition(name, block): {
      local p = path(['aws_cur_report_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_cur_report_definition: {
              [name]: std.prune({
                additional_artifacts: build.template(std.get(block, 'additional_artifacts', null, true)),
                additional_schema_elements: build.template(block.additional_schema_elements),
                compression: build.template(block.compression),
                format: build.template(block.format),
                refresh_closed_reports: build.template(std.get(block, 'refresh_closed_reports', null, true)),
                report_name: build.template(block.report_name),
                report_versioning: build.template(std.get(block, 'report_versioning', null, true)),
                s3_bucket: build.template(block.s3_bucket),
                s3_prefix: build.template(std.get(block, 's3_prefix', null, true)),
                s3_region: build.template(block.s3_region),
                tags: build.template(std.get(block, 'tags', null, true)),
                time_unit: build.template(block.time_unit),
              }),
            },
          },
        },
      },
      additional_artifacts: p.child('additional_artifacts').out,
      additional_schema_elements: p.child('additional_schema_elements').out,
      arn: p.child('arn').out,
      compression: p.child('compression').out,
      format: p.child('format').out,
      id: p.child('id').out,
      refresh_closed_reports: p.child('refresh_closed_reports').out,
      report_name: p.child('report_name').out,
      report_versioning: p.child('report_versioning').out,
      s3_bucket: p.child('s3_bucket').out,
      s3_prefix: p.child('s3_prefix').out,
      s3_region: p.child('s3_region').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      time_unit: p.child('time_unit').out,
    },
    customer_gateway(name, block): {
      local p = path(['aws_customer_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_customer_gateway: {
              [name]: std.prune({
                bgp_asn: build.template(std.get(block, 'bgp_asn', null, true)),
                bgp_asn_extended: build.template(std.get(block, 'bgp_asn_extended', null, true)),
                certificate_arn: build.template(std.get(block, 'certificate_arn', null, true)),
                device_name: build.template(std.get(block, 'device_name', null, true)),
                ip_address: build.template(std.get(block, 'ip_address', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bgp_asn: p.child('bgp_asn').out,
      bgp_asn_extended: p.child('bgp_asn_extended').out,
      certificate_arn: p.child('certificate_arn').out,
      device_name: p.child('device_name').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    customerprofiles_domain(name, block): {
      local p = path(['aws_customerprofiles_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_customerprofiles_domain: {
              [name]: std.prune({
                dead_letter_queue_url: build.template(std.get(block, 'dead_letter_queue_url', null, true)),
                default_encryption_key: build.template(std.get(block, 'default_encryption_key', null, true)),
                default_expiration_days: build.template(block.default_expiration_days),
                domain_name: build.template(block.domain_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      dead_letter_queue_url: p.child('dead_letter_queue_url').out,
      default_encryption_key: p.child('default_encryption_key').out,
      default_expiration_days: p.child('default_expiration_days').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    customerprofiles_profile(name, block): {
      local p = path(['aws_customerprofiles_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_customerprofiles_profile: {
              [name]: std.prune({
                account_number: build.template(std.get(block, 'account_number', null, true)),
                additional_information: build.template(std.get(block, 'additional_information', null, true)),
                attributes: build.template(std.get(block, 'attributes', null, true)),
                birth_date: build.template(std.get(block, 'birth_date', null, true)),
                business_email_address: build.template(std.get(block, 'business_email_address', null, true)),
                business_name: build.template(std.get(block, 'business_name', null, true)),
                business_phone_number: build.template(std.get(block, 'business_phone_number', null, true)),
                domain_name: build.template(block.domain_name),
                email_address: build.template(std.get(block, 'email_address', null, true)),
                first_name: build.template(std.get(block, 'first_name', null, true)),
                gender_string: build.template(std.get(block, 'gender_string', null, true)),
                home_phone_number: build.template(std.get(block, 'home_phone_number', null, true)),
                last_name: build.template(std.get(block, 'last_name', null, true)),
                middle_name: build.template(std.get(block, 'middle_name', null, true)),
                mobile_phone_number: build.template(std.get(block, 'mobile_phone_number', null, true)),
                party_type_string: build.template(std.get(block, 'party_type_string', null, true)),
                personal_email_address: build.template(std.get(block, 'personal_email_address', null, true)),
                phone_number: build.template(std.get(block, 'phone_number', null, true)),
              }),
            },
          },
        },
      },
      account_number: p.child('account_number').out,
      additional_information: p.child('additional_information').out,
      attributes: p.child('attributes').out,
      birth_date: p.child('birth_date').out,
      business_email_address: p.child('business_email_address').out,
      business_name: p.child('business_name').out,
      business_phone_number: p.child('business_phone_number').out,
      domain_name: p.child('domain_name').out,
      email_address: p.child('email_address').out,
      first_name: p.child('first_name').out,
      gender_string: p.child('gender_string').out,
      home_phone_number: p.child('home_phone_number').out,
      id: p.child('id').out,
      last_name: p.child('last_name').out,
      middle_name: p.child('middle_name').out,
      mobile_phone_number: p.child('mobile_phone_number').out,
      party_type_string: p.child('party_type_string').out,
      personal_email_address: p.child('personal_email_address').out,
      phone_number: p.child('phone_number').out,
    },
    dataexchange_data_set(name, block): {
      local p = path(['aws_dataexchange_data_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dataexchange_data_set: {
              [name]: std.prune({
                asset_type: build.template(block.asset_type),
                description: build.template(block.description),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      asset_type: p.child('asset_type').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    dataexchange_revision(name, block): {
      local p = path(['aws_dataexchange_revision', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dataexchange_revision: {
              [name]: std.prune({
                comment: build.template(std.get(block, 'comment', null, true)),
                data_set_id: build.template(block.data_set_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      comment: p.child('comment').out,
      data_set_id: p.child('data_set_id').out,
      id: p.child('id').out,
      revision_id: p.child('revision_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    datapipeline_pipeline(name, block): {
      local p = path(['aws_datapipeline_pipeline', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datapipeline_pipeline: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    datapipeline_pipeline_definition(name, block): {
      local p = path(['aws_datapipeline_pipeline_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datapipeline_pipeline_definition: {
              [name]: std.prune({
                pipeline_id: build.template(block.pipeline_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      pipeline_id: p.child('pipeline_id').out,
    },
    datasync_agent(name, block): {
      local p = path(['aws_datasync_agent', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datasync_agent: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                security_group_arns: build.template(std.get(block, 'security_group_arns', null, true)),
                subnet_arns: build.template(std.get(block, 'subnet_arns', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_endpoint_id: build.template(std.get(block, 'vpc_endpoint_id', null, true)),
              }),
            },
          },
        },
      },
      activation_key: p.child('activation_key').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      name: p.child('name').out,
      private_link_endpoint: p.child('private_link_endpoint').out,
      security_group_arns: p.child('security_group_arns').out,
      subnet_arns: p.child('subnet_arns').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_endpoint_id: p.child('vpc_endpoint_id').out,
    },
    datasync_location_azure_blob(name, block): {
      local p = path(['aws_datasync_location_azure_blob', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datasync_location_azure_blob: {
              [name]: std.prune({
                access_tier: build.template(std.get(block, 'access_tier', null, true)),
                agent_arns: build.template(block.agent_arns),
                authentication_type: build.template(block.authentication_type),
                blob_type: build.template(std.get(block, 'blob_type', null, true)),
                container_url: build.template(block.container_url),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_tier: p.child('access_tier').out,
      agent_arns: p.child('agent_arns').out,
      arn: p.child('arn').out,
      authentication_type: p.child('authentication_type').out,
      blob_type: p.child('blob_type').out,
      container_url: p.child('container_url').out,
      id: p.child('id').out,
      subdirectory: p.child('subdirectory').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uri: p.child('uri').out,
    },
    datasync_location_efs(name, block): {
      local p = path(['aws_datasync_location_efs', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datasync_location_efs: {
              [name]: std.prune({
                access_point_arn: build.template(std.get(block, 'access_point_arn', null, true)),
                efs_file_system_arn: build.template(block.efs_file_system_arn),
                file_system_access_role_arn: build.template(std.get(block, 'file_system_access_role_arn', null, true)),
                in_transit_encryption: build.template(std.get(block, 'in_transit_encryption', null, true)),
                subdirectory: build.template(std.get(block, 'subdirectory', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_point_arn: p.child('access_point_arn').out,
      arn: p.child('arn').out,
      efs_file_system_arn: p.child('efs_file_system_arn').out,
      file_system_access_role_arn: p.child('file_system_access_role_arn').out,
      id: p.child('id').out,
      in_transit_encryption: p.child('in_transit_encryption').out,
      subdirectory: p.child('subdirectory').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uri: p.child('uri').out,
    },
    datasync_location_fsx_lustre_file_system(name, block): {
      local p = path(['aws_datasync_location_fsx_lustre_file_system', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datasync_location_fsx_lustre_file_system: {
              [name]: std.prune({
                fsx_filesystem_arn: build.template(block.fsx_filesystem_arn),
                security_group_arns: build.template(block.security_group_arns),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      fsx_filesystem_arn: p.child('fsx_filesystem_arn').out,
      id: p.child('id').out,
      security_group_arns: p.child('security_group_arns').out,
      subdirectory: p.child('subdirectory').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uri: p.child('uri').out,
    },
    datasync_location_fsx_ontap_file_system(name, block): {
      local p = path(['aws_datasync_location_fsx_ontap_file_system', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datasync_location_fsx_ontap_file_system: {
              [name]: std.prune({
                security_group_arns: build.template(block.security_group_arns),
                storage_virtual_machine_arn: build.template(block.storage_virtual_machine_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      fsx_filesystem_arn: p.child('fsx_filesystem_arn').out,
      id: p.child('id').out,
      security_group_arns: p.child('security_group_arns').out,
      storage_virtual_machine_arn: p.child('storage_virtual_machine_arn').out,
      subdirectory: p.child('subdirectory').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uri: p.child('uri').out,
    },
    datasync_location_fsx_openzfs_file_system(name, block): {
      local p = path(['aws_datasync_location_fsx_openzfs_file_system', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datasync_location_fsx_openzfs_file_system: {
              [name]: std.prune({
                fsx_filesystem_arn: build.template(block.fsx_filesystem_arn),
                security_group_arns: build.template(block.security_group_arns),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      fsx_filesystem_arn: p.child('fsx_filesystem_arn').out,
      id: p.child('id').out,
      security_group_arns: p.child('security_group_arns').out,
      subdirectory: p.child('subdirectory').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uri: p.child('uri').out,
    },
    datasync_location_fsx_windows_file_system(name, block): {
      local p = path(['aws_datasync_location_fsx_windows_file_system', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datasync_location_fsx_windows_file_system: {
              [name]: std.prune({
                domain: build.template(std.get(block, 'domain', null, true)),
                fsx_filesystem_arn: build.template(block.fsx_filesystem_arn),
                password: build.template(block.password),
                security_group_arns: build.template(block.security_group_arns),
                tags: build.template(std.get(block, 'tags', null, true)),
                user: build.template(block.user),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      domain: p.child('domain').out,
      fsx_filesystem_arn: p.child('fsx_filesystem_arn').out,
      id: p.child('id').out,
      password: p.child('password').out,
      security_group_arns: p.child('security_group_arns').out,
      subdirectory: p.child('subdirectory').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uri: p.child('uri').out,
      user: p.child('user').out,
    },
    datasync_location_hdfs(name, block): {
      local p = path(['aws_datasync_location_hdfs', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datasync_location_hdfs: {
              [name]: std.prune({
                agent_arns: build.template(block.agent_arns),
                authentication_type: build.template(std.get(block, 'authentication_type', null, true)),
                block_size: build.template(std.get(block, 'block_size', null, true)),
                kerberos_keytab: build.template(std.get(block, 'kerberos_keytab', null, true)),
                kerberos_keytab_base64: build.template(std.get(block, 'kerberos_keytab_base64', null, true)),
                kerberos_krb5_conf: build.template(std.get(block, 'kerberos_krb5_conf', null, true)),
                kerberos_krb5_conf_base64: build.template(std.get(block, 'kerberos_krb5_conf_base64', null, true)),
                kerberos_principal: build.template(std.get(block, 'kerberos_principal', null, true)),
                kms_key_provider_uri: build.template(std.get(block, 'kms_key_provider_uri', null, true)),
                replication_factor: build.template(std.get(block, 'replication_factor', null, true)),
                simple_user: build.template(std.get(block, 'simple_user', null, true)),
                subdirectory: build.template(std.get(block, 'subdirectory', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      agent_arns: p.child('agent_arns').out,
      arn: p.child('arn').out,
      authentication_type: p.child('authentication_type').out,
      block_size: p.child('block_size').out,
      id: p.child('id').out,
      kerberos_keytab: p.child('kerberos_keytab').out,
      kerberos_keytab_base64: p.child('kerberos_keytab_base64').out,
      kerberos_krb5_conf: p.child('kerberos_krb5_conf').out,
      kerberos_krb5_conf_base64: p.child('kerberos_krb5_conf_base64').out,
      kerberos_principal: p.child('kerberos_principal').out,
      kms_key_provider_uri: p.child('kms_key_provider_uri').out,
      replication_factor: p.child('replication_factor').out,
      simple_user: p.child('simple_user').out,
      subdirectory: p.child('subdirectory').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uri: p.child('uri').out,
    },
    datasync_location_nfs(name, block): {
      local p = path(['aws_datasync_location_nfs', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datasync_location_nfs: {
              [name]: std.prune({
                server_hostname: build.template(block.server_hostname),
                subdirectory: build.template(block.subdirectory),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      server_hostname: p.child('server_hostname').out,
      subdirectory: p.child('subdirectory').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uri: p.child('uri').out,
    },
    datasync_location_object_storage(name, block): {
      local p = path(['aws_datasync_location_object_storage', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datasync_location_object_storage: {
              [name]: std.prune({
                access_key: build.template(std.get(block, 'access_key', null, true)),
                agent_arns: build.template(block.agent_arns),
                bucket_name: build.template(block.bucket_name),
                secret_key: build.template(std.get(block, 'secret_key', null, true)),
                server_certificate: build.template(std.get(block, 'server_certificate', null, true)),
                server_hostname: build.template(block.server_hostname),
                server_port: build.template(std.get(block, 'server_port', null, true)),
                server_protocol: build.template(std.get(block, 'server_protocol', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_key: p.child('access_key').out,
      agent_arns: p.child('agent_arns').out,
      arn: p.child('arn').out,
      bucket_name: p.child('bucket_name').out,
      id: p.child('id').out,
      secret_key: p.child('secret_key').out,
      server_certificate: p.child('server_certificate').out,
      server_hostname: p.child('server_hostname').out,
      server_port: p.child('server_port').out,
      server_protocol: p.child('server_protocol').out,
      subdirectory: p.child('subdirectory').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uri: p.child('uri').out,
    },
    datasync_location_s3(name, block): {
      local p = path(['aws_datasync_location_s3', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datasync_location_s3: {
              [name]: std.prune({
                agent_arns: build.template(std.get(block, 'agent_arns', null, true)),
                s3_bucket_arn: build.template(block.s3_bucket_arn),
                subdirectory: build.template(block.subdirectory),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      agent_arns: p.child('agent_arns').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      s3_bucket_arn: p.child('s3_bucket_arn').out,
      s3_storage_class: p.child('s3_storage_class').out,
      subdirectory: p.child('subdirectory').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uri: p.child('uri').out,
    },
    datasync_location_smb(name, block): {
      local p = path(['aws_datasync_location_smb', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datasync_location_smb: {
              [name]: std.prune({
                agent_arns: build.template(block.agent_arns),
                password: build.template(block.password),
                server_hostname: build.template(block.server_hostname),
                subdirectory: build.template(block.subdirectory),
                tags: build.template(std.get(block, 'tags', null, true)),
                user: build.template(block.user),
              }),
            },
          },
        },
      },
      agent_arns: p.child('agent_arns').out,
      arn: p.child('arn').out,
      domain: p.child('domain').out,
      id: p.child('id').out,
      password: p.child('password').out,
      server_hostname: p.child('server_hostname').out,
      subdirectory: p.child('subdirectory').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uri: p.child('uri').out,
      user: p.child('user').out,
    },
    datasync_task(name, block): {
      local p = path(['aws_datasync_task', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datasync_task: {
              [name]: std.prune({
                cloudwatch_log_group_arn: build.template(std.get(block, 'cloudwatch_log_group_arn', null, true)),
                destination_location_arn: build.template(block.destination_location_arn),
                name: build.template(std.get(block, 'name', null, true)),
                source_location_arn: build.template(block.source_location_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cloudwatch_log_group_arn: p.child('cloudwatch_log_group_arn').out,
      destination_location_arn: p.child('destination_location_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      source_location_arn: p.child('source_location_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    datazone_asset_type(name, block): {
      local p = path(['aws_datazone_asset_type', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datazone_asset_type: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                domain_identifier: build.template(block.domain_identifier),
                name: build.template(block.name),
                owning_project_identifier: build.template(block.owning_project_identifier),
              }),
            },
          },
        },
      },
      created_at: p.child('created_at').out,
      created_by: p.child('created_by').out,
      description: p.child('description').out,
      domain_identifier: p.child('domain_identifier').out,
      name: p.child('name').out,
      owning_project_identifier: p.child('owning_project_identifier').out,
      revision: p.child('revision').out,
    },
    datazone_domain(name, block): {
      local p = path(['aws_datazone_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datazone_domain: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                domain_execution_role: build.template(block.domain_execution_role),
                kms_key_identifier: build.template(std.get(block, 'kms_key_identifier', null, true)),
                name: build.template(block.name),
                skip_deletion_check: build.template(std.get(block, 'skip_deletion_check', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      domain_execution_role: p.child('domain_execution_role').out,
      id: p.child('id').out,
      kms_key_identifier: p.child('kms_key_identifier').out,
      name: p.child('name').out,
      portal_url: p.child('portal_url').out,
      skip_deletion_check: p.child('skip_deletion_check').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    datazone_environment(name, block): {
      local p = path(['aws_datazone_environment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datazone_environment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                domain_identifier: build.template(block.domain_identifier),
                glossary_terms: build.template(std.get(block, 'glossary_terms', null, true)),
                name: build.template(block.name),
                profile_identifier: build.template(block.profile_identifier),
                project_identifier: build.template(block.project_identifier),
              }),
            },
          },
        },
      },
      account_identifier: p.child('account_identifier').out,
      account_region: p.child('account_region').out,
      blueprint_identifier: p.child('blueprint_identifier').out,
      created_at: p.child('created_at').out,
      created_by: p.child('created_by').out,
      description: p.child('description').out,
      domain_identifier: p.child('domain_identifier').out,
      glossary_terms: p.child('glossary_terms').out,
      id: p.child('id').out,
      last_deployment: p.child('last_deployment').out,
      name: p.child('name').out,
      profile_identifier: p.child('profile_identifier').out,
      project_identifier: p.child('project_identifier').out,
      provider_environment: p.child('provider_environment').out,
      provisioned_resources: p.child('provisioned_resources').out,
    },
    datazone_environment_blueprint_configuration(name, block): {
      local p = path(['aws_datazone_environment_blueprint_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datazone_environment_blueprint_configuration: {
              [name]: std.prune({
                domain_id: build.template(block.domain_id),
                enabled_regions: build.template(block.enabled_regions),
                environment_blueprint_id: build.template(block.environment_blueprint_id),
                manage_access_role_arn: build.template(std.get(block, 'manage_access_role_arn', null, true)),
                provisioning_role_arn: build.template(std.get(block, 'provisioning_role_arn', null, true)),
                regional_parameters: build.template(std.get(block, 'regional_parameters', null, true)),
              }),
            },
          },
        },
      },
      domain_id: p.child('domain_id').out,
      enabled_regions: p.child('enabled_regions').out,
      environment_blueprint_id: p.child('environment_blueprint_id').out,
      manage_access_role_arn: p.child('manage_access_role_arn').out,
      provisioning_role_arn: p.child('provisioning_role_arn').out,
      regional_parameters: p.child('regional_parameters').out,
    },
    datazone_environment_profile(name, block): {
      local p = path(['aws_datazone_environment_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datazone_environment_profile: {
              [name]: std.prune({
                aws_account_region: build.template(block.aws_account_region),
                domain_identifier: build.template(block.domain_identifier),
                environment_blueprint_identifier: build.template(block.environment_blueprint_identifier),
                name: build.template(block.name),
                project_identifier: build.template(block.project_identifier),
              }),
            },
          },
        },
      },
      aws_account_id: p.child('aws_account_id').out,
      aws_account_region: p.child('aws_account_region').out,
      created_at: p.child('created_at').out,
      created_by: p.child('created_by').out,
      description: p.child('description').out,
      domain_identifier: p.child('domain_identifier').out,
      environment_blueprint_identifier: p.child('environment_blueprint_identifier').out,
      id: p.child('id').out,
      name: p.child('name').out,
      project_identifier: p.child('project_identifier').out,
      updated_at: p.child('updated_at').out,
    },
    datazone_form_type(name, block): {
      local p = path(['aws_datazone_form_type', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datazone_form_type: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                domain_identifier: build.template(block.domain_identifier),
                name: build.template(block.name),
                owning_project_identifier: build.template(block.owning_project_identifier),
              }),
            },
          },
        },
      },
      created_at: p.child('created_at').out,
      created_by: p.child('created_by').out,
      description: p.child('description').out,
      domain_identifier: p.child('domain_identifier').out,
      imports: p.child('imports').out,
      name: p.child('name').out,
      origin_domain_id: p.child('origin_domain_id').out,
      origin_project_id: p.child('origin_project_id').out,
      owning_project_identifier: p.child('owning_project_identifier').out,
      revision: p.child('revision').out,
      status: p.child('status').out,
    },
    datazone_glossary(name, block): {
      local p = path(['aws_datazone_glossary', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datazone_glossary: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                domain_identifier: build.template(block.domain_identifier),
                name: build.template(block.name),
                owning_project_identifier: build.template(block.owning_project_identifier),
                status: build.template(std.get(block, 'status', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      domain_identifier: p.child('domain_identifier').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owning_project_identifier: p.child('owning_project_identifier').out,
      status: p.child('status').out,
    },
    datazone_glossary_term(name, block): {
      local p = path(['aws_datazone_glossary_term', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datazone_glossary_term: {
              [name]: std.prune({
                domain_identifier: build.template(std.get(block, 'domain_identifier', null, true)),
                glossary_identifier: build.template(block.glossary_identifier),
                long_description: build.template(std.get(block, 'long_description', null, true)),
                name: build.template(block.name),
                short_description: build.template(std.get(block, 'short_description', null, true)),
                status: build.template(std.get(block, 'status', null, true)),
              }),
            },
          },
        },
      },
      created_at: p.child('created_at').out,
      created_by: p.child('created_by').out,
      domain_identifier: p.child('domain_identifier').out,
      glossary_identifier: p.child('glossary_identifier').out,
      id: p.child('id').out,
      long_description: p.child('long_description').out,
      name: p.child('name').out,
      short_description: p.child('short_description').out,
      status: p.child('status').out,
    },
    datazone_project(name, block): {
      local p = path(['aws_datazone_project', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datazone_project: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                domain_identifier: build.template(block.domain_identifier),
                glossary_terms: build.template(std.get(block, 'glossary_terms', null, true)),
                name: build.template(block.name),
                skip_deletion_check: build.template(std.get(block, 'skip_deletion_check', null, true)),
              }),
            },
          },
        },
      },
      created_at: p.child('created_at').out,
      created_by: p.child('created_by').out,
      description: p.child('description').out,
      domain_identifier: p.child('domain_identifier').out,
      failure_reasons: p.child('failure_reasons').out,
      glossary_terms: p.child('glossary_terms').out,
      id: p.child('id').out,
      last_updated_at: p.child('last_updated_at').out,
      name: p.child('name').out,
      project_status: p.child('project_status').out,
      skip_deletion_check: p.child('skip_deletion_check').out,
    },
    datazone_user_profile(name, block): {
      local p = path(['aws_datazone_user_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_datazone_user_profile: {
              [name]: std.prune({
                domain_identifier: build.template(block.domain_identifier),
                user_identifier: build.template(block.user_identifier),
              }),
            },
          },
        },
      },
      details: p.child('details').out,
      domain_identifier: p.child('domain_identifier').out,
      id: p.child('id').out,
      status: p.child('status').out,
      type: p.child('type').out,
      user_identifier: p.child('user_identifier').out,
      user_type: p.child('user_type').out,
    },
    dax_cluster(name, block): {
      local p = path(['aws_dax_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dax_cluster: {
              [name]: std.prune({
                availability_zones: build.template(std.get(block, 'availability_zones', null, true)),
                cluster_endpoint_encryption_type: build.template(std.get(block, 'cluster_endpoint_encryption_type', null, true)),
                cluster_name: build.template(block.cluster_name),
                description: build.template(std.get(block, 'description', null, true)),
                iam_role_arn: build.template(block.iam_role_arn),
                node_type: build.template(block.node_type),
                notification_topic_arn: build.template(std.get(block, 'notification_topic_arn', null, true)),
                replication_factor: build.template(block.replication_factor),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zones: p.child('availability_zones').out,
      cluster_address: p.child('cluster_address').out,
      cluster_endpoint_encryption_type: p.child('cluster_endpoint_encryption_type').out,
      cluster_name: p.child('cluster_name').out,
      configuration_endpoint: p.child('configuration_endpoint').out,
      description: p.child('description').out,
      iam_role_arn: p.child('iam_role_arn').out,
      id: p.child('id').out,
      maintenance_window: p.child('maintenance_window').out,
      node_type: p.child('node_type').out,
      nodes: p.child('nodes').out,
      notification_topic_arn: p.child('notification_topic_arn').out,
      parameter_group_name: p.child('parameter_group_name').out,
      port: p.child('port').out,
      replication_factor: p.child('replication_factor').out,
      security_group_ids: p.child('security_group_ids').out,
      subnet_group_name: p.child('subnet_group_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    dax_parameter_group(name, block): {
      local p = path(['aws_dax_parameter_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dax_parameter_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    dax_subnet_group(name, block): {
      local p = path(['aws_dax_subnet_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dax_subnet_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                subnet_ids: build.template(block.subnet_ids),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subnet_ids: p.child('subnet_ids').out,
      vpc_id: p.child('vpc_id').out,
    },
    db_cluster_snapshot(name, block): {
      local p = path(['aws_db_cluster_snapshot', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_cluster_snapshot: {
              [name]: std.prune({
                db_cluster_identifier: build.template(block.db_cluster_identifier),
                db_cluster_snapshot_identifier: build.template(block.db_cluster_snapshot_identifier),
                shared_accounts: build.template(std.get(block, 'shared_accounts', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allocated_storage: p.child('allocated_storage').out,
      availability_zones: p.child('availability_zones').out,
      db_cluster_identifier: p.child('db_cluster_identifier').out,
      db_cluster_snapshot_arn: p.child('db_cluster_snapshot_arn').out,
      db_cluster_snapshot_identifier: p.child('db_cluster_snapshot_identifier').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      license_model: p.child('license_model').out,
      port: p.child('port').out,
      shared_accounts: p.child('shared_accounts').out,
      snapshot_type: p.child('snapshot_type').out,
      source_db_cluster_snapshot_arn: p.child('source_db_cluster_snapshot_arn').out,
      status: p.child('status').out,
      storage_encrypted: p.child('storage_encrypted').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    db_event_subscription(name, block): {
      local p = path(['aws_db_event_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_event_subscription: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                event_categories: build.template(std.get(block, 'event_categories', null, true)),
                sns_topic: build.template(block.sns_topic),
                source_ids: build.template(std.get(block, 'source_ids', null, true)),
                source_type: build.template(std.get(block, 'source_type', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      customer_aws_id: p.child('customer_aws_id').out,
      enabled: p.child('enabled').out,
      event_categories: p.child('event_categories').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      sns_topic: p.child('sns_topic').out,
      source_ids: p.child('source_ids').out,
      source_type: p.child('source_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    db_instance(name, block): {
      local p = path(['aws_db_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_instance: {
              [name]: std.prune({
                allow_major_version_upgrade: build.template(std.get(block, 'allow_major_version_upgrade', null, true)),
                apply_immediately: build.template(std.get(block, 'apply_immediately', null, true)),
                auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null, true)),
                copy_tags_to_snapshot: build.template(std.get(block, 'copy_tags_to_snapshot', null, true)),
                custom_iam_instance_profile: build.template(std.get(block, 'custom_iam_instance_profile', null, true)),
                customer_owned_ip_enabled: build.template(std.get(block, 'customer_owned_ip_enabled', null, true)),
                dedicated_log_volume: build.template(std.get(block, 'dedicated_log_volume', null, true)),
                delete_automated_backups: build.template(std.get(block, 'delete_automated_backups', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                domain: build.template(std.get(block, 'domain', null, true)),
                domain_auth_secret_arn: build.template(std.get(block, 'domain_auth_secret_arn', null, true)),
                domain_dns_ips: build.template(std.get(block, 'domain_dns_ips', null, true)),
                domain_iam_role_name: build.template(std.get(block, 'domain_iam_role_name', null, true)),
                domain_ou: build.template(std.get(block, 'domain_ou', null, true)),
                enabled_cloudwatch_logs_exports: build.template(std.get(block, 'enabled_cloudwatch_logs_exports', null, true)),
                final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null, true)),
                iam_database_authentication_enabled: build.template(std.get(block, 'iam_database_authentication_enabled', null, true)),
                instance_class: build.template(block.instance_class),
                manage_master_user_password: build.template(std.get(block, 'manage_master_user_password', null, true)),
                max_allocated_storage: build.template(std.get(block, 'max_allocated_storage', null, true)),
                monitoring_interval: build.template(std.get(block, 'monitoring_interval', null, true)),
                password: build.template(std.get(block, 'password', null, true)),
                performance_insights_enabled: build.template(std.get(block, 'performance_insights_enabled', null, true)),
                publicly_accessible: build.template(std.get(block, 'publicly_accessible', null, true)),
                replicate_source_db: build.template(std.get(block, 'replicate_source_db', null, true)),
                skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null, true)),
                storage_encrypted: build.template(std.get(block, 'storage_encrypted', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                upgrade_storage_config: build.template(std.get(block, 'upgrade_storage_config', null, true)),
              }),
            },
          },
        },
      },
      address: p.child('address').out,
      allocated_storage: p.child('allocated_storage').out,
      allow_major_version_upgrade: p.child('allow_major_version_upgrade').out,
      apply_immediately: p.child('apply_immediately').out,
      arn: p.child('arn').out,
      auto_minor_version_upgrade: p.child('auto_minor_version_upgrade').out,
      availability_zone: p.child('availability_zone').out,
      backup_retention_period: p.child('backup_retention_period').out,
      backup_target: p.child('backup_target').out,
      backup_window: p.child('backup_window').out,
      ca_cert_identifier: p.child('ca_cert_identifier').out,
      character_set_name: p.child('character_set_name').out,
      copy_tags_to_snapshot: p.child('copy_tags_to_snapshot').out,
      custom_iam_instance_profile: p.child('custom_iam_instance_profile').out,
      customer_owned_ip_enabled: p.child('customer_owned_ip_enabled').out,
      db_name: p.child('db_name').out,
      db_subnet_group_name: p.child('db_subnet_group_name').out,
      dedicated_log_volume: p.child('dedicated_log_volume').out,
      delete_automated_backups: p.child('delete_automated_backups').out,
      deletion_protection: p.child('deletion_protection').out,
      domain: p.child('domain').out,
      domain_auth_secret_arn: p.child('domain_auth_secret_arn').out,
      domain_dns_ips: p.child('domain_dns_ips').out,
      domain_fqdn: p.child('domain_fqdn').out,
      domain_iam_role_name: p.child('domain_iam_role_name').out,
      domain_ou: p.child('domain_ou').out,
      enabled_cloudwatch_logs_exports: p.child('enabled_cloudwatch_logs_exports').out,
      endpoint: p.child('endpoint').out,
      engine: p.child('engine').out,
      engine_lifecycle_support: p.child('engine_lifecycle_support').out,
      engine_version: p.child('engine_version').out,
      engine_version_actual: p.child('engine_version_actual').out,
      final_snapshot_identifier: p.child('final_snapshot_identifier').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      iam_database_authentication_enabled: p.child('iam_database_authentication_enabled').out,
      id: p.child('id').out,
      identifier: p.child('identifier').out,
      identifier_prefix: p.child('identifier_prefix').out,
      instance_class: p.child('instance_class').out,
      iops: p.child('iops').out,
      kms_key_id: p.child('kms_key_id').out,
      latest_restorable_time: p.child('latest_restorable_time').out,
      license_model: p.child('license_model').out,
      listener_endpoint: p.child('listener_endpoint').out,
      maintenance_window: p.child('maintenance_window').out,
      manage_master_user_password: p.child('manage_master_user_password').out,
      master_user_secret: p.child('master_user_secret').out,
      master_user_secret_kms_key_id: p.child('master_user_secret_kms_key_id').out,
      max_allocated_storage: p.child('max_allocated_storage').out,
      monitoring_interval: p.child('monitoring_interval').out,
      monitoring_role_arn: p.child('monitoring_role_arn').out,
      multi_az: p.child('multi_az').out,
      nchar_character_set_name: p.child('nchar_character_set_name').out,
      network_type: p.child('network_type').out,
      option_group_name: p.child('option_group_name').out,
      parameter_group_name: p.child('parameter_group_name').out,
      password: p.child('password').out,
      performance_insights_enabled: p.child('performance_insights_enabled').out,
      performance_insights_kms_key_id: p.child('performance_insights_kms_key_id').out,
      performance_insights_retention_period: p.child('performance_insights_retention_period').out,
      port: p.child('port').out,
      publicly_accessible: p.child('publicly_accessible').out,
      replica_mode: p.child('replica_mode').out,
      replicas: p.child('replicas').out,
      replicate_source_db: p.child('replicate_source_db').out,
      resource_id: p.child('resource_id').out,
      skip_final_snapshot: p.child('skip_final_snapshot').out,
      snapshot_identifier: p.child('snapshot_identifier').out,
      status: p.child('status').out,
      storage_encrypted: p.child('storage_encrypted').out,
      storage_throughput: p.child('storage_throughput').out,
      storage_type: p.child('storage_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      timezone: p.child('timezone').out,
      upgrade_storage_config: p.child('upgrade_storage_config').out,
      username: p.child('username').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    db_instance_automated_backups_replication(name, block): {
      local p = path(['aws_db_instance_automated_backups_replication', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_instance_automated_backups_replication: {
              [name]: std.prune({
                pre_signed_url: build.template(std.get(block, 'pre_signed_url', null, true)),
                retention_period: build.template(std.get(block, 'retention_period', null, true)),
                source_db_instance_arn: build.template(block.source_db_instance_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      pre_signed_url: p.child('pre_signed_url').out,
      retention_period: p.child('retention_period').out,
      source_db_instance_arn: p.child('source_db_instance_arn').out,
    },
    db_instance_role_association(name, block): {
      local p = path(['aws_db_instance_role_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_instance_role_association: {
              [name]: std.prune({
                db_instance_identifier: build.template(block.db_instance_identifier),
                feature_name: build.template(block.feature_name),
                role_arn: build.template(block.role_arn),
              }),
            },
          },
        },
      },
      db_instance_identifier: p.child('db_instance_identifier').out,
      feature_name: p.child('feature_name').out,
      id: p.child('id').out,
      role_arn: p.child('role_arn').out,
    },
    db_option_group(name, block): {
      local p = path(['aws_db_option_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_option_group: {
              [name]: std.prune({
                engine_name: build.template(block.engine_name),
                major_engine_version: build.template(block.major_engine_version),
                option_group_description: build.template(std.get(block, 'option_group_description', null, true)),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      engine_name: p.child('engine_name').out,
      id: p.child('id').out,
      major_engine_version: p.child('major_engine_version').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      option_group_description: p.child('option_group_description').out,
      skip_destroy: p.child('skip_destroy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    db_parameter_group(name, block): {
      local p = path(['aws_db_parameter_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_parameter_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                family: build.template(block.family),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      family: p.child('family').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      skip_destroy: p.child('skip_destroy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    db_proxy(name, block): {
      local p = path(['aws_db_proxy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_proxy: {
              [name]: std.prune({
                debug_logging: build.template(std.get(block, 'debug_logging', null, true)),
                engine_family: build.template(block.engine_family),
                name: build.template(block.name),
                require_tls: build.template(std.get(block, 'require_tls', null, true)),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_subnet_ids: build.template(block.vpc_subnet_ids),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      debug_logging: p.child('debug_logging').out,
      endpoint: p.child('endpoint').out,
      engine_family: p.child('engine_family').out,
      id: p.child('id').out,
      idle_client_timeout: p.child('idle_client_timeout').out,
      name: p.child('name').out,
      require_tls: p.child('require_tls').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
      vpc_subnet_ids: p.child('vpc_subnet_ids').out,
    },
    db_proxy_default_target_group(name, block): {
      local p = path(['aws_db_proxy_default_target_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_proxy_default_target_group: {
              [name]: std.prune({
                db_proxy_name: build.template(block.db_proxy_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      db_proxy_name: p.child('db_proxy_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    db_proxy_endpoint(name, block): {
      local p = path(['aws_db_proxy_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_proxy_endpoint: {
              [name]: std.prune({
                db_proxy_endpoint_name: build.template(block.db_proxy_endpoint_name),
                db_proxy_name: build.template(block.db_proxy_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_role: build.template(std.get(block, 'target_role', null, true)),
                vpc_subnet_ids: build.template(block.vpc_subnet_ids),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      db_proxy_endpoint_name: p.child('db_proxy_endpoint_name').out,
      db_proxy_name: p.child('db_proxy_name').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      is_default: p.child('is_default').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_role: p.child('target_role').out,
      vpc_id: p.child('vpc_id').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
      vpc_subnet_ids: p.child('vpc_subnet_ids').out,
    },
    db_proxy_target(name, block): {
      local p = path(['aws_db_proxy_target', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_proxy_target: {
              [name]: std.prune({
                db_cluster_identifier: build.template(std.get(block, 'db_cluster_identifier', null, true)),
                db_instance_identifier: build.template(std.get(block, 'db_instance_identifier', null, true)),
                db_proxy_name: build.template(block.db_proxy_name),
                target_group_name: build.template(block.target_group_name),
              }),
            },
          },
        },
      },
      db_cluster_identifier: p.child('db_cluster_identifier').out,
      db_instance_identifier: p.child('db_instance_identifier').out,
      db_proxy_name: p.child('db_proxy_name').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      port: p.child('port').out,
      rds_resource_id: p.child('rds_resource_id').out,
      target_arn: p.child('target_arn').out,
      target_group_name: p.child('target_group_name').out,
      tracked_cluster_id: p.child('tracked_cluster_id').out,
      type: p.child('type').out,
    },
    db_snapshot(name, block): {
      local p = path(['aws_db_snapshot', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_snapshot: {
              [name]: std.prune({
                db_instance_identifier: build.template(block.db_instance_identifier),
                db_snapshot_identifier: build.template(block.db_snapshot_identifier),
                shared_accounts: build.template(std.get(block, 'shared_accounts', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allocated_storage: p.child('allocated_storage').out,
      availability_zone: p.child('availability_zone').out,
      db_instance_identifier: p.child('db_instance_identifier').out,
      db_snapshot_arn: p.child('db_snapshot_arn').out,
      db_snapshot_identifier: p.child('db_snapshot_identifier').out,
      encrypted: p.child('encrypted').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      iops: p.child('iops').out,
      kms_key_id: p.child('kms_key_id').out,
      license_model: p.child('license_model').out,
      option_group_name: p.child('option_group_name').out,
      port: p.child('port').out,
      shared_accounts: p.child('shared_accounts').out,
      snapshot_type: p.child('snapshot_type').out,
      source_db_snapshot_identifier: p.child('source_db_snapshot_identifier').out,
      source_region: p.child('source_region').out,
      status: p.child('status').out,
      storage_type: p.child('storage_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    db_snapshot_copy(name, block): {
      local p = path(['aws_db_snapshot_copy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_snapshot_copy: {
              [name]: std.prune({
                copy_tags: build.template(std.get(block, 'copy_tags', null, true)),
                destination_region: build.template(std.get(block, 'destination_region', null, true)),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                presigned_url: build.template(std.get(block, 'presigned_url', null, true)),
                shared_accounts: build.template(std.get(block, 'shared_accounts', null, true)),
                source_db_snapshot_identifier: build.template(block.source_db_snapshot_identifier),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_custom_availability_zone: build.template(std.get(block, 'target_custom_availability_zone', null, true)),
                target_db_snapshot_identifier: build.template(block.target_db_snapshot_identifier),
              }),
            },
          },
        },
      },
      allocated_storage: p.child('allocated_storage').out,
      availability_zone: p.child('availability_zone').out,
      copy_tags: p.child('copy_tags').out,
      db_snapshot_arn: p.child('db_snapshot_arn').out,
      destination_region: p.child('destination_region').out,
      encrypted: p.child('encrypted').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      iops: p.child('iops').out,
      kms_key_id: p.child('kms_key_id').out,
      license_model: p.child('license_model').out,
      option_group_name: p.child('option_group_name').out,
      port: p.child('port').out,
      presigned_url: p.child('presigned_url').out,
      shared_accounts: p.child('shared_accounts').out,
      snapshot_type: p.child('snapshot_type').out,
      source_db_snapshot_identifier: p.child('source_db_snapshot_identifier').out,
      source_region: p.child('source_region').out,
      storage_type: p.child('storage_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_custom_availability_zone: p.child('target_custom_availability_zone').out,
      target_db_snapshot_identifier: p.child('target_db_snapshot_identifier').out,
      vpc_id: p.child('vpc_id').out,
    },
    db_subnet_group(name, block): {
      local p = path(['aws_db_subnet_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_db_subnet_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      subnet_ids: p.child('subnet_ids').out,
      supported_network_types: p.child('supported_network_types').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    default_network_acl(name, block): {
      local p = path(['aws_default_network_acl', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_default_network_acl: {
              [name]: std.prune({
                default_network_acl_id: build.template(block.default_network_acl_id),
                subnet_ids: build.template(std.get(block, 'subnet_ids', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_network_acl_id: p.child('default_network_acl_id').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    default_route_table(name, block): {
      local p = path(['aws_default_route_table', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_default_route_table: {
              [name]: std.prune({
                default_route_table_id: build.template(block.default_route_table_id),
                propagating_vgws: build.template(std.get(block, 'propagating_vgws', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_route_table_id: p.child('default_route_table_id').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      propagating_vgws: p.child('propagating_vgws').out,
      route: p.child('route').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    default_security_group(name, block): {
      local p = path(['aws_default_security_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_default_security_group: {
              [name]: std.prune({
                revoke_rules_on_delete: build.template(std.get(block, 'revoke_rules_on_delete', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      egress: p.child('egress').out,
      id: p.child('id').out,
      ingress: p.child('ingress').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      owner_id: p.child('owner_id').out,
      revoke_rules_on_delete: p.child('revoke_rules_on_delete').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    default_subnet(name, block): {
      local p = path(['aws_default_subnet', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_default_subnet: {
              [name]: std.prune({
                assign_ipv6_address_on_creation: build.template(std.get(block, 'assign_ipv6_address_on_creation', null, true)),
                availability_zone: build.template(block.availability_zone),
                customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null, true)),
                enable_dns64: build.template(std.get(block, 'enable_dns64', null, true)),
                enable_resource_name_dns_a_record_on_launch: build.template(std.get(block, 'enable_resource_name_dns_a_record_on_launch', null, true)),
                enable_resource_name_dns_aaaa_record_on_launch: build.template(std.get(block, 'enable_resource_name_dns_aaaa_record_on_launch', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                ipv6_native: build.template(std.get(block, 'ipv6_native', null, true)),
                map_customer_owned_ip_on_launch: build.template(std.get(block, 'map_customer_owned_ip_on_launch', null, true)),
                map_public_ip_on_launch: build.template(std.get(block, 'map_public_ip_on_launch', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      assign_ipv6_address_on_creation: p.child('assign_ipv6_address_on_creation').out,
      availability_zone: p.child('availability_zone').out,
      availability_zone_id: p.child('availability_zone_id').out,
      cidr_block: p.child('cidr_block').out,
      customer_owned_ipv4_pool: p.child('customer_owned_ipv4_pool').out,
      enable_dns64: p.child('enable_dns64').out,
      enable_lni_at_device_index: p.child('enable_lni_at_device_index').out,
      enable_resource_name_dns_a_record_on_launch: p.child('enable_resource_name_dns_a_record_on_launch').out,
      enable_resource_name_dns_aaaa_record_on_launch: p.child('enable_resource_name_dns_aaaa_record_on_launch').out,
      existing_default_subnet: p.child('existing_default_subnet').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      ipv6_cidr_block: p.child('ipv6_cidr_block').out,
      ipv6_cidr_block_association_id: p.child('ipv6_cidr_block_association_id').out,
      ipv6_native: p.child('ipv6_native').out,
      map_customer_owned_ip_on_launch: p.child('map_customer_owned_ip_on_launch').out,
      map_public_ip_on_launch: p.child('map_public_ip_on_launch').out,
      outpost_arn: p.child('outpost_arn').out,
      owner_id: p.child('owner_id').out,
      private_dns_hostname_type_on_launch: p.child('private_dns_hostname_type_on_launch').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    default_vpc(name, block): {
      local p = path(['aws_default_vpc', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_default_vpc: {
              [name]: std.prune({
                assign_generated_ipv6_cidr_block: build.template(std.get(block, 'assign_generated_ipv6_cidr_block', null, true)),
                enable_dns_hostnames: build.template(std.get(block, 'enable_dns_hostnames', null, true)),
                enable_dns_support: build.template(std.get(block, 'enable_dns_support', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                ipv6_ipam_pool_id: build.template(std.get(block, 'ipv6_ipam_pool_id', null, true)),
                ipv6_netmask_length: build.template(std.get(block, 'ipv6_netmask_length', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      assign_generated_ipv6_cidr_block: p.child('assign_generated_ipv6_cidr_block').out,
      cidr_block: p.child('cidr_block').out,
      default_network_acl_id: p.child('default_network_acl_id').out,
      default_route_table_id: p.child('default_route_table_id').out,
      default_security_group_id: p.child('default_security_group_id').out,
      dhcp_options_id: p.child('dhcp_options_id').out,
      enable_dns_hostnames: p.child('enable_dns_hostnames').out,
      enable_dns_support: p.child('enable_dns_support').out,
      enable_network_address_usage_metrics: p.child('enable_network_address_usage_metrics').out,
      existing_default_vpc: p.child('existing_default_vpc').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      instance_tenancy: p.child('instance_tenancy').out,
      ipv6_association_id: p.child('ipv6_association_id').out,
      ipv6_cidr_block: p.child('ipv6_cidr_block').out,
      ipv6_cidr_block_network_border_group: p.child('ipv6_cidr_block_network_border_group').out,
      ipv6_ipam_pool_id: p.child('ipv6_ipam_pool_id').out,
      ipv6_netmask_length: p.child('ipv6_netmask_length').out,
      main_route_table_id: p.child('main_route_table_id').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    default_vpc_dhcp_options(name, block): {
      local p = path(['aws_default_vpc_dhcp_options', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_default_vpc_dhcp_options: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      domain_name: p.child('domain_name').out,
      domain_name_servers: p.child('domain_name_servers').out,
      id: p.child('id').out,
      ipv6_address_preferred_lease_time: p.child('ipv6_address_preferred_lease_time').out,
      netbios_name_servers: p.child('netbios_name_servers').out,
      netbios_node_type: p.child('netbios_node_type').out,
      ntp_servers: p.child('ntp_servers').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    detective_graph(name, block): {
      local p = path(['aws_detective_graph', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_detective_graph: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      created_time: p.child('created_time').out,
      graph_arn: p.child('graph_arn').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    detective_invitation_accepter(name, block): {
      local p = path(['aws_detective_invitation_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_detective_invitation_accepter: {
              [name]: std.prune({
                graph_arn: build.template(block.graph_arn),
              }),
            },
          },
        },
      },
      graph_arn: p.child('graph_arn').out,
      id: p.child('id').out,
    },
    detective_member(name, block): {
      local p = path(['aws_detective_member', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_detective_member: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
                disable_email_notification: build.template(std.get(block, 'disable_email_notification', null, true)),
                email_address: build.template(block.email_address),
                graph_arn: build.template(block.graph_arn),
                message: build.template(std.get(block, 'message', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      administrator_id: p.child('administrator_id').out,
      disable_email_notification: p.child('disable_email_notification').out,
      disabled_reason: p.child('disabled_reason').out,
      email_address: p.child('email_address').out,
      graph_arn: p.child('graph_arn').out,
      id: p.child('id').out,
      invited_time: p.child('invited_time').out,
      message: p.child('message').out,
      status: p.child('status').out,
      updated_time: p.child('updated_time').out,
      volume_usage_in_bytes: p.child('volume_usage_in_bytes').out,
    },
    detective_organization_admin_account(name, block): {
      local p = path(['aws_detective_organization_admin_account', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_detective_organization_admin_account: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      id: p.child('id').out,
    },
    detective_organization_configuration(name, block): {
      local p = path(['aws_detective_organization_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_detective_organization_configuration: {
              [name]: std.prune({
                auto_enable: build.template(block.auto_enable),
                graph_arn: build.template(block.graph_arn),
              }),
            },
          },
        },
      },
      auto_enable: p.child('auto_enable').out,
      graph_arn: p.child('graph_arn').out,
      id: p.child('id').out,
    },
    devicefarm_device_pool(name, block): {
      local p = path(['aws_devicefarm_device_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_devicefarm_device_pool: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                max_devices: build.template(std.get(block, 'max_devices', null, true)),
                name: build.template(block.name),
                project_arn: build.template(block.project_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      max_devices: p.child('max_devices').out,
      name: p.child('name').out,
      project_arn: p.child('project_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    devicefarm_instance_profile(name, block): {
      local p = path(['aws_devicefarm_instance_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_devicefarm_instance_profile: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                exclude_app_packages_from_cleanup: build.template(std.get(block, 'exclude_app_packages_from_cleanup', null, true)),
                name: build.template(block.name),
                package_cleanup: build.template(std.get(block, 'package_cleanup', null, true)),
                reboot_after_use: build.template(std.get(block, 'reboot_after_use', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      exclude_app_packages_from_cleanup: p.child('exclude_app_packages_from_cleanup').out,
      id: p.child('id').out,
      name: p.child('name').out,
      package_cleanup: p.child('package_cleanup').out,
      reboot_after_use: p.child('reboot_after_use').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    devicefarm_network_profile(name, block): {
      local p = path(['aws_devicefarm_network_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_devicefarm_network_profile: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                downlink_bandwidth_bits: build.template(std.get(block, 'downlink_bandwidth_bits', null, true)),
                downlink_delay_ms: build.template(std.get(block, 'downlink_delay_ms', null, true)),
                downlink_jitter_ms: build.template(std.get(block, 'downlink_jitter_ms', null, true)),
                downlink_loss_percent: build.template(std.get(block, 'downlink_loss_percent', null, true)),
                name: build.template(block.name),
                project_arn: build.template(block.project_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
                uplink_bandwidth_bits: build.template(std.get(block, 'uplink_bandwidth_bits', null, true)),
                uplink_delay_ms: build.template(std.get(block, 'uplink_delay_ms', null, true)),
                uplink_jitter_ms: build.template(std.get(block, 'uplink_jitter_ms', null, true)),
                uplink_loss_percent: build.template(std.get(block, 'uplink_loss_percent', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      downlink_bandwidth_bits: p.child('downlink_bandwidth_bits').out,
      downlink_delay_ms: p.child('downlink_delay_ms').out,
      downlink_jitter_ms: p.child('downlink_jitter_ms').out,
      downlink_loss_percent: p.child('downlink_loss_percent').out,
      id: p.child('id').out,
      name: p.child('name').out,
      project_arn: p.child('project_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      uplink_bandwidth_bits: p.child('uplink_bandwidth_bits').out,
      uplink_delay_ms: p.child('uplink_delay_ms').out,
      uplink_jitter_ms: p.child('uplink_jitter_ms').out,
      uplink_loss_percent: p.child('uplink_loss_percent').out,
    },
    devicefarm_project(name, block): {
      local p = path(['aws_devicefarm_project', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_devicefarm_project: {
              [name]: std.prune({
                default_job_timeout_minutes: build.template(std.get(block, 'default_job_timeout_minutes', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_job_timeout_minutes: p.child('default_job_timeout_minutes').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    devicefarm_test_grid_project(name, block): {
      local p = path(['aws_devicefarm_test_grid_project', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_devicefarm_test_grid_project: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    devicefarm_upload(name, block): {
      local p = path(['aws_devicefarm_upload', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_devicefarm_upload: {
              [name]: std.prune({
                content_type: build.template(std.get(block, 'content_type', null, true)),
                name: build.template(block.name),
                project_arn: build.template(block.project_arn),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      category: p.child('category').out,
      content_type: p.child('content_type').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      project_arn: p.child('project_arn').out,
      type: p.child('type').out,
      url: p.child('url').out,
    },
    devopsguru_event_sources_config(name, block): {
      local p = path(['aws_devopsguru_event_sources_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_devopsguru_event_sources_config: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    devopsguru_notification_channel(name, block): {
      local p = path(['aws_devopsguru_notification_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_devopsguru_notification_channel: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    devopsguru_resource_collection(name, block): {
      local p = path(['aws_devopsguru_resource_collection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_devopsguru_resource_collection: {
              [name]: std.prune({
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      type: p.child('type').out,
    },
    devopsguru_service_integration(name, block): {
      local p = path(['aws_devopsguru_service_integration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_devopsguru_service_integration: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    directory_service_conditional_forwarder(name, block): {
      local p = path(['aws_directory_service_conditional_forwarder', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_directory_service_conditional_forwarder: {
              [name]: std.prune({
                directory_id: build.template(block.directory_id),
                dns_ips: build.template(block.dns_ips),
                remote_domain_name: build.template(block.remote_domain_name),
              }),
            },
          },
        },
      },
      directory_id: p.child('directory_id').out,
      dns_ips: p.child('dns_ips').out,
      id: p.child('id').out,
      remote_domain_name: p.child('remote_domain_name').out,
    },
    directory_service_directory(name, block): {
      local p = path(['aws_directory_service_directory', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_directory_service_directory: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                enable_sso: build.template(std.get(block, 'enable_sso', null, true)),
                name: build.template(block.name),
                password: build.template(block.password),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      access_url: p.child('access_url').out,
      alias: p.child('alias').out,
      description: p.child('description').out,
      desired_number_of_domain_controllers: p.child('desired_number_of_domain_controllers').out,
      dns_ip_addresses: p.child('dns_ip_addresses').out,
      edition: p.child('edition').out,
      enable_sso: p.child('enable_sso').out,
      id: p.child('id').out,
      name: p.child('name').out,
      password: p.child('password').out,
      security_group_id: p.child('security_group_id').out,
      short_name: p.child('short_name').out,
      size: p.child('size').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    directory_service_log_subscription(name, block): {
      local p = path(['aws_directory_service_log_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_directory_service_log_subscription: {
              [name]: std.prune({
                directory_id: build.template(block.directory_id),
                log_group_name: build.template(block.log_group_name),
              }),
            },
          },
        },
      },
      directory_id: p.child('directory_id').out,
      id: p.child('id').out,
      log_group_name: p.child('log_group_name').out,
    },
    directory_service_radius_settings(name, block): {
      local p = path(['aws_directory_service_radius_settings', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_directory_service_radius_settings: {
              [name]: std.prune({
                authentication_protocol: build.template(block.authentication_protocol),
                directory_id: build.template(block.directory_id),
                display_label: build.template(block.display_label),
                radius_port: build.template(block.radius_port),
                radius_retries: build.template(block.radius_retries),
                radius_servers: build.template(block.radius_servers),
                radius_timeout: build.template(block.radius_timeout),
                shared_secret: build.template(block.shared_secret),
                use_same_username: build.template(std.get(block, 'use_same_username', null, true)),
              }),
            },
          },
        },
      },
      authentication_protocol: p.child('authentication_protocol').out,
      directory_id: p.child('directory_id').out,
      display_label: p.child('display_label').out,
      id: p.child('id').out,
      radius_port: p.child('radius_port').out,
      radius_retries: p.child('radius_retries').out,
      radius_servers: p.child('radius_servers').out,
      radius_timeout: p.child('radius_timeout').out,
      shared_secret: p.child('shared_secret').out,
      use_same_username: p.child('use_same_username').out,
    },
    directory_service_region(name, block): {
      local p = path(['aws_directory_service_region', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_directory_service_region: {
              [name]: std.prune({
                directory_id: build.template(block.directory_id),
                region_name: build.template(block.region_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      desired_number_of_domain_controllers: p.child('desired_number_of_domain_controllers').out,
      directory_id: p.child('directory_id').out,
      id: p.child('id').out,
      region_name: p.child('region_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    directory_service_shared_directory(name, block): {
      local p = path(['aws_directory_service_shared_directory', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_directory_service_shared_directory: {
              [name]: std.prune({
                directory_id: build.template(block.directory_id),
                method: build.template(std.get(block, 'method', null, true)),
                notes: build.template(std.get(block, 'notes', null, true)),
              }),
            },
          },
        },
      },
      directory_id: p.child('directory_id').out,
      id: p.child('id').out,
      method: p.child('method').out,
      notes: p.child('notes').out,
      shared_directory_id: p.child('shared_directory_id').out,
    },
    directory_service_shared_directory_accepter(name, block): {
      local p = path(['aws_directory_service_shared_directory_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_directory_service_shared_directory_accepter: {
              [name]: std.prune({
                shared_directory_id: build.template(block.shared_directory_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      method: p.child('method').out,
      notes: p.child('notes').out,
      owner_account_id: p.child('owner_account_id').out,
      owner_directory_id: p.child('owner_directory_id').out,
      shared_directory_id: p.child('shared_directory_id').out,
    },
    directory_service_trust(name, block): {
      local p = path(['aws_directory_service_trust', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_directory_service_trust: {
              [name]: std.prune({
                conditional_forwarder_ip_addrs: build.template(std.get(block, 'conditional_forwarder_ip_addrs', null, true)),
                directory_id: build.template(block.directory_id),
                remote_domain_name: build.template(block.remote_domain_name),
                trust_direction: build.template(block.trust_direction),
                trust_password: build.template(block.trust_password),
              }),
            },
          },
        },
      },
      conditional_forwarder_ip_addrs: p.child('conditional_forwarder_ip_addrs').out,
      created_date_time: p.child('created_date_time').out,
      delete_associated_conditional_forwarder: p.child('delete_associated_conditional_forwarder').out,
      directory_id: p.child('directory_id').out,
      id: p.child('id').out,
      last_updated_date_time: p.child('last_updated_date_time').out,
      remote_domain_name: p.child('remote_domain_name').out,
      selective_auth: p.child('selective_auth').out,
      state_last_updated_date_time: p.child('state_last_updated_date_time').out,
      trust_direction: p.child('trust_direction').out,
      trust_password: p.child('trust_password').out,
      trust_state: p.child('trust_state').out,
      trust_state_reason: p.child('trust_state_reason').out,
      trust_type: p.child('trust_type').out,
    },
    dlm_lifecycle_policy(name, block): {
      local p = path(['aws_dlm_lifecycle_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dlm_lifecycle_policy: {
              [name]: std.prune({
                description: build.template(block.description),
                execution_role_arn: build.template(block.execution_role_arn),
                state: build.template(std.get(block, 'state', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      execution_role_arn: p.child('execution_role_arn').out,
      id: p.child('id').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    dms_certificate(name, block): {
      local p = path(['aws_dms_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dms_certificate: {
              [name]: std.prune({
                certificate_id: build.template(block.certificate_id),
                certificate_pem: build.template(std.get(block, 'certificate_pem', null, true)),
                certificate_wallet: build.template(std.get(block, 'certificate_wallet', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      certificate_arn: p.child('certificate_arn').out,
      certificate_id: p.child('certificate_id').out,
      certificate_pem: p.child('certificate_pem').out,
      certificate_wallet: p.child('certificate_wallet').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    dms_endpoint(name, block): {
      local p = path(['aws_dms_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dms_endpoint: {
              [name]: std.prune({
                database_name: build.template(std.get(block, 'database_name', null, true)),
                endpoint_id: build.template(block.endpoint_id),
                endpoint_type: build.template(block.endpoint_type),
                engine_name: build.template(block.engine_name),
                password: build.template(std.get(block, 'password', null, true)),
                pause_replication_tasks: build.template(std.get(block, 'pause_replication_tasks', null, true)),
                port: build.template(std.get(block, 'port', null, true)),
                secrets_manager_access_role_arn: build.template(std.get(block, 'secrets_manager_access_role_arn', null, true)),
                secrets_manager_arn: build.template(std.get(block, 'secrets_manager_arn', null, true)),
                server_name: build.template(std.get(block, 'server_name', null, true)),
                service_access_role: build.template(std.get(block, 'service_access_role', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                username: build.template(std.get(block, 'username', null, true)),
              }),
            },
          },
        },
      },
      certificate_arn: p.child('certificate_arn').out,
      database_name: p.child('database_name').out,
      endpoint_arn: p.child('endpoint_arn').out,
      endpoint_id: p.child('endpoint_id').out,
      endpoint_type: p.child('endpoint_type').out,
      engine_name: p.child('engine_name').out,
      extra_connection_attributes: p.child('extra_connection_attributes').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      password: p.child('password').out,
      pause_replication_tasks: p.child('pause_replication_tasks').out,
      port: p.child('port').out,
      secrets_manager_access_role_arn: p.child('secrets_manager_access_role_arn').out,
      secrets_manager_arn: p.child('secrets_manager_arn').out,
      server_name: p.child('server_name').out,
      service_access_role: p.child('service_access_role').out,
      ssl_mode: p.child('ssl_mode').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      username: p.child('username').out,
    },
    dms_event_subscription(name, block): {
      local p = path(['aws_dms_event_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dms_event_subscription: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                event_categories: build.template(block.event_categories),
                name: build.template(block.name),
                sns_topic_arn: build.template(block.sns_topic_arn),
                source_ids: build.template(std.get(block, 'source_ids', null, true)),
                source_type: build.template(block.source_type),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      enabled: p.child('enabled').out,
      event_categories: p.child('event_categories').out,
      id: p.child('id').out,
      name: p.child('name').out,
      sns_topic_arn: p.child('sns_topic_arn').out,
      source_ids: p.child('source_ids').out,
      source_type: p.child('source_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    dms_replication_config(name, block): {
      local p = path(['aws_dms_replication_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dms_replication_config: {
              [name]: std.prune({
                replication_config_identifier: build.template(block.replication_config_identifier),
                replication_type: build.template(block.replication_type),
                source_endpoint_arn: build.template(block.source_endpoint_arn),
                start_replication: build.template(std.get(block, 'start_replication', null, true)),
                supplemental_settings: build.template(std.get(block, 'supplemental_settings', null, true)),
                table_mappings: build.template(block.table_mappings),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_endpoint_arn: build.template(block.target_endpoint_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      replication_config_identifier: p.child('replication_config_identifier').out,
      replication_settings: p.child('replication_settings').out,
      replication_type: p.child('replication_type').out,
      resource_identifier: p.child('resource_identifier').out,
      source_endpoint_arn: p.child('source_endpoint_arn').out,
      start_replication: p.child('start_replication').out,
      supplemental_settings: p.child('supplemental_settings').out,
      table_mappings: p.child('table_mappings').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_endpoint_arn: p.child('target_endpoint_arn').out,
    },
    dms_replication_instance(name, block): {
      local p = path(['aws_dms_replication_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dms_replication_instance: {
              [name]: std.prune({
                allow_major_version_upgrade: build.template(std.get(block, 'allow_major_version_upgrade', null, true)),
                apply_immediately: build.template(std.get(block, 'apply_immediately', null, true)),
                replication_instance_class: build.template(block.replication_instance_class),
                replication_instance_id: build.template(block.replication_instance_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allocated_storage: p.child('allocated_storage').out,
      allow_major_version_upgrade: p.child('allow_major_version_upgrade').out,
      apply_immediately: p.child('apply_immediately').out,
      auto_minor_version_upgrade: p.child('auto_minor_version_upgrade').out,
      availability_zone: p.child('availability_zone').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      multi_az: p.child('multi_az').out,
      network_type: p.child('network_type').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      publicly_accessible: p.child('publicly_accessible').out,
      replication_instance_arn: p.child('replication_instance_arn').out,
      replication_instance_class: p.child('replication_instance_class').out,
      replication_instance_id: p.child('replication_instance_id').out,
      replication_instance_private_ips: p.child('replication_instance_private_ips').out,
      replication_instance_public_ips: p.child('replication_instance_public_ips').out,
      replication_subnet_group_id: p.child('replication_subnet_group_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    dms_replication_subnet_group(name, block): {
      local p = path(['aws_dms_replication_subnet_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dms_replication_subnet_group: {
              [name]: std.prune({
                replication_subnet_group_description: build.template(block.replication_subnet_group_description),
                replication_subnet_group_id: build.template(block.replication_subnet_group_id),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      replication_subnet_group_arn: p.child('replication_subnet_group_arn').out,
      replication_subnet_group_description: p.child('replication_subnet_group_description').out,
      replication_subnet_group_id: p.child('replication_subnet_group_id').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    dms_replication_task(name, block): {
      local p = path(['aws_dms_replication_task', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dms_replication_task: {
              [name]: std.prune({
                cdc_start_time: build.template(std.get(block, 'cdc_start_time', null, true)),
                migration_type: build.template(block.migration_type),
                replication_instance_arn: build.template(block.replication_instance_arn),
                replication_task_id: build.template(block.replication_task_id),
                resource_identifier: build.template(std.get(block, 'resource_identifier', null, true)),
                source_endpoint_arn: build.template(block.source_endpoint_arn),
                start_replication_task: build.template(std.get(block, 'start_replication_task', null, true)),
                table_mappings: build.template(block.table_mappings),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_endpoint_arn: build.template(block.target_endpoint_arn),
              }),
            },
          },
        },
      },
      cdc_start_position: p.child('cdc_start_position').out,
      cdc_start_time: p.child('cdc_start_time').out,
      id: p.child('id').out,
      migration_type: p.child('migration_type').out,
      replication_instance_arn: p.child('replication_instance_arn').out,
      replication_task_arn: p.child('replication_task_arn').out,
      replication_task_id: p.child('replication_task_id').out,
      replication_task_settings: p.child('replication_task_settings').out,
      resource_identifier: p.child('resource_identifier').out,
      source_endpoint_arn: p.child('source_endpoint_arn').out,
      start_replication_task: p.child('start_replication_task').out,
      status: p.child('status').out,
      table_mappings: p.child('table_mappings').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_endpoint_arn: p.child('target_endpoint_arn').out,
    },
    dms_s3_endpoint(name, block): {
      local p = path(['aws_dms_s3_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dms_s3_endpoint: {
              [name]: std.prune({
                add_column_name: build.template(std.get(block, 'add_column_name', null, true)),
                add_trailing_padding_character: build.template(std.get(block, 'add_trailing_padding_character', null, true)),
                bucket_folder: build.template(std.get(block, 'bucket_folder', null, true)),
                bucket_name: build.template(block.bucket_name),
                canned_acl_for_objects: build.template(std.get(block, 'canned_acl_for_objects', null, true)),
                cdc_inserts_and_updates: build.template(std.get(block, 'cdc_inserts_and_updates', null, true)),
                cdc_inserts_only: build.template(std.get(block, 'cdc_inserts_only', null, true)),
                cdc_max_batch_interval: build.template(std.get(block, 'cdc_max_batch_interval', null, true)),
                cdc_min_file_size: build.template(std.get(block, 'cdc_min_file_size', null, true)),
                cdc_path: build.template(std.get(block, 'cdc_path', null, true)),
                compression_type: build.template(std.get(block, 'compression_type', null, true)),
                csv_delimiter: build.template(std.get(block, 'csv_delimiter', null, true)),
                csv_no_sup_value: build.template(std.get(block, 'csv_no_sup_value', null, true)),
                csv_null_value: build.template(std.get(block, 'csv_null_value', null, true)),
                csv_row_delimiter: build.template(std.get(block, 'csv_row_delimiter', null, true)),
                data_format: build.template(std.get(block, 'data_format', null, true)),
                data_page_size: build.template(std.get(block, 'data_page_size', null, true)),
                date_partition_delimiter: build.template(std.get(block, 'date_partition_delimiter', null, true)),
                date_partition_enabled: build.template(std.get(block, 'date_partition_enabled', null, true)),
                date_partition_sequence: build.template(std.get(block, 'date_partition_sequence', null, true)),
                date_partition_timezone: build.template(std.get(block, 'date_partition_timezone', null, true)),
                detach_target_on_lob_lookup_failure_parquet: build.template(std.get(block, 'detach_target_on_lob_lookup_failure_parquet', null, true)),
                dict_page_size_limit: build.template(std.get(block, 'dict_page_size_limit', null, true)),
                enable_statistics: build.template(std.get(block, 'enable_statistics', null, true)),
                encoding_type: build.template(std.get(block, 'encoding_type', null, true)),
                encryption_mode: build.template(std.get(block, 'encryption_mode', null, true)),
                endpoint_id: build.template(block.endpoint_id),
                endpoint_type: build.template(block.endpoint_type),
                expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null, true)),
                external_table_definition: build.template(std.get(block, 'external_table_definition', null, true)),
                glue_catalog_generation: build.template(std.get(block, 'glue_catalog_generation', null, true)),
                ignore_header_rows: build.template(std.get(block, 'ignore_header_rows', null, true)),
                include_op_for_full_load: build.template(std.get(block, 'include_op_for_full_load', null, true)),
                max_file_size: build.template(std.get(block, 'max_file_size', null, true)),
                parquet_timestamp_in_millisecond: build.template(std.get(block, 'parquet_timestamp_in_millisecond', null, true)),
                parquet_version: build.template(std.get(block, 'parquet_version', null, true)),
                preserve_transactions: build.template(std.get(block, 'preserve_transactions', null, true)),
                rfc_4180: build.template(std.get(block, 'rfc_4180', null, true)),
                row_group_length: build.template(std.get(block, 'row_group_length', null, true)),
                server_side_encryption_kms_key_id: build.template(std.get(block, 'server_side_encryption_kms_key_id', null, true)),
                service_access_role_arn: build.template(block.service_access_role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                timestamp_column_name: build.template(std.get(block, 'timestamp_column_name', null, true)),
                use_csv_no_sup_value: build.template(std.get(block, 'use_csv_no_sup_value', null, true)),
                use_task_start_time_for_full_load_timestamp: build.template(std.get(block, 'use_task_start_time_for_full_load_timestamp', null, true)),
              }),
            },
          },
        },
      },
      add_column_name: p.child('add_column_name').out,
      add_trailing_padding_character: p.child('add_trailing_padding_character').out,
      bucket_folder: p.child('bucket_folder').out,
      bucket_name: p.child('bucket_name').out,
      canned_acl_for_objects: p.child('canned_acl_for_objects').out,
      cdc_inserts_and_updates: p.child('cdc_inserts_and_updates').out,
      cdc_inserts_only: p.child('cdc_inserts_only').out,
      cdc_max_batch_interval: p.child('cdc_max_batch_interval').out,
      cdc_min_file_size: p.child('cdc_min_file_size').out,
      cdc_path: p.child('cdc_path').out,
      certificate_arn: p.child('certificate_arn').out,
      compression_type: p.child('compression_type').out,
      csv_delimiter: p.child('csv_delimiter').out,
      csv_no_sup_value: p.child('csv_no_sup_value').out,
      csv_null_value: p.child('csv_null_value').out,
      csv_row_delimiter: p.child('csv_row_delimiter').out,
      data_format: p.child('data_format').out,
      data_page_size: p.child('data_page_size').out,
      date_partition_delimiter: p.child('date_partition_delimiter').out,
      date_partition_enabled: p.child('date_partition_enabled').out,
      date_partition_sequence: p.child('date_partition_sequence').out,
      date_partition_timezone: p.child('date_partition_timezone').out,
      detach_target_on_lob_lookup_failure_parquet: p.child('detach_target_on_lob_lookup_failure_parquet').out,
      dict_page_size_limit: p.child('dict_page_size_limit').out,
      enable_statistics: p.child('enable_statistics').out,
      encoding_type: p.child('encoding_type').out,
      encryption_mode: p.child('encryption_mode').out,
      endpoint_arn: p.child('endpoint_arn').out,
      endpoint_id: p.child('endpoint_id').out,
      endpoint_type: p.child('endpoint_type').out,
      engine_display_name: p.child('engine_display_name').out,
      expected_bucket_owner: p.child('expected_bucket_owner').out,
      external_id: p.child('external_id').out,
      external_table_definition: p.child('external_table_definition').out,
      glue_catalog_generation: p.child('glue_catalog_generation').out,
      id: p.child('id').out,
      ignore_header_rows: p.child('ignore_header_rows').out,
      include_op_for_full_load: p.child('include_op_for_full_load').out,
      kms_key_arn: p.child('kms_key_arn').out,
      max_file_size: p.child('max_file_size').out,
      parquet_timestamp_in_millisecond: p.child('parquet_timestamp_in_millisecond').out,
      parquet_version: p.child('parquet_version').out,
      preserve_transactions: p.child('preserve_transactions').out,
      rfc_4180: p.child('rfc_4180').out,
      row_group_length: p.child('row_group_length').out,
      server_side_encryption_kms_key_id: p.child('server_side_encryption_kms_key_id').out,
      service_access_role_arn: p.child('service_access_role_arn').out,
      ssl_mode: p.child('ssl_mode').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      timestamp_column_name: p.child('timestamp_column_name').out,
      use_csv_no_sup_value: p.child('use_csv_no_sup_value').out,
      use_task_start_time_for_full_load_timestamp: p.child('use_task_start_time_for_full_load_timestamp').out,
    },
    docdb_cluster(name, block): {
      local p = path(['aws_docdb_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_docdb_cluster: {
              [name]: std.prune({
                allow_major_version_upgrade: build.template(std.get(block, 'allow_major_version_upgrade', null, true)),
                apply_immediately: build.template(std.get(block, 'apply_immediately', null, true)),
                backup_retention_period: build.template(std.get(block, 'backup_retention_period', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                enabled_cloudwatch_logs_exports: build.template(std.get(block, 'enabled_cloudwatch_logs_exports', null, true)),
                engine: build.template(std.get(block, 'engine', null, true)),
                final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null, true)),
                global_cluster_identifier: build.template(std.get(block, 'global_cluster_identifier', null, true)),
                master_password: build.template(std.get(block, 'master_password', null, true)),
                port: build.template(std.get(block, 'port', null, true)),
                skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null, true)),
                snapshot_identifier: build.template(std.get(block, 'snapshot_identifier', null, true)),
                storage_encrypted: build.template(std.get(block, 'storage_encrypted', null, true)),
                storage_type: build.template(std.get(block, 'storage_type', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allow_major_version_upgrade: p.child('allow_major_version_upgrade').out,
      apply_immediately: p.child('apply_immediately').out,
      arn: p.child('arn').out,
      availability_zones: p.child('availability_zones').out,
      backup_retention_period: p.child('backup_retention_period').out,
      cluster_identifier: p.child('cluster_identifier').out,
      cluster_identifier_prefix: p.child('cluster_identifier_prefix').out,
      cluster_members: p.child('cluster_members').out,
      cluster_resource_id: p.child('cluster_resource_id').out,
      db_cluster_parameter_group_name: p.child('db_cluster_parameter_group_name').out,
      db_subnet_group_name: p.child('db_subnet_group_name').out,
      deletion_protection: p.child('deletion_protection').out,
      enabled_cloudwatch_logs_exports: p.child('enabled_cloudwatch_logs_exports').out,
      endpoint: p.child('endpoint').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      final_snapshot_identifier: p.child('final_snapshot_identifier').out,
      global_cluster_identifier: p.child('global_cluster_identifier').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      master_password: p.child('master_password').out,
      master_username: p.child('master_username').out,
      port: p.child('port').out,
      preferred_backup_window: p.child('preferred_backup_window').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      reader_endpoint: p.child('reader_endpoint').out,
      skip_final_snapshot: p.child('skip_final_snapshot').out,
      snapshot_identifier: p.child('snapshot_identifier').out,
      storage_encrypted: p.child('storage_encrypted').out,
      storage_type: p.child('storage_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    docdb_cluster_instance(name, block): {
      local p = path(['aws_docdb_cluster_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_docdb_cluster_instance: {
              [name]: std.prune({
                apply_immediately: build.template(std.get(block, 'apply_immediately', null, true)),
                auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null, true)),
                cluster_identifier: build.template(block.cluster_identifier),
                copy_tags_to_snapshot: build.template(std.get(block, 'copy_tags_to_snapshot', null, true)),
                enable_performance_insights: build.template(std.get(block, 'enable_performance_insights', null, true)),
                engine: build.template(std.get(block, 'engine', null, true)),
                instance_class: build.template(block.instance_class),
                promotion_tier: build.template(std.get(block, 'promotion_tier', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      apply_immediately: p.child('apply_immediately').out,
      arn: p.child('arn').out,
      auto_minor_version_upgrade: p.child('auto_minor_version_upgrade').out,
      availability_zone: p.child('availability_zone').out,
      ca_cert_identifier: p.child('ca_cert_identifier').out,
      cluster_identifier: p.child('cluster_identifier').out,
      copy_tags_to_snapshot: p.child('copy_tags_to_snapshot').out,
      db_subnet_group_name: p.child('db_subnet_group_name').out,
      dbi_resource_id: p.child('dbi_resource_id').out,
      enable_performance_insights: p.child('enable_performance_insights').out,
      endpoint: p.child('endpoint').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      identifier: p.child('identifier').out,
      identifier_prefix: p.child('identifier_prefix').out,
      instance_class: p.child('instance_class').out,
      kms_key_id: p.child('kms_key_id').out,
      performance_insights_kms_key_id: p.child('performance_insights_kms_key_id').out,
      port: p.child('port').out,
      preferred_backup_window: p.child('preferred_backup_window').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      promotion_tier: p.child('promotion_tier').out,
      publicly_accessible: p.child('publicly_accessible').out,
      storage_encrypted: p.child('storage_encrypted').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      writer: p.child('writer').out,
    },
    docdb_cluster_parameter_group(name, block): {
      local p = path(['aws_docdb_cluster_parameter_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_docdb_cluster_parameter_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                family: build.template(block.family),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      family: p.child('family').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    docdb_cluster_snapshot(name, block): {
      local p = path(['aws_docdb_cluster_snapshot', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_docdb_cluster_snapshot: {
              [name]: std.prune({
                db_cluster_identifier: build.template(block.db_cluster_identifier),
                db_cluster_snapshot_identifier: build.template(block.db_cluster_snapshot_identifier),
              }),
            },
          },
        },
      },
      availability_zones: p.child('availability_zones').out,
      db_cluster_identifier: p.child('db_cluster_identifier').out,
      db_cluster_snapshot_arn: p.child('db_cluster_snapshot_arn').out,
      db_cluster_snapshot_identifier: p.child('db_cluster_snapshot_identifier').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      port: p.child('port').out,
      snapshot_type: p.child('snapshot_type').out,
      source_db_cluster_snapshot_arn: p.child('source_db_cluster_snapshot_arn').out,
      status: p.child('status').out,
      storage_encrypted: p.child('storage_encrypted').out,
      vpc_id: p.child('vpc_id').out,
    },
    docdb_event_subscription(name, block): {
      local p = path(['aws_docdb_event_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_docdb_event_subscription: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                event_categories: build.template(std.get(block, 'event_categories', null, true)),
                sns_topic_arn: build.template(block.sns_topic_arn),
                source_ids: build.template(std.get(block, 'source_ids', null, true)),
                source_type: build.template(std.get(block, 'source_type', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      customer_aws_id: p.child('customer_aws_id').out,
      enabled: p.child('enabled').out,
      event_categories: p.child('event_categories').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      sns_topic_arn: p.child('sns_topic_arn').out,
      source_ids: p.child('source_ids').out,
      source_type: p.child('source_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    docdb_global_cluster(name, block): {
      local p = path(['aws_docdb_global_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_docdb_global_cluster: {
              [name]: std.prune({
                database_name: build.template(std.get(block, 'database_name', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                global_cluster_identifier: build.template(block.global_cluster_identifier),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      database_name: p.child('database_name').out,
      deletion_protection: p.child('deletion_protection').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      global_cluster_identifier: p.child('global_cluster_identifier').out,
      global_cluster_members: p.child('global_cluster_members').out,
      global_cluster_resource_id: p.child('global_cluster_resource_id').out,
      id: p.child('id').out,
      source_db_cluster_identifier: p.child('source_db_cluster_identifier').out,
      status: p.child('status').out,
      storage_encrypted: p.child('storage_encrypted').out,
    },
    docdb_subnet_group(name, block): {
      local p = path(['aws_docdb_subnet_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_docdb_subnet_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    docdbelastic_cluster(name, block): {
      local p = path(['aws_docdbelastic_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_docdbelastic_cluster: {
              [name]: std.prune({
                admin_user_name: build.template(block.admin_user_name),
                admin_user_password: build.template(block.admin_user_password),
                auth_type: build.template(block.auth_type),
                name: build.template(block.name),
                shard_capacity: build.template(block.shard_capacity),
                shard_count: build.template(block.shard_count),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      admin_user_name: p.child('admin_user_name').out,
      admin_user_password: p.child('admin_user_password').out,
      arn: p.child('arn').out,
      auth_type: p.child('auth_type').out,
      backup_retention_period: p.child('backup_retention_period').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      name: p.child('name').out,
      preferred_backup_window: p.child('preferred_backup_window').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      shard_capacity: p.child('shard_capacity').out,
      shard_count: p.child('shard_count').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    drs_replication_configuration_template(name, block): {
      local p = path(['aws_drs_replication_configuration_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_drs_replication_configuration_template: {
              [name]: std.prune({
                associate_default_security_group: build.template(block.associate_default_security_group),
                bandwidth_throttling: build.template(block.bandwidth_throttling),
                create_public_ip: build.template(block.create_public_ip),
                data_plane_routing: build.template(block.data_plane_routing),
                default_large_staging_disk_type: build.template(block.default_large_staging_disk_type),
                ebs_encryption: build.template(block.ebs_encryption),
                ebs_encryption_key_arn: build.template(std.get(block, 'ebs_encryption_key_arn', null, true)),
                replication_server_instance_type: build.template(block.replication_server_instance_type),
                replication_servers_security_groups_ids: build.template(block.replication_servers_security_groups_ids),
                staging_area_subnet_id: build.template(block.staging_area_subnet_id),
                staging_area_tags: build.template(block.staging_area_tags),
                tags: build.template(std.get(block, 'tags', null, true)),
                use_dedicated_replication_server: build.template(block.use_dedicated_replication_server),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      associate_default_security_group: p.child('associate_default_security_group').out,
      auto_replicate_new_disks: p.child('auto_replicate_new_disks').out,
      bandwidth_throttling: p.child('bandwidth_throttling').out,
      create_public_ip: p.child('create_public_ip').out,
      data_plane_routing: p.child('data_plane_routing').out,
      default_large_staging_disk_type: p.child('default_large_staging_disk_type').out,
      ebs_encryption: p.child('ebs_encryption').out,
      ebs_encryption_key_arn: p.child('ebs_encryption_key_arn').out,
      id: p.child('id').out,
      replication_server_instance_type: p.child('replication_server_instance_type').out,
      replication_servers_security_groups_ids: p.child('replication_servers_security_groups_ids').out,
      staging_area_subnet_id: p.child('staging_area_subnet_id').out,
      staging_area_tags: p.child('staging_area_tags').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      use_dedicated_replication_server: p.child('use_dedicated_replication_server').out,
    },
    dx_bgp_peer(name, block): {
      local p = path(['aws_dx_bgp_peer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_bgp_peer: {
              [name]: std.prune({
                address_family: build.template(block.address_family),
                bgp_asn: build.template(block.bgp_asn),
                virtual_interface_id: build.template(block.virtual_interface_id),
              }),
            },
          },
        },
      },
      address_family: p.child('address_family').out,
      amazon_address: p.child('amazon_address').out,
      aws_device: p.child('aws_device').out,
      bgp_asn: p.child('bgp_asn').out,
      bgp_auth_key: p.child('bgp_auth_key').out,
      bgp_peer_id: p.child('bgp_peer_id').out,
      bgp_status: p.child('bgp_status').out,
      customer_address: p.child('customer_address').out,
      id: p.child('id').out,
      virtual_interface_id: p.child('virtual_interface_id').out,
    },
    dx_connection(name, block): {
      local p = path(['aws_dx_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_connection: {
              [name]: std.prune({
                bandwidth: build.template(block.bandwidth),
                location: build.template(block.location),
                name: build.template(block.name),
                request_macsec: build.template(std.get(block, 'request_macsec', null, true)),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_device: p.child('aws_device').out,
      bandwidth: p.child('bandwidth').out,
      encryption_mode: p.child('encryption_mode').out,
      has_logical_redundancy: p.child('has_logical_redundancy').out,
      id: p.child('id').out,
      jumbo_frame_capable: p.child('jumbo_frame_capable').out,
      location: p.child('location').out,
      macsec_capable: p.child('macsec_capable').out,
      name: p.child('name').out,
      owner_account_id: p.child('owner_account_id').out,
      partner_name: p.child('partner_name').out,
      port_encryption_status: p.child('port_encryption_status').out,
      provider_name: p.child('provider_name').out,
      request_macsec: p.child('request_macsec').out,
      skip_destroy: p.child('skip_destroy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vlan_id: p.child('vlan_id').out,
    },
    dx_connection_association(name, block): {
      local p = path(['aws_dx_connection_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_connection_association: {
              [name]: std.prune({
                connection_id: build.template(block.connection_id),
                lag_id: build.template(block.lag_id),
              }),
            },
          },
        },
      },
      connection_id: p.child('connection_id').out,
      id: p.child('id').out,
      lag_id: p.child('lag_id').out,
    },
    dx_connection_confirmation(name, block): {
      local p = path(['aws_dx_connection_confirmation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_connection_confirmation: {
              [name]: std.prune({
                connection_id: build.template(block.connection_id),
              }),
            },
          },
        },
      },
      connection_id: p.child('connection_id').out,
      id: p.child('id').out,
    },
    dx_gateway(name, block): {
      local p = path(['aws_dx_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_gateway: {
              [name]: std.prune({
                amazon_side_asn: build.template(block.amazon_side_asn),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      amazon_side_asn: p.child('amazon_side_asn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner_account_id: p.child('owner_account_id').out,
    },
    dx_gateway_association(name, block): {
      local p = path(['aws_dx_gateway_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_gateway_association: {
              [name]: std.prune({
                dx_gateway_id: build.template(block.dx_gateway_id),
                proposal_id: build.template(std.get(block, 'proposal_id', null, true)),
                vpn_gateway_id: build.template(std.get(block, 'vpn_gateway_id', null, true)),
              }),
            },
          },
        },
      },
      allowed_prefixes: p.child('allowed_prefixes').out,
      associated_gateway_id: p.child('associated_gateway_id').out,
      associated_gateway_owner_account_id: p.child('associated_gateway_owner_account_id').out,
      associated_gateway_type: p.child('associated_gateway_type').out,
      dx_gateway_association_id: p.child('dx_gateway_association_id').out,
      dx_gateway_id: p.child('dx_gateway_id').out,
      dx_gateway_owner_account_id: p.child('dx_gateway_owner_account_id').out,
      id: p.child('id').out,
      proposal_id: p.child('proposal_id').out,
      vpn_gateway_id: p.child('vpn_gateway_id').out,
    },
    dx_gateway_association_proposal(name, block): {
      local p = path(['aws_dx_gateway_association_proposal', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_gateway_association_proposal: {
              [name]: std.prune({
                associated_gateway_id: build.template(block.associated_gateway_id),
                dx_gateway_id: build.template(block.dx_gateway_id),
                dx_gateway_owner_account_id: build.template(block.dx_gateway_owner_account_id),
              }),
            },
          },
        },
      },
      allowed_prefixes: p.child('allowed_prefixes').out,
      associated_gateway_id: p.child('associated_gateway_id').out,
      associated_gateway_owner_account_id: p.child('associated_gateway_owner_account_id').out,
      associated_gateway_type: p.child('associated_gateway_type').out,
      dx_gateway_id: p.child('dx_gateway_id').out,
      dx_gateway_owner_account_id: p.child('dx_gateway_owner_account_id').out,
      id: p.child('id').out,
    },
    dx_hosted_connection(name, block): {
      local p = path(['aws_dx_hosted_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_hosted_connection: {
              [name]: std.prune({
                bandwidth: build.template(block.bandwidth),
                connection_id: build.template(block.connection_id),
                name: build.template(block.name),
                owner_account_id: build.template(block.owner_account_id),
                vlan: build.template(block.vlan),
              }),
            },
          },
        },
      },
      aws_device: p.child('aws_device').out,
      bandwidth: p.child('bandwidth').out,
      connection_id: p.child('connection_id').out,
      has_logical_redundancy: p.child('has_logical_redundancy').out,
      id: p.child('id').out,
      jumbo_frame_capable: p.child('jumbo_frame_capable').out,
      lag_id: p.child('lag_id').out,
      loa_issue_time: p.child('loa_issue_time').out,
      location: p.child('location').out,
      name: p.child('name').out,
      owner_account_id: p.child('owner_account_id').out,
      partner_name: p.child('partner_name').out,
      provider_name: p.child('provider_name').out,
      region: p.child('region').out,
      state: p.child('state').out,
      vlan: p.child('vlan').out,
    },
    dx_hosted_private_virtual_interface(name, block): {
      local p = path(['aws_dx_hosted_private_virtual_interface', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_hosted_private_virtual_interface: {
              [name]: std.prune({
                address_family: build.template(block.address_family),
                bgp_asn: build.template(block.bgp_asn),
                connection_id: build.template(block.connection_id),
                mtu: build.template(std.get(block, 'mtu', null, true)),
                name: build.template(block.name),
                owner_account_id: build.template(block.owner_account_id),
                vlan: build.template(block.vlan),
              }),
            },
          },
        },
      },
      address_family: p.child('address_family').out,
      amazon_address: p.child('amazon_address').out,
      amazon_side_asn: p.child('amazon_side_asn').out,
      arn: p.child('arn').out,
      aws_device: p.child('aws_device').out,
      bgp_asn: p.child('bgp_asn').out,
      bgp_auth_key: p.child('bgp_auth_key').out,
      connection_id: p.child('connection_id').out,
      customer_address: p.child('customer_address').out,
      id: p.child('id').out,
      jumbo_frame_capable: p.child('jumbo_frame_capable').out,
      mtu: p.child('mtu').out,
      name: p.child('name').out,
      owner_account_id: p.child('owner_account_id').out,
      vlan: p.child('vlan').out,
    },
    dx_hosted_private_virtual_interface_accepter(name, block): {
      local p = path(['aws_dx_hosted_private_virtual_interface_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_hosted_private_virtual_interface_accepter: {
              [name]: std.prune({
                dx_gateway_id: build.template(std.get(block, 'dx_gateway_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_interface_id: build.template(block.virtual_interface_id),
                vpn_gateway_id: build.template(std.get(block, 'vpn_gateway_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      dx_gateway_id: p.child('dx_gateway_id').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      virtual_interface_id: p.child('virtual_interface_id').out,
      vpn_gateway_id: p.child('vpn_gateway_id').out,
    },
    dx_hosted_public_virtual_interface(name, block): {
      local p = path(['aws_dx_hosted_public_virtual_interface', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_hosted_public_virtual_interface: {
              [name]: std.prune({
                address_family: build.template(block.address_family),
                bgp_asn: build.template(block.bgp_asn),
                connection_id: build.template(block.connection_id),
                name: build.template(block.name),
                owner_account_id: build.template(block.owner_account_id),
                route_filter_prefixes: build.template(block.route_filter_prefixes),
                vlan: build.template(block.vlan),
              }),
            },
          },
        },
      },
      address_family: p.child('address_family').out,
      amazon_address: p.child('amazon_address').out,
      amazon_side_asn: p.child('amazon_side_asn').out,
      arn: p.child('arn').out,
      aws_device: p.child('aws_device').out,
      bgp_asn: p.child('bgp_asn').out,
      bgp_auth_key: p.child('bgp_auth_key').out,
      connection_id: p.child('connection_id').out,
      customer_address: p.child('customer_address').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner_account_id: p.child('owner_account_id').out,
      route_filter_prefixes: p.child('route_filter_prefixes').out,
      vlan: p.child('vlan').out,
    },
    dx_hosted_public_virtual_interface_accepter(name, block): {
      local p = path(['aws_dx_hosted_public_virtual_interface_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_hosted_public_virtual_interface_accepter: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_interface_id: build.template(block.virtual_interface_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      virtual_interface_id: p.child('virtual_interface_id').out,
    },
    dx_hosted_transit_virtual_interface(name, block): {
      local p = path(['aws_dx_hosted_transit_virtual_interface', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_hosted_transit_virtual_interface: {
              [name]: std.prune({
                address_family: build.template(block.address_family),
                bgp_asn: build.template(block.bgp_asn),
                connection_id: build.template(block.connection_id),
                mtu: build.template(std.get(block, 'mtu', null, true)),
                name: build.template(block.name),
                owner_account_id: build.template(block.owner_account_id),
                vlan: build.template(block.vlan),
              }),
            },
          },
        },
      },
      address_family: p.child('address_family').out,
      amazon_address: p.child('amazon_address').out,
      amazon_side_asn: p.child('amazon_side_asn').out,
      arn: p.child('arn').out,
      aws_device: p.child('aws_device').out,
      bgp_asn: p.child('bgp_asn').out,
      bgp_auth_key: p.child('bgp_auth_key').out,
      connection_id: p.child('connection_id').out,
      customer_address: p.child('customer_address').out,
      id: p.child('id').out,
      jumbo_frame_capable: p.child('jumbo_frame_capable').out,
      mtu: p.child('mtu').out,
      name: p.child('name').out,
      owner_account_id: p.child('owner_account_id').out,
      vlan: p.child('vlan').out,
    },
    dx_hosted_transit_virtual_interface_accepter(name, block): {
      local p = path(['aws_dx_hosted_transit_virtual_interface_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_hosted_transit_virtual_interface_accepter: {
              [name]: std.prune({
                dx_gateway_id: build.template(block.dx_gateway_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_interface_id: build.template(block.virtual_interface_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      dx_gateway_id: p.child('dx_gateway_id').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      virtual_interface_id: p.child('virtual_interface_id').out,
    },
    dx_lag(name, block): {
      local p = path(['aws_dx_lag', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_lag: {
              [name]: std.prune({
                connection_id: build.template(std.get(block, 'connection_id', null, true)),
                connections_bandwidth: build.template(block.connections_bandwidth),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                location: build.template(block.location),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      connection_id: p.child('connection_id').out,
      connections_bandwidth: p.child('connections_bandwidth').out,
      force_destroy: p.child('force_destroy').out,
      has_logical_redundancy: p.child('has_logical_redundancy').out,
      id: p.child('id').out,
      jumbo_frame_capable: p.child('jumbo_frame_capable').out,
      location: p.child('location').out,
      name: p.child('name').out,
      owner_account_id: p.child('owner_account_id').out,
      provider_name: p.child('provider_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    dx_macsec_key_association(name, block): {
      local p = path(['aws_dx_macsec_key_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_macsec_key_association: {
              [name]: std.prune({
                cak: build.template(std.get(block, 'cak', null, true)),
                connection_id: build.template(block.connection_id),
              }),
            },
          },
        },
      },
      cak: p.child('cak').out,
      ckn: p.child('ckn').out,
      connection_id: p.child('connection_id').out,
      id: p.child('id').out,
      secret_arn: p.child('secret_arn').out,
      start_on: p.child('start_on').out,
      state: p.child('state').out,
    },
    dx_private_virtual_interface(name, block): {
      local p = path(['aws_dx_private_virtual_interface', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_private_virtual_interface: {
              [name]: std.prune({
                address_family: build.template(block.address_family),
                bgp_asn: build.template(block.bgp_asn),
                connection_id: build.template(block.connection_id),
                dx_gateway_id: build.template(std.get(block, 'dx_gateway_id', null, true)),
                mtu: build.template(std.get(block, 'mtu', null, true)),
                name: build.template(block.name),
                sitelink_enabled: build.template(std.get(block, 'sitelink_enabled', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                vlan: build.template(block.vlan),
                vpn_gateway_id: build.template(std.get(block, 'vpn_gateway_id', null, true)),
              }),
            },
          },
        },
      },
      address_family: p.child('address_family').out,
      amazon_address: p.child('amazon_address').out,
      amazon_side_asn: p.child('amazon_side_asn').out,
      arn: p.child('arn').out,
      aws_device: p.child('aws_device').out,
      bgp_asn: p.child('bgp_asn').out,
      bgp_auth_key: p.child('bgp_auth_key').out,
      connection_id: p.child('connection_id').out,
      customer_address: p.child('customer_address').out,
      dx_gateway_id: p.child('dx_gateway_id').out,
      id: p.child('id').out,
      jumbo_frame_capable: p.child('jumbo_frame_capable').out,
      mtu: p.child('mtu').out,
      name: p.child('name').out,
      sitelink_enabled: p.child('sitelink_enabled').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vlan: p.child('vlan').out,
      vpn_gateway_id: p.child('vpn_gateway_id').out,
    },
    dx_public_virtual_interface(name, block): {
      local p = path(['aws_dx_public_virtual_interface', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_public_virtual_interface: {
              [name]: std.prune({
                address_family: build.template(block.address_family),
                bgp_asn: build.template(block.bgp_asn),
                connection_id: build.template(block.connection_id),
                name: build.template(block.name),
                route_filter_prefixes: build.template(block.route_filter_prefixes),
                tags: build.template(std.get(block, 'tags', null, true)),
                vlan: build.template(block.vlan),
              }),
            },
          },
        },
      },
      address_family: p.child('address_family').out,
      amazon_address: p.child('amazon_address').out,
      amazon_side_asn: p.child('amazon_side_asn').out,
      arn: p.child('arn').out,
      aws_device: p.child('aws_device').out,
      bgp_asn: p.child('bgp_asn').out,
      bgp_auth_key: p.child('bgp_auth_key').out,
      connection_id: p.child('connection_id').out,
      customer_address: p.child('customer_address').out,
      id: p.child('id').out,
      name: p.child('name').out,
      route_filter_prefixes: p.child('route_filter_prefixes').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vlan: p.child('vlan').out,
    },
    dx_transit_virtual_interface(name, block): {
      local p = path(['aws_dx_transit_virtual_interface', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dx_transit_virtual_interface: {
              [name]: std.prune({
                address_family: build.template(block.address_family),
                bgp_asn: build.template(block.bgp_asn),
                connection_id: build.template(block.connection_id),
                dx_gateway_id: build.template(block.dx_gateway_id),
                mtu: build.template(std.get(block, 'mtu', null, true)),
                name: build.template(block.name),
                sitelink_enabled: build.template(std.get(block, 'sitelink_enabled', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                vlan: build.template(block.vlan),
              }),
            },
          },
        },
      },
      address_family: p.child('address_family').out,
      amazon_address: p.child('amazon_address').out,
      amazon_side_asn: p.child('amazon_side_asn').out,
      arn: p.child('arn').out,
      aws_device: p.child('aws_device').out,
      bgp_asn: p.child('bgp_asn').out,
      bgp_auth_key: p.child('bgp_auth_key').out,
      connection_id: p.child('connection_id').out,
      customer_address: p.child('customer_address').out,
      dx_gateway_id: p.child('dx_gateway_id').out,
      id: p.child('id').out,
      jumbo_frame_capable: p.child('jumbo_frame_capable').out,
      mtu: p.child('mtu').out,
      name: p.child('name').out,
      sitelink_enabled: p.child('sitelink_enabled').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vlan: p.child('vlan').out,
    },
    dynamodb_contributor_insights(name, block): {
      local p = path(['aws_dynamodb_contributor_insights', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dynamodb_contributor_insights: {
              [name]: std.prune({
                index_name: build.template(std.get(block, 'index_name', null, true)),
                table_name: build.template(block.table_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      index_name: p.child('index_name').out,
      table_name: p.child('table_name').out,
    },
    dynamodb_global_table(name, block): {
      local p = path(['aws_dynamodb_global_table', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dynamodb_global_table: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    dynamodb_kinesis_streaming_destination(name, block): {
      local p = path(['aws_dynamodb_kinesis_streaming_destination', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dynamodb_kinesis_streaming_destination: {
              [name]: std.prune({
                stream_arn: build.template(block.stream_arn),
                table_name: build.template(block.table_name),
              }),
            },
          },
        },
      },
      approximate_creation_date_time_precision: p.child('approximate_creation_date_time_precision').out,
      id: p.child('id').out,
      stream_arn: p.child('stream_arn').out,
      table_name: p.child('table_name').out,
    },
    dynamodb_resource_policy(name, block): {
      local p = path(['aws_dynamodb_resource_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dynamodb_resource_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      confirm_remove_self_resource_access: p.child('confirm_remove_self_resource_access').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
      resource_arn: p.child('resource_arn').out,
      revision_id: p.child('revision_id').out,
    },
    dynamodb_table(name, block): {
      local p = path(['aws_dynamodb_table', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dynamodb_table: {
              [name]: std.prune({
                billing_mode: build.template(std.get(block, 'billing_mode', null, true)),
                deletion_protection_enabled: build.template(std.get(block, 'deletion_protection_enabled', null, true)),
                name: build.template(block.name),
                range_key: build.template(std.get(block, 'range_key', null, true)),
                restore_date_time: build.template(std.get(block, 'restore_date_time', null, true)),
                restore_source_name: build.template(std.get(block, 'restore_source_name', null, true)),
                restore_source_table_arn: build.template(std.get(block, 'restore_source_table_arn', null, true)),
                restore_to_latest_time: build.template(std.get(block, 'restore_to_latest_time', null, true)),
                stream_enabled: build.template(std.get(block, 'stream_enabled', null, true)),
                table_class: build.template(std.get(block, 'table_class', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      billing_mode: p.child('billing_mode').out,
      deletion_protection_enabled: p.child('deletion_protection_enabled').out,
      hash_key: p.child('hash_key').out,
      id: p.child('id').out,
      name: p.child('name').out,
      range_key: p.child('range_key').out,
      read_capacity: p.child('read_capacity').out,
      restore_date_time: p.child('restore_date_time').out,
      restore_source_name: p.child('restore_source_name').out,
      restore_source_table_arn: p.child('restore_source_table_arn').out,
      restore_to_latest_time: p.child('restore_to_latest_time').out,
      stream_arn: p.child('stream_arn').out,
      stream_enabled: p.child('stream_enabled').out,
      stream_label: p.child('stream_label').out,
      stream_view_type: p.child('stream_view_type').out,
      table_class: p.child('table_class').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      write_capacity: p.child('write_capacity').out,
    },
    dynamodb_table_export(name, block): {
      local p = path(['aws_dynamodb_table_export', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dynamodb_table_export: {
              [name]: std.prune({
                export_format: build.template(std.get(block, 'export_format', null, true)),
                s3_bucket: build.template(block.s3_bucket),
                s3_sse_kms_key_id: build.template(std.get(block, 's3_sse_kms_key_id', null, true)),
                table_arn: build.template(block.table_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      billed_size_in_bytes: p.child('billed_size_in_bytes').out,
      end_time: p.child('end_time').out,
      export_format: p.child('export_format').out,
      export_status: p.child('export_status').out,
      export_time: p.child('export_time').out,
      id: p.child('id').out,
      item_count: p.child('item_count').out,
      manifest_files_s3_key: p.child('manifest_files_s3_key').out,
      s3_bucket: p.child('s3_bucket').out,
      s3_bucket_owner: p.child('s3_bucket_owner').out,
      s3_prefix: p.child('s3_prefix').out,
      s3_sse_algorithm: p.child('s3_sse_algorithm').out,
      s3_sse_kms_key_id: p.child('s3_sse_kms_key_id').out,
      start_time: p.child('start_time').out,
      table_arn: p.child('table_arn').out,
    },
    dynamodb_table_item(name, block): {
      local p = path(['aws_dynamodb_table_item', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dynamodb_table_item: {
              [name]: std.prune({
                hash_key: build.template(block.hash_key),
                item: build.template(block.item),
                range_key: build.template(std.get(block, 'range_key', null, true)),
                table_name: build.template(block.table_name),
              }),
            },
          },
        },
      },
      hash_key: p.child('hash_key').out,
      id: p.child('id').out,
      item: p.child('item').out,
      range_key: p.child('range_key').out,
      table_name: p.child('table_name').out,
    },
    dynamodb_table_replica(name, block): {
      local p = path(['aws_dynamodb_table_replica', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dynamodb_table_replica: {
              [name]: std.prune({
                global_table_arn: build.template(block.global_table_arn),
                point_in_time_recovery: build.template(std.get(block, 'point_in_time_recovery', null, true)),
                table_class_override: build.template(std.get(block, 'table_class_override', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      global_table_arn: p.child('global_table_arn').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      point_in_time_recovery: p.child('point_in_time_recovery').out,
      table_class_override: p.child('table_class_override').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    dynamodb_tag(name, block): {
      local p = path(['aws_dynamodb_tag', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_dynamodb_tag: {
              [name]: std.prune({
                key: build.template(block.key),
                resource_arn: build.template(block.resource_arn),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key: p.child('key').out,
      resource_arn: p.child('resource_arn').out,
      value: p.child('value').out,
    },
    ebs_default_kms_key(name, block): {
      local p = path(['aws_ebs_default_kms_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ebs_default_kms_key: {
              [name]: std.prune({
                key_arn: build.template(block.key_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key_arn: p.child('key_arn').out,
    },
    ebs_encryption_by_default(name, block): {
      local p = path(['aws_ebs_encryption_by_default', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ebs_encryption_by_default: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
    },
    ebs_fast_snapshot_restore(name, block): {
      local p = path(['aws_ebs_fast_snapshot_restore', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ebs_fast_snapshot_restore: {
              [name]: std.prune({
                availability_zone: build.template(block.availability_zone),
                snapshot_id: build.template(block.snapshot_id),
              }),
            },
          },
        },
      },
      availability_zone: p.child('availability_zone').out,
      id: p.child('id').out,
      snapshot_id: p.child('snapshot_id').out,
      state: p.child('state').out,
    },
    ebs_snapshot(name, block): {
      local p = path(['aws_ebs_snapshot', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ebs_snapshot: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                outpost_arn: build.template(std.get(block, 'outpost_arn', null, true)),
                permanent_restore: build.template(std.get(block, 'permanent_restore', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                temporary_restore_days: build.template(std.get(block, 'temporary_restore_days', null, true)),
                volume_id: build.template(block.volume_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      data_encryption_key_id: p.child('data_encryption_key_id').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      outpost_arn: p.child('outpost_arn').out,
      owner_alias: p.child('owner_alias').out,
      owner_id: p.child('owner_id').out,
      permanent_restore: p.child('permanent_restore').out,
      storage_tier: p.child('storage_tier').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      temporary_restore_days: p.child('temporary_restore_days').out,
      volume_id: p.child('volume_id').out,
      volume_size: p.child('volume_size').out,
    },
    ebs_snapshot_block_public_access(name, block): {
      local p = path(['aws_ebs_snapshot_block_public_access', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ebs_snapshot_block_public_access: {
              [name]: std.prune({
                state: build.template(block.state),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      state: p.child('state').out,
    },
    ebs_snapshot_copy(name, block): {
      local p = path(['aws_ebs_snapshot_copy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ebs_snapshot_copy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                encrypted: build.template(std.get(block, 'encrypted', null, true)),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                permanent_restore: build.template(std.get(block, 'permanent_restore', null, true)),
                source_region: build.template(block.source_region),
                source_snapshot_id: build.template(block.source_snapshot_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                temporary_restore_days: build.template(std.get(block, 'temporary_restore_days', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      data_encryption_key_id: p.child('data_encryption_key_id').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      outpost_arn: p.child('outpost_arn').out,
      owner_alias: p.child('owner_alias').out,
      owner_id: p.child('owner_id').out,
      permanent_restore: p.child('permanent_restore').out,
      source_region: p.child('source_region').out,
      source_snapshot_id: p.child('source_snapshot_id').out,
      storage_tier: p.child('storage_tier').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      temporary_restore_days: p.child('temporary_restore_days').out,
      volume_id: p.child('volume_id').out,
      volume_size: p.child('volume_size').out,
    },
    ebs_snapshot_import(name, block): {
      local p = path(['aws_ebs_snapshot_import', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ebs_snapshot_import: {
              [name]: std.prune({
                encrypted: build.template(std.get(block, 'encrypted', null, true)),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                permanent_restore: build.template(std.get(block, 'permanent_restore', null, true)),
                role_name: build.template(std.get(block, 'role_name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                temporary_restore_days: build.template(std.get(block, 'temporary_restore_days', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      data_encryption_key_id: p.child('data_encryption_key_id').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      outpost_arn: p.child('outpost_arn').out,
      owner_alias: p.child('owner_alias').out,
      owner_id: p.child('owner_id').out,
      permanent_restore: p.child('permanent_restore').out,
      role_name: p.child('role_name').out,
      storage_tier: p.child('storage_tier').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      temporary_restore_days: p.child('temporary_restore_days').out,
      volume_id: p.child('volume_id').out,
      volume_size: p.child('volume_size').out,
    },
    ebs_volume(name, block): {
      local p = path(['aws_ebs_volume', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ebs_volume: {
              [name]: std.prune({
                availability_zone: build.template(block.availability_zone),
                final_snapshot: build.template(std.get(block, 'final_snapshot', null, true)),
                multi_attach_enabled: build.template(std.get(block, 'multi_attach_enabled', null, true)),
                outpost_arn: build.template(std.get(block, 'outpost_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      encrypted: p.child('encrypted').out,
      final_snapshot: p.child('final_snapshot').out,
      id: p.child('id').out,
      iops: p.child('iops').out,
      kms_key_id: p.child('kms_key_id').out,
      multi_attach_enabled: p.child('multi_attach_enabled').out,
      outpost_arn: p.child('outpost_arn').out,
      size: p.child('size').out,
      snapshot_id: p.child('snapshot_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      throughput: p.child('throughput').out,
      type: p.child('type').out,
    },
    ec2_availability_zone_group(name, block): {
      local p = path(['aws_ec2_availability_zone_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_availability_zone_group: {
              [name]: std.prune({
                group_name: build.template(block.group_name),
                opt_in_status: build.template(block.opt_in_status),
              }),
            },
          },
        },
      },
      group_name: p.child('group_name').out,
      id: p.child('id').out,
      opt_in_status: p.child('opt_in_status').out,
    },
    ec2_capacity_block_reservation(name, block): {
      local p = path(['aws_ec2_capacity_block_reservation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_capacity_block_reservation: {
              [name]: std.prune({
                capacity_block_offering_id: build.template(block.capacity_block_offering_id),
                instance_platform: build.template(block.instance_platform),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      capacity_block_offering_id: p.child('capacity_block_offering_id').out,
      created_date: p.child('created_date').out,
      ebs_optimized: p.child('ebs_optimized').out,
      end_date: p.child('end_date').out,
      end_date_type: p.child('end_date_type').out,
      id: p.child('id').out,
      instance_count: p.child('instance_count').out,
      instance_platform: p.child('instance_platform').out,
      instance_type: p.child('instance_type').out,
      outpost_arn: p.child('outpost_arn').out,
      placement_group_arn: p.child('placement_group_arn').out,
      reservation_type: p.child('reservation_type').out,
      start_date: p.child('start_date').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tenancy: p.child('tenancy').out,
    },
    ec2_capacity_reservation(name, block): {
      local p = path(['aws_ec2_capacity_reservation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_capacity_reservation: {
              [name]: std.prune({
                availability_zone: build.template(block.availability_zone),
                ebs_optimized: build.template(std.get(block, 'ebs_optimized', null, true)),
                end_date: build.template(std.get(block, 'end_date', null, true)),
                end_date_type: build.template(std.get(block, 'end_date_type', null, true)),
                ephemeral_storage: build.template(std.get(block, 'ephemeral_storage', null, true)),
                instance_count: build.template(block.instance_count),
                instance_match_criteria: build.template(std.get(block, 'instance_match_criteria', null, true)),
                instance_platform: build.template(block.instance_platform),
                instance_type: build.template(block.instance_type),
                outpost_arn: build.template(std.get(block, 'outpost_arn', null, true)),
                placement_group_arn: build.template(std.get(block, 'placement_group_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tenancy: build.template(std.get(block, 'tenancy', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      ebs_optimized: p.child('ebs_optimized').out,
      end_date: p.child('end_date').out,
      end_date_type: p.child('end_date_type').out,
      ephemeral_storage: p.child('ephemeral_storage').out,
      id: p.child('id').out,
      instance_count: p.child('instance_count').out,
      instance_match_criteria: p.child('instance_match_criteria').out,
      instance_platform: p.child('instance_platform').out,
      instance_type: p.child('instance_type').out,
      outpost_arn: p.child('outpost_arn').out,
      owner_id: p.child('owner_id').out,
      placement_group_arn: p.child('placement_group_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tenancy: p.child('tenancy').out,
    },
    ec2_carrier_gateway(name, block): {
      local p = path(['aws_ec2_carrier_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_carrier_gateway: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    ec2_client_vpn_authorization_rule(name, block): {
      local p = path(['aws_ec2_client_vpn_authorization_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_client_vpn_authorization_rule: {
              [name]: std.prune({
                access_group_id: build.template(std.get(block, 'access_group_id', null, true)),
                authorize_all_groups: build.template(std.get(block, 'authorize_all_groups', null, true)),
                client_vpn_endpoint_id: build.template(block.client_vpn_endpoint_id),
                description: build.template(std.get(block, 'description', null, true)),
                target_network_cidr: build.template(block.target_network_cidr),
              }),
            },
          },
        },
      },
      access_group_id: p.child('access_group_id').out,
      authorize_all_groups: p.child('authorize_all_groups').out,
      client_vpn_endpoint_id: p.child('client_vpn_endpoint_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      target_network_cidr: p.child('target_network_cidr').out,
    },
    ec2_client_vpn_endpoint(name, block): {
      local p = path(['aws_ec2_client_vpn_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_client_vpn_endpoint: {
              [name]: std.prune({
                client_cidr_block: build.template(block.client_cidr_block),
                description: build.template(std.get(block, 'description', null, true)),
                dns_servers: build.template(std.get(block, 'dns_servers', null, true)),
                self_service_portal: build.template(std.get(block, 'self_service_portal', null, true)),
                server_certificate_arn: build.template(block.server_certificate_arn),
                session_timeout_hours: build.template(std.get(block, 'session_timeout_hours', null, true)),
                split_tunnel: build.template(std.get(block, 'split_tunnel', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                transport_protocol: build.template(std.get(block, 'transport_protocol', null, true)),
                vpn_port: build.template(std.get(block, 'vpn_port', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      client_cidr_block: p.child('client_cidr_block').out,
      description: p.child('description').out,
      dns_name: p.child('dns_name').out,
      dns_servers: p.child('dns_servers').out,
      id: p.child('id').out,
      security_group_ids: p.child('security_group_ids').out,
      self_service_portal: p.child('self_service_portal').out,
      self_service_portal_url: p.child('self_service_portal_url').out,
      server_certificate_arn: p.child('server_certificate_arn').out,
      session_timeout_hours: p.child('session_timeout_hours').out,
      split_tunnel: p.child('split_tunnel').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transport_protocol: p.child('transport_protocol').out,
      vpc_id: p.child('vpc_id').out,
      vpn_port: p.child('vpn_port').out,
    },
    ec2_client_vpn_network_association(name, block): {
      local p = path(['aws_ec2_client_vpn_network_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_client_vpn_network_association: {
              [name]: std.prune({
                client_vpn_endpoint_id: build.template(block.client_vpn_endpoint_id),
                subnet_id: build.template(block.subnet_id),
              }),
            },
          },
        },
      },
      association_id: p.child('association_id').out,
      client_vpn_endpoint_id: p.child('client_vpn_endpoint_id').out,
      id: p.child('id').out,
      subnet_id: p.child('subnet_id').out,
      vpc_id: p.child('vpc_id').out,
    },
    ec2_client_vpn_route(name, block): {
      local p = path(['aws_ec2_client_vpn_route', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_client_vpn_route: {
              [name]: std.prune({
                client_vpn_endpoint_id: build.template(block.client_vpn_endpoint_id),
                description: build.template(std.get(block, 'description', null, true)),
                destination_cidr_block: build.template(block.destination_cidr_block),
                target_vpc_subnet_id: build.template(block.target_vpc_subnet_id),
              }),
            },
          },
        },
      },
      client_vpn_endpoint_id: p.child('client_vpn_endpoint_id').out,
      description: p.child('description').out,
      destination_cidr_block: p.child('destination_cidr_block').out,
      id: p.child('id').out,
      origin: p.child('origin').out,
      target_vpc_subnet_id: p.child('target_vpc_subnet_id').out,
      type: p.child('type').out,
    },
    ec2_fleet(name, block): {
      local p = path(['aws_ec2_fleet', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_fleet: {
              [name]: std.prune({
                context: build.template(std.get(block, 'context', null, true)),
                excess_capacity_termination_policy: build.template(std.get(block, 'excess_capacity_termination_policy', null, true)),
                replace_unhealthy_instances: build.template(std.get(block, 'replace_unhealthy_instances', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                terminate_instances: build.template(std.get(block, 'terminate_instances', null, true)),
                terminate_instances_with_expiration: build.template(std.get(block, 'terminate_instances_with_expiration', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
                valid_from: build.template(std.get(block, 'valid_from', null, true)),
                valid_until: build.template(std.get(block, 'valid_until', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      context: p.child('context').out,
      excess_capacity_termination_policy: p.child('excess_capacity_termination_policy').out,
      fleet_state: p.child('fleet_state').out,
      fulfilled_capacity: p.child('fulfilled_capacity').out,
      fulfilled_on_demand_capacity: p.child('fulfilled_on_demand_capacity').out,
      id: p.child('id').out,
      replace_unhealthy_instances: p.child('replace_unhealthy_instances').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      terminate_instances: p.child('terminate_instances').out,
      terminate_instances_with_expiration: p.child('terminate_instances_with_expiration').out,
      type: p.child('type').out,
      valid_from: p.child('valid_from').out,
      valid_until: p.child('valid_until').out,
    },
    ec2_host(name, block): {
      local p = path(['aws_ec2_host', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_host: {
              [name]: std.prune({
                auto_placement: build.template(std.get(block, 'auto_placement', null, true)),
                availability_zone: build.template(block.availability_zone),
                host_recovery: build.template(std.get(block, 'host_recovery', null, true)),
                instance_family: build.template(std.get(block, 'instance_family', null, true)),
                instance_type: build.template(std.get(block, 'instance_type', null, true)),
                outpost_arn: build.template(std.get(block, 'outpost_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      asset_id: p.child('asset_id').out,
      auto_placement: p.child('auto_placement').out,
      availability_zone: p.child('availability_zone').out,
      host_recovery: p.child('host_recovery').out,
      id: p.child('id').out,
      instance_family: p.child('instance_family').out,
      instance_type: p.child('instance_type').out,
      outpost_arn: p.child('outpost_arn').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ec2_image_block_public_access(name, block): {
      local p = path(['aws_ec2_image_block_public_access', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_image_block_public_access: {
              [name]: std.prune({
                state: build.template(block.state),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      state: p.child('state').out,
    },
    ec2_instance_connect_endpoint(name, block): {
      local p = path(['aws_ec2_instance_connect_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_instance_connect_endpoint: {
              [name]: std.prune({
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      dns_name: p.child('dns_name').out,
      fips_dns_name: p.child('fips_dns_name').out,
      id: p.child('id').out,
      network_interface_ids: p.child('network_interface_ids').out,
      owner_id: p.child('owner_id').out,
      preserve_client_ip: p.child('preserve_client_ip').out,
      security_group_ids: p.child('security_group_ids').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    ec2_instance_metadata_defaults(name, block): {
      local p = path(['aws_ec2_instance_metadata_defaults', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_instance_metadata_defaults: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      http_endpoint: p.child('http_endpoint').out,
      http_put_response_hop_limit: p.child('http_put_response_hop_limit').out,
      http_tokens: p.child('http_tokens').out,
      id: p.child('id').out,
      instance_metadata_tags: p.child('instance_metadata_tags').out,
    },
    ec2_instance_state(name, block): {
      local p = path(['aws_ec2_instance_state', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_instance_state: {
              [name]: std.prune({
                force: build.template(std.get(block, 'force', null, true)),
                instance_id: build.template(block.instance_id),
                state: build.template(block.state),
              }),
            },
          },
        },
      },
      force: p.child('force').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      state: p.child('state').out,
    },
    ec2_local_gateway_route(name, block): {
      local p = path(['aws_ec2_local_gateway_route', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_local_gateway_route: {
              [name]: std.prune({
                destination_cidr_block: build.template(block.destination_cidr_block),
                local_gateway_route_table_id: build.template(block.local_gateway_route_table_id),
                local_gateway_virtual_interface_group_id: build.template(block.local_gateway_virtual_interface_group_id),
              }),
            },
          },
        },
      },
      destination_cidr_block: p.child('destination_cidr_block').out,
      id: p.child('id').out,
      local_gateway_route_table_id: p.child('local_gateway_route_table_id').out,
      local_gateway_virtual_interface_group_id: p.child('local_gateway_virtual_interface_group_id').out,
    },
    ec2_local_gateway_route_table_vpc_association(name, block): {
      local p = path(['aws_ec2_local_gateway_route_table_vpc_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_local_gateway_route_table_vpc_association: {
              [name]: std.prune({
                local_gateway_route_table_id: build.template(block.local_gateway_route_table_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      local_gateway_id: p.child('local_gateway_id').out,
      local_gateway_route_table_id: p.child('local_gateway_route_table_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    ec2_managed_prefix_list(name, block): {
      local p = path(['aws_ec2_managed_prefix_list', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_managed_prefix_list: {
              [name]: std.prune({
                address_family: build.template(block.address_family),
                max_entries: build.template(block.max_entries),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      address_family: p.child('address_family').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      max_entries: p.child('max_entries').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    ec2_managed_prefix_list_entry(name, block): {
      local p = path(['aws_ec2_managed_prefix_list_entry', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_managed_prefix_list_entry: {
              [name]: std.prune({
                cidr: build.template(block.cidr),
                description: build.template(std.get(block, 'description', null, true)),
                prefix_list_id: build.template(block.prefix_list_id),
              }),
            },
          },
        },
      },
      cidr: p.child('cidr').out,
      description: p.child('description').out,
      id: p.child('id').out,
      prefix_list_id: p.child('prefix_list_id').out,
    },
    ec2_network_insights_analysis(name, block): {
      local p = path(['aws_ec2_network_insights_analysis', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_network_insights_analysis: {
              [name]: std.prune({
                filter_in_arns: build.template(std.get(block, 'filter_in_arns', null, true)),
                network_insights_path_id: build.template(block.network_insights_path_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                wait_for_completion: build.template(std.get(block, 'wait_for_completion', null, true)),
              }),
            },
          },
        },
      },
      alternate_path_hints: p.child('alternate_path_hints').out,
      arn: p.child('arn').out,
      explanations: p.child('explanations').out,
      filter_in_arns: p.child('filter_in_arns').out,
      forward_path_components: p.child('forward_path_components').out,
      id: p.child('id').out,
      network_insights_path_id: p.child('network_insights_path_id').out,
      path_found: p.child('path_found').out,
      return_path_components: p.child('return_path_components').out,
      start_date: p.child('start_date').out,
      status: p.child('status').out,
      status_message: p.child('status_message').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      wait_for_completion: p.child('wait_for_completion').out,
      warning_message: p.child('warning_message').out,
    },
    ec2_network_insights_path(name, block): {
      local p = path(['aws_ec2_network_insights_path', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_network_insights_path: {
              [name]: std.prune({
                destination: build.template(std.get(block, 'destination', null, true)),
                destination_ip: build.template(std.get(block, 'destination_ip', null, true)),
                destination_port: build.template(std.get(block, 'destination_port', null, true)),
                protocol: build.template(block.protocol),
                source: build.template(block.source),
                source_ip: build.template(std.get(block, 'source_ip', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      destination: p.child('destination').out,
      destination_arn: p.child('destination_arn').out,
      destination_ip: p.child('destination_ip').out,
      destination_port: p.child('destination_port').out,
      id: p.child('id').out,
      protocol: p.child('protocol').out,
      source: p.child('source').out,
      source_arn: p.child('source_arn').out,
      source_ip: p.child('source_ip').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ec2_serial_console_access(name, block): {
      local p = path(['aws_ec2_serial_console_access', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_serial_console_access: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
    },
    ec2_subnet_cidr_reservation(name, block): {
      local p = path(['aws_ec2_subnet_cidr_reservation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_subnet_cidr_reservation: {
              [name]: std.prune({
                cidr_block: build.template(block.cidr_block),
                description: build.template(std.get(block, 'description', null, true)),
                reservation_type: build.template(block.reservation_type),
                subnet_id: build.template(block.subnet_id),
              }),
            },
          },
        },
      },
      cidr_block: p.child('cidr_block').out,
      description: p.child('description').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      reservation_type: p.child('reservation_type').out,
      subnet_id: p.child('subnet_id').out,
    },
    ec2_tag(name, block): {
      local p = path(['aws_ec2_tag', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_tag: {
              [name]: std.prune({
                key: build.template(block.key),
                resource_id: build.template(block.resource_id),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key: p.child('key').out,
      resource_id: p.child('resource_id').out,
      value: p.child('value').out,
    },
    ec2_traffic_mirror_filter(name, block): {
      local p = path(['aws_ec2_traffic_mirror_filter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_traffic_mirror_filter: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                network_services: build.template(std.get(block, 'network_services', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      network_services: p.child('network_services').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ec2_traffic_mirror_filter_rule(name, block): {
      local p = path(['aws_ec2_traffic_mirror_filter_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_traffic_mirror_filter_rule: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                destination_cidr_block: build.template(block.destination_cidr_block),
                protocol: build.template(std.get(block, 'protocol', null, true)),
                rule_action: build.template(block.rule_action),
                rule_number: build.template(block.rule_number),
                source_cidr_block: build.template(block.source_cidr_block),
                traffic_direction: build.template(block.traffic_direction),
                traffic_mirror_filter_id: build.template(block.traffic_mirror_filter_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      destination_cidr_block: p.child('destination_cidr_block').out,
      id: p.child('id').out,
      protocol: p.child('protocol').out,
      rule_action: p.child('rule_action').out,
      rule_number: p.child('rule_number').out,
      source_cidr_block: p.child('source_cidr_block').out,
      traffic_direction: p.child('traffic_direction').out,
      traffic_mirror_filter_id: p.child('traffic_mirror_filter_id').out,
    },
    ec2_traffic_mirror_session(name, block): {
      local p = path(['aws_ec2_traffic_mirror_session', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_traffic_mirror_session: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                network_interface_id: build.template(block.network_interface_id),
                session_number: build.template(block.session_number),
                tags: build.template(std.get(block, 'tags', null, true)),
                traffic_mirror_filter_id: build.template(block.traffic_mirror_filter_id),
                traffic_mirror_target_id: build.template(block.traffic_mirror_target_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      network_interface_id: p.child('network_interface_id').out,
      owner_id: p.child('owner_id').out,
      packet_length: p.child('packet_length').out,
      session_number: p.child('session_number').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      traffic_mirror_filter_id: p.child('traffic_mirror_filter_id').out,
      traffic_mirror_target_id: p.child('traffic_mirror_target_id').out,
      virtual_network_id: p.child('virtual_network_id').out,
    },
    ec2_traffic_mirror_target(name, block): {
      local p = path(['aws_ec2_traffic_mirror_target', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_traffic_mirror_target: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                gateway_load_balancer_endpoint_id: build.template(std.get(block, 'gateway_load_balancer_endpoint_id', null, true)),
                network_interface_id: build.template(std.get(block, 'network_interface_id', null, true)),
                network_load_balancer_arn: build.template(std.get(block, 'network_load_balancer_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      gateway_load_balancer_endpoint_id: p.child('gateway_load_balancer_endpoint_id').out,
      id: p.child('id').out,
      network_interface_id: p.child('network_interface_id').out,
      network_load_balancer_arn: p.child('network_load_balancer_arn').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ec2_transit_gateway(name, block): {
      local p = path(['aws_ec2_transit_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway: {
              [name]: std.prune({
                amazon_side_asn: build.template(std.get(block, 'amazon_side_asn', null, true)),
                auto_accept_shared_attachments: build.template(std.get(block, 'auto_accept_shared_attachments', null, true)),
                default_route_table_association: build.template(std.get(block, 'default_route_table_association', null, true)),
                default_route_table_propagation: build.template(std.get(block, 'default_route_table_propagation', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                dns_support: build.template(std.get(block, 'dns_support', null, true)),
                multicast_support: build.template(std.get(block, 'multicast_support', null, true)),
                security_group_referencing_support: build.template(std.get(block, 'security_group_referencing_support', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                transit_gateway_cidr_blocks: build.template(std.get(block, 'transit_gateway_cidr_blocks', null, true)),
                vpn_ecmp_support: build.template(std.get(block, 'vpn_ecmp_support', null, true)),
              }),
            },
          },
        },
      },
      amazon_side_asn: p.child('amazon_side_asn').out,
      arn: p.child('arn').out,
      association_default_route_table_id: p.child('association_default_route_table_id').out,
      auto_accept_shared_attachments: p.child('auto_accept_shared_attachments').out,
      default_route_table_association: p.child('default_route_table_association').out,
      default_route_table_propagation: p.child('default_route_table_propagation').out,
      description: p.child('description').out,
      dns_support: p.child('dns_support').out,
      id: p.child('id').out,
      multicast_support: p.child('multicast_support').out,
      owner_id: p.child('owner_id').out,
      propagation_default_route_table_id: p.child('propagation_default_route_table_id').out,
      security_group_referencing_support: p.child('security_group_referencing_support').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_gateway_cidr_blocks: p.child('transit_gateway_cidr_blocks').out,
      vpn_ecmp_support: p.child('vpn_ecmp_support').out,
    },
    ec2_transit_gateway_connect(name, block): {
      local p = path(['aws_ec2_transit_gateway_connect', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_connect: {
              [name]: std.prune({
                protocol: build.template(std.get(block, 'protocol', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                transit_gateway_default_route_table_association: build.template(std.get(block, 'transit_gateway_default_route_table_association', null, true)),
                transit_gateway_default_route_table_propagation: build.template(std.get(block, 'transit_gateway_default_route_table_propagation', null, true)),
                transit_gateway_id: build.template(block.transit_gateway_id),
                transport_attachment_id: build.template(block.transport_attachment_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      protocol: p.child('protocol').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_gateway_default_route_table_association: p.child('transit_gateway_default_route_table_association').out,
      transit_gateway_default_route_table_propagation: p.child('transit_gateway_default_route_table_propagation').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      transport_attachment_id: p.child('transport_attachment_id').out,
    },
    ec2_transit_gateway_connect_peer(name, block): {
      local p = path(['aws_ec2_transit_gateway_connect_peer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_connect_peer: {
              [name]: std.prune({
                inside_cidr_blocks: build.template(block.inside_cidr_blocks),
                peer_address: build.template(block.peer_address),
                tags: build.template(std.get(block, 'tags', null, true)),
                transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bgp_asn: p.child('bgp_asn').out,
      bgp_peer_address: p.child('bgp_peer_address').out,
      bgp_transit_gateway_addresses: p.child('bgp_transit_gateway_addresses').out,
      id: p.child('id').out,
      inside_cidr_blocks: p.child('inside_cidr_blocks').out,
      peer_address: p.child('peer_address').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_gateway_address: p.child('transit_gateway_address').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
    },
    ec2_transit_gateway_default_route_table_association(name, block): {
      local p = path(['aws_ec2_transit_gateway_default_route_table_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_default_route_table_association: {
              [name]: std.prune({
                transit_gateway_id: build.template(block.transit_gateway_id),
                transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      original_default_route_table_id: p.child('original_default_route_table_id').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      transit_gateway_route_table_id: p.child('transit_gateway_route_table_id').out,
    },
    ec2_transit_gateway_default_route_table_propagation(name, block): {
      local p = path(['aws_ec2_transit_gateway_default_route_table_propagation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_default_route_table_propagation: {
              [name]: std.prune({
                transit_gateway_id: build.template(block.transit_gateway_id),
                transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      original_default_route_table_id: p.child('original_default_route_table_id').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      transit_gateway_route_table_id: p.child('transit_gateway_route_table_id').out,
    },
    ec2_transit_gateway_multicast_domain(name, block): {
      local p = path(['aws_ec2_transit_gateway_multicast_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_multicast_domain: {
              [name]: std.prune({
                auto_accept_shared_associations: build.template(std.get(block, 'auto_accept_shared_associations', null, true)),
                igmpv2_support: build.template(std.get(block, 'igmpv2_support', null, true)),
                static_sources_support: build.template(std.get(block, 'static_sources_support', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                transit_gateway_id: build.template(block.transit_gateway_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_accept_shared_associations: p.child('auto_accept_shared_associations').out,
      id: p.child('id').out,
      igmpv2_support: p.child('igmpv2_support').out,
      owner_id: p.child('owner_id').out,
      static_sources_support: p.child('static_sources_support').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
    },
    ec2_transit_gateway_multicast_domain_association(name, block): {
      local p = path(['aws_ec2_transit_gateway_multicast_domain_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_multicast_domain_association: {
              [name]: std.prune({
                subnet_id: build.template(block.subnet_id),
                transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
                transit_gateway_multicast_domain_id: build.template(block.transit_gateway_multicast_domain_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      subnet_id: p.child('subnet_id').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
      transit_gateway_multicast_domain_id: p.child('transit_gateway_multicast_domain_id').out,
    },
    ec2_transit_gateway_multicast_group_member(name, block): {
      local p = path(['aws_ec2_transit_gateway_multicast_group_member', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_multicast_group_member: {
              [name]: std.prune({
                group_ip_address: build.template(block.group_ip_address),
                network_interface_id: build.template(block.network_interface_id),
                transit_gateway_multicast_domain_id: build.template(block.transit_gateway_multicast_domain_id),
              }),
            },
          },
        },
      },
      group_ip_address: p.child('group_ip_address').out,
      id: p.child('id').out,
      network_interface_id: p.child('network_interface_id').out,
      transit_gateway_multicast_domain_id: p.child('transit_gateway_multicast_domain_id').out,
    },
    ec2_transit_gateway_multicast_group_source(name, block): {
      local p = path(['aws_ec2_transit_gateway_multicast_group_source', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_multicast_group_source: {
              [name]: std.prune({
                group_ip_address: build.template(block.group_ip_address),
                network_interface_id: build.template(block.network_interface_id),
                transit_gateway_multicast_domain_id: build.template(block.transit_gateway_multicast_domain_id),
              }),
            },
          },
        },
      },
      group_ip_address: p.child('group_ip_address').out,
      id: p.child('id').out,
      network_interface_id: p.child('network_interface_id').out,
      transit_gateway_multicast_domain_id: p.child('transit_gateway_multicast_domain_id').out,
    },
    ec2_transit_gateway_peering_attachment(name, block): {
      local p = path(['aws_ec2_transit_gateway_peering_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_peering_attachment: {
              [name]: std.prune({
                peer_region: build.template(block.peer_region),
                peer_transit_gateway_id: build.template(block.peer_transit_gateway_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                transit_gateway_id: build.template(block.transit_gateway_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      peer_account_id: p.child('peer_account_id').out,
      peer_region: p.child('peer_region').out,
      peer_transit_gateway_id: p.child('peer_transit_gateway_id').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
    },
    ec2_transit_gateway_peering_attachment_accepter(name, block): {
      local p = path(['aws_ec2_transit_gateway_peering_attachment_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_peering_attachment_accepter: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
                transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      peer_account_id: p.child('peer_account_id').out,
      peer_region: p.child('peer_region').out,
      peer_transit_gateway_id: p.child('peer_transit_gateway_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
    },
    ec2_transit_gateway_policy_table(name, block): {
      local p = path(['aws_ec2_transit_gateway_policy_table', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_policy_table: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
                transit_gateway_id: build.template(block.transit_gateway_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
    },
    ec2_transit_gateway_policy_table_association(name, block): {
      local p = path(['aws_ec2_transit_gateway_policy_table_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_policy_table_association: {
              [name]: std.prune({
                transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
                transit_gateway_policy_table_id: build.template(block.transit_gateway_policy_table_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      resource_id: p.child('resource_id').out,
      resource_type: p.child('resource_type').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
      transit_gateway_policy_table_id: p.child('transit_gateway_policy_table_id').out,
    },
    ec2_transit_gateway_prefix_list_reference(name, block): {
      local p = path(['aws_ec2_transit_gateway_prefix_list_reference', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_prefix_list_reference: {
              [name]: std.prune({
                blackhole: build.template(std.get(block, 'blackhole', null, true)),
                prefix_list_id: build.template(block.prefix_list_id),
                transit_gateway_attachment_id: build.template(std.get(block, 'transit_gateway_attachment_id', null, true)),
                transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
              }),
            },
          },
        },
      },
      blackhole: p.child('blackhole').out,
      id: p.child('id').out,
      prefix_list_id: p.child('prefix_list_id').out,
      prefix_list_owner_id: p.child('prefix_list_owner_id').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
      transit_gateway_route_table_id: p.child('transit_gateway_route_table_id').out,
    },
    ec2_transit_gateway_route(name, block): {
      local p = path(['aws_ec2_transit_gateway_route', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_route: {
              [name]: std.prune({
                blackhole: build.template(std.get(block, 'blackhole', null, true)),
                destination_cidr_block: build.template(block.destination_cidr_block),
                transit_gateway_attachment_id: build.template(std.get(block, 'transit_gateway_attachment_id', null, true)),
                transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
              }),
            },
          },
        },
      },
      blackhole: p.child('blackhole').out,
      destination_cidr_block: p.child('destination_cidr_block').out,
      id: p.child('id').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
      transit_gateway_route_table_id: p.child('transit_gateway_route_table_id').out,
    },
    ec2_transit_gateway_route_table(name, block): {
      local p = path(['aws_ec2_transit_gateway_route_table', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_route_table: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
                transit_gateway_id: build.template(block.transit_gateway_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_association_route_table: p.child('default_association_route_table').out,
      default_propagation_route_table: p.child('default_propagation_route_table').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
    },
    ec2_transit_gateway_route_table_association(name, block): {
      local p = path(['aws_ec2_transit_gateway_route_table_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_route_table_association: {
              [name]: std.prune({
                replace_existing_association: build.template(std.get(block, 'replace_existing_association', null, true)),
                transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
                transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      replace_existing_association: p.child('replace_existing_association').out,
      resource_id: p.child('resource_id').out,
      resource_type: p.child('resource_type').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
      transit_gateway_route_table_id: p.child('transit_gateway_route_table_id').out,
    },
    ec2_transit_gateway_route_table_propagation(name, block): {
      local p = path(['aws_ec2_transit_gateway_route_table_propagation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_route_table_propagation: {
              [name]: std.prune({
                transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
                transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      resource_id: p.child('resource_id').out,
      resource_type: p.child('resource_type').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
      transit_gateway_route_table_id: p.child('transit_gateway_route_table_id').out,
    },
    ec2_transit_gateway_vpc_attachment(name, block): {
      local p = path(['aws_ec2_transit_gateway_vpc_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_vpc_attachment: {
              [name]: std.prune({
                appliance_mode_support: build.template(std.get(block, 'appliance_mode_support', null, true)),
                dns_support: build.template(std.get(block, 'dns_support', null, true)),
                ipv6_support: build.template(std.get(block, 'ipv6_support', null, true)),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
                transit_gateway_id: build.template(block.transit_gateway_id),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      appliance_mode_support: p.child('appliance_mode_support').out,
      dns_support: p.child('dns_support').out,
      id: p.child('id').out,
      ipv6_support: p.child('ipv6_support').out,
      security_group_referencing_support: p.child('security_group_referencing_support').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_gateway_default_route_table_association: p.child('transit_gateway_default_route_table_association').out,
      transit_gateway_default_route_table_propagation: p.child('transit_gateway_default_route_table_propagation').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      vpc_id: p.child('vpc_id').out,
      vpc_owner_id: p.child('vpc_owner_id').out,
    },
    ec2_transit_gateway_vpc_attachment_accepter(name, block): {
      local p = path(['aws_ec2_transit_gateway_vpc_attachment_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ec2_transit_gateway_vpc_attachment_accepter: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
                transit_gateway_attachment_id: build.template(block.transit_gateway_attachment_id),
                transit_gateway_default_route_table_association: build.template(std.get(block, 'transit_gateway_default_route_table_association', null, true)),
                transit_gateway_default_route_table_propagation: build.template(std.get(block, 'transit_gateway_default_route_table_propagation', null, true)),
              }),
            },
          },
        },
      },
      appliance_mode_support: p.child('appliance_mode_support').out,
      dns_support: p.child('dns_support').out,
      id: p.child('id').out,
      ipv6_support: p.child('ipv6_support').out,
      security_group_referencing_support: p.child('security_group_referencing_support').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
      transit_gateway_default_route_table_association: p.child('transit_gateway_default_route_table_association').out,
      transit_gateway_default_route_table_propagation: p.child('transit_gateway_default_route_table_propagation').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      vpc_id: p.child('vpc_id').out,
      vpc_owner_id: p.child('vpc_owner_id').out,
    },
    ecr_lifecycle_policy(name, block): {
      local p = path(['aws_ecr_lifecycle_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecr_lifecycle_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                repository: build.template(block.repository),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      registry_id: p.child('registry_id').out,
      repository: p.child('repository').out,
    },
    ecr_pull_through_cache_rule(name, block): {
      local p = path(['aws_ecr_pull_through_cache_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecr_pull_through_cache_rule: {
              [name]: std.prune({
                credential_arn: build.template(std.get(block, 'credential_arn', null, true)),
                ecr_repository_prefix: build.template(block.ecr_repository_prefix),
                upstream_registry_url: build.template(block.upstream_registry_url),
              }),
            },
          },
        },
      },
      credential_arn: p.child('credential_arn').out,
      ecr_repository_prefix: p.child('ecr_repository_prefix').out,
      id: p.child('id').out,
      registry_id: p.child('registry_id').out,
      upstream_registry_url: p.child('upstream_registry_url').out,
    },
    ecr_registry_policy(name, block): {
      local p = path(['aws_ecr_registry_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecr_registry_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      registry_id: p.child('registry_id').out,
    },
    ecr_registry_scanning_configuration(name, block): {
      local p = path(['aws_ecr_registry_scanning_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecr_registry_scanning_configuration: {
              [name]: std.prune({
                scan_type: build.template(block.scan_type),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      registry_id: p.child('registry_id').out,
      scan_type: p.child('scan_type').out,
    },
    ecr_replication_configuration(name, block): {
      local p = path(['aws_ecr_replication_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecr_replication_configuration: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      registry_id: p.child('registry_id').out,
    },
    ecr_repository(name, block): {
      local p = path(['aws_ecr_repository', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecr_repository: {
              [name]: std.prune({
                force_delete: build.template(std.get(block, 'force_delete', null, true)),
                image_tag_mutability: build.template(std.get(block, 'image_tag_mutability', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      force_delete: p.child('force_delete').out,
      id: p.child('id').out,
      image_tag_mutability: p.child('image_tag_mutability').out,
      name: p.child('name').out,
      registry_id: p.child('registry_id').out,
      repository_url: p.child('repository_url').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ecr_repository_creation_template(name, block): {
      local p = path(['aws_ecr_repository_creation_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecr_repository_creation_template: {
              [name]: std.prune({
                applied_for: build.template(block.applied_for),
                custom_role_arn: build.template(std.get(block, 'custom_role_arn', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                image_tag_mutability: build.template(std.get(block, 'image_tag_mutability', null, true)),
                lifecycle_policy: build.template(std.get(block, 'lifecycle_policy', null, true)),
                prefix: build.template(block.prefix),
                repository_policy: build.template(std.get(block, 'repository_policy', null, true)),
                resource_tags: build.template(std.get(block, 'resource_tags', null, true)),
              }),
            },
          },
        },
      },
      applied_for: p.child('applied_for').out,
      custom_role_arn: p.child('custom_role_arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      image_tag_mutability: p.child('image_tag_mutability').out,
      lifecycle_policy: p.child('lifecycle_policy').out,
      prefix: p.child('prefix').out,
      registry_id: p.child('registry_id').out,
      repository_policy: p.child('repository_policy').out,
      resource_tags: p.child('resource_tags').out,
    },
    ecr_repository_policy(name, block): {
      local p = path(['aws_ecr_repository_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecr_repository_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                repository: build.template(block.repository),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      registry_id: p.child('registry_id').out,
      repository: p.child('repository').out,
    },
    ecrpublic_repository(name, block): {
      local p = path(['aws_ecrpublic_repository', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecrpublic_repository: {
              [name]: std.prune({
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                repository_name: build.template(block.repository_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      registry_id: p.child('registry_id').out,
      repository_name: p.child('repository_name').out,
      repository_uri: p.child('repository_uri').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ecrpublic_repository_policy(name, block): {
      local p = path(['aws_ecrpublic_repository_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecrpublic_repository_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                repository_name: build.template(block.repository_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      registry_id: p.child('registry_id').out,
      repository_name: p.child('repository_name').out,
    },
    ecs_account_setting_default(name, block): {
      local p = path(['aws_ecs_account_setting_default', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecs_account_setting_default: {
              [name]: std.prune({
                name: build.template(block.name),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      principal_arn: p.child('principal_arn').out,
      value: p.child('value').out,
    },
    ecs_capacity_provider(name, block): {
      local p = path(['aws_ecs_capacity_provider', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecs_capacity_provider: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ecs_cluster(name, block): {
      local p = path(['aws_ecs_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecs_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ecs_cluster_capacity_providers(name, block): {
      local p = path(['aws_ecs_cluster_capacity_providers', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecs_cluster_capacity_providers: {
              [name]: std.prune({
                capacity_providers: build.template(std.get(block, 'capacity_providers', null, true)),
                cluster_name: build.template(block.cluster_name),
              }),
            },
          },
        },
      },
      capacity_providers: p.child('capacity_providers').out,
      cluster_name: p.child('cluster_name').out,
      id: p.child('id').out,
    },
    ecs_service(name, block): {
      local p = path(['aws_ecs_service', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecs_service: {
              [name]: std.prune({
                deployment_maximum_percent: build.template(std.get(block, 'deployment_maximum_percent', null, true)),
                deployment_minimum_healthy_percent: build.template(std.get(block, 'deployment_minimum_healthy_percent', null, true)),
                desired_count: build.template(std.get(block, 'desired_count', null, true)),
                enable_ecs_managed_tags: build.template(std.get(block, 'enable_ecs_managed_tags', null, true)),
                enable_execute_command: build.template(std.get(block, 'enable_execute_command', null, true)),
                force_delete: build.template(std.get(block, 'force_delete', null, true)),
                force_new_deployment: build.template(std.get(block, 'force_new_deployment', null, true)),
                health_check_grace_period_seconds: build.template(std.get(block, 'health_check_grace_period_seconds', null, true)),
                name: build.template(block.name),
                propagate_tags: build.template(std.get(block, 'propagate_tags', null, true)),
                scheduling_strategy: build.template(std.get(block, 'scheduling_strategy', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                task_definition: build.template(std.get(block, 'task_definition', null, true)),
                wait_for_steady_state: build.template(std.get(block, 'wait_for_steady_state', null, true)),
              }),
            },
          },
        },
      },
      cluster: p.child('cluster').out,
      deployment_maximum_percent: p.child('deployment_maximum_percent').out,
      deployment_minimum_healthy_percent: p.child('deployment_minimum_healthy_percent').out,
      desired_count: p.child('desired_count').out,
      enable_ecs_managed_tags: p.child('enable_ecs_managed_tags').out,
      enable_execute_command: p.child('enable_execute_command').out,
      force_delete: p.child('force_delete').out,
      force_new_deployment: p.child('force_new_deployment').out,
      health_check_grace_period_seconds: p.child('health_check_grace_period_seconds').out,
      iam_role: p.child('iam_role').out,
      id: p.child('id').out,
      launch_type: p.child('launch_type').out,
      name: p.child('name').out,
      platform_version: p.child('platform_version').out,
      propagate_tags: p.child('propagate_tags').out,
      scheduling_strategy: p.child('scheduling_strategy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      task_definition: p.child('task_definition').out,
      triggers: p.child('triggers').out,
      wait_for_steady_state: p.child('wait_for_steady_state').out,
    },
    ecs_tag(name, block): {
      local p = path(['aws_ecs_tag', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecs_tag: {
              [name]: std.prune({
                key: build.template(block.key),
                resource_arn: build.template(block.resource_arn),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key: p.child('key').out,
      resource_arn: p.child('resource_arn').out,
      value: p.child('value').out,
    },
    ecs_task_definition(name, block): {
      local p = path(['aws_ecs_task_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecs_task_definition: {
              [name]: std.prune({
                container_definitions: build.template(block.container_definitions),
                cpu: build.template(std.get(block, 'cpu', null, true)),
                execution_role_arn: build.template(std.get(block, 'execution_role_arn', null, true)),
                family: build.template(block.family),
                ipc_mode: build.template(std.get(block, 'ipc_mode', null, true)),
                memory: build.template(std.get(block, 'memory', null, true)),
                pid_mode: build.template(std.get(block, 'pid_mode', null, true)),
                requires_compatibilities: build.template(std.get(block, 'requires_compatibilities', null, true)),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                task_role_arn: build.template(std.get(block, 'task_role_arn', null, true)),
                track_latest: build.template(std.get(block, 'track_latest', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      arn_without_revision: p.child('arn_without_revision').out,
      container_definitions: p.child('container_definitions').out,
      cpu: p.child('cpu').out,
      execution_role_arn: p.child('execution_role_arn').out,
      family: p.child('family').out,
      id: p.child('id').out,
      ipc_mode: p.child('ipc_mode').out,
      memory: p.child('memory').out,
      network_mode: p.child('network_mode').out,
      pid_mode: p.child('pid_mode').out,
      requires_compatibilities: p.child('requires_compatibilities').out,
      revision: p.child('revision').out,
      skip_destroy: p.child('skip_destroy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      task_role_arn: p.child('task_role_arn').out,
      track_latest: p.child('track_latest').out,
    },
    ecs_task_set(name, block): {
      local p = path(['aws_ecs_task_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ecs_task_set: {
              [name]: std.prune({
                cluster: build.template(block.cluster),
                force_delete: build.template(std.get(block, 'force_delete', null, true)),
                service: build.template(block.service),
                tags: build.template(std.get(block, 'tags', null, true)),
                task_definition: build.template(block.task_definition),
                wait_until_stable: build.template(std.get(block, 'wait_until_stable', null, true)),
                wait_until_stable_timeout: build.template(std.get(block, 'wait_until_stable_timeout', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster: p.child('cluster').out,
      external_id: p.child('external_id').out,
      force_delete: p.child('force_delete').out,
      id: p.child('id').out,
      launch_type: p.child('launch_type').out,
      platform_version: p.child('platform_version').out,
      service: p.child('service').out,
      stability_status: p.child('stability_status').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      task_definition: p.child('task_definition').out,
      task_set_id: p.child('task_set_id').out,
      wait_until_stable: p.child('wait_until_stable').out,
      wait_until_stable_timeout: p.child('wait_until_stable_timeout').out,
    },
    efs_access_point(name, block): {
      local p = path(['aws_efs_access_point', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_efs_access_point: {
              [name]: std.prune({
                file_system_id: build.template(block.file_system_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      file_system_arn: p.child('file_system_arn').out,
      file_system_id: p.child('file_system_id').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    efs_backup_policy(name, block): {
      local p = path(['aws_efs_backup_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_efs_backup_policy: {
              [name]: std.prune({
                file_system_id: build.template(block.file_system_id),
              }),
            },
          },
        },
      },
      file_system_id: p.child('file_system_id').out,
      id: p.child('id').out,
    },
    efs_file_system(name, block): {
      local p = path(['aws_efs_file_system', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_efs_file_system: {
              [name]: std.prune({
                provisioned_throughput_in_mibps: build.template(std.get(block, 'provisioned_throughput_in_mibps', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                throughput_mode: build.template(std.get(block, 'throughput_mode', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone_id: p.child('availability_zone_id').out,
      availability_zone_name: p.child('availability_zone_name').out,
      creation_token: p.child('creation_token').out,
      dns_name: p.child('dns_name').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      name: p.child('name').out,
      number_of_mount_targets: p.child('number_of_mount_targets').out,
      owner_id: p.child('owner_id').out,
      performance_mode: p.child('performance_mode').out,
      provisioned_throughput_in_mibps: p.child('provisioned_throughput_in_mibps').out,
      size_in_bytes: p.child('size_in_bytes').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      throughput_mode: p.child('throughput_mode').out,
    },
    efs_file_system_policy(name, block): {
      local p = path(['aws_efs_file_system_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_efs_file_system_policy: {
              [name]: std.prune({
                bypass_policy_lockout_safety_check: build.template(std.get(block, 'bypass_policy_lockout_safety_check', null, true)),
                file_system_id: build.template(block.file_system_id),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      bypass_policy_lockout_safety_check: p.child('bypass_policy_lockout_safety_check').out,
      file_system_id: p.child('file_system_id').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
    },
    efs_mount_target(name, block): {
      local p = path(['aws_efs_mount_target', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_efs_mount_target: {
              [name]: std.prune({
                file_system_id: build.template(block.file_system_id),
                subnet_id: build.template(block.subnet_id),
              }),
            },
          },
        },
      },
      availability_zone_id: p.child('availability_zone_id').out,
      availability_zone_name: p.child('availability_zone_name').out,
      dns_name: p.child('dns_name').out,
      file_system_arn: p.child('file_system_arn').out,
      file_system_id: p.child('file_system_id').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      mount_target_dns_name: p.child('mount_target_dns_name').out,
      network_interface_id: p.child('network_interface_id').out,
      owner_id: p.child('owner_id').out,
      security_groups: p.child('security_groups').out,
      subnet_id: p.child('subnet_id').out,
    },
    efs_replication_configuration(name, block): {
      local p = path(['aws_efs_replication_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_efs_replication_configuration: {
              [name]: std.prune({
                source_file_system_id: build.template(block.source_file_system_id),
              }),
            },
          },
        },
      },
      creation_time: p.child('creation_time').out,
      id: p.child('id').out,
      original_source_file_system_arn: p.child('original_source_file_system_arn').out,
      source_file_system_arn: p.child('source_file_system_arn').out,
      source_file_system_id: p.child('source_file_system_id').out,
      source_file_system_region: p.child('source_file_system_region').out,
    },
    egress_only_internet_gateway(name, block): {
      local p = path(['aws_egress_only_internet_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_egress_only_internet_gateway: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    eip(name, block): {
      local p = path(['aws_eip', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_eip: {
              [name]: std.prune({
                address: build.template(std.get(block, 'address', null, true)),
                associate_with_private_ip: build.template(std.get(block, 'associate_with_private_ip', null, true)),
                customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      address: p.child('address').out,
      allocation_id: p.child('allocation_id').out,
      arn: p.child('arn').out,
      associate_with_private_ip: p.child('associate_with_private_ip').out,
      association_id: p.child('association_id').out,
      carrier_ip: p.child('carrier_ip').out,
      customer_owned_ip: p.child('customer_owned_ip').out,
      customer_owned_ipv4_pool: p.child('customer_owned_ipv4_pool').out,
      domain: p.child('domain').out,
      id: p.child('id').out,
      instance: p.child('instance').out,
      ipam_pool_id: p.child('ipam_pool_id').out,
      network_border_group: p.child('network_border_group').out,
      network_interface: p.child('network_interface').out,
      private_dns: p.child('private_dns').out,
      private_ip: p.child('private_ip').out,
      ptr_record: p.child('ptr_record').out,
      public_dns: p.child('public_dns').out,
      public_ip: p.child('public_ip').out,
      public_ipv4_pool: p.child('public_ipv4_pool').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc: p.child('vpc').out,
    },
    eip_association(name, block): {
      local p = path(['aws_eip_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_eip_association: {
              [name]: std.prune({
                allow_reassociation: build.template(std.get(block, 'allow_reassociation', null, true)),
              }),
            },
          },
        },
      },
      allocation_id: p.child('allocation_id').out,
      allow_reassociation: p.child('allow_reassociation').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      network_interface_id: p.child('network_interface_id').out,
      private_ip_address: p.child('private_ip_address').out,
      public_ip: p.child('public_ip').out,
    },
    eip_domain_name(name, block): {
      local p = path(['aws_eip_domain_name', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_eip_domain_name: {
              [name]: std.prune({
                allocation_id: build.template(block.allocation_id),
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      allocation_id: p.child('allocation_id').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      ptr_record: p.child('ptr_record').out,
    },
    eks_access_entry(name, block): {
      local p = path(['aws_eks_access_entry', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_eks_access_entry: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                principal_arn: build.template(block.principal_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      access_entry_arn: p.child('access_entry_arn').out,
      cluster_name: p.child('cluster_name').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      kubernetes_groups: p.child('kubernetes_groups').out,
      modified_at: p.child('modified_at').out,
      principal_arn: p.child('principal_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      user_name: p.child('user_name').out,
    },
    eks_access_policy_association(name, block): {
      local p = path(['aws_eks_access_policy_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_eks_access_policy_association: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                policy_arn: build.template(block.policy_arn),
                principal_arn: build.template(block.principal_arn),
              }),
            },
          },
        },
      },
      associated_at: p.child('associated_at').out,
      cluster_name: p.child('cluster_name').out,
      id: p.child('id').out,
      modified_at: p.child('modified_at').out,
      policy_arn: p.child('policy_arn').out,
      principal_arn: p.child('principal_arn').out,
    },
    eks_addon(name, block): {
      local p = path(['aws_eks_addon', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_eks_addon: {
              [name]: std.prune({
                addon_name: build.template(block.addon_name),
                cluster_name: build.template(block.cluster_name),
                preserve: build.template(std.get(block, 'preserve', null, true)),
                resolve_conflicts: build.template(std.get(block, 'resolve_conflicts', null, true)),
                resolve_conflicts_on_create: build.template(std.get(block, 'resolve_conflicts_on_create', null, true)),
                resolve_conflicts_on_update: build.template(std.get(block, 'resolve_conflicts_on_update', null, true)),
                service_account_role_arn: build.template(std.get(block, 'service_account_role_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      addon_name: p.child('addon_name').out,
      addon_version: p.child('addon_version').out,
      arn: p.child('arn').out,
      cluster_name: p.child('cluster_name').out,
      configuration_values: p.child('configuration_values').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      modified_at: p.child('modified_at').out,
      preserve: p.child('preserve').out,
      resolve_conflicts: p.child('resolve_conflicts').out,
      resolve_conflicts_on_create: p.child('resolve_conflicts_on_create').out,
      resolve_conflicts_on_update: p.child('resolve_conflicts_on_update').out,
      service_account_role_arn: p.child('service_account_role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    eks_cluster(name, block): {
      local p = path(['aws_eks_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_eks_cluster: {
              [name]: std.prune({
                bootstrap_self_managed_addons: build.template(std.get(block, 'bootstrap_self_managed_addons', null, true)),
                enabled_cluster_log_types: build.template(std.get(block, 'enabled_cluster_log_types', null, true)),
                name: build.template(block.name),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bootstrap_self_managed_addons: p.child('bootstrap_self_managed_addons').out,
      certificate_authority: p.child('certificate_authority').out,
      cluster_id: p.child('cluster_id').out,
      created_at: p.child('created_at').out,
      enabled_cluster_log_types: p.child('enabled_cluster_log_types').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      name: p.child('name').out,
      platform_version: p.child('platform_version').out,
      role_arn: p.child('role_arn').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    eks_fargate_profile(name, block): {
      local p = path(['aws_eks_fargate_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_eks_fargate_profile: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                fargate_profile_name: build.template(block.fargate_profile_name),
                pod_execution_role_arn: build.template(block.pod_execution_role_arn),
                subnet_ids: build.template(std.get(block, 'subnet_ids', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster_name: p.child('cluster_name').out,
      fargate_profile_name: p.child('fargate_profile_name').out,
      id: p.child('id').out,
      pod_execution_role_arn: p.child('pod_execution_role_arn').out,
      status: p.child('status').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    eks_identity_provider_config(name, block): {
      local p = path(['aws_eks_identity_provider_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_eks_identity_provider_config: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster_name: p.child('cluster_name').out,
      id: p.child('id').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    eks_node_group(name, block): {
      local p = path(['aws_eks_node_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_eks_node_group: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                force_update_version: build.template(std.get(block, 'force_update_version', null, true)),
                labels: build.template(std.get(block, 'labels', null, true)),
                node_role_arn: build.template(block.node_role_arn),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      ami_type: p.child('ami_type').out,
      arn: p.child('arn').out,
      capacity_type: p.child('capacity_type').out,
      cluster_name: p.child('cluster_name').out,
      disk_size: p.child('disk_size').out,
      force_update_version: p.child('force_update_version').out,
      id: p.child('id').out,
      instance_types: p.child('instance_types').out,
      labels: p.child('labels').out,
      node_group_name: p.child('node_group_name').out,
      node_group_name_prefix: p.child('node_group_name_prefix').out,
      node_role_arn: p.child('node_role_arn').out,
      release_version: p.child('release_version').out,
      resources: p.child('resources').out,
      status: p.child('status').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    eks_pod_identity_association(name, block): {
      local p = path(['aws_eks_pod_identity_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_eks_pod_identity_association: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                namespace: build.template(block.namespace),
                role_arn: build.template(block.role_arn),
                service_account: build.template(block.service_account),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      association_arn: p.child('association_arn').out,
      association_id: p.child('association_id').out,
      cluster_name: p.child('cluster_name').out,
      id: p.child('id').out,
      namespace: p.child('namespace').out,
      role_arn: p.child('role_arn').out,
      service_account: p.child('service_account').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    elastic_beanstalk_application(name, block): {
      local p = path(['aws_elastic_beanstalk_application', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elastic_beanstalk_application: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    elastic_beanstalk_application_version(name, block): {
      local p = path(['aws_elastic_beanstalk_application_version', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elastic_beanstalk_application_version: {
              [name]: std.prune({
                application: build.template(block.application),
                bucket: build.template(block.bucket),
                description: build.template(std.get(block, 'description', null, true)),
                force_delete: build.template(std.get(block, 'force_delete', null, true)),
                key: build.template(block.key),
                name: build.template(block.name),
                process: build.template(std.get(block, 'process', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application: p.child('application').out,
      arn: p.child('arn').out,
      bucket: p.child('bucket').out,
      description: p.child('description').out,
      force_delete: p.child('force_delete').out,
      id: p.child('id').out,
      key: p.child('key').out,
      name: p.child('name').out,
      process: p.child('process').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    elastic_beanstalk_configuration_template(name, block): {
      local p = path(['aws_elastic_beanstalk_configuration_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elastic_beanstalk_configuration_template: {
              [name]: std.prune({
                application: build.template(block.application),
                description: build.template(std.get(block, 'description', null, true)),
                environment_id: build.template(std.get(block, 'environment_id', null, true)),
                name: build.template(block.name),
                solution_stack_name: build.template(std.get(block, 'solution_stack_name', null, true)),
              }),
            },
          },
        },
      },
      application: p.child('application').out,
      description: p.child('description').out,
      environment_id: p.child('environment_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      solution_stack_name: p.child('solution_stack_name').out,
    },
    elastic_beanstalk_environment(name, block): {
      local p = path(['aws_elastic_beanstalk_environment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elastic_beanstalk_environment: {
              [name]: std.prune({
                application: build.template(block.application),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                poll_interval: build.template(std.get(block, 'poll_interval', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                template_name: build.template(std.get(block, 'template_name', null, true)),
                tier: build.template(std.get(block, 'tier', null, true)),
                wait_for_ready_timeout: build.template(std.get(block, 'wait_for_ready_timeout', null, true)),
              }),
            },
          },
        },
      },
      all_settings: p.child('all_settings').out,
      application: p.child('application').out,
      arn: p.child('arn').out,
      autoscaling_groups: p.child('autoscaling_groups').out,
      cname: p.child('cname').out,
      cname_prefix: p.child('cname_prefix').out,
      description: p.child('description').out,
      endpoint_url: p.child('endpoint_url').out,
      id: p.child('id').out,
      instances: p.child('instances').out,
      launch_configurations: p.child('launch_configurations').out,
      load_balancers: p.child('load_balancers').out,
      name: p.child('name').out,
      platform_arn: p.child('platform_arn').out,
      poll_interval: p.child('poll_interval').out,
      queues: p.child('queues').out,
      solution_stack_name: p.child('solution_stack_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      template_name: p.child('template_name').out,
      tier: p.child('tier').out,
      triggers: p.child('triggers').out,
      version_label: p.child('version_label').out,
      wait_for_ready_timeout: p.child('wait_for_ready_timeout').out,
    },
    elasticache_cluster(name, block): {
      local p = path(['aws_elasticache_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticache_cluster: {
              [name]: std.prune({
                auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null, true)),
                cluster_id: build.template(block.cluster_id),
                final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null, true)),
                notification_topic_arn: build.template(std.get(block, 'notification_topic_arn', null, true)),
                outpost_mode: build.template(std.get(block, 'outpost_mode', null, true)),
                preferred_availability_zones: build.template(std.get(block, 'preferred_availability_zones', null, true)),
                snapshot_arns: build.template(std.get(block, 'snapshot_arns', null, true)),
                snapshot_name: build.template(std.get(block, 'snapshot_name', null, true)),
                snapshot_retention_limit: build.template(std.get(block, 'snapshot_retention_limit', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      apply_immediately: p.child('apply_immediately').out,
      arn: p.child('arn').out,
      auto_minor_version_upgrade: p.child('auto_minor_version_upgrade').out,
      availability_zone: p.child('availability_zone').out,
      az_mode: p.child('az_mode').out,
      cache_nodes: p.child('cache_nodes').out,
      cluster_address: p.child('cluster_address').out,
      cluster_id: p.child('cluster_id').out,
      configuration_endpoint: p.child('configuration_endpoint').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      engine_version_actual: p.child('engine_version_actual').out,
      final_snapshot_identifier: p.child('final_snapshot_identifier').out,
      id: p.child('id').out,
      ip_discovery: p.child('ip_discovery').out,
      maintenance_window: p.child('maintenance_window').out,
      network_type: p.child('network_type').out,
      node_type: p.child('node_type').out,
      notification_topic_arn: p.child('notification_topic_arn').out,
      num_cache_nodes: p.child('num_cache_nodes').out,
      outpost_mode: p.child('outpost_mode').out,
      parameter_group_name: p.child('parameter_group_name').out,
      port: p.child('port').out,
      preferred_availability_zones: p.child('preferred_availability_zones').out,
      preferred_outpost_arn: p.child('preferred_outpost_arn').out,
      replication_group_id: p.child('replication_group_id').out,
      security_group_ids: p.child('security_group_ids').out,
      snapshot_arns: p.child('snapshot_arns').out,
      snapshot_name: p.child('snapshot_name').out,
      snapshot_retention_limit: p.child('snapshot_retention_limit').out,
      snapshot_window: p.child('snapshot_window').out,
      subnet_group_name: p.child('subnet_group_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_encryption_enabled: p.child('transit_encryption_enabled').out,
    },
    elasticache_global_replication_group(name, block): {
      local p = path(['aws_elasticache_global_replication_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticache_global_replication_group: {
              [name]: std.prune({
                global_replication_group_description: build.template(std.get(block, 'global_replication_group_description', null, true)),
                global_replication_group_id_suffix: build.template(block.global_replication_group_id_suffix),
                parameter_group_name: build.template(std.get(block, 'parameter_group_name', null, true)),
                primary_replication_group_id: build.template(block.primary_replication_group_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      at_rest_encryption_enabled: p.child('at_rest_encryption_enabled').out,
      auth_token_enabled: p.child('auth_token_enabled').out,
      automatic_failover_enabled: p.child('automatic_failover_enabled').out,
      cache_node_type: p.child('cache_node_type').out,
      cluster_enabled: p.child('cluster_enabled').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      engine_version_actual: p.child('engine_version_actual').out,
      global_node_groups: p.child('global_node_groups').out,
      global_replication_group_description: p.child('global_replication_group_description').out,
      global_replication_group_id: p.child('global_replication_group_id').out,
      global_replication_group_id_suffix: p.child('global_replication_group_id_suffix').out,
      id: p.child('id').out,
      num_node_groups: p.child('num_node_groups').out,
      parameter_group_name: p.child('parameter_group_name').out,
      primary_replication_group_id: p.child('primary_replication_group_id').out,
      transit_encryption_enabled: p.child('transit_encryption_enabled').out,
    },
    elasticache_parameter_group(name, block): {
      local p = path(['aws_elasticache_parameter_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticache_parameter_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                family: build.template(block.family),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      family: p.child('family').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    elasticache_replication_group(name, block): {
      local p = path(['aws_elasticache_replication_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticache_replication_group: {
              [name]: std.prune({
                auth_token: build.template(std.get(block, 'auth_token', null, true)),
                auth_token_update_strategy: build.template(std.get(block, 'auth_token_update_strategy', null, true)),
                automatic_failover_enabled: build.template(std.get(block, 'automatic_failover_enabled', null, true)),
                description: build.template(block.description),
                engine: build.template(std.get(block, 'engine', null, true)),
                final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null, true)),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                multi_az_enabled: build.template(std.get(block, 'multi_az_enabled', null, true)),
                notification_topic_arn: build.template(std.get(block, 'notification_topic_arn', null, true)),
                port: build.template(std.get(block, 'port', null, true)),
                preferred_cache_cluster_azs: build.template(std.get(block, 'preferred_cache_cluster_azs', null, true)),
                replication_group_id: build.template(block.replication_group_id),
                snapshot_arns: build.template(std.get(block, 'snapshot_arns', null, true)),
                snapshot_name: build.template(std.get(block, 'snapshot_name', null, true)),
                snapshot_retention_limit: build.template(std.get(block, 'snapshot_retention_limit', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_group_ids: build.template(std.get(block, 'user_group_ids', null, true)),
              }),
            },
          },
        },
      },
      apply_immediately: p.child('apply_immediately').out,
      arn: p.child('arn').out,
      at_rest_encryption_enabled: p.child('at_rest_encryption_enabled').out,
      auth_token: p.child('auth_token').out,
      auth_token_update_strategy: p.child('auth_token_update_strategy').out,
      auto_minor_version_upgrade: p.child('auto_minor_version_upgrade').out,
      automatic_failover_enabled: p.child('automatic_failover_enabled').out,
      cluster_enabled: p.child('cluster_enabled').out,
      cluster_mode: p.child('cluster_mode').out,
      configuration_endpoint_address: p.child('configuration_endpoint_address').out,
      data_tiering_enabled: p.child('data_tiering_enabled').out,
      description: p.child('description').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      engine_version_actual: p.child('engine_version_actual').out,
      final_snapshot_identifier: p.child('final_snapshot_identifier').out,
      global_replication_group_id: p.child('global_replication_group_id').out,
      id: p.child('id').out,
      ip_discovery: p.child('ip_discovery').out,
      kms_key_id: p.child('kms_key_id').out,
      maintenance_window: p.child('maintenance_window').out,
      member_clusters: p.child('member_clusters').out,
      multi_az_enabled: p.child('multi_az_enabled').out,
      network_type: p.child('network_type').out,
      node_type: p.child('node_type').out,
      notification_topic_arn: p.child('notification_topic_arn').out,
      num_cache_clusters: p.child('num_cache_clusters').out,
      num_node_groups: p.child('num_node_groups').out,
      parameter_group_name: p.child('parameter_group_name').out,
      port: p.child('port').out,
      preferred_cache_cluster_azs: p.child('preferred_cache_cluster_azs').out,
      primary_endpoint_address: p.child('primary_endpoint_address').out,
      reader_endpoint_address: p.child('reader_endpoint_address').out,
      replicas_per_node_group: p.child('replicas_per_node_group').out,
      replication_group_id: p.child('replication_group_id').out,
      security_group_ids: p.child('security_group_ids').out,
      security_group_names: p.child('security_group_names').out,
      snapshot_arns: p.child('snapshot_arns').out,
      snapshot_name: p.child('snapshot_name').out,
      snapshot_retention_limit: p.child('snapshot_retention_limit').out,
      snapshot_window: p.child('snapshot_window').out,
      subnet_group_name: p.child('subnet_group_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_encryption_enabled: p.child('transit_encryption_enabled').out,
      transit_encryption_mode: p.child('transit_encryption_mode').out,
      user_group_ids: p.child('user_group_ids').out,
    },
    elasticache_reserved_cache_node(name, block): {
      local p = path(['aws_elasticache_reserved_cache_node', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticache_reserved_cache_node: {
              [name]: std.prune({
                reserved_cache_nodes_offering_id: build.template(block.reserved_cache_nodes_offering_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cache_node_count: p.child('cache_node_count').out,
      cache_node_type: p.child('cache_node_type').out,
      duration: p.child('duration').out,
      fixed_price: p.child('fixed_price').out,
      id: p.child('id').out,
      offering_type: p.child('offering_type').out,
      product_description: p.child('product_description').out,
      recurring_charges: p.child('recurring_charges').out,
      reserved_cache_nodes_offering_id: p.child('reserved_cache_nodes_offering_id').out,
      start_time: p.child('start_time').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      usage_price: p.child('usage_price').out,
    },
    elasticache_serverless_cache(name, block): {
      local p = path(['aws_elasticache_serverless_cache', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticache_serverless_cache: {
              [name]: std.prune({
                engine: build.template(block.engine),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                name: build.template(block.name),
                snapshot_arns_to_restore: build.template(std.get(block, 'snapshot_arns_to_restore', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_group_id: build.template(std.get(block, 'user_group_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      create_time: p.child('create_time').out,
      daily_snapshot_time: p.child('daily_snapshot_time').out,
      description: p.child('description').out,
      endpoint: p.child('endpoint').out,
      engine: p.child('engine').out,
      full_engine_version: p.child('full_engine_version').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      major_engine_version: p.child('major_engine_version').out,
      name: p.child('name').out,
      reader_endpoint: p.child('reader_endpoint').out,
      security_group_ids: p.child('security_group_ids').out,
      snapshot_arns_to_restore: p.child('snapshot_arns_to_restore').out,
      snapshot_retention_limit: p.child('snapshot_retention_limit').out,
      status: p.child('status').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_group_id: p.child('user_group_id').out,
    },
    elasticache_subnet_group(name, block): {
      local p = path(['aws_elasticache_subnet_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticache_subnet_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    elasticache_user(name, block): {
      local p = path(['aws_elasticache_user', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticache_user: {
              [name]: std.prune({
                access_string: build.template(block.access_string),
                engine: build.template(block.engine),
                no_password_required: build.template(std.get(block, 'no_password_required', null, true)),
                passwords: build.template(std.get(block, 'passwords', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_id: build.template(block.user_id),
                user_name: build.template(block.user_name),
              }),
            },
          },
        },
      },
      access_string: p.child('access_string').out,
      arn: p.child('arn').out,
      engine: p.child('engine').out,
      id: p.child('id').out,
      no_password_required: p.child('no_password_required').out,
      passwords: p.child('passwords').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_id: p.child('user_id').out,
      user_name: p.child('user_name').out,
    },
    elasticache_user_group(name, block): {
      local p = path(['aws_elasticache_user_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticache_user_group: {
              [name]: std.prune({
                engine: build.template(block.engine),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_group_id: build.template(block.user_group_id),
                user_ids: build.template(std.get(block, 'user_ids', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      engine: p.child('engine').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_group_id: p.child('user_group_id').out,
      user_ids: p.child('user_ids').out,
    },
    elasticache_user_group_association(name, block): {
      local p = path(['aws_elasticache_user_group_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticache_user_group_association: {
              [name]: std.prune({
                user_group_id: build.template(block.user_group_id),
                user_id: build.template(block.user_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      user_group_id: p.child('user_group_id').out,
      user_id: p.child('user_id').out,
    },
    elasticsearch_domain(name, block): {
      local p = path(['aws_elasticsearch_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticsearch_domain: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                elasticsearch_version: build.template(std.get(block, 'elasticsearch_version', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_policies: p.child('access_policies').out,
      advanced_options: p.child('advanced_options').out,
      arn: p.child('arn').out,
      domain_id: p.child('domain_id').out,
      domain_name: p.child('domain_name').out,
      elasticsearch_version: p.child('elasticsearch_version').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      kibana_endpoint: p.child('kibana_endpoint').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    elasticsearch_domain_policy(name, block): {
      local p = path(['aws_elasticsearch_domain_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticsearch_domain_policy: {
              [name]: std.prune({
                access_policies: build.template(block.access_policies),
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      access_policies: p.child('access_policies').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
    },
    elasticsearch_domain_saml_options(name, block): {
      local p = path(['aws_elasticsearch_domain_saml_options', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticsearch_domain_saml_options: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
    },
    elasticsearch_vpc_endpoint(name, block): {
      local p = path(['aws_elasticsearch_vpc_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elasticsearch_vpc_endpoint: {
              [name]: std.prune({
                domain_arn: build.template(block.domain_arn),
              }),
            },
          },
        },
      },
      domain_arn: p.child('domain_arn').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
    },
    elastictranscoder_pipeline(name, block): {
      local p = path(['aws_elastictranscoder_pipeline', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elastictranscoder_pipeline: {
              [name]: std.prune({
                aws_kms_key_arn: build.template(std.get(block, 'aws_kms_key_arn', null, true)),
                input_bucket: build.template(block.input_bucket),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_kms_key_arn: p.child('aws_kms_key_arn').out,
      id: p.child('id').out,
      input_bucket: p.child('input_bucket').out,
      name: p.child('name').out,
      output_bucket: p.child('output_bucket').out,
      role: p.child('role').out,
    },
    elastictranscoder_preset(name, block): {
      local p = path(['aws_elastictranscoder_preset', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elastictranscoder_preset: {
              [name]: std.prune({
                container: build.template(block.container),
                description: build.template(std.get(block, 'description', null, true)),
                video_codec_options: build.template(std.get(block, 'video_codec_options', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      container: p.child('container').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      type: p.child('type').out,
      video_codec_options: p.child('video_codec_options').out,
    },
    elb(name, block): {
      local p = path(['aws_elb', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elb: {
              [name]: std.prune({
                connection_draining: build.template(std.get(block, 'connection_draining', null, true)),
                connection_draining_timeout: build.template(std.get(block, 'connection_draining_timeout', null, true)),
                cross_zone_load_balancing: build.template(std.get(block, 'cross_zone_load_balancing', null, true)),
                desync_mitigation_mode: build.template(std.get(block, 'desync_mitigation_mode', null, true)),
                idle_timeout: build.template(std.get(block, 'idle_timeout', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zones: p.child('availability_zones').out,
      connection_draining: p.child('connection_draining').out,
      connection_draining_timeout: p.child('connection_draining_timeout').out,
      cross_zone_load_balancing: p.child('cross_zone_load_balancing').out,
      desync_mitigation_mode: p.child('desync_mitigation_mode').out,
      dns_name: p.child('dns_name').out,
      id: p.child('id').out,
      idle_timeout: p.child('idle_timeout').out,
      instances: p.child('instances').out,
      internal: p.child('internal').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      security_groups: p.child('security_groups').out,
      source_security_group: p.child('source_security_group').out,
      source_security_group_id: p.child('source_security_group_id').out,
      subnets: p.child('subnets').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      zone_id: p.child('zone_id').out,
    },
    elb_attachment(name, block): {
      local p = path(['aws_elb_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_elb_attachment: {
              [name]: std.prune({
                elb: build.template(block.elb),
                instance: build.template(block.instance),
              }),
            },
          },
        },
      },
      elb: p.child('elb').out,
      id: p.child('id').out,
      instance: p.child('instance').out,
    },
    emr_block_public_access_configuration(name, block): {
      local p = path(['aws_emr_block_public_access_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_emr_block_public_access_configuration: {
              [name]: std.prune({
                block_public_security_group_rules: build.template(block.block_public_security_group_rules),
              }),
            },
          },
        },
      },
      block_public_security_group_rules: p.child('block_public_security_group_rules').out,
      id: p.child('id').out,
    },
    emr_cluster(name, block): {
      local p = path(['aws_emr_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_emr_cluster: {
              [name]: std.prune({
                additional_info: build.template(std.get(block, 'additional_info', null, true)),
                applications: build.template(std.get(block, 'applications', null, true)),
                autoscaling_role: build.template(std.get(block, 'autoscaling_role', null, true)),
                configurations: build.template(std.get(block, 'configurations', null, true)),
                configurations_json: build.template(std.get(block, 'configurations_json', null, true)),
                custom_ami_id: build.template(std.get(block, 'custom_ami_id', null, true)),
                ebs_root_volume_size: build.template(std.get(block, 'ebs_root_volume_size', null, true)),
                list_steps_states: build.template(std.get(block, 'list_steps_states', null, true)),
                log_encryption_kms_key_id: build.template(std.get(block, 'log_encryption_kms_key_id', null, true)),
                log_uri: build.template(std.get(block, 'log_uri', null, true)),
                name: build.template(block.name),
                placement_group_config: build.template(std.get(block, 'placement_group_config', null, true)),
                release_label: build.template(block.release_label),
                security_configuration: build.template(std.get(block, 'security_configuration', null, true)),
                service_role: build.template(block.service_role),
                step_concurrency_level: build.template(std.get(block, 'step_concurrency_level', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                unhealthy_node_replacement: build.template(std.get(block, 'unhealthy_node_replacement', null, true)),
                visible_to_all_users: build.template(std.get(block, 'visible_to_all_users', null, true)),
              }),
            },
          },
        },
      },
      additional_info: p.child('additional_info').out,
      applications: p.child('applications').out,
      arn: p.child('arn').out,
      autoscaling_role: p.child('autoscaling_role').out,
      cluster_state: p.child('cluster_state').out,
      configurations: p.child('configurations').out,
      configurations_json: p.child('configurations_json').out,
      custom_ami_id: p.child('custom_ami_id').out,
      ebs_root_volume_size: p.child('ebs_root_volume_size').out,
      id: p.child('id').out,
      keep_job_flow_alive_when_no_steps: p.child('keep_job_flow_alive_when_no_steps').out,
      list_steps_states: p.child('list_steps_states').out,
      log_encryption_kms_key_id: p.child('log_encryption_kms_key_id').out,
      log_uri: p.child('log_uri').out,
      master_public_dns: p.child('master_public_dns').out,
      name: p.child('name').out,
      placement_group_config: p.child('placement_group_config').out,
      release_label: p.child('release_label').out,
      scale_down_behavior: p.child('scale_down_behavior').out,
      security_configuration: p.child('security_configuration').out,
      service_role: p.child('service_role').out,
      step: p.child('step').out,
      step_concurrency_level: p.child('step_concurrency_level').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      termination_protection: p.child('termination_protection').out,
      unhealthy_node_replacement: p.child('unhealthy_node_replacement').out,
      visible_to_all_users: p.child('visible_to_all_users').out,
    },
    emr_instance_fleet(name, block): {
      local p = path(['aws_emr_instance_fleet', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_emr_instance_fleet: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
                name: build.template(std.get(block, 'name', null, true)),
                target_on_demand_capacity: build.template(std.get(block, 'target_on_demand_capacity', null, true)),
                target_spot_capacity: build.template(std.get(block, 'target_spot_capacity', null, true)),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      provisioned_on_demand_capacity: p.child('provisioned_on_demand_capacity').out,
      provisioned_spot_capacity: p.child('provisioned_spot_capacity').out,
      target_on_demand_capacity: p.child('target_on_demand_capacity').out,
      target_spot_capacity: p.child('target_spot_capacity').out,
    },
    emr_instance_group(name, block): {
      local p = path(['aws_emr_instance_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_emr_instance_group: {
              [name]: std.prune({
                autoscaling_policy: build.template(std.get(block, 'autoscaling_policy', null, true)),
                bid_price: build.template(std.get(block, 'bid_price', null, true)),
                cluster_id: build.template(block.cluster_id),
                configurations_json: build.template(std.get(block, 'configurations_json', null, true)),
                ebs_optimized: build.template(std.get(block, 'ebs_optimized', null, true)),
                instance_type: build.template(block.instance_type),
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      autoscaling_policy: p.child('autoscaling_policy').out,
      bid_price: p.child('bid_price').out,
      cluster_id: p.child('cluster_id').out,
      configurations_json: p.child('configurations_json').out,
      ebs_optimized: p.child('ebs_optimized').out,
      id: p.child('id').out,
      instance_count: p.child('instance_count').out,
      instance_type: p.child('instance_type').out,
      name: p.child('name').out,
      running_instance_count: p.child('running_instance_count').out,
      status: p.child('status').out,
    },
    emr_managed_scaling_policy(name, block): {
      local p = path(['aws_emr_managed_scaling_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_emr_managed_scaling_policy: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
              }),
            },
          },
        },
      },
      cluster_id: p.child('cluster_id').out,
      id: p.child('id').out,
    },
    emr_security_configuration(name, block): {
      local p = path(['aws_emr_security_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_emr_security_configuration: {
              [name]: std.prune({
                configuration: build.template(block.configuration),
              }),
            },
          },
        },
      },
      configuration: p.child('configuration').out,
      creation_date: p.child('creation_date').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
    },
    emr_studio(name, block): {
      local p = path(['aws_emr_studio', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_emr_studio: {
              [name]: std.prune({
                auth_mode: build.template(block.auth_mode),
                default_s3_location: build.template(block.default_s3_location),
                description: build.template(std.get(block, 'description', null, true)),
                engine_security_group_id: build.template(block.engine_security_group_id),
                idp_auth_url: build.template(std.get(block, 'idp_auth_url', null, true)),
                idp_relay_state_parameter_name: build.template(std.get(block, 'idp_relay_state_parameter_name', null, true)),
                name: build.template(block.name),
                service_role: build.template(block.service_role),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_role: build.template(std.get(block, 'user_role', null, true)),
                vpc_id: build.template(block.vpc_id),
                workspace_security_group_id: build.template(block.workspace_security_group_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auth_mode: p.child('auth_mode').out,
      default_s3_location: p.child('default_s3_location').out,
      description: p.child('description').out,
      engine_security_group_id: p.child('engine_security_group_id').out,
      id: p.child('id').out,
      idp_auth_url: p.child('idp_auth_url').out,
      idp_relay_state_parameter_name: p.child('idp_relay_state_parameter_name').out,
      name: p.child('name').out,
      service_role: p.child('service_role').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      url: p.child('url').out,
      user_role: p.child('user_role').out,
      vpc_id: p.child('vpc_id').out,
      workspace_security_group_id: p.child('workspace_security_group_id').out,
    },
    emr_studio_session_mapping(name, block): {
      local p = path(['aws_emr_studio_session_mapping', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_emr_studio_session_mapping: {
              [name]: std.prune({
                identity_type: build.template(block.identity_type),
                session_policy_arn: build.template(block.session_policy_arn),
                studio_id: build.template(block.studio_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity_id: p.child('identity_id').out,
      identity_name: p.child('identity_name').out,
      identity_type: p.child('identity_type').out,
      session_policy_arn: p.child('session_policy_arn').out,
      studio_id: p.child('studio_id').out,
    },
    emrcontainers_job_template(name, block): {
      local p = path(['aws_emrcontainers_job_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_emrcontainers_job_template: {
              [name]: std.prune({
                kms_key_arn: build.template(std.get(block, 'kms_key_arn', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    emrcontainers_virtual_cluster(name, block): {
      local p = path(['aws_emrcontainers_virtual_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_emrcontainers_virtual_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    emrserverless_application(name, block): {
      local p = path(['aws_emrserverless_application', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_emrserverless_application: {
              [name]: std.prune({
                architecture: build.template(std.get(block, 'architecture', null, true)),
                name: build.template(block.name),
                release_label: build.template(block.release_label),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      architecture: p.child('architecture').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      release_label: p.child('release_label').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    evidently_feature(name, block): {
      local p = path(['aws_evidently_feature', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_evidently_feature: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                entity_overrides: build.template(std.get(block, 'entity_overrides', null, true)),
                name: build.template(block.name),
                project: build.template(block.project),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_time: p.child('created_time').out,
      default_variation: p.child('default_variation').out,
      description: p.child('description').out,
      entity_overrides: p.child('entity_overrides').out,
      evaluation_rules: p.child('evaluation_rules').out,
      evaluation_strategy: p.child('evaluation_strategy').out,
      id: p.child('id').out,
      last_updated_time: p.child('last_updated_time').out,
      name: p.child('name').out,
      project: p.child('project').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      value_type: p.child('value_type').out,
    },
    evidently_launch(name, block): {
      local p = path(['aws_evidently_launch', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_evidently_launch: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                project: build.template(block.project),
                randomization_salt: build.template(std.get(block, 'randomization_salt', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_time: p.child('created_time').out,
      description: p.child('description').out,
      execution: p.child('execution').out,
      id: p.child('id').out,
      last_updated_time: p.child('last_updated_time').out,
      name: p.child('name').out,
      project: p.child('project').out,
      randomization_salt: p.child('randomization_salt').out,
      status: p.child('status').out,
      status_reason: p.child('status_reason').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    evidently_project(name, block): {
      local p = path(['aws_evidently_project', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_evidently_project: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      active_experiment_count: p.child('active_experiment_count').out,
      active_launch_count: p.child('active_launch_count').out,
      arn: p.child('arn').out,
      created_time: p.child('created_time').out,
      description: p.child('description').out,
      experiment_count: p.child('experiment_count').out,
      feature_count: p.child('feature_count').out,
      id: p.child('id').out,
      last_updated_time: p.child('last_updated_time').out,
      launch_count: p.child('launch_count').out,
      name: p.child('name').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    evidently_segment(name, block): {
      local p = path(['aws_evidently_segment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_evidently_segment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                pattern: build.template(block.pattern),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_time: p.child('created_time').out,
      description: p.child('description').out,
      experiment_count: p.child('experiment_count').out,
      id: p.child('id').out,
      last_updated_time: p.child('last_updated_time').out,
      launch_count: p.child('launch_count').out,
      name: p.child('name').out,
      pattern: p.child('pattern').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    finspace_kx_cluster(name, block): {
      local p = path(['aws_finspace_kx_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_finspace_kx_cluster: {
              [name]: std.prune({
                availability_zone_id: build.template(std.get(block, 'availability_zone_id', null, true)),
                az_mode: build.template(block.az_mode),
                command_line_arguments: build.template(std.get(block, 'command_line_arguments', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                environment_id: build.template(block.environment_id),
                execution_role: build.template(std.get(block, 'execution_role', null, true)),
                initialization_script: build.template(std.get(block, 'initialization_script', null, true)),
                name: build.template(block.name),
                release_label: build.template(block.release_label),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone_id: p.child('availability_zone_id').out,
      az_mode: p.child('az_mode').out,
      command_line_arguments: p.child('command_line_arguments').out,
      created_timestamp: p.child('created_timestamp').out,
      description: p.child('description').out,
      environment_id: p.child('environment_id').out,
      execution_role: p.child('execution_role').out,
      id: p.child('id').out,
      initialization_script: p.child('initialization_script').out,
      last_modified_timestamp: p.child('last_modified_timestamp').out,
      name: p.child('name').out,
      release_label: p.child('release_label').out,
      status: p.child('status').out,
      status_reason: p.child('status_reason').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    finspace_kx_database(name, block): {
      local p = path(['aws_finspace_kx_database', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_finspace_kx_database: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                environment_id: build.template(block.environment_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_timestamp: p.child('created_timestamp').out,
      description: p.child('description').out,
      environment_id: p.child('environment_id').out,
      id: p.child('id').out,
      last_modified_timestamp: p.child('last_modified_timestamp').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    finspace_kx_dataview(name, block): {
      local p = path(['aws_finspace_kx_dataview', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_finspace_kx_dataview: {
              [name]: std.prune({
                auto_update: build.template(block.auto_update),
                availability_zone_id: build.template(std.get(block, 'availability_zone_id', null, true)),
                az_mode: build.template(block.az_mode),
                changeset_id: build.template(std.get(block, 'changeset_id', null, true)),
                database_name: build.template(block.database_name),
                description: build.template(std.get(block, 'description', null, true)),
                environment_id: build.template(block.environment_id),
                name: build.template(block.name),
                read_write: build.template(std.get(block, 'read_write', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_update: p.child('auto_update').out,
      availability_zone_id: p.child('availability_zone_id').out,
      az_mode: p.child('az_mode').out,
      changeset_id: p.child('changeset_id').out,
      created_timestamp: p.child('created_timestamp').out,
      database_name: p.child('database_name').out,
      description: p.child('description').out,
      environment_id: p.child('environment_id').out,
      id: p.child('id').out,
      last_modified_timestamp: p.child('last_modified_timestamp').out,
      name: p.child('name').out,
      read_write: p.child('read_write').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    finspace_kx_environment(name, block): {
      local p = path(['aws_finspace_kx_environment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_finspace_kx_environment: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                kms_key_id: build.template(block.kms_key_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zones: p.child('availability_zones').out,
      created_timestamp: p.child('created_timestamp').out,
      description: p.child('description').out,
      id: p.child('id').out,
      infrastructure_account_id: p.child('infrastructure_account_id').out,
      kms_key_id: p.child('kms_key_id').out,
      last_modified_timestamp: p.child('last_modified_timestamp').out,
      name: p.child('name').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    finspace_kx_scaling_group(name, block): {
      local p = path(['aws_finspace_kx_scaling_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_finspace_kx_scaling_group: {
              [name]: std.prune({
                availability_zone_id: build.template(block.availability_zone_id),
                environment_id: build.template(block.environment_id),
                host_type: build.template(block.host_type),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone_id: p.child('availability_zone_id').out,
      clusters: p.child('clusters').out,
      created_timestamp: p.child('created_timestamp').out,
      environment_id: p.child('environment_id').out,
      host_type: p.child('host_type').out,
      id: p.child('id').out,
      last_modified_timestamp: p.child('last_modified_timestamp').out,
      name: p.child('name').out,
      status: p.child('status').out,
      status_reason: p.child('status_reason').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    finspace_kx_user(name, block): {
      local p = path(['aws_finspace_kx_user', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_finspace_kx_user: {
              [name]: std.prune({
                environment_id: build.template(block.environment_id),
                iam_role: build.template(block.iam_role),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      environment_id: p.child('environment_id').out,
      iam_role: p.child('iam_role').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    finspace_kx_volume(name, block): {
      local p = path(['aws_finspace_kx_volume', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_finspace_kx_volume: {
              [name]: std.prune({
                availability_zones: build.template(block.availability_zones),
                az_mode: build.template(block.az_mode),
                description: build.template(std.get(block, 'description', null, true)),
                environment_id: build.template(block.environment_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attached_clusters: p.child('attached_clusters').out,
      availability_zones: p.child('availability_zones').out,
      az_mode: p.child('az_mode').out,
      created_timestamp: p.child('created_timestamp').out,
      description: p.child('description').out,
      environment_id: p.child('environment_id').out,
      id: p.child('id').out,
      last_modified_timestamp: p.child('last_modified_timestamp').out,
      name: p.child('name').out,
      status: p.child('status').out,
      status_reason: p.child('status_reason').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    fis_experiment_template(name, block): {
      local p = path(['aws_fis_experiment_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fis_experiment_template: {
              [name]: std.prune({
                description: build.template(block.description),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    flow_log(name, block): {
      local p = path(['aws_flow_log', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_flow_log: {
              [name]: std.prune({
                deliver_cross_account_role: build.template(std.get(block, 'deliver_cross_account_role', null, true)),
                eni_id: build.template(std.get(block, 'eni_id', null, true)),
                iam_role_arn: build.template(std.get(block, 'iam_role_arn', null, true)),
                log_destination_type: build.template(std.get(block, 'log_destination_type', null, true)),
                max_aggregation_interval: build.template(std.get(block, 'max_aggregation_interval', null, true)),
                subnet_id: build.template(std.get(block, 'subnet_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                traffic_type: build.template(std.get(block, 'traffic_type', null, true)),
                transit_gateway_attachment_id: build.template(std.get(block, 'transit_gateway_attachment_id', null, true)),
                transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null, true)),
                vpc_id: build.template(std.get(block, 'vpc_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      deliver_cross_account_role: p.child('deliver_cross_account_role').out,
      eni_id: p.child('eni_id').out,
      iam_role_arn: p.child('iam_role_arn').out,
      id: p.child('id').out,
      log_destination: p.child('log_destination').out,
      log_destination_type: p.child('log_destination_type').out,
      log_format: p.child('log_format').out,
      log_group_name: p.child('log_group_name').out,
      max_aggregation_interval: p.child('max_aggregation_interval').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      traffic_type: p.child('traffic_type').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      vpc_id: p.child('vpc_id').out,
    },
    fms_admin_account(name, block): {
      local p = path(['aws_fms_admin_account', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fms_admin_account: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      id: p.child('id').out,
    },
    fms_policy(name, block): {
      local p = path(['aws_fms_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fms_policy: {
              [name]: std.prune({
                delete_all_policy_resources: build.template(std.get(block, 'delete_all_policy_resources', null, true)),
                delete_unused_fm_managed_resources: build.template(std.get(block, 'delete_unused_fm_managed_resources', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                exclude_resource_tags: build.template(block.exclude_resource_tags),
                name: build.template(block.name),
                remediation_enabled: build.template(std.get(block, 'remediation_enabled', null, true)),
                resource_tags: build.template(std.get(block, 'resource_tags', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      delete_all_policy_resources: p.child('delete_all_policy_resources').out,
      delete_unused_fm_managed_resources: p.child('delete_unused_fm_managed_resources').out,
      description: p.child('description').out,
      exclude_resource_tags: p.child('exclude_resource_tags').out,
      id: p.child('id').out,
      name: p.child('name').out,
      policy_update_token: p.child('policy_update_token').out,
      remediation_enabled: p.child('remediation_enabled').out,
      resource_set_ids: p.child('resource_set_ids').out,
      resource_tags: p.child('resource_tags').out,
      resource_type: p.child('resource_type').out,
      resource_type_list: p.child('resource_type_list').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    fms_resource_set(name, block): {
      local p = path(['aws_fms_resource_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fms_resource_set: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    fsx_backup(name, block): {
      local p = path(['aws_fsx_backup', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fsx_backup: {
              [name]: std.prune({
                file_system_id: build.template(std.get(block, 'file_system_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                volume_id: build.template(std.get(block, 'volume_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      file_system_id: p.child('file_system_id').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      volume_id: p.child('volume_id').out,
    },
    fsx_data_repository_association(name, block): {
      local p = path(['aws_fsx_data_repository_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fsx_data_repository_association: {
              [name]: std.prune({
                batch_import_meta_data_on_create: build.template(std.get(block, 'batch_import_meta_data_on_create', null, true)),
                data_repository_path: build.template(block.data_repository_path),
                delete_data_in_filesystem: build.template(std.get(block, 'delete_data_in_filesystem', null, true)),
                file_system_id: build.template(block.file_system_id),
                file_system_path: build.template(block.file_system_path),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      association_id: p.child('association_id').out,
      batch_import_meta_data_on_create: p.child('batch_import_meta_data_on_create').out,
      data_repository_path: p.child('data_repository_path').out,
      delete_data_in_filesystem: p.child('delete_data_in_filesystem').out,
      file_system_id: p.child('file_system_id').out,
      file_system_path: p.child('file_system_path').out,
      id: p.child('id').out,
      imported_file_chunk_size: p.child('imported_file_chunk_size').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    fsx_file_cache(name, block): {
      local p = path(['aws_fsx_file_cache', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fsx_file_cache: {
              [name]: std.prune({
                copy_tags_to_data_repository_associations: build.template(std.get(block, 'copy_tags_to_data_repository_associations', null, true)),
                file_cache_type: build.template(block.file_cache_type),
                file_cache_type_version: build.template(block.file_cache_type_version),
                security_group_ids: build.template(std.get(block, 'security_group_ids', null, true)),
                storage_capacity: build.template(block.storage_capacity),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      copy_tags_to_data_repository_associations: p.child('copy_tags_to_data_repository_associations').out,
      data_repository_association_ids: p.child('data_repository_association_ids').out,
      dns_name: p.child('dns_name').out,
      file_cache_id: p.child('file_cache_id').out,
      file_cache_type: p.child('file_cache_type').out,
      file_cache_type_version: p.child('file_cache_type_version').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      network_interface_ids: p.child('network_interface_ids').out,
      owner_id: p.child('owner_id').out,
      security_group_ids: p.child('security_group_ids').out,
      storage_capacity: p.child('storage_capacity').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    fsx_lustre_file_system(name, block): {
      local p = path(['aws_fsx_lustre_file_system', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fsx_lustre_file_system: {
              [name]: std.prune({
                backup_id: build.template(std.get(block, 'backup_id', null, true)),
                copy_tags_to_backups: build.template(std.get(block, 'copy_tags_to_backups', null, true)),
                data_compression_type: build.template(std.get(block, 'data_compression_type', null, true)),
                deployment_type: build.template(std.get(block, 'deployment_type', null, true)),
                drive_cache_type: build.template(std.get(block, 'drive_cache_type', null, true)),
                final_backup_tags: build.template(std.get(block, 'final_backup_tags', null, true)),
                import_path: build.template(std.get(block, 'import_path', null, true)),
                per_unit_storage_throughput: build.template(std.get(block, 'per_unit_storage_throughput', null, true)),
                security_group_ids: build.template(std.get(block, 'security_group_ids', null, true)),
                skip_final_backup: build.template(std.get(block, 'skip_final_backup', null, true)),
                storage_capacity: build.template(std.get(block, 'storage_capacity', null, true)),
                storage_type: build.template(std.get(block, 'storage_type', null, true)),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_import_policy: p.child('auto_import_policy').out,
      automatic_backup_retention_days: p.child('automatic_backup_retention_days').out,
      backup_id: p.child('backup_id').out,
      copy_tags_to_backups: p.child('copy_tags_to_backups').out,
      daily_automatic_backup_start_time: p.child('daily_automatic_backup_start_time').out,
      data_compression_type: p.child('data_compression_type').out,
      deployment_type: p.child('deployment_type').out,
      dns_name: p.child('dns_name').out,
      drive_cache_type: p.child('drive_cache_type').out,
      export_path: p.child('export_path').out,
      file_system_type_version: p.child('file_system_type_version').out,
      final_backup_tags: p.child('final_backup_tags').out,
      id: p.child('id').out,
      import_path: p.child('import_path').out,
      imported_file_chunk_size: p.child('imported_file_chunk_size').out,
      kms_key_id: p.child('kms_key_id').out,
      mount_name: p.child('mount_name').out,
      network_interface_ids: p.child('network_interface_ids').out,
      owner_id: p.child('owner_id').out,
      per_unit_storage_throughput: p.child('per_unit_storage_throughput').out,
      security_group_ids: p.child('security_group_ids').out,
      skip_final_backup: p.child('skip_final_backup').out,
      storage_capacity: p.child('storage_capacity').out,
      storage_type: p.child('storage_type').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
      weekly_maintenance_start_time: p.child('weekly_maintenance_start_time').out,
    },
    fsx_ontap_file_system(name, block): {
      local p = path(['aws_fsx_ontap_file_system', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fsx_ontap_file_system: {
              [name]: std.prune({
                automatic_backup_retention_days: build.template(std.get(block, 'automatic_backup_retention_days', null, true)),
                deployment_type: build.template(block.deployment_type),
                fsx_admin_password: build.template(std.get(block, 'fsx_admin_password', null, true)),
                preferred_subnet_id: build.template(block.preferred_subnet_id),
                security_group_ids: build.template(std.get(block, 'security_group_ids', null, true)),
                storage_capacity: build.template(block.storage_capacity),
                storage_type: build.template(std.get(block, 'storage_type', null, true)),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      automatic_backup_retention_days: p.child('automatic_backup_retention_days').out,
      daily_automatic_backup_start_time: p.child('daily_automatic_backup_start_time').out,
      deployment_type: p.child('deployment_type').out,
      dns_name: p.child('dns_name').out,
      endpoint_ip_address_range: p.child('endpoint_ip_address_range').out,
      endpoints: p.child('endpoints').out,
      fsx_admin_password: p.child('fsx_admin_password').out,
      ha_pairs: p.child('ha_pairs').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      network_interface_ids: p.child('network_interface_ids').out,
      owner_id: p.child('owner_id').out,
      preferred_subnet_id: p.child('preferred_subnet_id').out,
      route_table_ids: p.child('route_table_ids').out,
      security_group_ids: p.child('security_group_ids').out,
      storage_capacity: p.child('storage_capacity').out,
      storage_type: p.child('storage_type').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      throughput_capacity: p.child('throughput_capacity').out,
      throughput_capacity_per_ha_pair: p.child('throughput_capacity_per_ha_pair').out,
      vpc_id: p.child('vpc_id').out,
      weekly_maintenance_start_time: p.child('weekly_maintenance_start_time').out,
    },
    fsx_ontap_storage_virtual_machine(name, block): {
      local p = path(['aws_fsx_ontap_storage_virtual_machine', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fsx_ontap_storage_virtual_machine: {
              [name]: std.prune({
                file_system_id: build.template(block.file_system_id),
                name: build.template(block.name),
                root_volume_security_style: build.template(std.get(block, 'root_volume_security_style', null, true)),
                svm_admin_password: build.template(std.get(block, 'svm_admin_password', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      endpoints: p.child('endpoints').out,
      file_system_id: p.child('file_system_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      root_volume_security_style: p.child('root_volume_security_style').out,
      subtype: p.child('subtype').out,
      svm_admin_password: p.child('svm_admin_password').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uuid: p.child('uuid').out,
    },
    fsx_ontap_volume(name, block): {
      local p = path(['aws_fsx_ontap_volume', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fsx_ontap_volume: {
              [name]: std.prune({
                bypass_snaplock_enterprise_retention: build.template(std.get(block, 'bypass_snaplock_enterprise_retention', null, true)),
                copy_tags_to_backups: build.template(std.get(block, 'copy_tags_to_backups', null, true)),
                final_backup_tags: build.template(std.get(block, 'final_backup_tags', null, true)),
                junction_path: build.template(std.get(block, 'junction_path', null, true)),
                name: build.template(block.name),
                skip_final_backup: build.template(std.get(block, 'skip_final_backup', null, true)),
                storage_efficiency_enabled: build.template(std.get(block, 'storage_efficiency_enabled', null, true)),
                storage_virtual_machine_id: build.template(block.storage_virtual_machine_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                volume_type: build.template(std.get(block, 'volume_type', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bypass_snaplock_enterprise_retention: p.child('bypass_snaplock_enterprise_retention').out,
      copy_tags_to_backups: p.child('copy_tags_to_backups').out,
      file_system_id: p.child('file_system_id').out,
      final_backup_tags: p.child('final_backup_tags').out,
      flexcache_endpoint_type: p.child('flexcache_endpoint_type').out,
      id: p.child('id').out,
      junction_path: p.child('junction_path').out,
      name: p.child('name').out,
      ontap_volume_type: p.child('ontap_volume_type').out,
      security_style: p.child('security_style').out,
      size_in_bytes: p.child('size_in_bytes').out,
      size_in_megabytes: p.child('size_in_megabytes').out,
      skip_final_backup: p.child('skip_final_backup').out,
      snapshot_policy: p.child('snapshot_policy').out,
      storage_efficiency_enabled: p.child('storage_efficiency_enabled').out,
      storage_virtual_machine_id: p.child('storage_virtual_machine_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      uuid: p.child('uuid').out,
      volume_style: p.child('volume_style').out,
      volume_type: p.child('volume_type').out,
    },
    fsx_openzfs_file_system(name, block): {
      local p = path(['aws_fsx_openzfs_file_system', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fsx_openzfs_file_system: {
              [name]: std.prune({
                automatic_backup_retention_days: build.template(std.get(block, 'automatic_backup_retention_days', null, true)),
                backup_id: build.template(std.get(block, 'backup_id', null, true)),
                copy_tags_to_backups: build.template(std.get(block, 'copy_tags_to_backups', null, true)),
                copy_tags_to_volumes: build.template(std.get(block, 'copy_tags_to_volumes', null, true)),
                delete_options: build.template(std.get(block, 'delete_options', null, true)),
                deployment_type: build.template(block.deployment_type),
                final_backup_tags: build.template(std.get(block, 'final_backup_tags', null, true)),
                preferred_subnet_id: build.template(std.get(block, 'preferred_subnet_id', null, true)),
                security_group_ids: build.template(std.get(block, 'security_group_ids', null, true)),
                skip_final_backup: build.template(std.get(block, 'skip_final_backup', null, true)),
                storage_capacity: build.template(std.get(block, 'storage_capacity', null, true)),
                storage_type: build.template(std.get(block, 'storage_type', null, true)),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
                throughput_capacity: build.template(block.throughput_capacity),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      automatic_backup_retention_days: p.child('automatic_backup_retention_days').out,
      backup_id: p.child('backup_id').out,
      copy_tags_to_backups: p.child('copy_tags_to_backups').out,
      copy_tags_to_volumes: p.child('copy_tags_to_volumes').out,
      daily_automatic_backup_start_time: p.child('daily_automatic_backup_start_time').out,
      delete_options: p.child('delete_options').out,
      deployment_type: p.child('deployment_type').out,
      dns_name: p.child('dns_name').out,
      endpoint_ip_address: p.child('endpoint_ip_address').out,
      endpoint_ip_address_range: p.child('endpoint_ip_address_range').out,
      final_backup_tags: p.child('final_backup_tags').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      network_interface_ids: p.child('network_interface_ids').out,
      owner_id: p.child('owner_id').out,
      preferred_subnet_id: p.child('preferred_subnet_id').out,
      root_volume_id: p.child('root_volume_id').out,
      route_table_ids: p.child('route_table_ids').out,
      security_group_ids: p.child('security_group_ids').out,
      skip_final_backup: p.child('skip_final_backup').out,
      storage_capacity: p.child('storage_capacity').out,
      storage_type: p.child('storage_type').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      throughput_capacity: p.child('throughput_capacity').out,
      vpc_id: p.child('vpc_id').out,
      weekly_maintenance_start_time: p.child('weekly_maintenance_start_time').out,
    },
    fsx_openzfs_snapshot(name, block): {
      local p = path(['aws_fsx_openzfs_snapshot', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fsx_openzfs_snapshot: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                volume_id: build.template(block.volume_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      volume_id: p.child('volume_id').out,
    },
    fsx_openzfs_volume(name, block): {
      local p = path(['aws_fsx_openzfs_volume', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fsx_openzfs_volume: {
              [name]: std.prune({
                copy_tags_to_snapshots: build.template(std.get(block, 'copy_tags_to_snapshots', null, true)),
                data_compression_type: build.template(std.get(block, 'data_compression_type', null, true)),
                delete_volume_options: build.template(std.get(block, 'delete_volume_options', null, true)),
                name: build.template(block.name),
                parent_volume_id: build.template(block.parent_volume_id),
                record_size_kib: build.template(std.get(block, 'record_size_kib', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                volume_type: build.template(std.get(block, 'volume_type', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      copy_tags_to_snapshots: p.child('copy_tags_to_snapshots').out,
      data_compression_type: p.child('data_compression_type').out,
      delete_volume_options: p.child('delete_volume_options').out,
      id: p.child('id').out,
      name: p.child('name').out,
      parent_volume_id: p.child('parent_volume_id').out,
      read_only: p.child('read_only').out,
      record_size_kib: p.child('record_size_kib').out,
      storage_capacity_quota_gib: p.child('storage_capacity_quota_gib').out,
      storage_capacity_reservation_gib: p.child('storage_capacity_reservation_gib').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      volume_type: p.child('volume_type').out,
    },
    fsx_windows_file_system(name, block): {
      local p = path(['aws_fsx_windows_file_system', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_fsx_windows_file_system: {
              [name]: std.prune({
                active_directory_id: build.template(std.get(block, 'active_directory_id', null, true)),
                aliases: build.template(std.get(block, 'aliases', null, true)),
                automatic_backup_retention_days: build.template(std.get(block, 'automatic_backup_retention_days', null, true)),
                backup_id: build.template(std.get(block, 'backup_id', null, true)),
                copy_tags_to_backups: build.template(std.get(block, 'copy_tags_to_backups', null, true)),
                deployment_type: build.template(std.get(block, 'deployment_type', null, true)),
                final_backup_tags: build.template(std.get(block, 'final_backup_tags', null, true)),
                security_group_ids: build.template(std.get(block, 'security_group_ids', null, true)),
                skip_final_backup: build.template(std.get(block, 'skip_final_backup', null, true)),
                storage_type: build.template(std.get(block, 'storage_type', null, true)),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
                throughput_capacity: build.template(block.throughput_capacity),
              }),
            },
          },
        },
      },
      active_directory_id: p.child('active_directory_id').out,
      aliases: p.child('aliases').out,
      arn: p.child('arn').out,
      automatic_backup_retention_days: p.child('automatic_backup_retention_days').out,
      backup_id: p.child('backup_id').out,
      copy_tags_to_backups: p.child('copy_tags_to_backups').out,
      daily_automatic_backup_start_time: p.child('daily_automatic_backup_start_time').out,
      deployment_type: p.child('deployment_type').out,
      dns_name: p.child('dns_name').out,
      final_backup_tags: p.child('final_backup_tags').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      network_interface_ids: p.child('network_interface_ids').out,
      owner_id: p.child('owner_id').out,
      preferred_file_server_ip: p.child('preferred_file_server_ip').out,
      preferred_subnet_id: p.child('preferred_subnet_id').out,
      remote_administration_endpoint: p.child('remote_administration_endpoint').out,
      security_group_ids: p.child('security_group_ids').out,
      skip_final_backup: p.child('skip_final_backup').out,
      storage_capacity: p.child('storage_capacity').out,
      storage_type: p.child('storage_type').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      throughput_capacity: p.child('throughput_capacity').out,
      vpc_id: p.child('vpc_id').out,
      weekly_maintenance_start_time: p.child('weekly_maintenance_start_time').out,
    },
    gamelift_alias(name, block): {
      local p = path(['aws_gamelift_alias', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_gamelift_alias: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    gamelift_build(name, block): {
      local p = path(['aws_gamelift_build', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_gamelift_build: {
              [name]: std.prune({
                name: build.template(block.name),
                operating_system: build.template(block.operating_system),
                tags: build.template(std.get(block, 'tags', null, true)),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      operating_system: p.child('operating_system').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    gamelift_fleet(name, block): {
      local p = path(['aws_gamelift_fleet', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_gamelift_fleet: {
              [name]: std.prune({
                build_id: build.template(std.get(block, 'build_id', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                ec2_instance_type: build.template(block.ec2_instance_type),
                fleet_type: build.template(std.get(block, 'fleet_type', null, true)),
                instance_role_arn: build.template(std.get(block, 'instance_role_arn', null, true)),
                name: build.template(block.name),
                new_game_session_protection_policy: build.template(std.get(block, 'new_game_session_protection_policy', null, true)),
                script_id: build.template(std.get(block, 'script_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      build_arn: p.child('build_arn').out,
      build_id: p.child('build_id').out,
      description: p.child('description').out,
      ec2_instance_type: p.child('ec2_instance_type').out,
      fleet_type: p.child('fleet_type').out,
      id: p.child('id').out,
      instance_role_arn: p.child('instance_role_arn').out,
      log_paths: p.child('log_paths').out,
      metric_groups: p.child('metric_groups').out,
      name: p.child('name').out,
      new_game_session_protection_policy: p.child('new_game_session_protection_policy').out,
      operating_system: p.child('operating_system').out,
      script_arn: p.child('script_arn').out,
      script_id: p.child('script_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    gamelift_game_server_group(name, block): {
      local p = path(['aws_gamelift_game_server_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_gamelift_game_server_group: {
              [name]: std.prune({
                game_server_group_name: build.template(block.game_server_group_name),
                max_size: build.template(block.max_size),
                min_size: build.template(block.min_size),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_subnets: build.template(std.get(block, 'vpc_subnets', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_scaling_group_arn: p.child('auto_scaling_group_arn').out,
      balancing_strategy: p.child('balancing_strategy').out,
      game_server_group_name: p.child('game_server_group_name').out,
      game_server_protection_policy: p.child('game_server_protection_policy').out,
      id: p.child('id').out,
      max_size: p.child('max_size').out,
      min_size: p.child('min_size').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_subnets: p.child('vpc_subnets').out,
    },
    gamelift_game_session_queue(name, block): {
      local p = path(['aws_gamelift_game_session_queue', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_gamelift_game_session_queue: {
              [name]: std.prune({
                custom_event_data: build.template(std.get(block, 'custom_event_data', null, true)),
                destinations: build.template(std.get(block, 'destinations', null, true)),
                name: build.template(block.name),
                notification_target: build.template(std.get(block, 'notification_target', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                timeout_in_seconds: build.template(std.get(block, 'timeout_in_seconds', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      custom_event_data: p.child('custom_event_data').out,
      destinations: p.child('destinations').out,
      id: p.child('id').out,
      name: p.child('name').out,
      notification_target: p.child('notification_target').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      timeout_in_seconds: p.child('timeout_in_seconds').out,
    },
    gamelift_script(name, block): {
      local p = path(['aws_gamelift_script', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_gamelift_script: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                version: build.template(std.get(block, 'version', null, true)),
                zip_file: build.template(std.get(block, 'zip_file', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
      zip_file: p.child('zip_file').out,
    },
    glacier_vault(name, block): {
      local p = path(['aws_glacier_vault', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glacier_vault: {
              [name]: std.prune({
                access_policy: build.template(std.get(block, 'access_policy', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_policy: p.child('access_policy').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    glacier_vault_lock(name, block): {
      local p = path(['aws_glacier_vault_lock', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glacier_vault_lock: {
              [name]: std.prune({
                complete_lock: build.template(block.complete_lock),
                ignore_deletion_error: build.template(std.get(block, 'ignore_deletion_error', null, true)),
                policy: build.template(block.policy),
                vault_name: build.template(block.vault_name),
              }),
            },
          },
        },
      },
      complete_lock: p.child('complete_lock').out,
      id: p.child('id').out,
      ignore_deletion_error: p.child('ignore_deletion_error').out,
      policy: p.child('policy').out,
      vault_name: p.child('vault_name').out,
    },
    globalaccelerator_accelerator(name, block): {
      local p = path(['aws_globalaccelerator_accelerator', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_globalaccelerator_accelerator: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                ip_address_type: build.template(std.get(block, 'ip_address_type', null, true)),
                ip_addresses: build.template(std.get(block, 'ip_addresses', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      dns_name: p.child('dns_name').out,
      dual_stack_dns_name: p.child('dual_stack_dns_name').out,
      enabled: p.child('enabled').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      id: p.child('id').out,
      ip_address_type: p.child('ip_address_type').out,
      ip_addresses: p.child('ip_addresses').out,
      ip_sets: p.child('ip_sets').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    globalaccelerator_cross_account_attachment(name, block): {
      local p = path(['aws_globalaccelerator_cross_account_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_globalaccelerator_cross_account_attachment: {
              [name]: std.prune({
                name: build.template(block.name),
                principals: build.template(std.get(block, 'principals', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_time: p.child('created_time').out,
      id: p.child('id').out,
      last_modified_time: p.child('last_modified_time').out,
      name: p.child('name').out,
      principals: p.child('principals').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    globalaccelerator_custom_routing_accelerator(name, block): {
      local p = path(['aws_globalaccelerator_custom_routing_accelerator', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_globalaccelerator_custom_routing_accelerator: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                ip_address_type: build.template(std.get(block, 'ip_address_type', null, true)),
                ip_addresses: build.template(std.get(block, 'ip_addresses', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      dns_name: p.child('dns_name').out,
      enabled: p.child('enabled').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      id: p.child('id').out,
      ip_address_type: p.child('ip_address_type').out,
      ip_addresses: p.child('ip_addresses').out,
      ip_sets: p.child('ip_sets').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    globalaccelerator_custom_routing_endpoint_group(name, block): {
      local p = path(['aws_globalaccelerator_custom_routing_endpoint_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_globalaccelerator_custom_routing_endpoint_group: {
              [name]: std.prune({
                listener_arn: build.template(block.listener_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      endpoint_group_region: p.child('endpoint_group_region').out,
      id: p.child('id').out,
      listener_arn: p.child('listener_arn').out,
    },
    globalaccelerator_custom_routing_listener(name, block): {
      local p = path(['aws_globalaccelerator_custom_routing_listener', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_globalaccelerator_custom_routing_listener: {
              [name]: std.prune({
                accelerator_arn: build.template(block.accelerator_arn),
              }),
            },
          },
        },
      },
      accelerator_arn: p.child('accelerator_arn').out,
      id: p.child('id').out,
    },
    globalaccelerator_endpoint_group(name, block): {
      local p = path(['aws_globalaccelerator_endpoint_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_globalaccelerator_endpoint_group: {
              [name]: std.prune({
                health_check_interval_seconds: build.template(std.get(block, 'health_check_interval_seconds', null, true)),
                health_check_protocol: build.template(std.get(block, 'health_check_protocol', null, true)),
                listener_arn: build.template(block.listener_arn),
                threshold_count: build.template(std.get(block, 'threshold_count', null, true)),
                traffic_dial_percentage: build.template(std.get(block, 'traffic_dial_percentage', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      endpoint_group_region: p.child('endpoint_group_region').out,
      health_check_interval_seconds: p.child('health_check_interval_seconds').out,
      health_check_path: p.child('health_check_path').out,
      health_check_port: p.child('health_check_port').out,
      health_check_protocol: p.child('health_check_protocol').out,
      id: p.child('id').out,
      listener_arn: p.child('listener_arn').out,
      threshold_count: p.child('threshold_count').out,
      traffic_dial_percentage: p.child('traffic_dial_percentage').out,
    },
    globalaccelerator_listener(name, block): {
      local p = path(['aws_globalaccelerator_listener', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_globalaccelerator_listener: {
              [name]: std.prune({
                accelerator_arn: build.template(block.accelerator_arn),
                client_affinity: build.template(std.get(block, 'client_affinity', null, true)),
                protocol: build.template(block.protocol),
              }),
            },
          },
        },
      },
      accelerator_arn: p.child('accelerator_arn').out,
      client_affinity: p.child('client_affinity').out,
      id: p.child('id').out,
      protocol: p.child('protocol').out,
    },
    glue_catalog_database(name, block): {
      local p = path(['aws_glue_catalog_database', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_catalog_database: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      catalog_id: p.child('catalog_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      location_uri: p.child('location_uri').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    glue_catalog_table(name, block): {
      local p = path(['aws_glue_catalog_table', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_catalog_table: {
              [name]: std.prune({
                database_name: build.template(block.database_name),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                owner: build.template(std.get(block, 'owner', null, true)),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                retention: build.template(std.get(block, 'retention', null, true)),
                table_type: build.template(std.get(block, 'table_type', null, true)),
                view_expanded_text: build.template(std.get(block, 'view_expanded_text', null, true)),
                view_original_text: build.template(std.get(block, 'view_original_text', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      catalog_id: p.child('catalog_id').out,
      database_name: p.child('database_name').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      parameters: p.child('parameters').out,
      retention: p.child('retention').out,
      table_type: p.child('table_type').out,
      view_expanded_text: p.child('view_expanded_text').out,
      view_original_text: p.child('view_original_text').out,
    },
    glue_catalog_table_optimizer(name, block): {
      local p = path(['aws_glue_catalog_table_optimizer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_catalog_table_optimizer: {
              [name]: std.prune({
                catalog_id: build.template(block.catalog_id),
                database_name: build.template(block.database_name),
                table_name: build.template(block.table_name),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      catalog_id: p.child('catalog_id').out,
      database_name: p.child('database_name').out,
      table_name: p.child('table_name').out,
      type: p.child('type').out,
    },
    glue_classifier(name, block): {
      local p = path(['aws_glue_classifier', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_classifier: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    glue_connection(name, block): {
      local p = path(['aws_glue_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_connection: {
              [name]: std.prune({
                connection_properties: build.template(std.get(block, 'connection_properties', null, true)),
                connection_type: build.template(std.get(block, 'connection_type', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                match_criteria: build.template(std.get(block, 'match_criteria', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      catalog_id: p.child('catalog_id').out,
      connection_properties: p.child('connection_properties').out,
      connection_type: p.child('connection_type').out,
      description: p.child('description').out,
      id: p.child('id').out,
      match_criteria: p.child('match_criteria').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    glue_crawler(name, block): {
      local p = path(['aws_glue_crawler', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_crawler: {
              [name]: std.prune({
                classifiers: build.template(std.get(block, 'classifiers', null, true)),
                configuration: build.template(std.get(block, 'configuration', null, true)),
                database_name: build.template(block.database_name),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                role: build.template(block.role),
                schedule: build.template(std.get(block, 'schedule', null, true)),
                security_configuration: build.template(std.get(block, 'security_configuration', null, true)),
                table_prefix: build.template(std.get(block, 'table_prefix', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      classifiers: p.child('classifiers').out,
      configuration: p.child('configuration').out,
      database_name: p.child('database_name').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      role: p.child('role').out,
      schedule: p.child('schedule').out,
      security_configuration: p.child('security_configuration').out,
      table_prefix: p.child('table_prefix').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    glue_data_catalog_encryption_settings(name, block): {
      local p = path(['aws_glue_data_catalog_encryption_settings', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_data_catalog_encryption_settings: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      catalog_id: p.child('catalog_id').out,
      id: p.child('id').out,
    },
    glue_data_quality_ruleset(name, block): {
      local p = path(['aws_glue_data_quality_ruleset', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_data_quality_ruleset: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                ruleset: build.template(block.ruleset),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_on: p.child('created_on').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_modified_on: p.child('last_modified_on').out,
      name: p.child('name').out,
      recommendation_run_id: p.child('recommendation_run_id').out,
      ruleset: p.child('ruleset').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    glue_dev_endpoint(name, block): {
      local p = path(['aws_glue_dev_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_dev_endpoint: {
              [name]: std.prune({
                arguments: build.template(std.get(block, 'arguments', null, true)),
                extra_jars_s3_path: build.template(std.get(block, 'extra_jars_s3_path', null, true)),
                extra_python_libs_s3_path: build.template(std.get(block, 'extra_python_libs_s3_path', null, true)),
                glue_version: build.template(std.get(block, 'glue_version', null, true)),
                name: build.template(block.name),
                number_of_nodes: build.template(std.get(block, 'number_of_nodes', null, true)),
                number_of_workers: build.template(std.get(block, 'number_of_workers', null, true)),
                public_key: build.template(std.get(block, 'public_key', null, true)),
                public_keys: build.template(std.get(block, 'public_keys', null, true)),
                role_arn: build.template(block.role_arn),
                security_configuration: build.template(std.get(block, 'security_configuration', null, true)),
                security_group_ids: build.template(std.get(block, 'security_group_ids', null, true)),
                subnet_id: build.template(std.get(block, 'subnet_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                worker_type: build.template(std.get(block, 'worker_type', null, true)),
              }),
            },
          },
        },
      },
      arguments: p.child('arguments').out,
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      extra_jars_s3_path: p.child('extra_jars_s3_path').out,
      extra_python_libs_s3_path: p.child('extra_python_libs_s3_path').out,
      failure_reason: p.child('failure_reason').out,
      glue_version: p.child('glue_version').out,
      id: p.child('id').out,
      name: p.child('name').out,
      number_of_nodes: p.child('number_of_nodes').out,
      number_of_workers: p.child('number_of_workers').out,
      private_address: p.child('private_address').out,
      public_address: p.child('public_address').out,
      public_key: p.child('public_key').out,
      public_keys: p.child('public_keys').out,
      role_arn: p.child('role_arn').out,
      security_configuration: p.child('security_configuration').out,
      security_group_ids: p.child('security_group_ids').out,
      status: p.child('status').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
      worker_type: p.child('worker_type').out,
      yarn_endpoint_address: p.child('yarn_endpoint_address').out,
      zeppelin_remote_spark_interpreter_port: p.child('zeppelin_remote_spark_interpreter_port').out,
    },
    glue_job(name, block): {
      local p = path(['aws_glue_job', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_job: {
              [name]: std.prune({
                connections: build.template(std.get(block, 'connections', null, true)),
                default_arguments: build.template(std.get(block, 'default_arguments', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                execution_class: build.template(std.get(block, 'execution_class', null, true)),
                job_run_queuing_enabled: build.template(std.get(block, 'job_run_queuing_enabled', null, true)),
                maintenance_window: build.template(std.get(block, 'maintenance_window', null, true)),
                max_retries: build.template(std.get(block, 'max_retries', null, true)),
                name: build.template(block.name),
                non_overridable_arguments: build.template(std.get(block, 'non_overridable_arguments', null, true)),
                role_arn: build.template(block.role_arn),
                security_configuration: build.template(std.get(block, 'security_configuration', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      connections: p.child('connections').out,
      default_arguments: p.child('default_arguments').out,
      description: p.child('description').out,
      execution_class: p.child('execution_class').out,
      glue_version: p.child('glue_version').out,
      id: p.child('id').out,
      job_run_queuing_enabled: p.child('job_run_queuing_enabled').out,
      maintenance_window: p.child('maintenance_window').out,
      max_capacity: p.child('max_capacity').out,
      max_retries: p.child('max_retries').out,
      name: p.child('name').out,
      non_overridable_arguments: p.child('non_overridable_arguments').out,
      number_of_workers: p.child('number_of_workers').out,
      role_arn: p.child('role_arn').out,
      security_configuration: p.child('security_configuration').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      timeout: p.child('timeout').out,
      worker_type: p.child('worker_type').out,
    },
    glue_ml_transform(name, block): {
      local p = path(['aws_glue_ml_transform', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_ml_transform: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                max_retries: build.template(std.get(block, 'max_retries', null, true)),
                name: build.template(block.name),
                number_of_workers: build.template(std.get(block, 'number_of_workers', null, true)),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                timeout: build.template(std.get(block, 'timeout', null, true)),
                worker_type: build.template(std.get(block, 'worker_type', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      glue_version: p.child('glue_version').out,
      id: p.child('id').out,
      label_count: p.child('label_count').out,
      max_capacity: p.child('max_capacity').out,
      max_retries: p.child('max_retries').out,
      name: p.child('name').out,
      number_of_workers: p.child('number_of_workers').out,
      role_arn: p.child('role_arn').out,
      schema: p.child('schema').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      timeout: p.child('timeout').out,
      worker_type: p.child('worker_type').out,
    },
    glue_partition(name, block): {
      local p = path(['aws_glue_partition', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_partition: {
              [name]: std.prune({
                database_name: build.template(block.database_name),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                partition_values: build.template(block.partition_values),
                table_name: build.template(block.table_name),
              }),
            },
          },
        },
      },
      catalog_id: p.child('catalog_id').out,
      creation_time: p.child('creation_time').out,
      database_name: p.child('database_name').out,
      id: p.child('id').out,
      last_accessed_time: p.child('last_accessed_time').out,
      last_analyzed_time: p.child('last_analyzed_time').out,
      parameters: p.child('parameters').out,
      partition_values: p.child('partition_values').out,
      table_name: p.child('table_name').out,
    },
    glue_partition_index(name, block): {
      local p = path(['aws_glue_partition_index', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_partition_index: {
              [name]: std.prune({
                database_name: build.template(block.database_name),
                table_name: build.template(block.table_name),
              }),
            },
          },
        },
      },
      catalog_id: p.child('catalog_id').out,
      database_name: p.child('database_name').out,
      id: p.child('id').out,
      table_name: p.child('table_name').out,
    },
    glue_registry(name, block): {
      local p = path(['aws_glue_registry', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_registry: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                registry_name: build.template(block.registry_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      registry_name: p.child('registry_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    glue_resource_policy(name, block): {
      local p = path(['aws_glue_resource_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_resource_policy: {
              [name]: std.prune({
                enable_hybrid: build.template(std.get(block, 'enable_hybrid', null, true)),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      enable_hybrid: p.child('enable_hybrid').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
    },
    glue_schema(name, block): {
      local p = path(['aws_glue_schema', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_schema: {
              [name]: std.prune({
                compatibility: build.template(block.compatibility),
                data_format: build.template(block.data_format),
                description: build.template(std.get(block, 'description', null, true)),
                schema_definition: build.template(block.schema_definition),
                schema_name: build.template(block.schema_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      compatibility: p.child('compatibility').out,
      data_format: p.child('data_format').out,
      description: p.child('description').out,
      id: p.child('id').out,
      latest_schema_version: p.child('latest_schema_version').out,
      next_schema_version: p.child('next_schema_version').out,
      registry_arn: p.child('registry_arn').out,
      registry_name: p.child('registry_name').out,
      schema_checkpoint: p.child('schema_checkpoint').out,
      schema_definition: p.child('schema_definition').out,
      schema_name: p.child('schema_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    glue_security_configuration(name, block): {
      local p = path(['aws_glue_security_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_security_configuration: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    glue_trigger(name, block): {
      local p = path(['aws_glue_trigger', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_trigger: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                name: build.template(block.name),
                schedule: build.template(std.get(block, 'schedule', null, true)),
                start_on_creation: build.template(std.get(block, 'start_on_creation', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
                workflow_name: build.template(std.get(block, 'workflow_name', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      schedule: p.child('schedule').out,
      start_on_creation: p.child('start_on_creation').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      workflow_name: p.child('workflow_name').out,
    },
    glue_user_defined_function(name, block): {
      local p = path(['aws_glue_user_defined_function', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_user_defined_function: {
              [name]: std.prune({
                catalog_id: build.template(std.get(block, 'catalog_id', null, true)),
                class_name: build.template(block.class_name),
                database_name: build.template(block.database_name),
                name: build.template(block.name),
                owner_name: build.template(block.owner_name),
                owner_type: build.template(block.owner_type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      catalog_id: p.child('catalog_id').out,
      class_name: p.child('class_name').out,
      create_time: p.child('create_time').out,
      database_name: p.child('database_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner_name: p.child('owner_name').out,
      owner_type: p.child('owner_type').out,
    },
    glue_workflow(name, block): {
      local p = path(['aws_glue_workflow', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_glue_workflow: {
              [name]: std.prune({
                default_run_properties: build.template(std.get(block, 'default_run_properties', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                max_concurrent_runs: build.template(std.get(block, 'max_concurrent_runs', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_run_properties: p.child('default_run_properties').out,
      description: p.child('description').out,
      id: p.child('id').out,
      max_concurrent_runs: p.child('max_concurrent_runs').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    grafana_license_association(name, block): {
      local p = path(['aws_grafana_license_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_grafana_license_association: {
              [name]: std.prune({
                grafana_token: build.template(std.get(block, 'grafana_token', null, true)),
                license_type: build.template(block.license_type),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      free_trial_expiration: p.child('free_trial_expiration').out,
      grafana_token: p.child('grafana_token').out,
      id: p.child('id').out,
      license_expiration: p.child('license_expiration').out,
      license_type: p.child('license_type').out,
      workspace_id: p.child('workspace_id').out,
    },
    grafana_role_association(name, block): {
      local p = path(['aws_grafana_role_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_grafana_role_association: {
              [name]: std.prune({
                group_ids: build.template(std.get(block, 'group_ids', null, true)),
                role: build.template(block.role),
                user_ids: build.template(std.get(block, 'user_ids', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      group_ids: p.child('group_ids').out,
      id: p.child('id').out,
      role: p.child('role').out,
      user_ids: p.child('user_ids').out,
      workspace_id: p.child('workspace_id').out,
    },
    grafana_workspace(name, block): {
      local p = path(['aws_grafana_workspace', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_grafana_workspace: {
              [name]: std.prune({
                account_access_type: build.template(block.account_access_type),
                authentication_providers: build.template(block.authentication_providers),
                data_sources: build.template(std.get(block, 'data_sources', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                notification_destinations: build.template(std.get(block, 'notification_destinations', null, true)),
                organization_role_name: build.template(std.get(block, 'organization_role_name', null, true)),
                organizational_units: build.template(std.get(block, 'organizational_units', null, true)),
                permission_type: build.template(block.permission_type),
                role_arn: build.template(std.get(block, 'role_arn', null, true)),
                stack_set_name: build.template(std.get(block, 'stack_set_name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      account_access_type: p.child('account_access_type').out,
      arn: p.child('arn').out,
      authentication_providers: p.child('authentication_providers').out,
      configuration: p.child('configuration').out,
      data_sources: p.child('data_sources').out,
      description: p.child('description').out,
      endpoint: p.child('endpoint').out,
      grafana_version: p.child('grafana_version').out,
      id: p.child('id').out,
      name: p.child('name').out,
      notification_destinations: p.child('notification_destinations').out,
      organization_role_name: p.child('organization_role_name').out,
      organizational_units: p.child('organizational_units').out,
      permission_type: p.child('permission_type').out,
      role_arn: p.child('role_arn').out,
      saml_configuration_status: p.child('saml_configuration_status').out,
      stack_set_name: p.child('stack_set_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    grafana_workspace_api_key(name, block): {
      local p = path(['aws_grafana_workspace_api_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_grafana_workspace_api_key: {
              [name]: std.prune({
                key_name: build.template(block.key_name),
                key_role: build.template(block.key_role),
                seconds_to_live: build.template(block.seconds_to_live),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key: p.child('key').out,
      key_name: p.child('key_name').out,
      key_role: p.child('key_role').out,
      seconds_to_live: p.child('seconds_to_live').out,
      workspace_id: p.child('workspace_id').out,
    },
    grafana_workspace_saml_configuration(name, block): {
      local p = path(['aws_grafana_workspace_saml_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_grafana_workspace_saml_configuration: {
              [name]: std.prune({
                admin_role_values: build.template(std.get(block, 'admin_role_values', null, true)),
                allowed_organizations: build.template(std.get(block, 'allowed_organizations', null, true)),
                editor_role_values: build.template(block.editor_role_values),
                groups_assertion: build.template(std.get(block, 'groups_assertion', null, true)),
                idp_metadata_url: build.template(std.get(block, 'idp_metadata_url', null, true)),
                idp_metadata_xml: build.template(std.get(block, 'idp_metadata_xml', null, true)),
                org_assertion: build.template(std.get(block, 'org_assertion', null, true)),
                role_assertion: build.template(std.get(block, 'role_assertion', null, true)),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      admin_role_values: p.child('admin_role_values').out,
      allowed_organizations: p.child('allowed_organizations').out,
      editor_role_values: p.child('editor_role_values').out,
      email_assertion: p.child('email_assertion').out,
      groups_assertion: p.child('groups_assertion').out,
      id: p.child('id').out,
      idp_metadata_url: p.child('idp_metadata_url').out,
      idp_metadata_xml: p.child('idp_metadata_xml').out,
      login_assertion: p.child('login_assertion').out,
      login_validity_duration: p.child('login_validity_duration').out,
      name_assertion: p.child('name_assertion').out,
      org_assertion: p.child('org_assertion').out,
      role_assertion: p.child('role_assertion').out,
      status: p.child('status').out,
      workspace_id: p.child('workspace_id').out,
    },
    grafana_workspace_service_account(name, block): {
      local p = path(['aws_grafana_workspace_service_account', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_grafana_workspace_service_account: {
              [name]: std.prune({
                grafana_role: build.template(block.grafana_role),
                name: build.template(block.name),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      grafana_role: p.child('grafana_role').out,
      id: p.child('id').out,
      name: p.child('name').out,
      service_account_id: p.child('service_account_id').out,
      workspace_id: p.child('workspace_id').out,
    },
    grafana_workspace_service_account_token(name, block): {
      local p = path(['aws_grafana_workspace_service_account_token', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_grafana_workspace_service_account_token: {
              [name]: std.prune({
                name: build.template(block.name),
                seconds_to_live: build.template(block.seconds_to_live),
                service_account_id: build.template(block.service_account_id),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      created_at: p.child('created_at').out,
      expires_at: p.child('expires_at').out,
      id: p.child('id').out,
      key: p.child('key').out,
      name: p.child('name').out,
      seconds_to_live: p.child('seconds_to_live').out,
      service_account_id: p.child('service_account_id').out,
      service_account_token_id: p.child('service_account_token_id').out,
      workspace_id: p.child('workspace_id').out,
    },
    guardduty_detector(name, block): {
      local p = path(['aws_guardduty_detector', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_guardduty_detector: {
              [name]: std.prune({
                enable: build.template(std.get(block, 'enable', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      arn: p.child('arn').out,
      enable: p.child('enable').out,
      finding_publishing_frequency: p.child('finding_publishing_frequency').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    guardduty_detector_feature(name, block): {
      local p = path(['aws_guardduty_detector_feature', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_guardduty_detector_feature: {
              [name]: std.prune({
                detector_id: build.template(block.detector_id),
                name: build.template(block.name),
                status: build.template(block.status),
              }),
            },
          },
        },
      },
      detector_id: p.child('detector_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
    },
    guardduty_filter(name, block): {
      local p = path(['aws_guardduty_filter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_guardduty_filter: {
              [name]: std.prune({
                action: build.template(block.action),
                description: build.template(std.get(block, 'description', null, true)),
                detector_id: build.template(block.detector_id),
                name: build.template(block.name),
                rank: build.template(block.rank),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      detector_id: p.child('detector_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      rank: p.child('rank').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    guardduty_invite_accepter(name, block): {
      local p = path(['aws_guardduty_invite_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_guardduty_invite_accepter: {
              [name]: std.prune({
                detector_id: build.template(block.detector_id),
                master_account_id: build.template(block.master_account_id),
              }),
            },
          },
        },
      },
      detector_id: p.child('detector_id').out,
      id: p.child('id').out,
      master_account_id: p.child('master_account_id').out,
    },
    guardduty_ipset(name, block): {
      local p = path(['aws_guardduty_ipset', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_guardduty_ipset: {
              [name]: std.prune({
                activate: build.template(block.activate),
                detector_id: build.template(block.detector_id),
                format: build.template(block.format),
                location: build.template(block.location),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      activate: p.child('activate').out,
      arn: p.child('arn').out,
      detector_id: p.child('detector_id').out,
      format: p.child('format').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    guardduty_malware_protection_plan(name, block): {
      local p = path(['aws_guardduty_malware_protection_plan', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_guardduty_malware_protection_plan: {
              [name]: std.prune({
                role: build.template(block.role),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      actions: p.child('actions').out,
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      role: p.child('role').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    guardduty_member(name, block): {
      local p = path(['aws_guardduty_member', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_guardduty_member: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
                detector_id: build.template(block.detector_id),
                disable_email_notification: build.template(std.get(block, 'disable_email_notification', null, true)),
                email: build.template(block.email),
                invitation_message: build.template(std.get(block, 'invitation_message', null, true)),
                invite: build.template(std.get(block, 'invite', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      detector_id: p.child('detector_id').out,
      disable_email_notification: p.child('disable_email_notification').out,
      email: p.child('email').out,
      id: p.child('id').out,
      invitation_message: p.child('invitation_message').out,
      invite: p.child('invite').out,
      relationship_status: p.child('relationship_status').out,
    },
    guardduty_organization_admin_account(name, block): {
      local p = path(['aws_guardduty_organization_admin_account', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_guardduty_organization_admin_account: {
              [name]: std.prune({
                admin_account_id: build.template(block.admin_account_id),
              }),
            },
          },
        },
      },
      admin_account_id: p.child('admin_account_id').out,
      id: p.child('id').out,
    },
    guardduty_organization_configuration(name, block): {
      local p = path(['aws_guardduty_organization_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_guardduty_organization_configuration: {
              [name]: std.prune({
                detector_id: build.template(block.detector_id),
              }),
            },
          },
        },
      },
      auto_enable: p.child('auto_enable').out,
      auto_enable_organization_members: p.child('auto_enable_organization_members').out,
      detector_id: p.child('detector_id').out,
      id: p.child('id').out,
    },
    guardduty_organization_configuration_feature(name, block): {
      local p = path(['aws_guardduty_organization_configuration_feature', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_guardduty_organization_configuration_feature: {
              [name]: std.prune({
                auto_enable: build.template(block.auto_enable),
                detector_id: build.template(block.detector_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      auto_enable: p.child('auto_enable').out,
      detector_id: p.child('detector_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    guardduty_publishing_destination(name, block): {
      local p = path(['aws_guardduty_publishing_destination', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_guardduty_publishing_destination: {
              [name]: std.prune({
                destination_arn: build.template(block.destination_arn),
                destination_type: build.template(std.get(block, 'destination_type', null, true)),
                detector_id: build.template(block.detector_id),
                kms_key_arn: build.template(block.kms_key_arn),
              }),
            },
          },
        },
      },
      destination_arn: p.child('destination_arn').out,
      destination_type: p.child('destination_type').out,
      detector_id: p.child('detector_id').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
    },
    guardduty_threatintelset(name, block): {
      local p = path(['aws_guardduty_threatintelset', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_guardduty_threatintelset: {
              [name]: std.prune({
                activate: build.template(block.activate),
                detector_id: build.template(block.detector_id),
                format: build.template(block.format),
                location: build.template(block.location),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      activate: p.child('activate').out,
      arn: p.child('arn').out,
      detector_id: p.child('detector_id').out,
      format: p.child('format').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    iam_access_key(name, block): {
      local p = path(['aws_iam_access_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_access_key: {
              [name]: std.prune({
                pgp_key: build.template(std.get(block, 'pgp_key', null, true)),
                status: build.template(std.get(block, 'status', null, true)),
                user: build.template(block.user),
              }),
            },
          },
        },
      },
      create_date: p.child('create_date').out,
      encrypted_secret: p.child('encrypted_secret').out,
      encrypted_ses_smtp_password_v4: p.child('encrypted_ses_smtp_password_v4').out,
      id: p.child('id').out,
      key_fingerprint: p.child('key_fingerprint').out,
      pgp_key: p.child('pgp_key').out,
      secret: p.child('secret').out,
      ses_smtp_password_v4: p.child('ses_smtp_password_v4').out,
      status: p.child('status').out,
      user: p.child('user').out,
    },
    iam_account_alias(name, block): {
      local p = path(['aws_iam_account_alias', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_account_alias: {
              [name]: std.prune({
                account_alias: build.template(block.account_alias),
              }),
            },
          },
        },
      },
      account_alias: p.child('account_alias').out,
      id: p.child('id').out,
    },
    iam_account_password_policy(name, block): {
      local p = path(['aws_iam_account_password_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_account_password_policy: {
              [name]: std.prune({
                allow_users_to_change_password: build.template(std.get(block, 'allow_users_to_change_password', null, true)),
                minimum_password_length: build.template(std.get(block, 'minimum_password_length', null, true)),
              }),
            },
          },
        },
      },
      allow_users_to_change_password: p.child('allow_users_to_change_password').out,
      expire_passwords: p.child('expire_passwords').out,
      hard_expiry: p.child('hard_expiry').out,
      id: p.child('id').out,
      max_password_age: p.child('max_password_age').out,
      minimum_password_length: p.child('minimum_password_length').out,
      password_reuse_prevention: p.child('password_reuse_prevention').out,
      require_lowercase_characters: p.child('require_lowercase_characters').out,
      require_numbers: p.child('require_numbers').out,
      require_symbols: p.child('require_symbols').out,
      require_uppercase_characters: p.child('require_uppercase_characters').out,
    },
    iam_group(name, block): {
      local p = path(['aws_iam_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_group: {
              [name]: std.prune({
                name: build.template(block.name),
                path: build.template(std.get(block, 'path', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      path: p.child('path').out,
      unique_id: p.child('unique_id').out,
    },
    iam_group_membership(name, block): {
      local p = path(['aws_iam_group_membership', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_group_membership: {
              [name]: std.prune({
                group: build.template(block.group),
                name: build.template(block.name),
                users: build.template(block.users),
              }),
            },
          },
        },
      },
      group: p.child('group').out,
      id: p.child('id').out,
      name: p.child('name').out,
      users: p.child('users').out,
    },
    iam_group_policies_exclusive(name, block): {
      local p = path(['aws_iam_group_policies_exclusive', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_group_policies_exclusive: {
              [name]: std.prune({
                group_name: build.template(block.group_name),
                policy_names: build.template(block.policy_names),
              }),
            },
          },
        },
      },
      group_name: p.child('group_name').out,
      policy_names: p.child('policy_names').out,
    },
    iam_group_policy(name, block): {
      local p = path(['aws_iam_group_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_group_policy: {
              [name]: std.prune({
                group: build.template(block.group),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      group: p.child('group').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      policy: p.child('policy').out,
    },
    iam_group_policy_attachment(name, block): {
      local p = path(['aws_iam_group_policy_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_group_policy_attachment: {
              [name]: std.prune({
                group: build.template(block.group),
                policy_arn: build.template(block.policy_arn),
              }),
            },
          },
        },
      },
      group: p.child('group').out,
      id: p.child('id').out,
      policy_arn: p.child('policy_arn').out,
    },
    iam_group_policy_attachments_exclusive(name, block): {
      local p = path(['aws_iam_group_policy_attachments_exclusive', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_group_policy_attachments_exclusive: {
              [name]: std.prune({
                group_name: build.template(block.group_name),
                policy_arns: build.template(block.policy_arns),
              }),
            },
          },
        },
      },
      group_name: p.child('group_name').out,
      policy_arns: p.child('policy_arns').out,
    },
    iam_instance_profile(name, block): {
      local p = path(['aws_iam_instance_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_instance_profile: {
              [name]: std.prune({
                path: build.template(std.get(block, 'path', null, true)),
                role: build.template(std.get(block, 'role', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      create_date: p.child('create_date').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      path: p.child('path').out,
      role: p.child('role').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      unique_id: p.child('unique_id').out,
    },
    iam_openid_connect_provider(name, block): {
      local p = path(['aws_iam_openid_connect_provider', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_openid_connect_provider: {
              [name]: std.prune({
                client_id_list: build.template(block.client_id_list),
                tags: build.template(std.get(block, 'tags', null, true)),
                thumbprint_list: build.template(block.thumbprint_list),
                url: build.template(block.url),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      client_id_list: p.child('client_id_list').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      thumbprint_list: p.child('thumbprint_list').out,
      url: p.child('url').out,
    },
    iam_policy(name, block): {
      local p = path(['aws_iam_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                path: build.template(std.get(block, 'path', null, true)),
                policy: build.template(block.policy),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attachment_count: p.child('attachment_count').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      path: p.child('path').out,
      policy: p.child('policy').out,
      policy_id: p.child('policy_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    iam_policy_attachment(name, block): {
      local p = path(['aws_iam_policy_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_policy_attachment: {
              [name]: std.prune({
                groups: build.template(std.get(block, 'groups', null, true)),
                name: build.template(block.name),
                policy_arn: build.template(block.policy_arn),
                roles: build.template(std.get(block, 'roles', null, true)),
                users: build.template(std.get(block, 'users', null, true)),
              }),
            },
          },
        },
      },
      groups: p.child('groups').out,
      id: p.child('id').out,
      name: p.child('name').out,
      policy_arn: p.child('policy_arn').out,
      roles: p.child('roles').out,
      users: p.child('users').out,
    },
    iam_role(name, block): {
      local p = path(['aws_iam_role', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_role: {
              [name]: std.prune({
                assume_role_policy: build.template(block.assume_role_policy),
                description: build.template(std.get(block, 'description', null, true)),
                force_detach_policies: build.template(std.get(block, 'force_detach_policies', null, true)),
                max_session_duration: build.template(std.get(block, 'max_session_duration', null, true)),
                path: build.template(std.get(block, 'path', null, true)),
                permissions_boundary: build.template(std.get(block, 'permissions_boundary', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      assume_role_policy: p.child('assume_role_policy').out,
      create_date: p.child('create_date').out,
      description: p.child('description').out,
      force_detach_policies: p.child('force_detach_policies').out,
      id: p.child('id').out,
      managed_policy_arns: p.child('managed_policy_arns').out,
      max_session_duration: p.child('max_session_duration').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      path: p.child('path').out,
      permissions_boundary: p.child('permissions_boundary').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      unique_id: p.child('unique_id').out,
    },
    iam_role_policies_exclusive(name, block): {
      local p = path(['aws_iam_role_policies_exclusive', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_role_policies_exclusive: {
              [name]: std.prune({
                policy_names: build.template(block.policy_names),
                role_name: build.template(block.role_name),
              }),
            },
          },
        },
      },
      policy_names: p.child('policy_names').out,
      role_name: p.child('role_name').out,
    },
    iam_role_policy(name, block): {
      local p = path(['aws_iam_role_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_role_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      policy: p.child('policy').out,
      role: p.child('role').out,
    },
    iam_role_policy_attachment(name, block): {
      local p = path(['aws_iam_role_policy_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_role_policy_attachment: {
              [name]: std.prune({
                policy_arn: build.template(block.policy_arn),
                role: build.template(block.role),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy_arn: p.child('policy_arn').out,
      role: p.child('role').out,
    },
    iam_role_policy_attachments_exclusive(name, block): {
      local p = path(['aws_iam_role_policy_attachments_exclusive', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_role_policy_attachments_exclusive: {
              [name]: std.prune({
                policy_arns: build.template(block.policy_arns),
                role_name: build.template(block.role_name),
              }),
            },
          },
        },
      },
      policy_arns: p.child('policy_arns').out,
      role_name: p.child('role_name').out,
    },
    iam_saml_provider(name, block): {
      local p = path(['aws_iam_saml_provider', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_saml_provider: {
              [name]: std.prune({
                name: build.template(block.name),
                saml_metadata_document: build.template(block.saml_metadata_document),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      saml_metadata_document: p.child('saml_metadata_document').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      valid_until: p.child('valid_until').out,
    },
    iam_security_token_service_preferences(name, block): {
      local p = path(['aws_iam_security_token_service_preferences', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_security_token_service_preferences: {
              [name]: std.prune({
                global_endpoint_token_version: build.template(block.global_endpoint_token_version),
              }),
            },
          },
        },
      },
      global_endpoint_token_version: p.child('global_endpoint_token_version').out,
      id: p.child('id').out,
    },
    iam_server_certificate(name, block): {
      local p = path(['aws_iam_server_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_server_certificate: {
              [name]: std.prune({
                certificate_body: build.template(block.certificate_body),
                certificate_chain: build.template(std.get(block, 'certificate_chain', null, true)),
                path: build.template(std.get(block, 'path', null, true)),
                private_key: build.template(block.private_key),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      certificate_body: p.child('certificate_body').out,
      certificate_chain: p.child('certificate_chain').out,
      expiration: p.child('expiration').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      path: p.child('path').out,
      private_key: p.child('private_key').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      upload_date: p.child('upload_date').out,
    },
    iam_service_linked_role(name, block): {
      local p = path(['aws_iam_service_linked_role', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_service_linked_role: {
              [name]: std.prune({
                aws_service_name: build.template(block.aws_service_name),
                custom_suffix: build.template(std.get(block, 'custom_suffix', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_service_name: p.child('aws_service_name').out,
      create_date: p.child('create_date').out,
      custom_suffix: p.child('custom_suffix').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      path: p.child('path').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      unique_id: p.child('unique_id').out,
    },
    iam_service_specific_credential(name, block): {
      local p = path(['aws_iam_service_specific_credential', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_service_specific_credential: {
              [name]: std.prune({
                service_name: build.template(block.service_name),
                status: build.template(std.get(block, 'status', null, true)),
                user_name: build.template(block.user_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      service_name: p.child('service_name').out,
      service_password: p.child('service_password').out,
      service_specific_credential_id: p.child('service_specific_credential_id').out,
      service_user_name: p.child('service_user_name').out,
      status: p.child('status').out,
      user_name: p.child('user_name').out,
    },
    iam_signing_certificate(name, block): {
      local p = path(['aws_iam_signing_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_signing_certificate: {
              [name]: std.prune({
                certificate_body: build.template(block.certificate_body),
                status: build.template(std.get(block, 'status', null, true)),
                user_name: build.template(block.user_name),
              }),
            },
          },
        },
      },
      certificate_body: p.child('certificate_body').out,
      certificate_id: p.child('certificate_id').out,
      id: p.child('id').out,
      status: p.child('status').out,
      user_name: p.child('user_name').out,
    },
    iam_user(name, block): {
      local p = path(['aws_iam_user', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_user: {
              [name]: std.prune({
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                name: build.template(block.name),
                path: build.template(std.get(block, 'path', null, true)),
                permissions_boundary: build.template(std.get(block, 'permissions_boundary', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      name: p.child('name').out,
      path: p.child('path').out,
      permissions_boundary: p.child('permissions_boundary').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      unique_id: p.child('unique_id').out,
    },
    iam_user_group_membership(name, block): {
      local p = path(['aws_iam_user_group_membership', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_user_group_membership: {
              [name]: std.prune({
                groups: build.template(block.groups),
                user: build.template(block.user),
              }),
            },
          },
        },
      },
      groups: p.child('groups').out,
      id: p.child('id').out,
      user: p.child('user').out,
    },
    iam_user_login_profile(name, block): {
      local p = path(['aws_iam_user_login_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_user_login_profile: {
              [name]: std.prune({
                password_length: build.template(std.get(block, 'password_length', null, true)),
                pgp_key: build.template(std.get(block, 'pgp_key', null, true)),
                user: build.template(block.user),
              }),
            },
          },
        },
      },
      encrypted_password: p.child('encrypted_password').out,
      id: p.child('id').out,
      key_fingerprint: p.child('key_fingerprint').out,
      password: p.child('password').out,
      password_length: p.child('password_length').out,
      password_reset_required: p.child('password_reset_required').out,
      pgp_key: p.child('pgp_key').out,
      user: p.child('user').out,
    },
    iam_user_policies_exclusive(name, block): {
      local p = path(['aws_iam_user_policies_exclusive', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_user_policies_exclusive: {
              [name]: std.prune({
                policy_names: build.template(block.policy_names),
                user_name: build.template(block.user_name),
              }),
            },
          },
        },
      },
      policy_names: p.child('policy_names').out,
      user_name: p.child('user_name').out,
    },
    iam_user_policy(name, block): {
      local p = path(['aws_iam_user_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_user_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                user: build.template(block.user),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      policy: p.child('policy').out,
      user: p.child('user').out,
    },
    iam_user_policy_attachment(name, block): {
      local p = path(['aws_iam_user_policy_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_user_policy_attachment: {
              [name]: std.prune({
                policy_arn: build.template(block.policy_arn),
                user: build.template(block.user),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy_arn: p.child('policy_arn').out,
      user: p.child('user').out,
    },
    iam_user_policy_attachments_exclusive(name, block): {
      local p = path(['aws_iam_user_policy_attachments_exclusive', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_user_policy_attachments_exclusive: {
              [name]: std.prune({
                policy_arns: build.template(block.policy_arns),
                user_name: build.template(block.user_name),
              }),
            },
          },
        },
      },
      policy_arns: p.child('policy_arns').out,
      user_name: p.child('user_name').out,
    },
    iam_user_ssh_key(name, block): {
      local p = path(['aws_iam_user_ssh_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_user_ssh_key: {
              [name]: std.prune({
                encoding: build.template(block.encoding),
                public_key: build.template(block.public_key),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      encoding: p.child('encoding').out,
      fingerprint: p.child('fingerprint').out,
      id: p.child('id').out,
      public_key: p.child('public_key').out,
      ssh_public_key_id: p.child('ssh_public_key_id').out,
      status: p.child('status').out,
      username: p.child('username').out,
    },
    iam_virtual_mfa_device(name, block): {
      local p = path(['aws_iam_virtual_mfa_device', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iam_virtual_mfa_device: {
              [name]: std.prune({
                path: build.template(std.get(block, 'path', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                virtual_mfa_device_name: build.template(block.virtual_mfa_device_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      base_32_string_seed: p.child('base_32_string_seed').out,
      enable_date: p.child('enable_date').out,
      id: p.child('id').out,
      path: p.child('path').out,
      qr_code_png: p.child('qr_code_png').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_name: p.child('user_name').out,
      virtual_mfa_device_name: p.child('virtual_mfa_device_name').out,
    },
    identitystore_group(name, block): {
      local p = path(['aws_identitystore_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_identitystore_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(block.display_name),
                identity_store_id: build.template(block.identity_store_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      external_ids: p.child('external_ids').out,
      group_id: p.child('group_id').out,
      id: p.child('id').out,
      identity_store_id: p.child('identity_store_id').out,
    },
    identitystore_group_membership(name, block): {
      local p = path(['aws_identitystore_group_membership', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_identitystore_group_membership: {
              [name]: std.prune({
                group_id: build.template(block.group_id),
                identity_store_id: build.template(block.identity_store_id),
                member_id: build.template(block.member_id),
              }),
            },
          },
        },
      },
      group_id: p.child('group_id').out,
      id: p.child('id').out,
      identity_store_id: p.child('identity_store_id').out,
      member_id: p.child('member_id').out,
      membership_id: p.child('membership_id').out,
    },
    identitystore_user(name, block): {
      local p = path(['aws_identitystore_user', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_identitystore_user: {
              [name]: std.prune({
                display_name: build.template(block.display_name),
                identity_store_id: build.template(block.identity_store_id),
                locale: build.template(std.get(block, 'locale', null, true)),
                nickname: build.template(std.get(block, 'nickname', null, true)),
                preferred_language: build.template(std.get(block, 'preferred_language', null, true)),
                profile_url: build.template(std.get(block, 'profile_url', null, true)),
                timezone: build.template(std.get(block, 'timezone', null, true)),
                title: build.template(std.get(block, 'title', null, true)),
                user_name: build.template(block.user_name),
                user_type: build.template(std.get(block, 'user_type', null, true)),
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      external_ids: p.child('external_ids').out,
      id: p.child('id').out,
      identity_store_id: p.child('identity_store_id').out,
      locale: p.child('locale').out,
      nickname: p.child('nickname').out,
      preferred_language: p.child('preferred_language').out,
      profile_url: p.child('profile_url').out,
      timezone: p.child('timezone').out,
      title: p.child('title').out,
      user_id: p.child('user_id').out,
      user_name: p.child('user_name').out,
      user_type: p.child('user_type').out,
    },
    imagebuilder_component(name, block): {
      local p = path(['aws_imagebuilder_component', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_imagebuilder_component: {
              [name]: std.prune({
                change_description: build.template(std.get(block, 'change_description', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                name: build.template(block.name),
                platform: build.template(block.platform),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
                supported_os_versions: build.template(std.get(block, 'supported_os_versions', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                uri: build.template(std.get(block, 'uri', null, true)),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      change_description: p.child('change_description').out,
      data: p.child('data').out,
      date_created: p.child('date_created').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      platform: p.child('platform').out,
      skip_destroy: p.child('skip_destroy').out,
      supported_os_versions: p.child('supported_os_versions').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      uri: p.child('uri').out,
      version: p.child('version').out,
    },
    imagebuilder_container_recipe(name, block): {
      local p = path(['aws_imagebuilder_container_recipe', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_imagebuilder_container_recipe: {
              [name]: std.prune({
                container_type: build.template(block.container_type),
                description: build.template(std.get(block, 'description', null, true)),
                dockerfile_template_uri: build.template(std.get(block, 'dockerfile_template_uri', null, true)),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                name: build.template(block.name),
                parent_image: build.template(block.parent_image),
                platform_override: build.template(std.get(block, 'platform_override', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                version: build.template(block.version),
                working_directory: build.template(std.get(block, 'working_directory', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      container_type: p.child('container_type').out,
      date_created: p.child('date_created').out,
      description: p.child('description').out,
      dockerfile_template_data: p.child('dockerfile_template_data').out,
      dockerfile_template_uri: p.child('dockerfile_template_uri').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      parent_image: p.child('parent_image').out,
      platform: p.child('platform').out,
      platform_override: p.child('platform_override').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
      working_directory: p.child('working_directory').out,
    },
    imagebuilder_distribution_configuration(name, block): {
      local p = path(['aws_imagebuilder_distribution_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_imagebuilder_distribution_configuration: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      date_created: p.child('date_created').out,
      date_updated: p.child('date_updated').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    imagebuilder_image(name, block): {
      local p = path(['aws_imagebuilder_image', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_imagebuilder_image: {
              [name]: std.prune({
                container_recipe_arn: build.template(std.get(block, 'container_recipe_arn', null, true)),
                distribution_configuration_arn: build.template(std.get(block, 'distribution_configuration_arn', null, true)),
                enhanced_image_metadata_enabled: build.template(std.get(block, 'enhanced_image_metadata_enabled', null, true)),
                image_recipe_arn: build.template(std.get(block, 'image_recipe_arn', null, true)),
                infrastructure_configuration_arn: build.template(block.infrastructure_configuration_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      container_recipe_arn: p.child('container_recipe_arn').out,
      date_created: p.child('date_created').out,
      distribution_configuration_arn: p.child('distribution_configuration_arn').out,
      enhanced_image_metadata_enabled: p.child('enhanced_image_metadata_enabled').out,
      execution_role: p.child('execution_role').out,
      id: p.child('id').out,
      image_recipe_arn: p.child('image_recipe_arn').out,
      infrastructure_configuration_arn: p.child('infrastructure_configuration_arn').out,
      name: p.child('name').out,
      os_version: p.child('os_version').out,
      output_resources: p.child('output_resources').out,
      platform: p.child('platform').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    imagebuilder_image_pipeline(name, block): {
      local p = path(['aws_imagebuilder_image_pipeline', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_imagebuilder_image_pipeline: {
              [name]: std.prune({
                container_recipe_arn: build.template(std.get(block, 'container_recipe_arn', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                distribution_configuration_arn: build.template(std.get(block, 'distribution_configuration_arn', null, true)),
                enhanced_image_metadata_enabled: build.template(std.get(block, 'enhanced_image_metadata_enabled', null, true)),
                execution_role: build.template(std.get(block, 'execution_role', null, true)),
                image_recipe_arn: build.template(std.get(block, 'image_recipe_arn', null, true)),
                infrastructure_configuration_arn: build.template(block.infrastructure_configuration_arn),
                name: build.template(block.name),
                status: build.template(std.get(block, 'status', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      container_recipe_arn: p.child('container_recipe_arn').out,
      date_created: p.child('date_created').out,
      date_last_run: p.child('date_last_run').out,
      date_next_run: p.child('date_next_run').out,
      date_updated: p.child('date_updated').out,
      description: p.child('description').out,
      distribution_configuration_arn: p.child('distribution_configuration_arn').out,
      enhanced_image_metadata_enabled: p.child('enhanced_image_metadata_enabled').out,
      execution_role: p.child('execution_role').out,
      id: p.child('id').out,
      image_recipe_arn: p.child('image_recipe_arn').out,
      infrastructure_configuration_arn: p.child('infrastructure_configuration_arn').out,
      name: p.child('name').out,
      platform: p.child('platform').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    imagebuilder_image_recipe(name, block): {
      local p = path(['aws_imagebuilder_image_recipe', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_imagebuilder_image_recipe: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                parent_image: build.template(block.parent_image),
                tags: build.template(std.get(block, 'tags', null, true)),
                version: build.template(block.version),
                working_directory: build.template(std.get(block, 'working_directory', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      date_created: p.child('date_created').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      parent_image: p.child('parent_image').out,
      platform: p.child('platform').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_data_base64: p.child('user_data_base64').out,
      version: p.child('version').out,
      working_directory: p.child('working_directory').out,
    },
    imagebuilder_infrastructure_configuration(name, block): {
      local p = path(['aws_imagebuilder_infrastructure_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_imagebuilder_infrastructure_configuration: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                instance_profile_name: build.template(block.instance_profile_name),
                instance_types: build.template(std.get(block, 'instance_types', null, true)),
                key_pair: build.template(std.get(block, 'key_pair', null, true)),
                name: build.template(block.name),
                resource_tags: build.template(std.get(block, 'resource_tags', null, true)),
                security_group_ids: build.template(std.get(block, 'security_group_ids', null, true)),
                sns_topic_arn: build.template(std.get(block, 'sns_topic_arn', null, true)),
                subnet_id: build.template(std.get(block, 'subnet_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                terminate_instance_on_failure: build.template(std.get(block, 'terminate_instance_on_failure', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      date_created: p.child('date_created').out,
      date_updated: p.child('date_updated').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_profile_name: p.child('instance_profile_name').out,
      instance_types: p.child('instance_types').out,
      key_pair: p.child('key_pair').out,
      name: p.child('name').out,
      resource_tags: p.child('resource_tags').out,
      security_group_ids: p.child('security_group_ids').out,
      sns_topic_arn: p.child('sns_topic_arn').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      terminate_instance_on_failure: p.child('terminate_instance_on_failure').out,
    },
    imagebuilder_lifecycle_policy(name, block): {
      local p = path(['aws_imagebuilder_lifecycle_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_imagebuilder_lifecycle_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                execution_role: build.template(block.execution_role),
                name: build.template(block.name),
                resource_type: build.template(block.resource_type),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      execution_role: p.child('execution_role').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_type: p.child('resource_type').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    imagebuilder_workflow(name, block): {
      local p = path(['aws_imagebuilder_workflow', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_imagebuilder_workflow: {
              [name]: std.prune({
                change_description: build.template(std.get(block, 'change_description', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
                uri: build.template(std.get(block, 'uri', null, true)),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      change_description: p.child('change_description').out,
      data: p.child('data').out,
      date_created: p.child('date_created').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      uri: p.child('uri').out,
      version: p.child('version').out,
    },
    inspector2_delegated_admin_account(name, block): {
      local p = path(['aws_inspector2_delegated_admin_account', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_inspector2_delegated_admin_account: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      id: p.child('id').out,
      relationship_status: p.child('relationship_status').out,
    },
    inspector2_enabler(name, block): {
      local p = path(['aws_inspector2_enabler', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_inspector2_enabler: {
              [name]: std.prune({
                account_ids: build.template(block.account_ids),
                resource_types: build.template(block.resource_types),
              }),
            },
          },
        },
      },
      account_ids: p.child('account_ids').out,
      id: p.child('id').out,
      resource_types: p.child('resource_types').out,
    },
    inspector2_member_association(name, block): {
      local p = path(['aws_inspector2_member_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_inspector2_member_association: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      delegated_admin_account_id: p.child('delegated_admin_account_id').out,
      id: p.child('id').out,
      relationship_status: p.child('relationship_status').out,
      updated_at: p.child('updated_at').out,
    },
    inspector2_organization_configuration(name, block): {
      local p = path(['aws_inspector2_organization_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_inspector2_organization_configuration: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      max_account_limit_reached: p.child('max_account_limit_reached').out,
    },
    inspector_assessment_target(name, block): {
      local p = path(['aws_inspector_assessment_target', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_inspector_assessment_target: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_group_arn: build.template(std.get(block, 'resource_group_arn', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_group_arn: p.child('resource_group_arn').out,
    },
    inspector_assessment_template(name, block): {
      local p = path(['aws_inspector_assessment_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_inspector_assessment_template: {
              [name]: std.prune({
                duration: build.template(block.duration),
                name: build.template(block.name),
                rules_package_arns: build.template(block.rules_package_arns),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_arn: build.template(block.target_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      duration: p.child('duration').out,
      id: p.child('id').out,
      name: p.child('name').out,
      rules_package_arns: p.child('rules_package_arns').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_arn: p.child('target_arn').out,
    },
    inspector_resource_group(name, block): {
      local p = path(['aws_inspector_resource_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_inspector_resource_group: {
              [name]: std.prune({
                tags: build.template(block.tags),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
    },
    instance(name, block): {
      local p = path(['aws_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_instance: {
              [name]: std.prune({
                get_password_data: build.template(std.get(block, 'get_password_data', null, true)),
                hibernation: build.template(std.get(block, 'hibernation', null, true)),
                source_dest_check: build.template(std.get(block, 'source_dest_check', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_data_replace_on_change: build.template(std.get(block, 'user_data_replace_on_change', null, true)),
                volume_tags: build.template(std.get(block, 'volume_tags', null, true)),
              }),
            },
          },
        },
      },
      ami: p.child('ami').out,
      arn: p.child('arn').out,
      associate_public_ip_address: p.child('associate_public_ip_address').out,
      availability_zone: p.child('availability_zone').out,
      cpu_core_count: p.child('cpu_core_count').out,
      cpu_threads_per_core: p.child('cpu_threads_per_core').out,
      disable_api_stop: p.child('disable_api_stop').out,
      disable_api_termination: p.child('disable_api_termination').out,
      ebs_optimized: p.child('ebs_optimized').out,
      get_password_data: p.child('get_password_data').out,
      hibernation: p.child('hibernation').out,
      host_id: p.child('host_id').out,
      host_resource_group_arn: p.child('host_resource_group_arn').out,
      iam_instance_profile: p.child('iam_instance_profile').out,
      id: p.child('id').out,
      instance_initiated_shutdown_behavior: p.child('instance_initiated_shutdown_behavior').out,
      instance_lifecycle: p.child('instance_lifecycle').out,
      instance_state: p.child('instance_state').out,
      instance_type: p.child('instance_type').out,
      ipv6_address_count: p.child('ipv6_address_count').out,
      ipv6_addresses: p.child('ipv6_addresses').out,
      key_name: p.child('key_name').out,
      monitoring: p.child('monitoring').out,
      outpost_arn: p.child('outpost_arn').out,
      password_data: p.child('password_data').out,
      placement_group: p.child('placement_group').out,
      placement_partition_number: p.child('placement_partition_number').out,
      primary_network_interface_id: p.child('primary_network_interface_id').out,
      private_dns: p.child('private_dns').out,
      private_ip: p.child('private_ip').out,
      public_dns: p.child('public_dns').out,
      public_ip: p.child('public_ip').out,
      secondary_private_ips: p.child('secondary_private_ips').out,
      security_groups: p.child('security_groups').out,
      source_dest_check: p.child('source_dest_check').out,
      spot_instance_request_id: p.child('spot_instance_request_id').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tenancy: p.child('tenancy').out,
      user_data: p.child('user_data').out,
      user_data_base64: p.child('user_data_base64').out,
      user_data_replace_on_change: p.child('user_data_replace_on_change').out,
      volume_tags: p.child('volume_tags').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    internet_gateway(name, block): {
      local p = path(['aws_internet_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_internet_gateway: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    internet_gateway_attachment(name, block): {
      local p = path(['aws_internet_gateway_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_internet_gateway_attachment: {
              [name]: std.prune({
                internet_gateway_id: build.template(block.internet_gateway_id),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      internet_gateway_id: p.child('internet_gateway_id').out,
      vpc_id: p.child('vpc_id').out,
    },
    internetmonitor_monitor(name, block): {
      local p = path(['aws_internetmonitor_monitor', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_internetmonitor_monitor: {
              [name]: std.prune({
                max_city_networks_to_monitor: build.template(std.get(block, 'max_city_networks_to_monitor', null, true)),
                monitor_name: build.template(block.monitor_name),
                resources: build.template(std.get(block, 'resources', null, true)),
                status: build.template(std.get(block, 'status', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                traffic_percentage_to_monitor: build.template(std.get(block, 'traffic_percentage_to_monitor', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      max_city_networks_to_monitor: p.child('max_city_networks_to_monitor').out,
      monitor_name: p.child('monitor_name').out,
      resources: p.child('resources').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      traffic_percentage_to_monitor: p.child('traffic_percentage_to_monitor').out,
    },
    iot_authorizer(name, block): {
      local p = path(['aws_iot_authorizer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_authorizer: {
              [name]: std.prune({
                authorizer_function_arn: build.template(block.authorizer_function_arn),
                enable_caching_for_http: build.template(std.get(block, 'enable_caching_for_http', null, true)),
                name: build.template(block.name),
                signing_disabled: build.template(std.get(block, 'signing_disabled', null, true)),
                status: build.template(std.get(block, 'status', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                token_key_name: build.template(std.get(block, 'token_key_name', null, true)),
                token_signing_public_keys: build.template(std.get(block, 'token_signing_public_keys', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      authorizer_function_arn: p.child('authorizer_function_arn').out,
      enable_caching_for_http: p.child('enable_caching_for_http').out,
      id: p.child('id').out,
      name: p.child('name').out,
      signing_disabled: p.child('signing_disabled').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      token_key_name: p.child('token_key_name').out,
      token_signing_public_keys: p.child('token_signing_public_keys').out,
    },
    iot_billing_group(name, block): {
      local p = path(['aws_iot_billing_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_billing_group: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    iot_ca_certificate(name, block): {
      local p = path(['aws_iot_ca_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_ca_certificate: {
              [name]: std.prune({
                active: build.template(block.active),
                allow_auto_registration: build.template(block.allow_auto_registration),
                ca_certificate_pem: build.template(block.ca_certificate_pem),
                certificate_mode: build.template(std.get(block, 'certificate_mode', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                verification_certificate_pem: build.template(std.get(block, 'verification_certificate_pem', null, true)),
              }),
            },
          },
        },
      },
      active: p.child('active').out,
      allow_auto_registration: p.child('allow_auto_registration').out,
      arn: p.child('arn').out,
      ca_certificate_pem: p.child('ca_certificate_pem').out,
      certificate_mode: p.child('certificate_mode').out,
      customer_version: p.child('customer_version').out,
      generation_id: p.child('generation_id').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      validity: p.child('validity').out,
      verification_certificate_pem: p.child('verification_certificate_pem').out,
    },
    iot_certificate(name, block): {
      local p = path(['aws_iot_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_certificate: {
              [name]: std.prune({
                active: build.template(block.active),
                ca_pem: build.template(std.get(block, 'ca_pem', null, true)),
                csr: build.template(std.get(block, 'csr', null, true)),
              }),
            },
          },
        },
      },
      active: p.child('active').out,
      arn: p.child('arn').out,
      ca_certificate_id: p.child('ca_certificate_id').out,
      ca_pem: p.child('ca_pem').out,
      certificate_pem: p.child('certificate_pem').out,
      csr: p.child('csr').out,
      id: p.child('id').out,
      private_key: p.child('private_key').out,
      public_key: p.child('public_key').out,
    },
    iot_domain_configuration(name, block): {
      local p = path(['aws_iot_domain_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_domain_configuration: {
              [name]: std.prune({
                domain_name: build.template(std.get(block, 'domain_name', null, true)),
                name: build.template(block.name),
                server_certificate_arns: build.template(std.get(block, 'server_certificate_arns', null, true)),
                service_type: build.template(std.get(block, 'service_type', null, true)),
                status: build.template(std.get(block, 'status', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                validation_certificate_arn: build.template(std.get(block, 'validation_certificate_arn', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      domain_name: p.child('domain_name').out,
      domain_type: p.child('domain_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      server_certificate_arns: p.child('server_certificate_arns').out,
      service_type: p.child('service_type').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      validation_certificate_arn: p.child('validation_certificate_arn').out,
    },
    iot_event_configurations(name, block): {
      local p = path(['aws_iot_event_configurations', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_event_configurations: {
              [name]: std.prune({
                event_configurations: build.template(block.event_configurations),
              }),
            },
          },
        },
      },
      event_configurations: p.child('event_configurations').out,
      id: p.child('id').out,
    },
    iot_indexing_configuration(name, block): {
      local p = path(['aws_iot_indexing_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_indexing_configuration: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    iot_logging_options(name, block): {
      local p = path(['aws_iot_logging_options', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_logging_options: {
              [name]: std.prune({
                default_log_level: build.template(block.default_log_level),
                disable_all_logs: build.template(std.get(block, 'disable_all_logs', null, true)),
                role_arn: build.template(block.role_arn),
              }),
            },
          },
        },
      },
      default_log_level: p.child('default_log_level').out,
      disable_all_logs: p.child('disable_all_logs').out,
      id: p.child('id').out,
      role_arn: p.child('role_arn').out,
    },
    iot_policy(name, block): {
      local p = path(['aws_iot_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy: build.template(block.policy),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_version_id: p.child('default_version_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      policy: p.child('policy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    iot_policy_attachment(name, block): {
      local p = path(['aws_iot_policy_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_policy_attachment: {
              [name]: std.prune({
                policy: build.template(block.policy),
                target: build.template(block.target),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      target: p.child('target').out,
    },
    iot_provisioning_template(name, block): {
      local p = path(['aws_iot_provisioning_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_provisioning_template: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                name: build.template(block.name),
                provisioning_role_arn: build.template(block.provisioning_role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                template_body: build.template(block.template_body),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_version_id: p.child('default_version_id').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      provisioning_role_arn: p.child('provisioning_role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      template_body: p.child('template_body').out,
      type: p.child('type').out,
    },
    iot_role_alias(name, block): {
      local p = path(['aws_iot_role_alias', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_role_alias: {
              [name]: std.prune({
                alias: build.template(block.alias),
                credential_duration: build.template(std.get(block, 'credential_duration', null, true)),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      alias: p.child('alias').out,
      arn: p.child('arn').out,
      credential_duration: p.child('credential_duration').out,
      id: p.child('id').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    iot_thing(name, block): {
      local p = path(['aws_iot_thing', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_thing: {
              [name]: std.prune({
                attributes: build.template(std.get(block, 'attributes', null, true)),
                name: build.template(block.name),
                thing_type_name: build.template(std.get(block, 'thing_type_name', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attributes: p.child('attributes').out,
      default_client_id: p.child('default_client_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      thing_type_name: p.child('thing_type_name').out,
      version: p.child('version').out,
    },
    iot_thing_group(name, block): {
      local p = path(['aws_iot_thing_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_thing_group: {
              [name]: std.prune({
                name: build.template(block.name),
                parent_group_name: build.template(std.get(block, 'parent_group_name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      metadata: p.child('metadata').out,
      name: p.child('name').out,
      parent_group_name: p.child('parent_group_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    iot_thing_group_membership(name, block): {
      local p = path(['aws_iot_thing_group_membership', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_thing_group_membership: {
              [name]: std.prune({
                override_dynamic_group: build.template(std.get(block, 'override_dynamic_group', null, true)),
                thing_group_name: build.template(block.thing_group_name),
                thing_name: build.template(block.thing_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      override_dynamic_group: p.child('override_dynamic_group').out,
      thing_group_name: p.child('thing_group_name').out,
      thing_name: p.child('thing_name').out,
    },
    iot_thing_principal_attachment(name, block): {
      local p = path(['aws_iot_thing_principal_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_thing_principal_attachment: {
              [name]: std.prune({
                principal: build.template(block.principal),
                thing: build.template(block.thing),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      principal: p.child('principal').out,
      thing: p.child('thing').out,
    },
    iot_thing_type(name, block): {
      local p = path(['aws_iot_thing_type', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_thing_type: {
              [name]: std.prune({
                deprecated: build.template(std.get(block, 'deprecated', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      deprecated: p.child('deprecated').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    iot_topic_rule(name, block): {
      local p = path(['aws_iot_topic_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_topic_rule: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(block.enabled),
                name: build.template(block.name),
                sql: build.template(block.sql),
                sql_version: build.template(block.sql_version),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      sql: p.child('sql').out,
      sql_version: p.child('sql_version').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    iot_topic_rule_destination(name, block): {
      local p = path(['aws_iot_topic_rule_destination', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_iot_topic_rule_destination: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
    },
    ivs_channel(name, block): {
      local p = path(['aws_ivs_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ivs_channel: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      authorized: p.child('authorized').out,
      id: p.child('id').out,
      ingest_endpoint: p.child('ingest_endpoint').out,
      latency_mode: p.child('latency_mode').out,
      name: p.child('name').out,
      playback_url: p.child('playback_url').out,
      recording_configuration_arn: p.child('recording_configuration_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    ivs_playback_key_pair(name, block): {
      local p = path(['aws_ivs_playback_key_pair', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ivs_playback_key_pair: {
              [name]: std.prune({
                public_key: build.template(block.public_key),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      fingerprint: p.child('fingerprint').out,
      id: p.child('id').out,
      name: p.child('name').out,
      public_key: p.child('public_key').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ivs_recording_configuration(name, block): {
      local p = path(['aws_ivs_recording_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ivs_recording_configuration: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      recording_reconnect_window_seconds: p.child('recording_reconnect_window_seconds').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ivschat_logging_configuration(name, block): {
      local p = path(['aws_ivschat_logging_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ivschat_logging_configuration: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ivschat_room(name, block): {
      local p = path(['aws_ivschat_room', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ivschat_room: {
              [name]: std.prune({
                logging_configuration_identifiers: build.template(std.get(block, 'logging_configuration_identifiers', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      logging_configuration_identifiers: p.child('logging_configuration_identifiers').out,
      maximum_message_length: p.child('maximum_message_length').out,
      maximum_message_rate_per_second: p.child('maximum_message_rate_per_second').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    kendra_data_source(name, block): {
      local p = path(['aws_kendra_data_source', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kendra_data_source: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                index_id: build.template(block.index_id),
                name: build.template(block.name),
                role_arn: build.template(std.get(block, 'role_arn', null, true)),
                schedule: build.template(std.get(block, 'schedule', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      data_source_id: p.child('data_source_id').out,
      description: p.child('description').out,
      error_message: p.child('error_message').out,
      id: p.child('id').out,
      index_id: p.child('index_id').out,
      language_code: p.child('language_code').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      schedule: p.child('schedule').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      updated_at: p.child('updated_at').out,
    },
    kendra_experience(name, block): {
      local p = path(['aws_kendra_experience', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kendra_experience: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                index_id: build.template(block.index_id),
                name: build.template(block.name),
                role_arn: build.template(block.role_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      endpoints: p.child('endpoints').out,
      experience_id: p.child('experience_id').out,
      id: p.child('id').out,
      index_id: p.child('index_id').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      status: p.child('status').out,
    },
    kendra_faq(name, block): {
      local p = path(['aws_kendra_faq', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kendra_faq: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                file_format: build.template(std.get(block, 'file_format', null, true)),
                index_id: build.template(block.index_id),
                name: build.template(block.name),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      description: p.child('description').out,
      error_message: p.child('error_message').out,
      faq_id: p.child('faq_id').out,
      file_format: p.child('file_format').out,
      id: p.child('id').out,
      index_id: p.child('index_id').out,
      language_code: p.child('language_code').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      updated_at: p.child('updated_at').out,
    },
    kendra_index(name, block): {
      local p = path(['aws_kendra_index', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kendra_index: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                edition: build.template(std.get(block, 'edition', null, true)),
                name: build.template(block.name),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_context_policy: build.template(std.get(block, 'user_context_policy', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      description: p.child('description').out,
      edition: p.child('edition').out,
      error_message: p.child('error_message').out,
      id: p.child('id').out,
      index_statistics: p.child('index_statistics').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      updated_at: p.child('updated_at').out,
      user_context_policy: p.child('user_context_policy').out,
    },
    kendra_query_suggestions_block_list(name, block): {
      local p = path(['aws_kendra_query_suggestions_block_list', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kendra_query_suggestions_block_list: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                index_id: build.template(block.index_id),
                name: build.template(block.name),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      index_id: p.child('index_id').out,
      name: p.child('name').out,
      query_suggestions_block_list_id: p.child('query_suggestions_block_list_id').out,
      role_arn: p.child('role_arn').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    kendra_thesaurus(name, block): {
      local p = path(['aws_kendra_thesaurus', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kendra_thesaurus: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                index_id: build.template(block.index_id),
                name: build.template(block.name),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      index_id: p.child('index_id').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      thesaurus_id: p.child('thesaurus_id').out,
    },
    key_pair(name, block): {
      local p = path(['aws_key_pair', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_key_pair: {
              [name]: std.prune({
                public_key: build.template(block.public_key),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      fingerprint: p.child('fingerprint').out,
      id: p.child('id').out,
      key_name: p.child('key_name').out,
      key_name_prefix: p.child('key_name_prefix').out,
      key_pair_id: p.child('key_pair_id').out,
      key_type: p.child('key_type').out,
      public_key: p.child('public_key').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    keyspaces_keyspace(name, block): {
      local p = path(['aws_keyspaces_keyspace', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_keyspaces_keyspace: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    keyspaces_table(name, block): {
      local p = path(['aws_keyspaces_table', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_keyspaces_table: {
              [name]: std.prune({
                default_time_to_live: build.template(std.get(block, 'default_time_to_live', null, true)),
                keyspace_name: build.template(block.keyspace_name),
                table_name: build.template(block.table_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_time_to_live: p.child('default_time_to_live').out,
      id: p.child('id').out,
      keyspace_name: p.child('keyspace_name').out,
      table_name: p.child('table_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    kinesis_analytics_application(name, block): {
      local p = path(['aws_kinesis_analytics_application', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kinesis_analytics_application: {
              [name]: std.prune({
                code: build.template(std.get(block, 'code', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                start_application: build.template(std.get(block, 'start_application', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      code: p.child('code').out,
      create_timestamp: p.child('create_timestamp').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_update_timestamp: p.child('last_update_timestamp').out,
      name: p.child('name').out,
      start_application: p.child('start_application').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    kinesis_firehose_delivery_stream(name, block): {
      local p = path(['aws_kinesis_firehose_delivery_stream', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kinesis_firehose_delivery_stream: {
              [name]: std.prune({
                destination: build.template(block.destination),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      destination: p.child('destination').out,
      destination_id: p.child('destination_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version_id: p.child('version_id').out,
    },
    kinesis_resource_policy(name, block): {
      local p = path(['aws_kinesis_resource_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kinesis_resource_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      resource_arn: p.child('resource_arn').out,
    },
    kinesis_stream(name, block): {
      local p = path(['aws_kinesis_stream', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kinesis_stream: {
              [name]: std.prune({
                encryption_type: build.template(std.get(block, 'encryption_type', null, true)),
                enforce_consumer_deletion: build.template(std.get(block, 'enforce_consumer_deletion', null, true)),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                name: build.template(block.name),
                retention_period: build.template(std.get(block, 'retention_period', null, true)),
                shard_count: build.template(std.get(block, 'shard_count', null, true)),
                shard_level_metrics: build.template(std.get(block, 'shard_level_metrics', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      encryption_type: p.child('encryption_type').out,
      enforce_consumer_deletion: p.child('enforce_consumer_deletion').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      name: p.child('name').out,
      retention_period: p.child('retention_period').out,
      shard_count: p.child('shard_count').out,
      shard_level_metrics: p.child('shard_level_metrics').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    kinesis_stream_consumer(name, block): {
      local p = path(['aws_kinesis_stream_consumer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kinesis_stream_consumer: {
              [name]: std.prune({
                name: build.template(block.name),
                stream_arn: build.template(block.stream_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_timestamp: p.child('creation_timestamp').out,
      id: p.child('id').out,
      name: p.child('name').out,
      stream_arn: p.child('stream_arn').out,
    },
    kinesis_video_stream(name, block): {
      local p = path(['aws_kinesis_video_stream', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kinesis_video_stream: {
              [name]: std.prune({
                data_retention_in_hours: build.template(std.get(block, 'data_retention_in_hours', null, true)),
                device_name: build.template(std.get(block, 'device_name', null, true)),
                media_type: build.template(std.get(block, 'media_type', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      data_retention_in_hours: p.child('data_retention_in_hours').out,
      device_name: p.child('device_name').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      media_type: p.child('media_type').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    kinesisanalyticsv2_application(name, block): {
      local p = path(['aws_kinesisanalyticsv2_application', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kinesisanalyticsv2_application: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                force_stop: build.template(std.get(block, 'force_stop', null, true)),
                name: build.template(block.name),
                runtime_environment: build.template(block.runtime_environment),
                service_execution_role: build.template(block.service_execution_role),
                start_application: build.template(std.get(block, 'start_application', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application_mode: p.child('application_mode').out,
      arn: p.child('arn').out,
      create_timestamp: p.child('create_timestamp').out,
      description: p.child('description').out,
      force_stop: p.child('force_stop').out,
      id: p.child('id').out,
      last_update_timestamp: p.child('last_update_timestamp').out,
      name: p.child('name').out,
      runtime_environment: p.child('runtime_environment').out,
      service_execution_role: p.child('service_execution_role').out,
      start_application: p.child('start_application').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version_id: p.child('version_id').out,
    },
    kinesisanalyticsv2_application_snapshot(name, block): {
      local p = path(['aws_kinesisanalyticsv2_application_snapshot', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kinesisanalyticsv2_application_snapshot: {
              [name]: std.prune({
                application_name: build.template(block.application_name),
                snapshot_name: build.template(block.snapshot_name),
              }),
            },
          },
        },
      },
      application_name: p.child('application_name').out,
      application_version_id: p.child('application_version_id').out,
      id: p.child('id').out,
      snapshot_creation_timestamp: p.child('snapshot_creation_timestamp').out,
      snapshot_name: p.child('snapshot_name').out,
    },
    kms_alias(name, block): {
      local p = path(['aws_kms_alias', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kms_alias: {
              [name]: std.prune({
                target_key_id: build.template(block.target_key_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      target_key_arn: p.child('target_key_arn').out,
      target_key_id: p.child('target_key_id').out,
    },
    kms_ciphertext(name, block): {
      local p = path(['aws_kms_ciphertext', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kms_ciphertext: {
              [name]: std.prune({
                context: build.template(std.get(block, 'context', null, true)),
                key_id: build.template(block.key_id),
                plaintext: build.template(block.plaintext),
              }),
            },
          },
        },
      },
      ciphertext_blob: p.child('ciphertext_blob').out,
      context: p.child('context').out,
      id: p.child('id').out,
      key_id: p.child('key_id').out,
      plaintext: p.child('plaintext').out,
    },
    kms_custom_key_store(name, block): {
      local p = path(['aws_kms_custom_key_store', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kms_custom_key_store: {
              [name]: std.prune({
                cloud_hsm_cluster_id: build.template(block.cloud_hsm_cluster_id),
                custom_key_store_name: build.template(block.custom_key_store_name),
                key_store_password: build.template(block.key_store_password),
                trust_anchor_certificate: build.template(block.trust_anchor_certificate),
              }),
            },
          },
        },
      },
      cloud_hsm_cluster_id: p.child('cloud_hsm_cluster_id').out,
      custom_key_store_name: p.child('custom_key_store_name').out,
      id: p.child('id').out,
      key_store_password: p.child('key_store_password').out,
      trust_anchor_certificate: p.child('trust_anchor_certificate').out,
    },
    kms_external_key(name, block): {
      local p = path(['aws_kms_external_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kms_external_key: {
              [name]: std.prune({
                bypass_policy_lockout_safety_check: build.template(std.get(block, 'bypass_policy_lockout_safety_check', null, true)),
                deletion_window_in_days: build.template(std.get(block, 'deletion_window_in_days', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                key_material_base64: build.template(std.get(block, 'key_material_base64', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                valid_to: build.template(std.get(block, 'valid_to', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bypass_policy_lockout_safety_check: p.child('bypass_policy_lockout_safety_check').out,
      deletion_window_in_days: p.child('deletion_window_in_days').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      expiration_model: p.child('expiration_model').out,
      id: p.child('id').out,
      key_material_base64: p.child('key_material_base64').out,
      key_state: p.child('key_state').out,
      key_usage: p.child('key_usage').out,
      multi_region: p.child('multi_region').out,
      policy: p.child('policy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      valid_to: p.child('valid_to').out,
    },
    kms_grant(name, block): {
      local p = path(['aws_kms_grant', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kms_grant: {
              [name]: std.prune({
                grant_creation_tokens: build.template(std.get(block, 'grant_creation_tokens', null, true)),
                grantee_principal: build.template(block.grantee_principal),
                key_id: build.template(block.key_id),
                name: build.template(std.get(block, 'name', null, true)),
                operations: build.template(block.operations),
                retire_on_delete: build.template(std.get(block, 'retire_on_delete', null, true)),
                retiring_principal: build.template(std.get(block, 'retiring_principal', null, true)),
              }),
            },
          },
        },
      },
      grant_creation_tokens: p.child('grant_creation_tokens').out,
      grant_id: p.child('grant_id').out,
      grant_token: p.child('grant_token').out,
      grantee_principal: p.child('grantee_principal').out,
      id: p.child('id').out,
      key_id: p.child('key_id').out,
      name: p.child('name').out,
      operations: p.child('operations').out,
      retire_on_delete: p.child('retire_on_delete').out,
      retiring_principal: p.child('retiring_principal').out,
    },
    kms_key(name, block): {
      local p = path(['aws_kms_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kms_key: {
              [name]: std.prune({
                bypass_policy_lockout_safety_check: build.template(std.get(block, 'bypass_policy_lockout_safety_check', null, true)),
                custom_key_store_id: build.template(std.get(block, 'custom_key_store_id', null, true)),
                customer_master_key_spec: build.template(std.get(block, 'customer_master_key_spec', null, true)),
                deletion_window_in_days: build.template(std.get(block, 'deletion_window_in_days', null, true)),
                enable_key_rotation: build.template(std.get(block, 'enable_key_rotation', null, true)),
                is_enabled: build.template(std.get(block, 'is_enabled', null, true)),
                key_usage: build.template(std.get(block, 'key_usage', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                xks_key_id: build.template(std.get(block, 'xks_key_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bypass_policy_lockout_safety_check: p.child('bypass_policy_lockout_safety_check').out,
      custom_key_store_id: p.child('custom_key_store_id').out,
      customer_master_key_spec: p.child('customer_master_key_spec').out,
      deletion_window_in_days: p.child('deletion_window_in_days').out,
      description: p.child('description').out,
      enable_key_rotation: p.child('enable_key_rotation').out,
      id: p.child('id').out,
      is_enabled: p.child('is_enabled').out,
      key_id: p.child('key_id').out,
      key_usage: p.child('key_usage').out,
      multi_region: p.child('multi_region').out,
      policy: p.child('policy').out,
      rotation_period_in_days: p.child('rotation_period_in_days').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      xks_key_id: p.child('xks_key_id').out,
    },
    kms_key_policy(name, block): {
      local p = path(['aws_kms_key_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kms_key_policy: {
              [name]: std.prune({
                bypass_policy_lockout_safety_check: build.template(std.get(block, 'bypass_policy_lockout_safety_check', null, true)),
                key_id: build.template(block.key_id),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      bypass_policy_lockout_safety_check: p.child('bypass_policy_lockout_safety_check').out,
      id: p.child('id').out,
      key_id: p.child('key_id').out,
      policy: p.child('policy').out,
    },
    kms_replica_external_key(name, block): {
      local p = path(['aws_kms_replica_external_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kms_replica_external_key: {
              [name]: std.prune({
                bypass_policy_lockout_safety_check: build.template(std.get(block, 'bypass_policy_lockout_safety_check', null, true)),
                deletion_window_in_days: build.template(std.get(block, 'deletion_window_in_days', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                key_material_base64: build.template(std.get(block, 'key_material_base64', null, true)),
                primary_key_arn: build.template(block.primary_key_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                valid_to: build.template(std.get(block, 'valid_to', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bypass_policy_lockout_safety_check: p.child('bypass_policy_lockout_safety_check').out,
      deletion_window_in_days: p.child('deletion_window_in_days').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      expiration_model: p.child('expiration_model').out,
      id: p.child('id').out,
      key_id: p.child('key_id').out,
      key_material_base64: p.child('key_material_base64').out,
      key_state: p.child('key_state').out,
      key_usage: p.child('key_usage').out,
      policy: p.child('policy').out,
      primary_key_arn: p.child('primary_key_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      valid_to: p.child('valid_to').out,
    },
    kms_replica_key(name, block): {
      local p = path(['aws_kms_replica_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_kms_replica_key: {
              [name]: std.prune({
                bypass_policy_lockout_safety_check: build.template(std.get(block, 'bypass_policy_lockout_safety_check', null, true)),
                deletion_window_in_days: build.template(std.get(block, 'deletion_window_in_days', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                primary_key_arn: build.template(block.primary_key_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bypass_policy_lockout_safety_check: p.child('bypass_policy_lockout_safety_check').out,
      deletion_window_in_days: p.child('deletion_window_in_days').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      key_id: p.child('key_id').out,
      key_rotation_enabled: p.child('key_rotation_enabled').out,
      key_spec: p.child('key_spec').out,
      key_usage: p.child('key_usage').out,
      policy: p.child('policy').out,
      primary_key_arn: p.child('primary_key_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    lakeformation_data_cells_filter(name, block): {
      local p = path(['aws_lakeformation_data_cells_filter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lakeformation_data_cells_filter: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    lakeformation_data_lake_settings(name, block): {
      local p = path(['aws_lakeformation_data_lake_settings', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lakeformation_data_lake_settings: {
              [name]: std.prune({
                allow_external_data_filtering: build.template(std.get(block, 'allow_external_data_filtering', null, true)),
                allow_full_table_external_data_access: build.template(std.get(block, 'allow_full_table_external_data_access', null, true)),
                catalog_id: build.template(std.get(block, 'catalog_id', null, true)),
              }),
            },
          },
        },
      },
      admins: p.child('admins').out,
      allow_external_data_filtering: p.child('allow_external_data_filtering').out,
      allow_full_table_external_data_access: p.child('allow_full_table_external_data_access').out,
      authorized_session_tag_value_list: p.child('authorized_session_tag_value_list').out,
      catalog_id: p.child('catalog_id').out,
      external_data_filtering_allow_list: p.child('external_data_filtering_allow_list').out,
      id: p.child('id').out,
      parameters: p.child('parameters').out,
      read_only_admins: p.child('read_only_admins').out,
      trusted_resource_owners: p.child('trusted_resource_owners').out,
    },
    lakeformation_lf_tag(name, block): {
      local p = path(['aws_lakeformation_lf_tag', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lakeformation_lf_tag: {
              [name]: std.prune({
                key: build.template(block.key),
                values: build.template(block.values),
              }),
            },
          },
        },
      },
      catalog_id: p.child('catalog_id').out,
      id: p.child('id').out,
      key: p.child('key').out,
      values: p.child('values').out,
    },
    lakeformation_permissions(name, block): {
      local p = path(['aws_lakeformation_permissions', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lakeformation_permissions: {
              [name]: std.prune({
                catalog_id: build.template(std.get(block, 'catalog_id', null, true)),
                catalog_resource: build.template(std.get(block, 'catalog_resource', null, true)),
                permissions: build.template(block.permissions),
                principal: build.template(block.principal),
              }),
            },
          },
        },
      },
      catalog_id: p.child('catalog_id').out,
      catalog_resource: p.child('catalog_resource').out,
      id: p.child('id').out,
      permissions: p.child('permissions').out,
      permissions_with_grant_option: p.child('permissions_with_grant_option').out,
      principal: p.child('principal').out,
    },
    lakeformation_resource(name, block): {
      local p = path(['aws_lakeformation_resource', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lakeformation_resource: {
              [name]: std.prune({
                arn: build.template(block.arn),
                use_service_linked_role: build.template(std.get(block, 'use_service_linked_role', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      hybrid_access_enabled: p.child('hybrid_access_enabled').out,
      id: p.child('id').out,
      last_modified: p.child('last_modified').out,
      role_arn: p.child('role_arn').out,
      use_service_linked_role: p.child('use_service_linked_role').out,
      with_federation: p.child('with_federation').out,
    },
    lakeformation_resource_lf_tag(name, block): {
      local p = path(['aws_lakeformation_resource_lf_tag', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lakeformation_resource_lf_tag: {
              [name]: std.prune({
                catalog_id: build.template(std.get(block, 'catalog_id', null, true)),
              }),
            },
          },
        },
      },
      catalog_id: p.child('catalog_id').out,
      id: p.child('id').out,
    },
    lakeformation_resource_lf_tags(name, block): {
      local p = path(['aws_lakeformation_resource_lf_tags', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lakeformation_resource_lf_tags: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      catalog_id: p.child('catalog_id').out,
      id: p.child('id').out,
    },
    lambda_alias(name, block): {
      local p = path(['aws_lambda_alias', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lambda_alias: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                function_name: build.template(block.function_name),
                function_version: build.template(block.function_version),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      function_name: p.child('function_name').out,
      function_version: p.child('function_version').out,
      id: p.child('id').out,
      invoke_arn: p.child('invoke_arn').out,
      name: p.child('name').out,
    },
    lambda_code_signing_config(name, block): {
      local p = path(['aws_lambda_code_signing_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lambda_code_signing_config: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      config_id: p.child('config_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_modified: p.child('last_modified').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    lambda_event_source_mapping(name, block): {
      local p = path(['aws_lambda_event_source_mapping', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lambda_event_source_mapping: {
              [name]: std.prune({
                batch_size: build.template(std.get(block, 'batch_size', null, true)),
                bisect_batch_on_function_error: build.template(std.get(block, 'bisect_batch_on_function_error', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                event_source_arn: build.template(std.get(block, 'event_source_arn', null, true)),
                function_name: build.template(block.function_name),
                function_response_types: build.template(std.get(block, 'function_response_types', null, true)),
                kms_key_arn: build.template(std.get(block, 'kms_key_arn', null, true)),
                maximum_batching_window_in_seconds: build.template(std.get(block, 'maximum_batching_window_in_seconds', null, true)),
                queues: build.template(std.get(block, 'queues', null, true)),
                starting_position: build.template(std.get(block, 'starting_position', null, true)),
                starting_position_timestamp: build.template(std.get(block, 'starting_position_timestamp', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                topics: build.template(std.get(block, 'topics', null, true)),
                tumbling_window_in_seconds: build.template(std.get(block, 'tumbling_window_in_seconds', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      batch_size: p.child('batch_size').out,
      bisect_batch_on_function_error: p.child('bisect_batch_on_function_error').out,
      enabled: p.child('enabled').out,
      event_source_arn: p.child('event_source_arn').out,
      function_arn: p.child('function_arn').out,
      function_name: p.child('function_name').out,
      function_response_types: p.child('function_response_types').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      last_modified: p.child('last_modified').out,
      last_processing_result: p.child('last_processing_result').out,
      maximum_batching_window_in_seconds: p.child('maximum_batching_window_in_seconds').out,
      maximum_record_age_in_seconds: p.child('maximum_record_age_in_seconds').out,
      maximum_retry_attempts: p.child('maximum_retry_attempts').out,
      parallelization_factor: p.child('parallelization_factor').out,
      queues: p.child('queues').out,
      starting_position: p.child('starting_position').out,
      starting_position_timestamp: p.child('starting_position_timestamp').out,
      state: p.child('state').out,
      state_transition_reason: p.child('state_transition_reason').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      topics: p.child('topics').out,
      tumbling_window_in_seconds: p.child('tumbling_window_in_seconds').out,
      uuid: p.child('uuid').out,
    },
    lambda_function(name, block): {
      local p = path(['aws_lambda_function', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lambda_function: {
              [name]: std.prune({
                code_signing_config_arn: build.template(std.get(block, 'code_signing_config_arn', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                filename: build.template(std.get(block, 'filename', null, true)),
                function_name: build.template(block.function_name),
                handler: build.template(std.get(block, 'handler', null, true)),
                image_uri: build.template(std.get(block, 'image_uri', null, true)),
                kms_key_arn: build.template(std.get(block, 'kms_key_arn', null, true)),
                layers: build.template(std.get(block, 'layers', null, true)),
                memory_size: build.template(std.get(block, 'memory_size', null, true)),
                package_type: build.template(std.get(block, 'package_type', null, true)),
                publish: build.template(std.get(block, 'publish', null, true)),
                replace_security_groups_on_destroy: build.template(std.get(block, 'replace_security_groups_on_destroy', null, true)),
                replacement_security_group_ids: build.template(std.get(block, 'replacement_security_group_ids', null, true)),
                reserved_concurrent_executions: build.template(std.get(block, 'reserved_concurrent_executions', null, true)),
                role: build.template(block.role),
                runtime: build.template(std.get(block, 'runtime', null, true)),
                s3_bucket: build.template(std.get(block, 's3_bucket', null, true)),
                s3_key: build.template(std.get(block, 's3_key', null, true)),
                s3_object_version: build.template(std.get(block, 's3_object_version', null, true)),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                timeout: build.template(std.get(block, 'timeout', null, true)),
              }),
            },
          },
        },
      },
      architectures: p.child('architectures').out,
      arn: p.child('arn').out,
      code_sha256: p.child('code_sha256').out,
      code_signing_config_arn: p.child('code_signing_config_arn').out,
      description: p.child('description').out,
      filename: p.child('filename').out,
      function_name: p.child('function_name').out,
      handler: p.child('handler').out,
      id: p.child('id').out,
      image_uri: p.child('image_uri').out,
      invoke_arn: p.child('invoke_arn').out,
      kms_key_arn: p.child('kms_key_arn').out,
      last_modified: p.child('last_modified').out,
      layers: p.child('layers').out,
      memory_size: p.child('memory_size').out,
      package_type: p.child('package_type').out,
      publish: p.child('publish').out,
      qualified_arn: p.child('qualified_arn').out,
      qualified_invoke_arn: p.child('qualified_invoke_arn').out,
      replace_security_groups_on_destroy: p.child('replace_security_groups_on_destroy').out,
      replacement_security_group_ids: p.child('replacement_security_group_ids').out,
      reserved_concurrent_executions: p.child('reserved_concurrent_executions').out,
      role: p.child('role').out,
      runtime: p.child('runtime').out,
      s3_bucket: p.child('s3_bucket').out,
      s3_key: p.child('s3_key').out,
      s3_object_version: p.child('s3_object_version').out,
      signing_job_arn: p.child('signing_job_arn').out,
      signing_profile_version_arn: p.child('signing_profile_version_arn').out,
      skip_destroy: p.child('skip_destroy').out,
      source_code_hash: p.child('source_code_hash').out,
      source_code_size: p.child('source_code_size').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      timeout: p.child('timeout').out,
      version: p.child('version').out,
    },
    lambda_function_event_invoke_config(name, block): {
      local p = path(['aws_lambda_function_event_invoke_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lambda_function_event_invoke_config: {
              [name]: std.prune({
                function_name: build.template(block.function_name),
                maximum_event_age_in_seconds: build.template(std.get(block, 'maximum_event_age_in_seconds', null, true)),
                maximum_retry_attempts: build.template(std.get(block, 'maximum_retry_attempts', null, true)),
                qualifier: build.template(std.get(block, 'qualifier', null, true)),
              }),
            },
          },
        },
      },
      function_name: p.child('function_name').out,
      id: p.child('id').out,
      maximum_event_age_in_seconds: p.child('maximum_event_age_in_seconds').out,
      maximum_retry_attempts: p.child('maximum_retry_attempts').out,
      qualifier: p.child('qualifier').out,
    },
    lambda_function_recursion_config(name, block): {
      local p = path(['aws_lambda_function_recursion_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lambda_function_recursion_config: {
              [name]: std.prune({
                function_name: build.template(block.function_name),
                recursive_loop: build.template(block.recursive_loop),
              }),
            },
          },
        },
      },
      function_name: p.child('function_name').out,
      recursive_loop: p.child('recursive_loop').out,
    },
    lambda_function_url(name, block): {
      local p = path(['aws_lambda_function_url', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lambda_function_url: {
              [name]: std.prune({
                authorization_type: build.template(block.authorization_type),
                function_name: build.template(block.function_name),
                invoke_mode: build.template(std.get(block, 'invoke_mode', null, true)),
                qualifier: build.template(std.get(block, 'qualifier', null, true)),
              }),
            },
          },
        },
      },
      authorization_type: p.child('authorization_type').out,
      function_arn: p.child('function_arn').out,
      function_name: p.child('function_name').out,
      function_url: p.child('function_url').out,
      id: p.child('id').out,
      invoke_mode: p.child('invoke_mode').out,
      qualifier: p.child('qualifier').out,
      url_id: p.child('url_id').out,
    },
    lambda_invocation(name, block): {
      local p = path(['aws_lambda_invocation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lambda_invocation: {
              [name]: std.prune({
                function_name: build.template(block.function_name),
                input: build.template(block.input),
                lifecycle_scope: build.template(std.get(block, 'lifecycle_scope', null, true)),
                qualifier: build.template(std.get(block, 'qualifier', null, true)),
                terraform_key: build.template(std.get(block, 'terraform_key', null, true)),
                triggers: build.template(std.get(block, 'triggers', null, true)),
              }),
            },
          },
        },
      },
      function_name: p.child('function_name').out,
      id: p.child('id').out,
      input: p.child('input').out,
      lifecycle_scope: p.child('lifecycle_scope').out,
      qualifier: p.child('qualifier').out,
      result: p.child('result').out,
      terraform_key: p.child('terraform_key').out,
      triggers: p.child('triggers').out,
    },
    lambda_layer_version(name, block): {
      local p = path(['aws_lambda_layer_version', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lambda_layer_version: {
              [name]: std.prune({
                compatible_architectures: build.template(std.get(block, 'compatible_architectures', null, true)),
                compatible_runtimes: build.template(std.get(block, 'compatible_runtimes', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                filename: build.template(std.get(block, 'filename', null, true)),
                layer_name: build.template(block.layer_name),
                license_info: build.template(std.get(block, 'license_info', null, true)),
                s3_bucket: build.template(std.get(block, 's3_bucket', null, true)),
                s3_key: build.template(std.get(block, 's3_key', null, true)),
                s3_object_version: build.template(std.get(block, 's3_object_version', null, true)),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      code_sha256: p.child('code_sha256').out,
      compatible_architectures: p.child('compatible_architectures').out,
      compatible_runtimes: p.child('compatible_runtimes').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      filename: p.child('filename').out,
      id: p.child('id').out,
      layer_arn: p.child('layer_arn').out,
      layer_name: p.child('layer_name').out,
      license_info: p.child('license_info').out,
      s3_bucket: p.child('s3_bucket').out,
      s3_key: p.child('s3_key').out,
      s3_object_version: p.child('s3_object_version').out,
      signing_job_arn: p.child('signing_job_arn').out,
      signing_profile_version_arn: p.child('signing_profile_version_arn').out,
      skip_destroy: p.child('skip_destroy').out,
      source_code_hash: p.child('source_code_hash').out,
      source_code_size: p.child('source_code_size').out,
      version: p.child('version').out,
    },
    lambda_layer_version_permission(name, block): {
      local p = path(['aws_lambda_layer_version_permission', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lambda_layer_version_permission: {
              [name]: std.prune({
                action: build.template(block.action),
                layer_name: build.template(block.layer_name),
                organization_id: build.template(std.get(block, 'organization_id', null, true)),
                principal: build.template(block.principal),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
                statement_id: build.template(block.statement_id),
                version_number: build.template(block.version_number),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      id: p.child('id').out,
      layer_name: p.child('layer_name').out,
      organization_id: p.child('organization_id').out,
      policy: p.child('policy').out,
      principal: p.child('principal').out,
      revision_id: p.child('revision_id').out,
      skip_destroy: p.child('skip_destroy').out,
      statement_id: p.child('statement_id').out,
      version_number: p.child('version_number').out,
    },
    lambda_permission(name, block): {
      local p = path(['aws_lambda_permission', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lambda_permission: {
              [name]: std.prune({
                action: build.template(block.action),
                event_source_token: build.template(std.get(block, 'event_source_token', null, true)),
                function_name: build.template(block.function_name),
                function_url_auth_type: build.template(std.get(block, 'function_url_auth_type', null, true)),
                principal: build.template(block.principal),
                principal_org_id: build.template(std.get(block, 'principal_org_id', null, true)),
                qualifier: build.template(std.get(block, 'qualifier', null, true)),
                source_account: build.template(std.get(block, 'source_account', null, true)),
                source_arn: build.template(std.get(block, 'source_arn', null, true)),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      event_source_token: p.child('event_source_token').out,
      function_name: p.child('function_name').out,
      function_url_auth_type: p.child('function_url_auth_type').out,
      id: p.child('id').out,
      principal: p.child('principal').out,
      principal_org_id: p.child('principal_org_id').out,
      qualifier: p.child('qualifier').out,
      source_account: p.child('source_account').out,
      source_arn: p.child('source_arn').out,
      statement_id: p.child('statement_id').out,
      statement_id_prefix: p.child('statement_id_prefix').out,
    },
    lambda_provisioned_concurrency_config(name, block): {
      local p = path(['aws_lambda_provisioned_concurrency_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lambda_provisioned_concurrency_config: {
              [name]: std.prune({
                function_name: build.template(block.function_name),
                provisioned_concurrent_executions: build.template(block.provisioned_concurrent_executions),
                qualifier: build.template(block.qualifier),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
              }),
            },
          },
        },
      },
      function_name: p.child('function_name').out,
      id: p.child('id').out,
      provisioned_concurrent_executions: p.child('provisioned_concurrent_executions').out,
      qualifier: p.child('qualifier').out,
      skip_destroy: p.child('skip_destroy').out,
    },
    lambda_runtime_management_config(name, block): {
      local p = path(['aws_lambda_runtime_management_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lambda_runtime_management_config: {
              [name]: std.prune({
                function_name: build.template(block.function_name),
                qualifier: build.template(std.get(block, 'qualifier', null, true)),
                runtime_version_arn: build.template(std.get(block, 'runtime_version_arn', null, true)),
                update_runtime_on: build.template(std.get(block, 'update_runtime_on', null, true)),
              }),
            },
          },
        },
      },
      function_arn: p.child('function_arn').out,
      function_name: p.child('function_name').out,
      qualifier: p.child('qualifier').out,
      runtime_version_arn: p.child('runtime_version_arn').out,
      update_runtime_on: p.child('update_runtime_on').out,
    },
    launch_configuration(name, block): {
      local p = path(['aws_launch_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_launch_configuration: {
              [name]: std.prune({
                enable_monitoring: build.template(std.get(block, 'enable_monitoring', null, true)),
                iam_instance_profile: build.template(std.get(block, 'iam_instance_profile', null, true)),
                image_id: build.template(block.image_id),
                instance_type: build.template(block.instance_type),
                placement_tenancy: build.template(std.get(block, 'placement_tenancy', null, true)),
                security_groups: build.template(std.get(block, 'security_groups', null, true)),
                spot_price: build.template(std.get(block, 'spot_price', null, true)),
                user_data: build.template(std.get(block, 'user_data', null, true)),
                user_data_base64: build.template(std.get(block, 'user_data_base64', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      associate_public_ip_address: p.child('associate_public_ip_address').out,
      ebs_optimized: p.child('ebs_optimized').out,
      enable_monitoring: p.child('enable_monitoring').out,
      iam_instance_profile: p.child('iam_instance_profile').out,
      id: p.child('id').out,
      image_id: p.child('image_id').out,
      instance_type: p.child('instance_type').out,
      key_name: p.child('key_name').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      placement_tenancy: p.child('placement_tenancy').out,
      security_groups: p.child('security_groups').out,
      spot_price: p.child('spot_price').out,
      user_data: p.child('user_data').out,
      user_data_base64: p.child('user_data_base64').out,
    },
    launch_template(name, block): {
      local p = path(['aws_launch_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_launch_template: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                disable_api_stop: build.template(std.get(block, 'disable_api_stop', null, true)),
                disable_api_termination: build.template(std.get(block, 'disable_api_termination', null, true)),
                ebs_optimized: build.template(std.get(block, 'ebs_optimized', null, true)),
                image_id: build.template(std.get(block, 'image_id', null, true)),
                instance_initiated_shutdown_behavior: build.template(std.get(block, 'instance_initiated_shutdown_behavior', null, true)),
                instance_type: build.template(std.get(block, 'instance_type', null, true)),
                kernel_id: build.template(std.get(block, 'kernel_id', null, true)),
                key_name: build.template(std.get(block, 'key_name', null, true)),
                ram_disk_id: build.template(std.get(block, 'ram_disk_id', null, true)),
                security_group_names: build.template(std.get(block, 'security_group_names', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                update_default_version: build.template(std.get(block, 'update_default_version', null, true)),
                user_data: build.template(std.get(block, 'user_data', null, true)),
                vpc_security_group_ids: build.template(std.get(block, 'vpc_security_group_ids', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_version: p.child('default_version').out,
      description: p.child('description').out,
      disable_api_stop: p.child('disable_api_stop').out,
      disable_api_termination: p.child('disable_api_termination').out,
      ebs_optimized: p.child('ebs_optimized').out,
      id: p.child('id').out,
      image_id: p.child('image_id').out,
      instance_initiated_shutdown_behavior: p.child('instance_initiated_shutdown_behavior').out,
      instance_type: p.child('instance_type').out,
      kernel_id: p.child('kernel_id').out,
      key_name: p.child('key_name').out,
      latest_version: p.child('latest_version').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      ram_disk_id: p.child('ram_disk_id').out,
      security_group_names: p.child('security_group_names').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      update_default_version: p.child('update_default_version').out,
      user_data: p.child('user_data').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    lb(name, block): {
      local p = path(['aws_lb', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lb: {
              [name]: std.prune({
                client_keep_alive: build.template(std.get(block, 'client_keep_alive', null, true)),
                customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null, true)),
                desync_mitigation_mode: build.template(std.get(block, 'desync_mitigation_mode', null, true)),
                dns_record_client_routing_policy: build.template(std.get(block, 'dns_record_client_routing_policy', null, true)),
                drop_invalid_header_fields: build.template(std.get(block, 'drop_invalid_header_fields', null, true)),
                enable_cross_zone_load_balancing: build.template(std.get(block, 'enable_cross_zone_load_balancing', null, true)),
                enable_deletion_protection: build.template(std.get(block, 'enable_deletion_protection', null, true)),
                enable_http2: build.template(std.get(block, 'enable_http2', null, true)),
                enable_tls_version_and_cipher_suite_headers: build.template(std.get(block, 'enable_tls_version_and_cipher_suite_headers', null, true)),
                enable_waf_fail_open: build.template(std.get(block, 'enable_waf_fail_open', null, true)),
                enable_xff_client_port: build.template(std.get(block, 'enable_xff_client_port', null, true)),
                enable_zonal_shift: build.template(std.get(block, 'enable_zonal_shift', null, true)),
                idle_timeout: build.template(std.get(block, 'idle_timeout', null, true)),
                load_balancer_type: build.template(std.get(block, 'load_balancer_type', null, true)),
                preserve_host_header: build.template(std.get(block, 'preserve_host_header', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                xff_header_processing_mode: build.template(std.get(block, 'xff_header_processing_mode', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      arn_suffix: p.child('arn_suffix').out,
      client_keep_alive: p.child('client_keep_alive').out,
      customer_owned_ipv4_pool: p.child('customer_owned_ipv4_pool').out,
      desync_mitigation_mode: p.child('desync_mitigation_mode').out,
      dns_name: p.child('dns_name').out,
      dns_record_client_routing_policy: p.child('dns_record_client_routing_policy').out,
      drop_invalid_header_fields: p.child('drop_invalid_header_fields').out,
      enable_cross_zone_load_balancing: p.child('enable_cross_zone_load_balancing').out,
      enable_deletion_protection: p.child('enable_deletion_protection').out,
      enable_http2: p.child('enable_http2').out,
      enable_tls_version_and_cipher_suite_headers: p.child('enable_tls_version_and_cipher_suite_headers').out,
      enable_waf_fail_open: p.child('enable_waf_fail_open').out,
      enable_xff_client_port: p.child('enable_xff_client_port').out,
      enable_zonal_shift: p.child('enable_zonal_shift').out,
      enforce_security_group_inbound_rules_on_private_link_traffic: p.child('enforce_security_group_inbound_rules_on_private_link_traffic').out,
      id: p.child('id').out,
      idle_timeout: p.child('idle_timeout').out,
      internal: p.child('internal').out,
      ip_address_type: p.child('ip_address_type').out,
      load_balancer_type: p.child('load_balancer_type').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      preserve_host_header: p.child('preserve_host_header').out,
      security_groups: p.child('security_groups').out,
      subnets: p.child('subnets').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
      xff_header_processing_mode: p.child('xff_header_processing_mode').out,
      zone_id: p.child('zone_id').out,
    },
    lb_cookie_stickiness_policy(name, block): {
      local p = path(['aws_lb_cookie_stickiness_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lb_cookie_stickiness_policy: {
              [name]: std.prune({
                cookie_expiration_period: build.template(std.get(block, 'cookie_expiration_period', null, true)),
                lb_port: build.template(block.lb_port),
                load_balancer: build.template(block.load_balancer),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      cookie_expiration_period: p.child('cookie_expiration_period').out,
      id: p.child('id').out,
      lb_port: p.child('lb_port').out,
      load_balancer: p.child('load_balancer').out,
      name: p.child('name').out,
    },
    lb_listener(name, block): {
      local p = path(['aws_lb_listener', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lb_listener: {
              [name]: std.prune({
                alpn_policy: build.template(std.get(block, 'alpn_policy', null, true)),
                certificate_arn: build.template(std.get(block, 'certificate_arn', null, true)),
                load_balancer_arn: build.template(block.load_balancer_arn),
                port: build.template(std.get(block, 'port', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tcp_idle_timeout_seconds: build.template(std.get(block, 'tcp_idle_timeout_seconds', null, true)),
              }),
            },
          },
        },
      },
      alpn_policy: p.child('alpn_policy').out,
      arn: p.child('arn').out,
      certificate_arn: p.child('certificate_arn').out,
      id: p.child('id').out,
      load_balancer_arn: p.child('load_balancer_arn').out,
      port: p.child('port').out,
      protocol: p.child('protocol').out,
      ssl_policy: p.child('ssl_policy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tcp_idle_timeout_seconds: p.child('tcp_idle_timeout_seconds').out,
    },
    lb_listener_certificate(name, block): {
      local p = path(['aws_lb_listener_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lb_listener_certificate: {
              [name]: std.prune({
                certificate_arn: build.template(block.certificate_arn),
                listener_arn: build.template(block.listener_arn),
              }),
            },
          },
        },
      },
      certificate_arn: p.child('certificate_arn').out,
      id: p.child('id').out,
      listener_arn: p.child('listener_arn').out,
    },
    lb_listener_rule(name, block): {
      local p = path(['aws_lb_listener_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lb_listener_rule: {
              [name]: std.prune({
                listener_arn: build.template(block.listener_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      listener_arn: p.child('listener_arn').out,
      priority: p.child('priority').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    lb_ssl_negotiation_policy(name, block): {
      local p = path(['aws_lb_ssl_negotiation_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lb_ssl_negotiation_policy: {
              [name]: std.prune({
                lb_port: build.template(block.lb_port),
                load_balancer: build.template(block.load_balancer),
                name: build.template(block.name),
                triggers: build.template(std.get(block, 'triggers', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      lb_port: p.child('lb_port').out,
      load_balancer: p.child('load_balancer').out,
      name: p.child('name').out,
      triggers: p.child('triggers').out,
    },
    lb_target_group(name, block): {
      local p = path(['aws_lb_target_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lb_target_group: {
              [name]: std.prune({
                deregistration_delay: build.template(std.get(block, 'deregistration_delay', null, true)),
                lambda_multi_value_headers_enabled: build.template(std.get(block, 'lambda_multi_value_headers_enabled', null, true)),
                port: build.template(std.get(block, 'port', null, true)),
                protocol: build.template(std.get(block, 'protocol', null, true)),
                proxy_protocol_v2: build.template(std.get(block, 'proxy_protocol_v2', null, true)),
                slow_start: build.template(std.get(block, 'slow_start', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_type: build.template(std.get(block, 'target_type', null, true)),
                vpc_id: build.template(std.get(block, 'vpc_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      arn_suffix: p.child('arn_suffix').out,
      connection_termination: p.child('connection_termination').out,
      deregistration_delay: p.child('deregistration_delay').out,
      id: p.child('id').out,
      ip_address_type: p.child('ip_address_type').out,
      lambda_multi_value_headers_enabled: p.child('lambda_multi_value_headers_enabled').out,
      load_balancer_arns: p.child('load_balancer_arns').out,
      load_balancing_algorithm_type: p.child('load_balancing_algorithm_type').out,
      load_balancing_anomaly_mitigation: p.child('load_balancing_anomaly_mitigation').out,
      load_balancing_cross_zone_enabled: p.child('load_balancing_cross_zone_enabled').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      port: p.child('port').out,
      preserve_client_ip: p.child('preserve_client_ip').out,
      protocol: p.child('protocol').out,
      protocol_version: p.child('protocol_version').out,
      proxy_protocol_v2: p.child('proxy_protocol_v2').out,
      slow_start: p.child('slow_start').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_type: p.child('target_type').out,
      vpc_id: p.child('vpc_id').out,
    },
    lb_target_group_attachment(name, block): {
      local p = path(['aws_lb_target_group_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lb_target_group_attachment: {
              [name]: std.prune({
                availability_zone: build.template(std.get(block, 'availability_zone', null, true)),
                port: build.template(std.get(block, 'port', null, true)),
                target_group_arn: build.template(block.target_group_arn),
                target_id: build.template(block.target_id),
              }),
            },
          },
        },
      },
      availability_zone: p.child('availability_zone').out,
      id: p.child('id').out,
      port: p.child('port').out,
      target_group_arn: p.child('target_group_arn').out,
      target_id: p.child('target_id').out,
    },
    lb_trust_store(name, block): {
      local p = path(['aws_lb_trust_store', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lb_trust_store: {
              [name]: std.prune({
                ca_certificates_bundle_s3_bucket: build.template(block.ca_certificates_bundle_s3_bucket),
                ca_certificates_bundle_s3_key: build.template(block.ca_certificates_bundle_s3_key),
                ca_certificates_bundle_s3_object_version: build.template(std.get(block, 'ca_certificates_bundle_s3_object_version', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      arn_suffix: p.child('arn_suffix').out,
      ca_certificates_bundle_s3_bucket: p.child('ca_certificates_bundle_s3_bucket').out,
      ca_certificates_bundle_s3_key: p.child('ca_certificates_bundle_s3_key').out,
      ca_certificates_bundle_s3_object_version: p.child('ca_certificates_bundle_s3_object_version').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    lb_trust_store_revocation(name, block): {
      local p = path(['aws_lb_trust_store_revocation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lb_trust_store_revocation: {
              [name]: std.prune({
                revocations_s3_bucket: build.template(block.revocations_s3_bucket),
                revocations_s3_key: build.template(block.revocations_s3_key),
                revocations_s3_object_version: build.template(std.get(block, 'revocations_s3_object_version', null, true)),
                trust_store_arn: build.template(block.trust_store_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      revocation_id: p.child('revocation_id').out,
      revocations_s3_bucket: p.child('revocations_s3_bucket').out,
      revocations_s3_key: p.child('revocations_s3_key').out,
      revocations_s3_object_version: p.child('revocations_s3_object_version').out,
      trust_store_arn: p.child('trust_store_arn').out,
    },
    lex_bot(name, block): {
      local p = path(['aws_lex_bot', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lex_bot: {
              [name]: std.prune({
                child_directed: build.template(block.child_directed),
                create_version: build.template(std.get(block, 'create_version', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                detect_sentiment: build.template(std.get(block, 'detect_sentiment', null, true)),
                enable_model_improvements: build.template(std.get(block, 'enable_model_improvements', null, true)),
                idle_session_ttl_in_seconds: build.template(std.get(block, 'idle_session_ttl_in_seconds', null, true)),
                locale: build.template(std.get(block, 'locale', null, true)),
                name: build.template(block.name),
                nlu_intent_confidence_threshold: build.template(std.get(block, 'nlu_intent_confidence_threshold', null, true)),
                process_behavior: build.template(std.get(block, 'process_behavior', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      checksum: p.child('checksum').out,
      child_directed: p.child('child_directed').out,
      create_version: p.child('create_version').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      detect_sentiment: p.child('detect_sentiment').out,
      enable_model_improvements: p.child('enable_model_improvements').out,
      failure_reason: p.child('failure_reason').out,
      id: p.child('id').out,
      idle_session_ttl_in_seconds: p.child('idle_session_ttl_in_seconds').out,
      last_updated_date: p.child('last_updated_date').out,
      locale: p.child('locale').out,
      name: p.child('name').out,
      nlu_intent_confidence_threshold: p.child('nlu_intent_confidence_threshold').out,
      process_behavior: p.child('process_behavior').out,
      status: p.child('status').out,
      version: p.child('version').out,
      voice_id: p.child('voice_id').out,
    },
    lex_bot_alias(name, block): {
      local p = path(['aws_lex_bot_alias', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lex_bot_alias: {
              [name]: std.prune({
                bot_name: build.template(block.bot_name),
                bot_version: build.template(block.bot_version),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bot_name: p.child('bot_name').out,
      bot_version: p.child('bot_version').out,
      checksum: p.child('checksum').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      name: p.child('name').out,
    },
    lex_intent(name, block): {
      local p = path(['aws_lex_intent', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lex_intent: {
              [name]: std.prune({
                create_version: build.template(std.get(block, 'create_version', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                parent_intent_signature: build.template(std.get(block, 'parent_intent_signature', null, true)),
                sample_utterances: build.template(std.get(block, 'sample_utterances', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      checksum: p.child('checksum').out,
      create_version: p.child('create_version').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      name: p.child('name').out,
      parent_intent_signature: p.child('parent_intent_signature').out,
      sample_utterances: p.child('sample_utterances').out,
      version: p.child('version').out,
    },
    lex_slot_type(name, block): {
      local p = path(['aws_lex_slot_type', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lex_slot_type: {
              [name]: std.prune({
                create_version: build.template(std.get(block, 'create_version', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                value_selection_strategy: build.template(std.get(block, 'value_selection_strategy', null, true)),
              }),
            },
          },
        },
      },
      checksum: p.child('checksum').out,
      create_version: p.child('create_version').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      name: p.child('name').out,
      value_selection_strategy: p.child('value_selection_strategy').out,
      version: p.child('version').out,
    },
    lexv2models_bot(name, block): {
      local p = path(['aws_lexv2models_bot', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lexv2models_bot: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                idle_session_ttl_in_seconds: build.template(block.idle_session_ttl_in_seconds),
                name: build.template(block.name),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                test_bot_alias_tags: build.template(std.get(block, 'test_bot_alias_tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      idle_session_ttl_in_seconds: p.child('idle_session_ttl_in_seconds').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      test_bot_alias_tags: p.child('test_bot_alias_tags').out,
      type: p.child('type').out,
    },
    lexv2models_bot_locale(name, block): {
      local p = path(['aws_lexv2models_bot_locale', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lexv2models_bot_locale: {
              [name]: std.prune({
                bot_id: build.template(block.bot_id),
                bot_version: build.template(block.bot_version),
                description: build.template(std.get(block, 'description', null, true)),
                locale_id: build.template(block.locale_id),
                n_lu_intent_confidence_threshold: build.template(block.n_lu_intent_confidence_threshold),
              }),
            },
          },
        },
      },
      bot_id: p.child('bot_id').out,
      bot_version: p.child('bot_version').out,
      description: p.child('description').out,
      id: p.child('id').out,
      locale_id: p.child('locale_id').out,
      n_lu_intent_confidence_threshold: p.child('n_lu_intent_confidence_threshold').out,
      name: p.child('name').out,
    },
    lexv2models_bot_version(name, block): {
      local p = path(['aws_lexv2models_bot_version', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lexv2models_bot_version: {
              [name]: std.prune({
                bot_id: build.template(block.bot_id),
                description: build.template(std.get(block, 'description', null, true)),
                locale_specification: build.template(block.locale_specification),
              }),
            },
          },
        },
      },
      bot_id: p.child('bot_id').out,
      bot_version: p.child('bot_version').out,
      description: p.child('description').out,
      id: p.child('id').out,
      locale_specification: p.child('locale_specification').out,
    },
    lexv2models_intent(name, block): {
      local p = path(['aws_lexv2models_intent', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lexv2models_intent: {
              [name]: std.prune({
                bot_id: build.template(block.bot_id),
                bot_version: build.template(block.bot_version),
                description: build.template(std.get(block, 'description', null, true)),
                locale_id: build.template(block.locale_id),
                name: build.template(block.name),
                parent_intent_signature: build.template(std.get(block, 'parent_intent_signature', null, true)),
              }),
            },
          },
        },
      },
      bot_id: p.child('bot_id').out,
      bot_version: p.child('bot_version').out,
      creation_date_time: p.child('creation_date_time').out,
      description: p.child('description').out,
      id: p.child('id').out,
      intent_id: p.child('intent_id').out,
      last_updated_date_time: p.child('last_updated_date_time').out,
      locale_id: p.child('locale_id').out,
      name: p.child('name').out,
      parent_intent_signature: p.child('parent_intent_signature').out,
    },
    lexv2models_slot(name, block): {
      local p = path(['aws_lexv2models_slot', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lexv2models_slot: {
              [name]: std.prune({
                bot_id: build.template(block.bot_id),
                bot_version: build.template(block.bot_version),
                description: build.template(std.get(block, 'description', null, true)),
                intent_id: build.template(block.intent_id),
                locale_id: build.template(block.locale_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      bot_id: p.child('bot_id').out,
      bot_version: p.child('bot_version').out,
      description: p.child('description').out,
      id: p.child('id').out,
      intent_id: p.child('intent_id').out,
      locale_id: p.child('locale_id').out,
      name: p.child('name').out,
      slot_id: p.child('slot_id').out,
      slot_type_id: p.child('slot_type_id').out,
    },
    lexv2models_slot_type(name, block): {
      local p = path(['aws_lexv2models_slot_type', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lexv2models_slot_type: {
              [name]: std.prune({
                bot_id: build.template(block.bot_id),
                bot_version: build.template(block.bot_version),
                description: build.template(std.get(block, 'description', null, true)),
                locale_id: build.template(block.locale_id),
                name: build.template(block.name),
                parent_slot_type_signature: build.template(std.get(block, 'parent_slot_type_signature', null, true)),
              }),
            },
          },
        },
      },
      bot_id: p.child('bot_id').out,
      bot_version: p.child('bot_version').out,
      description: p.child('description').out,
      id: p.child('id').out,
      locale_id: p.child('locale_id').out,
      name: p.child('name').out,
      parent_slot_type_signature: p.child('parent_slot_type_signature').out,
      slot_type_id: p.child('slot_type_id').out,
    },
    licensemanager_association(name, block): {
      local p = path(['aws_licensemanager_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_licensemanager_association: {
              [name]: std.prune({
                license_configuration_arn: build.template(block.license_configuration_arn),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      license_configuration_arn: p.child('license_configuration_arn').out,
      resource_arn: p.child('resource_arn').out,
    },
    licensemanager_grant(name, block): {
      local p = path(['aws_licensemanager_grant', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_licensemanager_grant: {
              [name]: std.prune({
                allowed_operations: build.template(block.allowed_operations),
                license_arn: build.template(block.license_arn),
                name: build.template(block.name),
                principal: build.template(block.principal),
              }),
            },
          },
        },
      },
      allowed_operations: p.child('allowed_operations').out,
      arn: p.child('arn').out,
      home_region: p.child('home_region').out,
      id: p.child('id').out,
      license_arn: p.child('license_arn').out,
      name: p.child('name').out,
      parent_arn: p.child('parent_arn').out,
      principal: p.child('principal').out,
      status: p.child('status').out,
      version: p.child('version').out,
    },
    licensemanager_grant_accepter(name, block): {
      local p = path(['aws_licensemanager_grant_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_licensemanager_grant_accepter: {
              [name]: std.prune({
                grant_arn: build.template(block.grant_arn),
              }),
            },
          },
        },
      },
      allowed_operations: p.child('allowed_operations').out,
      grant_arn: p.child('grant_arn').out,
      home_region: p.child('home_region').out,
      id: p.child('id').out,
      license_arn: p.child('license_arn').out,
      name: p.child('name').out,
      parent_arn: p.child('parent_arn').out,
      principal: p.child('principal').out,
      status: p.child('status').out,
      version: p.child('version').out,
    },
    licensemanager_license_configuration(name, block): {
      local p = path(['aws_licensemanager_license_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_licensemanager_license_configuration: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                license_count: build.template(std.get(block, 'license_count', null, true)),
                license_count_hard_limit: build.template(std.get(block, 'license_count_hard_limit', null, true)),
                license_counting_type: build.template(block.license_counting_type),
                license_rules: build.template(std.get(block, 'license_rules', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      license_count: p.child('license_count').out,
      license_count_hard_limit: p.child('license_count_hard_limit').out,
      license_counting_type: p.child('license_counting_type').out,
      license_rules: p.child('license_rules').out,
      name: p.child('name').out,
      owner_account_id: p.child('owner_account_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    lightsail_bucket(name, block): {
      local p = path(['aws_lightsail_bucket', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_bucket: {
              [name]: std.prune({
                bundle_id: build.template(block.bundle_id),
                force_delete: build.template(std.get(block, 'force_delete', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      bundle_id: p.child('bundle_id').out,
      created_at: p.child('created_at').out,
      force_delete: p.child('force_delete').out,
      id: p.child('id').out,
      name: p.child('name').out,
      region: p.child('region').out,
      support_code: p.child('support_code').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      url: p.child('url').out,
    },
    lightsail_bucket_access_key(name, block): {
      local p = path(['aws_lightsail_bucket_access_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_bucket_access_key: {
              [name]: std.prune({
                bucket_name: build.template(block.bucket_name),
              }),
            },
          },
        },
      },
      access_key_id: p.child('access_key_id').out,
      bucket_name: p.child('bucket_name').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      secret_access_key: p.child('secret_access_key').out,
      status: p.child('status').out,
    },
    lightsail_bucket_resource_access(name, block): {
      local p = path(['aws_lightsail_bucket_resource_access', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_bucket_resource_access: {
              [name]: std.prune({
                bucket_name: build.template(block.bucket_name),
                resource_name: build.template(block.resource_name),
              }),
            },
          },
        },
      },
      bucket_name: p.child('bucket_name').out,
      id: p.child('id').out,
      resource_name: p.child('resource_name').out,
    },
    lightsail_certificate(name, block): {
      local p = path(['aws_lightsail_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_certificate: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      domain_name: p.child('domain_name').out,
      domain_validation_options: p.child('domain_validation_options').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subject_alternative_names: p.child('subject_alternative_names').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    lightsail_container_service(name, block): {
      local p = path(['aws_lightsail_container_service', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_container_service: {
              [name]: std.prune({
                is_disabled: build.template(std.get(block, 'is_disabled', null, true)),
                name: build.template(block.name),
                power: build.template(block.power),
                scale: build.template(block.scale),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      is_disabled: p.child('is_disabled').out,
      name: p.child('name').out,
      power: p.child('power').out,
      power_id: p.child('power_id').out,
      principal_arn: p.child('principal_arn').out,
      private_domain_name: p.child('private_domain_name').out,
      resource_type: p.child('resource_type').out,
      scale: p.child('scale').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      url: p.child('url').out,
    },
    lightsail_container_service_deployment_version(name, block): {
      local p = path(['aws_lightsail_container_service_deployment_version', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_container_service_deployment_version: {
              [name]: std.prune({
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      service_name: p.child('service_name').out,
      state: p.child('state').out,
      version: p.child('version').out,
    },
    lightsail_database(name, block): {
      local p = path(['aws_lightsail_database', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_database: {
              [name]: std.prune({
                backup_retention_enabled: build.template(std.get(block, 'backup_retention_enabled', null, true)),
                blueprint_id: build.template(block.blueprint_id),
                bundle_id: build.template(block.bundle_id),
                final_snapshot_name: build.template(std.get(block, 'final_snapshot_name', null, true)),
                master_database_name: build.template(block.master_database_name),
                master_password: build.template(block.master_password),
                master_username: build.template(block.master_username),
                publicly_accessible: build.template(std.get(block, 'publicly_accessible', null, true)),
                relational_database_name: build.template(block.relational_database_name),
                skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      apply_immediately: p.child('apply_immediately').out,
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      backup_retention_enabled: p.child('backup_retention_enabled').out,
      blueprint_id: p.child('blueprint_id').out,
      bundle_id: p.child('bundle_id').out,
      ca_certificate_identifier: p.child('ca_certificate_identifier').out,
      cpu_count: p.child('cpu_count').out,
      created_at: p.child('created_at').out,
      disk_size: p.child('disk_size').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      final_snapshot_name: p.child('final_snapshot_name').out,
      id: p.child('id').out,
      master_database_name: p.child('master_database_name').out,
      master_endpoint_address: p.child('master_endpoint_address').out,
      master_endpoint_port: p.child('master_endpoint_port').out,
      master_password: p.child('master_password').out,
      master_username: p.child('master_username').out,
      preferred_backup_window: p.child('preferred_backup_window').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      publicly_accessible: p.child('publicly_accessible').out,
      ram_size: p.child('ram_size').out,
      relational_database_name: p.child('relational_database_name').out,
      secondary_availability_zone: p.child('secondary_availability_zone').out,
      skip_final_snapshot: p.child('skip_final_snapshot').out,
      support_code: p.child('support_code').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    lightsail_disk(name, block): {
      local p = path(['aws_lightsail_disk', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_disk: {
              [name]: std.prune({
                availability_zone: build.template(block.availability_zone),
                name: build.template(block.name),
                size_in_gb: build.template(block.size_in_gb),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      name: p.child('name').out,
      size_in_gb: p.child('size_in_gb').out,
      support_code: p.child('support_code').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    lightsail_disk_attachment(name, block): {
      local p = path(['aws_lightsail_disk_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_disk_attachment: {
              [name]: std.prune({
                disk_name: build.template(block.disk_name),
                disk_path: build.template(block.disk_path),
                instance_name: build.template(block.instance_name),
              }),
            },
          },
        },
      },
      disk_name: p.child('disk_name').out,
      disk_path: p.child('disk_path').out,
      id: p.child('id').out,
      instance_name: p.child('instance_name').out,
    },
    lightsail_distribution(name, block): {
      local p = path(['aws_lightsail_distribution', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_distribution: {
              [name]: std.prune({
                bundle_id: build.template(block.bundle_id),
                certificate_name: build.template(std.get(block, 'certificate_name', null, true)),
                ip_address_type: build.template(std.get(block, 'ip_address_type', null, true)),
                is_enabled: build.template(std.get(block, 'is_enabled', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      alternative_domain_names: p.child('alternative_domain_names').out,
      arn: p.child('arn').out,
      bundle_id: p.child('bundle_id').out,
      certificate_name: p.child('certificate_name').out,
      created_at: p.child('created_at').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      ip_address_type: p.child('ip_address_type').out,
      is_enabled: p.child('is_enabled').out,
      location: p.child('location').out,
      name: p.child('name').out,
      origin_public_dns: p.child('origin_public_dns').out,
      resource_type: p.child('resource_type').out,
      status: p.child('status').out,
      support_code: p.child('support_code').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    lightsail_domain(name, block): {
      local p = path(['aws_lightsail_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_domain: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
    },
    lightsail_domain_entry(name, block): {
      local p = path(['aws_lightsail_domain_entry', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_domain_entry: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                is_alias: build.template(std.get(block, 'is_alias', null, true)),
                name: build.template(block.name),
                target: build.template(block.target),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      is_alias: p.child('is_alias').out,
      name: p.child('name').out,
      target: p.child('target').out,
      type: p.child('type').out,
    },
    lightsail_instance(name, block): {
      local p = path(['aws_lightsail_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_instance: {
              [name]: std.prune({
                availability_zone: build.template(block.availability_zone),
                blueprint_id: build.template(block.blueprint_id),
                bundle_id: build.template(block.bundle_id),
                ip_address_type: build.template(std.get(block, 'ip_address_type', null, true)),
                key_pair_name: build.template(std.get(block, 'key_pair_name', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_data: build.template(std.get(block, 'user_data', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      blueprint_id: p.child('blueprint_id').out,
      bundle_id: p.child('bundle_id').out,
      cpu_count: p.child('cpu_count').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      ip_address_type: p.child('ip_address_type').out,
      ipv6_addresses: p.child('ipv6_addresses').out,
      is_static_ip: p.child('is_static_ip').out,
      key_pair_name: p.child('key_pair_name').out,
      name: p.child('name').out,
      private_ip_address: p.child('private_ip_address').out,
      public_ip_address: p.child('public_ip_address').out,
      ram_size: p.child('ram_size').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_data: p.child('user_data').out,
      username: p.child('username').out,
    },
    lightsail_instance_public_ports(name, block): {
      local p = path(['aws_lightsail_instance_public_ports', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_instance_public_ports: {
              [name]: std.prune({
                instance_name: build.template(block.instance_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_name: p.child('instance_name').out,
    },
    lightsail_key_pair(name, block): {
      local p = path(['aws_lightsail_key_pair', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_key_pair: {
              [name]: std.prune({
                pgp_key: build.template(std.get(block, 'pgp_key', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      encrypted_fingerprint: p.child('encrypted_fingerprint').out,
      encrypted_private_key: p.child('encrypted_private_key').out,
      fingerprint: p.child('fingerprint').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      pgp_key: p.child('pgp_key').out,
      private_key: p.child('private_key').out,
      public_key: p.child('public_key').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    lightsail_lb(name, block): {
      local p = path(['aws_lightsail_lb', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_lb: {
              [name]: std.prune({
                health_check_path: build.template(std.get(block, 'health_check_path', null, true)),
                instance_port: build.template(block.instance_port),
                ip_address_type: build.template(std.get(block, 'ip_address_type', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      dns_name: p.child('dns_name').out,
      health_check_path: p.child('health_check_path').out,
      id: p.child('id').out,
      instance_port: p.child('instance_port').out,
      ip_address_type: p.child('ip_address_type').out,
      name: p.child('name').out,
      protocol: p.child('protocol').out,
      public_ports: p.child('public_ports').out,
      support_code: p.child('support_code').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    lightsail_lb_attachment(name, block): {
      local p = path(['aws_lightsail_lb_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_lb_attachment: {
              [name]: std.prune({
                instance_name: build.template(block.instance_name),
                lb_name: build.template(block.lb_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_name: p.child('instance_name').out,
      lb_name: p.child('lb_name').out,
    },
    lightsail_lb_certificate(name, block): {
      local p = path(['aws_lightsail_lb_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_lb_certificate: {
              [name]: std.prune({
                lb_name: build.template(block.lb_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      domain_name: p.child('domain_name').out,
      domain_validation_records: p.child('domain_validation_records').out,
      id: p.child('id').out,
      lb_name: p.child('lb_name').out,
      name: p.child('name').out,
      subject_alternative_names: p.child('subject_alternative_names').out,
      support_code: p.child('support_code').out,
    },
    lightsail_lb_certificate_attachment(name, block): {
      local p = path(['aws_lightsail_lb_certificate_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_lb_certificate_attachment: {
              [name]: std.prune({
                certificate_name: build.template(block.certificate_name),
                lb_name: build.template(block.lb_name),
              }),
            },
          },
        },
      },
      certificate_name: p.child('certificate_name').out,
      id: p.child('id').out,
      lb_name: p.child('lb_name').out,
    },
    lightsail_lb_https_redirection_policy(name, block): {
      local p = path(['aws_lightsail_lb_https_redirection_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_lb_https_redirection_policy: {
              [name]: std.prune({
                enabled: build.template(block.enabled),
                lb_name: build.template(block.lb_name),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      lb_name: p.child('lb_name').out,
    },
    lightsail_lb_stickiness_policy(name, block): {
      local p = path(['aws_lightsail_lb_stickiness_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_lb_stickiness_policy: {
              [name]: std.prune({
                cookie_duration: build.template(block.cookie_duration),
                enabled: build.template(block.enabled),
                lb_name: build.template(block.lb_name),
              }),
            },
          },
        },
      },
      cookie_duration: p.child('cookie_duration').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      lb_name: p.child('lb_name').out,
    },
    lightsail_static_ip(name, block): {
      local p = path(['aws_lightsail_static_ip', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_static_ip: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      name: p.child('name').out,
      support_code: p.child('support_code').out,
    },
    lightsail_static_ip_attachment(name, block): {
      local p = path(['aws_lightsail_static_ip_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_lightsail_static_ip_attachment: {
              [name]: std.prune({
                instance_name: build.template(block.instance_name),
                static_ip_name: build.template(block.static_ip_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_name: p.child('instance_name').out,
      ip_address: p.child('ip_address').out,
      static_ip_name: p.child('static_ip_name').out,
    },
    load_balancer_backend_server_policy(name, block): {
      local p = path(['aws_load_balancer_backend_server_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_load_balancer_backend_server_policy: {
              [name]: std.prune({
                instance_port: build.template(block.instance_port),
                load_balancer_name: build.template(block.load_balancer_name),
                policy_names: build.template(std.get(block, 'policy_names', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_port: p.child('instance_port').out,
      load_balancer_name: p.child('load_balancer_name').out,
      policy_names: p.child('policy_names').out,
    },
    load_balancer_listener_policy(name, block): {
      local p = path(['aws_load_balancer_listener_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_load_balancer_listener_policy: {
              [name]: std.prune({
                load_balancer_name: build.template(block.load_balancer_name),
                load_balancer_port: build.template(block.load_balancer_port),
                policy_names: build.template(std.get(block, 'policy_names', null, true)),
                triggers: build.template(std.get(block, 'triggers', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      load_balancer_name: p.child('load_balancer_name').out,
      load_balancer_port: p.child('load_balancer_port').out,
      policy_names: p.child('policy_names').out,
      triggers: p.child('triggers').out,
    },
    load_balancer_policy(name, block): {
      local p = path(['aws_load_balancer_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_load_balancer_policy: {
              [name]: std.prune({
                load_balancer_name: build.template(block.load_balancer_name),
                policy_name: build.template(block.policy_name),
                policy_type_name: build.template(block.policy_type_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      load_balancer_name: p.child('load_balancer_name').out,
      policy_name: p.child('policy_name').out,
      policy_type_name: p.child('policy_type_name').out,
    },
    location_geofence_collection(name, block): {
      local p = path(['aws_location_geofence_collection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_location_geofence_collection: {
              [name]: std.prune({
                collection_name: build.template(block.collection_name),
                description: build.template(std.get(block, 'description', null, true)),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      collection_arn: p.child('collection_arn').out,
      collection_name: p.child('collection_name').out,
      create_time: p.child('create_time').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      update_time: p.child('update_time').out,
    },
    location_map(name, block): {
      local p = path(['aws_location_map', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_location_map: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                map_name: build.template(block.map_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').out,
      description: p.child('description').out,
      id: p.child('id').out,
      map_arn: p.child('map_arn').out,
      map_name: p.child('map_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      update_time: p.child('update_time').out,
    },
    location_place_index(name, block): {
      local p = path(['aws_location_place_index', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_location_place_index: {
              [name]: std.prune({
                data_source: build.template(block.data_source),
                description: build.template(std.get(block, 'description', null, true)),
                index_name: build.template(block.index_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').out,
      data_source: p.child('data_source').out,
      description: p.child('description').out,
      id: p.child('id').out,
      index_arn: p.child('index_arn').out,
      index_name: p.child('index_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      update_time: p.child('update_time').out,
    },
    location_route_calculator(name, block): {
      local p = path(['aws_location_route_calculator', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_location_route_calculator: {
              [name]: std.prune({
                calculator_name: build.template(block.calculator_name),
                data_source: build.template(block.data_source),
                description: build.template(std.get(block, 'description', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      calculator_arn: p.child('calculator_arn').out,
      calculator_name: p.child('calculator_name').out,
      create_time: p.child('create_time').out,
      data_source: p.child('data_source').out,
      description: p.child('description').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      update_time: p.child('update_time').out,
    },
    location_tracker(name, block): {
      local p = path(['aws_location_tracker', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_location_tracker: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                position_filtering: build.template(std.get(block, 'position_filtering', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tracker_name: build.template(block.tracker_name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      position_filtering: p.child('position_filtering').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tracker_arn: p.child('tracker_arn').out,
      tracker_name: p.child('tracker_name').out,
      update_time: p.child('update_time').out,
    },
    location_tracker_association(name, block): {
      local p = path(['aws_location_tracker_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_location_tracker_association: {
              [name]: std.prune({
                consumer_arn: build.template(block.consumer_arn),
                tracker_name: build.template(block.tracker_name),
              }),
            },
          },
        },
      },
      consumer_arn: p.child('consumer_arn').out,
      id: p.child('id').out,
      tracker_name: p.child('tracker_name').out,
    },
    m2_application(name, block): {
      local p = path(['aws_m2_application', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_m2_application: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                engine_type: build.template(block.engine_type),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                name: build.template(block.name),
                role_arn: build.template(std.get(block, 'role_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      arn: p.child('arn').out,
      current_version: p.child('current_version').out,
      description: p.child('description').out,
      engine_type: p.child('engine_type').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    m2_deployment(name, block): {
      local p = path(['aws_m2_deployment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_m2_deployment: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                application_version: build.template(block.application_version),
                environment_id: build.template(block.environment_id),
                force_stop: build.template(std.get(block, 'force_stop', null, true)),
                start: build.template(block.start),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      application_version: p.child('application_version').out,
      deployment_id: p.child('deployment_id').out,
      environment_id: p.child('environment_id').out,
      force_stop: p.child('force_stop').out,
      id: p.child('id').out,
      start: p.child('start').out,
    },
    m2_environment(name, block): {
      local p = path(['aws_m2_environment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_m2_environment: {
              [name]: std.prune({
                apply_changes_during_maintenance_window: build.template(std.get(block, 'apply_changes_during_maintenance_window', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                engine_type: build.template(block.engine_type),
                force_update: build.template(std.get(block, 'force_update', null, true)),
                instance_type: build.template(block.instance_type),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      apply_changes_during_maintenance_window: p.child('apply_changes_during_maintenance_window').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      engine_type: p.child('engine_type').out,
      engine_version: p.child('engine_version').out,
      environment_id: p.child('environment_id').out,
      force_update: p.child('force_update').out,
      id: p.child('id').out,
      instance_type: p.child('instance_type').out,
      kms_key_id: p.child('kms_key_id').out,
      load_balancer_arn: p.child('load_balancer_arn').out,
      name: p.child('name').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      publicly_accessible: p.child('publicly_accessible').out,
      security_group_ids: p.child('security_group_ids').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    macie2_account(name, block): {
      local p = path(['aws_macie2_account', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_macie2_account: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      created_at: p.child('created_at').out,
      finding_publishing_frequency: p.child('finding_publishing_frequency').out,
      id: p.child('id').out,
      service_role: p.child('service_role').out,
      status: p.child('status').out,
      updated_at: p.child('updated_at').out,
    },
    macie2_classification_export_configuration(name, block): {
      local p = path(['aws_macie2_classification_export_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_macie2_classification_export_configuration: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    macie2_classification_job(name, block): {
      local p = path(['aws_macie2_classification_job', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_macie2_classification_job: {
              [name]: std.prune({
                initial_run: build.template(std.get(block, 'initial_run', null, true)),
                job_type: build.template(block.job_type),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      created_at: p.child('created_at').out,
      custom_data_identifier_ids: p.child('custom_data_identifier_ids').out,
      description: p.child('description').out,
      id: p.child('id').out,
      initial_run: p.child('initial_run').out,
      job_arn: p.child('job_arn').out,
      job_id: p.child('job_id').out,
      job_status: p.child('job_status').out,
      job_type: p.child('job_type').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      sampling_percentage: p.child('sampling_percentage').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_paused_details: p.child('user_paused_details').out,
    },
    macie2_custom_data_identifier(name, block): {
      local p = path(['aws_macie2_custom_data_identifier', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_macie2_custom_data_identifier: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                ignore_words: build.template(std.get(block, 'ignore_words', null, true)),
                keywords: build.template(std.get(block, 'keywords', null, true)),
                regex: build.template(std.get(block, 'regex', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      description: p.child('description').out,
      id: p.child('id').out,
      ignore_words: p.child('ignore_words').out,
      keywords: p.child('keywords').out,
      maximum_match_distance: p.child('maximum_match_distance').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      regex: p.child('regex').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    macie2_findings_filter(name, block): {
      local p = path(['aws_macie2_findings_filter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_macie2_findings_filter: {
              [name]: std.prune({
                action: build.template(block.action),
                description: build.template(std.get(block, 'description', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      position: p.child('position').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    macie2_invitation_accepter(name, block): {
      local p = path(['aws_macie2_invitation_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_macie2_invitation_accepter: {
              [name]: std.prune({
                administrator_account_id: build.template(block.administrator_account_id),
              }),
            },
          },
        },
      },
      administrator_account_id: p.child('administrator_account_id').out,
      id: p.child('id').out,
      invitation_id: p.child('invitation_id').out,
    },
    macie2_member(name, block): {
      local p = path(['aws_macie2_member', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_macie2_member: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
                email: build.template(block.email),
                invitation_disable_email_notification: build.template(std.get(block, 'invitation_disable_email_notification', null, true)),
                invitation_message: build.template(std.get(block, 'invitation_message', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      administrator_account_id: p.child('administrator_account_id').out,
      arn: p.child('arn').out,
      email: p.child('email').out,
      id: p.child('id').out,
      invitation_disable_email_notification: p.child('invitation_disable_email_notification').out,
      invitation_message: p.child('invitation_message').out,
      invite: p.child('invite').out,
      invited_at: p.child('invited_at').out,
      master_account_id: p.child('master_account_id').out,
      relationship_status: p.child('relationship_status').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      updated_at: p.child('updated_at').out,
    },
    macie2_organization_admin_account(name, block): {
      local p = path(['aws_macie2_organization_admin_account', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_macie2_organization_admin_account: {
              [name]: std.prune({
                admin_account_id: build.template(block.admin_account_id),
              }),
            },
          },
        },
      },
      admin_account_id: p.child('admin_account_id').out,
      id: p.child('id').out,
    },
    main_route_table_association(name, block): {
      local p = path(['aws_main_route_table_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_main_route_table_association: {
              [name]: std.prune({
                route_table_id: build.template(block.route_table_id),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      original_route_table_id: p.child('original_route_table_id').out,
      route_table_id: p.child('route_table_id').out,
      vpc_id: p.child('vpc_id').out,
    },
    media_convert_queue(name, block): {
      local p = path(['aws_media_convert_queue', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_media_convert_queue: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                pricing_plan: build.template(std.get(block, 'pricing_plan', null, true)),
                status: build.template(std.get(block, 'status', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      pricing_plan: p.child('pricing_plan').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    media_package_channel(name, block): {
      local p = path(['aws_media_package_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_media_package_channel: {
              [name]: std.prune({
                channel_id: build.template(block.channel_id),
                description: build.template(std.get(block, 'description', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      channel_id: p.child('channel_id').out,
      description: p.child('description').out,
      hls_ingest: p.child('hls_ingest').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    media_store_container(name, block): {
      local p = path(['aws_media_store_container', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_media_store_container: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    media_store_container_policy(name, block): {
      local p = path(['aws_media_store_container_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_media_store_container_policy: {
              [name]: std.prune({
                container_name: build.template(block.container_name),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      container_name: p.child('container_name').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
    },
    medialive_channel(name, block): {
      local p = path(['aws_medialive_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_medialive_channel: {
              [name]: std.prune({
                channel_class: build.template(block.channel_class),
                name: build.template(block.name),
                role_arn: build.template(std.get(block, 'role_arn', null, true)),
                start_channel: build.template(std.get(block, 'start_channel', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      channel_class: p.child('channel_class').out,
      channel_id: p.child('channel_id').out,
      id: p.child('id').out,
      log_level: p.child('log_level').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      start_channel: p.child('start_channel').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    medialive_input(name, block): {
      local p = path(['aws_medialive_input', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_medialive_input: {
              [name]: std.prune({
                input_security_groups: build.template(std.get(block, 'input_security_groups', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attached_channels: p.child('attached_channels').out,
      id: p.child('id').out,
      input_class: p.child('input_class').out,
      input_partner_ids: p.child('input_partner_ids').out,
      input_security_groups: p.child('input_security_groups').out,
      input_source_type: p.child('input_source_type').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    medialive_input_security_group(name, block): {
      local p = path(['aws_medialive_input_security_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_medialive_input_security_group: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      inputs: p.child('inputs').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    medialive_multiplex(name, block): {
      local p = path(['aws_medialive_multiplex', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_medialive_multiplex: {
              [name]: std.prune({
                availability_zones: build.template(block.availability_zones),
                name: build.template(block.name),
                start_multiplex: build.template(std.get(block, 'start_multiplex', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zones: p.child('availability_zones').out,
      id: p.child('id').out,
      name: p.child('name').out,
      start_multiplex: p.child('start_multiplex').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    medialive_multiplex_program(name, block): {
      local p = path(['aws_medialive_multiplex_program', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_medialive_multiplex_program: {
              [name]: std.prune({
                multiplex_id: build.template(block.multiplex_id),
                program_name: build.template(block.program_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      multiplex_id: p.child('multiplex_id').out,
      program_name: p.child('program_name').out,
    },
    memorydb_acl(name, block): {
      local p = path(['aws_memorydb_acl', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_memorydb_acl: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
                user_names: build.template(std.get(block, 'user_names', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      minimum_engine_version: p.child('minimum_engine_version').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_names: p.child('user_names').out,
    },
    memorydb_cluster(name, block): {
      local p = path(['aws_memorydb_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_memorydb_cluster: {
              [name]: std.prune({
                acl_name: build.template(block.acl_name),
                auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null, true)),
                data_tiering: build.template(std.get(block, 'data_tiering', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                final_snapshot_name: build.template(std.get(block, 'final_snapshot_name', null, true)),
                kms_key_arn: build.template(std.get(block, 'kms_key_arn', null, true)),
                node_type: build.template(block.node_type),
                num_replicas_per_shard: build.template(std.get(block, 'num_replicas_per_shard', null, true)),
                num_shards: build.template(std.get(block, 'num_shards', null, true)),
                security_group_ids: build.template(std.get(block, 'security_group_ids', null, true)),
                snapshot_arns: build.template(std.get(block, 'snapshot_arns', null, true)),
                snapshot_name: build.template(std.get(block, 'snapshot_name', null, true)),
                sns_topic_arn: build.template(std.get(block, 'sns_topic_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tls_enabled: build.template(std.get(block, 'tls_enabled', null, true)),
              }),
            },
          },
        },
      },
      acl_name: p.child('acl_name').out,
      arn: p.child('arn').out,
      auto_minor_version_upgrade: p.child('auto_minor_version_upgrade').out,
      cluster_endpoint: p.child('cluster_endpoint').out,
      data_tiering: p.child('data_tiering').out,
      description: p.child('description').out,
      engine_patch_version: p.child('engine_patch_version').out,
      engine_version: p.child('engine_version').out,
      final_snapshot_name: p.child('final_snapshot_name').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      maintenance_window: p.child('maintenance_window').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      node_type: p.child('node_type').out,
      num_replicas_per_shard: p.child('num_replicas_per_shard').out,
      num_shards: p.child('num_shards').out,
      parameter_group_name: p.child('parameter_group_name').out,
      port: p.child('port').out,
      security_group_ids: p.child('security_group_ids').out,
      shards: p.child('shards').out,
      snapshot_arns: p.child('snapshot_arns').out,
      snapshot_name: p.child('snapshot_name').out,
      snapshot_retention_limit: p.child('snapshot_retention_limit').out,
      snapshot_window: p.child('snapshot_window').out,
      sns_topic_arn: p.child('sns_topic_arn').out,
      subnet_group_name: p.child('subnet_group_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tls_enabled: p.child('tls_enabled').out,
    },
    memorydb_parameter_group(name, block): {
      local p = path(['aws_memorydb_parameter_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_memorydb_parameter_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                family: build.template(block.family),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      family: p.child('family').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    memorydb_snapshot(name, block): {
      local p = path(['aws_memorydb_snapshot', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_memorydb_snapshot: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                kms_key_arn: build.template(std.get(block, 'kms_key_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster_configuration: p.child('cluster_configuration').out,
      cluster_name: p.child('cluster_name').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      source: p.child('source').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    memorydb_subnet_group(name, block): {
      local p = path(['aws_memorydb_subnet_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_memorydb_subnet_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    memorydb_user(name, block): {
      local p = path(['aws_memorydb_user', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_memorydb_user: {
              [name]: std.prune({
                access_string: build.template(block.access_string),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_name: build.template(block.user_name),
              }),
            },
          },
        },
      },
      access_string: p.child('access_string').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      minimum_engine_version: p.child('minimum_engine_version').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_name: p.child('user_name').out,
    },
    mq_broker(name, block): {
      local p = path(['aws_mq_broker', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_mq_broker: {
              [name]: std.prune({
                apply_immediately: build.template(std.get(block, 'apply_immediately', null, true)),
                auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null, true)),
                broker_name: build.template(block.broker_name),
                data_replication_primary_broker_arn: build.template(std.get(block, 'data_replication_primary_broker_arn', null, true)),
                deployment_mode: build.template(std.get(block, 'deployment_mode', null, true)),
                engine_type: build.template(block.engine_type),
                engine_version: build.template(block.engine_version),
                host_instance_type: build.template(block.host_instance_type),
                publicly_accessible: build.template(std.get(block, 'publicly_accessible', null, true)),
                security_groups: build.template(std.get(block, 'security_groups', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      apply_immediately: p.child('apply_immediately').out,
      arn: p.child('arn').out,
      authentication_strategy: p.child('authentication_strategy').out,
      auto_minor_version_upgrade: p.child('auto_minor_version_upgrade').out,
      broker_name: p.child('broker_name').out,
      data_replication_mode: p.child('data_replication_mode').out,
      data_replication_primary_broker_arn: p.child('data_replication_primary_broker_arn').out,
      deployment_mode: p.child('deployment_mode').out,
      engine_type: p.child('engine_type').out,
      engine_version: p.child('engine_version').out,
      host_instance_type: p.child('host_instance_type').out,
      id: p.child('id').out,
      instances: p.child('instances').out,
      pending_data_replication_mode: p.child('pending_data_replication_mode').out,
      publicly_accessible: p.child('publicly_accessible').out,
      security_groups: p.child('security_groups').out,
      storage_type: p.child('storage_type').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    mq_configuration(name, block): {
      local p = path(['aws_mq_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_mq_configuration: {
              [name]: std.prune({
                data: build.template(block.data),
                description: build.template(std.get(block, 'description', null, true)),
                engine_type: build.template(block.engine_type),
                engine_version: build.template(block.engine_version),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      authentication_strategy: p.child('authentication_strategy').out,
      data: p.child('data').out,
      description: p.child('description').out,
      engine_type: p.child('engine_type').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      latest_revision: p.child('latest_revision').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    msk_cluster(name, block): {
      local p = path(['aws_msk_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_msk_cluster: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                enhanced_monitoring: build.template(std.get(block, 'enhanced_monitoring', null, true)),
                kafka_version: build.template(block.kafka_version),
                number_of_broker_nodes: build.template(block.number_of_broker_nodes),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bootstrap_brokers: p.child('bootstrap_brokers').out,
      bootstrap_brokers_public_sasl_iam: p.child('bootstrap_brokers_public_sasl_iam').out,
      bootstrap_brokers_public_sasl_scram: p.child('bootstrap_brokers_public_sasl_scram').out,
      bootstrap_brokers_public_tls: p.child('bootstrap_brokers_public_tls').out,
      bootstrap_brokers_sasl_iam: p.child('bootstrap_brokers_sasl_iam').out,
      bootstrap_brokers_sasl_scram: p.child('bootstrap_brokers_sasl_scram').out,
      bootstrap_brokers_tls: p.child('bootstrap_brokers_tls').out,
      bootstrap_brokers_vpc_connectivity_sasl_iam: p.child('bootstrap_brokers_vpc_connectivity_sasl_iam').out,
      bootstrap_brokers_vpc_connectivity_sasl_scram: p.child('bootstrap_brokers_vpc_connectivity_sasl_scram').out,
      bootstrap_brokers_vpc_connectivity_tls: p.child('bootstrap_brokers_vpc_connectivity_tls').out,
      cluster_name: p.child('cluster_name').out,
      cluster_uuid: p.child('cluster_uuid').out,
      current_version: p.child('current_version').out,
      enhanced_monitoring: p.child('enhanced_monitoring').out,
      id: p.child('id').out,
      kafka_version: p.child('kafka_version').out,
      number_of_broker_nodes: p.child('number_of_broker_nodes').out,
      storage_mode: p.child('storage_mode').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      zookeeper_connect_string: p.child('zookeeper_connect_string').out,
      zookeeper_connect_string_tls: p.child('zookeeper_connect_string_tls').out,
    },
    msk_cluster_policy(name, block): {
      local p = path(['aws_msk_cluster_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_msk_cluster_policy: {
              [name]: std.prune({
                cluster_arn: build.template(block.cluster_arn),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      cluster_arn: p.child('cluster_arn').out,
      current_version: p.child('current_version').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
    },
    msk_configuration(name, block): {
      local p = path(['aws_msk_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_msk_configuration: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                kafka_versions: build.template(std.get(block, 'kafka_versions', null, true)),
                name: build.template(block.name),
                server_properties: build.template(block.server_properties),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kafka_versions: p.child('kafka_versions').out,
      latest_revision: p.child('latest_revision').out,
      name: p.child('name').out,
      server_properties: p.child('server_properties').out,
    },
    msk_replicator(name, block): {
      local p = path(['aws_msk_replicator', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_msk_replicator: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                replicator_name: build.template(block.replicator_name),
                service_execution_role_arn: build.template(block.service_execution_role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      current_version: p.child('current_version').out,
      description: p.child('description').out,
      id: p.child('id').out,
      replicator_name: p.child('replicator_name').out,
      service_execution_role_arn: p.child('service_execution_role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    msk_scram_secret_association(name, block): {
      local p = path(['aws_msk_scram_secret_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_msk_scram_secret_association: {
              [name]: std.prune({
                cluster_arn: build.template(block.cluster_arn),
                secret_arn_list: build.template(block.secret_arn_list),
              }),
            },
          },
        },
      },
      cluster_arn: p.child('cluster_arn').out,
      id: p.child('id').out,
      secret_arn_list: p.child('secret_arn_list').out,
    },
    msk_serverless_cluster(name, block): {
      local p = path(['aws_msk_serverless_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_msk_serverless_cluster: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster_name: p.child('cluster_name').out,
      cluster_uuid: p.child('cluster_uuid').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    msk_vpc_connection(name, block): {
      local p = path(['aws_msk_vpc_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_msk_vpc_connection: {
              [name]: std.prune({
                authentication: build.template(block.authentication),
                client_subnets: build.template(block.client_subnets),
                security_groups: build.template(block.security_groups),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_cluster_arn: build.template(block.target_cluster_arn),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      authentication: p.child('authentication').out,
      client_subnets: p.child('client_subnets').out,
      id: p.child('id').out,
      security_groups: p.child('security_groups').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_cluster_arn: p.child('target_cluster_arn').out,
      vpc_id: p.child('vpc_id').out,
    },
    mskconnect_connector(name, block): {
      local p = path(['aws_mskconnect_connector', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_mskconnect_connector: {
              [name]: std.prune({
                connector_configuration: build.template(block.connector_configuration),
                description: build.template(std.get(block, 'description', null, true)),
                kafkaconnect_version: build.template(block.kafkaconnect_version),
                name: build.template(block.name),
                service_execution_role_arn: build.template(block.service_execution_role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      connector_configuration: p.child('connector_configuration').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kafkaconnect_version: p.child('kafkaconnect_version').out,
      name: p.child('name').out,
      service_execution_role_arn: p.child('service_execution_role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
    },
    mskconnect_custom_plugin(name, block): {
      local p = path(['aws_mskconnect_custom_plugin', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_mskconnect_custom_plugin: {
              [name]: std.prune({
                content_type: build.template(block.content_type),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      content_type: p.child('content_type').out,
      description: p.child('description').out,
      id: p.child('id').out,
      latest_revision: p.child('latest_revision').out,
      name: p.child('name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    mskconnect_worker_configuration(name, block): {
      local p = path(['aws_mskconnect_worker_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_mskconnect_worker_configuration: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                properties_file_content: build.template(block.properties_file_content),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      latest_revision: p.child('latest_revision').out,
      name: p.child('name').out,
      properties_file_content: p.child('properties_file_content').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    mwaa_environment(name, block): {
      local p = path(['aws_mwaa_environment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_mwaa_environment: {
              [name]: std.prune({
                airflow_configuration_options: build.template(std.get(block, 'airflow_configuration_options', null, true)),
                dag_s3_path: build.template(block.dag_s3_path),
                execution_role_arn: build.template(block.execution_role_arn),
                kms_key: build.template(std.get(block, 'kms_key', null, true)),
                name: build.template(block.name),
                plugins_s3_path: build.template(std.get(block, 'plugins_s3_path', null, true)),
                requirements_s3_path: build.template(std.get(block, 'requirements_s3_path', null, true)),
                source_bucket_arn: build.template(block.source_bucket_arn),
                startup_script_s3_path: build.template(std.get(block, 'startup_script_s3_path', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      airflow_configuration_options: p.child('airflow_configuration_options').out,
      airflow_version: p.child('airflow_version').out,
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      dag_s3_path: p.child('dag_s3_path').out,
      database_vpc_endpoint_service: p.child('database_vpc_endpoint_service').out,
      endpoint_management: p.child('endpoint_management').out,
      environment_class: p.child('environment_class').out,
      execution_role_arn: p.child('execution_role_arn').out,
      id: p.child('id').out,
      kms_key: p.child('kms_key').out,
      last_updated: p.child('last_updated').out,
      max_webservers: p.child('max_webservers').out,
      max_workers: p.child('max_workers').out,
      min_webservers: p.child('min_webservers').out,
      min_workers: p.child('min_workers').out,
      name: p.child('name').out,
      plugins_s3_object_version: p.child('plugins_s3_object_version').out,
      plugins_s3_path: p.child('plugins_s3_path').out,
      requirements_s3_object_version: p.child('requirements_s3_object_version').out,
      requirements_s3_path: p.child('requirements_s3_path').out,
      schedulers: p.child('schedulers').out,
      service_role_arn: p.child('service_role_arn').out,
      source_bucket_arn: p.child('source_bucket_arn').out,
      startup_script_s3_object_version: p.child('startup_script_s3_object_version').out,
      startup_script_s3_path: p.child('startup_script_s3_path').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      webserver_access_mode: p.child('webserver_access_mode').out,
      webserver_url: p.child('webserver_url').out,
      webserver_vpc_endpoint_service: p.child('webserver_vpc_endpoint_service').out,
      weekly_maintenance_window_start: p.child('weekly_maintenance_window_start').out,
    },
    nat_gateway(name, block): {
      local p = path(['aws_nat_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_nat_gateway: {
              [name]: std.prune({
                allocation_id: build.template(std.get(block, 'allocation_id', null, true)),
                connectivity_type: build.template(std.get(block, 'connectivity_type', null, true)),
                secondary_allocation_ids: build.template(std.get(block, 'secondary_allocation_ids', null, true)),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allocation_id: p.child('allocation_id').out,
      association_id: p.child('association_id').out,
      connectivity_type: p.child('connectivity_type').out,
      id: p.child('id').out,
      network_interface_id: p.child('network_interface_id').out,
      private_ip: p.child('private_ip').out,
      public_ip: p.child('public_ip').out,
      secondary_allocation_ids: p.child('secondary_allocation_ids').out,
      secondary_private_ip_address_count: p.child('secondary_private_ip_address_count').out,
      secondary_private_ip_addresses: p.child('secondary_private_ip_addresses').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    neptune_cluster(name, block): {
      local p = path(['aws_neptune_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_neptune_cluster: {
              [name]: std.prune({
                backup_retention_period: build.template(std.get(block, 'backup_retention_period', null, true)),
                copy_tags_to_snapshot: build.template(std.get(block, 'copy_tags_to_snapshot', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                enable_cloudwatch_logs_exports: build.template(std.get(block, 'enable_cloudwatch_logs_exports', null, true)),
                engine: build.template(std.get(block, 'engine', null, true)),
                final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null, true)),
                global_cluster_identifier: build.template(std.get(block, 'global_cluster_identifier', null, true)),
                iam_database_authentication_enabled: build.template(std.get(block, 'iam_database_authentication_enabled', null, true)),
                iam_roles: build.template(std.get(block, 'iam_roles', null, true)),
                neptune_instance_parameter_group_name: build.template(std.get(block, 'neptune_instance_parameter_group_name', null, true)),
                port: build.template(std.get(block, 'port', null, true)),
                replication_source_identifier: build.template(std.get(block, 'replication_source_identifier', null, true)),
                skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null, true)),
                snapshot_identifier: build.template(std.get(block, 'snapshot_identifier', null, true)),
                storage_encrypted: build.template(std.get(block, 'storage_encrypted', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allow_major_version_upgrade: p.child('allow_major_version_upgrade').out,
      apply_immediately: p.child('apply_immediately').out,
      arn: p.child('arn').out,
      availability_zones: p.child('availability_zones').out,
      backup_retention_period: p.child('backup_retention_period').out,
      cluster_identifier: p.child('cluster_identifier').out,
      cluster_identifier_prefix: p.child('cluster_identifier_prefix').out,
      cluster_members: p.child('cluster_members').out,
      cluster_resource_id: p.child('cluster_resource_id').out,
      copy_tags_to_snapshot: p.child('copy_tags_to_snapshot').out,
      deletion_protection: p.child('deletion_protection').out,
      enable_cloudwatch_logs_exports: p.child('enable_cloudwatch_logs_exports').out,
      endpoint: p.child('endpoint').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      final_snapshot_identifier: p.child('final_snapshot_identifier').out,
      global_cluster_identifier: p.child('global_cluster_identifier').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      iam_database_authentication_enabled: p.child('iam_database_authentication_enabled').out,
      iam_roles: p.child('iam_roles').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      neptune_cluster_parameter_group_name: p.child('neptune_cluster_parameter_group_name').out,
      neptune_instance_parameter_group_name: p.child('neptune_instance_parameter_group_name').out,
      neptune_subnet_group_name: p.child('neptune_subnet_group_name').out,
      port: p.child('port').out,
      preferred_backup_window: p.child('preferred_backup_window').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      reader_endpoint: p.child('reader_endpoint').out,
      replication_source_identifier: p.child('replication_source_identifier').out,
      skip_final_snapshot: p.child('skip_final_snapshot').out,
      snapshot_identifier: p.child('snapshot_identifier').out,
      storage_encrypted: p.child('storage_encrypted').out,
      storage_type: p.child('storage_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    neptune_cluster_endpoint(name, block): {
      local p = path(['aws_neptune_cluster_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_neptune_cluster_endpoint: {
              [name]: std.prune({
                cluster_endpoint_identifier: build.template(block.cluster_endpoint_identifier),
                cluster_identifier: build.template(block.cluster_identifier),
                endpoint_type: build.template(block.endpoint_type),
                excluded_members: build.template(std.get(block, 'excluded_members', null, true)),
                static_members: build.template(std.get(block, 'static_members', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster_endpoint_identifier: p.child('cluster_endpoint_identifier').out,
      cluster_identifier: p.child('cluster_identifier').out,
      endpoint: p.child('endpoint').out,
      endpoint_type: p.child('endpoint_type').out,
      excluded_members: p.child('excluded_members').out,
      id: p.child('id').out,
      static_members: p.child('static_members').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    neptune_cluster_instance(name, block): {
      local p = path(['aws_neptune_cluster_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_neptune_cluster_instance: {
              [name]: std.prune({
                auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null, true)),
                cluster_identifier: build.template(block.cluster_identifier),
                engine: build.template(std.get(block, 'engine', null, true)),
                instance_class: build.template(block.instance_class),
                port: build.template(std.get(block, 'port', null, true)),
                promotion_tier: build.template(std.get(block, 'promotion_tier', null, true)),
                publicly_accessible: build.template(std.get(block, 'publicly_accessible', null, true)),
                skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      address: p.child('address').out,
      apply_immediately: p.child('apply_immediately').out,
      arn: p.child('arn').out,
      auto_minor_version_upgrade: p.child('auto_minor_version_upgrade').out,
      availability_zone: p.child('availability_zone').out,
      cluster_identifier: p.child('cluster_identifier').out,
      dbi_resource_id: p.child('dbi_resource_id').out,
      endpoint: p.child('endpoint').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      identifier: p.child('identifier').out,
      identifier_prefix: p.child('identifier_prefix').out,
      instance_class: p.child('instance_class').out,
      kms_key_arn: p.child('kms_key_arn').out,
      neptune_parameter_group_name: p.child('neptune_parameter_group_name').out,
      neptune_subnet_group_name: p.child('neptune_subnet_group_name').out,
      port: p.child('port').out,
      preferred_backup_window: p.child('preferred_backup_window').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      promotion_tier: p.child('promotion_tier').out,
      publicly_accessible: p.child('publicly_accessible').out,
      skip_final_snapshot: p.child('skip_final_snapshot').out,
      storage_encrypted: p.child('storage_encrypted').out,
      storage_type: p.child('storage_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      writer: p.child('writer').out,
    },
    neptune_cluster_parameter_group(name, block): {
      local p = path(['aws_neptune_cluster_parameter_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_neptune_cluster_parameter_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                family: build.template(block.family),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      family: p.child('family').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    neptune_cluster_snapshot(name, block): {
      local p = path(['aws_neptune_cluster_snapshot', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_neptune_cluster_snapshot: {
              [name]: std.prune({
                db_cluster_identifier: build.template(block.db_cluster_identifier),
                db_cluster_snapshot_identifier: build.template(block.db_cluster_snapshot_identifier),
              }),
            },
          },
        },
      },
      allocated_storage: p.child('allocated_storage').out,
      availability_zones: p.child('availability_zones').out,
      db_cluster_identifier: p.child('db_cluster_identifier').out,
      db_cluster_snapshot_arn: p.child('db_cluster_snapshot_arn').out,
      db_cluster_snapshot_identifier: p.child('db_cluster_snapshot_identifier').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      license_model: p.child('license_model').out,
      port: p.child('port').out,
      snapshot_type: p.child('snapshot_type').out,
      source_db_cluster_snapshot_arn: p.child('source_db_cluster_snapshot_arn').out,
      status: p.child('status').out,
      storage_encrypted: p.child('storage_encrypted').out,
      vpc_id: p.child('vpc_id').out,
    },
    neptune_event_subscription(name, block): {
      local p = path(['aws_neptune_event_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_neptune_event_subscription: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                event_categories: build.template(std.get(block, 'event_categories', null, true)),
                sns_topic_arn: build.template(block.sns_topic_arn),
                source_ids: build.template(std.get(block, 'source_ids', null, true)),
                source_type: build.template(std.get(block, 'source_type', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      customer_aws_id: p.child('customer_aws_id').out,
      enabled: p.child('enabled').out,
      event_categories: p.child('event_categories').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      sns_topic_arn: p.child('sns_topic_arn').out,
      source_ids: p.child('source_ids').out,
      source_type: p.child('source_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    neptune_global_cluster(name, block): {
      local p = path(['aws_neptune_global_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_neptune_global_cluster: {
              [name]: std.prune({
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                global_cluster_identifier: build.template(block.global_cluster_identifier),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      deletion_protection: p.child('deletion_protection').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      global_cluster_identifier: p.child('global_cluster_identifier').out,
      global_cluster_members: p.child('global_cluster_members').out,
      global_cluster_resource_id: p.child('global_cluster_resource_id').out,
      id: p.child('id').out,
      source_db_cluster_identifier: p.child('source_db_cluster_identifier').out,
      status: p.child('status').out,
      storage_encrypted: p.child('storage_encrypted').out,
    },
    neptune_parameter_group(name, block): {
      local p = path(['aws_neptune_parameter_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_neptune_parameter_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                family: build.template(block.family),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      family: p.child('family').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    neptune_subnet_group(name, block): {
      local p = path(['aws_neptune_subnet_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_neptune_subnet_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    network_acl(name, block): {
      local p = path(['aws_network_acl', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_network_acl: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      egress: p.child('egress').out,
      id: p.child('id').out,
      ingress: p.child('ingress').out,
      owner_id: p.child('owner_id').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    network_acl_association(name, block): {
      local p = path(['aws_network_acl_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_network_acl_association: {
              [name]: std.prune({
                network_acl_id: build.template(block.network_acl_id),
                subnet_id: build.template(block.subnet_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      network_acl_id: p.child('network_acl_id').out,
      subnet_id: p.child('subnet_id').out,
    },
    network_acl_rule(name, block): {
      local p = path(['aws_network_acl_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_network_acl_rule: {
              [name]: std.prune({
                cidr_block: build.template(std.get(block, 'cidr_block', null, true)),
                egress: build.template(std.get(block, 'egress', null, true)),
                from_port: build.template(std.get(block, 'from_port', null, true)),
                icmp_code: build.template(std.get(block, 'icmp_code', null, true)),
                icmp_type: build.template(std.get(block, 'icmp_type', null, true)),
                ipv6_cidr_block: build.template(std.get(block, 'ipv6_cidr_block', null, true)),
                network_acl_id: build.template(block.network_acl_id),
                protocol: build.template(block.protocol),
                rule_action: build.template(block.rule_action),
                rule_number: build.template(block.rule_number),
                to_port: build.template(std.get(block, 'to_port', null, true)),
              }),
            },
          },
        },
      },
      cidr_block: p.child('cidr_block').out,
      egress: p.child('egress').out,
      from_port: p.child('from_port').out,
      icmp_code: p.child('icmp_code').out,
      icmp_type: p.child('icmp_type').out,
      id: p.child('id').out,
      ipv6_cidr_block: p.child('ipv6_cidr_block').out,
      network_acl_id: p.child('network_acl_id').out,
      protocol: p.child('protocol').out,
      rule_action: p.child('rule_action').out,
      rule_number: p.child('rule_number').out,
      to_port: p.child('to_port').out,
    },
    network_interface(name, block): {
      local p = path(['aws_network_interface', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_network_interface: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                ipv6_address_list_enabled: build.template(std.get(block, 'ipv6_address_list_enabled', null, true)),
                private_ip_list_enabled: build.template(std.get(block, 'private_ip_list_enabled', null, true)),
                source_dest_check: build.template(std.get(block, 'source_dest_check', null, true)),
                subnet_id: build.template(block.subnet_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      interface_type: p.child('interface_type').out,
      ipv4_prefix_count: p.child('ipv4_prefix_count').out,
      ipv4_prefixes: p.child('ipv4_prefixes').out,
      ipv6_address_count: p.child('ipv6_address_count').out,
      ipv6_address_list: p.child('ipv6_address_list').out,
      ipv6_address_list_enabled: p.child('ipv6_address_list_enabled').out,
      ipv6_addresses: p.child('ipv6_addresses').out,
      ipv6_prefix_count: p.child('ipv6_prefix_count').out,
      ipv6_prefixes: p.child('ipv6_prefixes').out,
      mac_address: p.child('mac_address').out,
      outpost_arn: p.child('outpost_arn').out,
      owner_id: p.child('owner_id').out,
      private_dns_name: p.child('private_dns_name').out,
      private_ip: p.child('private_ip').out,
      private_ip_list: p.child('private_ip_list').out,
      private_ip_list_enabled: p.child('private_ip_list_enabled').out,
      private_ips: p.child('private_ips').out,
      private_ips_count: p.child('private_ips_count').out,
      security_groups: p.child('security_groups').out,
      source_dest_check: p.child('source_dest_check').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    network_interface_attachment(name, block): {
      local p = path(['aws_network_interface_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_network_interface_attachment: {
              [name]: std.prune({
                device_index: build.template(block.device_index),
                instance_id: build.template(block.instance_id),
                network_interface_id: build.template(block.network_interface_id),
              }),
            },
          },
        },
      },
      attachment_id: p.child('attachment_id').out,
      device_index: p.child('device_index').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      network_interface_id: p.child('network_interface_id').out,
      status: p.child('status').out,
    },
    network_interface_sg_attachment(name, block): {
      local p = path(['aws_network_interface_sg_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_network_interface_sg_attachment: {
              [name]: std.prune({
                network_interface_id: build.template(block.network_interface_id),
                security_group_id: build.template(block.security_group_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      network_interface_id: p.child('network_interface_id').out,
      security_group_id: p.child('security_group_id').out,
    },
    networkfirewall_firewall(name, block): {
      local p = path(['aws_networkfirewall_firewall', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkfirewall_firewall: {
              [name]: std.prune({
                delete_protection: build.template(std.get(block, 'delete_protection', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                firewall_policy_arn: build.template(block.firewall_policy_arn),
                firewall_policy_change_protection: build.template(std.get(block, 'firewall_policy_change_protection', null, true)),
                name: build.template(block.name),
                subnet_change_protection: build.template(std.get(block, 'subnet_change_protection', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      delete_protection: p.child('delete_protection').out,
      description: p.child('description').out,
      firewall_policy_arn: p.child('firewall_policy_arn').out,
      firewall_policy_change_protection: p.child('firewall_policy_change_protection').out,
      firewall_status: p.child('firewall_status').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subnet_change_protection: p.child('subnet_change_protection').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      update_token: p.child('update_token').out,
      vpc_id: p.child('vpc_id').out,
    },
    networkfirewall_firewall_policy(name, block): {
      local p = path(['aws_networkfirewall_firewall_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkfirewall_firewall_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      update_token: p.child('update_token').out,
    },
    networkfirewall_logging_configuration(name, block): {
      local p = path(['aws_networkfirewall_logging_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkfirewall_logging_configuration: {
              [name]: std.prune({
                firewall_arn: build.template(block.firewall_arn),
              }),
            },
          },
        },
      },
      firewall_arn: p.child('firewall_arn').out,
      id: p.child('id').out,
    },
    networkfirewall_resource_policy(name, block): {
      local p = path(['aws_networkfirewall_resource_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkfirewall_resource_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      resource_arn: p.child('resource_arn').out,
    },
    networkfirewall_rule_group(name, block): {
      local p = path(['aws_networkfirewall_rule_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkfirewall_rule_group: {
              [name]: std.prune({
                capacity: build.template(block.capacity),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                rules: build.template(std.get(block, 'rules', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      capacity: p.child('capacity').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      rules: p.child('rules').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      update_token: p.child('update_token').out,
    },
    networkfirewall_tls_inspection_configuration(name, block): {
      local p = path(['aws_networkfirewall_tls_inspection_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkfirewall_tls_inspection_configuration: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      certificate_authority: p.child('certificate_authority').out,
      certificates: p.child('certificates').out,
      description: p.child('description').out,
      encryption_configuration: p.child('encryption_configuration').out,
      id: p.child('id').out,
      name: p.child('name').out,
      number_of_associations: p.child('number_of_associations').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tls_inspection_configuration_id: p.child('tls_inspection_configuration_id').out,
      update_token: p.child('update_token').out,
    },
    networkmanager_attachment_accepter(name, block): {
      local p = path(['aws_networkmanager_attachment_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_attachment_accepter: {
              [name]: std.prune({
                attachment_id: build.template(block.attachment_id),
                attachment_type: build.template(block.attachment_type),
              }),
            },
          },
        },
      },
      attachment_id: p.child('attachment_id').out,
      attachment_policy_rule_number: p.child('attachment_policy_rule_number').out,
      attachment_type: p.child('attachment_type').out,
      core_network_arn: p.child('core_network_arn').out,
      core_network_id: p.child('core_network_id').out,
      edge_location: p.child('edge_location').out,
      id: p.child('id').out,
      owner_account_id: p.child('owner_account_id').out,
      resource_arn: p.child('resource_arn').out,
      segment_name: p.child('segment_name').out,
      state: p.child('state').out,
    },
    networkmanager_connect_attachment(name, block): {
      local p = path(['aws_networkmanager_connect_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_connect_attachment: {
              [name]: std.prune({
                core_network_id: build.template(block.core_network_id),
                edge_location: build.template(block.edge_location),
                tags: build.template(std.get(block, 'tags', null, true)),
                transport_attachment_id: build.template(block.transport_attachment_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attachment_id: p.child('attachment_id').out,
      attachment_policy_rule_number: p.child('attachment_policy_rule_number').out,
      attachment_type: p.child('attachment_type').out,
      core_network_arn: p.child('core_network_arn').out,
      core_network_id: p.child('core_network_id').out,
      edge_location: p.child('edge_location').out,
      id: p.child('id').out,
      owner_account_id: p.child('owner_account_id').out,
      resource_arn: p.child('resource_arn').out,
      segment_name: p.child('segment_name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transport_attachment_id: p.child('transport_attachment_id').out,
    },
    networkmanager_connect_peer(name, block): {
      local p = path(['aws_networkmanager_connect_peer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_connect_peer: {
              [name]: std.prune({
                connect_attachment_id: build.template(block.connect_attachment_id),
                core_network_address: build.template(std.get(block, 'core_network_address', null, true)),
                inside_cidr_blocks: build.template(std.get(block, 'inside_cidr_blocks', null, true)),
                peer_address: build.template(block.peer_address),
                subnet_arn: build.template(std.get(block, 'subnet_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      configuration: p.child('configuration').out,
      connect_attachment_id: p.child('connect_attachment_id').out,
      connect_peer_id: p.child('connect_peer_id').out,
      core_network_address: p.child('core_network_address').out,
      core_network_id: p.child('core_network_id').out,
      created_at: p.child('created_at').out,
      edge_location: p.child('edge_location').out,
      id: p.child('id').out,
      inside_cidr_blocks: p.child('inside_cidr_blocks').out,
      peer_address: p.child('peer_address').out,
      state: p.child('state').out,
      subnet_arn: p.child('subnet_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    networkmanager_connection(name, block): {
      local p = path(['aws_networkmanager_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_connection: {
              [name]: std.prune({
                connected_device_id: build.template(block.connected_device_id),
                connected_link_id: build.template(std.get(block, 'connected_link_id', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                device_id: build.template(block.device_id),
                global_network_id: build.template(block.global_network_id),
                link_id: build.template(std.get(block, 'link_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      connected_device_id: p.child('connected_device_id').out,
      connected_link_id: p.child('connected_link_id').out,
      description: p.child('description').out,
      device_id: p.child('device_id').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      link_id: p.child('link_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    networkmanager_core_network(name, block): {
      local p = path(['aws_networkmanager_core_network', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_core_network: {
              [name]: std.prune({
                base_policy_document: build.template(std.get(block, 'base_policy_document', null, true)),
                base_policy_region: build.template(std.get(block, 'base_policy_region', null, true)),
                base_policy_regions: build.template(std.get(block, 'base_policy_regions', null, true)),
                create_base_policy: build.template(std.get(block, 'create_base_policy', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                global_network_id: build.template(block.global_network_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      base_policy_document: p.child('base_policy_document').out,
      base_policy_region: p.child('base_policy_region').out,
      base_policy_regions: p.child('base_policy_regions').out,
      create_base_policy: p.child('create_base_policy').out,
      created_at: p.child('created_at').out,
      description: p.child('description').out,
      edges: p.child('edges').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      segments: p.child('segments').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    networkmanager_core_network_policy_attachment(name, block): {
      local p = path(['aws_networkmanager_core_network_policy_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_core_network_policy_attachment: {
              [name]: std.prune({
                core_network_id: build.template(block.core_network_id),
                policy_document: build.template(block.policy_document),
              }),
            },
          },
        },
      },
      core_network_id: p.child('core_network_id').out,
      id: p.child('id').out,
      policy_document: p.child('policy_document').out,
      state: p.child('state').out,
    },
    networkmanager_customer_gateway_association(name, block): {
      local p = path(['aws_networkmanager_customer_gateway_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_customer_gateway_association: {
              [name]: std.prune({
                customer_gateway_arn: build.template(block.customer_gateway_arn),
                device_id: build.template(block.device_id),
                global_network_id: build.template(block.global_network_id),
                link_id: build.template(std.get(block, 'link_id', null, true)),
              }),
            },
          },
        },
      },
      customer_gateway_arn: p.child('customer_gateway_arn').out,
      device_id: p.child('device_id').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      link_id: p.child('link_id').out,
    },
    networkmanager_device(name, block): {
      local p = path(['aws_networkmanager_device', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_device: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                global_network_id: build.template(block.global_network_id),
                model: build.template(std.get(block, 'model', null, true)),
                serial_number: build.template(std.get(block, 'serial_number', null, true)),
                site_id: build.template(std.get(block, 'site_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
                vendor: build.template(std.get(block, 'vendor', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      model: p.child('model').out,
      serial_number: p.child('serial_number').out,
      site_id: p.child('site_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      vendor: p.child('vendor').out,
    },
    networkmanager_global_network(name, block): {
      local p = path(['aws_networkmanager_global_network', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_global_network: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    networkmanager_link(name, block): {
      local p = path(['aws_networkmanager_link', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_link: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                global_network_id: build.template(block.global_network_id),
                provider_name: build.template(std.get(block, 'provider_name', null, true)),
                site_id: build.template(block.site_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      provider_name: p.child('provider_name').out,
      site_id: p.child('site_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    networkmanager_link_association(name, block): {
      local p = path(['aws_networkmanager_link_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_link_association: {
              [name]: std.prune({
                device_id: build.template(block.device_id),
                global_network_id: build.template(block.global_network_id),
                link_id: build.template(block.link_id),
              }),
            },
          },
        },
      },
      device_id: p.child('device_id').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      link_id: p.child('link_id').out,
    },
    networkmanager_site(name, block): {
      local p = path(['aws_networkmanager_site', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_site: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                global_network_id: build.template(block.global_network_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    networkmanager_site_to_site_vpn_attachment(name, block): {
      local p = path(['aws_networkmanager_site_to_site_vpn_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_site_to_site_vpn_attachment: {
              [name]: std.prune({
                core_network_id: build.template(block.core_network_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpn_connection_arn: build.template(block.vpn_connection_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attachment_policy_rule_number: p.child('attachment_policy_rule_number').out,
      attachment_type: p.child('attachment_type').out,
      core_network_arn: p.child('core_network_arn').out,
      core_network_id: p.child('core_network_id').out,
      edge_location: p.child('edge_location').out,
      id: p.child('id').out,
      owner_account_id: p.child('owner_account_id').out,
      resource_arn: p.child('resource_arn').out,
      segment_name: p.child('segment_name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpn_connection_arn: p.child('vpn_connection_arn').out,
    },
    networkmanager_transit_gateway_connect_peer_association(name, block): {
      local p = path(['aws_networkmanager_transit_gateway_connect_peer_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_transit_gateway_connect_peer_association: {
              [name]: std.prune({
                device_id: build.template(block.device_id),
                global_network_id: build.template(block.global_network_id),
                link_id: build.template(std.get(block, 'link_id', null, true)),
                transit_gateway_connect_peer_arn: build.template(block.transit_gateway_connect_peer_arn),
              }),
            },
          },
        },
      },
      device_id: p.child('device_id').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      link_id: p.child('link_id').out,
      transit_gateway_connect_peer_arn: p.child('transit_gateway_connect_peer_arn').out,
    },
    networkmanager_transit_gateway_peering(name, block): {
      local p = path(['aws_networkmanager_transit_gateway_peering', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_transit_gateway_peering: {
              [name]: std.prune({
                core_network_id: build.template(block.core_network_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                transit_gateway_arn: build.template(block.transit_gateway_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      core_network_arn: p.child('core_network_arn').out,
      core_network_id: p.child('core_network_id').out,
      edge_location: p.child('edge_location').out,
      id: p.child('id').out,
      owner_account_id: p.child('owner_account_id').out,
      peering_type: p.child('peering_type').out,
      resource_arn: p.child('resource_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_gateway_arn: p.child('transit_gateway_arn').out,
      transit_gateway_peering_attachment_id: p.child('transit_gateway_peering_attachment_id').out,
    },
    networkmanager_transit_gateway_registration(name, block): {
      local p = path(['aws_networkmanager_transit_gateway_registration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_transit_gateway_registration: {
              [name]: std.prune({
                global_network_id: build.template(block.global_network_id),
                transit_gateway_arn: build.template(block.transit_gateway_arn),
              }),
            },
          },
        },
      },
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      transit_gateway_arn: p.child('transit_gateway_arn').out,
    },
    networkmanager_transit_gateway_route_table_attachment(name, block): {
      local p = path(['aws_networkmanager_transit_gateway_route_table_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_transit_gateway_route_table_attachment: {
              [name]: std.prune({
                peering_id: build.template(block.peering_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                transit_gateway_route_table_arn: build.template(block.transit_gateway_route_table_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attachment_policy_rule_number: p.child('attachment_policy_rule_number').out,
      attachment_type: p.child('attachment_type').out,
      core_network_arn: p.child('core_network_arn').out,
      core_network_id: p.child('core_network_id').out,
      edge_location: p.child('edge_location').out,
      id: p.child('id').out,
      owner_account_id: p.child('owner_account_id').out,
      peering_id: p.child('peering_id').out,
      resource_arn: p.child('resource_arn').out,
      segment_name: p.child('segment_name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_gateway_route_table_arn: p.child('transit_gateway_route_table_arn').out,
    },
    networkmanager_vpc_attachment(name, block): {
      local p = path(['aws_networkmanager_vpc_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmanager_vpc_attachment: {
              [name]: std.prune({
                core_network_id: build.template(block.core_network_id),
                subnet_arns: build.template(block.subnet_arns),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_arn: build.template(block.vpc_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attachment_policy_rule_number: p.child('attachment_policy_rule_number').out,
      attachment_type: p.child('attachment_type').out,
      core_network_arn: p.child('core_network_arn').out,
      core_network_id: p.child('core_network_id').out,
      edge_location: p.child('edge_location').out,
      id: p.child('id').out,
      owner_account_id: p.child('owner_account_id').out,
      resource_arn: p.child('resource_arn').out,
      segment_name: p.child('segment_name').out,
      state: p.child('state').out,
      subnet_arns: p.child('subnet_arns').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_arn: p.child('vpc_arn').out,
    },
    networkmonitor_monitor(name, block): {
      local p = path(['aws_networkmonitor_monitor', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmonitor_monitor: {
              [name]: std.prune({
                monitor_name: build.template(block.monitor_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      aggregation_period: p.child('aggregation_period').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      monitor_name: p.child('monitor_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    networkmonitor_probe(name, block): {
      local p = path(['aws_networkmonitor_probe', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_networkmonitor_probe: {
              [name]: std.prune({
                destination: build.template(block.destination),
                destination_port: build.template(std.get(block, 'destination_port', null, true)),
                monitor_name: build.template(block.monitor_name),
                protocol: build.template(block.protocol),
                source_arn: build.template(block.source_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      address_family: p.child('address_family').out,
      arn: p.child('arn').out,
      destination: p.child('destination').out,
      destination_port: p.child('destination_port').out,
      id: p.child('id').out,
      monitor_name: p.child('monitor_name').out,
      packet_size: p.child('packet_size').out,
      probe_id: p.child('probe_id').out,
      protocol: p.child('protocol').out,
      source_arn: p.child('source_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    oam_link(name, block): {
      local p = path(['aws_oam_link', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_oam_link: {
              [name]: std.prune({
                label_template: build.template(block.label_template),
                resource_types: build.template(block.resource_types),
                sink_identifier: build.template(block.sink_identifier),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      label: p.child('label').out,
      label_template: p.child('label_template').out,
      link_id: p.child('link_id').out,
      resource_types: p.child('resource_types').out,
      sink_arn: p.child('sink_arn').out,
      sink_identifier: p.child('sink_identifier').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    oam_sink(name, block): {
      local p = path(['aws_oam_sink', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_oam_sink: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      sink_id: p.child('sink_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    oam_sink_policy(name, block): {
      local p = path(['aws_oam_sink_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_oam_sink_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                sink_identifier: build.template(block.sink_identifier),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
      sink_id: p.child('sink_id').out,
      sink_identifier: p.child('sink_identifier').out,
    },
    opensearch_authorize_vpc_endpoint_access(name, block): {
      local p = path(['aws_opensearch_authorize_vpc_endpoint_access', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearch_authorize_vpc_endpoint_access: {
              [name]: std.prune({
                account: build.template(block.account),
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      account: p.child('account').out,
      authorized_principal: p.child('authorized_principal').out,
      domain_name: p.child('domain_name').out,
    },
    opensearch_domain(name, block): {
      local p = path(['aws_opensearch_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearch_domain: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_policies: p.child('access_policies').out,
      advanced_options: p.child('advanced_options').out,
      arn: p.child('arn').out,
      dashboard_endpoint: p.child('dashboard_endpoint').out,
      dashboard_endpoint_v2: p.child('dashboard_endpoint_v2').out,
      domain_endpoint_v2_hosted_zone_id: p.child('domain_endpoint_v2_hosted_zone_id').out,
      domain_id: p.child('domain_id').out,
      domain_name: p.child('domain_name').out,
      endpoint: p.child('endpoint').out,
      endpoint_v2: p.child('endpoint_v2').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      ip_address_type: p.child('ip_address_type').out,
      kibana_endpoint: p.child('kibana_endpoint').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    opensearch_domain_policy(name, block): {
      local p = path(['aws_opensearch_domain_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearch_domain_policy: {
              [name]: std.prune({
                access_policies: build.template(block.access_policies),
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      access_policies: p.child('access_policies').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
    },
    opensearch_domain_saml_options(name, block): {
      local p = path(['aws_opensearch_domain_saml_options', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearch_domain_saml_options: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
    },
    opensearch_inbound_connection_accepter(name, block): {
      local p = path(['aws_opensearch_inbound_connection_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearch_inbound_connection_accepter: {
              [name]: std.prune({
                connection_id: build.template(block.connection_id),
              }),
            },
          },
        },
      },
      connection_id: p.child('connection_id').out,
      connection_status: p.child('connection_status').out,
      id: p.child('id').out,
    },
    opensearch_outbound_connection(name, block): {
      local p = path(['aws_opensearch_outbound_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearch_outbound_connection: {
              [name]: std.prune({
                accept_connection: build.template(std.get(block, 'accept_connection', null, true)),
                connection_alias: build.template(block.connection_alias),
              }),
            },
          },
        },
      },
      accept_connection: p.child('accept_connection').out,
      connection_alias: p.child('connection_alias').out,
      connection_mode: p.child('connection_mode').out,
      connection_status: p.child('connection_status').out,
      id: p.child('id').out,
    },
    opensearch_package(name, block): {
      local p = path(['aws_opensearch_package', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearch_package: {
              [name]: std.prune({
                package_description: build.template(std.get(block, 'package_description', null, true)),
                package_name: build.template(block.package_name),
                package_type: build.template(block.package_type),
              }),
            },
          },
        },
      },
      available_package_version: p.child('available_package_version').out,
      id: p.child('id').out,
      package_description: p.child('package_description').out,
      package_id: p.child('package_id').out,
      package_name: p.child('package_name').out,
      package_type: p.child('package_type').out,
    },
    opensearch_package_association(name, block): {
      local p = path(['aws_opensearch_package_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearch_package_association: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                package_id: build.template(block.package_id),
              }),
            },
          },
        },
      },
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      package_id: p.child('package_id').out,
      reference_path: p.child('reference_path').out,
    },
    opensearch_vpc_endpoint(name, block): {
      local p = path(['aws_opensearch_vpc_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearch_vpc_endpoint: {
              [name]: std.prune({
                domain_arn: build.template(block.domain_arn),
              }),
            },
          },
        },
      },
      domain_arn: p.child('domain_arn').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
    },
    opensearchserverless_access_policy(name, block): {
      local p = path(['aws_opensearchserverless_access_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearchserverless_access_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                policy: build.template(block.policy),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      policy: p.child('policy').out,
      policy_version: p.child('policy_version').out,
      type: p.child('type').out,
    },
    opensearchserverless_collection(name, block): {
      local p = path(['aws_opensearchserverless_collection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearchserverless_collection: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      collection_endpoint: p.child('collection_endpoint').out,
      dashboard_endpoint: p.child('dashboard_endpoint').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      name: p.child('name').out,
      standby_replicas: p.child('standby_replicas').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    opensearchserverless_lifecycle_policy(name, block): {
      local p = path(['aws_opensearchserverless_lifecycle_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearchserverless_lifecycle_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                policy: build.template(block.policy),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      policy: p.child('policy').out,
      policy_version: p.child('policy_version').out,
      type: p.child('type').out,
    },
    opensearchserverless_security_config(name, block): {
      local p = path(['aws_opensearchserverless_security_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearchserverless_security_config: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      config_version: p.child('config_version').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      type: p.child('type').out,
    },
    opensearchserverless_security_policy(name, block): {
      local p = path(['aws_opensearchserverless_security_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearchserverless_security_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                policy: build.template(block.policy),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      policy: p.child('policy').out,
      policy_version: p.child('policy_version').out,
      type: p.child('type').out,
    },
    opensearchserverless_vpc_endpoint(name, block): {
      local p = path(['aws_opensearchserverless_vpc_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opensearchserverless_vpc_endpoint: {
              [name]: std.prune({
                name: build.template(block.name),
                subnet_ids: build.template(block.subnet_ids),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      security_group_ids: p.child('security_group_ids').out,
      subnet_ids: p.child('subnet_ids').out,
      vpc_id: p.child('vpc_id').out,
    },
    opsworks_application(name, block): {
      local p = path(['aws_opsworks_application', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_application: {
              [name]: std.prune({
                auto_bundle_on_deploy: build.template(std.get(block, 'auto_bundle_on_deploy', null, true)),
                aws_flow_ruby_settings: build.template(std.get(block, 'aws_flow_ruby_settings', null, true)),
                data_source_arn: build.template(std.get(block, 'data_source_arn', null, true)),
                data_source_database_name: build.template(std.get(block, 'data_source_database_name', null, true)),
                data_source_type: build.template(std.get(block, 'data_source_type', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                document_root: build.template(std.get(block, 'document_root', null, true)),
                domains: build.template(std.get(block, 'domains', null, true)),
                enable_ssl: build.template(std.get(block, 'enable_ssl', null, true)),
                name: build.template(block.name),
                rails_env: build.template(std.get(block, 'rails_env', null, true)),
                stack_id: build.template(block.stack_id),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      auto_bundle_on_deploy: p.child('auto_bundle_on_deploy').out,
      aws_flow_ruby_settings: p.child('aws_flow_ruby_settings').out,
      data_source_arn: p.child('data_source_arn').out,
      data_source_database_name: p.child('data_source_database_name').out,
      data_source_type: p.child('data_source_type').out,
      description: p.child('description').out,
      document_root: p.child('document_root').out,
      domains: p.child('domains').out,
      enable_ssl: p.child('enable_ssl').out,
      id: p.child('id').out,
      name: p.child('name').out,
      rails_env: p.child('rails_env').out,
      short_name: p.child('short_name').out,
      stack_id: p.child('stack_id').out,
      type: p.child('type').out,
    },
    opsworks_custom_layer(name, block): {
      local p = path(['aws_opsworks_custom_layer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_custom_layer: {
              [name]: std.prune({
                auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null, true)),
                auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null, true)),
                auto_healing: build.template(std.get(block, 'auto_healing', null, true)),
                custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null, true)),
                custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null, true)),
                custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null, true)),
                custom_json: build.template(std.get(block, 'custom_json', null, true)),
                custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null, true)),
                custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null, true)),
                custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null, true)),
                custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null, true)),
                drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null, true)),
                elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null, true)),
                install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null, true)),
                instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null, true)),
                name: build.template(block.name),
                short_name: build.template(block.short_name),
                stack_id: build.template(block.stack_id),
                system_packages: build.template(std.get(block, 'system_packages', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_assign_elastic_ips: p.child('auto_assign_elastic_ips').out,
      auto_assign_public_ips: p.child('auto_assign_public_ips').out,
      auto_healing: p.child('auto_healing').out,
      custom_configure_recipes: p.child('custom_configure_recipes').out,
      custom_deploy_recipes: p.child('custom_deploy_recipes').out,
      custom_instance_profile_arn: p.child('custom_instance_profile_arn').out,
      custom_json: p.child('custom_json').out,
      custom_security_group_ids: p.child('custom_security_group_ids').out,
      custom_setup_recipes: p.child('custom_setup_recipes').out,
      custom_shutdown_recipes: p.child('custom_shutdown_recipes').out,
      custom_undeploy_recipes: p.child('custom_undeploy_recipes').out,
      drain_elb_on_shutdown: p.child('drain_elb_on_shutdown').out,
      elastic_load_balancer: p.child('elastic_load_balancer').out,
      id: p.child('id').out,
      install_updates_on_boot: p.child('install_updates_on_boot').out,
      instance_shutdown_timeout: p.child('instance_shutdown_timeout').out,
      name: p.child('name').out,
      short_name: p.child('short_name').out,
      stack_id: p.child('stack_id').out,
      system_packages: p.child('system_packages').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      use_ebs_optimized_instances: p.child('use_ebs_optimized_instances').out,
    },
    opsworks_ecs_cluster_layer(name, block): {
      local p = path(['aws_opsworks_ecs_cluster_layer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_ecs_cluster_layer: {
              [name]: std.prune({
                auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null, true)),
                auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null, true)),
                auto_healing: build.template(std.get(block, 'auto_healing', null, true)),
                custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null, true)),
                custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null, true)),
                custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null, true)),
                custom_json: build.template(std.get(block, 'custom_json', null, true)),
                custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null, true)),
                custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null, true)),
                custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null, true)),
                custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null, true)),
                drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null, true)),
                ecs_cluster_arn: build.template(block.ecs_cluster_arn),
                elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null, true)),
                install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null, true)),
                instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                stack_id: build.template(block.stack_id),
                system_packages: build.template(std.get(block, 'system_packages', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_assign_elastic_ips: p.child('auto_assign_elastic_ips').out,
      auto_assign_public_ips: p.child('auto_assign_public_ips').out,
      auto_healing: p.child('auto_healing').out,
      custom_configure_recipes: p.child('custom_configure_recipes').out,
      custom_deploy_recipes: p.child('custom_deploy_recipes').out,
      custom_instance_profile_arn: p.child('custom_instance_profile_arn').out,
      custom_json: p.child('custom_json').out,
      custom_security_group_ids: p.child('custom_security_group_ids').out,
      custom_setup_recipes: p.child('custom_setup_recipes').out,
      custom_shutdown_recipes: p.child('custom_shutdown_recipes').out,
      custom_undeploy_recipes: p.child('custom_undeploy_recipes').out,
      drain_elb_on_shutdown: p.child('drain_elb_on_shutdown').out,
      ecs_cluster_arn: p.child('ecs_cluster_arn').out,
      elastic_load_balancer: p.child('elastic_load_balancer').out,
      id: p.child('id').out,
      install_updates_on_boot: p.child('install_updates_on_boot').out,
      instance_shutdown_timeout: p.child('instance_shutdown_timeout').out,
      name: p.child('name').out,
      stack_id: p.child('stack_id').out,
      system_packages: p.child('system_packages').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      use_ebs_optimized_instances: p.child('use_ebs_optimized_instances').out,
    },
    opsworks_ganglia_layer(name, block): {
      local p = path(['aws_opsworks_ganglia_layer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_ganglia_layer: {
              [name]: std.prune({
                auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null, true)),
                auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null, true)),
                auto_healing: build.template(std.get(block, 'auto_healing', null, true)),
                custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null, true)),
                custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null, true)),
                custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null, true)),
                custom_json: build.template(std.get(block, 'custom_json', null, true)),
                custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null, true)),
                custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null, true)),
                custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null, true)),
                custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null, true)),
                drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null, true)),
                elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null, true)),
                install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null, true)),
                instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                password: build.template(block.password),
                stack_id: build.template(block.stack_id),
                system_packages: build.template(std.get(block, 'system_packages', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                url: build.template(std.get(block, 'url', null, true)),
                use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null, true)),
                username: build.template(std.get(block, 'username', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_assign_elastic_ips: p.child('auto_assign_elastic_ips').out,
      auto_assign_public_ips: p.child('auto_assign_public_ips').out,
      auto_healing: p.child('auto_healing').out,
      custom_configure_recipes: p.child('custom_configure_recipes').out,
      custom_deploy_recipes: p.child('custom_deploy_recipes').out,
      custom_instance_profile_arn: p.child('custom_instance_profile_arn').out,
      custom_json: p.child('custom_json').out,
      custom_security_group_ids: p.child('custom_security_group_ids').out,
      custom_setup_recipes: p.child('custom_setup_recipes').out,
      custom_shutdown_recipes: p.child('custom_shutdown_recipes').out,
      custom_undeploy_recipes: p.child('custom_undeploy_recipes').out,
      drain_elb_on_shutdown: p.child('drain_elb_on_shutdown').out,
      elastic_load_balancer: p.child('elastic_load_balancer').out,
      id: p.child('id').out,
      install_updates_on_boot: p.child('install_updates_on_boot').out,
      instance_shutdown_timeout: p.child('instance_shutdown_timeout').out,
      name: p.child('name').out,
      password: p.child('password').out,
      stack_id: p.child('stack_id').out,
      system_packages: p.child('system_packages').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      url: p.child('url').out,
      use_ebs_optimized_instances: p.child('use_ebs_optimized_instances').out,
      username: p.child('username').out,
    },
    opsworks_haproxy_layer(name, block): {
      local p = path(['aws_opsworks_haproxy_layer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_haproxy_layer: {
              [name]: std.prune({
                auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null, true)),
                auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null, true)),
                auto_healing: build.template(std.get(block, 'auto_healing', null, true)),
                custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null, true)),
                custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null, true)),
                custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null, true)),
                custom_json: build.template(std.get(block, 'custom_json', null, true)),
                custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null, true)),
                custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null, true)),
                custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null, true)),
                custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null, true)),
                drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null, true)),
                elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null, true)),
                healthcheck_method: build.template(std.get(block, 'healthcheck_method', null, true)),
                healthcheck_url: build.template(std.get(block, 'healthcheck_url', null, true)),
                install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null, true)),
                instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                stack_id: build.template(block.stack_id),
                stats_enabled: build.template(std.get(block, 'stats_enabled', null, true)),
                stats_password: build.template(block.stats_password),
                stats_url: build.template(std.get(block, 'stats_url', null, true)),
                stats_user: build.template(std.get(block, 'stats_user', null, true)),
                system_packages: build.template(std.get(block, 'system_packages', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_assign_elastic_ips: p.child('auto_assign_elastic_ips').out,
      auto_assign_public_ips: p.child('auto_assign_public_ips').out,
      auto_healing: p.child('auto_healing').out,
      custom_configure_recipes: p.child('custom_configure_recipes').out,
      custom_deploy_recipes: p.child('custom_deploy_recipes').out,
      custom_instance_profile_arn: p.child('custom_instance_profile_arn').out,
      custom_json: p.child('custom_json').out,
      custom_security_group_ids: p.child('custom_security_group_ids').out,
      custom_setup_recipes: p.child('custom_setup_recipes').out,
      custom_shutdown_recipes: p.child('custom_shutdown_recipes').out,
      custom_undeploy_recipes: p.child('custom_undeploy_recipes').out,
      drain_elb_on_shutdown: p.child('drain_elb_on_shutdown').out,
      elastic_load_balancer: p.child('elastic_load_balancer').out,
      healthcheck_method: p.child('healthcheck_method').out,
      healthcheck_url: p.child('healthcheck_url').out,
      id: p.child('id').out,
      install_updates_on_boot: p.child('install_updates_on_boot').out,
      instance_shutdown_timeout: p.child('instance_shutdown_timeout').out,
      name: p.child('name').out,
      stack_id: p.child('stack_id').out,
      stats_enabled: p.child('stats_enabled').out,
      stats_password: p.child('stats_password').out,
      stats_url: p.child('stats_url').out,
      stats_user: p.child('stats_user').out,
      system_packages: p.child('system_packages').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      use_ebs_optimized_instances: p.child('use_ebs_optimized_instances').out,
    },
    opsworks_instance(name, block): {
      local p = path(['aws_opsworks_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_instance: {
              [name]: std.prune({
                agent_version: build.template(std.get(block, 'agent_version', null, true)),
                architecture: build.template(std.get(block, 'architecture', null, true)),
                auto_scaling_type: build.template(std.get(block, 'auto_scaling_type', null, true)),
                delete_ebs: build.template(std.get(block, 'delete_ebs', null, true)),
                delete_eip: build.template(std.get(block, 'delete_eip', null, true)),
                ebs_optimized: build.template(std.get(block, 'ebs_optimized', null, true)),
                install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null, true)),
                instance_type: build.template(std.get(block, 'instance_type', null, true)),
                layer_ids: build.template(block.layer_ids),
                stack_id: build.template(block.stack_id),
                state: build.template(std.get(block, 'state', null, true)),
              }),
            },
          },
        },
      },
      agent_version: p.child('agent_version').out,
      ami_id: p.child('ami_id').out,
      architecture: p.child('architecture').out,
      auto_scaling_type: p.child('auto_scaling_type').out,
      availability_zone: p.child('availability_zone').out,
      created_at: p.child('created_at').out,
      delete_ebs: p.child('delete_ebs').out,
      delete_eip: p.child('delete_eip').out,
      ebs_optimized: p.child('ebs_optimized').out,
      ec2_instance_id: p.child('ec2_instance_id').out,
      ecs_cluster_arn: p.child('ecs_cluster_arn').out,
      elastic_ip: p.child('elastic_ip').out,
      hostname: p.child('hostname').out,
      id: p.child('id').out,
      infrastructure_class: p.child('infrastructure_class').out,
      install_updates_on_boot: p.child('install_updates_on_boot').out,
      instance_profile_arn: p.child('instance_profile_arn').out,
      instance_type: p.child('instance_type').out,
      last_service_error_id: p.child('last_service_error_id').out,
      layer_ids: p.child('layer_ids').out,
      os: p.child('os').out,
      platform: p.child('platform').out,
      private_dns: p.child('private_dns').out,
      private_ip: p.child('private_ip').out,
      public_dns: p.child('public_dns').out,
      public_ip: p.child('public_ip').out,
      registered_by: p.child('registered_by').out,
      reported_agent_version: p.child('reported_agent_version').out,
      reported_os_family: p.child('reported_os_family').out,
      reported_os_name: p.child('reported_os_name').out,
      reported_os_version: p.child('reported_os_version').out,
      root_device_type: p.child('root_device_type').out,
      root_device_volume_id: p.child('root_device_volume_id').out,
      security_group_ids: p.child('security_group_ids').out,
      ssh_host_dsa_key_fingerprint: p.child('ssh_host_dsa_key_fingerprint').out,
      ssh_host_rsa_key_fingerprint: p.child('ssh_host_rsa_key_fingerprint').out,
      ssh_key_name: p.child('ssh_key_name').out,
      stack_id: p.child('stack_id').out,
      state: p.child('state').out,
      status: p.child('status').out,
      subnet_id: p.child('subnet_id').out,
      tenancy: p.child('tenancy').out,
      virtualization_type: p.child('virtualization_type').out,
    },
    opsworks_java_app_layer(name, block): {
      local p = path(['aws_opsworks_java_app_layer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_java_app_layer: {
              [name]: std.prune({
                app_server: build.template(std.get(block, 'app_server', null, true)),
                app_server_version: build.template(std.get(block, 'app_server_version', null, true)),
                auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null, true)),
                auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null, true)),
                auto_healing: build.template(std.get(block, 'auto_healing', null, true)),
                custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null, true)),
                custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null, true)),
                custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null, true)),
                custom_json: build.template(std.get(block, 'custom_json', null, true)),
                custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null, true)),
                custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null, true)),
                custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null, true)),
                custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null, true)),
                drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null, true)),
                elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null, true)),
                install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null, true)),
                instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null, true)),
                jvm_options: build.template(std.get(block, 'jvm_options', null, true)),
                jvm_type: build.template(std.get(block, 'jvm_type', null, true)),
                jvm_version: build.template(std.get(block, 'jvm_version', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                stack_id: build.template(block.stack_id),
                system_packages: build.template(std.get(block, 'system_packages', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null, true)),
              }),
            },
          },
        },
      },
      app_server: p.child('app_server').out,
      app_server_version: p.child('app_server_version').out,
      arn: p.child('arn').out,
      auto_assign_elastic_ips: p.child('auto_assign_elastic_ips').out,
      auto_assign_public_ips: p.child('auto_assign_public_ips').out,
      auto_healing: p.child('auto_healing').out,
      custom_configure_recipes: p.child('custom_configure_recipes').out,
      custom_deploy_recipes: p.child('custom_deploy_recipes').out,
      custom_instance_profile_arn: p.child('custom_instance_profile_arn').out,
      custom_json: p.child('custom_json').out,
      custom_security_group_ids: p.child('custom_security_group_ids').out,
      custom_setup_recipes: p.child('custom_setup_recipes').out,
      custom_shutdown_recipes: p.child('custom_shutdown_recipes').out,
      custom_undeploy_recipes: p.child('custom_undeploy_recipes').out,
      drain_elb_on_shutdown: p.child('drain_elb_on_shutdown').out,
      elastic_load_balancer: p.child('elastic_load_balancer').out,
      id: p.child('id').out,
      install_updates_on_boot: p.child('install_updates_on_boot').out,
      instance_shutdown_timeout: p.child('instance_shutdown_timeout').out,
      jvm_options: p.child('jvm_options').out,
      jvm_type: p.child('jvm_type').out,
      jvm_version: p.child('jvm_version').out,
      name: p.child('name').out,
      stack_id: p.child('stack_id').out,
      system_packages: p.child('system_packages').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      use_ebs_optimized_instances: p.child('use_ebs_optimized_instances').out,
    },
    opsworks_memcached_layer(name, block): {
      local p = path(['aws_opsworks_memcached_layer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_memcached_layer: {
              [name]: std.prune({
                allocated_memory: build.template(std.get(block, 'allocated_memory', null, true)),
                auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null, true)),
                auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null, true)),
                auto_healing: build.template(std.get(block, 'auto_healing', null, true)),
                custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null, true)),
                custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null, true)),
                custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null, true)),
                custom_json: build.template(std.get(block, 'custom_json', null, true)),
                custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null, true)),
                custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null, true)),
                custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null, true)),
                custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null, true)),
                drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null, true)),
                elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null, true)),
                install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null, true)),
                instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                stack_id: build.template(block.stack_id),
                system_packages: build.template(std.get(block, 'system_packages', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null, true)),
              }),
            },
          },
        },
      },
      allocated_memory: p.child('allocated_memory').out,
      arn: p.child('arn').out,
      auto_assign_elastic_ips: p.child('auto_assign_elastic_ips').out,
      auto_assign_public_ips: p.child('auto_assign_public_ips').out,
      auto_healing: p.child('auto_healing').out,
      custom_configure_recipes: p.child('custom_configure_recipes').out,
      custom_deploy_recipes: p.child('custom_deploy_recipes').out,
      custom_instance_profile_arn: p.child('custom_instance_profile_arn').out,
      custom_json: p.child('custom_json').out,
      custom_security_group_ids: p.child('custom_security_group_ids').out,
      custom_setup_recipes: p.child('custom_setup_recipes').out,
      custom_shutdown_recipes: p.child('custom_shutdown_recipes').out,
      custom_undeploy_recipes: p.child('custom_undeploy_recipes').out,
      drain_elb_on_shutdown: p.child('drain_elb_on_shutdown').out,
      elastic_load_balancer: p.child('elastic_load_balancer').out,
      id: p.child('id').out,
      install_updates_on_boot: p.child('install_updates_on_boot').out,
      instance_shutdown_timeout: p.child('instance_shutdown_timeout').out,
      name: p.child('name').out,
      stack_id: p.child('stack_id').out,
      system_packages: p.child('system_packages').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      use_ebs_optimized_instances: p.child('use_ebs_optimized_instances').out,
    },
    opsworks_mysql_layer(name, block): {
      local p = path(['aws_opsworks_mysql_layer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_mysql_layer: {
              [name]: std.prune({
                auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null, true)),
                auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null, true)),
                auto_healing: build.template(std.get(block, 'auto_healing', null, true)),
                custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null, true)),
                custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null, true)),
                custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null, true)),
                custom_json: build.template(std.get(block, 'custom_json', null, true)),
                custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null, true)),
                custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null, true)),
                custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null, true)),
                custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null, true)),
                drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null, true)),
                elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null, true)),
                install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null, true)),
                instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                root_password: build.template(std.get(block, 'root_password', null, true)),
                root_password_on_all_instances: build.template(std.get(block, 'root_password_on_all_instances', null, true)),
                stack_id: build.template(block.stack_id),
                system_packages: build.template(std.get(block, 'system_packages', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_assign_elastic_ips: p.child('auto_assign_elastic_ips').out,
      auto_assign_public_ips: p.child('auto_assign_public_ips').out,
      auto_healing: p.child('auto_healing').out,
      custom_configure_recipes: p.child('custom_configure_recipes').out,
      custom_deploy_recipes: p.child('custom_deploy_recipes').out,
      custom_instance_profile_arn: p.child('custom_instance_profile_arn').out,
      custom_json: p.child('custom_json').out,
      custom_security_group_ids: p.child('custom_security_group_ids').out,
      custom_setup_recipes: p.child('custom_setup_recipes').out,
      custom_shutdown_recipes: p.child('custom_shutdown_recipes').out,
      custom_undeploy_recipes: p.child('custom_undeploy_recipes').out,
      drain_elb_on_shutdown: p.child('drain_elb_on_shutdown').out,
      elastic_load_balancer: p.child('elastic_load_balancer').out,
      id: p.child('id').out,
      install_updates_on_boot: p.child('install_updates_on_boot').out,
      instance_shutdown_timeout: p.child('instance_shutdown_timeout').out,
      name: p.child('name').out,
      root_password: p.child('root_password').out,
      root_password_on_all_instances: p.child('root_password_on_all_instances').out,
      stack_id: p.child('stack_id').out,
      system_packages: p.child('system_packages').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      use_ebs_optimized_instances: p.child('use_ebs_optimized_instances').out,
    },
    opsworks_nodejs_app_layer(name, block): {
      local p = path(['aws_opsworks_nodejs_app_layer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_nodejs_app_layer: {
              [name]: std.prune({
                auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null, true)),
                auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null, true)),
                auto_healing: build.template(std.get(block, 'auto_healing', null, true)),
                custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null, true)),
                custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null, true)),
                custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null, true)),
                custom_json: build.template(std.get(block, 'custom_json', null, true)),
                custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null, true)),
                custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null, true)),
                custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null, true)),
                custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null, true)),
                drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null, true)),
                elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null, true)),
                install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null, true)),
                instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                nodejs_version: build.template(std.get(block, 'nodejs_version', null, true)),
                stack_id: build.template(block.stack_id),
                system_packages: build.template(std.get(block, 'system_packages', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_assign_elastic_ips: p.child('auto_assign_elastic_ips').out,
      auto_assign_public_ips: p.child('auto_assign_public_ips').out,
      auto_healing: p.child('auto_healing').out,
      custom_configure_recipes: p.child('custom_configure_recipes').out,
      custom_deploy_recipes: p.child('custom_deploy_recipes').out,
      custom_instance_profile_arn: p.child('custom_instance_profile_arn').out,
      custom_json: p.child('custom_json').out,
      custom_security_group_ids: p.child('custom_security_group_ids').out,
      custom_setup_recipes: p.child('custom_setup_recipes').out,
      custom_shutdown_recipes: p.child('custom_shutdown_recipes').out,
      custom_undeploy_recipes: p.child('custom_undeploy_recipes').out,
      drain_elb_on_shutdown: p.child('drain_elb_on_shutdown').out,
      elastic_load_balancer: p.child('elastic_load_balancer').out,
      id: p.child('id').out,
      install_updates_on_boot: p.child('install_updates_on_boot').out,
      instance_shutdown_timeout: p.child('instance_shutdown_timeout').out,
      name: p.child('name').out,
      nodejs_version: p.child('nodejs_version').out,
      stack_id: p.child('stack_id').out,
      system_packages: p.child('system_packages').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      use_ebs_optimized_instances: p.child('use_ebs_optimized_instances').out,
    },
    opsworks_permission(name, block): {
      local p = path(['aws_opsworks_permission', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_permission: {
              [name]: std.prune({
                stack_id: build.template(block.stack_id),
                user_arn: build.template(block.user_arn),
              }),
            },
          },
        },
      },
      allow_ssh: p.child('allow_ssh').out,
      allow_sudo: p.child('allow_sudo').out,
      id: p.child('id').out,
      level: p.child('level').out,
      stack_id: p.child('stack_id').out,
      user_arn: p.child('user_arn').out,
    },
    opsworks_php_app_layer(name, block): {
      local p = path(['aws_opsworks_php_app_layer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_php_app_layer: {
              [name]: std.prune({
                auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null, true)),
                auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null, true)),
                auto_healing: build.template(std.get(block, 'auto_healing', null, true)),
                custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null, true)),
                custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null, true)),
                custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null, true)),
                custom_json: build.template(std.get(block, 'custom_json', null, true)),
                custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null, true)),
                custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null, true)),
                custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null, true)),
                custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null, true)),
                drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null, true)),
                elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null, true)),
                install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null, true)),
                instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                stack_id: build.template(block.stack_id),
                system_packages: build.template(std.get(block, 'system_packages', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_assign_elastic_ips: p.child('auto_assign_elastic_ips').out,
      auto_assign_public_ips: p.child('auto_assign_public_ips').out,
      auto_healing: p.child('auto_healing').out,
      custom_configure_recipes: p.child('custom_configure_recipes').out,
      custom_deploy_recipes: p.child('custom_deploy_recipes').out,
      custom_instance_profile_arn: p.child('custom_instance_profile_arn').out,
      custom_json: p.child('custom_json').out,
      custom_security_group_ids: p.child('custom_security_group_ids').out,
      custom_setup_recipes: p.child('custom_setup_recipes').out,
      custom_shutdown_recipes: p.child('custom_shutdown_recipes').out,
      custom_undeploy_recipes: p.child('custom_undeploy_recipes').out,
      drain_elb_on_shutdown: p.child('drain_elb_on_shutdown').out,
      elastic_load_balancer: p.child('elastic_load_balancer').out,
      id: p.child('id').out,
      install_updates_on_boot: p.child('install_updates_on_boot').out,
      instance_shutdown_timeout: p.child('instance_shutdown_timeout').out,
      name: p.child('name').out,
      stack_id: p.child('stack_id').out,
      system_packages: p.child('system_packages').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      use_ebs_optimized_instances: p.child('use_ebs_optimized_instances').out,
    },
    opsworks_rails_app_layer(name, block): {
      local p = path(['aws_opsworks_rails_app_layer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_rails_app_layer: {
              [name]: std.prune({
                app_server: build.template(std.get(block, 'app_server', null, true)),
                auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null, true)),
                auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null, true)),
                auto_healing: build.template(std.get(block, 'auto_healing', null, true)),
                bundler_version: build.template(std.get(block, 'bundler_version', null, true)),
                custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null, true)),
                custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null, true)),
                custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null, true)),
                custom_json: build.template(std.get(block, 'custom_json', null, true)),
                custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null, true)),
                custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null, true)),
                custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null, true)),
                custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null, true)),
                drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null, true)),
                elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null, true)),
                install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null, true)),
                instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null, true)),
                manage_bundler: build.template(std.get(block, 'manage_bundler', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                passenger_version: build.template(std.get(block, 'passenger_version', null, true)),
                ruby_version: build.template(std.get(block, 'ruby_version', null, true)),
                rubygems_version: build.template(std.get(block, 'rubygems_version', null, true)),
                stack_id: build.template(block.stack_id),
                system_packages: build.template(std.get(block, 'system_packages', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null, true)),
              }),
            },
          },
        },
      },
      app_server: p.child('app_server').out,
      arn: p.child('arn').out,
      auto_assign_elastic_ips: p.child('auto_assign_elastic_ips').out,
      auto_assign_public_ips: p.child('auto_assign_public_ips').out,
      auto_healing: p.child('auto_healing').out,
      bundler_version: p.child('bundler_version').out,
      custom_configure_recipes: p.child('custom_configure_recipes').out,
      custom_deploy_recipes: p.child('custom_deploy_recipes').out,
      custom_instance_profile_arn: p.child('custom_instance_profile_arn').out,
      custom_json: p.child('custom_json').out,
      custom_security_group_ids: p.child('custom_security_group_ids').out,
      custom_setup_recipes: p.child('custom_setup_recipes').out,
      custom_shutdown_recipes: p.child('custom_shutdown_recipes').out,
      custom_undeploy_recipes: p.child('custom_undeploy_recipes').out,
      drain_elb_on_shutdown: p.child('drain_elb_on_shutdown').out,
      elastic_load_balancer: p.child('elastic_load_balancer').out,
      id: p.child('id').out,
      install_updates_on_boot: p.child('install_updates_on_boot').out,
      instance_shutdown_timeout: p.child('instance_shutdown_timeout').out,
      manage_bundler: p.child('manage_bundler').out,
      name: p.child('name').out,
      passenger_version: p.child('passenger_version').out,
      ruby_version: p.child('ruby_version').out,
      rubygems_version: p.child('rubygems_version').out,
      stack_id: p.child('stack_id').out,
      system_packages: p.child('system_packages').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      use_ebs_optimized_instances: p.child('use_ebs_optimized_instances').out,
    },
    opsworks_rds_db_instance(name, block): {
      local p = path(['aws_opsworks_rds_db_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_rds_db_instance: {
              [name]: std.prune({
                db_password: build.template(block.db_password),
                db_user: build.template(block.db_user),
                rds_db_instance_arn: build.template(block.rds_db_instance_arn),
                stack_id: build.template(block.stack_id),
              }),
            },
          },
        },
      },
      db_password: p.child('db_password').out,
      db_user: p.child('db_user').out,
      id: p.child('id').out,
      rds_db_instance_arn: p.child('rds_db_instance_arn').out,
      stack_id: p.child('stack_id').out,
    },
    opsworks_stack(name, block): {
      local p = path(['aws_opsworks_stack', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_stack: {
              [name]: std.prune({
                berkshelf_version: build.template(std.get(block, 'berkshelf_version', null, true)),
                color: build.template(std.get(block, 'color', null, true)),
                configuration_manager_name: build.template(std.get(block, 'configuration_manager_name', null, true)),
                configuration_manager_version: build.template(std.get(block, 'configuration_manager_version', null, true)),
                custom_json: build.template(std.get(block, 'custom_json', null, true)),
                default_instance_profile_arn: build.template(block.default_instance_profile_arn),
                default_os: build.template(std.get(block, 'default_os', null, true)),
                default_root_device_type: build.template(std.get(block, 'default_root_device_type', null, true)),
                default_ssh_key_name: build.template(std.get(block, 'default_ssh_key_name', null, true)),
                hostname_theme: build.template(std.get(block, 'hostname_theme', null, true)),
                manage_berkshelf: build.template(std.get(block, 'manage_berkshelf', null, true)),
                name: build.template(block.name),
                region: build.template(block.region),
                service_role_arn: build.template(block.service_role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                use_custom_cookbooks: build.template(std.get(block, 'use_custom_cookbooks', null, true)),
                use_opsworks_security_groups: build.template(std.get(block, 'use_opsworks_security_groups', null, true)),
              }),
            },
          },
        },
      },
      agent_version: p.child('agent_version').out,
      arn: p.child('arn').out,
      berkshelf_version: p.child('berkshelf_version').out,
      color: p.child('color').out,
      configuration_manager_name: p.child('configuration_manager_name').out,
      configuration_manager_version: p.child('configuration_manager_version').out,
      custom_json: p.child('custom_json').out,
      default_availability_zone: p.child('default_availability_zone').out,
      default_instance_profile_arn: p.child('default_instance_profile_arn').out,
      default_os: p.child('default_os').out,
      default_root_device_type: p.child('default_root_device_type').out,
      default_ssh_key_name: p.child('default_ssh_key_name').out,
      default_subnet_id: p.child('default_subnet_id').out,
      hostname_theme: p.child('hostname_theme').out,
      id: p.child('id').out,
      manage_berkshelf: p.child('manage_berkshelf').out,
      name: p.child('name').out,
      region: p.child('region').out,
      service_role_arn: p.child('service_role_arn').out,
      stack_endpoint: p.child('stack_endpoint').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      use_custom_cookbooks: p.child('use_custom_cookbooks').out,
      use_opsworks_security_groups: p.child('use_opsworks_security_groups').out,
      vpc_id: p.child('vpc_id').out,
    },
    opsworks_static_web_layer(name, block): {
      local p = path(['aws_opsworks_static_web_layer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_static_web_layer: {
              [name]: std.prune({
                auto_assign_elastic_ips: build.template(std.get(block, 'auto_assign_elastic_ips', null, true)),
                auto_assign_public_ips: build.template(std.get(block, 'auto_assign_public_ips', null, true)),
                auto_healing: build.template(std.get(block, 'auto_healing', null, true)),
                custom_configure_recipes: build.template(std.get(block, 'custom_configure_recipes', null, true)),
                custom_deploy_recipes: build.template(std.get(block, 'custom_deploy_recipes', null, true)),
                custom_instance_profile_arn: build.template(std.get(block, 'custom_instance_profile_arn', null, true)),
                custom_json: build.template(std.get(block, 'custom_json', null, true)),
                custom_security_group_ids: build.template(std.get(block, 'custom_security_group_ids', null, true)),
                custom_setup_recipes: build.template(std.get(block, 'custom_setup_recipes', null, true)),
                custom_shutdown_recipes: build.template(std.get(block, 'custom_shutdown_recipes', null, true)),
                custom_undeploy_recipes: build.template(std.get(block, 'custom_undeploy_recipes', null, true)),
                drain_elb_on_shutdown: build.template(std.get(block, 'drain_elb_on_shutdown', null, true)),
                elastic_load_balancer: build.template(std.get(block, 'elastic_load_balancer', null, true)),
                install_updates_on_boot: build.template(std.get(block, 'install_updates_on_boot', null, true)),
                instance_shutdown_timeout: build.template(std.get(block, 'instance_shutdown_timeout', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                stack_id: build.template(block.stack_id),
                system_packages: build.template(std.get(block, 'system_packages', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                use_ebs_optimized_instances: build.template(std.get(block, 'use_ebs_optimized_instances', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_assign_elastic_ips: p.child('auto_assign_elastic_ips').out,
      auto_assign_public_ips: p.child('auto_assign_public_ips').out,
      auto_healing: p.child('auto_healing').out,
      custom_configure_recipes: p.child('custom_configure_recipes').out,
      custom_deploy_recipes: p.child('custom_deploy_recipes').out,
      custom_instance_profile_arn: p.child('custom_instance_profile_arn').out,
      custom_json: p.child('custom_json').out,
      custom_security_group_ids: p.child('custom_security_group_ids').out,
      custom_setup_recipes: p.child('custom_setup_recipes').out,
      custom_shutdown_recipes: p.child('custom_shutdown_recipes').out,
      custom_undeploy_recipes: p.child('custom_undeploy_recipes').out,
      drain_elb_on_shutdown: p.child('drain_elb_on_shutdown').out,
      elastic_load_balancer: p.child('elastic_load_balancer').out,
      id: p.child('id').out,
      install_updates_on_boot: p.child('install_updates_on_boot').out,
      instance_shutdown_timeout: p.child('instance_shutdown_timeout').out,
      name: p.child('name').out,
      stack_id: p.child('stack_id').out,
      system_packages: p.child('system_packages').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      use_ebs_optimized_instances: p.child('use_ebs_optimized_instances').out,
    },
    opsworks_user_profile(name, block): {
      local p = path(['aws_opsworks_user_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_opsworks_user_profile: {
              [name]: std.prune({
                allow_self_management: build.template(std.get(block, 'allow_self_management', null, true)),
                ssh_public_key: build.template(std.get(block, 'ssh_public_key', null, true)),
                ssh_username: build.template(block.ssh_username),
                user_arn: build.template(block.user_arn),
              }),
            },
          },
        },
      },
      allow_self_management: p.child('allow_self_management').out,
      id: p.child('id').out,
      ssh_public_key: p.child('ssh_public_key').out,
      ssh_username: p.child('ssh_username').out,
      user_arn: p.child('user_arn').out,
    },
    organizations_account(name, block): {
      local p = path(['aws_organizations_account', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_organizations_account: {
              [name]: std.prune({
                close_on_deletion: build.template(std.get(block, 'close_on_deletion', null, true)),
                create_govcloud: build.template(std.get(block, 'create_govcloud', null, true)),
                email: build.template(block.email),
                iam_user_access_to_billing: build.template(std.get(block, 'iam_user_access_to_billing', null, true)),
                name: build.template(block.name),
                role_name: build.template(std.get(block, 'role_name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      close_on_deletion: p.child('close_on_deletion').out,
      create_govcloud: p.child('create_govcloud').out,
      email: p.child('email').out,
      govcloud_id: p.child('govcloud_id').out,
      iam_user_access_to_billing: p.child('iam_user_access_to_billing').out,
      id: p.child('id').out,
      joined_method: p.child('joined_method').out,
      joined_timestamp: p.child('joined_timestamp').out,
      name: p.child('name').out,
      parent_id: p.child('parent_id').out,
      role_name: p.child('role_name').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    organizations_delegated_administrator(name, block): {
      local p = path(['aws_organizations_delegated_administrator', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_organizations_delegated_administrator: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
                service_principal: build.template(block.service_principal),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      arn: p.child('arn').out,
      delegation_enabled_date: p.child('delegation_enabled_date').out,
      email: p.child('email').out,
      id: p.child('id').out,
      joined_method: p.child('joined_method').out,
      joined_timestamp: p.child('joined_timestamp').out,
      name: p.child('name').out,
      service_principal: p.child('service_principal').out,
      status: p.child('status').out,
    },
    organizations_organization(name, block): {
      local p = path(['aws_organizations_organization', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_organizations_organization: {
              [name]: std.prune({
                aws_service_access_principals: build.template(std.get(block, 'aws_service_access_principals', null, true)),
                enabled_policy_types: build.template(std.get(block, 'enabled_policy_types', null, true)),
                feature_set: build.template(std.get(block, 'feature_set', null, true)),
              }),
            },
          },
        },
      },
      accounts: p.child('accounts').out,
      arn: p.child('arn').out,
      aws_service_access_principals: p.child('aws_service_access_principals').out,
      enabled_policy_types: p.child('enabled_policy_types').out,
      feature_set: p.child('feature_set').out,
      id: p.child('id').out,
      master_account_arn: p.child('master_account_arn').out,
      master_account_email: p.child('master_account_email').out,
      master_account_id: p.child('master_account_id').out,
      master_account_name: p.child('master_account_name').out,
      non_master_accounts: p.child('non_master_accounts').out,
      roots: p.child('roots').out,
    },
    organizations_organizational_unit(name, block): {
      local p = path(['aws_organizations_organizational_unit', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_organizations_organizational_unit: {
              [name]: std.prune({
                name: build.template(block.name),
                parent_id: build.template(block.parent_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      accounts: p.child('accounts').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      parent_id: p.child('parent_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    organizations_policy(name, block): {
      local p = path(['aws_organizations_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_organizations_policy: {
              [name]: std.prune({
                content: build.template(block.content),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      content: p.child('content').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      skip_destroy: p.child('skip_destroy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    organizations_policy_attachment(name, block): {
      local p = path(['aws_organizations_policy_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_organizations_policy_attachment: {
              [name]: std.prune({
                policy_id: build.template(block.policy_id),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
                target_id: build.template(block.target_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy_id: p.child('policy_id').out,
      skip_destroy: p.child('skip_destroy').out,
      target_id: p.child('target_id').out,
    },
    organizations_resource_policy(name, block): {
      local p = path(['aws_organizations_resource_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_organizations_resource_policy: {
              [name]: std.prune({
                content: build.template(block.content),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      content: p.child('content').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    osis_pipeline(name, block): {
      local p = path(['aws_osis_pipeline', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_osis_pipeline: {
              [name]: std.prune({
                max_units: build.template(block.max_units),
                min_units: build.template(block.min_units),
                pipeline_configuration_body: build.template(block.pipeline_configuration_body),
                pipeline_name: build.template(block.pipeline_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ingest_endpoint_urls: p.child('ingest_endpoint_urls').out,
      max_units: p.child('max_units').out,
      min_units: p.child('min_units').out,
      pipeline_arn: p.child('pipeline_arn').out,
      pipeline_configuration_body: p.child('pipeline_configuration_body').out,
      pipeline_name: p.child('pipeline_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    paymentcryptography_key(name, block): {
      local p = path(['aws_paymentcryptography_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_paymentcryptography_key: {
              [name]: std.prune({
                exportable: build.template(block.exportable),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      deletion_window_in_days: p.child('deletion_window_in_days').out,
      enabled: p.child('enabled').out,
      exportable: p.child('exportable').out,
      id: p.child('id').out,
      key_check_value: p.child('key_check_value').out,
      key_check_value_algorithm: p.child('key_check_value_algorithm').out,
      key_origin: p.child('key_origin').out,
      key_state: p.child('key_state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    paymentcryptography_key_alias(name, block): {
      local p = path(['aws_paymentcryptography_key_alias', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_paymentcryptography_key_alias: {
              [name]: std.prune({
                alias_name: build.template(block.alias_name),
                key_arn: build.template(std.get(block, 'key_arn', null, true)),
              }),
            },
          },
        },
      },
      alias_name: p.child('alias_name').out,
      id: p.child('id').out,
      key_arn: p.child('key_arn').out,
    },
    pinpoint_adm_channel(name, block): {
      local p = path(['aws_pinpoint_adm_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpoint_adm_channel: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                client_id: build.template(block.client_id),
                client_secret: build.template(block.client_secret),
                enabled: build.template(std.get(block, 'enabled', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      client_id: p.child('client_id').out,
      client_secret: p.child('client_secret').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
    },
    pinpoint_apns_channel(name, block): {
      local p = path(['aws_pinpoint_apns_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpoint_apns_channel: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                bundle_id: build.template(std.get(block, 'bundle_id', null, true)),
                certificate: build.template(std.get(block, 'certificate', null, true)),
                default_authentication_method: build.template(std.get(block, 'default_authentication_method', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                private_key: build.template(std.get(block, 'private_key', null, true)),
                team_id: build.template(std.get(block, 'team_id', null, true)),
                token_key: build.template(std.get(block, 'token_key', null, true)),
                token_key_id: build.template(std.get(block, 'token_key_id', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      bundle_id: p.child('bundle_id').out,
      certificate: p.child('certificate').out,
      default_authentication_method: p.child('default_authentication_method').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      private_key: p.child('private_key').out,
      team_id: p.child('team_id').out,
      token_key: p.child('token_key').out,
      token_key_id: p.child('token_key_id').out,
    },
    pinpoint_apns_sandbox_channel(name, block): {
      local p = path(['aws_pinpoint_apns_sandbox_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpoint_apns_sandbox_channel: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                bundle_id: build.template(std.get(block, 'bundle_id', null, true)),
                certificate: build.template(std.get(block, 'certificate', null, true)),
                default_authentication_method: build.template(std.get(block, 'default_authentication_method', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                private_key: build.template(std.get(block, 'private_key', null, true)),
                team_id: build.template(std.get(block, 'team_id', null, true)),
                token_key: build.template(std.get(block, 'token_key', null, true)),
                token_key_id: build.template(std.get(block, 'token_key_id', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      bundle_id: p.child('bundle_id').out,
      certificate: p.child('certificate').out,
      default_authentication_method: p.child('default_authentication_method').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      private_key: p.child('private_key').out,
      team_id: p.child('team_id').out,
      token_key: p.child('token_key').out,
      token_key_id: p.child('token_key_id').out,
    },
    pinpoint_apns_voip_channel(name, block): {
      local p = path(['aws_pinpoint_apns_voip_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpoint_apns_voip_channel: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                bundle_id: build.template(std.get(block, 'bundle_id', null, true)),
                certificate: build.template(std.get(block, 'certificate', null, true)),
                default_authentication_method: build.template(std.get(block, 'default_authentication_method', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                private_key: build.template(std.get(block, 'private_key', null, true)),
                team_id: build.template(std.get(block, 'team_id', null, true)),
                token_key: build.template(std.get(block, 'token_key', null, true)),
                token_key_id: build.template(std.get(block, 'token_key_id', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      bundle_id: p.child('bundle_id').out,
      certificate: p.child('certificate').out,
      default_authentication_method: p.child('default_authentication_method').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      private_key: p.child('private_key').out,
      team_id: p.child('team_id').out,
      token_key: p.child('token_key').out,
      token_key_id: p.child('token_key_id').out,
    },
    pinpoint_apns_voip_sandbox_channel(name, block): {
      local p = path(['aws_pinpoint_apns_voip_sandbox_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpoint_apns_voip_sandbox_channel: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                bundle_id: build.template(std.get(block, 'bundle_id', null, true)),
                certificate: build.template(std.get(block, 'certificate', null, true)),
                default_authentication_method: build.template(std.get(block, 'default_authentication_method', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                private_key: build.template(std.get(block, 'private_key', null, true)),
                team_id: build.template(std.get(block, 'team_id', null, true)),
                token_key: build.template(std.get(block, 'token_key', null, true)),
                token_key_id: build.template(std.get(block, 'token_key_id', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      bundle_id: p.child('bundle_id').out,
      certificate: p.child('certificate').out,
      default_authentication_method: p.child('default_authentication_method').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      private_key: p.child('private_key').out,
      team_id: p.child('team_id').out,
      token_key: p.child('token_key').out,
      token_key_id: p.child('token_key_id').out,
    },
    pinpoint_app(name, block): {
      local p = path(['aws_pinpoint_app', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpoint_app: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    pinpoint_baidu_channel(name, block): {
      local p = path(['aws_pinpoint_baidu_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpoint_baidu_channel: {
              [name]: std.prune({
                api_key: build.template(block.api_key),
                application_id: build.template(block.application_id),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                secret_key: build.template(block.secret_key),
              }),
            },
          },
        },
      },
      api_key: p.child('api_key').out,
      application_id: p.child('application_id').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      secret_key: p.child('secret_key').out,
    },
    pinpoint_email_channel(name, block): {
      local p = path(['aws_pinpoint_email_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpoint_email_channel: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                configuration_set: build.template(std.get(block, 'configuration_set', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                from_address: build.template(block.from_address),
                identity: build.template(block.identity),
                role_arn: build.template(std.get(block, 'role_arn', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      configuration_set: p.child('configuration_set').out,
      enabled: p.child('enabled').out,
      from_address: p.child('from_address').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      messages_per_second: p.child('messages_per_second').out,
      role_arn: p.child('role_arn').out,
    },
    pinpoint_email_template(name, block): {
      local p = path(['aws_pinpoint_email_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpoint_email_template: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
                template_name: build.template(block.template_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      template_name: p.child('template_name').out,
    },
    pinpoint_event_stream(name, block): {
      local p = path(['aws_pinpoint_event_stream', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpoint_event_stream: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                destination_stream_arn: build.template(block.destination_stream_arn),
                role_arn: build.template(block.role_arn),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      destination_stream_arn: p.child('destination_stream_arn').out,
      id: p.child('id').out,
      role_arn: p.child('role_arn').out,
    },
    pinpoint_gcm_channel(name, block): {
      local p = path(['aws_pinpoint_gcm_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpoint_gcm_channel: {
              [name]: std.prune({
                api_key: build.template(std.get(block, 'api_key', null, true)),
                application_id: build.template(block.application_id),
                default_authentication_method: build.template(std.get(block, 'default_authentication_method', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                service_json: build.template(std.get(block, 'service_json', null, true)),
              }),
            },
          },
        },
      },
      api_key: p.child('api_key').out,
      application_id: p.child('application_id').out,
      default_authentication_method: p.child('default_authentication_method').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      service_json: p.child('service_json').out,
    },
    pinpoint_sms_channel(name, block): {
      local p = path(['aws_pinpoint_sms_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpoint_sms_channel: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                sender_id: build.template(std.get(block, 'sender_id', null, true)),
                short_code: build.template(std.get(block, 'short_code', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      promotional_messages_per_second: p.child('promotional_messages_per_second').out,
      sender_id: p.child('sender_id').out,
      short_code: p.child('short_code').out,
      transactional_messages_per_second: p.child('transactional_messages_per_second').out,
    },
    pinpointsmsvoicev2_configuration_set(name, block): {
      local p = path(['aws_pinpointsmsvoicev2_configuration_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpointsmsvoicev2_configuration_set: {
              [name]: std.prune({
                default_message_type: build.template(std.get(block, 'default_message_type', null, true)),
                default_sender_id: build.template(std.get(block, 'default_sender_id', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_message_type: p.child('default_message_type').out,
      default_sender_id: p.child('default_sender_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    pinpointsmsvoicev2_opt_out_list(name, block): {
      local p = path(['aws_pinpointsmsvoicev2_opt_out_list', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpointsmsvoicev2_opt_out_list: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    pinpointsmsvoicev2_phone_number(name, block): {
      local p = path(['aws_pinpointsmsvoicev2_phone_number', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pinpointsmsvoicev2_phone_number: {
              [name]: std.prune({
                iso_country_code: build.template(block.iso_country_code),
                message_type: build.template(block.message_type),
                number_capabilities: build.template(block.number_capabilities),
                number_type: build.template(block.number_type),
                registration_id: build.template(std.get(block, 'registration_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                two_way_channel_arn: build.template(std.get(block, 'two_way_channel_arn', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      deletion_protection_enabled: p.child('deletion_protection_enabled').out,
      id: p.child('id').out,
      iso_country_code: p.child('iso_country_code').out,
      message_type: p.child('message_type').out,
      monthly_leasing_price: p.child('monthly_leasing_price').out,
      number_capabilities: p.child('number_capabilities').out,
      number_type: p.child('number_type').out,
      opt_out_list_name: p.child('opt_out_list_name').out,
      phone_number: p.child('phone_number').out,
      registration_id: p.child('registration_id').out,
      self_managed_opt_outs_enabled: p.child('self_managed_opt_outs_enabled').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      two_way_channel_arn: p.child('two_way_channel_arn').out,
      two_way_channel_enabled: p.child('two_way_channel_enabled').out,
    },
    pipes_pipe(name, block): {
      local p = path(['aws_pipes_pipe', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_pipes_pipe: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                desired_state: build.template(std.get(block, 'desired_state', null, true)),
                enrichment: build.template(std.get(block, 'enrichment', null, true)),
                role_arn: build.template(block.role_arn),
                source: build.template(block.source),
                tags: build.template(std.get(block, 'tags', null, true)),
                target: build.template(block.target),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      desired_state: p.child('desired_state').out,
      enrichment: p.child('enrichment').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      role_arn: p.child('role_arn').out,
      source: p.child('source').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target: p.child('target').out,
    },
    placement_group(name, block): {
      local p = path(['aws_placement_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_placement_group: {
              [name]: std.prune({
                name: build.template(block.name),
                strategy: build.template(block.strategy),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      partition_count: p.child('partition_count').out,
      placement_group_id: p.child('placement_group_id').out,
      spread_level: p.child('spread_level').out,
      strategy: p.child('strategy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    prometheus_alert_manager_definition(name, block): {
      local p = path(['aws_prometheus_alert_manager_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_prometheus_alert_manager_definition: {
              [name]: std.prune({
                definition: build.template(block.definition),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      definition: p.child('definition').out,
      id: p.child('id').out,
      workspace_id: p.child('workspace_id').out,
    },
    prometheus_rule_group_namespace(name, block): {
      local p = path(['aws_prometheus_rule_group_namespace', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_prometheus_rule_group_namespace: {
              [name]: std.prune({
                data: build.template(block.data),
                name: build.template(block.name),
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      data: p.child('data').out,
      id: p.child('id').out,
      name: p.child('name').out,
      workspace_id: p.child('workspace_id').out,
    },
    prometheus_scraper(name, block): {
      local p = path(['aws_prometheus_scraper', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_prometheus_scraper: {
              [name]: std.prune({
                alias: build.template(std.get(block, 'alias', null, true)),
                scrape_configuration: build.template(block.scrape_configuration),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      alias: p.child('alias').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      role_arn: p.child('role_arn').out,
      scrape_configuration: p.child('scrape_configuration').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    prometheus_workspace(name, block): {
      local p = path(['aws_prometheus_workspace', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_prometheus_workspace: {
              [name]: std.prune({
                alias: build.template(std.get(block, 'alias', null, true)),
                kms_key_arn: build.template(std.get(block, 'kms_key_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      alias: p.child('alias').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      prometheus_endpoint: p.child('prometheus_endpoint').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    proxy_protocol_policy(name, block): {
      local p = path(['aws_proxy_protocol_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_proxy_protocol_policy: {
              [name]: std.prune({
                instance_ports: build.template(block.instance_ports),
                load_balancer: build.template(block.load_balancer),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_ports: p.child('instance_ports').out,
      load_balancer: p.child('load_balancer').out,
    },
    qldb_ledger(name, block): {
      local p = path(['aws_qldb_ledger', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_qldb_ledger: {
              [name]: std.prune({
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                permissions_mode: build.template(block.permissions_mode),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      deletion_protection: p.child('deletion_protection').out,
      id: p.child('id').out,
      kms_key: p.child('kms_key').out,
      name: p.child('name').out,
      permissions_mode: p.child('permissions_mode').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    qldb_stream(name, block): {
      local p = path(['aws_qldb_stream', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_qldb_stream: {
              [name]: std.prune({
                exclusive_end_time: build.template(std.get(block, 'exclusive_end_time', null, true)),
                inclusive_start_time: build.template(block.inclusive_start_time),
                ledger_name: build.template(block.ledger_name),
                role_arn: build.template(block.role_arn),
                stream_name: build.template(block.stream_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      exclusive_end_time: p.child('exclusive_end_time').out,
      id: p.child('id').out,
      inclusive_start_time: p.child('inclusive_start_time').out,
      ledger_name: p.child('ledger_name').out,
      role_arn: p.child('role_arn').out,
      stream_name: p.child('stream_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    quicksight_account_subscription(name, block): {
      local p = path(['aws_quicksight_account_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_account_subscription: {
              [name]: std.prune({
                account_name: build.template(block.account_name),
                active_directory_name: build.template(std.get(block, 'active_directory_name', null, true)),
                admin_group: build.template(std.get(block, 'admin_group', null, true)),
                authentication_method: build.template(block.authentication_method),
                author_group: build.template(std.get(block, 'author_group', null, true)),
                contact_number: build.template(std.get(block, 'contact_number', null, true)),
                directory_id: build.template(std.get(block, 'directory_id', null, true)),
                edition: build.template(block.edition),
                email_address: build.template(std.get(block, 'email_address', null, true)),
                first_name: build.template(std.get(block, 'first_name', null, true)),
                iam_identity_center_instance_arn: build.template(std.get(block, 'iam_identity_center_instance_arn', null, true)),
                last_name: build.template(std.get(block, 'last_name', null, true)),
                notification_email: build.template(block.notification_email),
                reader_group: build.template(std.get(block, 'reader_group', null, true)),
                realm: build.template(std.get(block, 'realm', null, true)),
              }),
            },
          },
        },
      },
      account_name: p.child('account_name').out,
      account_subscription_status: p.child('account_subscription_status').out,
      active_directory_name: p.child('active_directory_name').out,
      admin_group: p.child('admin_group').out,
      authentication_method: p.child('authentication_method').out,
      author_group: p.child('author_group').out,
      aws_account_id: p.child('aws_account_id').out,
      contact_number: p.child('contact_number').out,
      directory_id: p.child('directory_id').out,
      edition: p.child('edition').out,
      email_address: p.child('email_address').out,
      first_name: p.child('first_name').out,
      iam_identity_center_instance_arn: p.child('iam_identity_center_instance_arn').out,
      id: p.child('id').out,
      last_name: p.child('last_name').out,
      notification_email: p.child('notification_email').out,
      reader_group: p.child('reader_group').out,
      realm: p.child('realm').out,
    },
    quicksight_analysis(name, block): {
      local p = path(['aws_quicksight_analysis', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_analysis: {
              [name]: std.prune({
                analysis_id: build.template(block.analysis_id),
                name: build.template(block.name),
                recovery_window_in_days: build.template(std.get(block, 'recovery_window_in_days', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                theme_arn: build.template(std.get(block, 'theme_arn', null, true)),
              }),
            },
          },
        },
      },
      analysis_id: p.child('analysis_id').out,
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      created_time: p.child('created_time').out,
      id: p.child('id').out,
      last_published_time: p.child('last_published_time').out,
      last_updated_time: p.child('last_updated_time').out,
      name: p.child('name').out,
      recovery_window_in_days: p.child('recovery_window_in_days').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      theme_arn: p.child('theme_arn').out,
    },
    quicksight_dashboard(name, block): {
      local p = path(['aws_quicksight_dashboard', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_dashboard: {
              [name]: std.prune({
                dashboard_id: build.template(block.dashboard_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                theme_arn: build.template(std.get(block, 'theme_arn', null, true)),
                version_description: build.template(block.version_description),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      created_time: p.child('created_time').out,
      dashboard_id: p.child('dashboard_id').out,
      id: p.child('id').out,
      last_published_time: p.child('last_published_time').out,
      last_updated_time: p.child('last_updated_time').out,
      name: p.child('name').out,
      source_entity_arn: p.child('source_entity_arn').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      theme_arn: p.child('theme_arn').out,
      version_description: p.child('version_description').out,
      version_number: p.child('version_number').out,
    },
    quicksight_data_set(name, block): {
      local p = path(['aws_quicksight_data_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_data_set: {
              [name]: std.prune({
                data_set_id: build.template(block.data_set_id),
                import_mode: build.template(block.import_mode),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      data_set_id: p.child('data_set_id').out,
      id: p.child('id').out,
      import_mode: p.child('import_mode').out,
      name: p.child('name').out,
      output_columns: p.child('output_columns').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    quicksight_data_source(name, block): {
      local p = path(['aws_quicksight_data_source', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_data_source: {
              [name]: std.prune({
                data_source_id: build.template(block.data_source_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      data_source_id: p.child('data_source_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    quicksight_folder(name, block): {
      local p = path(['aws_quicksight_folder', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_folder: {
              [name]: std.prune({
                folder_id: build.template(block.folder_id),
                folder_type: build.template(std.get(block, 'folder_type', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                parent_folder_arn: build.template(std.get(block, 'parent_folder_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      created_time: p.child('created_time').out,
      folder_id: p.child('folder_id').out,
      folder_path: p.child('folder_path').out,
      folder_type: p.child('folder_type').out,
      id: p.child('id').out,
      last_updated_time: p.child('last_updated_time').out,
      name: p.child('name').out,
      parent_folder_arn: p.child('parent_folder_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    quicksight_folder_membership(name, block): {
      local p = path(['aws_quicksight_folder_membership', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_folder_membership: {
              [name]: std.prune({
                folder_id: build.template(block.folder_id),
                member_id: build.template(block.member_id),
                member_type: build.template(block.member_type),
              }),
            },
          },
        },
      },
      aws_account_id: p.child('aws_account_id').out,
      folder_id: p.child('folder_id').out,
      id: p.child('id').out,
      member_id: p.child('member_id').out,
      member_type: p.child('member_type').out,
    },
    quicksight_group(name, block): {
      local p = path(['aws_quicksight_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                group_name: build.template(block.group_name),
                namespace: build.template(std.get(block, 'namespace', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      description: p.child('description').out,
      group_name: p.child('group_name').out,
      id: p.child('id').out,
      namespace: p.child('namespace').out,
    },
    quicksight_group_membership(name, block): {
      local p = path(['aws_quicksight_group_membership', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_group_membership: {
              [name]: std.prune({
                group_name: build.template(block.group_name),
                member_name: build.template(block.member_name),
                namespace: build.template(std.get(block, 'namespace', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      group_name: p.child('group_name').out,
      id: p.child('id').out,
      member_name: p.child('member_name').out,
      namespace: p.child('namespace').out,
    },
    quicksight_iam_policy_assignment(name, block): {
      local p = path(['aws_quicksight_iam_policy_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_iam_policy_assignment: {
              [name]: std.prune({
                assignment_name: build.template(block.assignment_name),
                assignment_status: build.template(block.assignment_status),
                policy_arn: build.template(std.get(block, 'policy_arn', null, true)),
              }),
            },
          },
        },
      },
      assignment_id: p.child('assignment_id').out,
      assignment_name: p.child('assignment_name').out,
      assignment_status: p.child('assignment_status').out,
      aws_account_id: p.child('aws_account_id').out,
      id: p.child('id').out,
      namespace: p.child('namespace').out,
      policy_arn: p.child('policy_arn').out,
    },
    quicksight_ingestion(name, block): {
      local p = path(['aws_quicksight_ingestion', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_ingestion: {
              [name]: std.prune({
                data_set_id: build.template(block.data_set_id),
                ingestion_id: build.template(block.ingestion_id),
                ingestion_type: build.template(block.ingestion_type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      data_set_id: p.child('data_set_id').out,
      id: p.child('id').out,
      ingestion_id: p.child('ingestion_id').out,
      ingestion_status: p.child('ingestion_status').out,
      ingestion_type: p.child('ingestion_type').out,
    },
    quicksight_namespace(name, block): {
      local p = path(['aws_quicksight_namespace', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_namespace: {
              [name]: std.prune({
                namespace: build.template(block.namespace),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      capacity_region: p.child('capacity_region').out,
      creation_status: p.child('creation_status').out,
      id: p.child('id').out,
      identity_store: p.child('identity_store').out,
      namespace: p.child('namespace').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    quicksight_refresh_schedule(name, block): {
      local p = path(['aws_quicksight_refresh_schedule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_refresh_schedule: {
              [name]: std.prune({
                data_set_id: build.template(block.data_set_id),
                schedule_id: build.template(block.schedule_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      data_set_id: p.child('data_set_id').out,
      id: p.child('id').out,
      schedule_id: p.child('schedule_id').out,
    },
    quicksight_template(name, block): {
      local p = path(['aws_quicksight_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_template: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                template_id: build.template(block.template_id),
                version_description: build.template(block.version_description),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      created_time: p.child('created_time').out,
      id: p.child('id').out,
      last_updated_time: p.child('last_updated_time').out,
      name: p.child('name').out,
      source_entity_arn: p.child('source_entity_arn').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      template_id: p.child('template_id').out,
      version_description: p.child('version_description').out,
      version_number: p.child('version_number').out,
    },
    quicksight_template_alias(name, block): {
      local p = path(['aws_quicksight_template_alias', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_template_alias: {
              [name]: std.prune({
                alias_name: build.template(block.alias_name),
                template_id: build.template(block.template_id),
                template_version_number: build.template(block.template_version_number),
              }),
            },
          },
        },
      },
      alias_name: p.child('alias_name').out,
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      id: p.child('id').out,
      template_id: p.child('template_id').out,
      template_version_number: p.child('template_version_number').out,
    },
    quicksight_theme(name, block): {
      local p = path(['aws_quicksight_theme', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_theme: {
              [name]: std.prune({
                base_theme_id: build.template(block.base_theme_id),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                theme_id: build.template(block.theme_id),
                version_description: build.template(std.get(block, 'version_description', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      base_theme_id: p.child('base_theme_id').out,
      created_time: p.child('created_time').out,
      id: p.child('id').out,
      last_updated_time: p.child('last_updated_time').out,
      name: p.child('name').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      theme_id: p.child('theme_id').out,
      version_description: p.child('version_description').out,
      version_number: p.child('version_number').out,
    },
    quicksight_user(name, block): {
      local p = path(['aws_quicksight_user', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_user: {
              [name]: std.prune({
                email: build.template(block.email),
                iam_arn: build.template(std.get(block, 'iam_arn', null, true)),
                identity_type: build.template(block.identity_type),
                namespace: build.template(std.get(block, 'namespace', null, true)),
                session_name: build.template(std.get(block, 'session_name', null, true)),
                user_name: build.template(std.get(block, 'user_name', null, true)),
                user_role: build.template(block.user_role),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      email: p.child('email').out,
      iam_arn: p.child('iam_arn').out,
      id: p.child('id').out,
      identity_type: p.child('identity_type').out,
      namespace: p.child('namespace').out,
      session_name: p.child('session_name').out,
      user_name: p.child('user_name').out,
      user_role: p.child('user_role').out,
    },
    quicksight_vpc_connection(name, block): {
      local p = path(['aws_quicksight_vpc_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_quicksight_vpc_connection: {
              [name]: std.prune({
                dns_resolvers: build.template(std.get(block, 'dns_resolvers', null, true)),
                name: build.template(block.name),
                role_arn: build.template(block.role_arn),
                security_group_ids: build.template(block.security_group_ids),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_connection_id: build.template(block.vpc_connection_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_status: p.child('availability_status').out,
      aws_account_id: p.child('aws_account_id').out,
      dns_resolvers: p.child('dns_resolvers').out,
      id: p.child('id').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      security_group_ids: p.child('security_group_ids').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_connection_id: p.child('vpc_connection_id').out,
    },
    ram_principal_association(name, block): {
      local p = path(['aws_ram_principal_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ram_principal_association: {
              [name]: std.prune({
                principal: build.template(block.principal),
                resource_share_arn: build.template(block.resource_share_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      principal: p.child('principal').out,
      resource_share_arn: p.child('resource_share_arn').out,
    },
    ram_resource_association(name, block): {
      local p = path(['aws_ram_resource_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ram_resource_association: {
              [name]: std.prune({
                resource_arn: build.template(block.resource_arn),
                resource_share_arn: build.template(block.resource_share_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      resource_arn: p.child('resource_arn').out,
      resource_share_arn: p.child('resource_share_arn').out,
    },
    ram_resource_share(name, block): {
      local p = path(['aws_ram_resource_share', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ram_resource_share: {
              [name]: std.prune({
                allow_external_principals: build.template(std.get(block, 'allow_external_principals', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allow_external_principals: p.child('allow_external_principals').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      permission_arns: p.child('permission_arns').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ram_resource_share_accepter(name, block): {
      local p = path(['aws_ram_resource_share_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ram_resource_share_accepter: {
              [name]: std.prune({
                share_arn: build.template(block.share_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      invitation_arn: p.child('invitation_arn').out,
      receiver_account_id: p.child('receiver_account_id').out,
      resources: p.child('resources').out,
      sender_account_id: p.child('sender_account_id').out,
      share_arn: p.child('share_arn').out,
      share_id: p.child('share_id').out,
      share_name: p.child('share_name').out,
      status: p.child('status').out,
    },
    ram_sharing_with_organization(name, block): {
      local p = path(['aws_ram_sharing_with_organization', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ram_sharing_with_organization: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    rbin_rule(name, block): {
      local p = path(['aws_rbin_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rbin_rule: {
              [name]: std.prune({
                resource_type: build.template(block.resource_type),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      lock_end_time: p.child('lock_end_time').out,
      lock_state: p.child('lock_state').out,
      resource_type: p.child('resource_type').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    rds_certificate(name, block): {
      local p = path(['aws_rds_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rds_certificate: {
              [name]: std.prune({
                certificate_identifier: build.template(block.certificate_identifier),
              }),
            },
          },
        },
      },
      certificate_identifier: p.child('certificate_identifier').out,
      id: p.child('id').out,
    },
    rds_cluster(name, block): {
      local p = path(['aws_rds_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rds_cluster: {
              [name]: std.prune({
                allow_major_version_upgrade: build.template(std.get(block, 'allow_major_version_upgrade', null, true)),
                backtrack_window: build.template(std.get(block, 'backtrack_window', null, true)),
                copy_tags_to_snapshot: build.template(std.get(block, 'copy_tags_to_snapshot', null, true)),
                db_cluster_instance_class: build.template(std.get(block, 'db_cluster_instance_class', null, true)),
                db_instance_parameter_group_name: build.template(std.get(block, 'db_instance_parameter_group_name', null, true)),
                delete_automated_backups: build.template(std.get(block, 'delete_automated_backups', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                domain: build.template(std.get(block, 'domain', null, true)),
                domain_iam_role_name: build.template(std.get(block, 'domain_iam_role_name', null, true)),
                enable_global_write_forwarding: build.template(std.get(block, 'enable_global_write_forwarding', null, true)),
                enable_http_endpoint: build.template(std.get(block, 'enable_http_endpoint', null, true)),
                enable_local_write_forwarding: build.template(std.get(block, 'enable_local_write_forwarding', null, true)),
                enabled_cloudwatch_logs_exports: build.template(std.get(block, 'enabled_cloudwatch_logs_exports', null, true)),
                engine: build.template(block.engine),
                engine_mode: build.template(std.get(block, 'engine_mode', null, true)),
                final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null, true)),
                global_cluster_identifier: build.template(std.get(block, 'global_cluster_identifier', null, true)),
                iam_database_authentication_enabled: build.template(std.get(block, 'iam_database_authentication_enabled', null, true)),
                iops: build.template(std.get(block, 'iops', null, true)),
                manage_master_user_password: build.template(std.get(block, 'manage_master_user_password', null, true)),
                master_password: build.template(std.get(block, 'master_password', null, true)),
                performance_insights_enabled: build.template(std.get(block, 'performance_insights_enabled', null, true)),
                replication_source_identifier: build.template(std.get(block, 'replication_source_identifier', null, true)),
                skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null, true)),
                snapshot_identifier: build.template(std.get(block, 'snapshot_identifier', null, true)),
                source_region: build.template(std.get(block, 'source_region', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allocated_storage: p.child('allocated_storage').out,
      allow_major_version_upgrade: p.child('allow_major_version_upgrade').out,
      apply_immediately: p.child('apply_immediately').out,
      arn: p.child('arn').out,
      availability_zones: p.child('availability_zones').out,
      backtrack_window: p.child('backtrack_window').out,
      backup_retention_period: p.child('backup_retention_period').out,
      ca_certificate_identifier: p.child('ca_certificate_identifier').out,
      ca_certificate_valid_till: p.child('ca_certificate_valid_till').out,
      cluster_identifier: p.child('cluster_identifier').out,
      cluster_identifier_prefix: p.child('cluster_identifier_prefix').out,
      cluster_members: p.child('cluster_members').out,
      cluster_resource_id: p.child('cluster_resource_id').out,
      copy_tags_to_snapshot: p.child('copy_tags_to_snapshot').out,
      database_name: p.child('database_name').out,
      db_cluster_instance_class: p.child('db_cluster_instance_class').out,
      db_cluster_parameter_group_name: p.child('db_cluster_parameter_group_name').out,
      db_instance_parameter_group_name: p.child('db_instance_parameter_group_name').out,
      db_subnet_group_name: p.child('db_subnet_group_name').out,
      db_system_id: p.child('db_system_id').out,
      delete_automated_backups: p.child('delete_automated_backups').out,
      deletion_protection: p.child('deletion_protection').out,
      domain: p.child('domain').out,
      domain_iam_role_name: p.child('domain_iam_role_name').out,
      enable_global_write_forwarding: p.child('enable_global_write_forwarding').out,
      enable_http_endpoint: p.child('enable_http_endpoint').out,
      enable_local_write_forwarding: p.child('enable_local_write_forwarding').out,
      enabled_cloudwatch_logs_exports: p.child('enabled_cloudwatch_logs_exports').out,
      endpoint: p.child('endpoint').out,
      engine: p.child('engine').out,
      engine_lifecycle_support: p.child('engine_lifecycle_support').out,
      engine_mode: p.child('engine_mode').out,
      engine_version: p.child('engine_version').out,
      engine_version_actual: p.child('engine_version_actual').out,
      final_snapshot_identifier: p.child('final_snapshot_identifier').out,
      global_cluster_identifier: p.child('global_cluster_identifier').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      iam_database_authentication_enabled: p.child('iam_database_authentication_enabled').out,
      iam_roles: p.child('iam_roles').out,
      id: p.child('id').out,
      iops: p.child('iops').out,
      kms_key_id: p.child('kms_key_id').out,
      manage_master_user_password: p.child('manage_master_user_password').out,
      master_password: p.child('master_password').out,
      master_user_secret: p.child('master_user_secret').out,
      master_user_secret_kms_key_id: p.child('master_user_secret_kms_key_id').out,
      master_username: p.child('master_username').out,
      network_type: p.child('network_type').out,
      performance_insights_enabled: p.child('performance_insights_enabled').out,
      performance_insights_kms_key_id: p.child('performance_insights_kms_key_id').out,
      performance_insights_retention_period: p.child('performance_insights_retention_period').out,
      port: p.child('port').out,
      preferred_backup_window: p.child('preferred_backup_window').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      reader_endpoint: p.child('reader_endpoint').out,
      replication_source_identifier: p.child('replication_source_identifier').out,
      skip_final_snapshot: p.child('skip_final_snapshot').out,
      snapshot_identifier: p.child('snapshot_identifier').out,
      source_region: p.child('source_region').out,
      storage_encrypted: p.child('storage_encrypted').out,
      storage_type: p.child('storage_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    rds_cluster_activity_stream(name, block): {
      local p = path(['aws_rds_cluster_activity_stream', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rds_cluster_activity_stream: {
              [name]: std.prune({
                engine_native_audit_fields_included: build.template(std.get(block, 'engine_native_audit_fields_included', null, true)),
                kms_key_id: build.template(block.kms_key_id),
                mode: build.template(block.mode),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      engine_native_audit_fields_included: p.child('engine_native_audit_fields_included').out,
      id: p.child('id').out,
      kinesis_stream_name: p.child('kinesis_stream_name').out,
      kms_key_id: p.child('kms_key_id').out,
      mode: p.child('mode').out,
      resource_arn: p.child('resource_arn').out,
    },
    rds_cluster_endpoint(name, block): {
      local p = path(['aws_rds_cluster_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rds_cluster_endpoint: {
              [name]: std.prune({
                cluster_endpoint_identifier: build.template(block.cluster_endpoint_identifier),
                cluster_identifier: build.template(block.cluster_identifier),
                custom_endpoint_type: build.template(block.custom_endpoint_type),
                excluded_members: build.template(std.get(block, 'excluded_members', null, true)),
                static_members: build.template(std.get(block, 'static_members', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster_endpoint_identifier: p.child('cluster_endpoint_identifier').out,
      cluster_identifier: p.child('cluster_identifier').out,
      custom_endpoint_type: p.child('custom_endpoint_type').out,
      endpoint: p.child('endpoint').out,
      excluded_members: p.child('excluded_members').out,
      id: p.child('id').out,
      static_members: p.child('static_members').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    rds_cluster_instance(name, block): {
      local p = path(['aws_rds_cluster_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rds_cluster_instance: {
              [name]: std.prune({
                auto_minor_version_upgrade: build.template(std.get(block, 'auto_minor_version_upgrade', null, true)),
                cluster_identifier: build.template(block.cluster_identifier),
                copy_tags_to_snapshot: build.template(std.get(block, 'copy_tags_to_snapshot', null, true)),
                custom_iam_instance_profile: build.template(std.get(block, 'custom_iam_instance_profile', null, true)),
                engine: build.template(block.engine),
                instance_class: build.template(block.instance_class),
                monitoring_interval: build.template(std.get(block, 'monitoring_interval', null, true)),
                promotion_tier: build.template(std.get(block, 'promotion_tier', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      apply_immediately: p.child('apply_immediately').out,
      arn: p.child('arn').out,
      auto_minor_version_upgrade: p.child('auto_minor_version_upgrade').out,
      availability_zone: p.child('availability_zone').out,
      ca_cert_identifier: p.child('ca_cert_identifier').out,
      cluster_identifier: p.child('cluster_identifier').out,
      copy_tags_to_snapshot: p.child('copy_tags_to_snapshot').out,
      custom_iam_instance_profile: p.child('custom_iam_instance_profile').out,
      db_parameter_group_name: p.child('db_parameter_group_name').out,
      db_subnet_group_name: p.child('db_subnet_group_name').out,
      dbi_resource_id: p.child('dbi_resource_id').out,
      endpoint: p.child('endpoint').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      engine_version_actual: p.child('engine_version_actual').out,
      id: p.child('id').out,
      identifier: p.child('identifier').out,
      identifier_prefix: p.child('identifier_prefix').out,
      instance_class: p.child('instance_class').out,
      kms_key_id: p.child('kms_key_id').out,
      monitoring_interval: p.child('monitoring_interval').out,
      monitoring_role_arn: p.child('monitoring_role_arn').out,
      network_type: p.child('network_type').out,
      performance_insights_enabled: p.child('performance_insights_enabled').out,
      performance_insights_kms_key_id: p.child('performance_insights_kms_key_id').out,
      performance_insights_retention_period: p.child('performance_insights_retention_period').out,
      port: p.child('port').out,
      preferred_backup_window: p.child('preferred_backup_window').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      promotion_tier: p.child('promotion_tier').out,
      publicly_accessible: p.child('publicly_accessible').out,
      storage_encrypted: p.child('storage_encrypted').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      writer: p.child('writer').out,
    },
    rds_cluster_parameter_group(name, block): {
      local p = path(['aws_rds_cluster_parameter_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rds_cluster_parameter_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                family: build.template(block.family),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      family: p.child('family').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    rds_cluster_role_association(name, block): {
      local p = path(['aws_rds_cluster_role_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rds_cluster_role_association: {
              [name]: std.prune({
                db_cluster_identifier: build.template(block.db_cluster_identifier),
                feature_name: build.template(block.feature_name),
                role_arn: build.template(block.role_arn),
              }),
            },
          },
        },
      },
      db_cluster_identifier: p.child('db_cluster_identifier').out,
      feature_name: p.child('feature_name').out,
      id: p.child('id').out,
      role_arn: p.child('role_arn').out,
    },
    rds_custom_db_engine_version(name, block): {
      local p = path(['aws_rds_custom_db_engine_version', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rds_custom_db_engine_version: {
              [name]: std.prune({
                database_installation_files_s3_bucket_name: build.template(std.get(block, 'database_installation_files_s3_bucket_name', null, true)),
                database_installation_files_s3_prefix: build.template(std.get(block, 'database_installation_files_s3_prefix', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                engine: build.template(block.engine),
                engine_version: build.template(block.engine_version),
                filename: build.template(std.get(block, 'filename', null, true)),
                manifest: build.template(std.get(block, 'manifest', null, true)),
                manifest_hash: build.template(std.get(block, 'manifest_hash', null, true)),
                source_image_id: build.template(std.get(block, 'source_image_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      create_time: p.child('create_time').out,
      database_installation_files_s3_bucket_name: p.child('database_installation_files_s3_bucket_name').out,
      database_installation_files_s3_prefix: p.child('database_installation_files_s3_prefix').out,
      db_parameter_group_family: p.child('db_parameter_group_family').out,
      description: p.child('description').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      filename: p.child('filename').out,
      id: p.child('id').out,
      image_id: p.child('image_id').out,
      kms_key_id: p.child('kms_key_id').out,
      major_engine_version: p.child('major_engine_version').out,
      manifest: p.child('manifest').out,
      manifest_computed: p.child('manifest_computed').out,
      manifest_hash: p.child('manifest_hash').out,
      source_image_id: p.child('source_image_id').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    rds_export_task(name, block): {
      local p = path(['aws_rds_export_task', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rds_export_task: {
              [name]: std.prune({
                export_only: build.template(std.get(block, 'export_only', null, true)),
                export_task_identifier: build.template(block.export_task_identifier),
                iam_role_arn: build.template(block.iam_role_arn),
                kms_key_id: build.template(block.kms_key_id),
                s3_bucket_name: build.template(block.s3_bucket_name),
                source_arn: build.template(block.source_arn),
              }),
            },
          },
        },
      },
      export_only: p.child('export_only').out,
      export_task_identifier: p.child('export_task_identifier').out,
      failure_cause: p.child('failure_cause').out,
      iam_role_arn: p.child('iam_role_arn').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      percent_progress: p.child('percent_progress').out,
      s3_bucket_name: p.child('s3_bucket_name').out,
      s3_prefix: p.child('s3_prefix').out,
      snapshot_time: p.child('snapshot_time').out,
      source_arn: p.child('source_arn').out,
      source_type: p.child('source_type').out,
      status: p.child('status').out,
      task_end_time: p.child('task_end_time').out,
      task_start_time: p.child('task_start_time').out,
      warning_message: p.child('warning_message').out,
    },
    rds_global_cluster(name, block): {
      local p = path(['aws_rds_global_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rds_global_cluster: {
              [name]: std.prune({
                database_name: build.template(std.get(block, 'database_name', null, true)),
                deletion_protection: build.template(std.get(block, 'deletion_protection', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                global_cluster_identifier: build.template(block.global_cluster_identifier),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      database_name: p.child('database_name').out,
      deletion_protection: p.child('deletion_protection').out,
      engine: p.child('engine').out,
      engine_lifecycle_support: p.child('engine_lifecycle_support').out,
      engine_version: p.child('engine_version').out,
      engine_version_actual: p.child('engine_version_actual').out,
      force_destroy: p.child('force_destroy').out,
      global_cluster_identifier: p.child('global_cluster_identifier').out,
      global_cluster_members: p.child('global_cluster_members').out,
      global_cluster_resource_id: p.child('global_cluster_resource_id').out,
      id: p.child('id').out,
      source_db_cluster_identifier: p.child('source_db_cluster_identifier').out,
      storage_encrypted: p.child('storage_encrypted').out,
    },
    rds_integration(name, block): {
      local p = path(['aws_rds_integration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rds_integration: {
              [name]: std.prune({
                additional_encryption_context: build.template(std.get(block, 'additional_encryption_context', null, true)),
                integration_name: build.template(block.integration_name),
                source_arn: build.template(block.source_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_arn: build.template(block.target_arn),
              }),
            },
          },
        },
      },
      additional_encryption_context: p.child('additional_encryption_context').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      integration_name: p.child('integration_name').out,
      kms_key_id: p.child('kms_key_id').out,
      source_arn: p.child('source_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_arn: p.child('target_arn').out,
    },
    rds_reserved_instance(name, block): {
      local p = path(['aws_rds_reserved_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rds_reserved_instance: {
              [name]: std.prune({
                instance_count: build.template(std.get(block, 'instance_count', null, true)),
                offering_id: build.template(block.offering_id),
                reservation_id: build.template(std.get(block, 'reservation_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      currency_code: p.child('currency_code').out,
      db_instance_class: p.child('db_instance_class').out,
      duration: p.child('duration').out,
      fixed_price: p.child('fixed_price').out,
      id: p.child('id').out,
      instance_count: p.child('instance_count').out,
      lease_id: p.child('lease_id').out,
      multi_az: p.child('multi_az').out,
      offering_id: p.child('offering_id').out,
      offering_type: p.child('offering_type').out,
      product_description: p.child('product_description').out,
      recurring_charges: p.child('recurring_charges').out,
      reservation_id: p.child('reservation_id').out,
      start_time: p.child('start_time').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      usage_price: p.child('usage_price').out,
    },
    redshift_authentication_profile(name, block): {
      local p = path(['aws_redshift_authentication_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_authentication_profile: {
              [name]: std.prune({
                authentication_profile_content: build.template(block.authentication_profile_content),
                authentication_profile_name: build.template(block.authentication_profile_name),
              }),
            },
          },
        },
      },
      authentication_profile_content: p.child('authentication_profile_content').out,
      authentication_profile_name: p.child('authentication_profile_name').out,
      id: p.child('id').out,
    },
    redshift_cluster(name, block): {
      local p = path(['aws_redshift_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_cluster: {
              [name]: std.prune({
                allow_version_upgrade: build.template(std.get(block, 'allow_version_upgrade', null, true)),
                apply_immediately: build.template(std.get(block, 'apply_immediately', null, true)),
                automated_snapshot_retention_period: build.template(std.get(block, 'automated_snapshot_retention_period', null, true)),
                availability_zone_relocation_enabled: build.template(std.get(block, 'availability_zone_relocation_enabled', null, true)),
                cluster_identifier: build.template(block.cluster_identifier),
                cluster_version: build.template(std.get(block, 'cluster_version', null, true)),
                elastic_ip: build.template(std.get(block, 'elastic_ip', null, true)),
                encrypted: build.template(std.get(block, 'encrypted', null, true)),
                final_snapshot_identifier: build.template(std.get(block, 'final_snapshot_identifier', null, true)),
                maintenance_track_name: build.template(std.get(block, 'maintenance_track_name', null, true)),
                manage_master_password: build.template(std.get(block, 'manage_master_password', null, true)),
                manual_snapshot_retention_period: build.template(std.get(block, 'manual_snapshot_retention_period', null, true)),
                master_password: build.template(std.get(block, 'master_password', null, true)),
                master_username: build.template(std.get(block, 'master_username', null, true)),
                multi_az: build.template(std.get(block, 'multi_az', null, true)),
                node_type: build.template(block.node_type),
                number_of_nodes: build.template(std.get(block, 'number_of_nodes', null, true)),
                owner_account: build.template(std.get(block, 'owner_account', null, true)),
                port: build.template(std.get(block, 'port', null, true)),
                publicly_accessible: build.template(std.get(block, 'publicly_accessible', null, true)),
                skip_final_snapshot: build.template(std.get(block, 'skip_final_snapshot', null, true)),
                snapshot_arn: build.template(std.get(block, 'snapshot_arn', null, true)),
                snapshot_cluster_identifier: build.template(std.get(block, 'snapshot_cluster_identifier', null, true)),
                snapshot_identifier: build.template(std.get(block, 'snapshot_identifier', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allow_version_upgrade: p.child('allow_version_upgrade').out,
      apply_immediately: p.child('apply_immediately').out,
      aqua_configuration_status: p.child('aqua_configuration_status').out,
      arn: p.child('arn').out,
      automated_snapshot_retention_period: p.child('automated_snapshot_retention_period').out,
      availability_zone: p.child('availability_zone').out,
      availability_zone_relocation_enabled: p.child('availability_zone_relocation_enabled').out,
      cluster_identifier: p.child('cluster_identifier').out,
      cluster_namespace_arn: p.child('cluster_namespace_arn').out,
      cluster_nodes: p.child('cluster_nodes').out,
      cluster_parameter_group_name: p.child('cluster_parameter_group_name').out,
      cluster_public_key: p.child('cluster_public_key').out,
      cluster_revision_number: p.child('cluster_revision_number').out,
      cluster_subnet_group_name: p.child('cluster_subnet_group_name').out,
      cluster_type: p.child('cluster_type').out,
      cluster_version: p.child('cluster_version').out,
      database_name: p.child('database_name').out,
      default_iam_role_arn: p.child('default_iam_role_arn').out,
      dns_name: p.child('dns_name').out,
      elastic_ip: p.child('elastic_ip').out,
      encrypted: p.child('encrypted').out,
      endpoint: p.child('endpoint').out,
      enhanced_vpc_routing: p.child('enhanced_vpc_routing').out,
      final_snapshot_identifier: p.child('final_snapshot_identifier').out,
      iam_roles: p.child('iam_roles').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      maintenance_track_name: p.child('maintenance_track_name').out,
      manage_master_password: p.child('manage_master_password').out,
      manual_snapshot_retention_period: p.child('manual_snapshot_retention_period').out,
      master_password: p.child('master_password').out,
      master_password_secret_arn: p.child('master_password_secret_arn').out,
      master_password_secret_kms_key_id: p.child('master_password_secret_kms_key_id').out,
      master_username: p.child('master_username').out,
      multi_az: p.child('multi_az').out,
      node_type: p.child('node_type').out,
      number_of_nodes: p.child('number_of_nodes').out,
      owner_account: p.child('owner_account').out,
      port: p.child('port').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      publicly_accessible: p.child('publicly_accessible').out,
      skip_final_snapshot: p.child('skip_final_snapshot').out,
      snapshot_arn: p.child('snapshot_arn').out,
      snapshot_cluster_identifier: p.child('snapshot_cluster_identifier').out,
      snapshot_identifier: p.child('snapshot_identifier').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    redshift_cluster_iam_roles(name, block): {
      local p = path(['aws_redshift_cluster_iam_roles', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_cluster_iam_roles: {
              [name]: std.prune({
                cluster_identifier: build.template(block.cluster_identifier),
              }),
            },
          },
        },
      },
      cluster_identifier: p.child('cluster_identifier').out,
      default_iam_role_arn: p.child('default_iam_role_arn').out,
      iam_role_arns: p.child('iam_role_arns').out,
      id: p.child('id').out,
    },
    redshift_cluster_snapshot(name, block): {
      local p = path(['aws_redshift_cluster_snapshot', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_cluster_snapshot: {
              [name]: std.prune({
                cluster_identifier: build.template(block.cluster_identifier),
                manual_snapshot_retention_period: build.template(std.get(block, 'manual_snapshot_retention_period', null, true)),
                snapshot_identifier: build.template(block.snapshot_identifier),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster_identifier: p.child('cluster_identifier').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      manual_snapshot_retention_period: p.child('manual_snapshot_retention_period').out,
      owner_account: p.child('owner_account').out,
      snapshot_identifier: p.child('snapshot_identifier').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    redshift_data_share_authorization(name, block): {
      local p = path(['aws_redshift_data_share_authorization', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_data_share_authorization: {
              [name]: std.prune({
                allow_writes: build.template(std.get(block, 'allow_writes', null, true)),
                consumer_identifier: build.template(block.consumer_identifier),
                data_share_arn: build.template(block.data_share_arn),
              }),
            },
          },
        },
      },
      allow_writes: p.child('allow_writes').out,
      consumer_identifier: p.child('consumer_identifier').out,
      data_share_arn: p.child('data_share_arn').out,
      id: p.child('id').out,
      managed_by: p.child('managed_by').out,
      producer_arn: p.child('producer_arn').out,
    },
    redshift_data_share_consumer_association(name, block): {
      local p = path(['aws_redshift_data_share_consumer_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_data_share_consumer_association: {
              [name]: std.prune({
                allow_writes: build.template(std.get(block, 'allow_writes', null, true)),
                associate_entire_account: build.template(std.get(block, 'associate_entire_account', null, true)),
                consumer_arn: build.template(std.get(block, 'consumer_arn', null, true)),
                consumer_region: build.template(std.get(block, 'consumer_region', null, true)),
                data_share_arn: build.template(block.data_share_arn),
              }),
            },
          },
        },
      },
      allow_writes: p.child('allow_writes').out,
      associate_entire_account: p.child('associate_entire_account').out,
      consumer_arn: p.child('consumer_arn').out,
      consumer_region: p.child('consumer_region').out,
      data_share_arn: p.child('data_share_arn').out,
      id: p.child('id').out,
      managed_by: p.child('managed_by').out,
      producer_arn: p.child('producer_arn').out,
    },
    redshift_endpoint_access(name, block): {
      local p = path(['aws_redshift_endpoint_access', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_endpoint_access: {
              [name]: std.prune({
                cluster_identifier: build.template(block.cluster_identifier),
                endpoint_name: build.template(block.endpoint_name),
                subnet_group_name: build.template(block.subnet_group_name),
              }),
            },
          },
        },
      },
      address: p.child('address').out,
      cluster_identifier: p.child('cluster_identifier').out,
      endpoint_name: p.child('endpoint_name').out,
      id: p.child('id').out,
      port: p.child('port').out,
      resource_owner: p.child('resource_owner').out,
      subnet_group_name: p.child('subnet_group_name').out,
      vpc_endpoint: p.child('vpc_endpoint').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    redshift_endpoint_authorization(name, block): {
      local p = path(['aws_redshift_endpoint_authorization', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_endpoint_authorization: {
              [name]: std.prune({
                account: build.template(block.account),
                cluster_identifier: build.template(block.cluster_identifier),
                force_delete: build.template(std.get(block, 'force_delete', null, true)),
                vpc_ids: build.template(std.get(block, 'vpc_ids', null, true)),
              }),
            },
          },
        },
      },
      account: p.child('account').out,
      allowed_all_vpcs: p.child('allowed_all_vpcs').out,
      cluster_identifier: p.child('cluster_identifier').out,
      endpoint_count: p.child('endpoint_count').out,
      force_delete: p.child('force_delete').out,
      grantee: p.child('grantee').out,
      grantor: p.child('grantor').out,
      id: p.child('id').out,
      vpc_ids: p.child('vpc_ids').out,
    },
    redshift_event_subscription(name, block): {
      local p = path(['aws_redshift_event_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_event_subscription: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                event_categories: build.template(std.get(block, 'event_categories', null, true)),
                name: build.template(block.name),
                severity: build.template(std.get(block, 'severity', null, true)),
                sns_topic_arn: build.template(block.sns_topic_arn),
                source_ids: build.template(std.get(block, 'source_ids', null, true)),
                source_type: build.template(std.get(block, 'source_type', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      customer_aws_id: p.child('customer_aws_id').out,
      enabled: p.child('enabled').out,
      event_categories: p.child('event_categories').out,
      id: p.child('id').out,
      name: p.child('name').out,
      severity: p.child('severity').out,
      sns_topic_arn: p.child('sns_topic_arn').out,
      source_ids: p.child('source_ids').out,
      source_type: p.child('source_type').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    redshift_hsm_client_certificate(name, block): {
      local p = path(['aws_redshift_hsm_client_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_hsm_client_certificate: {
              [name]: std.prune({
                hsm_client_certificate_identifier: build.template(block.hsm_client_certificate_identifier),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      hsm_client_certificate_identifier: p.child('hsm_client_certificate_identifier').out,
      hsm_client_certificate_public_key: p.child('hsm_client_certificate_public_key').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    redshift_hsm_configuration(name, block): {
      local p = path(['aws_redshift_hsm_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_hsm_configuration: {
              [name]: std.prune({
                description: build.template(block.description),
                hsm_configuration_identifier: build.template(block.hsm_configuration_identifier),
                hsm_ip_address: build.template(block.hsm_ip_address),
                hsm_partition_name: build.template(block.hsm_partition_name),
                hsm_partition_password: build.template(block.hsm_partition_password),
                hsm_server_public_certificate: build.template(block.hsm_server_public_certificate),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      hsm_configuration_identifier: p.child('hsm_configuration_identifier').out,
      hsm_ip_address: p.child('hsm_ip_address').out,
      hsm_partition_name: p.child('hsm_partition_name').out,
      hsm_partition_password: p.child('hsm_partition_password').out,
      hsm_server_public_certificate: p.child('hsm_server_public_certificate').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    redshift_logging(name, block): {
      local p = path(['aws_redshift_logging', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_logging: {
              [name]: std.prune({
                bucket_name: build.template(std.get(block, 'bucket_name', null, true)),
                cluster_identifier: build.template(block.cluster_identifier),
                log_destination_type: build.template(std.get(block, 'log_destination_type', null, true)),
                log_exports: build.template(std.get(block, 'log_exports', null, true)),
                s3_key_prefix: build.template(std.get(block, 's3_key_prefix', null, true)),
              }),
            },
          },
        },
      },
      bucket_name: p.child('bucket_name').out,
      cluster_identifier: p.child('cluster_identifier').out,
      id: p.child('id').out,
      log_destination_type: p.child('log_destination_type').out,
      log_exports: p.child('log_exports').out,
      s3_key_prefix: p.child('s3_key_prefix').out,
    },
    redshift_parameter_group(name, block): {
      local p = path(['aws_redshift_parameter_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_parameter_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                family: build.template(block.family),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      family: p.child('family').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    redshift_partner(name, block): {
      local p = path(['aws_redshift_partner', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_partner: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
                cluster_identifier: build.template(block.cluster_identifier),
                database_name: build.template(block.database_name),
                partner_name: build.template(block.partner_name),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      cluster_identifier: p.child('cluster_identifier').out,
      database_name: p.child('database_name').out,
      id: p.child('id').out,
      partner_name: p.child('partner_name').out,
      status: p.child('status').out,
      status_message: p.child('status_message').out,
    },
    redshift_resource_policy(name, block): {
      local p = path(['aws_redshift_resource_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_resource_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      resource_arn: p.child('resource_arn').out,
    },
    redshift_scheduled_action(name, block): {
      local p = path(['aws_redshift_scheduled_action', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_scheduled_action: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                enable: build.template(std.get(block, 'enable', null, true)),
                end_time: build.template(std.get(block, 'end_time', null, true)),
                iam_role: build.template(block.iam_role),
                name: build.template(block.name),
                schedule: build.template(block.schedule),
                start_time: build.template(std.get(block, 'start_time', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      enable: p.child('enable').out,
      end_time: p.child('end_time').out,
      iam_role: p.child('iam_role').out,
      id: p.child('id').out,
      name: p.child('name').out,
      schedule: p.child('schedule').out,
      start_time: p.child('start_time').out,
    },
    redshift_snapshot_copy(name, block): {
      local p = path(['aws_redshift_snapshot_copy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_snapshot_copy: {
              [name]: std.prune({
                cluster_identifier: build.template(block.cluster_identifier),
                destination_region: build.template(block.destination_region),
                snapshot_copy_grant_name: build.template(std.get(block, 'snapshot_copy_grant_name', null, true)),
              }),
            },
          },
        },
      },
      cluster_identifier: p.child('cluster_identifier').out,
      destination_region: p.child('destination_region').out,
      id: p.child('id').out,
      manual_snapshot_retention_period: p.child('manual_snapshot_retention_period').out,
      retention_period: p.child('retention_period').out,
      snapshot_copy_grant_name: p.child('snapshot_copy_grant_name').out,
    },
    redshift_snapshot_copy_grant(name, block): {
      local p = path(['aws_redshift_snapshot_copy_grant', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_snapshot_copy_grant: {
              [name]: std.prune({
                snapshot_copy_grant_name: build.template(block.snapshot_copy_grant_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      snapshot_copy_grant_name: p.child('snapshot_copy_grant_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    redshift_snapshot_schedule(name, block): {
      local p = path(['aws_redshift_snapshot_schedule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_snapshot_schedule: {
              [name]: std.prune({
                definitions: build.template(block.definitions),
                description: build.template(std.get(block, 'description', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      definitions: p.child('definitions').out,
      description: p.child('description').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      identifier: p.child('identifier').out,
      identifier_prefix: p.child('identifier_prefix').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    redshift_snapshot_schedule_association(name, block): {
      local p = path(['aws_redshift_snapshot_schedule_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_snapshot_schedule_association: {
              [name]: std.prune({
                cluster_identifier: build.template(block.cluster_identifier),
                schedule_identifier: build.template(block.schedule_identifier),
              }),
            },
          },
        },
      },
      cluster_identifier: p.child('cluster_identifier').out,
      id: p.child('id').out,
      schedule_identifier: p.child('schedule_identifier').out,
    },
    redshift_subnet_group(name, block): {
      local p = path(['aws_redshift_subnet_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_subnet_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                subnet_ids: build.template(block.subnet_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    redshift_usage_limit(name, block): {
      local p = path(['aws_redshift_usage_limit', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshift_usage_limit: {
              [name]: std.prune({
                amount: build.template(block.amount),
                breach_action: build.template(std.get(block, 'breach_action', null, true)),
                cluster_identifier: build.template(block.cluster_identifier),
                feature_type: build.template(block.feature_type),
                limit_type: build.template(block.limit_type),
                period: build.template(std.get(block, 'period', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      amount: p.child('amount').out,
      arn: p.child('arn').out,
      breach_action: p.child('breach_action').out,
      cluster_identifier: p.child('cluster_identifier').out,
      feature_type: p.child('feature_type').out,
      id: p.child('id').out,
      limit_type: p.child('limit_type').out,
      period: p.child('period').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    redshiftdata_statement(name, block): {
      local p = path(['aws_redshiftdata_statement', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshiftdata_statement: {
              [name]: std.prune({
                cluster_identifier: build.template(std.get(block, 'cluster_identifier', null, true)),
                database: build.template(block.database),
                db_user: build.template(std.get(block, 'db_user', null, true)),
                secret_arn: build.template(std.get(block, 'secret_arn', null, true)),
                sql: build.template(block.sql),
                statement_name: build.template(std.get(block, 'statement_name', null, true)),
                with_event: build.template(std.get(block, 'with_event', null, true)),
                workgroup_name: build.template(std.get(block, 'workgroup_name', null, true)),
              }),
            },
          },
        },
      },
      cluster_identifier: p.child('cluster_identifier').out,
      database: p.child('database').out,
      db_user: p.child('db_user').out,
      id: p.child('id').out,
      secret_arn: p.child('secret_arn').out,
      sql: p.child('sql').out,
      statement_name: p.child('statement_name').out,
      with_event: p.child('with_event').out,
      workgroup_name: p.child('workgroup_name').out,
    },
    redshiftserverless_custom_domain_association(name, block): {
      local p = path(['aws_redshiftserverless_custom_domain_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshiftserverless_custom_domain_association: {
              [name]: std.prune({
                custom_domain_certificate_arn: build.template(block.custom_domain_certificate_arn),
                custom_domain_name: build.template(block.custom_domain_name),
                workgroup_name: build.template(block.workgroup_name),
              }),
            },
          },
        },
      },
      custom_domain_certificate_arn: p.child('custom_domain_certificate_arn').out,
      custom_domain_certificate_expiry_time: p.child('custom_domain_certificate_expiry_time').out,
      custom_domain_name: p.child('custom_domain_name').out,
      id: p.child('id').out,
      workgroup_name: p.child('workgroup_name').out,
    },
    redshiftserverless_endpoint_access(name, block): {
      local p = path(['aws_redshiftserverless_endpoint_access', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshiftserverless_endpoint_access: {
              [name]: std.prune({
                endpoint_name: build.template(block.endpoint_name),
                owner_account: build.template(std.get(block, 'owner_account', null, true)),
                subnet_ids: build.template(block.subnet_ids),
                workgroup_name: build.template(block.workgroup_name),
              }),
            },
          },
        },
      },
      address: p.child('address').out,
      arn: p.child('arn').out,
      endpoint_name: p.child('endpoint_name').out,
      id: p.child('id').out,
      owner_account: p.child('owner_account').out,
      port: p.child('port').out,
      subnet_ids: p.child('subnet_ids').out,
      vpc_endpoint: p.child('vpc_endpoint').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
      workgroup_name: p.child('workgroup_name').out,
    },
    redshiftserverless_namespace(name, block): {
      local p = path(['aws_redshiftserverless_namespace', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshiftserverless_namespace: {
              [name]: std.prune({
                admin_user_password: build.template(std.get(block, 'admin_user_password', null, true)),
                default_iam_role_arn: build.template(std.get(block, 'default_iam_role_arn', null, true)),
                log_exports: build.template(std.get(block, 'log_exports', null, true)),
                manage_admin_password: build.template(std.get(block, 'manage_admin_password', null, true)),
                namespace_name: build.template(block.namespace_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      admin_password_secret_arn: p.child('admin_password_secret_arn').out,
      admin_password_secret_kms_key_id: p.child('admin_password_secret_kms_key_id').out,
      admin_user_password: p.child('admin_user_password').out,
      admin_username: p.child('admin_username').out,
      arn: p.child('arn').out,
      db_name: p.child('db_name').out,
      default_iam_role_arn: p.child('default_iam_role_arn').out,
      iam_roles: p.child('iam_roles').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      log_exports: p.child('log_exports').out,
      manage_admin_password: p.child('manage_admin_password').out,
      namespace_id: p.child('namespace_id').out,
      namespace_name: p.child('namespace_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    redshiftserverless_resource_policy(name, block): {
      local p = path(['aws_redshiftserverless_resource_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshiftserverless_resource_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      resource_arn: p.child('resource_arn').out,
    },
    redshiftserverless_snapshot(name, block): {
      local p = path(['aws_redshiftserverless_snapshot', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshiftserverless_snapshot: {
              [name]: std.prune({
                namespace_name: build.template(block.namespace_name),
                retention_period: build.template(std.get(block, 'retention_period', null, true)),
                snapshot_name: build.template(block.snapshot_name),
              }),
            },
          },
        },
      },
      accounts_with_provisioned_restore_access: p.child('accounts_with_provisioned_restore_access').out,
      accounts_with_restore_access: p.child('accounts_with_restore_access').out,
      admin_username: p.child('admin_username').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      namespace_arn: p.child('namespace_arn').out,
      namespace_name: p.child('namespace_name').out,
      owner_account: p.child('owner_account').out,
      retention_period: p.child('retention_period').out,
      snapshot_name: p.child('snapshot_name').out,
    },
    redshiftserverless_usage_limit(name, block): {
      local p = path(['aws_redshiftserverless_usage_limit', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshiftserverless_usage_limit: {
              [name]: std.prune({
                amount: build.template(block.amount),
                breach_action: build.template(std.get(block, 'breach_action', null, true)),
                period: build.template(std.get(block, 'period', null, true)),
                resource_arn: build.template(block.resource_arn),
                usage_type: build.template(block.usage_type),
              }),
            },
          },
        },
      },
      amount: p.child('amount').out,
      arn: p.child('arn').out,
      breach_action: p.child('breach_action').out,
      id: p.child('id').out,
      period: p.child('period').out,
      resource_arn: p.child('resource_arn').out,
      usage_type: p.child('usage_type').out,
    },
    redshiftserverless_workgroup(name, block): {
      local p = path(['aws_redshiftserverless_workgroup', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_redshiftserverless_workgroup: {
              [name]: std.prune({
                enhanced_vpc_routing: build.template(std.get(block, 'enhanced_vpc_routing', null, true)),
                max_capacity: build.template(std.get(block, 'max_capacity', null, true)),
                namespace_name: build.template(block.namespace_name),
                publicly_accessible: build.template(std.get(block, 'publicly_accessible', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                workgroup_name: build.template(block.workgroup_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      base_capacity: p.child('base_capacity').out,
      endpoint: p.child('endpoint').out,
      enhanced_vpc_routing: p.child('enhanced_vpc_routing').out,
      id: p.child('id').out,
      max_capacity: p.child('max_capacity').out,
      namespace_name: p.child('namespace_name').out,
      port: p.child('port').out,
      publicly_accessible: p.child('publicly_accessible').out,
      security_group_ids: p.child('security_group_ids').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      workgroup_id: p.child('workgroup_id').out,
      workgroup_name: p.child('workgroup_name').out,
    },
    rekognition_collection(name, block): {
      local p = path(['aws_rekognition_collection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rekognition_collection: {
              [name]: std.prune({
                collection_id: build.template(block.collection_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      collection_id: p.child('collection_id').out,
      face_model_version: p.child('face_model_version').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    rekognition_project(name, block): {
      local p = path(['aws_rekognition_project', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rekognition_project: {
              [name]: std.prune({
                feature: build.template(std.get(block, 'feature', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_update: p.child('auto_update').out,
      feature: p.child('feature').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    rekognition_stream_processor(name, block): {
      local p = path(['aws_rekognition_stream_processor', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rekognition_stream_processor: {
              [name]: std.prune({
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                name: build.template(block.name),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      kms_key_id: p.child('kms_key_id').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      stream_processor_arn: p.child('stream_processor_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    resiliencehub_resiliency_policy(name, block): {
      local p = path(['aws_resiliencehub_resiliency_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_resiliencehub_resiliency_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                tier: build.template(block.tier),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      data_location_constraint: p.child('data_location_constraint').out,
      description: p.child('description').out,
      estimated_cost_tier: p.child('estimated_cost_tier').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tier: p.child('tier').out,
    },
    resourceexplorer2_index(name, block): {
      local p = path(['aws_resourceexplorer2_index', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_resourceexplorer2_index: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    resourceexplorer2_view(name, block): {
      local p = path(['aws_resourceexplorer2_view', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_resourceexplorer2_view: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_view: p.child('default_view').out,
      id: p.child('id').out,
      name: p.child('name').out,
      scope: p.child('scope').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    resourcegroups_group(name, block): {
      local p = path(['aws_resourcegroups_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_resourcegroups_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    resourcegroups_resource(name, block): {
      local p = path(['aws_resourcegroups_resource', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_resourcegroups_resource: {
              [name]: std.prune({
                group_arn: build.template(block.group_arn),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      group_arn: p.child('group_arn').out,
      id: p.child('id').out,
      resource_arn: p.child('resource_arn').out,
      resource_type: p.child('resource_type').out,
    },
    rolesanywhere_profile(name, block): {
      local p = path(['aws_rolesanywhere_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rolesanywhere_profile: {
              [name]: std.prune({
                enabled: build.template(std.get(block, 'enabled', null, true)),
                managed_policy_arns: build.template(std.get(block, 'managed_policy_arns', null, true)),
                name: build.template(block.name),
                require_instance_properties: build.template(std.get(block, 'require_instance_properties', null, true)),
                role_arns: build.template(std.get(block, 'role_arns', null, true)),
                session_policy: build.template(std.get(block, 'session_policy', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      duration_seconds: p.child('duration_seconds').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      managed_policy_arns: p.child('managed_policy_arns').out,
      name: p.child('name').out,
      require_instance_properties: p.child('require_instance_properties').out,
      role_arns: p.child('role_arns').out,
      session_policy: p.child('session_policy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    rolesanywhere_trust_anchor(name, block): {
      local p = path(['aws_rolesanywhere_trust_anchor', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rolesanywhere_trust_anchor: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    route(name, block): {
      local p = path(['aws_route', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route: {
              [name]: std.prune({
                carrier_gateway_id: build.template(std.get(block, 'carrier_gateway_id', null, true)),
                core_network_arn: build.template(std.get(block, 'core_network_arn', null, true)),
                destination_cidr_block: build.template(std.get(block, 'destination_cidr_block', null, true)),
                destination_ipv6_cidr_block: build.template(std.get(block, 'destination_ipv6_cidr_block', null, true)),
                destination_prefix_list_id: build.template(std.get(block, 'destination_prefix_list_id', null, true)),
                egress_only_gateway_id: build.template(std.get(block, 'egress_only_gateway_id', null, true)),
                gateway_id: build.template(std.get(block, 'gateway_id', null, true)),
                local_gateway_id: build.template(std.get(block, 'local_gateway_id', null, true)),
                nat_gateway_id: build.template(std.get(block, 'nat_gateway_id', null, true)),
                route_table_id: build.template(block.route_table_id),
                transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null, true)),
                vpc_endpoint_id: build.template(std.get(block, 'vpc_endpoint_id', null, true)),
                vpc_peering_connection_id: build.template(std.get(block, 'vpc_peering_connection_id', null, true)),
              }),
            },
          },
        },
      },
      carrier_gateway_id: p.child('carrier_gateway_id').out,
      core_network_arn: p.child('core_network_arn').out,
      destination_cidr_block: p.child('destination_cidr_block').out,
      destination_ipv6_cidr_block: p.child('destination_ipv6_cidr_block').out,
      destination_prefix_list_id: p.child('destination_prefix_list_id').out,
      egress_only_gateway_id: p.child('egress_only_gateway_id').out,
      gateway_id: p.child('gateway_id').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      instance_owner_id: p.child('instance_owner_id').out,
      local_gateway_id: p.child('local_gateway_id').out,
      nat_gateway_id: p.child('nat_gateway_id').out,
      network_interface_id: p.child('network_interface_id').out,
      origin: p.child('origin').out,
      route_table_id: p.child('route_table_id').out,
      state: p.child('state').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      vpc_endpoint_id: p.child('vpc_endpoint_id').out,
      vpc_peering_connection_id: p.child('vpc_peering_connection_id').out,
    },
    route53_cidr_collection(name, block): {
      local p = path(['aws_route53_cidr_collection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_cidr_collection: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      version: p.child('version').out,
    },
    route53_cidr_location(name, block): {
      local p = path(['aws_route53_cidr_location', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_cidr_location: {
              [name]: std.prune({
                cidr_blocks: build.template(block.cidr_blocks),
                cidr_collection_id: build.template(block.cidr_collection_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      cidr_blocks: p.child('cidr_blocks').out,
      cidr_collection_id: p.child('cidr_collection_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    route53_delegation_set(name, block): {
      local p = path(['aws_route53_delegation_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_delegation_set: {
              [name]: std.prune({
                reference_name: build.template(std.get(block, 'reference_name', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name_servers: p.child('name_servers').out,
      reference_name: p.child('reference_name').out,
    },
    route53_health_check(name, block): {
      local p = path(['aws_route53_health_check', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_health_check: {
              [name]: std.prune({
                child_health_threshold: build.template(std.get(block, 'child_health_threshold', null, true)),
                child_healthchecks: build.template(std.get(block, 'child_healthchecks', null, true)),
                cloudwatch_alarm_name: build.template(std.get(block, 'cloudwatch_alarm_name', null, true)),
                cloudwatch_alarm_region: build.template(std.get(block, 'cloudwatch_alarm_region', null, true)),
                disabled: build.template(std.get(block, 'disabled', null, true)),
                fqdn: build.template(std.get(block, 'fqdn', null, true)),
                insufficient_data_health_status: build.template(std.get(block, 'insufficient_data_health_status', null, true)),
                invert_healthcheck: build.template(std.get(block, 'invert_healthcheck', null, true)),
                ip_address: build.template(std.get(block, 'ip_address', null, true)),
                measure_latency: build.template(std.get(block, 'measure_latency', null, true)),
                port: build.template(std.get(block, 'port', null, true)),
                reference_name: build.template(std.get(block, 'reference_name', null, true)),
                regions: build.template(std.get(block, 'regions', null, true)),
                request_interval: build.template(std.get(block, 'request_interval', null, true)),
                resource_path: build.template(std.get(block, 'resource_path', null, true)),
                routing_control_arn: build.template(std.get(block, 'routing_control_arn', null, true)),
                search_string: build.template(std.get(block, 'search_string', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      child_health_threshold: p.child('child_health_threshold').out,
      child_healthchecks: p.child('child_healthchecks').out,
      cloudwatch_alarm_name: p.child('cloudwatch_alarm_name').out,
      cloudwatch_alarm_region: p.child('cloudwatch_alarm_region').out,
      disabled: p.child('disabled').out,
      enable_sni: p.child('enable_sni').out,
      failure_threshold: p.child('failure_threshold').out,
      fqdn: p.child('fqdn').out,
      id: p.child('id').out,
      insufficient_data_health_status: p.child('insufficient_data_health_status').out,
      invert_healthcheck: p.child('invert_healthcheck').out,
      ip_address: p.child('ip_address').out,
      measure_latency: p.child('measure_latency').out,
      port: p.child('port').out,
      reference_name: p.child('reference_name').out,
      regions: p.child('regions').out,
      request_interval: p.child('request_interval').out,
      resource_path: p.child('resource_path').out,
      routing_control_arn: p.child('routing_control_arn').out,
      search_string: p.child('search_string').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    route53_hosted_zone_dnssec(name, block): {
      local p = path(['aws_route53_hosted_zone_dnssec', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_hosted_zone_dnssec: {
              [name]: std.prune({
                hosted_zone_id: build.template(block.hosted_zone_id),
                signing_status: build.template(std.get(block, 'signing_status', null, true)),
              }),
            },
          },
        },
      },
      hosted_zone_id: p.child('hosted_zone_id').out,
      id: p.child('id').out,
      signing_status: p.child('signing_status').out,
    },
    route53_key_signing_key(name, block): {
      local p = path(['aws_route53_key_signing_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_key_signing_key: {
              [name]: std.prune({
                hosted_zone_id: build.template(block.hosted_zone_id),
                key_management_service_arn: build.template(block.key_management_service_arn),
                name: build.template(block.name),
                status: build.template(std.get(block, 'status', null, true)),
              }),
            },
          },
        },
      },
      digest_algorithm_mnemonic: p.child('digest_algorithm_mnemonic').out,
      digest_algorithm_type: p.child('digest_algorithm_type').out,
      digest_value: p.child('digest_value').out,
      dnskey_record: p.child('dnskey_record').out,
      ds_record: p.child('ds_record').out,
      flag: p.child('flag').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      id: p.child('id').out,
      key_management_service_arn: p.child('key_management_service_arn').out,
      key_tag: p.child('key_tag').out,
      name: p.child('name').out,
      public_key: p.child('public_key').out,
      signing_algorithm_mnemonic: p.child('signing_algorithm_mnemonic').out,
      signing_algorithm_type: p.child('signing_algorithm_type').out,
      status: p.child('status').out,
    },
    route53_query_log(name, block): {
      local p = path(['aws_route53_query_log', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_query_log: {
              [name]: std.prune({
                cloudwatch_log_group_arn: build.template(block.cloudwatch_log_group_arn),
                zone_id: build.template(block.zone_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cloudwatch_log_group_arn: p.child('cloudwatch_log_group_arn').out,
      id: p.child('id').out,
      zone_id: p.child('zone_id').out,
    },
    route53_record(name, block): {
      local p = path(['aws_route53_record', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_record: {
              [name]: std.prune({
                health_check_id: build.template(std.get(block, 'health_check_id', null, true)),
                multivalue_answer_routing_policy: build.template(std.get(block, 'multivalue_answer_routing_policy', null, true)),
                name: build.template(block.name),
                records: build.template(std.get(block, 'records', null, true)),
                set_identifier: build.template(std.get(block, 'set_identifier', null, true)),
                ttl: build.template(std.get(block, 'ttl', null, true)),
                type: build.template(block.type),
                zone_id: build.template(block.zone_id),
              }),
            },
          },
        },
      },
      allow_overwrite: p.child('allow_overwrite').out,
      fqdn: p.child('fqdn').out,
      health_check_id: p.child('health_check_id').out,
      id: p.child('id').out,
      multivalue_answer_routing_policy: p.child('multivalue_answer_routing_policy').out,
      name: p.child('name').out,
      records: p.child('records').out,
      set_identifier: p.child('set_identifier').out,
      ttl: p.child('ttl').out,
      type: p.child('type').out,
      zone_id: p.child('zone_id').out,
    },
    route53_resolver_config(name, block): {
      local p = path(['aws_route53_resolver_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_resolver_config: {
              [name]: std.prune({
                autodefined_reverse_flag: build.template(block.autodefined_reverse_flag),
                resource_id: build.template(block.resource_id),
              }),
            },
          },
        },
      },
      autodefined_reverse_flag: p.child('autodefined_reverse_flag').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      resource_id: p.child('resource_id').out,
    },
    route53_resolver_dnssec_config(name, block): {
      local p = path(['aws_route53_resolver_dnssec_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_resolver_dnssec_config: {
              [name]: std.prune({
                resource_id: build.template(block.resource_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      resource_id: p.child('resource_id').out,
      validation_status: p.child('validation_status').out,
    },
    route53_resolver_endpoint(name, block): {
      local p = path(['aws_route53_resolver_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_resolver_endpoint: {
              [name]: std.prune({
                direction: build.template(block.direction),
                name: build.template(std.get(block, 'name', null, true)),
                security_group_ids: build.template(block.security_group_ids),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      direction: p.child('direction').out,
      host_vpc_id: p.child('host_vpc_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      protocols: p.child('protocols').out,
      resolver_endpoint_type: p.child('resolver_endpoint_type').out,
      security_group_ids: p.child('security_group_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    route53_resolver_firewall_config(name, block): {
      local p = path(['aws_route53_resolver_firewall_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_resolver_firewall_config: {
              [name]: std.prune({
                resource_id: build.template(block.resource_id),
              }),
            },
          },
        },
      },
      firewall_fail_open: p.child('firewall_fail_open').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      resource_id: p.child('resource_id').out,
    },
    route53_resolver_firewall_domain_list(name, block): {
      local p = path(['aws_route53_resolver_firewall_domain_list', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_resolver_firewall_domain_list: {
              [name]: std.prune({
                domains: build.template(std.get(block, 'domains', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      domains: p.child('domains').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    route53_resolver_firewall_rule(name, block): {
      local p = path(['aws_route53_resolver_firewall_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_resolver_firewall_rule: {
              [name]: std.prune({
                action: build.template(block.action),
                block_override_dns_type: build.template(std.get(block, 'block_override_dns_type', null, true)),
                block_override_domain: build.template(std.get(block, 'block_override_domain', null, true)),
                block_override_ttl: build.template(std.get(block, 'block_override_ttl', null, true)),
                block_response: build.template(std.get(block, 'block_response', null, true)),
                firewall_domain_list_id: build.template(block.firewall_domain_list_id),
                firewall_domain_redirection_action: build.template(std.get(block, 'firewall_domain_redirection_action', null, true)),
                firewall_rule_group_id: build.template(block.firewall_rule_group_id),
                name: build.template(block.name),
                priority: build.template(block.priority),
                q_type: build.template(std.get(block, 'q_type', null, true)),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      block_override_dns_type: p.child('block_override_dns_type').out,
      block_override_domain: p.child('block_override_domain').out,
      block_override_ttl: p.child('block_override_ttl').out,
      block_response: p.child('block_response').out,
      firewall_domain_list_id: p.child('firewall_domain_list_id').out,
      firewall_domain_redirection_action: p.child('firewall_domain_redirection_action').out,
      firewall_rule_group_id: p.child('firewall_rule_group_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      q_type: p.child('q_type').out,
    },
    route53_resolver_firewall_rule_group(name, block): {
      local p = path(['aws_route53_resolver_firewall_rule_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_resolver_firewall_rule_group: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      share_status: p.child('share_status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    route53_resolver_firewall_rule_group_association(name, block): {
      local p = path(['aws_route53_resolver_firewall_rule_group_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_resolver_firewall_rule_group_association: {
              [name]: std.prune({
                firewall_rule_group_id: build.template(block.firewall_rule_group_id),
                name: build.template(block.name),
                priority: build.template(block.priority),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      firewall_rule_group_id: p.child('firewall_rule_group_id').out,
      id: p.child('id').out,
      mutation_protection: p.child('mutation_protection').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    route53_resolver_query_log_config(name, block): {
      local p = path(['aws_route53_resolver_query_log_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_resolver_query_log_config: {
              [name]: std.prune({
                destination_arn: build.template(block.destination_arn),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      destination_arn: p.child('destination_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      share_status: p.child('share_status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    route53_resolver_query_log_config_association(name, block): {
      local p = path(['aws_route53_resolver_query_log_config_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_resolver_query_log_config_association: {
              [name]: std.prune({
                resolver_query_log_config_id: build.template(block.resolver_query_log_config_id),
                resource_id: build.template(block.resource_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      resolver_query_log_config_id: p.child('resolver_query_log_config_id').out,
      resource_id: p.child('resource_id').out,
    },
    route53_resolver_rule(name, block): {
      local p = path(['aws_route53_resolver_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_resolver_rule: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
                name: build.template(std.get(block, 'name', null, true)),
                resolver_endpoint_id: build.template(std.get(block, 'resolver_endpoint_id', null, true)),
                rule_type: build.template(block.rule_type),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      resolver_endpoint_id: p.child('resolver_endpoint_id').out,
      rule_type: p.child('rule_type').out,
      share_status: p.child('share_status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    route53_resolver_rule_association(name, block): {
      local p = path(['aws_route53_resolver_rule_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_resolver_rule_association: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                resolver_rule_id: build.template(block.resolver_rule_id),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      resolver_rule_id: p.child('resolver_rule_id').out,
      vpc_id: p.child('vpc_id').out,
    },
    route53_traffic_policy(name, block): {
      local p = path(['aws_route53_traffic_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_traffic_policy: {
              [name]: std.prune({
                comment: build.template(std.get(block, 'comment', null, true)),
                document: build.template(block.document),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      comment: p.child('comment').out,
      document: p.child('document').out,
      id: p.child('id').out,
      name: p.child('name').out,
      type: p.child('type').out,
      version: p.child('version').out,
    },
    route53_traffic_policy_instance(name, block): {
      local p = path(['aws_route53_traffic_policy_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_traffic_policy_instance: {
              [name]: std.prune({
                hosted_zone_id: build.template(block.hosted_zone_id),
                name: build.template(block.name),
                traffic_policy_id: build.template(block.traffic_policy_id),
                traffic_policy_version: build.template(block.traffic_policy_version),
                ttl: build.template(block.ttl),
              }),
            },
          },
        },
      },
      hosted_zone_id: p.child('hosted_zone_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      traffic_policy_id: p.child('traffic_policy_id').out,
      traffic_policy_version: p.child('traffic_policy_version').out,
      ttl: p.child('ttl').out,
    },
    route53_vpc_association_authorization(name, block): {
      local p = path(['aws_route53_vpc_association_authorization', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_vpc_association_authorization: {
              [name]: std.prune({
                vpc_id: build.template(block.vpc_id),
                zone_id: build.template(block.zone_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      vpc_id: p.child('vpc_id').out,
      vpc_region: p.child('vpc_region').out,
      zone_id: p.child('zone_id').out,
    },
    route53_zone(name, block): {
      local p = path(['aws_route53_zone', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_zone: {
              [name]: std.prune({
                comment: build.template(std.get(block, 'comment', null, true)),
                delegation_set_id: build.template(std.get(block, 'delegation_set_id', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      comment: p.child('comment').out,
      delegation_set_id: p.child('delegation_set_id').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_servers: p.child('name_servers').out,
      primary_name_server: p.child('primary_name_server').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      zone_id: p.child('zone_id').out,
    },
    route53_zone_association(name, block): {
      local p = path(['aws_route53_zone_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53_zone_association: {
              [name]: std.prune({
                vpc_id: build.template(block.vpc_id),
                zone_id: build.template(block.zone_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      owning_account: p.child('owning_account').out,
      vpc_id: p.child('vpc_id').out,
      vpc_region: p.child('vpc_region').out,
      zone_id: p.child('zone_id').out,
    },
    route53domains_delegation_signer_record(name, block): {
      local p = path(['aws_route53domains_delegation_signer_record', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53domains_delegation_signer_record: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      dnssec_key_id: p.child('dnssec_key_id').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
    },
    route53domains_registered_domain(name, block): {
      local p = path(['aws_route53domains_registered_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53domains_registered_domain: {
              [name]: std.prune({
                admin_privacy: build.template(std.get(block, 'admin_privacy', null, true)),
                auto_renew: build.template(std.get(block, 'auto_renew', null, true)),
                billing_privacy: build.template(std.get(block, 'billing_privacy', null, true)),
                domain_name: build.template(block.domain_name),
                registrant_privacy: build.template(std.get(block, 'registrant_privacy', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tech_privacy: build.template(std.get(block, 'tech_privacy', null, true)),
                transfer_lock: build.template(std.get(block, 'transfer_lock', null, true)),
              }),
            },
          },
        },
      },
      abuse_contact_email: p.child('abuse_contact_email').out,
      abuse_contact_phone: p.child('abuse_contact_phone').out,
      admin_privacy: p.child('admin_privacy').out,
      auto_renew: p.child('auto_renew').out,
      billing_privacy: p.child('billing_privacy').out,
      creation_date: p.child('creation_date').out,
      domain_name: p.child('domain_name').out,
      expiration_date: p.child('expiration_date').out,
      id: p.child('id').out,
      registrant_privacy: p.child('registrant_privacy').out,
      registrar_name: p.child('registrar_name').out,
      registrar_url: p.child('registrar_url').out,
      reseller: p.child('reseller').out,
      status_list: p.child('status_list').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tech_privacy: p.child('tech_privacy').out,
      transfer_lock: p.child('transfer_lock').out,
      updated_date: p.child('updated_date').out,
      whois_server: p.child('whois_server').out,
    },
    route53profiles_association(name, block): {
      local p = path(['aws_route53profiles_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53profiles_association: {
              [name]: std.prune({
                name: build.template(block.name),
                profile_id: build.template(block.profile_id),
                resource_id: build.template(block.resource_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      profile_id: p.child('profile_id').out,
      resource_id: p.child('resource_id').out,
      status: p.child('status').out,
      status_message: p.child('status_message').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    route53profiles_profile(name, block): {
      local p = path(['aws_route53profiles_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53profiles_profile: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      share_status: p.child('share_status').out,
      status: p.child('status').out,
      status_message: p.child('status_message').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    route53profiles_resource_association(name, block): {
      local p = path(['aws_route53profiles_resource_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53profiles_resource_association: {
              [name]: std.prune({
                name: build.template(block.name),
                profile_id: build.template(block.profile_id),
                resource_arn: build.template(block.resource_arn),
                resource_properties: build.template(std.get(block, 'resource_properties', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      profile_id: p.child('profile_id').out,
      resource_arn: p.child('resource_arn').out,
      resource_properties: p.child('resource_properties').out,
      resource_type: p.child('resource_type').out,
      status: p.child('status').out,
      status_message: p.child('status_message').out,
    },
    route53recoverycontrolconfig_cluster(name, block): {
      local p = path(['aws_route53recoverycontrolconfig_cluster', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53recoverycontrolconfig_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster_endpoints: p.child('cluster_endpoints').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
    },
    route53recoverycontrolconfig_control_panel(name, block): {
      local p = path(['aws_route53recoverycontrolconfig_control_panel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53recoverycontrolconfig_control_panel: {
              [name]: std.prune({
                cluster_arn: build.template(block.cluster_arn),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster_arn: p.child('cluster_arn').out,
      default_control_panel: p.child('default_control_panel').out,
      id: p.child('id').out,
      name: p.child('name').out,
      routing_control_count: p.child('routing_control_count').out,
      status: p.child('status').out,
    },
    route53recoverycontrolconfig_routing_control(name, block): {
      local p = path(['aws_route53recoverycontrolconfig_routing_control', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53recoverycontrolconfig_routing_control: {
              [name]: std.prune({
                cluster_arn: build.template(block.cluster_arn),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster_arn: p.child('cluster_arn').out,
      control_panel_arn: p.child('control_panel_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
    },
    route53recoverycontrolconfig_safety_rule(name, block): {
      local p = path(['aws_route53recoverycontrolconfig_safety_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53recoverycontrolconfig_safety_rule: {
              [name]: std.prune({
                asserted_controls: build.template(std.get(block, 'asserted_controls', null, true)),
                control_panel_arn: build.template(block.control_panel_arn),
                gating_controls: build.template(std.get(block, 'gating_controls', null, true)),
                name: build.template(block.name),
                target_controls: build.template(std.get(block, 'target_controls', null, true)),
                wait_period_ms: build.template(block.wait_period_ms),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      asserted_controls: p.child('asserted_controls').out,
      control_panel_arn: p.child('control_panel_arn').out,
      gating_controls: p.child('gating_controls').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
      target_controls: p.child('target_controls').out,
      wait_period_ms: p.child('wait_period_ms').out,
    },
    route53recoveryreadiness_cell(name, block): {
      local p = path(['aws_route53recoveryreadiness_cell', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53recoveryreadiness_cell: {
              [name]: std.prune({
                cell_name: build.template(block.cell_name),
                cells: build.template(std.get(block, 'cells', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cell_name: p.child('cell_name').out,
      cells: p.child('cells').out,
      id: p.child('id').out,
      parent_readiness_scopes: p.child('parent_readiness_scopes').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    route53recoveryreadiness_readiness_check(name, block): {
      local p = path(['aws_route53recoveryreadiness_readiness_check', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53recoveryreadiness_readiness_check: {
              [name]: std.prune({
                readiness_check_name: build.template(block.readiness_check_name),
                resource_set_name: build.template(block.resource_set_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      readiness_check_name: p.child('readiness_check_name').out,
      resource_set_name: p.child('resource_set_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    route53recoveryreadiness_recovery_group(name, block): {
      local p = path(['aws_route53recoveryreadiness_recovery_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53recoveryreadiness_recovery_group: {
              [name]: std.prune({
                cells: build.template(std.get(block, 'cells', null, true)),
                recovery_group_name: build.template(block.recovery_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cells: p.child('cells').out,
      id: p.child('id').out,
      recovery_group_name: p.child('recovery_group_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    route53recoveryreadiness_resource_set(name, block): {
      local p = path(['aws_route53recoveryreadiness_resource_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route53recoveryreadiness_resource_set: {
              [name]: std.prune({
                resource_set_name: build.template(block.resource_set_name),
                resource_set_type: build.template(block.resource_set_type),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      resource_set_name: p.child('resource_set_name').out,
      resource_set_type: p.child('resource_set_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    route_table(name, block): {
      local p = path(['aws_route_table', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route_table: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      propagating_vgws: p.child('propagating_vgws').out,
      route: p.child('route').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    route_table_association(name, block): {
      local p = path(['aws_route_table_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_route_table_association: {
              [name]: std.prune({
                gateway_id: build.template(std.get(block, 'gateway_id', null, true)),
                route_table_id: build.template(block.route_table_id),
                subnet_id: build.template(std.get(block, 'subnet_id', null, true)),
              }),
            },
          },
        },
      },
      gateway_id: p.child('gateway_id').out,
      id: p.child('id').out,
      route_table_id: p.child('route_table_id').out,
      subnet_id: p.child('subnet_id').out,
    },
    rum_app_monitor(name, block): {
      local p = path(['aws_rum_app_monitor', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rum_app_monitor: {
              [name]: std.prune({
                cw_log_enabled: build.template(std.get(block, 'cw_log_enabled', null, true)),
                domain: build.template(block.domain),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      app_monitor_id: p.child('app_monitor_id').out,
      arn: p.child('arn').out,
      cw_log_enabled: p.child('cw_log_enabled').out,
      cw_log_group: p.child('cw_log_group').out,
      domain: p.child('domain').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    rum_metrics_destination(name, block): {
      local p = path(['aws_rum_metrics_destination', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_rum_metrics_destination: {
              [name]: std.prune({
                app_monitor_name: build.template(block.app_monitor_name),
                destination: build.template(block.destination),
                destination_arn: build.template(std.get(block, 'destination_arn', null, true)),
                iam_role_arn: build.template(std.get(block, 'iam_role_arn', null, true)),
              }),
            },
          },
        },
      },
      app_monitor_name: p.child('app_monitor_name').out,
      destination: p.child('destination').out,
      destination_arn: p.child('destination_arn').out,
      iam_role_arn: p.child('iam_role_arn').out,
      id: p.child('id').out,
    },
    s3_access_point(name, block): {
      local p = path(['aws_s3_access_point', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_access_point: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      alias: p.child('alias').out,
      arn: p.child('arn').out,
      bucket: p.child('bucket').out,
      bucket_account_id: p.child('bucket_account_id').out,
      domain_name: p.child('domain_name').out,
      endpoints: p.child('endpoints').out,
      has_public_access_policy: p.child('has_public_access_policy').out,
      id: p.child('id').out,
      name: p.child('name').out,
      network_origin: p.child('network_origin').out,
      policy: p.child('policy').out,
    },
    s3_account_public_access_block(name, block): {
      local p = path(['aws_s3_account_public_access_block', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_account_public_access_block: {
              [name]: std.prune({
                block_public_acls: build.template(std.get(block, 'block_public_acls', null, true)),
                block_public_policy: build.template(std.get(block, 'block_public_policy', null, true)),
                ignore_public_acls: build.template(std.get(block, 'ignore_public_acls', null, true)),
                restrict_public_buckets: build.template(std.get(block, 'restrict_public_buckets', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      block_public_acls: p.child('block_public_acls').out,
      block_public_policy: p.child('block_public_policy').out,
      id: p.child('id').out,
      ignore_public_acls: p.child('ignore_public_acls').out,
      restrict_public_buckets: p.child('restrict_public_buckets').out,
    },
    s3_bucket(name, block): {
      local p = path(['aws_s3_bucket', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket: {
              [name]: std.prune({
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      acceleration_status: p.child('acceleration_status').out,
      acl: p.child('acl').out,
      arn: p.child('arn').out,
      bucket: p.child('bucket').out,
      bucket_domain_name: p.child('bucket_domain_name').out,
      bucket_prefix: p.child('bucket_prefix').out,
      bucket_regional_domain_name: p.child('bucket_regional_domain_name').out,
      force_destroy: p.child('force_destroy').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      id: p.child('id').out,
      object_lock_enabled: p.child('object_lock_enabled').out,
      policy: p.child('policy').out,
      region: p.child('region').out,
      request_payer: p.child('request_payer').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      website_domain: p.child('website_domain').out,
      website_endpoint: p.child('website_endpoint').out,
    },
    s3_bucket_accelerate_configuration(name, block): {
      local p = path(['aws_s3_bucket_accelerate_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_accelerate_configuration: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null, true)),
                status: build.template(block.status),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      expected_bucket_owner: p.child('expected_bucket_owner').out,
      id: p.child('id').out,
      status: p.child('status').out,
    },
    s3_bucket_acl(name, block): {
      local p = path(['aws_s3_bucket_acl', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_acl: {
              [name]: std.prune({
                acl: build.template(std.get(block, 'acl', null, true)),
                bucket: build.template(block.bucket),
                expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null, true)),
              }),
            },
          },
        },
      },
      acl: p.child('acl').out,
      bucket: p.child('bucket').out,
      expected_bucket_owner: p.child('expected_bucket_owner').out,
      id: p.child('id').out,
    },
    s3_bucket_analytics_configuration(name, block): {
      local p = path(['aws_s3_bucket_analytics_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_analytics_configuration: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    s3_bucket_cors_configuration(name, block): {
      local p = path(['aws_s3_bucket_cors_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_cors_configuration: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      expected_bucket_owner: p.child('expected_bucket_owner').out,
      id: p.child('id').out,
    },
    s3_bucket_intelligent_tiering_configuration(name, block): {
      local p = path(['aws_s3_bucket_intelligent_tiering_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_intelligent_tiering_configuration: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                name: build.template(block.name),
                status: build.template(std.get(block, 'status', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
    },
    s3_bucket_inventory(name, block): {
      local p = path(['aws_s3_bucket_inventory', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_inventory: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                included_object_versions: build.template(block.included_object_versions),
                name: build.template(block.name),
                optional_fields: build.template(std.get(block, 'optional_fields', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      included_object_versions: p.child('included_object_versions').out,
      name: p.child('name').out,
      optional_fields: p.child('optional_fields').out,
    },
    s3_bucket_lifecycle_configuration(name, block): {
      local p = path(['aws_s3_bucket_lifecycle_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_lifecycle_configuration: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      expected_bucket_owner: p.child('expected_bucket_owner').out,
      id: p.child('id').out,
      transition_default_minimum_object_size: p.child('transition_default_minimum_object_size').out,
    },
    s3_bucket_logging(name, block): {
      local p = path(['aws_s3_bucket_logging', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_logging: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null, true)),
                target_bucket: build.template(block.target_bucket),
                target_prefix: build.template(block.target_prefix),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      expected_bucket_owner: p.child('expected_bucket_owner').out,
      id: p.child('id').out,
      target_bucket: p.child('target_bucket').out,
      target_prefix: p.child('target_prefix').out,
    },
    s3_bucket_metric(name, block): {
      local p = path(['aws_s3_bucket_metric', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_metric: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    s3_bucket_notification(name, block): {
      local p = path(['aws_s3_bucket_notification', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_notification: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                eventbridge: build.template(std.get(block, 'eventbridge', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      eventbridge: p.child('eventbridge').out,
      id: p.child('id').out,
    },
    s3_bucket_object(name, block): {
      local p = path(['aws_s3_bucket_object', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_object: {
              [name]: std.prune({
                acl: build.template(std.get(block, 'acl', null, true)),
                bucket: build.template(block.bucket),
                cache_control: build.template(std.get(block, 'cache_control', null, true)),
                content: build.template(std.get(block, 'content', null, true)),
                content_base64: build.template(std.get(block, 'content_base64', null, true)),
                content_disposition: build.template(std.get(block, 'content_disposition', null, true)),
                content_encoding: build.template(std.get(block, 'content_encoding', null, true)),
                content_language: build.template(std.get(block, 'content_language', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                key: build.template(block.key),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                object_lock_legal_hold_status: build.template(std.get(block, 'object_lock_legal_hold_status', null, true)),
                object_lock_mode: build.template(std.get(block, 'object_lock_mode', null, true)),
                object_lock_retain_until_date: build.template(std.get(block, 'object_lock_retain_until_date', null, true)),
                source: build.template(std.get(block, 'source', null, true)),
                source_hash: build.template(std.get(block, 'source_hash', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                website_redirect: build.template(std.get(block, 'website_redirect', null, true)),
              }),
            },
          },
        },
      },
      acl: p.child('acl').out,
      arn: p.child('arn').out,
      bucket: p.child('bucket').out,
      bucket_key_enabled: p.child('bucket_key_enabled').out,
      cache_control: p.child('cache_control').out,
      content: p.child('content').out,
      content_base64: p.child('content_base64').out,
      content_disposition: p.child('content_disposition').out,
      content_encoding: p.child('content_encoding').out,
      content_language: p.child('content_language').out,
      content_type: p.child('content_type').out,
      etag: p.child('etag').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      key: p.child('key').out,
      kms_key_id: p.child('kms_key_id').out,
      metadata: p.child('metadata').out,
      object_lock_legal_hold_status: p.child('object_lock_legal_hold_status').out,
      object_lock_mode: p.child('object_lock_mode').out,
      object_lock_retain_until_date: p.child('object_lock_retain_until_date').out,
      server_side_encryption: p.child('server_side_encryption').out,
      source: p.child('source').out,
      source_hash: p.child('source_hash').out,
      storage_class: p.child('storage_class').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version_id: p.child('version_id').out,
      website_redirect: p.child('website_redirect').out,
    },
    s3_bucket_object_lock_configuration(name, block): {
      local p = path(['aws_s3_bucket_object_lock_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_object_lock_configuration: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null, true)),
                object_lock_enabled: build.template(std.get(block, 'object_lock_enabled', null, true)),
                token: build.template(std.get(block, 'token', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      expected_bucket_owner: p.child('expected_bucket_owner').out,
      id: p.child('id').out,
      object_lock_enabled: p.child('object_lock_enabled').out,
      token: p.child('token').out,
    },
    s3_bucket_ownership_controls(name, block): {
      local p = path(['aws_s3_bucket_ownership_controls', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_ownership_controls: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      id: p.child('id').out,
    },
    s3_bucket_policy(name, block): {
      local p = path(['aws_s3_bucket_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_policy: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
    },
    s3_bucket_public_access_block(name, block): {
      local p = path(['aws_s3_bucket_public_access_block', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_public_access_block: {
              [name]: std.prune({
                block_public_acls: build.template(std.get(block, 'block_public_acls', null, true)),
                block_public_policy: build.template(std.get(block, 'block_public_policy', null, true)),
                bucket: build.template(block.bucket),
                ignore_public_acls: build.template(std.get(block, 'ignore_public_acls', null, true)),
                restrict_public_buckets: build.template(std.get(block, 'restrict_public_buckets', null, true)),
              }),
            },
          },
        },
      },
      block_public_acls: p.child('block_public_acls').out,
      block_public_policy: p.child('block_public_policy').out,
      bucket: p.child('bucket').out,
      id: p.child('id').out,
      ignore_public_acls: p.child('ignore_public_acls').out,
      restrict_public_buckets: p.child('restrict_public_buckets').out,
    },
    s3_bucket_replication_configuration(name, block): {
      local p = path(['aws_s3_bucket_replication_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_replication_configuration: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                role: build.template(block.role),
                token: build.template(std.get(block, 'token', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      id: p.child('id').out,
      role: p.child('role').out,
      token: p.child('token').out,
    },
    s3_bucket_request_payment_configuration(name, block): {
      local p = path(['aws_s3_bucket_request_payment_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_request_payment_configuration: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null, true)),
                payer: build.template(block.payer),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      expected_bucket_owner: p.child('expected_bucket_owner').out,
      id: p.child('id').out,
      payer: p.child('payer').out,
    },
    s3_bucket_server_side_encryption_configuration(name, block): {
      local p = path(['aws_s3_bucket_server_side_encryption_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_server_side_encryption_configuration: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      expected_bucket_owner: p.child('expected_bucket_owner').out,
      id: p.child('id').out,
    },
    s3_bucket_versioning(name, block): {
      local p = path(['aws_s3_bucket_versioning', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_versioning: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null, true)),
                mfa: build.template(std.get(block, 'mfa', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      expected_bucket_owner: p.child('expected_bucket_owner').out,
      id: p.child('id').out,
      mfa: p.child('mfa').out,
    },
    s3_bucket_website_configuration(name, block): {
      local p = path(['aws_s3_bucket_website_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_bucket_website_configuration: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      expected_bucket_owner: p.child('expected_bucket_owner').out,
      id: p.child('id').out,
      routing_rules: p.child('routing_rules').out,
      website_domain: p.child('website_domain').out,
      website_endpoint: p.child('website_endpoint').out,
    },
    s3_directory_bucket(name, block): {
      local p = path(['aws_s3_directory_bucket', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_directory_bucket: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bucket: p.child('bucket').out,
      data_redundancy: p.child('data_redundancy').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      type: p.child('type').out,
    },
    s3_object(name, block): {
      local p = path(['aws_s3_object', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_object: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                cache_control: build.template(std.get(block, 'cache_control', null, true)),
                checksum_algorithm: build.template(std.get(block, 'checksum_algorithm', null, true)),
                content: build.template(std.get(block, 'content', null, true)),
                content_base64: build.template(std.get(block, 'content_base64', null, true)),
                content_disposition: build.template(std.get(block, 'content_disposition', null, true)),
                content_encoding: build.template(std.get(block, 'content_encoding', null, true)),
                content_language: build.template(std.get(block, 'content_language', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                key: build.template(block.key),
                metadata: build.template(std.get(block, 'metadata', null, true)),
                object_lock_legal_hold_status: build.template(std.get(block, 'object_lock_legal_hold_status', null, true)),
                object_lock_mode: build.template(std.get(block, 'object_lock_mode', null, true)),
                object_lock_retain_until_date: build.template(std.get(block, 'object_lock_retain_until_date', null, true)),
                source: build.template(std.get(block, 'source', null, true)),
                source_hash: build.template(std.get(block, 'source_hash', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                website_redirect: build.template(std.get(block, 'website_redirect', null, true)),
              }),
            },
          },
        },
      },
      acl: p.child('acl').out,
      arn: p.child('arn').out,
      bucket: p.child('bucket').out,
      bucket_key_enabled: p.child('bucket_key_enabled').out,
      cache_control: p.child('cache_control').out,
      checksum_algorithm: p.child('checksum_algorithm').out,
      checksum_crc32: p.child('checksum_crc32').out,
      checksum_crc32c: p.child('checksum_crc32c').out,
      checksum_sha1: p.child('checksum_sha1').out,
      checksum_sha256: p.child('checksum_sha256').out,
      content: p.child('content').out,
      content_base64: p.child('content_base64').out,
      content_disposition: p.child('content_disposition').out,
      content_encoding: p.child('content_encoding').out,
      content_language: p.child('content_language').out,
      content_type: p.child('content_type').out,
      etag: p.child('etag').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      key: p.child('key').out,
      kms_key_id: p.child('kms_key_id').out,
      metadata: p.child('metadata').out,
      object_lock_legal_hold_status: p.child('object_lock_legal_hold_status').out,
      object_lock_mode: p.child('object_lock_mode').out,
      object_lock_retain_until_date: p.child('object_lock_retain_until_date').out,
      server_side_encryption: p.child('server_side_encryption').out,
      source: p.child('source').out,
      source_hash: p.child('source_hash').out,
      storage_class: p.child('storage_class').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version_id: p.child('version_id').out,
      website_redirect: p.child('website_redirect').out,
    },
    s3_object_copy(name, block): {
      local p = path(['aws_s3_object_copy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3_object_copy: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                checksum_algorithm: build.template(std.get(block, 'checksum_algorithm', null, true)),
                copy_if_match: build.template(std.get(block, 'copy_if_match', null, true)),
                copy_if_modified_since: build.template(std.get(block, 'copy_if_modified_since', null, true)),
                copy_if_none_match: build.template(std.get(block, 'copy_if_none_match', null, true)),
                copy_if_unmodified_since: build.template(std.get(block, 'copy_if_unmodified_since', null, true)),
                customer_key: build.template(std.get(block, 'customer_key', null, true)),
                expected_bucket_owner: build.template(std.get(block, 'expected_bucket_owner', null, true)),
                expected_source_bucket_owner: build.template(std.get(block, 'expected_source_bucket_owner', null, true)),
                expires: build.template(std.get(block, 'expires', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                key: build.template(block.key),
                metadata_directive: build.template(std.get(block, 'metadata_directive', null, true)),
                request_payer: build.template(std.get(block, 'request_payer', null, true)),
                source: build.template(block.source),
                source_customer_algorithm: build.template(std.get(block, 'source_customer_algorithm', null, true)),
                source_customer_key: build.template(std.get(block, 'source_customer_key', null, true)),
                source_customer_key_md5: build.template(std.get(block, 'source_customer_key_md5', null, true)),
                tagging_directive: build.template(std.get(block, 'tagging_directive', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      acl: p.child('acl').out,
      arn: p.child('arn').out,
      bucket: p.child('bucket').out,
      bucket_key_enabled: p.child('bucket_key_enabled').out,
      cache_control: p.child('cache_control').out,
      checksum_algorithm: p.child('checksum_algorithm').out,
      checksum_crc32: p.child('checksum_crc32').out,
      checksum_crc32c: p.child('checksum_crc32c').out,
      checksum_sha1: p.child('checksum_sha1').out,
      checksum_sha256: p.child('checksum_sha256').out,
      content_disposition: p.child('content_disposition').out,
      content_encoding: p.child('content_encoding').out,
      content_language: p.child('content_language').out,
      content_type: p.child('content_type').out,
      copy_if_match: p.child('copy_if_match').out,
      copy_if_modified_since: p.child('copy_if_modified_since').out,
      copy_if_none_match: p.child('copy_if_none_match').out,
      copy_if_unmodified_since: p.child('copy_if_unmodified_since').out,
      customer_algorithm: p.child('customer_algorithm').out,
      customer_key: p.child('customer_key').out,
      customer_key_md5: p.child('customer_key_md5').out,
      etag: p.child('etag').out,
      expected_bucket_owner: p.child('expected_bucket_owner').out,
      expected_source_bucket_owner: p.child('expected_source_bucket_owner').out,
      expiration: p.child('expiration').out,
      expires: p.child('expires').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      key: p.child('key').out,
      kms_encryption_context: p.child('kms_encryption_context').out,
      kms_key_id: p.child('kms_key_id').out,
      last_modified: p.child('last_modified').out,
      metadata: p.child('metadata').out,
      metadata_directive: p.child('metadata_directive').out,
      object_lock_legal_hold_status: p.child('object_lock_legal_hold_status').out,
      object_lock_mode: p.child('object_lock_mode').out,
      object_lock_retain_until_date: p.child('object_lock_retain_until_date').out,
      request_charged: p.child('request_charged').out,
      request_payer: p.child('request_payer').out,
      server_side_encryption: p.child('server_side_encryption').out,
      source: p.child('source').out,
      source_customer_algorithm: p.child('source_customer_algorithm').out,
      source_customer_key: p.child('source_customer_key').out,
      source_customer_key_md5: p.child('source_customer_key_md5').out,
      source_version_id: p.child('source_version_id').out,
      storage_class: p.child('storage_class').out,
      tagging_directive: p.child('tagging_directive').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version_id: p.child('version_id').out,
      website_redirect: p.child('website_redirect').out,
    },
    s3control_access_grant(name, block): {
      local p = path(['aws_s3control_access_grant', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3control_access_grant: {
              [name]: std.prune({
                access_grants_location_id: build.template(block.access_grants_location_id),
                permission: build.template(block.permission),
                s3_prefix_type: build.template(std.get(block, 's3_prefix_type', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_grant_arn: p.child('access_grant_arn').out,
      access_grant_id: p.child('access_grant_id').out,
      access_grants_location_id: p.child('access_grants_location_id').out,
      account_id: p.child('account_id').out,
      grant_scope: p.child('grant_scope').out,
      id: p.child('id').out,
      permission: p.child('permission').out,
      s3_prefix_type: p.child('s3_prefix_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    s3control_access_grants_instance(name, block): {
      local p = path(['aws_s3control_access_grants_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3control_access_grants_instance: {
              [name]: std.prune({
                identity_center_arn: build.template(std.get(block, 'identity_center_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_grants_instance_arn: p.child('access_grants_instance_arn').out,
      access_grants_instance_id: p.child('access_grants_instance_id').out,
      account_id: p.child('account_id').out,
      id: p.child('id').out,
      identity_center_application_arn: p.child('identity_center_application_arn').out,
      identity_center_arn: p.child('identity_center_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    s3control_access_grants_instance_resource_policy(name, block): {
      local p = path(['aws_s3control_access_grants_instance_resource_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3control_access_grants_instance_resource_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
    },
    s3control_access_grants_location(name, block): {
      local p = path(['aws_s3control_access_grants_location', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3control_access_grants_location: {
              [name]: std.prune({
                iam_role_arn: build.template(block.iam_role_arn),
                location_scope: build.template(block.location_scope),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_grants_location_arn: p.child('access_grants_location_arn').out,
      access_grants_location_id: p.child('access_grants_location_id').out,
      account_id: p.child('account_id').out,
      iam_role_arn: p.child('iam_role_arn').out,
      id: p.child('id').out,
      location_scope: p.child('location_scope').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    s3control_access_point_policy(name, block): {
      local p = path(['aws_s3control_access_point_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3control_access_point_policy: {
              [name]: std.prune({
                access_point_arn: build.template(block.access_point_arn),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      access_point_arn: p.child('access_point_arn').out,
      has_public_access_policy: p.child('has_public_access_policy').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
    },
    s3control_bucket(name, block): {
      local p = path(['aws_s3control_bucket', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3control_bucket: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                outpost_id: build.template(block.outpost_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bucket: p.child('bucket').out,
      creation_date: p.child('creation_date').out,
      id: p.child('id').out,
      outpost_id: p.child('outpost_id').out,
      public_access_block_enabled: p.child('public_access_block_enabled').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    s3control_bucket_lifecycle_configuration(name, block): {
      local p = path(['aws_s3control_bucket_lifecycle_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3control_bucket_lifecycle_configuration: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      id: p.child('id').out,
    },
    s3control_bucket_policy(name, block): {
      local p = path(['aws_s3control_bucket_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3control_bucket_policy: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
    },
    s3control_multi_region_access_point(name, block): {
      local p = path(['aws_s3control_multi_region_access_point', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3control_multi_region_access_point: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      alias: p.child('alias').out,
      arn: p.child('arn').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      status: p.child('status').out,
    },
    s3control_multi_region_access_point_policy(name, block): {
      local p = path(['aws_s3control_multi_region_access_point_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3control_multi_region_access_point_policy: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      established: p.child('established').out,
      id: p.child('id').out,
      proposed: p.child('proposed').out,
    },
    s3control_object_lambda_access_point(name, block): {
      local p = path(['aws_s3control_object_lambda_access_point', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3control_object_lambda_access_point: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      alias: p.child('alias').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    s3control_object_lambda_access_point_policy(name, block): {
      local p = path(['aws_s3control_object_lambda_access_point_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3control_object_lambda_access_point_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      has_public_access_policy: p.child('has_public_access_policy').out,
      id: p.child('id').out,
      name: p.child('name').out,
      policy: p.child('policy').out,
    },
    s3control_storage_lens_configuration(name, block): {
      local p = path(['aws_s3control_storage_lens_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3control_storage_lens_configuration: {
              [name]: std.prune({
                config_id: build.template(block.config_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      arn: p.child('arn').out,
      config_id: p.child('config_id').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    s3outposts_endpoint(name, block): {
      local p = path(['aws_s3outposts_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_s3outposts_endpoint: {
              [name]: std.prune({
                customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null, true)),
                outpost_id: build.template(block.outpost_id),
                security_group_id: build.template(block.security_group_id),
                subnet_id: build.template(block.subnet_id),
              }),
            },
          },
        },
      },
      access_type: p.child('access_type').out,
      arn: p.child('arn').out,
      cidr_block: p.child('cidr_block').out,
      creation_time: p.child('creation_time').out,
      customer_owned_ipv4_pool: p.child('customer_owned_ipv4_pool').out,
      id: p.child('id').out,
      network_interfaces: p.child('network_interfaces').out,
      outpost_id: p.child('outpost_id').out,
      security_group_id: p.child('security_group_id').out,
      subnet_id: p.child('subnet_id').out,
    },
    sagemaker_app(name, block): {
      local p = path(['aws_sagemaker_app', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_app: {
              [name]: std.prune({
                app_name: build.template(block.app_name),
                app_type: build.template(block.app_type),
                domain_id: build.template(block.domain_id),
                space_name: build.template(std.get(block, 'space_name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_profile_name: build.template(std.get(block, 'user_profile_name', null, true)),
              }),
            },
          },
        },
      },
      app_name: p.child('app_name').out,
      app_type: p.child('app_type').out,
      arn: p.child('arn').out,
      domain_id: p.child('domain_id').out,
      id: p.child('id').out,
      space_name: p.child('space_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_profile_name: p.child('user_profile_name').out,
    },
    sagemaker_app_image_config(name, block): {
      local p = path(['aws_sagemaker_app_image_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_app_image_config: {
              [name]: std.prune({
                app_image_config_name: build.template(block.app_image_config_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      app_image_config_name: p.child('app_image_config_name').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_code_repository(name, block): {
      local p = path(['aws_sagemaker_code_repository', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_code_repository: {
              [name]: std.prune({
                code_repository_name: build.template(block.code_repository_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      code_repository_name: p.child('code_repository_name').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_data_quality_job_definition(name, block): {
      local p = path(['aws_sagemaker_data_quality_job_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_data_quality_job_definition: {
              [name]: std.prune({
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_device(name, block): {
      local p = path(['aws_sagemaker_device', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_device: {
              [name]: std.prune({
                device_fleet_name: build.template(block.device_fleet_name),
              }),
            },
          },
        },
      },
      agent_version: p.child('agent_version').out,
      arn: p.child('arn').out,
      device_fleet_name: p.child('device_fleet_name').out,
      id: p.child('id').out,
    },
    sagemaker_device_fleet(name, block): {
      local p = path(['aws_sagemaker_device_fleet', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_device_fleet: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                device_fleet_name: build.template(block.device_fleet_name),
                enable_iot_role_alias: build.template(std.get(block, 'enable_iot_role_alias', null, true)),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      device_fleet_name: p.child('device_fleet_name').out,
      enable_iot_role_alias: p.child('enable_iot_role_alias').out,
      id: p.child('id').out,
      iot_role_alias: p.child('iot_role_alias').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_domain(name, block): {
      local p = path(['aws_sagemaker_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_domain: {
              [name]: std.prune({
                app_network_access_type: build.template(std.get(block, 'app_network_access_type', null, true)),
                app_security_group_management: build.template(std.get(block, 'app_security_group_management', null, true)),
                auth_mode: build.template(block.auth_mode),
                domain_name: build.template(block.domain_name),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                subnet_ids: build.template(block.subnet_ids),
                tag_propagation: build.template(std.get(block, 'tag_propagation', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      app_network_access_type: p.child('app_network_access_type').out,
      app_security_group_management: p.child('app_security_group_management').out,
      arn: p.child('arn').out,
      auth_mode: p.child('auth_mode').out,
      domain_name: p.child('domain_name').out,
      home_efs_file_system_id: p.child('home_efs_file_system_id').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      security_group_id_for_domain_boundary: p.child('security_group_id_for_domain_boundary').out,
      single_sign_on_application_arn: p.child('single_sign_on_application_arn').out,
      single_sign_on_managed_application_instance_id: p.child('single_sign_on_managed_application_instance_id').out,
      subnet_ids: p.child('subnet_ids').out,
      tag_propagation: p.child('tag_propagation').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      url: p.child('url').out,
      vpc_id: p.child('vpc_id').out,
    },
    sagemaker_endpoint(name, block): {
      local p = path(['aws_sagemaker_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_endpoint: {
              [name]: std.prune({
                endpoint_config_name: build.template(block.endpoint_config_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      endpoint_config_name: p.child('endpoint_config_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_endpoint_configuration(name, block): {
      local p = path(['aws_sagemaker_endpoint_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_endpoint_configuration: {
              [name]: std.prune({
                kms_key_arn: build.template(std.get(block, 'kms_key_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_feature_group(name, block): {
      local p = path(['aws_sagemaker_feature_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_feature_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                event_time_feature_name: build.template(block.event_time_feature_name),
                feature_group_name: build.template(block.feature_group_name),
                record_identifier_feature_name: build.template(block.record_identifier_feature_name),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      event_time_feature_name: p.child('event_time_feature_name').out,
      feature_group_name: p.child('feature_group_name').out,
      id: p.child('id').out,
      record_identifier_feature_name: p.child('record_identifier_feature_name').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_flow_definition(name, block): {
      local p = path(['aws_sagemaker_flow_definition', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_flow_definition: {
              [name]: std.prune({
                flow_definition_name: build.template(block.flow_definition_name),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      flow_definition_name: p.child('flow_definition_name').out,
      id: p.child('id').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_hub(name, block): {
      local p = path(['aws_sagemaker_hub', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_hub: {
              [name]: std.prune({
                hub_description: build.template(block.hub_description),
                hub_display_name: build.template(std.get(block, 'hub_display_name', null, true)),
                hub_name: build.template(block.hub_name),
                hub_search_keywords: build.template(std.get(block, 'hub_search_keywords', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      hub_description: p.child('hub_description').out,
      hub_display_name: p.child('hub_display_name').out,
      hub_name: p.child('hub_name').out,
      hub_search_keywords: p.child('hub_search_keywords').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_human_task_ui(name, block): {
      local p = path(['aws_sagemaker_human_task_ui', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_human_task_ui: {
              [name]: std.prune({
                human_task_ui_name: build.template(block.human_task_ui_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      human_task_ui_name: p.child('human_task_ui_name').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_image(name, block): {
      local p = path(['aws_sagemaker_image', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_image: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                image_name: build.template(block.image_name),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      image_name: p.child('image_name').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_image_version(name, block): {
      local p = path(['aws_sagemaker_image_version', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_image_version: {
              [name]: std.prune({
                base_image: build.template(block.base_image),
                image_name: build.template(block.image_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      base_image: p.child('base_image').out,
      container_image: p.child('container_image').out,
      id: p.child('id').out,
      image_arn: p.child('image_arn').out,
      image_name: p.child('image_name').out,
      version: p.child('version').out,
    },
    sagemaker_mlflow_tracking_server(name, block): {
      local p = path(['aws_sagemaker_mlflow_tracking_server', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_mlflow_tracking_server: {
              [name]: std.prune({
                artifact_store_uri: build.template(block.artifact_store_uri),
                automatic_model_registration: build.template(std.get(block, 'automatic_model_registration', null, true)),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                tracking_server_name: build.template(block.tracking_server_name),
                tracking_server_size: build.template(std.get(block, 'tracking_server_size', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      artifact_store_uri: p.child('artifact_store_uri').out,
      automatic_model_registration: p.child('automatic_model_registration').out,
      id: p.child('id').out,
      mlflow_version: p.child('mlflow_version').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tracking_server_name: p.child('tracking_server_name').out,
      tracking_server_size: p.child('tracking_server_size').out,
      tracking_server_url: p.child('tracking_server_url').out,
      weekly_maintenance_window_start: p.child('weekly_maintenance_window_start').out,
    },
    sagemaker_model(name, block): {
      local p = path(['aws_sagemaker_model', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_model: {
              [name]: std.prune({
                enable_network_isolation: build.template(std.get(block, 'enable_network_isolation', null, true)),
                execution_role_arn: build.template(block.execution_role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      enable_network_isolation: p.child('enable_network_isolation').out,
      execution_role_arn: p.child('execution_role_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_model_package_group(name, block): {
      local p = path(['aws_sagemaker_model_package_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_model_package_group: {
              [name]: std.prune({
                model_package_group_description: build.template(std.get(block, 'model_package_group_description', null, true)),
                model_package_group_name: build.template(block.model_package_group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      model_package_group_description: p.child('model_package_group_description').out,
      model_package_group_name: p.child('model_package_group_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_model_package_group_policy(name, block): {
      local p = path(['aws_sagemaker_model_package_group_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_model_package_group_policy: {
              [name]: std.prune({
                model_package_group_name: build.template(block.model_package_group_name),
                resource_policy: build.template(block.resource_policy),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      model_package_group_name: p.child('model_package_group_name').out,
      resource_policy: p.child('resource_policy').out,
    },
    sagemaker_monitoring_schedule(name, block): {
      local p = path(['aws_sagemaker_monitoring_schedule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_monitoring_schedule: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_notebook_instance(name, block): {
      local p = path(['aws_sagemaker_notebook_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_notebook_instance: {
              [name]: std.prune({
                accelerator_types: build.template(std.get(block, 'accelerator_types', null, true)),
                additional_code_repositories: build.template(std.get(block, 'additional_code_repositories', null, true)),
                default_code_repository: build.template(std.get(block, 'default_code_repository', null, true)),
                direct_internet_access: build.template(std.get(block, 'direct_internet_access', null, true)),
                instance_type: build.template(block.instance_type),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                lifecycle_config_name: build.template(std.get(block, 'lifecycle_config_name', null, true)),
                name: build.template(block.name),
                role_arn: build.template(block.role_arn),
                root_access: build.template(std.get(block, 'root_access', null, true)),
                subnet_id: build.template(std.get(block, 'subnet_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                volume_size: build.template(std.get(block, 'volume_size', null, true)),
              }),
            },
          },
        },
      },
      accelerator_types: p.child('accelerator_types').out,
      additional_code_repositories: p.child('additional_code_repositories').out,
      arn: p.child('arn').out,
      default_code_repository: p.child('default_code_repository').out,
      direct_internet_access: p.child('direct_internet_access').out,
      id: p.child('id').out,
      instance_type: p.child('instance_type').out,
      kms_key_id: p.child('kms_key_id').out,
      lifecycle_config_name: p.child('lifecycle_config_name').out,
      name: p.child('name').out,
      network_interface_id: p.child('network_interface_id').out,
      platform_identifier: p.child('platform_identifier').out,
      role_arn: p.child('role_arn').out,
      root_access: p.child('root_access').out,
      security_groups: p.child('security_groups').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      url: p.child('url').out,
      volume_size: p.child('volume_size').out,
    },
    sagemaker_notebook_instance_lifecycle_configuration(name, block): {
      local p = path(['aws_sagemaker_notebook_instance_lifecycle_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_notebook_instance_lifecycle_configuration: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                on_create: build.template(std.get(block, 'on_create', null, true)),
                on_start: build.template(std.get(block, 'on_start', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      on_create: p.child('on_create').out,
      on_start: p.child('on_start').out,
    },
    sagemaker_pipeline(name, block): {
      local p = path(['aws_sagemaker_pipeline', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_pipeline: {
              [name]: std.prune({
                pipeline_definition: build.template(std.get(block, 'pipeline_definition', null, true)),
                pipeline_description: build.template(std.get(block, 'pipeline_description', null, true)),
                pipeline_display_name: build.template(block.pipeline_display_name),
                pipeline_name: build.template(block.pipeline_name),
                role_arn: build.template(std.get(block, 'role_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      pipeline_definition: p.child('pipeline_definition').out,
      pipeline_description: p.child('pipeline_description').out,
      pipeline_display_name: p.child('pipeline_display_name').out,
      pipeline_name: p.child('pipeline_name').out,
      role_arn: p.child('role_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_project(name, block): {
      local p = path(['aws_sagemaker_project', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_project: {
              [name]: std.prune({
                project_description: build.template(std.get(block, 'project_description', null, true)),
                project_name: build.template(block.project_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      project_description: p.child('project_description').out,
      project_id: p.child('project_id').out,
      project_name: p.child('project_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_servicecatalog_portfolio_status(name, block): {
      local p = path(['aws_sagemaker_servicecatalog_portfolio_status', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_servicecatalog_portfolio_status: {
              [name]: std.prune({
                status: build.template(block.status),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      status: p.child('status').out,
    },
    sagemaker_space(name, block): {
      local p = path(['aws_sagemaker_space', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_space: {
              [name]: std.prune({
                domain_id: build.template(block.domain_id),
                space_display_name: build.template(std.get(block, 'space_display_name', null, true)),
                space_name: build.template(block.space_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      domain_id: p.child('domain_id').out,
      home_efs_file_system_uid: p.child('home_efs_file_system_uid').out,
      id: p.child('id').out,
      space_display_name: p.child('space_display_name').out,
      space_name: p.child('space_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      url: p.child('url').out,
    },
    sagemaker_studio_lifecycle_config(name, block): {
      local p = path(['aws_sagemaker_studio_lifecycle_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_studio_lifecycle_config: {
              [name]: std.prune({
                studio_lifecycle_config_app_type: build.template(block.studio_lifecycle_config_app_type),
                studio_lifecycle_config_content: build.template(block.studio_lifecycle_config_content),
                studio_lifecycle_config_name: build.template(block.studio_lifecycle_config_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      studio_lifecycle_config_app_type: p.child('studio_lifecycle_config_app_type').out,
      studio_lifecycle_config_content: p.child('studio_lifecycle_config_content').out,
      studio_lifecycle_config_name: p.child('studio_lifecycle_config_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sagemaker_user_profile(name, block): {
      local p = path(['aws_sagemaker_user_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_user_profile: {
              [name]: std.prune({
                domain_id: build.template(block.domain_id),
                single_sign_on_user_identifier: build.template(std.get(block, 'single_sign_on_user_identifier', null, true)),
                single_sign_on_user_value: build.template(std.get(block, 'single_sign_on_user_value', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_profile_name: build.template(block.user_profile_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      domain_id: p.child('domain_id').out,
      home_efs_file_system_uid: p.child('home_efs_file_system_uid').out,
      id: p.child('id').out,
      single_sign_on_user_identifier: p.child('single_sign_on_user_identifier').out,
      single_sign_on_user_value: p.child('single_sign_on_user_value').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_profile_name: p.child('user_profile_name').out,
    },
    sagemaker_workforce(name, block): {
      local p = path(['aws_sagemaker_workforce', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_workforce: {
              [name]: std.prune({
                workforce_name: build.template(block.workforce_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      subdomain: p.child('subdomain').out,
      workforce_name: p.child('workforce_name').out,
    },
    sagemaker_workteam(name, block): {
      local p = path(['aws_sagemaker_workteam', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sagemaker_workteam: {
              [name]: std.prune({
                description: build.template(block.description),
                tags: build.template(std.get(block, 'tags', null, true)),
                workforce_name: build.template(std.get(block, 'workforce_name', null, true)),
                workteam_name: build.template(block.workteam_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      subdomain: p.child('subdomain').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      workforce_name: p.child('workforce_name').out,
      workteam_name: p.child('workteam_name').out,
    },
    scheduler_schedule(name, block): {
      local p = path(['aws_scheduler_schedule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_scheduler_schedule: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                end_date: build.template(std.get(block, 'end_date', null, true)),
                kms_key_arn: build.template(std.get(block, 'kms_key_arn', null, true)),
                schedule_expression: build.template(block.schedule_expression),
                schedule_expression_timezone: build.template(std.get(block, 'schedule_expression_timezone', null, true)),
                start_date: build.template(std.get(block, 'start_date', null, true)),
                state: build.template(std.get(block, 'state', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      end_date: p.child('end_date').out,
      group_name: p.child('group_name').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      schedule_expression: p.child('schedule_expression').out,
      schedule_expression_timezone: p.child('schedule_expression_timezone').out,
      start_date: p.child('start_date').out,
      state: p.child('state').out,
    },
    scheduler_schedule_group(name, block): {
      local p = path(['aws_scheduler_schedule_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_scheduler_schedule_group: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_date: p.child('creation_date').out,
      id: p.child('id').out,
      last_modification_date: p.child('last_modification_date').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    schemas_discoverer(name, block): {
      local p = path(['aws_schemas_discoverer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_schemas_discoverer: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                source_arn: build.template(block.source_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      source_arn: p.child('source_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    schemas_registry(name, block): {
      local p = path(['aws_schemas_registry', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_schemas_registry: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    schemas_registry_policy(name, block): {
      local p = path(['aws_schemas_registry_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_schemas_registry_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                registry_name: build.template(block.registry_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      registry_name: p.child('registry_name').out,
    },
    schemas_schema(name, block): {
      local p = path(['aws_schemas_schema', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_schemas_schema: {
              [name]: std.prune({
                content: build.template(block.content),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                registry_name: build.template(block.registry_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      content: p.child('content').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_modified: p.child('last_modified').out,
      name: p.child('name').out,
      registry_name: p.child('registry_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      version: p.child('version').out,
      version_created_date: p.child('version_created_date').out,
    },
    secretsmanager_secret(name, block): {
      local p = path(['aws_secretsmanager_secret', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_secretsmanager_secret: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                force_overwrite_replica_secret: build.template(std.get(block, 'force_overwrite_replica_secret', null, true)),
                kms_key_id: build.template(std.get(block, 'kms_key_id', null, true)),
                recovery_window_in_days: build.template(std.get(block, 'recovery_window_in_days', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      force_overwrite_replica_secret: p.child('force_overwrite_replica_secret').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      policy: p.child('policy').out,
      recovery_window_in_days: p.child('recovery_window_in_days').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    secretsmanager_secret_policy(name, block): {
      local p = path(['aws_secretsmanager_secret_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_secretsmanager_secret_policy: {
              [name]: std.prune({
                block_public_policy: build.template(std.get(block, 'block_public_policy', null, true)),
                policy: build.template(block.policy),
                secret_arn: build.template(block.secret_arn),
              }),
            },
          },
        },
      },
      block_public_policy: p.child('block_public_policy').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
      secret_arn: p.child('secret_arn').out,
    },
    secretsmanager_secret_rotation(name, block): {
      local p = path(['aws_secretsmanager_secret_rotation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_secretsmanager_secret_rotation: {
              [name]: std.prune({
                rotate_immediately: build.template(std.get(block, 'rotate_immediately', null, true)),
                rotation_lambda_arn: build.template(std.get(block, 'rotation_lambda_arn', null, true)),
                secret_id: build.template(block.secret_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      rotate_immediately: p.child('rotate_immediately').out,
      rotation_enabled: p.child('rotation_enabled').out,
      rotation_lambda_arn: p.child('rotation_lambda_arn').out,
      secret_id: p.child('secret_id').out,
    },
    secretsmanager_secret_version(name, block): {
      local p = path(['aws_secretsmanager_secret_version', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_secretsmanager_secret_version: {
              [name]: std.prune({
                secret_binary: build.template(std.get(block, 'secret_binary', null, true)),
                secret_id: build.template(block.secret_id),
                secret_string: build.template(std.get(block, 'secret_string', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      secret_binary: p.child('secret_binary').out,
      secret_id: p.child('secret_id').out,
      secret_string: p.child('secret_string').out,
      version_id: p.child('version_id').out,
      version_stages: p.child('version_stages').out,
    },
    security_group(name, block): {
      local p = path(['aws_security_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_security_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                revoke_rules_on_delete: build.template(std.get(block, 'revoke_rules_on_delete', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      egress: p.child('egress').out,
      id: p.child('id').out,
      ingress: p.child('ingress').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      owner_id: p.child('owner_id').out,
      revoke_rules_on_delete: p.child('revoke_rules_on_delete').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    security_group_rule(name, block): {
      local p = path(['aws_security_group_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_security_group_rule: {
              [name]: std.prune({
                cidr_blocks: build.template(std.get(block, 'cidr_blocks', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                from_port: build.template(block.from_port),
                ipv6_cidr_blocks: build.template(std.get(block, 'ipv6_cidr_blocks', null, true)),
                prefix_list_ids: build.template(std.get(block, 'prefix_list_ids', null, true)),
                protocol: build.template(block.protocol),
                security_group_id: build.template(block.security_group_id),
                'self': build.template(std.get(block, 'self', null, true)),
                to_port: build.template(block.to_port),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      cidr_blocks: p.child('cidr_blocks').out,
      description: p.child('description').out,
      from_port: p.child('from_port').out,
      id: p.child('id').out,
      ipv6_cidr_blocks: p.child('ipv6_cidr_blocks').out,
      prefix_list_ids: p.child('prefix_list_ids').out,
      protocol: p.child('protocol').out,
      security_group_id: p.child('security_group_id').out,
      security_group_rule_id: p.child('security_group_rule_id').out,
      'self': p.child('self').out,
      source_security_group_id: p.child('source_security_group_id').out,
      to_port: p.child('to_port').out,
      type: p.child('type').out,
    },
    securityhub_account(name, block): {
      local p = path(['aws_securityhub_account', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_account: {
              [name]: std.prune({
                auto_enable_controls: build.template(std.get(block, 'auto_enable_controls', null, true)),
                enable_default_standards: build.template(std.get(block, 'enable_default_standards', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_enable_controls: p.child('auto_enable_controls').out,
      control_finding_generator: p.child('control_finding_generator').out,
      enable_default_standards: p.child('enable_default_standards').out,
      id: p.child('id').out,
    },
    securityhub_action_target(name, block): {
      local p = path(['aws_securityhub_action_target', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_action_target: {
              [name]: std.prune({
                description: build.template(block.description),
                identifier: build.template(block.identifier),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      identifier: p.child('identifier').out,
      name: p.child('name').out,
    },
    securityhub_automation_rule(name, block): {
      local p = path(['aws_securityhub_automation_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_automation_rule: {
              [name]: std.prune({
                description: build.template(block.description),
                rule_name: build.template(block.rule_name),
                rule_order: build.template(block.rule_order),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      is_terminal: p.child('is_terminal').out,
      rule_name: p.child('rule_name').out,
      rule_order: p.child('rule_order').out,
      rule_status: p.child('rule_status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    securityhub_configuration_policy(name, block): {
      local p = path(['aws_securityhub_configuration_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_configuration_policy: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    securityhub_configuration_policy_association(name, block): {
      local p = path(['aws_securityhub_configuration_policy_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_configuration_policy_association: {
              [name]: std.prune({
                policy_id: build.template(block.policy_id),
                target_id: build.template(block.target_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy_id: p.child('policy_id').out,
      target_id: p.child('target_id').out,
    },
    securityhub_finding_aggregator(name, block): {
      local p = path(['aws_securityhub_finding_aggregator', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_finding_aggregator: {
              [name]: std.prune({
                linking_mode: build.template(block.linking_mode),
                specified_regions: build.template(std.get(block, 'specified_regions', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      linking_mode: p.child('linking_mode').out,
      specified_regions: p.child('specified_regions').out,
    },
    securityhub_insight(name, block): {
      local p = path(['aws_securityhub_insight', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_insight: {
              [name]: std.prune({
                group_by_attribute: build.template(block.group_by_attribute),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      group_by_attribute: p.child('group_by_attribute').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    securityhub_invite_accepter(name, block): {
      local p = path(['aws_securityhub_invite_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_invite_accepter: {
              [name]: std.prune({
                master_id: build.template(block.master_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      invitation_id: p.child('invitation_id').out,
      master_id: p.child('master_id').out,
    },
    securityhub_member(name, block): {
      local p = path(['aws_securityhub_member', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_member: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
                email: build.template(std.get(block, 'email', null, true)),
                invite: build.template(std.get(block, 'invite', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      email: p.child('email').out,
      id: p.child('id').out,
      invite: p.child('invite').out,
      master_id: p.child('master_id').out,
      member_status: p.child('member_status').out,
    },
    securityhub_organization_admin_account(name, block): {
      local p = path(['aws_securityhub_organization_admin_account', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_organization_admin_account: {
              [name]: std.prune({
                admin_account_id: build.template(block.admin_account_id),
              }),
            },
          },
        },
      },
      admin_account_id: p.child('admin_account_id').out,
      id: p.child('id').out,
    },
    securityhub_organization_configuration(name, block): {
      local p = path(['aws_securityhub_organization_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_organization_configuration: {
              [name]: std.prune({
                auto_enable: build.template(block.auto_enable),
              }),
            },
          },
        },
      },
      auto_enable: p.child('auto_enable').out,
      auto_enable_standards: p.child('auto_enable_standards').out,
      id: p.child('id').out,
    },
    securityhub_product_subscription(name, block): {
      local p = path(['aws_securityhub_product_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_product_subscription: {
              [name]: std.prune({
                product_arn: build.template(block.product_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      product_arn: p.child('product_arn').out,
    },
    securityhub_standards_control(name, block): {
      local p = path(['aws_securityhub_standards_control', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_standards_control: {
              [name]: std.prune({
                control_status: build.template(block.control_status),
                standards_control_arn: build.template(block.standards_control_arn),
              }),
            },
          },
        },
      },
      control_id: p.child('control_id').out,
      control_status: p.child('control_status').out,
      control_status_updated_at: p.child('control_status_updated_at').out,
      description: p.child('description').out,
      disabled_reason: p.child('disabled_reason').out,
      id: p.child('id').out,
      related_requirements: p.child('related_requirements').out,
      remediation_url: p.child('remediation_url').out,
      severity_rating: p.child('severity_rating').out,
      standards_control_arn: p.child('standards_control_arn').out,
      title: p.child('title').out,
    },
    securityhub_standards_control_association(name, block): {
      local p = path(['aws_securityhub_standards_control_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_standards_control_association: {
              [name]: std.prune({
                association_status: build.template(block.association_status),
                security_control_id: build.template(block.security_control_id),
                standards_arn: build.template(block.standards_arn),
                updated_reason: build.template(std.get(block, 'updated_reason', null, true)),
              }),
            },
          },
        },
      },
      association_status: p.child('association_status').out,
      id: p.child('id').out,
      security_control_id: p.child('security_control_id').out,
      standards_arn: p.child('standards_arn').out,
      updated_reason: p.child('updated_reason').out,
    },
    securityhub_standards_subscription(name, block): {
      local p = path(['aws_securityhub_standards_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securityhub_standards_subscription: {
              [name]: std.prune({
                standards_arn: build.template(block.standards_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      standards_arn: p.child('standards_arn').out,
    },
    securitylake_aws_log_source(name, block): {
      local p = path(['aws_securitylake_aws_log_source', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securitylake_aws_log_source: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    securitylake_custom_log_source(name, block): {
      local p = path(['aws_securitylake_custom_log_source', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securitylake_custom_log_source: {
              [name]: std.prune({
                event_classes: build.template(std.get(block, 'event_classes', null, true)),
                source_name: build.template(block.source_name),
              }),
            },
          },
        },
      },
      attributes: p.child('attributes').out,
      event_classes: p.child('event_classes').out,
      id: p.child('id').out,
      provider_details: p.child('provider_details').out,
      source_name: p.child('source_name').out,
      source_version: p.child('source_version').out,
    },
    securitylake_data_lake(name, block): {
      local p = path(['aws_securitylake_data_lake', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securitylake_data_lake: {
              [name]: std.prune({
                meta_store_manager_role_arn: build.template(block.meta_store_manager_role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      meta_store_manager_role_arn: p.child('meta_store_manager_role_arn').out,
      s3_bucket_arn: p.child('s3_bucket_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    securitylake_subscriber(name, block): {
      local p = path(['aws_securitylake_subscriber', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securitylake_subscriber: {
              [name]: std.prune({
                subscriber_description: build.template(std.get(block, 'subscriber_description', null, true)),
                subscriber_name: build.template(std.get(block, 'subscriber_name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_type: p.child('access_type').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      resource_share_arn: p.child('resource_share_arn').out,
      resource_share_name: p.child('resource_share_name').out,
      role_arn: p.child('role_arn').out,
      s3_bucket_arn: p.child('s3_bucket_arn').out,
      subscriber_description: p.child('subscriber_description').out,
      subscriber_endpoint: p.child('subscriber_endpoint').out,
      subscriber_name: p.child('subscriber_name').out,
      subscriber_status: p.child('subscriber_status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    securitylake_subscriber_notification(name, block): {
      local p = path(['aws_securitylake_subscriber_notification', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_securitylake_subscriber_notification: {
              [name]: std.prune({
                subscriber_id: build.template(block.subscriber_id),
              }),
            },
          },
        },
      },
      endpoint_id: p.child('endpoint_id').out,
      id: p.child('id').out,
      subscriber_endpoint: p.child('subscriber_endpoint').out,
      subscriber_id: p.child('subscriber_id').out,
    },
    serverlessapplicationrepository_cloudformation_stack(name, block): {
      local p = path(['aws_serverlessapplicationrepository_cloudformation_stack', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_serverlessapplicationrepository_cloudformation_stack: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                capabilities: build.template(block.capabilities),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      capabilities: p.child('capabilities').out,
      id: p.child('id').out,
      name: p.child('name').out,
      outputs: p.child('outputs').out,
      parameters: p.child('parameters').out,
      semantic_version: p.child('semantic_version').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    service_discovery_http_namespace(name, block): {
      local p = path(['aws_service_discovery_http_namespace', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_service_discovery_http_namespace: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      http_name: p.child('http_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    service_discovery_instance(name, block): {
      local p = path(['aws_service_discovery_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_service_discovery_instance: {
              [name]: std.prune({
                attributes: build.template(block.attributes),
                instance_id: build.template(block.instance_id),
                service_id: build.template(block.service_id),
              }),
            },
          },
        },
      },
      attributes: p.child('attributes').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      service_id: p.child('service_id').out,
    },
    service_discovery_private_dns_namespace(name, block): {
      local p = path(['aws_service_discovery_private_dns_namespace', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_service_discovery_private_dns_namespace: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc: build.template(block.vpc),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      hosted_zone: p.child('hosted_zone').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc: p.child('vpc').out,
    },
    service_discovery_public_dns_namespace(name, block): {
      local p = path(['aws_service_discovery_public_dns_namespace', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_service_discovery_public_dns_namespace: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      hosted_zone: p.child('hosted_zone').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    service_discovery_service(name, block): {
      local p = path(['aws_service_discovery_service', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_service_discovery_service: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      force_destroy: p.child('force_destroy').out,
      id: p.child('id').out,
      name: p.child('name').out,
      namespace_id: p.child('namespace_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    servicecatalog_budget_resource_association(name, block): {
      local p = path(['aws_servicecatalog_budget_resource_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalog_budget_resource_association: {
              [name]: std.prune({
                budget_name: build.template(block.budget_name),
                resource_id: build.template(block.resource_id),
              }),
            },
          },
        },
      },
      budget_name: p.child('budget_name').out,
      id: p.child('id').out,
      resource_id: p.child('resource_id').out,
    },
    servicecatalog_constraint(name, block): {
      local p = path(['aws_servicecatalog_constraint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalog_constraint: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                parameters: build.template(block.parameters),
                portfolio_id: build.template(block.portfolio_id),
                product_id: build.template(block.product_id),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      description: p.child('description').out,
      id: p.child('id').out,
      owner: p.child('owner').out,
      parameters: p.child('parameters').out,
      portfolio_id: p.child('portfolio_id').out,
      product_id: p.child('product_id').out,
      status: p.child('status').out,
      type: p.child('type').out,
    },
    servicecatalog_organizations_access(name, block): {
      local p = path(['aws_servicecatalog_organizations_access', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalog_organizations_access: {
              [name]: std.prune({
                enabled: build.template(block.enabled),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
    },
    servicecatalog_portfolio(name, block): {
      local p = path(['aws_servicecatalog_portfolio', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalog_portfolio: {
              [name]: std.prune({
                name: build.template(block.name),
                provider_name: build.template(block.provider_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_time: p.child('created_time').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      provider_name: p.child('provider_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    servicecatalog_portfolio_share(name, block): {
      local p = path(['aws_servicecatalog_portfolio_share', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalog_portfolio_share: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                portfolio_id: build.template(block.portfolio_id),
                principal_id: build.template(block.principal_id),
                share_principals: build.template(std.get(block, 'share_principals', null, true)),
                share_tag_options: build.template(std.get(block, 'share_tag_options', null, true)),
                type: build.template(block.type),
                wait_for_acceptance: build.template(std.get(block, 'wait_for_acceptance', null, true)),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      accepted: p.child('accepted').out,
      id: p.child('id').out,
      portfolio_id: p.child('portfolio_id').out,
      principal_id: p.child('principal_id').out,
      share_principals: p.child('share_principals').out,
      share_tag_options: p.child('share_tag_options').out,
      type: p.child('type').out,
      wait_for_acceptance: p.child('wait_for_acceptance').out,
    },
    servicecatalog_principal_portfolio_association(name, block): {
      local p = path(['aws_servicecatalog_principal_portfolio_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalog_principal_portfolio_association: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                portfolio_id: build.template(block.portfolio_id),
                principal_arn: build.template(block.principal_arn),
                principal_type: build.template(std.get(block, 'principal_type', null, true)),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      id: p.child('id').out,
      portfolio_id: p.child('portfolio_id').out,
      principal_arn: p.child('principal_arn').out,
      principal_type: p.child('principal_type').out,
    },
    servicecatalog_product(name, block): {
      local p = path(['aws_servicecatalog_product', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalog_product: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                name: build.template(block.name),
                owner: build.template(block.owner),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      arn: p.child('arn').out,
      created_time: p.child('created_time').out,
      description: p.child('description').out,
      distributor: p.child('distributor').out,
      has_default_path: p.child('has_default_path').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      status: p.child('status').out,
      support_description: p.child('support_description').out,
      support_email: p.child('support_email').out,
      support_url: p.child('support_url').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    servicecatalog_product_portfolio_association(name, block): {
      local p = path(['aws_servicecatalog_product_portfolio_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalog_product_portfolio_association: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                portfolio_id: build.template(block.portfolio_id),
                product_id: build.template(block.product_id),
                source_portfolio_id: build.template(std.get(block, 'source_portfolio_id', null, true)),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      id: p.child('id').out,
      portfolio_id: p.child('portfolio_id').out,
      product_id: p.child('product_id').out,
      source_portfolio_id: p.child('source_portfolio_id').out,
    },
    servicecatalog_provisioned_product(name, block): {
      local p = path(['aws_servicecatalog_provisioned_product', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalog_provisioned_product: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                ignore_errors: build.template(std.get(block, 'ignore_errors', null, true)),
                name: build.template(block.name),
                notification_arns: build.template(std.get(block, 'notification_arns', null, true)),
                path_name: build.template(std.get(block, 'path_name', null, true)),
                product_name: build.template(std.get(block, 'product_name', null, true)),
                provisioning_artifact_name: build.template(std.get(block, 'provisioning_artifact_name', null, true)),
                retain_physical_resources: build.template(std.get(block, 'retain_physical_resources', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      arn: p.child('arn').out,
      cloudwatch_dashboard_names: p.child('cloudwatch_dashboard_names').out,
      created_time: p.child('created_time').out,
      id: p.child('id').out,
      ignore_errors: p.child('ignore_errors').out,
      last_provisioning_record_id: p.child('last_provisioning_record_id').out,
      last_record_id: p.child('last_record_id').out,
      last_successful_provisioning_record_id: p.child('last_successful_provisioning_record_id').out,
      launch_role_arn: p.child('launch_role_arn').out,
      name: p.child('name').out,
      notification_arns: p.child('notification_arns').out,
      outputs: p.child('outputs').out,
      path_id: p.child('path_id').out,
      path_name: p.child('path_name').out,
      product_id: p.child('product_id').out,
      product_name: p.child('product_name').out,
      provisioning_artifact_id: p.child('provisioning_artifact_id').out,
      provisioning_artifact_name: p.child('provisioning_artifact_name').out,
      retain_physical_resources: p.child('retain_physical_resources').out,
      status: p.child('status').out,
      status_message: p.child('status_message').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    servicecatalog_provisioning_artifact(name, block): {
      local p = path(['aws_servicecatalog_provisioning_artifact', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalog_provisioning_artifact: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                active: build.template(std.get(block, 'active', null, true)),
                disable_template_validation: build.template(std.get(block, 'disable_template_validation', null, true)),
                guidance: build.template(std.get(block, 'guidance', null, true)),
                product_id: build.template(block.product_id),
                template_physical_id: build.template(std.get(block, 'template_physical_id', null, true)),
                template_url: build.template(std.get(block, 'template_url', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      active: p.child('active').out,
      created_time: p.child('created_time').out,
      description: p.child('description').out,
      disable_template_validation: p.child('disable_template_validation').out,
      guidance: p.child('guidance').out,
      id: p.child('id').out,
      name: p.child('name').out,
      product_id: p.child('product_id').out,
      provisioning_artifact_id: p.child('provisioning_artifact_id').out,
      template_physical_id: p.child('template_physical_id').out,
      template_url: p.child('template_url').out,
      type: p.child('type').out,
    },
    servicecatalog_service_action(name, block): {
      local p = path(['aws_servicecatalog_service_action', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalog_service_action: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    servicecatalog_tag_option(name, block): {
      local p = path(['aws_servicecatalog_tag_option', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalog_tag_option: {
              [name]: std.prune({
                active: build.template(std.get(block, 'active', null, true)),
                key: build.template(block.key),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      active: p.child('active').out,
      id: p.child('id').out,
      key: p.child('key').out,
      owner: p.child('owner').out,
      value: p.child('value').out,
    },
    servicecatalog_tag_option_resource_association(name, block): {
      local p = path(['aws_servicecatalog_tag_option_resource_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalog_tag_option_resource_association: {
              [name]: std.prune({
                resource_id: build.template(block.resource_id),
                tag_option_id: build.template(block.tag_option_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      resource_arn: p.child('resource_arn').out,
      resource_created_time: p.child('resource_created_time').out,
      resource_description: p.child('resource_description').out,
      resource_id: p.child('resource_id').out,
      resource_name: p.child('resource_name').out,
      tag_option_id: p.child('tag_option_id').out,
    },
    servicecatalogappregistry_application(name, block): {
      local p = path(['aws_servicecatalogappregistry_application', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicecatalogappregistry_application: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      application_tag: p.child('application_tag').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    servicequotas_service_quota(name, block): {
      local p = path(['aws_servicequotas_service_quota', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicequotas_service_quota: {
              [name]: std.prune({
                quota_code: build.template(block.quota_code),
                service_code: build.template(block.service_code),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      adjustable: p.child('adjustable').out,
      arn: p.child('arn').out,
      default_value: p.child('default_value').out,
      id: p.child('id').out,
      quota_code: p.child('quota_code').out,
      quota_name: p.child('quota_name').out,
      request_id: p.child('request_id').out,
      request_status: p.child('request_status').out,
      service_code: p.child('service_code').out,
      service_name: p.child('service_name').out,
      usage_metric: p.child('usage_metric').out,
      value: p.child('value').out,
    },
    servicequotas_template(name, block): {
      local p = path(['aws_servicequotas_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicequotas_template: {
              [name]: std.prune({
                quota_code: build.template(block.quota_code),
                region: build.template(block.region),
                service_code: build.template(block.service_code),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      global_quota: p.child('global_quota').out,
      id: p.child('id').out,
      quota_code: p.child('quota_code').out,
      quota_name: p.child('quota_name').out,
      region: p.child('region').out,
      service_code: p.child('service_code').out,
      service_name: p.child('service_name').out,
      unit: p.child('unit').out,
      value: p.child('value').out,
    },
    servicequotas_template_association(name, block): {
      local p = path(['aws_servicequotas_template_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_servicequotas_template_association: {
              [name]: std.prune({
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      skip_destroy: p.child('skip_destroy').out,
      status: p.child('status').out,
    },
    ses_active_receipt_rule_set(name, block): {
      local p = path(['aws_ses_active_receipt_rule_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_active_receipt_rule_set: {
              [name]: std.prune({
                rule_set_name: build.template(block.rule_set_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      rule_set_name: p.child('rule_set_name').out,
    },
    ses_configuration_set(name, block): {
      local p = path(['aws_ses_configuration_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_configuration_set: {
              [name]: std.prune({
                name: build.template(block.name),
                reputation_metrics_enabled: build.template(std.get(block, 'reputation_metrics_enabled', null, true)),
                sending_enabled: build.template(std.get(block, 'sending_enabled', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      last_fresh_start: p.child('last_fresh_start').out,
      name: p.child('name').out,
      reputation_metrics_enabled: p.child('reputation_metrics_enabled').out,
      sending_enabled: p.child('sending_enabled').out,
    },
    ses_domain_dkim(name, block): {
      local p = path(['aws_ses_domain_dkim', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_domain_dkim: {
              [name]: std.prune({
                domain: build.template(block.domain),
              }),
            },
          },
        },
      },
      dkim_tokens: p.child('dkim_tokens').out,
      domain: p.child('domain').out,
      id: p.child('id').out,
    },
    ses_domain_identity(name, block): {
      local p = path(['aws_ses_domain_identity', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_domain_identity: {
              [name]: std.prune({
                domain: build.template(block.domain),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      domain: p.child('domain').out,
      id: p.child('id').out,
      verification_token: p.child('verification_token').out,
    },
    ses_domain_identity_verification(name, block): {
      local p = path(['aws_ses_domain_identity_verification', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_domain_identity_verification: {
              [name]: std.prune({
                domain: build.template(block.domain),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      domain: p.child('domain').out,
      id: p.child('id').out,
    },
    ses_domain_mail_from(name, block): {
      local p = path(['aws_ses_domain_mail_from', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_domain_mail_from: {
              [name]: std.prune({
                behavior_on_mx_failure: build.template(std.get(block, 'behavior_on_mx_failure', null, true)),
                domain: build.template(block.domain),
                mail_from_domain: build.template(block.mail_from_domain),
              }),
            },
          },
        },
      },
      behavior_on_mx_failure: p.child('behavior_on_mx_failure').out,
      domain: p.child('domain').out,
      id: p.child('id').out,
      mail_from_domain: p.child('mail_from_domain').out,
    },
    ses_email_identity(name, block): {
      local p = path(['aws_ses_email_identity', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_email_identity: {
              [name]: std.prune({
                email: build.template(block.email),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      email: p.child('email').out,
      id: p.child('id').out,
    },
    ses_event_destination(name, block): {
      local p = path(['aws_ses_event_destination', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_event_destination: {
              [name]: std.prune({
                configuration_set_name: build.template(block.configuration_set_name),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                matching_types: build.template(block.matching_types),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      configuration_set_name: p.child('configuration_set_name').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      matching_types: p.child('matching_types').out,
      name: p.child('name').out,
    },
    ses_identity_notification_topic(name, block): {
      local p = path(['aws_ses_identity_notification_topic', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_identity_notification_topic: {
              [name]: std.prune({
                identity: build.template(block.identity),
                include_original_headers: build.template(std.get(block, 'include_original_headers', null, true)),
                notification_type: build.template(block.notification_type),
                topic_arn: build.template(std.get(block, 'topic_arn', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity: p.child('identity').out,
      include_original_headers: p.child('include_original_headers').out,
      notification_type: p.child('notification_type').out,
      topic_arn: p.child('topic_arn').out,
    },
    ses_identity_policy(name, block): {
      local p = path(['aws_ses_identity_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_identity_policy: {
              [name]: std.prune({
                identity: build.template(block.identity),
                name: build.template(block.name),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identity: p.child('identity').out,
      name: p.child('name').out,
      policy: p.child('policy').out,
    },
    ses_receipt_filter(name, block): {
      local p = path(['aws_ses_receipt_filter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_receipt_filter: {
              [name]: std.prune({
                cidr: build.template(block.cidr),
                name: build.template(block.name),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cidr: p.child('cidr').out,
      id: p.child('id').out,
      name: p.child('name').out,
      policy: p.child('policy').out,
    },
    ses_receipt_rule(name, block): {
      local p = path(['aws_ses_receipt_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_receipt_rule: {
              [name]: std.prune({
                after: build.template(std.get(block, 'after', null, true)),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                name: build.template(block.name),
                recipients: build.template(std.get(block, 'recipients', null, true)),
                rule_set_name: build.template(block.rule_set_name),
                scan_enabled: build.template(std.get(block, 'scan_enabled', null, true)),
              }),
            },
          },
        },
      },
      after: p.child('after').out,
      arn: p.child('arn').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      name: p.child('name').out,
      recipients: p.child('recipients').out,
      rule_set_name: p.child('rule_set_name').out,
      scan_enabled: p.child('scan_enabled').out,
      tls_policy: p.child('tls_policy').out,
    },
    ses_receipt_rule_set(name, block): {
      local p = path(['aws_ses_receipt_rule_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_receipt_rule_set: {
              [name]: std.prune({
                rule_set_name: build.template(block.rule_set_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      rule_set_name: p.child('rule_set_name').out,
    },
    ses_template(name, block): {
      local p = path(['aws_ses_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ses_template: {
              [name]: std.prune({
                html: build.template(std.get(block, 'html', null, true)),
                name: build.template(block.name),
                subject: build.template(std.get(block, 'subject', null, true)),
                text: build.template(std.get(block, 'text', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      html: p.child('html').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subject: p.child('subject').out,
      text: p.child('text').out,
    },
    sesv2_account_suppression_attributes(name, block): {
      local p = path(['aws_sesv2_account_suppression_attributes', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sesv2_account_suppression_attributes: {
              [name]: std.prune({
                suppressed_reasons: build.template(block.suppressed_reasons),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      suppressed_reasons: p.child('suppressed_reasons').out,
    },
    sesv2_account_vdm_attributes(name, block): {
      local p = path(['aws_sesv2_account_vdm_attributes', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sesv2_account_vdm_attributes: {
              [name]: std.prune({
                vdm_enabled: build.template(block.vdm_enabled),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      vdm_enabled: p.child('vdm_enabled').out,
    },
    sesv2_configuration_set(name, block): {
      local p = path(['aws_sesv2_configuration_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sesv2_configuration_set: {
              [name]: std.prune({
                configuration_set_name: build.template(block.configuration_set_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      configuration_set_name: p.child('configuration_set_name').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sesv2_configuration_set_event_destination(name, block): {
      local p = path(['aws_sesv2_configuration_set_event_destination', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sesv2_configuration_set_event_destination: {
              [name]: std.prune({
                configuration_set_name: build.template(block.configuration_set_name),
                event_destination_name: build.template(block.event_destination_name),
              }),
            },
          },
        },
      },
      configuration_set_name: p.child('configuration_set_name').out,
      event_destination_name: p.child('event_destination_name').out,
      id: p.child('id').out,
    },
    sesv2_contact_list(name, block): {
      local p = path(['aws_sesv2_contact_list', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sesv2_contact_list: {
              [name]: std.prune({
                contact_list_name: build.template(block.contact_list_name),
                description: build.template(std.get(block, 'description', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      contact_list_name: p.child('contact_list_name').out,
      created_timestamp: p.child('created_timestamp').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_updated_timestamp: p.child('last_updated_timestamp').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sesv2_dedicated_ip_assignment(name, block): {
      local p = path(['aws_sesv2_dedicated_ip_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sesv2_dedicated_ip_assignment: {
              [name]: std.prune({
                destination_pool_name: build.template(block.destination_pool_name),
                ip: build.template(block.ip),
              }),
            },
          },
        },
      },
      destination_pool_name: p.child('destination_pool_name').out,
      id: p.child('id').out,
      ip: p.child('ip').out,
    },
    sesv2_dedicated_ip_pool(name, block): {
      local p = path(['aws_sesv2_dedicated_ip_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sesv2_dedicated_ip_pool: {
              [name]: std.prune({
                pool_name: build.template(block.pool_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      pool_name: p.child('pool_name').out,
      scaling_mode: p.child('scaling_mode').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sesv2_email_identity(name, block): {
      local p = path(['aws_sesv2_email_identity', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sesv2_email_identity: {
              [name]: std.prune({
                configuration_set_name: build.template(std.get(block, 'configuration_set_name', null, true)),
                email_identity: build.template(block.email_identity),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      configuration_set_name: p.child('configuration_set_name').out,
      email_identity: p.child('email_identity').out,
      id: p.child('id').out,
      identity_type: p.child('identity_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      verified_for_sending_status: p.child('verified_for_sending_status').out,
    },
    sesv2_email_identity_feedback_attributes(name, block): {
      local p = path(['aws_sesv2_email_identity_feedback_attributes', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sesv2_email_identity_feedback_attributes: {
              [name]: std.prune({
                email_forwarding_enabled: build.template(std.get(block, 'email_forwarding_enabled', null, true)),
                email_identity: build.template(block.email_identity),
              }),
            },
          },
        },
      },
      email_forwarding_enabled: p.child('email_forwarding_enabled').out,
      email_identity: p.child('email_identity').out,
      id: p.child('id').out,
    },
    sesv2_email_identity_mail_from_attributes(name, block): {
      local p = path(['aws_sesv2_email_identity_mail_from_attributes', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sesv2_email_identity_mail_from_attributes: {
              [name]: std.prune({
                behavior_on_mx_failure: build.template(std.get(block, 'behavior_on_mx_failure', null, true)),
                email_identity: build.template(block.email_identity),
                mail_from_domain: build.template(std.get(block, 'mail_from_domain', null, true)),
              }),
            },
          },
        },
      },
      behavior_on_mx_failure: p.child('behavior_on_mx_failure').out,
      email_identity: p.child('email_identity').out,
      id: p.child('id').out,
      mail_from_domain: p.child('mail_from_domain').out,
    },
    sesv2_email_identity_policy(name, block): {
      local p = path(['aws_sesv2_email_identity_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sesv2_email_identity_policy: {
              [name]: std.prune({
                email_identity: build.template(block.email_identity),
                policy: build.template(block.policy),
                policy_name: build.template(block.policy_name),
              }),
            },
          },
        },
      },
      email_identity: p.child('email_identity').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
      policy_name: p.child('policy_name').out,
    },
    sfn_activity(name, block): {
      local p = path(['aws_sfn_activity', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sfn_activity: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      creation_date: p.child('creation_date').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    sfn_alias(name, block): {
      local p = path(['aws_sfn_alias', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sfn_alias: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_date: p.child('creation_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    sfn_state_machine(name, block): {
      local p = path(['aws_sfn_state_machine', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sfn_state_machine: {
              [name]: std.prune({
                definition: build.template(block.definition),
                publish: build.template(std.get(block, 'publish', null, true)),
                role_arn: build.template(block.role_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_date: p.child('creation_date').out,
      definition: p.child('definition').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      publish: p.child('publish').out,
      revision_id: p.child('revision_id').out,
      role_arn: p.child('role_arn').out,
      state_machine_version_arn: p.child('state_machine_version_arn').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      version_description: p.child('version_description').out,
    },
    shield_application_layer_automatic_response(name, block): {
      local p = path(['aws_shield_application_layer_automatic_response', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_shield_application_layer_automatic_response: {
              [name]: std.prune({
                action: build.template(block.action),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      id: p.child('id').out,
      resource_arn: p.child('resource_arn').out,
    },
    shield_drt_access_log_bucket_association(name, block): {
      local p = path(['aws_shield_drt_access_log_bucket_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_shield_drt_access_log_bucket_association: {
              [name]: std.prune({
                log_bucket: build.template(block.log_bucket),
                role_arn_association_id: build.template(block.role_arn_association_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_bucket: p.child('log_bucket').out,
      role_arn_association_id: p.child('role_arn_association_id').out,
    },
    shield_drt_access_role_arn_association(name, block): {
      local p = path(['aws_shield_drt_access_role_arn_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_shield_drt_access_role_arn_association: {
              [name]: std.prune({
                role_arn: build.template(block.role_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      role_arn: p.child('role_arn').out,
    },
    shield_proactive_engagement(name, block): {
      local p = path(['aws_shield_proactive_engagement', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_shield_proactive_engagement: {
              [name]: std.prune({
                enabled: build.template(block.enabled),
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
    },
    shield_protection(name, block): {
      local p = path(['aws_shield_protection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_shield_protection: {
              [name]: std.prune({
                name: build.template(block.name),
                resource_arn: build.template(block.resource_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      resource_arn: p.child('resource_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    shield_protection_group(name, block): {
      local p = path(['aws_shield_protection_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_shield_protection_group: {
              [name]: std.prune({
                aggregation: build.template(block.aggregation),
                members: build.template(std.get(block, 'members', null, true)),
                pattern: build.template(block.pattern),
                protection_group_id: build.template(block.protection_group_id),
                resource_type: build.template(std.get(block, 'resource_type', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      aggregation: p.child('aggregation').out,
      id: p.child('id').out,
      members: p.child('members').out,
      pattern: p.child('pattern').out,
      protection_group_arn: p.child('protection_group_arn').out,
      protection_group_id: p.child('protection_group_id').out,
      resource_type: p.child('resource_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    shield_protection_health_check_association(name, block): {
      local p = path(['aws_shield_protection_health_check_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_shield_protection_health_check_association: {
              [name]: std.prune({
                health_check_arn: build.template(block.health_check_arn),
                shield_protection_id: build.template(block.shield_protection_id),
              }),
            },
          },
        },
      },
      health_check_arn: p.child('health_check_arn').out,
      id: p.child('id').out,
      shield_protection_id: p.child('shield_protection_id').out,
    },
    shield_subscription(name, block): {
      local p = path(['aws_shield_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_shield_subscription: {
              [name]: std.prune({
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
              }),
            },
          },
        },
      },
      auto_renew: p.child('auto_renew').out,
      id: p.child('id').out,
      skip_destroy: p.child('skip_destroy').out,
    },
    signer_signing_job(name, block): {
      local p = path(['aws_signer_signing_job', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_signer_signing_job: {
              [name]: std.prune({
                ignore_signing_job_failure: build.template(std.get(block, 'ignore_signing_job_failure', null, true)),
                profile_name: build.template(block.profile_name),
              }),
            },
          },
        },
      },
      completed_at: p.child('completed_at').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      ignore_signing_job_failure: p.child('ignore_signing_job_failure').out,
      job_id: p.child('job_id').out,
      job_invoker: p.child('job_invoker').out,
      job_owner: p.child('job_owner').out,
      platform_display_name: p.child('platform_display_name').out,
      platform_id: p.child('platform_id').out,
      profile_name: p.child('profile_name').out,
      profile_version: p.child('profile_version').out,
      requested_by: p.child('requested_by').out,
      revocation_record: p.child('revocation_record').out,
      signature_expires_at: p.child('signature_expires_at').out,
      signed_object: p.child('signed_object').out,
      status: p.child('status').out,
      status_reason: p.child('status_reason').out,
    },
    signer_signing_profile(name, block): {
      local p = path(['aws_signer_signing_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_signer_signing_profile: {
              [name]: std.prune({
                platform_id: build.template(block.platform_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      platform_display_name: p.child('platform_display_name').out,
      platform_id: p.child('platform_id').out,
      revocation_record: p.child('revocation_record').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      version: p.child('version').out,
      version_arn: p.child('version_arn').out,
    },
    signer_signing_profile_permission(name, block): {
      local p = path(['aws_signer_signing_profile_permission', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_signer_signing_profile_permission: {
              [name]: std.prune({
                action: build.template(block.action),
                principal: build.template(block.principal),
                profile_name: build.template(block.profile_name),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      id: p.child('id').out,
      principal: p.child('principal').out,
      profile_name: p.child('profile_name').out,
      profile_version: p.child('profile_version').out,
      statement_id: p.child('statement_id').out,
      statement_id_prefix: p.child('statement_id_prefix').out,
    },
    simpledb_domain(name, block): {
      local p = path(['aws_simpledb_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_simpledb_domain: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    snapshot_create_volume_permission(name, block): {
      local p = path(['aws_snapshot_create_volume_permission', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_snapshot_create_volume_permission: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
                snapshot_id: build.template(block.snapshot_id),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      id: p.child('id').out,
      snapshot_id: p.child('snapshot_id').out,
    },
    sns_platform_application(name, block): {
      local p = path(['aws_sns_platform_application', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sns_platform_application: {
              [name]: std.prune({
                apple_platform_bundle_id: build.template(std.get(block, 'apple_platform_bundle_id', null, true)),
                apple_platform_team_id: build.template(std.get(block, 'apple_platform_team_id', null, true)),
                event_delivery_failure_topic_arn: build.template(std.get(block, 'event_delivery_failure_topic_arn', null, true)),
                event_endpoint_created_topic_arn: build.template(std.get(block, 'event_endpoint_created_topic_arn', null, true)),
                event_endpoint_deleted_topic_arn: build.template(std.get(block, 'event_endpoint_deleted_topic_arn', null, true)),
                event_endpoint_updated_topic_arn: build.template(std.get(block, 'event_endpoint_updated_topic_arn', null, true)),
                failure_feedback_role_arn: build.template(std.get(block, 'failure_feedback_role_arn', null, true)),
                name: build.template(block.name),
                platform: build.template(block.platform),
                platform_credential: build.template(block.platform_credential),
                platform_principal: build.template(std.get(block, 'platform_principal', null, true)),
                success_feedback_role_arn: build.template(std.get(block, 'success_feedback_role_arn', null, true)),
                success_feedback_sample_rate: build.template(std.get(block, 'success_feedback_sample_rate', null, true)),
              }),
            },
          },
        },
      },
      apple_platform_bundle_id: p.child('apple_platform_bundle_id').out,
      apple_platform_team_id: p.child('apple_platform_team_id').out,
      arn: p.child('arn').out,
      event_delivery_failure_topic_arn: p.child('event_delivery_failure_topic_arn').out,
      event_endpoint_created_topic_arn: p.child('event_endpoint_created_topic_arn').out,
      event_endpoint_deleted_topic_arn: p.child('event_endpoint_deleted_topic_arn').out,
      event_endpoint_updated_topic_arn: p.child('event_endpoint_updated_topic_arn').out,
      failure_feedback_role_arn: p.child('failure_feedback_role_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      platform: p.child('platform').out,
      platform_credential: p.child('platform_credential').out,
      platform_principal: p.child('platform_principal').out,
      success_feedback_role_arn: p.child('success_feedback_role_arn').out,
      success_feedback_sample_rate: p.child('success_feedback_sample_rate').out,
    },
    sns_sms_preferences(name, block): {
      local p = path(['aws_sns_sms_preferences', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sns_sms_preferences: {
              [name]: std.prune({
                default_sender_id: build.template(std.get(block, 'default_sender_id', null, true)),
                default_sms_type: build.template(std.get(block, 'default_sms_type', null, true)),
                delivery_status_iam_role_arn: build.template(std.get(block, 'delivery_status_iam_role_arn', null, true)),
                delivery_status_success_sampling_rate: build.template(std.get(block, 'delivery_status_success_sampling_rate', null, true)),
                usage_report_s3_bucket: build.template(std.get(block, 'usage_report_s3_bucket', null, true)),
              }),
            },
          },
        },
      },
      default_sender_id: p.child('default_sender_id').out,
      default_sms_type: p.child('default_sms_type').out,
      delivery_status_iam_role_arn: p.child('delivery_status_iam_role_arn').out,
      delivery_status_success_sampling_rate: p.child('delivery_status_success_sampling_rate').out,
      id: p.child('id').out,
      monthly_spend_limit: p.child('monthly_spend_limit').out,
      usage_report_s3_bucket: p.child('usage_report_s3_bucket').out,
    },
    sns_topic(name, block): {
      local p = path(['aws_sns_topic', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sns_topic: {
              [name]: std.prune({
                application_failure_feedback_role_arn: build.template(std.get(block, 'application_failure_feedback_role_arn', null, true)),
                application_success_feedback_role_arn: build.template(std.get(block, 'application_success_feedback_role_arn', null, true)),
                application_success_feedback_sample_rate: build.template(std.get(block, 'application_success_feedback_sample_rate', null, true)),
                archive_policy: build.template(std.get(block, 'archive_policy', null, true)),
                content_based_deduplication: build.template(std.get(block, 'content_based_deduplication', null, true)),
                delivery_policy: build.template(std.get(block, 'delivery_policy', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                fifo_topic: build.template(std.get(block, 'fifo_topic', null, true)),
                firehose_failure_feedback_role_arn: build.template(std.get(block, 'firehose_failure_feedback_role_arn', null, true)),
                firehose_success_feedback_role_arn: build.template(std.get(block, 'firehose_success_feedback_role_arn', null, true)),
                firehose_success_feedback_sample_rate: build.template(std.get(block, 'firehose_success_feedback_sample_rate', null, true)),
                http_failure_feedback_role_arn: build.template(std.get(block, 'http_failure_feedback_role_arn', null, true)),
                http_success_feedback_role_arn: build.template(std.get(block, 'http_success_feedback_role_arn', null, true)),
                http_success_feedback_sample_rate: build.template(std.get(block, 'http_success_feedback_sample_rate', null, true)),
                kms_master_key_id: build.template(std.get(block, 'kms_master_key_id', null, true)),
                lambda_failure_feedback_role_arn: build.template(std.get(block, 'lambda_failure_feedback_role_arn', null, true)),
                lambda_success_feedback_role_arn: build.template(std.get(block, 'lambda_success_feedback_role_arn', null, true)),
                lambda_success_feedback_sample_rate: build.template(std.get(block, 'lambda_success_feedback_sample_rate', null, true)),
                sqs_failure_feedback_role_arn: build.template(std.get(block, 'sqs_failure_feedback_role_arn', null, true)),
                sqs_success_feedback_role_arn: build.template(std.get(block, 'sqs_success_feedback_role_arn', null, true)),
                sqs_success_feedback_sample_rate: build.template(std.get(block, 'sqs_success_feedback_sample_rate', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application_failure_feedback_role_arn: p.child('application_failure_feedback_role_arn').out,
      application_success_feedback_role_arn: p.child('application_success_feedback_role_arn').out,
      application_success_feedback_sample_rate: p.child('application_success_feedback_sample_rate').out,
      archive_policy: p.child('archive_policy').out,
      arn: p.child('arn').out,
      beginning_archive_time: p.child('beginning_archive_time').out,
      content_based_deduplication: p.child('content_based_deduplication').out,
      delivery_policy: p.child('delivery_policy').out,
      display_name: p.child('display_name').out,
      fifo_topic: p.child('fifo_topic').out,
      firehose_failure_feedback_role_arn: p.child('firehose_failure_feedback_role_arn').out,
      firehose_success_feedback_role_arn: p.child('firehose_success_feedback_role_arn').out,
      firehose_success_feedback_sample_rate: p.child('firehose_success_feedback_sample_rate').out,
      http_failure_feedback_role_arn: p.child('http_failure_feedback_role_arn').out,
      http_success_feedback_role_arn: p.child('http_success_feedback_role_arn').out,
      http_success_feedback_sample_rate: p.child('http_success_feedback_sample_rate').out,
      id: p.child('id').out,
      kms_master_key_id: p.child('kms_master_key_id').out,
      lambda_failure_feedback_role_arn: p.child('lambda_failure_feedback_role_arn').out,
      lambda_success_feedback_role_arn: p.child('lambda_success_feedback_role_arn').out,
      lambda_success_feedback_sample_rate: p.child('lambda_success_feedback_sample_rate').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      owner: p.child('owner').out,
      policy: p.child('policy').out,
      signature_version: p.child('signature_version').out,
      sqs_failure_feedback_role_arn: p.child('sqs_failure_feedback_role_arn').out,
      sqs_success_feedback_role_arn: p.child('sqs_success_feedback_role_arn').out,
      sqs_success_feedback_sample_rate: p.child('sqs_success_feedback_sample_rate').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tracing_config: p.child('tracing_config').out,
    },
    sns_topic_data_protection_policy(name, block): {
      local p = path(['aws_sns_topic_data_protection_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sns_topic_data_protection_policy: {
              [name]: std.prune({
                arn: build.template(block.arn),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
    },
    sns_topic_policy(name, block): {
      local p = path(['aws_sns_topic_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sns_topic_policy: {
              [name]: std.prune({
                arn: build.template(block.arn),
                policy: build.template(block.policy),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      owner: p.child('owner').out,
      policy: p.child('policy').out,
    },
    sns_topic_subscription(name, block): {
      local p = path(['aws_sns_topic_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sns_topic_subscription: {
              [name]: std.prune({
                confirmation_timeout_in_minutes: build.template(std.get(block, 'confirmation_timeout_in_minutes', null, true)),
                delivery_policy: build.template(std.get(block, 'delivery_policy', null, true)),
                endpoint: build.template(block.endpoint),
                endpoint_auto_confirms: build.template(std.get(block, 'endpoint_auto_confirms', null, true)),
                filter_policy: build.template(std.get(block, 'filter_policy', null, true)),
                protocol: build.template(block.protocol),
                raw_message_delivery: build.template(std.get(block, 'raw_message_delivery', null, true)),
                redrive_policy: build.template(std.get(block, 'redrive_policy', null, true)),
                replay_policy: build.template(std.get(block, 'replay_policy', null, true)),
                subscription_role_arn: build.template(std.get(block, 'subscription_role_arn', null, true)),
                topic_arn: build.template(block.topic_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      confirmation_timeout_in_minutes: p.child('confirmation_timeout_in_minutes').out,
      confirmation_was_authenticated: p.child('confirmation_was_authenticated').out,
      delivery_policy: p.child('delivery_policy').out,
      endpoint: p.child('endpoint').out,
      endpoint_auto_confirms: p.child('endpoint_auto_confirms').out,
      filter_policy: p.child('filter_policy').out,
      filter_policy_scope: p.child('filter_policy_scope').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      pending_confirmation: p.child('pending_confirmation').out,
      protocol: p.child('protocol').out,
      raw_message_delivery: p.child('raw_message_delivery').out,
      redrive_policy: p.child('redrive_policy').out,
      replay_policy: p.child('replay_policy').out,
      subscription_role_arn: p.child('subscription_role_arn').out,
      topic_arn: p.child('topic_arn').out,
    },
    spot_datafeed_subscription(name, block): {
      local p = path(['aws_spot_datafeed_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_spot_datafeed_subscription: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                prefix: build.template(std.get(block, 'prefix', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      id: p.child('id').out,
      prefix: p.child('prefix').out,
    },
    spot_fleet_request(name, block): {
      local p = path(['aws_spot_fleet_request', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_spot_fleet_request: {
              [name]: std.prune({
                allocation_strategy: build.template(std.get(block, 'allocation_strategy', null, true)),
                context: build.template(std.get(block, 'context', null, true)),
                excess_capacity_termination_policy: build.template(std.get(block, 'excess_capacity_termination_policy', null, true)),
                fleet_type: build.template(std.get(block, 'fleet_type', null, true)),
                iam_fleet_role: build.template(block.iam_fleet_role),
                instance_interruption_behaviour: build.template(std.get(block, 'instance_interruption_behaviour', null, true)),
                instance_pools_to_use_count: build.template(std.get(block, 'instance_pools_to_use_count', null, true)),
                on_demand_allocation_strategy: build.template(std.get(block, 'on_demand_allocation_strategy', null, true)),
                on_demand_max_total_price: build.template(std.get(block, 'on_demand_max_total_price', null, true)),
                on_demand_target_capacity: build.template(std.get(block, 'on_demand_target_capacity', null, true)),
                replace_unhealthy_instances: build.template(std.get(block, 'replace_unhealthy_instances', null, true)),
                spot_price: build.template(std.get(block, 'spot_price', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_capacity: build.template(block.target_capacity),
                target_capacity_unit_type: build.template(std.get(block, 'target_capacity_unit_type', null, true)),
                terminate_instances_on_delete: build.template(std.get(block, 'terminate_instances_on_delete', null, true)),
                terminate_instances_with_expiration: build.template(std.get(block, 'terminate_instances_with_expiration', null, true)),
                valid_from: build.template(std.get(block, 'valid_from', null, true)),
                valid_until: build.template(std.get(block, 'valid_until', null, true)),
                wait_for_fulfillment: build.template(std.get(block, 'wait_for_fulfillment', null, true)),
              }),
            },
          },
        },
      },
      allocation_strategy: p.child('allocation_strategy').out,
      client_token: p.child('client_token').out,
      context: p.child('context').out,
      excess_capacity_termination_policy: p.child('excess_capacity_termination_policy').out,
      fleet_type: p.child('fleet_type').out,
      iam_fleet_role: p.child('iam_fleet_role').out,
      id: p.child('id').out,
      instance_interruption_behaviour: p.child('instance_interruption_behaviour').out,
      instance_pools_to_use_count: p.child('instance_pools_to_use_count').out,
      load_balancers: p.child('load_balancers').out,
      on_demand_allocation_strategy: p.child('on_demand_allocation_strategy').out,
      on_demand_max_total_price: p.child('on_demand_max_total_price').out,
      on_demand_target_capacity: p.child('on_demand_target_capacity').out,
      replace_unhealthy_instances: p.child('replace_unhealthy_instances').out,
      spot_price: p.child('spot_price').out,
      spot_request_state: p.child('spot_request_state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_capacity: p.child('target_capacity').out,
      target_capacity_unit_type: p.child('target_capacity_unit_type').out,
      target_group_arns: p.child('target_group_arns').out,
      terminate_instances_on_delete: p.child('terminate_instances_on_delete').out,
      terminate_instances_with_expiration: p.child('terminate_instances_with_expiration').out,
      valid_from: p.child('valid_from').out,
      valid_until: p.child('valid_until').out,
      wait_for_fulfillment: p.child('wait_for_fulfillment').out,
    },
    spot_instance_request(name, block): {
      local p = path(['aws_spot_instance_request', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_spot_instance_request: {
              [name]: std.prune({
                block_duration_minutes: build.template(std.get(block, 'block_duration_minutes', null, true)),
                get_password_data: build.template(std.get(block, 'get_password_data', null, true)),
                hibernation: build.template(std.get(block, 'hibernation', null, true)),
                instance_interruption_behavior: build.template(std.get(block, 'instance_interruption_behavior', null, true)),
                launch_group: build.template(std.get(block, 'launch_group', null, true)),
                source_dest_check: build.template(std.get(block, 'source_dest_check', null, true)),
                spot_type: build.template(std.get(block, 'spot_type', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_data_replace_on_change: build.template(std.get(block, 'user_data_replace_on_change', null, true)),
                volume_tags: build.template(std.get(block, 'volume_tags', null, true)),
                wait_for_fulfillment: build.template(std.get(block, 'wait_for_fulfillment', null, true)),
              }),
            },
          },
        },
      },
      ami: p.child('ami').out,
      arn: p.child('arn').out,
      associate_public_ip_address: p.child('associate_public_ip_address').out,
      availability_zone: p.child('availability_zone').out,
      block_duration_minutes: p.child('block_duration_minutes').out,
      cpu_core_count: p.child('cpu_core_count').out,
      cpu_threads_per_core: p.child('cpu_threads_per_core').out,
      disable_api_stop: p.child('disable_api_stop').out,
      disable_api_termination: p.child('disable_api_termination').out,
      ebs_optimized: p.child('ebs_optimized').out,
      get_password_data: p.child('get_password_data').out,
      hibernation: p.child('hibernation').out,
      host_id: p.child('host_id').out,
      host_resource_group_arn: p.child('host_resource_group_arn').out,
      iam_instance_profile: p.child('iam_instance_profile').out,
      id: p.child('id').out,
      instance_initiated_shutdown_behavior: p.child('instance_initiated_shutdown_behavior').out,
      instance_interruption_behavior: p.child('instance_interruption_behavior').out,
      instance_state: p.child('instance_state').out,
      instance_type: p.child('instance_type').out,
      ipv6_address_count: p.child('ipv6_address_count').out,
      ipv6_addresses: p.child('ipv6_addresses').out,
      key_name: p.child('key_name').out,
      launch_group: p.child('launch_group').out,
      monitoring: p.child('monitoring').out,
      outpost_arn: p.child('outpost_arn').out,
      password_data: p.child('password_data').out,
      placement_group: p.child('placement_group').out,
      placement_partition_number: p.child('placement_partition_number').out,
      primary_network_interface_id: p.child('primary_network_interface_id').out,
      private_dns: p.child('private_dns').out,
      private_ip: p.child('private_ip').out,
      public_dns: p.child('public_dns').out,
      public_ip: p.child('public_ip').out,
      secondary_private_ips: p.child('secondary_private_ips').out,
      security_groups: p.child('security_groups').out,
      source_dest_check: p.child('source_dest_check').out,
      spot_bid_status: p.child('spot_bid_status').out,
      spot_instance_id: p.child('spot_instance_id').out,
      spot_price: p.child('spot_price').out,
      spot_request_state: p.child('spot_request_state').out,
      spot_type: p.child('spot_type').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tenancy: p.child('tenancy').out,
      user_data: p.child('user_data').out,
      user_data_base64: p.child('user_data_base64').out,
      user_data_replace_on_change: p.child('user_data_replace_on_change').out,
      valid_from: p.child('valid_from').out,
      valid_until: p.child('valid_until').out,
      volume_tags: p.child('volume_tags').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
      wait_for_fulfillment: p.child('wait_for_fulfillment').out,
    },
    sqs_queue(name, block): {
      local p = path(['aws_sqs_queue', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sqs_queue: {
              [name]: std.prune({
                content_based_deduplication: build.template(std.get(block, 'content_based_deduplication', null, true)),
                delay_seconds: build.template(std.get(block, 'delay_seconds', null, true)),
                fifo_queue: build.template(std.get(block, 'fifo_queue', null, true)),
                kms_master_key_id: build.template(std.get(block, 'kms_master_key_id', null, true)),
                max_message_size: build.template(std.get(block, 'max_message_size', null, true)),
                message_retention_seconds: build.template(std.get(block, 'message_retention_seconds', null, true)),
                receive_wait_time_seconds: build.template(std.get(block, 'receive_wait_time_seconds', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                visibility_timeout_seconds: build.template(std.get(block, 'visibility_timeout_seconds', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      content_based_deduplication: p.child('content_based_deduplication').out,
      deduplication_scope: p.child('deduplication_scope').out,
      delay_seconds: p.child('delay_seconds').out,
      fifo_queue: p.child('fifo_queue').out,
      fifo_throughput_limit: p.child('fifo_throughput_limit').out,
      id: p.child('id').out,
      kms_data_key_reuse_period_seconds: p.child('kms_data_key_reuse_period_seconds').out,
      kms_master_key_id: p.child('kms_master_key_id').out,
      max_message_size: p.child('max_message_size').out,
      message_retention_seconds: p.child('message_retention_seconds').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      policy: p.child('policy').out,
      receive_wait_time_seconds: p.child('receive_wait_time_seconds').out,
      redrive_allow_policy: p.child('redrive_allow_policy').out,
      redrive_policy: p.child('redrive_policy').out,
      sqs_managed_sse_enabled: p.child('sqs_managed_sse_enabled').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      url: p.child('url').out,
      visibility_timeout_seconds: p.child('visibility_timeout_seconds').out,
    },
    sqs_queue_policy(name, block): {
      local p = path(['aws_sqs_queue_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sqs_queue_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                queue_url: build.template(block.queue_url),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      queue_url: p.child('queue_url').out,
    },
    sqs_queue_redrive_allow_policy(name, block): {
      local p = path(['aws_sqs_queue_redrive_allow_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sqs_queue_redrive_allow_policy: {
              [name]: std.prune({
                queue_url: build.template(block.queue_url),
                redrive_allow_policy: build.template(block.redrive_allow_policy),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      queue_url: p.child('queue_url').out,
      redrive_allow_policy: p.child('redrive_allow_policy').out,
    },
    sqs_queue_redrive_policy(name, block): {
      local p = path(['aws_sqs_queue_redrive_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_sqs_queue_redrive_policy: {
              [name]: std.prune({
                queue_url: build.template(block.queue_url),
                redrive_policy: build.template(block.redrive_policy),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      queue_url: p.child('queue_url').out,
      redrive_policy: p.child('redrive_policy').out,
    },
    ssm_activation(name, block): {
      local p = path(['aws_ssm_activation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssm_activation: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                iam_role: build.template(block.iam_role),
                name: build.template(std.get(block, 'name', null, true)),
                registration_limit: build.template(std.get(block, 'registration_limit', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      activation_code: p.child('activation_code').out,
      description: p.child('description').out,
      expiration_date: p.child('expiration_date').out,
      expired: p.child('expired').out,
      iam_role: p.child('iam_role').out,
      id: p.child('id').out,
      name: p.child('name').out,
      registration_count: p.child('registration_count').out,
      registration_limit: p.child('registration_limit').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ssm_association(name, block): {
      local p = path(['aws_ssm_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssm_association: {
              [name]: std.prune({
                apply_only_at_cron_interval: build.template(std.get(block, 'apply_only_at_cron_interval', null, true)),
                association_name: build.template(std.get(block, 'association_name', null, true)),
                automation_target_parameter_name: build.template(std.get(block, 'automation_target_parameter_name', null, true)),
                compliance_severity: build.template(std.get(block, 'compliance_severity', null, true)),
                instance_id: build.template(std.get(block, 'instance_id', null, true)),
                max_concurrency: build.template(std.get(block, 'max_concurrency', null, true)),
                max_errors: build.template(std.get(block, 'max_errors', null, true)),
                name: build.template(block.name),
                schedule_expression: build.template(std.get(block, 'schedule_expression', null, true)),
                sync_compliance: build.template(std.get(block, 'sync_compliance', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                wait_for_success_timeout_seconds: build.template(std.get(block, 'wait_for_success_timeout_seconds', null, true)),
              }),
            },
          },
        },
      },
      apply_only_at_cron_interval: p.child('apply_only_at_cron_interval').out,
      arn: p.child('arn').out,
      association_id: p.child('association_id').out,
      association_name: p.child('association_name').out,
      automation_target_parameter_name: p.child('automation_target_parameter_name').out,
      compliance_severity: p.child('compliance_severity').out,
      document_version: p.child('document_version').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      max_concurrency: p.child('max_concurrency').out,
      max_errors: p.child('max_errors').out,
      name: p.child('name').out,
      parameters: p.child('parameters').out,
      schedule_expression: p.child('schedule_expression').out,
      sync_compliance: p.child('sync_compliance').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      wait_for_success_timeout_seconds: p.child('wait_for_success_timeout_seconds').out,
    },
    ssm_default_patch_baseline(name, block): {
      local p = path(['aws_ssm_default_patch_baseline', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssm_default_patch_baseline: {
              [name]: std.prune({
                baseline_id: build.template(block.baseline_id),
                operating_system: build.template(block.operating_system),
              }),
            },
          },
        },
      },
      baseline_id: p.child('baseline_id').out,
      id: p.child('id').out,
      operating_system: p.child('operating_system').out,
    },
    ssm_document(name, block): {
      local p = path(['aws_ssm_document', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssm_document: {
              [name]: std.prune({
                content: build.template(block.content),
                document_format: build.template(std.get(block, 'document_format', null, true)),
                document_type: build.template(block.document_type),
                name: build.template(block.name),
                permissions: build.template(std.get(block, 'permissions', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_type: build.template(std.get(block, 'target_type', null, true)),
                version_name: build.template(std.get(block, 'version_name', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      content: p.child('content').out,
      created_date: p.child('created_date').out,
      default_version: p.child('default_version').out,
      description: p.child('description').out,
      document_format: p.child('document_format').out,
      document_type: p.child('document_type').out,
      document_version: p.child('document_version').out,
      hash: p.child('hash').out,
      hash_type: p.child('hash_type').out,
      id: p.child('id').out,
      latest_version: p.child('latest_version').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      parameter: p.child('parameter').out,
      permissions: p.child('permissions').out,
      platform_types: p.child('platform_types').out,
      schema_version: p.child('schema_version').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_type: p.child('target_type').out,
      version_name: p.child('version_name').out,
    },
    ssm_maintenance_window(name, block): {
      local p = path(['aws_ssm_maintenance_window', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssm_maintenance_window: {
              [name]: std.prune({
                allow_unassociated_targets: build.template(std.get(block, 'allow_unassociated_targets', null, true)),
                cutoff: build.template(block.cutoff),
                description: build.template(std.get(block, 'description', null, true)),
                duration: build.template(block.duration),
                enabled: build.template(std.get(block, 'enabled', null, true)),
                end_date: build.template(std.get(block, 'end_date', null, true)),
                name: build.template(block.name),
                schedule: build.template(block.schedule),
                schedule_offset: build.template(std.get(block, 'schedule_offset', null, true)),
                schedule_timezone: build.template(std.get(block, 'schedule_timezone', null, true)),
                start_date: build.template(std.get(block, 'start_date', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allow_unassociated_targets: p.child('allow_unassociated_targets').out,
      cutoff: p.child('cutoff').out,
      description: p.child('description').out,
      duration: p.child('duration').out,
      enabled: p.child('enabled').out,
      end_date: p.child('end_date').out,
      id: p.child('id').out,
      name: p.child('name').out,
      schedule: p.child('schedule').out,
      schedule_offset: p.child('schedule_offset').out,
      schedule_timezone: p.child('schedule_timezone').out,
      start_date: p.child('start_date').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ssm_maintenance_window_target(name, block): {
      local p = path(['aws_ssm_maintenance_window_target', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssm_maintenance_window_target: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                owner_information: build.template(std.get(block, 'owner_information', null, true)),
                resource_type: build.template(block.resource_type),
                window_id: build.template(block.window_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner_information: p.child('owner_information').out,
      resource_type: p.child('resource_type').out,
      window_id: p.child('window_id').out,
    },
    ssm_maintenance_window_task(name, block): {
      local p = path(['aws_ssm_maintenance_window_task', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssm_maintenance_window_task: {
              [name]: std.prune({
                cutoff_behavior: build.template(std.get(block, 'cutoff_behavior', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                priority: build.template(std.get(block, 'priority', null, true)),
                task_arn: build.template(block.task_arn),
                task_type: build.template(block.task_type),
                window_id: build.template(block.window_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cutoff_behavior: p.child('cutoff_behavior').out,
      description: p.child('description').out,
      id: p.child('id').out,
      max_concurrency: p.child('max_concurrency').out,
      max_errors: p.child('max_errors').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      service_role_arn: p.child('service_role_arn').out,
      task_arn: p.child('task_arn').out,
      task_type: p.child('task_type').out,
      window_id: p.child('window_id').out,
      window_task_id: p.child('window_task_id').out,
    },
    ssm_parameter(name, block): {
      local p = path(['aws_ssm_parameter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssm_parameter: {
              [name]: std.prune({
                allowed_pattern: build.template(std.get(block, 'allowed_pattern', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                overwrite: build.template(std.get(block, 'overwrite', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      allowed_pattern: p.child('allowed_pattern').out,
      arn: p.child('arn').out,
      data_type: p.child('data_type').out,
      description: p.child('description').out,
      id: p.child('id').out,
      insecure_value: p.child('insecure_value').out,
      key_id: p.child('key_id').out,
      name: p.child('name').out,
      overwrite: p.child('overwrite').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tier: p.child('tier').out,
      type: p.child('type').out,
      value: p.child('value').out,
      version: p.child('version').out,
    },
    ssm_patch_baseline(name, block): {
      local p = path(['aws_ssm_patch_baseline', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssm_patch_baseline: {
              [name]: std.prune({
                approved_patches: build.template(std.get(block, 'approved_patches', null, true)),
                approved_patches_compliance_level: build.template(std.get(block, 'approved_patches_compliance_level', null, true)),
                approved_patches_enable_non_security: build.template(std.get(block, 'approved_patches_enable_non_security', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                operating_system: build.template(std.get(block, 'operating_system', null, true)),
                rejected_patches: build.template(std.get(block, 'rejected_patches', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      approved_patches: p.child('approved_patches').out,
      approved_patches_compliance_level: p.child('approved_patches_compliance_level').out,
      approved_patches_enable_non_security: p.child('approved_patches_enable_non_security').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      json: p.child('json').out,
      name: p.child('name').out,
      operating_system: p.child('operating_system').out,
      rejected_patches: p.child('rejected_patches').out,
      rejected_patches_action: p.child('rejected_patches_action').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ssm_patch_group(name, block): {
      local p = path(['aws_ssm_patch_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssm_patch_group: {
              [name]: std.prune({
                baseline_id: build.template(block.baseline_id),
                patch_group: build.template(block.patch_group),
              }),
            },
          },
        },
      },
      baseline_id: p.child('baseline_id').out,
      id: p.child('id').out,
      patch_group: p.child('patch_group').out,
    },
    ssm_resource_data_sync(name, block): {
      local p = path(['aws_ssm_resource_data_sync', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssm_resource_data_sync: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    ssm_service_setting(name, block): {
      local p = path(['aws_ssm_service_setting', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssm_service_setting: {
              [name]: std.prune({
                setting_id: build.template(block.setting_id),
                setting_value: build.template(block.setting_value),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      setting_id: p.child('setting_id').out,
      setting_value: p.child('setting_value').out,
      status: p.child('status').out,
    },
    ssmcontacts_contact(name, block): {
      local p = path(['aws_ssmcontacts_contact', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssmcontacts_contact: {
              [name]: std.prune({
                alias: build.template(block.alias),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      alias: p.child('alias').out,
      arn: p.child('arn').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    ssmcontacts_contact_channel(name, block): {
      local p = path(['aws_ssmcontacts_contact_channel', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssmcontacts_contact_channel: {
              [name]: std.prune({
                contact_id: build.template(block.contact_id),
                name: build.template(block.name),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      activation_status: p.child('activation_status').out,
      arn: p.child('arn').out,
      contact_id: p.child('contact_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      type: p.child('type').out,
    },
    ssmcontacts_plan(name, block): {
      local p = path(['aws_ssmcontacts_plan', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssmcontacts_plan: {
              [name]: std.prune({
                contact_id: build.template(block.contact_id),
              }),
            },
          },
        },
      },
      contact_id: p.child('contact_id').out,
      id: p.child('id').out,
    },
    ssmcontacts_rotation(name, block): {
      local p = path(['aws_ssmcontacts_rotation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssmcontacts_rotation: {
              [name]: std.prune({
                contact_ids: build.template(block.contact_ids),
                name: build.template(block.name),
                start_time: build.template(std.get(block, 'start_time', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                time_zone_id: build.template(block.time_zone_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      contact_ids: p.child('contact_ids').out,
      id: p.child('id').out,
      name: p.child('name').out,
      start_time: p.child('start_time').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      time_zone_id: p.child('time_zone_id').out,
    },
    ssmincidents_replication_set(name, block): {
      local p = path(['aws_ssmincidents_replication_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssmincidents_replication_set: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_by: p.child('created_by').out,
      deletion_protected: p.child('deletion_protected').out,
      id: p.child('id').out,
      last_modified_by: p.child('last_modified_by').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ssmincidents_response_plan(name, block): {
      local p = path(['aws_ssmincidents_response_plan', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssmincidents_response_plan: {
              [name]: std.prune({
                chat_channel: build.template(std.get(block, 'chat_channel', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                engagements: build.template(std.get(block, 'engagements', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      chat_channel: p.child('chat_channel').out,
      display_name: p.child('display_name').out,
      engagements: p.child('engagements').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ssmquicksetup_configuration_manager(name, block): {
      local p = path(['aws_ssmquicksetup_configuration_manager', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssmquicksetup_configuration_manager: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      manager_arn: p.child('manager_arn').out,
      name: p.child('name').out,
      status_summaries: p.child('status_summaries').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ssoadmin_account_assignment(name, block): {
      local p = path(['aws_ssoadmin_account_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssoadmin_account_assignment: {
              [name]: std.prune({
                instance_arn: build.template(block.instance_arn),
                permission_set_arn: build.template(block.permission_set_arn),
                principal_id: build.template(block.principal_id),
                principal_type: build.template(block.principal_type),
                target_id: build.template(block.target_id),
                target_type: build.template(std.get(block, 'target_type', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_arn: p.child('instance_arn').out,
      permission_set_arn: p.child('permission_set_arn').out,
      principal_id: p.child('principal_id').out,
      principal_type: p.child('principal_type').out,
      target_id: p.child('target_id').out,
      target_type: p.child('target_type').out,
    },
    ssoadmin_application(name, block): {
      local p = path(['aws_ssoadmin_application', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssoadmin_application: {
              [name]: std.prune({
                application_provider_arn: build.template(block.application_provider_arn),
                client_token: build.template(std.get(block, 'client_token', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                instance_arn: build.template(block.instance_arn),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      application_account: p.child('application_account').out,
      application_arn: p.child('application_arn').out,
      application_provider_arn: p.child('application_provider_arn').out,
      client_token: p.child('client_token').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_arn: p.child('instance_arn').out,
      name: p.child('name').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ssoadmin_application_access_scope(name, block): {
      local p = path(['aws_ssoadmin_application_access_scope', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssoadmin_application_access_scope: {
              [name]: std.prune({
                application_arn: build.template(block.application_arn),
                authorized_targets: build.template(std.get(block, 'authorized_targets', null, true)),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      application_arn: p.child('application_arn').out,
      authorized_targets: p.child('authorized_targets').out,
      id: p.child('id').out,
      scope: p.child('scope').out,
    },
    ssoadmin_application_assignment(name, block): {
      local p = path(['aws_ssoadmin_application_assignment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssoadmin_application_assignment: {
              [name]: std.prune({
                application_arn: build.template(block.application_arn),
                principal_id: build.template(block.principal_id),
                principal_type: build.template(block.principal_type),
              }),
            },
          },
        },
      },
      application_arn: p.child('application_arn').out,
      id: p.child('id').out,
      principal_id: p.child('principal_id').out,
      principal_type: p.child('principal_type').out,
    },
    ssoadmin_application_assignment_configuration(name, block): {
      local p = path(['aws_ssoadmin_application_assignment_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssoadmin_application_assignment_configuration: {
              [name]: std.prune({
                application_arn: build.template(block.application_arn),
                assignment_required: build.template(block.assignment_required),
              }),
            },
          },
        },
      },
      application_arn: p.child('application_arn').out,
      assignment_required: p.child('assignment_required').out,
      id: p.child('id').out,
    },
    ssoadmin_customer_managed_policy_attachment(name, block): {
      local p = path(['aws_ssoadmin_customer_managed_policy_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssoadmin_customer_managed_policy_attachment: {
              [name]: std.prune({
                instance_arn: build.template(block.instance_arn),
                permission_set_arn: build.template(block.permission_set_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_arn: p.child('instance_arn').out,
      permission_set_arn: p.child('permission_set_arn').out,
    },
    ssoadmin_instance_access_control_attributes(name, block): {
      local p = path(['aws_ssoadmin_instance_access_control_attributes', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssoadmin_instance_access_control_attributes: {
              [name]: std.prune({
                instance_arn: build.template(block.instance_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_arn: p.child('instance_arn').out,
      status: p.child('status').out,
      status_reason: p.child('status_reason').out,
    },
    ssoadmin_managed_policy_attachment(name, block): {
      local p = path(['aws_ssoadmin_managed_policy_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssoadmin_managed_policy_attachment: {
              [name]: std.prune({
                instance_arn: build.template(block.instance_arn),
                managed_policy_arn: build.template(block.managed_policy_arn),
                permission_set_arn: build.template(block.permission_set_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_arn: p.child('instance_arn').out,
      managed_policy_arn: p.child('managed_policy_arn').out,
      managed_policy_name: p.child('managed_policy_name').out,
      permission_set_arn: p.child('permission_set_arn').out,
    },
    ssoadmin_permission_set(name, block): {
      local p = path(['aws_ssoadmin_permission_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssoadmin_permission_set: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                instance_arn: build.template(block.instance_arn),
                name: build.template(block.name),
                relay_state: build.template(std.get(block, 'relay_state', null, true)),
                session_duration: build.template(std.get(block, 'session_duration', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_arn: p.child('instance_arn').out,
      name: p.child('name').out,
      relay_state: p.child('relay_state').out,
      session_duration: p.child('session_duration').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    ssoadmin_permission_set_inline_policy(name, block): {
      local p = path(['aws_ssoadmin_permission_set_inline_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssoadmin_permission_set_inline_policy: {
              [name]: std.prune({
                inline_policy: build.template(block.inline_policy),
                instance_arn: build.template(block.instance_arn),
                permission_set_arn: build.template(block.permission_set_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      inline_policy: p.child('inline_policy').out,
      instance_arn: p.child('instance_arn').out,
      permission_set_arn: p.child('permission_set_arn').out,
    },
    ssoadmin_permissions_boundary_attachment(name, block): {
      local p = path(['aws_ssoadmin_permissions_boundary_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssoadmin_permissions_boundary_attachment: {
              [name]: std.prune({
                instance_arn: build.template(block.instance_arn),
                permission_set_arn: build.template(block.permission_set_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_arn: p.child('instance_arn').out,
      permission_set_arn: p.child('permission_set_arn').out,
    },
    ssoadmin_trusted_token_issuer(name, block): {
      local p = path(['aws_ssoadmin_trusted_token_issuer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_ssoadmin_trusted_token_issuer: {
              [name]: std.prune({
                client_token: build.template(std.get(block, 'client_token', null, true)),
                instance_arn: build.template(block.instance_arn),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                trusted_token_issuer_type: build.template(block.trusted_token_issuer_type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      client_token: p.child('client_token').out,
      id: p.child('id').out,
      instance_arn: p.child('instance_arn').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      trusted_token_issuer_type: p.child('trusted_token_issuer_type').out,
    },
    storagegateway_cache(name, block): {
      local p = path(['aws_storagegateway_cache', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_storagegateway_cache: {
              [name]: std.prune({
                disk_id: build.template(block.disk_id),
                gateway_arn: build.template(block.gateway_arn),
              }),
            },
          },
        },
      },
      disk_id: p.child('disk_id').out,
      gateway_arn: p.child('gateway_arn').out,
      id: p.child('id').out,
    },
    storagegateway_cached_iscsi_volume(name, block): {
      local p = path(['aws_storagegateway_cached_iscsi_volume', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_storagegateway_cached_iscsi_volume: {
              [name]: std.prune({
                gateway_arn: build.template(block.gateway_arn),
                kms_encrypted: build.template(std.get(block, 'kms_encrypted', null, true)),
                kms_key: build.template(std.get(block, 'kms_key', null, true)),
                network_interface_id: build.template(block.network_interface_id),
                snapshot_id: build.template(std.get(block, 'snapshot_id', null, true)),
                source_volume_arn: build.template(std.get(block, 'source_volume_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_name: build.template(block.target_name),
                volume_size_in_bytes: build.template(block.volume_size_in_bytes),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      chap_enabled: p.child('chap_enabled').out,
      gateway_arn: p.child('gateway_arn').out,
      id: p.child('id').out,
      kms_encrypted: p.child('kms_encrypted').out,
      kms_key: p.child('kms_key').out,
      lun_number: p.child('lun_number').out,
      network_interface_id: p.child('network_interface_id').out,
      network_interface_port: p.child('network_interface_port').out,
      snapshot_id: p.child('snapshot_id').out,
      source_volume_arn: p.child('source_volume_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_arn: p.child('target_arn').out,
      target_name: p.child('target_name').out,
      volume_arn: p.child('volume_arn').out,
      volume_id: p.child('volume_id').out,
      volume_size_in_bytes: p.child('volume_size_in_bytes').out,
    },
    storagegateway_file_system_association(name, block): {
      local p = path(['aws_storagegateway_file_system_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_storagegateway_file_system_association: {
              [name]: std.prune({
                audit_destination_arn: build.template(std.get(block, 'audit_destination_arn', null, true)),
                gateway_arn: build.template(block.gateway_arn),
                location_arn: build.template(block.location_arn),
                password: build.template(block.password),
                tags: build.template(std.get(block, 'tags', null, true)),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      audit_destination_arn: p.child('audit_destination_arn').out,
      gateway_arn: p.child('gateway_arn').out,
      id: p.child('id').out,
      location_arn: p.child('location_arn').out,
      password: p.child('password').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      username: p.child('username').out,
    },
    storagegateway_gateway(name, block): {
      local p = path(['aws_storagegateway_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_storagegateway_gateway: {
              [name]: std.prune({
                average_download_rate_limit_in_bits_per_sec: build.template(std.get(block, 'average_download_rate_limit_in_bits_per_sec', null, true)),
                average_upload_rate_limit_in_bits_per_sec: build.template(std.get(block, 'average_upload_rate_limit_in_bits_per_sec', null, true)),
                cloudwatch_log_group_arn: build.template(std.get(block, 'cloudwatch_log_group_arn', null, true)),
                gateway_name: build.template(block.gateway_name),
                gateway_timezone: build.template(block.gateway_timezone),
                gateway_type: build.template(std.get(block, 'gateway_type', null, true)),
                gateway_vpc_endpoint: build.template(std.get(block, 'gateway_vpc_endpoint', null, true)),
                medium_changer_type: build.template(std.get(block, 'medium_changer_type', null, true)),
                smb_file_share_visibility: build.template(std.get(block, 'smb_file_share_visibility', null, true)),
                smb_guest_password: build.template(std.get(block, 'smb_guest_password', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tape_drive_type: build.template(std.get(block, 'tape_drive_type', null, true)),
              }),
            },
          },
        },
      },
      activation_key: p.child('activation_key').out,
      arn: p.child('arn').out,
      average_download_rate_limit_in_bits_per_sec: p.child('average_download_rate_limit_in_bits_per_sec').out,
      average_upload_rate_limit_in_bits_per_sec: p.child('average_upload_rate_limit_in_bits_per_sec').out,
      cloudwatch_log_group_arn: p.child('cloudwatch_log_group_arn').out,
      ec2_instance_id: p.child('ec2_instance_id').out,
      endpoint_type: p.child('endpoint_type').out,
      gateway_id: p.child('gateway_id').out,
      gateway_ip_address: p.child('gateway_ip_address').out,
      gateway_name: p.child('gateway_name').out,
      gateway_network_interface: p.child('gateway_network_interface').out,
      gateway_timezone: p.child('gateway_timezone').out,
      gateway_type: p.child('gateway_type').out,
      gateway_vpc_endpoint: p.child('gateway_vpc_endpoint').out,
      host_environment: p.child('host_environment').out,
      id: p.child('id').out,
      medium_changer_type: p.child('medium_changer_type').out,
      smb_file_share_visibility: p.child('smb_file_share_visibility').out,
      smb_guest_password: p.child('smb_guest_password').out,
      smb_security_strategy: p.child('smb_security_strategy').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tape_drive_type: p.child('tape_drive_type').out,
    },
    storagegateway_nfs_file_share(name, block): {
      local p = path(['aws_storagegateway_nfs_file_share', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_storagegateway_nfs_file_share: {
              [name]: std.prune({
                audit_destination_arn: build.template(std.get(block, 'audit_destination_arn', null, true)),
                bucket_region: build.template(std.get(block, 'bucket_region', null, true)),
                client_list: build.template(block.client_list),
                default_storage_class: build.template(std.get(block, 'default_storage_class', null, true)),
                gateway_arn: build.template(block.gateway_arn),
                guess_mime_type_enabled: build.template(std.get(block, 'guess_mime_type_enabled', null, true)),
                kms_encrypted: build.template(std.get(block, 'kms_encrypted', null, true)),
                kms_key_arn: build.template(std.get(block, 'kms_key_arn', null, true)),
                location_arn: build.template(block.location_arn),
                notification_policy: build.template(std.get(block, 'notification_policy', null, true)),
                object_acl: build.template(std.get(block, 'object_acl', null, true)),
                read_only: build.template(std.get(block, 'read_only', null, true)),
                requester_pays: build.template(std.get(block, 'requester_pays', null, true)),
                role_arn: build.template(block.role_arn),
                squash: build.template(std.get(block, 'squash', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_endpoint_dns_name: build.template(std.get(block, 'vpc_endpoint_dns_name', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      audit_destination_arn: p.child('audit_destination_arn').out,
      bucket_region: p.child('bucket_region').out,
      client_list: p.child('client_list').out,
      default_storage_class: p.child('default_storage_class').out,
      file_share_name: p.child('file_share_name').out,
      fileshare_id: p.child('fileshare_id').out,
      gateway_arn: p.child('gateway_arn').out,
      guess_mime_type_enabled: p.child('guess_mime_type_enabled').out,
      id: p.child('id').out,
      kms_encrypted: p.child('kms_encrypted').out,
      kms_key_arn: p.child('kms_key_arn').out,
      location_arn: p.child('location_arn').out,
      notification_policy: p.child('notification_policy').out,
      object_acl: p.child('object_acl').out,
      path: p.child('path').out,
      read_only: p.child('read_only').out,
      requester_pays: p.child('requester_pays').out,
      role_arn: p.child('role_arn').out,
      squash: p.child('squash').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_endpoint_dns_name: p.child('vpc_endpoint_dns_name').out,
    },
    storagegateway_smb_file_share(name, block): {
      local p = path(['aws_storagegateway_smb_file_share', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_storagegateway_smb_file_share: {
              [name]: std.prune({
                access_based_enumeration: build.template(std.get(block, 'access_based_enumeration', null, true)),
                admin_user_list: build.template(std.get(block, 'admin_user_list', null, true)),
                audit_destination_arn: build.template(std.get(block, 'audit_destination_arn', null, true)),
                authentication: build.template(std.get(block, 'authentication', null, true)),
                bucket_region: build.template(std.get(block, 'bucket_region', null, true)),
                case_sensitivity: build.template(std.get(block, 'case_sensitivity', null, true)),
                default_storage_class: build.template(std.get(block, 'default_storage_class', null, true)),
                gateway_arn: build.template(block.gateway_arn),
                guess_mime_type_enabled: build.template(std.get(block, 'guess_mime_type_enabled', null, true)),
                invalid_user_list: build.template(std.get(block, 'invalid_user_list', null, true)),
                kms_encrypted: build.template(std.get(block, 'kms_encrypted', null, true)),
                kms_key_arn: build.template(std.get(block, 'kms_key_arn', null, true)),
                location_arn: build.template(block.location_arn),
                notification_policy: build.template(std.get(block, 'notification_policy', null, true)),
                object_acl: build.template(std.get(block, 'object_acl', null, true)),
                read_only: build.template(std.get(block, 'read_only', null, true)),
                requester_pays: build.template(std.get(block, 'requester_pays', null, true)),
                role_arn: build.template(block.role_arn),
                smb_acl_enabled: build.template(std.get(block, 'smb_acl_enabled', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                valid_user_list: build.template(std.get(block, 'valid_user_list', null, true)),
                vpc_endpoint_dns_name: build.template(std.get(block, 'vpc_endpoint_dns_name', null, true)),
              }),
            },
          },
        },
      },
      access_based_enumeration: p.child('access_based_enumeration').out,
      admin_user_list: p.child('admin_user_list').out,
      arn: p.child('arn').out,
      audit_destination_arn: p.child('audit_destination_arn').out,
      authentication: p.child('authentication').out,
      bucket_region: p.child('bucket_region').out,
      case_sensitivity: p.child('case_sensitivity').out,
      default_storage_class: p.child('default_storage_class').out,
      file_share_name: p.child('file_share_name').out,
      fileshare_id: p.child('fileshare_id').out,
      gateway_arn: p.child('gateway_arn').out,
      guess_mime_type_enabled: p.child('guess_mime_type_enabled').out,
      id: p.child('id').out,
      invalid_user_list: p.child('invalid_user_list').out,
      kms_encrypted: p.child('kms_encrypted').out,
      kms_key_arn: p.child('kms_key_arn').out,
      location_arn: p.child('location_arn').out,
      notification_policy: p.child('notification_policy').out,
      object_acl: p.child('object_acl').out,
      oplocks_enabled: p.child('oplocks_enabled').out,
      path: p.child('path').out,
      read_only: p.child('read_only').out,
      requester_pays: p.child('requester_pays').out,
      role_arn: p.child('role_arn').out,
      smb_acl_enabled: p.child('smb_acl_enabled').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      valid_user_list: p.child('valid_user_list').out,
      vpc_endpoint_dns_name: p.child('vpc_endpoint_dns_name').out,
    },
    storagegateway_stored_iscsi_volume(name, block): {
      local p = path(['aws_storagegateway_stored_iscsi_volume', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_storagegateway_stored_iscsi_volume: {
              [name]: std.prune({
                disk_id: build.template(block.disk_id),
                gateway_arn: build.template(block.gateway_arn),
                kms_encrypted: build.template(std.get(block, 'kms_encrypted', null, true)),
                kms_key: build.template(std.get(block, 'kms_key', null, true)),
                network_interface_id: build.template(block.network_interface_id),
                preserve_existing_data: build.template(block.preserve_existing_data),
                snapshot_id: build.template(std.get(block, 'snapshot_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                target_name: build.template(block.target_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      chap_enabled: p.child('chap_enabled').out,
      disk_id: p.child('disk_id').out,
      gateway_arn: p.child('gateway_arn').out,
      id: p.child('id').out,
      kms_encrypted: p.child('kms_encrypted').out,
      kms_key: p.child('kms_key').out,
      lun_number: p.child('lun_number').out,
      network_interface_id: p.child('network_interface_id').out,
      network_interface_port: p.child('network_interface_port').out,
      preserve_existing_data: p.child('preserve_existing_data').out,
      snapshot_id: p.child('snapshot_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      target_arn: p.child('target_arn').out,
      target_name: p.child('target_name').out,
      volume_attachment_status: p.child('volume_attachment_status').out,
      volume_id: p.child('volume_id').out,
      volume_size_in_bytes: p.child('volume_size_in_bytes').out,
      volume_status: p.child('volume_status').out,
      volume_type: p.child('volume_type').out,
    },
    storagegateway_tape_pool(name, block): {
      local p = path(['aws_storagegateway_tape_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_storagegateway_tape_pool: {
              [name]: std.prune({
                pool_name: build.template(block.pool_name),
                retention_lock_time_in_days: build.template(std.get(block, 'retention_lock_time_in_days', null, true)),
                retention_lock_type: build.template(std.get(block, 'retention_lock_type', null, true)),
                storage_class: build.template(block.storage_class),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      pool_name: p.child('pool_name').out,
      retention_lock_time_in_days: p.child('retention_lock_time_in_days').out,
      retention_lock_type: p.child('retention_lock_type').out,
      storage_class: p.child('storage_class').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    storagegateway_upload_buffer(name, block): {
      local p = path(['aws_storagegateway_upload_buffer', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_storagegateway_upload_buffer: {
              [name]: std.prune({
                gateway_arn: build.template(block.gateway_arn),
              }),
            },
          },
        },
      },
      disk_id: p.child('disk_id').out,
      disk_path: p.child('disk_path').out,
      gateway_arn: p.child('gateway_arn').out,
      id: p.child('id').out,
    },
    storagegateway_working_storage(name, block): {
      local p = path(['aws_storagegateway_working_storage', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_storagegateway_working_storage: {
              [name]: std.prune({
                disk_id: build.template(block.disk_id),
                gateway_arn: build.template(block.gateway_arn),
              }),
            },
          },
        },
      },
      disk_id: p.child('disk_id').out,
      gateway_arn: p.child('gateway_arn').out,
      id: p.child('id').out,
    },
    subnet(name, block): {
      local p = path(['aws_subnet', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_subnet: {
              [name]: std.prune({
                assign_ipv6_address_on_creation: build.template(std.get(block, 'assign_ipv6_address_on_creation', null, true)),
                cidr_block: build.template(std.get(block, 'cidr_block', null, true)),
                customer_owned_ipv4_pool: build.template(std.get(block, 'customer_owned_ipv4_pool', null, true)),
                enable_dns64: build.template(std.get(block, 'enable_dns64', null, true)),
                enable_lni_at_device_index: build.template(std.get(block, 'enable_lni_at_device_index', null, true)),
                enable_resource_name_dns_a_record_on_launch: build.template(std.get(block, 'enable_resource_name_dns_a_record_on_launch', null, true)),
                enable_resource_name_dns_aaaa_record_on_launch: build.template(std.get(block, 'enable_resource_name_dns_aaaa_record_on_launch', null, true)),
                ipv6_cidr_block: build.template(std.get(block, 'ipv6_cidr_block', null, true)),
                ipv6_native: build.template(std.get(block, 'ipv6_native', null, true)),
                map_customer_owned_ip_on_launch: build.template(std.get(block, 'map_customer_owned_ip_on_launch', null, true)),
                map_public_ip_on_launch: build.template(std.get(block, 'map_public_ip_on_launch', null, true)),
                outpost_arn: build.template(std.get(block, 'outpost_arn', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      assign_ipv6_address_on_creation: p.child('assign_ipv6_address_on_creation').out,
      availability_zone: p.child('availability_zone').out,
      availability_zone_id: p.child('availability_zone_id').out,
      cidr_block: p.child('cidr_block').out,
      customer_owned_ipv4_pool: p.child('customer_owned_ipv4_pool').out,
      enable_dns64: p.child('enable_dns64').out,
      enable_lni_at_device_index: p.child('enable_lni_at_device_index').out,
      enable_resource_name_dns_a_record_on_launch: p.child('enable_resource_name_dns_a_record_on_launch').out,
      enable_resource_name_dns_aaaa_record_on_launch: p.child('enable_resource_name_dns_aaaa_record_on_launch').out,
      id: p.child('id').out,
      ipv6_cidr_block: p.child('ipv6_cidr_block').out,
      ipv6_cidr_block_association_id: p.child('ipv6_cidr_block_association_id').out,
      ipv6_native: p.child('ipv6_native').out,
      map_customer_owned_ip_on_launch: p.child('map_customer_owned_ip_on_launch').out,
      map_public_ip_on_launch: p.child('map_public_ip_on_launch').out,
      outpost_arn: p.child('outpost_arn').out,
      owner_id: p.child('owner_id').out,
      private_dns_hostname_type_on_launch: p.child('private_dns_hostname_type_on_launch').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    swf_domain(name, block): {
      local p = path(['aws_swf_domain', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_swf_domain: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                workflow_execution_retention_period_in_days: build.template(block.workflow_execution_retention_period_in_days),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      workflow_execution_retention_period_in_days: p.child('workflow_execution_retention_period_in_days').out,
    },
    synthetics_canary(name, block): {
      local p = path(['aws_synthetics_canary', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_synthetics_canary: {
              [name]: std.prune({
                artifact_s3_location: build.template(block.artifact_s3_location),
                delete_lambda: build.template(std.get(block, 'delete_lambda', null, true)),
                execution_role_arn: build.template(block.execution_role_arn),
                failure_retention_period: build.template(std.get(block, 'failure_retention_period', null, true)),
                handler: build.template(block.handler),
                name: build.template(block.name),
                runtime_version: build.template(block.runtime_version),
                s3_bucket: build.template(std.get(block, 's3_bucket', null, true)),
                s3_key: build.template(std.get(block, 's3_key', null, true)),
                s3_version: build.template(std.get(block, 's3_version', null, true)),
                start_canary: build.template(std.get(block, 'start_canary', null, true)),
                success_retention_period: build.template(std.get(block, 'success_retention_period', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                zip_file: build.template(std.get(block, 'zip_file', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      artifact_s3_location: p.child('artifact_s3_location').out,
      delete_lambda: p.child('delete_lambda').out,
      engine_arn: p.child('engine_arn').out,
      execution_role_arn: p.child('execution_role_arn').out,
      failure_retention_period: p.child('failure_retention_period').out,
      handler: p.child('handler').out,
      id: p.child('id').out,
      name: p.child('name').out,
      runtime_version: p.child('runtime_version').out,
      s3_bucket: p.child('s3_bucket').out,
      s3_key: p.child('s3_key').out,
      s3_version: p.child('s3_version').out,
      source_location_arn: p.child('source_location_arn').out,
      start_canary: p.child('start_canary').out,
      status: p.child('status').out,
      success_retention_period: p.child('success_retention_period').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      timeline: p.child('timeline').out,
      zip_file: p.child('zip_file').out,
    },
    synthetics_group(name, block): {
      local p = path(['aws_synthetics_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_synthetics_group: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      group_id: p.child('group_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    synthetics_group_association(name, block): {
      local p = path(['aws_synthetics_group_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_synthetics_group_association: {
              [name]: std.prune({
                canary_arn: build.template(block.canary_arn),
                group_name: build.template(block.group_name),
              }),
            },
          },
        },
      },
      canary_arn: p.child('canary_arn').out,
      group_arn: p.child('group_arn').out,
      group_id: p.child('group_id').out,
      group_name: p.child('group_name').out,
      id: p.child('id').out,
    },
    timestreaminfluxdb_db_instance(name, block): {
      local p = path(['aws_timestreaminfluxdb_db_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_timestreaminfluxdb_db_instance: {
              [name]: std.prune({
                allocated_storage: build.template(block.allocated_storage),
                bucket: build.template(block.bucket),
                db_instance_type: build.template(block.db_instance_type),
                db_parameter_group_identifier: build.template(std.get(block, 'db_parameter_group_identifier', null, true)),
                name: build.template(block.name),
                organization: build.template(block.organization),
                password: build.template(block.password),
                tags: build.template(std.get(block, 'tags', null, true)),
                username: build.template(block.username),
                vpc_security_group_ids: build.template(block.vpc_security_group_ids),
                vpc_subnet_ids: build.template(block.vpc_subnet_ids),
              }),
            },
          },
        },
      },
      allocated_storage: p.child('allocated_storage').out,
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      bucket: p.child('bucket').out,
      db_instance_type: p.child('db_instance_type').out,
      db_parameter_group_identifier: p.child('db_parameter_group_identifier').out,
      db_storage_type: p.child('db_storage_type').out,
      deployment_type: p.child('deployment_type').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      influx_auth_parameters_secret_arn: p.child('influx_auth_parameters_secret_arn').out,
      name: p.child('name').out,
      organization: p.child('organization').out,
      password: p.child('password').out,
      publicly_accessible: p.child('publicly_accessible').out,
      secondary_availability_zone: p.child('secondary_availability_zone').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      username: p.child('username').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
      vpc_subnet_ids: p.child('vpc_subnet_ids').out,
    },
    timestreamwrite_database(name, block): {
      local p = path(['aws_timestreamwrite_database', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_timestreamwrite_database: {
              [name]: std.prune({
                database_name: build.template(block.database_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      database_name: p.child('database_name').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      table_count: p.child('table_count').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    timestreamwrite_table(name, block): {
      local p = path(['aws_timestreamwrite_table', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_timestreamwrite_table: {
              [name]: std.prune({
                database_name: build.template(block.database_name),
                table_name: build.template(block.table_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      database_name: p.child('database_name').out,
      id: p.child('id').out,
      table_name: p.child('table_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    transcribe_language_model(name, block): {
      local p = path(['aws_transcribe_language_model', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transcribe_language_model: {
              [name]: std.prune({
                base_model_name: build.template(block.base_model_name),
                language_code: build.template(block.language_code),
                model_name: build.template(block.model_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      base_model_name: p.child('base_model_name').out,
      id: p.child('id').out,
      language_code: p.child('language_code').out,
      model_name: p.child('model_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    transcribe_medical_vocabulary(name, block): {
      local p = path(['aws_transcribe_medical_vocabulary', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transcribe_medical_vocabulary: {
              [name]: std.prune({
                language_code: build.template(block.language_code),
                tags: build.template(std.get(block, 'tags', null, true)),
                vocabulary_file_uri: build.template(block.vocabulary_file_uri),
                vocabulary_name: build.template(block.vocabulary_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      download_uri: p.child('download_uri').out,
      id: p.child('id').out,
      language_code: p.child('language_code').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vocabulary_file_uri: p.child('vocabulary_file_uri').out,
      vocabulary_name: p.child('vocabulary_name').out,
    },
    transcribe_vocabulary(name, block): {
      local p = path(['aws_transcribe_vocabulary', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transcribe_vocabulary: {
              [name]: std.prune({
                language_code: build.template(block.language_code),
                phrases: build.template(std.get(block, 'phrases', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                vocabulary_name: build.template(block.vocabulary_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      download_uri: p.child('download_uri').out,
      id: p.child('id').out,
      language_code: p.child('language_code').out,
      phrases: p.child('phrases').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vocabulary_file_uri: p.child('vocabulary_file_uri').out,
      vocabulary_name: p.child('vocabulary_name').out,
    },
    transcribe_vocabulary_filter(name, block): {
      local p = path(['aws_transcribe_vocabulary_filter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transcribe_vocabulary_filter: {
              [name]: std.prune({
                language_code: build.template(block.language_code),
                tags: build.template(std.get(block, 'tags', null, true)),
                vocabulary_filter_file_uri: build.template(std.get(block, 'vocabulary_filter_file_uri', null, true)),
                vocabulary_filter_name: build.template(block.vocabulary_filter_name),
                words: build.template(std.get(block, 'words', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      download_uri: p.child('download_uri').out,
      id: p.child('id').out,
      language_code: p.child('language_code').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vocabulary_filter_file_uri: p.child('vocabulary_filter_file_uri').out,
      vocabulary_filter_name: p.child('vocabulary_filter_name').out,
      words: p.child('words').out,
    },
    transfer_access(name, block): {
      local p = path(['aws_transfer_access', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transfer_access: {
              [name]: std.prune({
                external_id: build.template(block.external_id),
                home_directory: build.template(std.get(block, 'home_directory', null, true)),
                home_directory_type: build.template(std.get(block, 'home_directory_type', null, true)),
                policy: build.template(std.get(block, 'policy', null, true)),
                role: build.template(std.get(block, 'role', null, true)),
                server_id: build.template(block.server_id),
              }),
            },
          },
        },
      },
      external_id: p.child('external_id').out,
      home_directory: p.child('home_directory').out,
      home_directory_type: p.child('home_directory_type').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
      role: p.child('role').out,
      server_id: p.child('server_id').out,
    },
    transfer_agreement(name, block): {
      local p = path(['aws_transfer_agreement', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transfer_agreement: {
              [name]: std.prune({
                access_role: build.template(block.access_role),
                base_directory: build.template(block.base_directory),
                description: build.template(std.get(block, 'description', null, true)),
                local_profile_id: build.template(block.local_profile_id),
                partner_profile_id: build.template(block.partner_profile_id),
                server_id: build.template(block.server_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_role: p.child('access_role').out,
      agreement_id: p.child('agreement_id').out,
      arn: p.child('arn').out,
      base_directory: p.child('base_directory').out,
      description: p.child('description').out,
      id: p.child('id').out,
      local_profile_id: p.child('local_profile_id').out,
      partner_profile_id: p.child('partner_profile_id').out,
      server_id: p.child('server_id').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    transfer_certificate(name, block): {
      local p = path(['aws_transfer_certificate', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transfer_certificate: {
              [name]: std.prune({
                certificate: build.template(block.certificate),
                certificate_chain: build.template(std.get(block, 'certificate_chain', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                private_key: build.template(std.get(block, 'private_key', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                usage: build.template(block.usage),
              }),
            },
          },
        },
      },
      active_date: p.child('active_date').out,
      arn: p.child('arn').out,
      certificate: p.child('certificate').out,
      certificate_chain: p.child('certificate_chain').out,
      certificate_id: p.child('certificate_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      inactive_date: p.child('inactive_date').out,
      private_key: p.child('private_key').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      usage: p.child('usage').out,
    },
    transfer_connector(name, block): {
      local p = path(['aws_transfer_connector', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transfer_connector: {
              [name]: std.prune({
                access_role: build.template(block.access_role),
                logging_role: build.template(std.get(block, 'logging_role', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                url: build.template(block.url),
              }),
            },
          },
        },
      },
      access_role: p.child('access_role').out,
      arn: p.child('arn').out,
      connector_id: p.child('connector_id').out,
      id: p.child('id').out,
      logging_role: p.child('logging_role').out,
      security_policy_name: p.child('security_policy_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      url: p.child('url').out,
    },
    transfer_profile(name, block): {
      local p = path(['aws_transfer_profile', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transfer_profile: {
              [name]: std.prune({
                as2_id: build.template(block.as2_id),
                certificate_ids: build.template(std.get(block, 'certificate_ids', null, true)),
                profile_type: build.template(block.profile_type),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      as2_id: p.child('as2_id').out,
      certificate_ids: p.child('certificate_ids').out,
      id: p.child('id').out,
      profile_id: p.child('profile_id').out,
      profile_type: p.child('profile_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    transfer_server(name, block): {
      local p = path(['aws_transfer_server', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transfer_server: {
              [name]: std.prune({
                certificate: build.template(std.get(block, 'certificate', null, true)),
                directory_id: build.template(std.get(block, 'directory_id', null, true)),
                domain: build.template(std.get(block, 'domain', null, true)),
                endpoint_type: build.template(std.get(block, 'endpoint_type', null, true)),
                force_destroy: build.template(std.get(block, 'force_destroy', null, true)),
                'function': build.template(std.get(block, 'function', null, true)),
                host_key: build.template(std.get(block, 'host_key', null, true)),
                identity_provider_type: build.template(std.get(block, 'identity_provider_type', null, true)),
                invocation_role: build.template(std.get(block, 'invocation_role', null, true)),
                logging_role: build.template(std.get(block, 'logging_role', null, true)),
                post_authentication_login_banner: build.template(std.get(block, 'post_authentication_login_banner', null, true)),
                pre_authentication_login_banner: build.template(std.get(block, 'pre_authentication_login_banner', null, true)),
                security_policy_name: build.template(std.get(block, 'security_policy_name', null, true)),
                structured_log_destinations: build.template(std.get(block, 'structured_log_destinations', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                url: build.template(std.get(block, 'url', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      certificate: p.child('certificate').out,
      directory_id: p.child('directory_id').out,
      domain: p.child('domain').out,
      endpoint: p.child('endpoint').out,
      endpoint_type: p.child('endpoint_type').out,
      force_destroy: p.child('force_destroy').out,
      'function': p.child('function').out,
      host_key: p.child('host_key').out,
      host_key_fingerprint: p.child('host_key_fingerprint').out,
      id: p.child('id').out,
      identity_provider_type: p.child('identity_provider_type').out,
      invocation_role: p.child('invocation_role').out,
      logging_role: p.child('logging_role').out,
      post_authentication_login_banner: p.child('post_authentication_login_banner').out,
      pre_authentication_login_banner: p.child('pre_authentication_login_banner').out,
      protocols: p.child('protocols').out,
      security_policy_name: p.child('security_policy_name').out,
      sftp_authentication_methods: p.child('sftp_authentication_methods').out,
      structured_log_destinations: p.child('structured_log_destinations').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      url: p.child('url').out,
    },
    transfer_ssh_key(name, block): {
      local p = path(['aws_transfer_ssh_key', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transfer_ssh_key: {
              [name]: std.prune({
                body: build.template(block.body),
                server_id: build.template(block.server_id),
                user_name: build.template(block.user_name),
              }),
            },
          },
        },
      },
      body: p.child('body').out,
      id: p.child('id').out,
      server_id: p.child('server_id').out,
      ssh_key_id: p.child('ssh_key_id').out,
      user_name: p.child('user_name').out,
    },
    transfer_tag(name, block): {
      local p = path(['aws_transfer_tag', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transfer_tag: {
              [name]: std.prune({
                key: build.template(block.key),
                resource_arn: build.template(block.resource_arn),
                value: build.template(block.value),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key: p.child('key').out,
      resource_arn: p.child('resource_arn').out,
      value: p.child('value').out,
    },
    transfer_user(name, block): {
      local p = path(['aws_transfer_user', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transfer_user: {
              [name]: std.prune({
                home_directory: build.template(std.get(block, 'home_directory', null, true)),
                home_directory_type: build.template(std.get(block, 'home_directory_type', null, true)),
                policy: build.template(std.get(block, 'policy', null, true)),
                role: build.template(block.role),
                server_id: build.template(block.server_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_name: build.template(block.user_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      home_directory: p.child('home_directory').out,
      home_directory_type: p.child('home_directory_type').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
      role: p.child('role').out,
      server_id: p.child('server_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_name: p.child('user_name').out,
    },
    transfer_workflow(name, block): {
      local p = path(['aws_transfer_workflow', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_transfer_workflow: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    verifiedaccess_endpoint(name, block): {
      local p = path(['aws_verifiedaccess_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_verifiedaccess_endpoint: {
              [name]: std.prune({
                application_domain: build.template(block.application_domain),
                attachment_type: build.template(block.attachment_type),
                description: build.template(std.get(block, 'description', null, true)),
                domain_certificate_arn: build.template(block.domain_certificate_arn),
                endpoint_domain_prefix: build.template(block.endpoint_domain_prefix),
                endpoint_type: build.template(block.endpoint_type),
                policy_document: build.template(std.get(block, 'policy_document', null, true)),
                security_group_ids: build.template(std.get(block, 'security_group_ids', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                verified_access_group_id: build.template(block.verified_access_group_id),
              }),
            },
          },
        },
      },
      application_domain: p.child('application_domain').out,
      attachment_type: p.child('attachment_type').out,
      description: p.child('description').out,
      device_validation_domain: p.child('device_validation_domain').out,
      domain_certificate_arn: p.child('domain_certificate_arn').out,
      endpoint_domain: p.child('endpoint_domain').out,
      endpoint_domain_prefix: p.child('endpoint_domain_prefix').out,
      endpoint_type: p.child('endpoint_type').out,
      id: p.child('id').out,
      policy_document: p.child('policy_document').out,
      security_group_ids: p.child('security_group_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      verified_access_group_id: p.child('verified_access_group_id').out,
      verified_access_instance_id: p.child('verified_access_instance_id').out,
    },
    verifiedaccess_group(name, block): {
      local p = path(['aws_verifiedaccess_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_verifiedaccess_group: {
              [name]: std.prune({
                policy_document: build.template(std.get(block, 'policy_document', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                verifiedaccess_instance_id: build.template(block.verifiedaccess_instance_id),
              }),
            },
          },
        },
      },
      creation_time: p.child('creation_time').out,
      deletion_time: p.child('deletion_time').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_updated_time: p.child('last_updated_time').out,
      owner: p.child('owner').out,
      policy_document: p.child('policy_document').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      verifiedaccess_group_arn: p.child('verifiedaccess_group_arn').out,
      verifiedaccess_group_id: p.child('verifiedaccess_group_id').out,
      verifiedaccess_instance_id: p.child('verifiedaccess_instance_id').out,
    },
    verifiedaccess_instance(name, block): {
      local p = path(['aws_verifiedaccess_instance', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_verifiedaccess_instance: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                fips_enabled: build.template(std.get(block, 'fips_enabled', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      creation_time: p.child('creation_time').out,
      description: p.child('description').out,
      fips_enabled: p.child('fips_enabled').out,
      id: p.child('id').out,
      last_updated_time: p.child('last_updated_time').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      verified_access_trust_providers: p.child('verified_access_trust_providers').out,
    },
    verifiedaccess_instance_logging_configuration(name, block): {
      local p = path(['aws_verifiedaccess_instance_logging_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_verifiedaccess_instance_logging_configuration: {
              [name]: std.prune({
                verifiedaccess_instance_id: build.template(block.verifiedaccess_instance_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      verifiedaccess_instance_id: p.child('verifiedaccess_instance_id').out,
    },
    verifiedaccess_instance_trust_provider_attachment(name, block): {
      local p = path(['aws_verifiedaccess_instance_trust_provider_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_verifiedaccess_instance_trust_provider_attachment: {
              [name]: std.prune({
                verifiedaccess_instance_id: build.template(block.verifiedaccess_instance_id),
                verifiedaccess_trust_provider_id: build.template(block.verifiedaccess_trust_provider_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      verifiedaccess_instance_id: p.child('verifiedaccess_instance_id').out,
      verifiedaccess_trust_provider_id: p.child('verifiedaccess_trust_provider_id').out,
    },
    verifiedaccess_trust_provider(name, block): {
      local p = path(['aws_verifiedaccess_trust_provider', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_verifiedaccess_trust_provider: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                device_trust_provider_type: build.template(std.get(block, 'device_trust_provider_type', null, true)),
                policy_reference_name: build.template(block.policy_reference_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                trust_provider_type: build.template(block.trust_provider_type),
                user_trust_provider_type: build.template(std.get(block, 'user_trust_provider_type', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      device_trust_provider_type: p.child('device_trust_provider_type').out,
      id: p.child('id').out,
      policy_reference_name: p.child('policy_reference_name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      trust_provider_type: p.child('trust_provider_type').out,
      user_trust_provider_type: p.child('user_trust_provider_type').out,
    },
    verifiedpermissions_identity_source(name, block): {
      local p = path(['aws_verifiedpermissions_identity_source', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_verifiedpermissions_identity_source: {
              [name]: std.prune({
                policy_store_id: build.template(block.policy_store_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy_store_id: p.child('policy_store_id').out,
      principal_entity_type: p.child('principal_entity_type').out,
    },
    verifiedpermissions_policy(name, block): {
      local p = path(['aws_verifiedpermissions_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_verifiedpermissions_policy: {
              [name]: std.prune({
                policy_store_id: build.template(block.policy_store_id),
              }),
            },
          },
        },
      },
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      policy_id: p.child('policy_id').out,
      policy_store_id: p.child('policy_store_id').out,
    },
    verifiedpermissions_policy_store(name, block): {
      local p = path(['aws_verifiedpermissions_policy_store', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_verifiedpermissions_policy_store: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      policy_store_id: p.child('policy_store_id').out,
    },
    verifiedpermissions_policy_template(name, block): {
      local p = path(['aws_verifiedpermissions_policy_template', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_verifiedpermissions_policy_template: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                policy_store_id: build.template(block.policy_store_id),
                statement: build.template(block.statement),
              }),
            },
          },
        },
      },
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      policy_store_id: p.child('policy_store_id').out,
      policy_template_id: p.child('policy_template_id').out,
      statement: p.child('statement').out,
    },
    verifiedpermissions_schema(name, block): {
      local p = path(['aws_verifiedpermissions_schema', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_verifiedpermissions_schema: {
              [name]: std.prune({
                policy_store_id: build.template(block.policy_store_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      namespaces: p.child('namespaces').out,
      policy_store_id: p.child('policy_store_id').out,
    },
    volume_attachment(name, block): {
      local p = path(['aws_volume_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_volume_attachment: {
              [name]: std.prune({
                device_name: build.template(block.device_name),
                force_detach: build.template(std.get(block, 'force_detach', null, true)),
                instance_id: build.template(block.instance_id),
                skip_destroy: build.template(std.get(block, 'skip_destroy', null, true)),
                stop_instance_before_detaching: build.template(std.get(block, 'stop_instance_before_detaching', null, true)),
                volume_id: build.template(block.volume_id),
              }),
            },
          },
        },
      },
      device_name: p.child('device_name').out,
      force_detach: p.child('force_detach').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      skip_destroy: p.child('skip_destroy').out,
      stop_instance_before_detaching: p.child('stop_instance_before_detaching').out,
      volume_id: p.child('volume_id').out,
    },
    vpc(name, block): {
      local p = path(['aws_vpc', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc: {
              [name]: std.prune({
                assign_generated_ipv6_cidr_block: build.template(std.get(block, 'assign_generated_ipv6_cidr_block', null, true)),
                enable_dns_support: build.template(std.get(block, 'enable_dns_support', null, true)),
                instance_tenancy: build.template(std.get(block, 'instance_tenancy', null, true)),
                ipv4_ipam_pool_id: build.template(std.get(block, 'ipv4_ipam_pool_id', null, true)),
                ipv4_netmask_length: build.template(std.get(block, 'ipv4_netmask_length', null, true)),
                ipv6_ipam_pool_id: build.template(std.get(block, 'ipv6_ipam_pool_id', null, true)),
                ipv6_netmask_length: build.template(std.get(block, 'ipv6_netmask_length', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      assign_generated_ipv6_cidr_block: p.child('assign_generated_ipv6_cidr_block').out,
      cidr_block: p.child('cidr_block').out,
      default_network_acl_id: p.child('default_network_acl_id').out,
      default_route_table_id: p.child('default_route_table_id').out,
      default_security_group_id: p.child('default_security_group_id').out,
      dhcp_options_id: p.child('dhcp_options_id').out,
      enable_dns_hostnames: p.child('enable_dns_hostnames').out,
      enable_dns_support: p.child('enable_dns_support').out,
      enable_network_address_usage_metrics: p.child('enable_network_address_usage_metrics').out,
      id: p.child('id').out,
      instance_tenancy: p.child('instance_tenancy').out,
      ipv4_ipam_pool_id: p.child('ipv4_ipam_pool_id').out,
      ipv4_netmask_length: p.child('ipv4_netmask_length').out,
      ipv6_association_id: p.child('ipv6_association_id').out,
      ipv6_cidr_block: p.child('ipv6_cidr_block').out,
      ipv6_cidr_block_network_border_group: p.child('ipv6_cidr_block_network_border_group').out,
      ipv6_ipam_pool_id: p.child('ipv6_ipam_pool_id').out,
      ipv6_netmask_length: p.child('ipv6_netmask_length').out,
      main_route_table_id: p.child('main_route_table_id').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    vpc_dhcp_options(name, block): {
      local p = path(['aws_vpc_dhcp_options', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_dhcp_options: {
              [name]: std.prune({
                domain_name: build.template(std.get(block, 'domain_name', null, true)),
                domain_name_servers: build.template(std.get(block, 'domain_name_servers', null, true)),
                ipv6_address_preferred_lease_time: build.template(std.get(block, 'ipv6_address_preferred_lease_time', null, true)),
                netbios_name_servers: build.template(std.get(block, 'netbios_name_servers', null, true)),
                netbios_node_type: build.template(std.get(block, 'netbios_node_type', null, true)),
                ntp_servers: build.template(std.get(block, 'ntp_servers', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      domain_name: p.child('domain_name').out,
      domain_name_servers: p.child('domain_name_servers').out,
      id: p.child('id').out,
      ipv6_address_preferred_lease_time: p.child('ipv6_address_preferred_lease_time').out,
      netbios_name_servers: p.child('netbios_name_servers').out,
      netbios_node_type: p.child('netbios_node_type').out,
      ntp_servers: p.child('ntp_servers').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    vpc_dhcp_options_association(name, block): {
      local p = path(['aws_vpc_dhcp_options_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_dhcp_options_association: {
              [name]: std.prune({
                dhcp_options_id: build.template(block.dhcp_options_id),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      dhcp_options_id: p.child('dhcp_options_id').out,
      id: p.child('id').out,
      vpc_id: p.child('vpc_id').out,
    },
    vpc_endpoint(name, block): {
      local p = path(['aws_vpc_endpoint', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_endpoint: {
              [name]: std.prune({
                auto_accept: build.template(std.get(block, 'auto_accept', null, true)),
                service_name: build.template(block.service_name),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_endpoint_type: build.template(std.get(block, 'vpc_endpoint_type', null, true)),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_accept: p.child('auto_accept').out,
      cidr_blocks: p.child('cidr_blocks').out,
      dns_entry: p.child('dns_entry').out,
      id: p.child('id').out,
      ip_address_type: p.child('ip_address_type').out,
      network_interface_ids: p.child('network_interface_ids').out,
      owner_id: p.child('owner_id').out,
      policy: p.child('policy').out,
      prefix_list_id: p.child('prefix_list_id').out,
      private_dns_enabled: p.child('private_dns_enabled').out,
      requester_managed: p.child('requester_managed').out,
      route_table_ids: p.child('route_table_ids').out,
      security_group_ids: p.child('security_group_ids').out,
      service_name: p.child('service_name').out,
      state: p.child('state').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_endpoint_type: p.child('vpc_endpoint_type').out,
      vpc_id: p.child('vpc_id').out,
    },
    vpc_endpoint_connection_accepter(name, block): {
      local p = path(['aws_vpc_endpoint_connection_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_endpoint_connection_accepter: {
              [name]: std.prune({
                vpc_endpoint_id: build.template(block.vpc_endpoint_id),
                vpc_endpoint_service_id: build.template(block.vpc_endpoint_service_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      vpc_endpoint_id: p.child('vpc_endpoint_id').out,
      vpc_endpoint_service_id: p.child('vpc_endpoint_service_id').out,
      vpc_endpoint_state: p.child('vpc_endpoint_state').out,
    },
    vpc_endpoint_connection_notification(name, block): {
      local p = path(['aws_vpc_endpoint_connection_notification', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_endpoint_connection_notification: {
              [name]: std.prune({
                connection_events: build.template(block.connection_events),
                connection_notification_arn: build.template(block.connection_notification_arn),
                vpc_endpoint_id: build.template(std.get(block, 'vpc_endpoint_id', null, true)),
                vpc_endpoint_service_id: build.template(std.get(block, 'vpc_endpoint_service_id', null, true)),
              }),
            },
          },
        },
      },
      connection_events: p.child('connection_events').out,
      connection_notification_arn: p.child('connection_notification_arn').out,
      id: p.child('id').out,
      notification_type: p.child('notification_type').out,
      state: p.child('state').out,
      vpc_endpoint_id: p.child('vpc_endpoint_id').out,
      vpc_endpoint_service_id: p.child('vpc_endpoint_service_id').out,
    },
    vpc_endpoint_policy(name, block): {
      local p = path(['aws_vpc_endpoint_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_endpoint_policy: {
              [name]: std.prune({
                vpc_endpoint_id: build.template(block.vpc_endpoint_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      vpc_endpoint_id: p.child('vpc_endpoint_id').out,
    },
    vpc_endpoint_private_dns(name, block): {
      local p = path(['aws_vpc_endpoint_private_dns', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_endpoint_private_dns: {
              [name]: std.prune({
                private_dns_enabled: build.template(block.private_dns_enabled),
                vpc_endpoint_id: build.template(block.vpc_endpoint_id),
              }),
            },
          },
        },
      },
      private_dns_enabled: p.child('private_dns_enabled').out,
      vpc_endpoint_id: p.child('vpc_endpoint_id').out,
    },
    vpc_endpoint_route_table_association(name, block): {
      local p = path(['aws_vpc_endpoint_route_table_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_endpoint_route_table_association: {
              [name]: std.prune({
                route_table_id: build.template(block.route_table_id),
                vpc_endpoint_id: build.template(block.vpc_endpoint_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      route_table_id: p.child('route_table_id').out,
      vpc_endpoint_id: p.child('vpc_endpoint_id').out,
    },
    vpc_endpoint_security_group_association(name, block): {
      local p = path(['aws_vpc_endpoint_security_group_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_endpoint_security_group_association: {
              [name]: std.prune({
                replace_default_association: build.template(std.get(block, 'replace_default_association', null, true)),
                security_group_id: build.template(block.security_group_id),
                vpc_endpoint_id: build.template(block.vpc_endpoint_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      replace_default_association: p.child('replace_default_association').out,
      security_group_id: p.child('security_group_id').out,
      vpc_endpoint_id: p.child('vpc_endpoint_id').out,
    },
    vpc_endpoint_service(name, block): {
      local p = path(['aws_vpc_endpoint_service', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_endpoint_service: {
              [name]: std.prune({
                acceptance_required: build.template(block.acceptance_required),
                gateway_load_balancer_arns: build.template(std.get(block, 'gateway_load_balancer_arns', null, true)),
                network_load_balancer_arns: build.template(std.get(block, 'network_load_balancer_arns', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      acceptance_required: p.child('acceptance_required').out,
      allowed_principals: p.child('allowed_principals').out,
      arn: p.child('arn').out,
      availability_zones: p.child('availability_zones').out,
      base_endpoint_dns_names: p.child('base_endpoint_dns_names').out,
      gateway_load_balancer_arns: p.child('gateway_load_balancer_arns').out,
      id: p.child('id').out,
      manages_vpc_endpoints: p.child('manages_vpc_endpoints').out,
      network_load_balancer_arns: p.child('network_load_balancer_arns').out,
      private_dns_name: p.child('private_dns_name').out,
      private_dns_name_configuration: p.child('private_dns_name_configuration').out,
      service_name: p.child('service_name').out,
      service_type: p.child('service_type').out,
      state: p.child('state').out,
      supported_ip_address_types: p.child('supported_ip_address_types').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    vpc_endpoint_service_allowed_principal(name, block): {
      local p = path(['aws_vpc_endpoint_service_allowed_principal', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_endpoint_service_allowed_principal: {
              [name]: std.prune({
                principal_arn: build.template(block.principal_arn),
                vpc_endpoint_service_id: build.template(block.vpc_endpoint_service_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      principal_arn: p.child('principal_arn').out,
      vpc_endpoint_service_id: p.child('vpc_endpoint_service_id').out,
    },
    vpc_endpoint_service_private_dns_verification(name, block): {
      local p = path(['aws_vpc_endpoint_service_private_dns_verification', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_endpoint_service_private_dns_verification: {
              [name]: std.prune({
                service_id: build.template(block.service_id),
                wait_for_verification: build.template(std.get(block, 'wait_for_verification', null, true)),
              }),
            },
          },
        },
      },
      service_id: p.child('service_id').out,
      wait_for_verification: p.child('wait_for_verification').out,
    },
    vpc_endpoint_subnet_association(name, block): {
      local p = path(['aws_vpc_endpoint_subnet_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_endpoint_subnet_association: {
              [name]: std.prune({
                subnet_id: build.template(block.subnet_id),
                vpc_endpoint_id: build.template(block.vpc_endpoint_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      subnet_id: p.child('subnet_id').out,
      vpc_endpoint_id: p.child('vpc_endpoint_id').out,
    },
    vpc_ipam(name, block): {
      local p = path(['aws_vpc_ipam', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_ipam: {
              [name]: std.prune({
                cascade: build.template(std.get(block, 'cascade', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                enable_private_gua: build.template(std.get(block, 'enable_private_gua', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                tier: build.template(std.get(block, 'tier', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cascade: p.child('cascade').out,
      default_resource_discovery_association_id: p.child('default_resource_discovery_association_id').out,
      default_resource_discovery_id: p.child('default_resource_discovery_id').out,
      description: p.child('description').out,
      enable_private_gua: p.child('enable_private_gua').out,
      id: p.child('id').out,
      private_default_scope_id: p.child('private_default_scope_id').out,
      public_default_scope_id: p.child('public_default_scope_id').out,
      scope_count: p.child('scope_count').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      tier: p.child('tier').out,
    },
    vpc_ipam_organization_admin_account(name, block): {
      local p = path(['aws_vpc_ipam_organization_admin_account', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_ipam_organization_admin_account: {
              [name]: std.prune({
                delegated_admin_account_id: build.template(block.delegated_admin_account_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      delegated_admin_account_id: p.child('delegated_admin_account_id').out,
      email: p.child('email').out,
      id: p.child('id').out,
      name: p.child('name').out,
      service_principal: p.child('service_principal').out,
    },
    vpc_ipam_pool(name, block): {
      local p = path(['aws_vpc_ipam_pool', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_ipam_pool: {
              [name]: std.prune({
                address_family: build.template(block.address_family),
                allocation_default_netmask_length: build.template(std.get(block, 'allocation_default_netmask_length', null, true)),
                allocation_max_netmask_length: build.template(std.get(block, 'allocation_max_netmask_length', null, true)),
                allocation_min_netmask_length: build.template(std.get(block, 'allocation_min_netmask_length', null, true)),
                allocation_resource_tags: build.template(std.get(block, 'allocation_resource_tags', null, true)),
                auto_import: build.template(std.get(block, 'auto_import', null, true)),
                aws_service: build.template(std.get(block, 'aws_service', null, true)),
                cascade: build.template(std.get(block, 'cascade', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                ipam_scope_id: build.template(block.ipam_scope_id),
                locale: build.template(std.get(block, 'locale', null, true)),
                public_ip_source: build.template(std.get(block, 'public_ip_source', null, true)),
                publicly_advertisable: build.template(std.get(block, 'publicly_advertisable', null, true)),
                source_ipam_pool_id: build.template(std.get(block, 'source_ipam_pool_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      address_family: p.child('address_family').out,
      allocation_default_netmask_length: p.child('allocation_default_netmask_length').out,
      allocation_max_netmask_length: p.child('allocation_max_netmask_length').out,
      allocation_min_netmask_length: p.child('allocation_min_netmask_length').out,
      allocation_resource_tags: p.child('allocation_resource_tags').out,
      arn: p.child('arn').out,
      auto_import: p.child('auto_import').out,
      aws_service: p.child('aws_service').out,
      cascade: p.child('cascade').out,
      description: p.child('description').out,
      id: p.child('id').out,
      ipam_scope_id: p.child('ipam_scope_id').out,
      ipam_scope_type: p.child('ipam_scope_type').out,
      locale: p.child('locale').out,
      pool_depth: p.child('pool_depth').out,
      public_ip_source: p.child('public_ip_source').out,
      publicly_advertisable: p.child('publicly_advertisable').out,
      source_ipam_pool_id: p.child('source_ipam_pool_id').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    vpc_ipam_pool_cidr(name, block): {
      local p = path(['aws_vpc_ipam_pool_cidr', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_ipam_pool_cidr: {
              [name]: std.prune({
                ipam_pool_id: build.template(block.ipam_pool_id),
                netmask_length: build.template(std.get(block, 'netmask_length', null, true)),
              }),
            },
          },
        },
      },
      cidr: p.child('cidr').out,
      id: p.child('id').out,
      ipam_pool_cidr_id: p.child('ipam_pool_cidr_id').out,
      ipam_pool_id: p.child('ipam_pool_id').out,
      netmask_length: p.child('netmask_length').out,
    },
    vpc_ipam_pool_cidr_allocation(name, block): {
      local p = path(['aws_vpc_ipam_pool_cidr_allocation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_ipam_pool_cidr_allocation: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                disallowed_cidrs: build.template(std.get(block, 'disallowed_cidrs', null, true)),
                ipam_pool_id: build.template(block.ipam_pool_id),
              }),
            },
          },
        },
      },
      cidr: p.child('cidr').out,
      description: p.child('description').out,
      disallowed_cidrs: p.child('disallowed_cidrs').out,
      id: p.child('id').out,
      ipam_pool_allocation_id: p.child('ipam_pool_allocation_id').out,
      ipam_pool_id: p.child('ipam_pool_id').out,
      netmask_length: p.child('netmask_length').out,
      resource_id: p.child('resource_id').out,
      resource_owner: p.child('resource_owner').out,
      resource_type: p.child('resource_type').out,
    },
    vpc_ipam_preview_next_cidr(name, block): {
      local p = path(['aws_vpc_ipam_preview_next_cidr', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_ipam_preview_next_cidr: {
              [name]: std.prune({
                disallowed_cidrs: build.template(std.get(block, 'disallowed_cidrs', null, true)),
                ipam_pool_id: build.template(block.ipam_pool_id),
                netmask_length: build.template(std.get(block, 'netmask_length', null, true)),
              }),
            },
          },
        },
      },
      cidr: p.child('cidr').out,
      disallowed_cidrs: p.child('disallowed_cidrs').out,
      id: p.child('id').out,
      ipam_pool_id: p.child('ipam_pool_id').out,
      netmask_length: p.child('netmask_length').out,
    },
    vpc_ipam_resource_discovery(name, block): {
      local p = path(['aws_vpc_ipam_resource_discovery', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_ipam_resource_discovery: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      ipam_resource_discovery_region: p.child('ipam_resource_discovery_region').out,
      is_default: p.child('is_default').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    vpc_ipam_resource_discovery_association(name, block): {
      local p = path(['aws_vpc_ipam_resource_discovery_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_ipam_resource_discovery_association: {
              [name]: std.prune({
                ipam_id: build.template(block.ipam_id),
                ipam_resource_discovery_id: build.template(block.ipam_resource_discovery_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      ipam_arn: p.child('ipam_arn').out,
      ipam_id: p.child('ipam_id').out,
      ipam_region: p.child('ipam_region').out,
      ipam_resource_discovery_id: p.child('ipam_resource_discovery_id').out,
      is_default: p.child('is_default').out,
      owner_id: p.child('owner_id').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    vpc_ipam_scope(name, block): {
      local p = path(['aws_vpc_ipam_scope', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_ipam_scope: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                ipam_id: build.template(block.ipam_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      ipam_arn: p.child('ipam_arn').out,
      ipam_id: p.child('ipam_id').out,
      ipam_scope_type: p.child('ipam_scope_type').out,
      is_default: p.child('is_default').out,
      pool_count: p.child('pool_count').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    vpc_ipv4_cidr_block_association(name, block): {
      local p = path(['aws_vpc_ipv4_cidr_block_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_ipv4_cidr_block_association: {
              [name]: std.prune({
                ipv4_ipam_pool_id: build.template(std.get(block, 'ipv4_ipam_pool_id', null, true)),
                ipv4_netmask_length: build.template(std.get(block, 'ipv4_netmask_length', null, true)),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      cidr_block: p.child('cidr_block').out,
      id: p.child('id').out,
      ipv4_ipam_pool_id: p.child('ipv4_ipam_pool_id').out,
      ipv4_netmask_length: p.child('ipv4_netmask_length').out,
      vpc_id: p.child('vpc_id').out,
    },
    vpc_ipv6_cidr_block_association(name, block): {
      local p = path(['aws_vpc_ipv6_cidr_block_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_ipv6_cidr_block_association: {
              [name]: std.prune({
                ipv6_ipam_pool_id: build.template(std.get(block, 'ipv6_ipam_pool_id', null, true)),
                ipv6_netmask_length: build.template(std.get(block, 'ipv6_netmask_length', null, true)),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      assign_generated_ipv6_cidr_block: p.child('assign_generated_ipv6_cidr_block').out,
      id: p.child('id').out,
      ip_source: p.child('ip_source').out,
      ipv6_address_attribute: p.child('ipv6_address_attribute').out,
      ipv6_cidr_block: p.child('ipv6_cidr_block').out,
      ipv6_ipam_pool_id: p.child('ipv6_ipam_pool_id').out,
      ipv6_netmask_length: p.child('ipv6_netmask_length').out,
      ipv6_pool: p.child('ipv6_pool').out,
      vpc_id: p.child('vpc_id').out,
    },
    vpc_network_performance_metric_subscription(name, block): {
      local p = path(['aws_vpc_network_performance_metric_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_network_performance_metric_subscription: {
              [name]: std.prune({
                destination: build.template(block.destination),
                metric: build.template(std.get(block, 'metric', null, true)),
                source: build.template(block.source),
                statistic: build.template(std.get(block, 'statistic', null, true)),
              }),
            },
          },
        },
      },
      destination: p.child('destination').out,
      id: p.child('id').out,
      metric: p.child('metric').out,
      period: p.child('period').out,
      source: p.child('source').out,
      statistic: p.child('statistic').out,
    },
    vpc_peering_connection(name, block): {
      local p = path(['aws_vpc_peering_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_peering_connection: {
              [name]: std.prune({
                auto_accept: build.template(std.get(block, 'auto_accept', null, true)),
                peer_vpc_id: build.template(block.peer_vpc_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_id: build.template(block.vpc_id),
              }),
            },
          },
        },
      },
      accept_status: p.child('accept_status').out,
      auto_accept: p.child('auto_accept').out,
      id: p.child('id').out,
      peer_owner_id: p.child('peer_owner_id').out,
      peer_region: p.child('peer_region').out,
      peer_vpc_id: p.child('peer_vpc_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    vpc_peering_connection_accepter(name, block): {
      local p = path(['aws_vpc_peering_connection_accepter', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_peering_connection_accepter: {
              [name]: std.prune({
                auto_accept: build.template(std.get(block, 'auto_accept', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_peering_connection_id: build.template(block.vpc_peering_connection_id),
              }),
            },
          },
        },
      },
      accept_status: p.child('accept_status').out,
      auto_accept: p.child('auto_accept').out,
      id: p.child('id').out,
      peer_owner_id: p.child('peer_owner_id').out,
      peer_region: p.child('peer_region').out,
      peer_vpc_id: p.child('peer_vpc_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
      vpc_peering_connection_id: p.child('vpc_peering_connection_id').out,
    },
    vpc_peering_connection_options(name, block): {
      local p = path(['aws_vpc_peering_connection_options', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_peering_connection_options: {
              [name]: std.prune({
                vpc_peering_connection_id: build.template(block.vpc_peering_connection_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      vpc_peering_connection_id: p.child('vpc_peering_connection_id').out,
    },
    vpc_security_group_egress_rule(name, block): {
      local p = path(['aws_vpc_security_group_egress_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_security_group_egress_rule: {
              [name]: std.prune({
                cidr_ipv4: build.template(std.get(block, 'cidr_ipv4', null, true)),
                cidr_ipv6: build.template(std.get(block, 'cidr_ipv6', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                from_port: build.template(std.get(block, 'from_port', null, true)),
                ip_protocol: build.template(block.ip_protocol),
                prefix_list_id: build.template(std.get(block, 'prefix_list_id', null, true)),
                referenced_security_group_id: build.template(std.get(block, 'referenced_security_group_id', null, true)),
                security_group_id: build.template(block.security_group_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                to_port: build.template(std.get(block, 'to_port', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cidr_ipv4: p.child('cidr_ipv4').out,
      cidr_ipv6: p.child('cidr_ipv6').out,
      description: p.child('description').out,
      from_port: p.child('from_port').out,
      id: p.child('id').out,
      ip_protocol: p.child('ip_protocol').out,
      prefix_list_id: p.child('prefix_list_id').out,
      referenced_security_group_id: p.child('referenced_security_group_id').out,
      security_group_id: p.child('security_group_id').out,
      security_group_rule_id: p.child('security_group_rule_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      to_port: p.child('to_port').out,
    },
    vpc_security_group_ingress_rule(name, block): {
      local p = path(['aws_vpc_security_group_ingress_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpc_security_group_ingress_rule: {
              [name]: std.prune({
                cidr_ipv4: build.template(std.get(block, 'cidr_ipv4', null, true)),
                cidr_ipv6: build.template(std.get(block, 'cidr_ipv6', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                from_port: build.template(std.get(block, 'from_port', null, true)),
                ip_protocol: build.template(block.ip_protocol),
                prefix_list_id: build.template(std.get(block, 'prefix_list_id', null, true)),
                referenced_security_group_id: build.template(std.get(block, 'referenced_security_group_id', null, true)),
                security_group_id: build.template(block.security_group_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                to_port: build.template(std.get(block, 'to_port', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cidr_ipv4: p.child('cidr_ipv4').out,
      cidr_ipv6: p.child('cidr_ipv6').out,
      description: p.child('description').out,
      from_port: p.child('from_port').out,
      id: p.child('id').out,
      ip_protocol: p.child('ip_protocol').out,
      prefix_list_id: p.child('prefix_list_id').out,
      referenced_security_group_id: p.child('referenced_security_group_id').out,
      security_group_id: p.child('security_group_id').out,
      security_group_rule_id: p.child('security_group_rule_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      to_port: p.child('to_port').out,
    },
    vpclattice_access_log_subscription(name, block): {
      local p = path(['aws_vpclattice_access_log_subscription', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpclattice_access_log_subscription: {
              [name]: std.prune({
                destination_arn: build.template(block.destination_arn),
                resource_identifier: build.template(block.resource_identifier),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      destination_arn: p.child('destination_arn').out,
      id: p.child('id').out,
      resource_arn: p.child('resource_arn').out,
      resource_identifier: p.child('resource_identifier').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    vpclattice_auth_policy(name, block): {
      local p = path(['aws_vpclattice_auth_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpclattice_auth_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                resource_identifier: build.template(block.resource_identifier),
                state: build.template(std.get(block, 'state', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      resource_identifier: p.child('resource_identifier').out,
      state: p.child('state').out,
    },
    vpclattice_listener(name, block): {
      local p = path(['aws_vpclattice_listener', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpclattice_listener: {
              [name]: std.prune({
                name: build.template(block.name),
                protocol: build.template(block.protocol),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      last_updated_at: p.child('last_updated_at').out,
      listener_id: p.child('listener_id').out,
      name: p.child('name').out,
      port: p.child('port').out,
      protocol: p.child('protocol').out,
      service_arn: p.child('service_arn').out,
      service_identifier: p.child('service_identifier').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    vpclattice_listener_rule(name, block): {
      local p = path(['aws_vpclattice_listener_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpclattice_listener_rule: {
              [name]: std.prune({
                listener_identifier: build.template(block.listener_identifier),
                name: build.template(block.name),
                priority: build.template(block.priority),
                service_identifier: build.template(block.service_identifier),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      listener_identifier: p.child('listener_identifier').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      rule_id: p.child('rule_id').out,
      service_identifier: p.child('service_identifier').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    vpclattice_resource_policy(name, block): {
      local p = path(['aws_vpclattice_resource_policy', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpclattice_resource_policy: {
              [name]: std.prune({
                policy: build.template(block.policy),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      resource_arn: p.child('resource_arn').out,
    },
    vpclattice_service(name, block): {
      local p = path(['aws_vpclattice_service', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpclattice_service: {
              [name]: std.prune({
                certificate_arn: build.template(std.get(block, 'certificate_arn', null, true)),
                custom_domain_name: build.template(std.get(block, 'custom_domain_name', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auth_type: p.child('auth_type').out,
      certificate_arn: p.child('certificate_arn').out,
      custom_domain_name: p.child('custom_domain_name').out,
      dns_entry: p.child('dns_entry').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    vpclattice_service_network(name, block): {
      local p = path(['aws_vpclattice_service_network', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpclattice_service_network: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auth_type: p.child('auth_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    vpclattice_service_network_service_association(name, block): {
      local p = path(['aws_vpclattice_service_network_service_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpclattice_service_network_service_association: {
              [name]: std.prune({
                service_identifier: build.template(block.service_identifier),
                service_network_identifier: build.template(block.service_network_identifier),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_by: p.child('created_by').out,
      custom_domain_name: p.child('custom_domain_name').out,
      dns_entry: p.child('dns_entry').out,
      id: p.child('id').out,
      service_identifier: p.child('service_identifier').out,
      service_network_identifier: p.child('service_network_identifier').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    vpclattice_service_network_vpc_association(name, block): {
      local p = path(['aws_vpclattice_service_network_vpc_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpclattice_service_network_vpc_association: {
              [name]: std.prune({
                security_group_ids: build.template(std.get(block, 'security_group_ids', null, true)),
                service_network_identifier: build.template(block.service_network_identifier),
                tags: build.template(std.get(block, 'tags', null, true)),
                vpc_identifier: build.template(block.vpc_identifier),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_by: p.child('created_by').out,
      id: p.child('id').out,
      security_group_ids: p.child('security_group_ids').out,
      service_network_identifier: p.child('service_network_identifier').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_identifier: p.child('vpc_identifier').out,
    },
    vpclattice_target_group(name, block): {
      local p = path(['aws_vpclattice_target_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpclattice_target_group: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
    },
    vpclattice_target_group_attachment(name, block): {
      local p = path(['aws_vpclattice_target_group_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpclattice_target_group_attachment: {
              [name]: std.prune({
                target_group_identifier: build.template(block.target_group_identifier),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      target_group_identifier: p.child('target_group_identifier').out,
    },
    vpn_connection(name, block): {
      local p = path(['aws_vpn_connection', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpn_connection: {
              [name]: std.prune({
                customer_gateway_id: build.template(block.customer_gateway_id),
                tags: build.template(std.get(block, 'tags', null, true)),
                transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null, true)),
                transport_transit_gateway_attachment_id: build.template(std.get(block, 'transport_transit_gateway_attachment_id', null, true)),
                tunnel1_dpd_timeout_action: build.template(std.get(block, 'tunnel1_dpd_timeout_action', null, true)),
                tunnel1_dpd_timeout_seconds: build.template(std.get(block, 'tunnel1_dpd_timeout_seconds', null, true)),
                tunnel1_enable_tunnel_lifecycle_control: build.template(std.get(block, 'tunnel1_enable_tunnel_lifecycle_control', null, true)),
                tunnel1_ike_versions: build.template(std.get(block, 'tunnel1_ike_versions', null, true)),
                tunnel1_phase1_dh_group_numbers: build.template(std.get(block, 'tunnel1_phase1_dh_group_numbers', null, true)),
                tunnel1_phase1_encryption_algorithms: build.template(std.get(block, 'tunnel1_phase1_encryption_algorithms', null, true)),
                tunnel1_phase1_integrity_algorithms: build.template(std.get(block, 'tunnel1_phase1_integrity_algorithms', null, true)),
                tunnel1_phase1_lifetime_seconds: build.template(std.get(block, 'tunnel1_phase1_lifetime_seconds', null, true)),
                tunnel1_phase2_dh_group_numbers: build.template(std.get(block, 'tunnel1_phase2_dh_group_numbers', null, true)),
                tunnel1_phase2_encryption_algorithms: build.template(std.get(block, 'tunnel1_phase2_encryption_algorithms', null, true)),
                tunnel1_phase2_integrity_algorithms: build.template(std.get(block, 'tunnel1_phase2_integrity_algorithms', null, true)),
                tunnel1_phase2_lifetime_seconds: build.template(std.get(block, 'tunnel1_phase2_lifetime_seconds', null, true)),
                tunnel1_rekey_fuzz_percentage: build.template(std.get(block, 'tunnel1_rekey_fuzz_percentage', null, true)),
                tunnel1_rekey_margin_time_seconds: build.template(std.get(block, 'tunnel1_rekey_margin_time_seconds', null, true)),
                tunnel1_replay_window_size: build.template(std.get(block, 'tunnel1_replay_window_size', null, true)),
                tunnel1_startup_action: build.template(std.get(block, 'tunnel1_startup_action', null, true)),
                tunnel2_dpd_timeout_action: build.template(std.get(block, 'tunnel2_dpd_timeout_action', null, true)),
                tunnel2_dpd_timeout_seconds: build.template(std.get(block, 'tunnel2_dpd_timeout_seconds', null, true)),
                tunnel2_enable_tunnel_lifecycle_control: build.template(std.get(block, 'tunnel2_enable_tunnel_lifecycle_control', null, true)),
                tunnel2_ike_versions: build.template(std.get(block, 'tunnel2_ike_versions', null, true)),
                tunnel2_phase1_dh_group_numbers: build.template(std.get(block, 'tunnel2_phase1_dh_group_numbers', null, true)),
                tunnel2_phase1_encryption_algorithms: build.template(std.get(block, 'tunnel2_phase1_encryption_algorithms', null, true)),
                tunnel2_phase1_integrity_algorithms: build.template(std.get(block, 'tunnel2_phase1_integrity_algorithms', null, true)),
                tunnel2_phase1_lifetime_seconds: build.template(std.get(block, 'tunnel2_phase1_lifetime_seconds', null, true)),
                tunnel2_phase2_dh_group_numbers: build.template(std.get(block, 'tunnel2_phase2_dh_group_numbers', null, true)),
                tunnel2_phase2_encryption_algorithms: build.template(std.get(block, 'tunnel2_phase2_encryption_algorithms', null, true)),
                tunnel2_phase2_integrity_algorithms: build.template(std.get(block, 'tunnel2_phase2_integrity_algorithms', null, true)),
                tunnel2_phase2_lifetime_seconds: build.template(std.get(block, 'tunnel2_phase2_lifetime_seconds', null, true)),
                tunnel2_rekey_fuzz_percentage: build.template(std.get(block, 'tunnel2_rekey_fuzz_percentage', null, true)),
                tunnel2_rekey_margin_time_seconds: build.template(std.get(block, 'tunnel2_rekey_margin_time_seconds', null, true)),
                tunnel2_replay_window_size: build.template(std.get(block, 'tunnel2_replay_window_size', null, true)),
                tunnel2_startup_action: build.template(std.get(block, 'tunnel2_startup_action', null, true)),
                type: build.template(block.type),
                vpn_gateway_id: build.template(std.get(block, 'vpn_gateway_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      core_network_arn: p.child('core_network_arn').out,
      core_network_attachment_arn: p.child('core_network_attachment_arn').out,
      customer_gateway_configuration: p.child('customer_gateway_configuration').out,
      customer_gateway_id: p.child('customer_gateway_id').out,
      enable_acceleration: p.child('enable_acceleration').out,
      id: p.child('id').out,
      local_ipv4_network_cidr: p.child('local_ipv4_network_cidr').out,
      local_ipv6_network_cidr: p.child('local_ipv6_network_cidr').out,
      outside_ip_address_type: p.child('outside_ip_address_type').out,
      remote_ipv4_network_cidr: p.child('remote_ipv4_network_cidr').out,
      remote_ipv6_network_cidr: p.child('remote_ipv6_network_cidr').out,
      routes: p.child('routes').out,
      static_routes_only: p.child('static_routes_only').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      transport_transit_gateway_attachment_id: p.child('transport_transit_gateway_attachment_id').out,
      tunnel1_address: p.child('tunnel1_address').out,
      tunnel1_bgp_asn: p.child('tunnel1_bgp_asn').out,
      tunnel1_bgp_holdtime: p.child('tunnel1_bgp_holdtime').out,
      tunnel1_cgw_inside_address: p.child('tunnel1_cgw_inside_address').out,
      tunnel1_dpd_timeout_action: p.child('tunnel1_dpd_timeout_action').out,
      tunnel1_dpd_timeout_seconds: p.child('tunnel1_dpd_timeout_seconds').out,
      tunnel1_enable_tunnel_lifecycle_control: p.child('tunnel1_enable_tunnel_lifecycle_control').out,
      tunnel1_ike_versions: p.child('tunnel1_ike_versions').out,
      tunnel1_inside_cidr: p.child('tunnel1_inside_cidr').out,
      tunnel1_inside_ipv6_cidr: p.child('tunnel1_inside_ipv6_cidr').out,
      tunnel1_phase1_dh_group_numbers: p.child('tunnel1_phase1_dh_group_numbers').out,
      tunnel1_phase1_encryption_algorithms: p.child('tunnel1_phase1_encryption_algorithms').out,
      tunnel1_phase1_integrity_algorithms: p.child('tunnel1_phase1_integrity_algorithms').out,
      tunnel1_phase1_lifetime_seconds: p.child('tunnel1_phase1_lifetime_seconds').out,
      tunnel1_phase2_dh_group_numbers: p.child('tunnel1_phase2_dh_group_numbers').out,
      tunnel1_phase2_encryption_algorithms: p.child('tunnel1_phase2_encryption_algorithms').out,
      tunnel1_phase2_integrity_algorithms: p.child('tunnel1_phase2_integrity_algorithms').out,
      tunnel1_phase2_lifetime_seconds: p.child('tunnel1_phase2_lifetime_seconds').out,
      tunnel1_preshared_key: p.child('tunnel1_preshared_key').out,
      tunnel1_rekey_fuzz_percentage: p.child('tunnel1_rekey_fuzz_percentage').out,
      tunnel1_rekey_margin_time_seconds: p.child('tunnel1_rekey_margin_time_seconds').out,
      tunnel1_replay_window_size: p.child('tunnel1_replay_window_size').out,
      tunnel1_startup_action: p.child('tunnel1_startup_action').out,
      tunnel1_vgw_inside_address: p.child('tunnel1_vgw_inside_address').out,
      tunnel2_address: p.child('tunnel2_address').out,
      tunnel2_bgp_asn: p.child('tunnel2_bgp_asn').out,
      tunnel2_bgp_holdtime: p.child('tunnel2_bgp_holdtime').out,
      tunnel2_cgw_inside_address: p.child('tunnel2_cgw_inside_address').out,
      tunnel2_dpd_timeout_action: p.child('tunnel2_dpd_timeout_action').out,
      tunnel2_dpd_timeout_seconds: p.child('tunnel2_dpd_timeout_seconds').out,
      tunnel2_enable_tunnel_lifecycle_control: p.child('tunnel2_enable_tunnel_lifecycle_control').out,
      tunnel2_ike_versions: p.child('tunnel2_ike_versions').out,
      tunnel2_inside_cidr: p.child('tunnel2_inside_cidr').out,
      tunnel2_inside_ipv6_cidr: p.child('tunnel2_inside_ipv6_cidr').out,
      tunnel2_phase1_dh_group_numbers: p.child('tunnel2_phase1_dh_group_numbers').out,
      tunnel2_phase1_encryption_algorithms: p.child('tunnel2_phase1_encryption_algorithms').out,
      tunnel2_phase1_integrity_algorithms: p.child('tunnel2_phase1_integrity_algorithms').out,
      tunnel2_phase1_lifetime_seconds: p.child('tunnel2_phase1_lifetime_seconds').out,
      tunnel2_phase2_dh_group_numbers: p.child('tunnel2_phase2_dh_group_numbers').out,
      tunnel2_phase2_encryption_algorithms: p.child('tunnel2_phase2_encryption_algorithms').out,
      tunnel2_phase2_integrity_algorithms: p.child('tunnel2_phase2_integrity_algorithms').out,
      tunnel2_phase2_lifetime_seconds: p.child('tunnel2_phase2_lifetime_seconds').out,
      tunnel2_preshared_key: p.child('tunnel2_preshared_key').out,
      tunnel2_rekey_fuzz_percentage: p.child('tunnel2_rekey_fuzz_percentage').out,
      tunnel2_rekey_margin_time_seconds: p.child('tunnel2_rekey_margin_time_seconds').out,
      tunnel2_replay_window_size: p.child('tunnel2_replay_window_size').out,
      tunnel2_startup_action: p.child('tunnel2_startup_action').out,
      tunnel2_vgw_inside_address: p.child('tunnel2_vgw_inside_address').out,
      tunnel_inside_ip_version: p.child('tunnel_inside_ip_version').out,
      type: p.child('type').out,
      vgw_telemetry: p.child('vgw_telemetry').out,
      vpn_gateway_id: p.child('vpn_gateway_id').out,
    },
    vpn_connection_route(name, block): {
      local p = path(['aws_vpn_connection_route', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpn_connection_route: {
              [name]: std.prune({
                destination_cidr_block: build.template(block.destination_cidr_block),
                vpn_connection_id: build.template(block.vpn_connection_id),
              }),
            },
          },
        },
      },
      destination_cidr_block: p.child('destination_cidr_block').out,
      id: p.child('id').out,
      vpn_connection_id: p.child('vpn_connection_id').out,
    },
    vpn_gateway(name, block): {
      local p = path(['aws_vpn_gateway', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpn_gateway: {
              [name]: std.prune({
                availability_zone: build.template(std.get(block, 'availability_zone', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      amazon_side_asn: p.child('amazon_side_asn').out,
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      vpc_id: p.child('vpc_id').out,
    },
    vpn_gateway_attachment(name, block): {
      local p = path(['aws_vpn_gateway_attachment', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpn_gateway_attachment: {
              [name]: std.prune({
                vpc_id: build.template(block.vpc_id),
                vpn_gateway_id: build.template(block.vpn_gateway_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      vpc_id: p.child('vpc_id').out,
      vpn_gateway_id: p.child('vpn_gateway_id').out,
    },
    vpn_gateway_route_propagation(name, block): {
      local p = path(['aws_vpn_gateway_route_propagation', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_vpn_gateway_route_propagation: {
              [name]: std.prune({
                route_table_id: build.template(block.route_table_id),
                vpn_gateway_id: build.template(block.vpn_gateway_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      route_table_id: p.child('route_table_id').out,
      vpn_gateway_id: p.child('vpn_gateway_id').out,
    },
    waf_byte_match_set(name, block): {
      local p = path(['aws_waf_byte_match_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_waf_byte_match_set: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    waf_geo_match_set(name, block): {
      local p = path(['aws_waf_geo_match_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_waf_geo_match_set: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    waf_ipset(name, block): {
      local p = path(['aws_waf_ipset', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_waf_ipset: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    waf_rate_based_rule(name, block): {
      local p = path(['aws_waf_rate_based_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_waf_rate_based_rule: {
              [name]: std.prune({
                metric_name: build.template(block.metric_name),
                name: build.template(block.name),
                rate_key: build.template(block.rate_key),
                rate_limit: build.template(block.rate_limit),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      metric_name: p.child('metric_name').out,
      name: p.child('name').out,
      rate_key: p.child('rate_key').out,
      rate_limit: p.child('rate_limit').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    waf_regex_match_set(name, block): {
      local p = path(['aws_waf_regex_match_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_waf_regex_match_set: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    waf_regex_pattern_set(name, block): {
      local p = path(['aws_waf_regex_pattern_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_waf_regex_pattern_set: {
              [name]: std.prune({
                name: build.template(block.name),
                regex_pattern_strings: build.template(std.get(block, 'regex_pattern_strings', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      regex_pattern_strings: p.child('regex_pattern_strings').out,
    },
    waf_rule(name, block): {
      local p = path(['aws_waf_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_waf_rule: {
              [name]: std.prune({
                metric_name: build.template(block.metric_name),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      metric_name: p.child('metric_name').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    waf_rule_group(name, block): {
      local p = path(['aws_waf_rule_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_waf_rule_group: {
              [name]: std.prune({
                metric_name: build.template(block.metric_name),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      metric_name: p.child('metric_name').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    waf_size_constraint_set(name, block): {
      local p = path(['aws_waf_size_constraint_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_waf_size_constraint_set: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    waf_sql_injection_match_set(name, block): {
      local p = path(['aws_waf_sql_injection_match_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_waf_sql_injection_match_set: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    waf_web_acl(name, block): {
      local p = path(['aws_waf_web_acl', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_waf_web_acl: {
              [name]: std.prune({
                metric_name: build.template(block.metric_name),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      metric_name: p.child('metric_name').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    waf_xss_match_set(name, block): {
      local p = path(['aws_waf_xss_match_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_waf_xss_match_set: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    wafregional_byte_match_set(name, block): {
      local p = path(['aws_wafregional_byte_match_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafregional_byte_match_set: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    wafregional_geo_match_set(name, block): {
      local p = path(['aws_wafregional_geo_match_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafregional_geo_match_set: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    wafregional_ipset(name, block): {
      local p = path(['aws_wafregional_ipset', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafregional_ipset: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    wafregional_rate_based_rule(name, block): {
      local p = path(['aws_wafregional_rate_based_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafregional_rate_based_rule: {
              [name]: std.prune({
                metric_name: build.template(block.metric_name),
                name: build.template(block.name),
                rate_key: build.template(block.rate_key),
                rate_limit: build.template(block.rate_limit),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      metric_name: p.child('metric_name').out,
      name: p.child('name').out,
      rate_key: p.child('rate_key').out,
      rate_limit: p.child('rate_limit').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    wafregional_regex_match_set(name, block): {
      local p = path(['aws_wafregional_regex_match_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafregional_regex_match_set: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    wafregional_regex_pattern_set(name, block): {
      local p = path(['aws_wafregional_regex_pattern_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafregional_regex_pattern_set: {
              [name]: std.prune({
                name: build.template(block.name),
                regex_pattern_strings: build.template(std.get(block, 'regex_pattern_strings', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      regex_pattern_strings: p.child('regex_pattern_strings').out,
    },
    wafregional_rule(name, block): {
      local p = path(['aws_wafregional_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafregional_rule: {
              [name]: std.prune({
                metric_name: build.template(block.metric_name),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      metric_name: p.child('metric_name').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    wafregional_rule_group(name, block): {
      local p = path(['aws_wafregional_rule_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafregional_rule_group: {
              [name]: std.prune({
                metric_name: build.template(block.metric_name),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      metric_name: p.child('metric_name').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    wafregional_size_constraint_set(name, block): {
      local p = path(['aws_wafregional_size_constraint_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafregional_size_constraint_set: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    wafregional_sql_injection_match_set(name, block): {
      local p = path(['aws_wafregional_sql_injection_match_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafregional_sql_injection_match_set: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    wafregional_web_acl(name, block): {
      local p = path(['aws_wafregional_web_acl', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafregional_web_acl: {
              [name]: std.prune({
                metric_name: build.template(block.metric_name),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      metric_name: p.child('metric_name').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    wafregional_web_acl_association(name, block): {
      local p = path(['aws_wafregional_web_acl_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafregional_web_acl_association: {
              [name]: std.prune({
                resource_arn: build.template(block.resource_arn),
                web_acl_id: build.template(block.web_acl_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      resource_arn: p.child('resource_arn').out,
      web_acl_id: p.child('web_acl_id').out,
    },
    wafregional_xss_match_set(name, block): {
      local p = path(['aws_wafregional_xss_match_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafregional_xss_match_set: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    wafv2_ip_set(name, block): {
      local p = path(['aws_wafv2_ip_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafv2_ip_set: {
              [name]: std.prune({
                addresses: build.template(std.get(block, 'addresses', null, true)),
                description: build.template(std.get(block, 'description', null, true)),
                ip_address_version: build.template(block.ip_address_version),
                name: build.template(block.name),
                scope: build.template(block.scope),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      addresses: p.child('addresses').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      ip_address_version: p.child('ip_address_version').out,
      lock_token: p.child('lock_token').out,
      name: p.child('name').out,
      scope: p.child('scope').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    wafv2_regex_pattern_set(name, block): {
      local p = path(['aws_wafv2_regex_pattern_set', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafv2_regex_pattern_set: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                scope: build.template(block.scope),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      lock_token: p.child('lock_token').out,
      name: p.child('name').out,
      scope: p.child('scope').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    wafv2_rule_group(name, block): {
      local p = path(['aws_wafv2_rule_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafv2_rule_group: {
              [name]: std.prune({
                capacity: build.template(block.capacity),
                description: build.template(std.get(block, 'description', null, true)),
                scope: build.template(block.scope),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      capacity: p.child('capacity').out,
      description: p.child('description').out,
      id: p.child('id').out,
      lock_token: p.child('lock_token').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      scope: p.child('scope').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    wafv2_web_acl(name, block): {
      local p = path(['aws_wafv2_web_acl', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafv2_web_acl: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                rule_json: build.template(std.get(block, 'rule_json', null, true)),
                scope: build.template(block.scope),
                tags: build.template(std.get(block, 'tags', null, true)),
                token_domains: build.template(std.get(block, 'token_domains', null, true)),
              }),
            },
          },
        },
      },
      application_integration_url: p.child('application_integration_url').out,
      arn: p.child('arn').out,
      capacity: p.child('capacity').out,
      description: p.child('description').out,
      id: p.child('id').out,
      lock_token: p.child('lock_token').out,
      name: p.child('name').out,
      rule_json: p.child('rule_json').out,
      scope: p.child('scope').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      token_domains: p.child('token_domains').out,
    },
    wafv2_web_acl_association(name, block): {
      local p = path(['aws_wafv2_web_acl_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafv2_web_acl_association: {
              [name]: std.prune({
                resource_arn: build.template(block.resource_arn),
                web_acl_arn: build.template(block.web_acl_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      resource_arn: p.child('resource_arn').out,
      web_acl_arn: p.child('web_acl_arn').out,
    },
    wafv2_web_acl_logging_configuration(name, block): {
      local p = path(['aws_wafv2_web_acl_logging_configuration', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_wafv2_web_acl_logging_configuration: {
              [name]: std.prune({
                log_destination_configs: build.template(block.log_destination_configs),
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      log_destination_configs: p.child('log_destination_configs').out,
      resource_arn: p.child('resource_arn').out,
    },
    worklink_fleet(name, block): {
      local p = path(['aws_worklink_fleet', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_worklink_fleet: {
              [name]: std.prune({
                audit_stream_arn: build.template(std.get(block, 'audit_stream_arn', null, true)),
                device_ca_certificate: build.template(std.get(block, 'device_ca_certificate', null, true)),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                name: build.template(block.name),
                optimize_for_end_user_location: build.template(std.get(block, 'optimize_for_end_user_location', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      audit_stream_arn: p.child('audit_stream_arn').out,
      company_code: p.child('company_code').out,
      created_time: p.child('created_time').out,
      device_ca_certificate: p.child('device_ca_certificate').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      last_updated_time: p.child('last_updated_time').out,
      name: p.child('name').out,
      optimize_for_end_user_location: p.child('optimize_for_end_user_location').out,
    },
    worklink_website_certificate_authority_association(name, block): {
      local p = path(['aws_worklink_website_certificate_authority_association', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_worklink_website_certificate_authority_association: {
              [name]: std.prune({
                certificate: build.template(block.certificate),
                display_name: build.template(std.get(block, 'display_name', null, true)),
                fleet_arn: build.template(block.fleet_arn),
              }),
            },
          },
        },
      },
      certificate: p.child('certificate').out,
      display_name: p.child('display_name').out,
      fleet_arn: p.child('fleet_arn').out,
      id: p.child('id').out,
      website_ca_id: p.child('website_ca_id').out,
    },
    workspaces_connection_alias(name, block): {
      local p = path(['aws_workspaces_connection_alias', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_workspaces_connection_alias: {
              [name]: std.prune({
                connection_string: build.template(block.connection_string),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      connection_string: p.child('connection_string').out,
      id: p.child('id').out,
      owner_account_id: p.child('owner_account_id').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    workspaces_directory(name, block): {
      local p = path(['aws_workspaces_directory', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_workspaces_directory: {
              [name]: std.prune({
                directory_id: build.template(block.directory_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      alias: p.child('alias').out,
      customer_user_name: p.child('customer_user_name').out,
      directory_id: p.child('directory_id').out,
      directory_name: p.child('directory_name').out,
      directory_type: p.child('directory_type').out,
      dns_ip_addresses: p.child('dns_ip_addresses').out,
      iam_role_id: p.child('iam_role_id').out,
      id: p.child('id').out,
      ip_group_ids: p.child('ip_group_ids').out,
      registration_code: p.child('registration_code').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      workspace_security_group_id: p.child('workspace_security_group_id').out,
    },
    workspaces_ip_group(name, block): {
      local p = path(['aws_workspaces_ip_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_workspaces_ip_group: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    workspaces_workspace(name, block): {
      local p = path(['aws_workspaces_workspace', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_workspaces_workspace: {
              [name]: std.prune({
                bundle_id: build.template(block.bundle_id),
                directory_id: build.template(block.directory_id),
                root_volume_encryption_enabled: build.template(std.get(block, 'root_volume_encryption_enabled', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                user_name: build.template(block.user_name),
                user_volume_encryption_enabled: build.template(std.get(block, 'user_volume_encryption_enabled', null, true)),
                volume_encryption_key: build.template(std.get(block, 'volume_encryption_key', null, true)),
              }),
            },
          },
        },
      },
      bundle_id: p.child('bundle_id').out,
      computer_name: p.child('computer_name').out,
      directory_id: p.child('directory_id').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      root_volume_encryption_enabled: p.child('root_volume_encryption_enabled').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      user_name: p.child('user_name').out,
      user_volume_encryption_enabled: p.child('user_volume_encryption_enabled').out,
      volume_encryption_key: p.child('volume_encryption_key').out,
    },
    xray_encryption_config(name, block): {
      local p = path(['aws_xray_encryption_config', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_xray_encryption_config: {
              [name]: std.prune({
                key_id: build.template(std.get(block, 'key_id', null, true)),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key_id: p.child('key_id').out,
      type: p.child('type').out,
    },
    xray_group(name, block): {
      local p = path(['aws_xray_group', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_xray_group: {
              [name]: std.prune({
                filter_expression: build.template(block.filter_expression),
                group_name: build.template(block.group_name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      filter_expression: p.child('filter_expression').out,
      group_name: p.child('group_name').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    xray_sampling_rule(name, block): {
      local p = path(['aws_xray_sampling_rule', name]),
      _: p.out._ {
        block: {
          resource: {
            aws_xray_sampling_rule: {
              [name]: std.prune({
                attributes: build.template(std.get(block, 'attributes', null, true)),
                fixed_rate: build.template(block.fixed_rate),
                host: build.template(block.host),
                http_method: build.template(block.http_method),
                priority: build.template(block.priority),
                reservoir_size: build.template(block.reservoir_size),
                resource_arn: build.template(block.resource_arn),
                rule_name: build.template(std.get(block, 'rule_name', null, true)),
                service_name: build.template(block.service_name),
                service_type: build.template(block.service_type),
                tags: build.template(std.get(block, 'tags', null, true)),
                url_path: build.template(block.url_path),
                version: build.template(block.version),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attributes: p.child('attributes').out,
      fixed_rate: p.child('fixed_rate').out,
      host: p.child('host').out,
      http_method: p.child('http_method').out,
      id: p.child('id').out,
      priority: p.child('priority').out,
      reservoir_size: p.child('reservoir_size').out,
      resource_arn: p.child('resource_arn').out,
      rule_name: p.child('rule_name').out,
      service_name: p.child('service_name').out,
      service_type: p.child('service_type').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      url_path: p.child('url_path').out,
      version: p.child('version').out,
    },
  },
  data: {
    acm_certificate(name, block): {
      local p = path(['data', 'aws_acm_certificate', name]),
      _: p.out._ {
        block: {
          data: {
            aws_acm_certificate: {
              [name]: std.prune({
                key_types: build.template(std.get(block, 'key_types', null, true)),
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
                statuses: build.template(std.get(block, 'statuses', null, true)),
                types: build.template(std.get(block, 'types', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      certificate: p.child('certificate').out,
      certificate_chain: p.child('certificate_chain').out,
      domain: p.child('domain').out,
      id: p.child('id').out,
      key_types: p.child('key_types').out,
      most_recent: p.child('most_recent').out,
      status: p.child('status').out,
      statuses: p.child('statuses').out,
      tags: p.child('tags').out,
      types: p.child('types').out,
    },
    acmpca_certificate(name, block): {
      local p = path(['data', 'aws_acmpca_certificate', name]),
      _: p.out._ {
        block: {
          data: {
            aws_acmpca_certificate: {
              [name]: std.prune({
                arn: build.template(block.arn),
                certificate_authority_arn: build.template(block.certificate_authority_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      certificate: p.child('certificate').out,
      certificate_authority_arn: p.child('certificate_authority_arn').out,
      certificate_chain: p.child('certificate_chain').out,
      id: p.child('id').out,
    },
    acmpca_certificate_authority(name, block): {
      local p = path(['data', 'aws_acmpca_certificate_authority', name]),
      _: p.out._ {
        block: {
          data: {
            aws_acmpca_certificate_authority: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      certificate: p.child('certificate').out,
      certificate_chain: p.child('certificate_chain').out,
      certificate_signing_request: p.child('certificate_signing_request').out,
      id: p.child('id').out,
      key_storage_security_standard: p.child('key_storage_security_standard').out,
      not_after: p.child('not_after').out,
      not_before: p.child('not_before').out,
      revocation_configuration: p.child('revocation_configuration').out,
      serial: p.child('serial').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      usage_mode: p.child('usage_mode').out,
    },
    alb(name, block): {
      local p = path(['data', 'aws_alb', name]),
      _: p.out._ {
        block: {
          data: {
            aws_alb: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      access_logs: p.child('access_logs').out,
      arn: p.child('arn').out,
      arn_suffix: p.child('arn_suffix').out,
      client_keep_alive: p.child('client_keep_alive').out,
      connection_logs: p.child('connection_logs').out,
      customer_owned_ipv4_pool: p.child('customer_owned_ipv4_pool').out,
      desync_mitigation_mode: p.child('desync_mitigation_mode').out,
      dns_name: p.child('dns_name').out,
      dns_record_client_routing_policy: p.child('dns_record_client_routing_policy').out,
      drop_invalid_header_fields: p.child('drop_invalid_header_fields').out,
      enable_cross_zone_load_balancing: p.child('enable_cross_zone_load_balancing').out,
      enable_deletion_protection: p.child('enable_deletion_protection').out,
      enable_http2: p.child('enable_http2').out,
      enable_tls_version_and_cipher_suite_headers: p.child('enable_tls_version_and_cipher_suite_headers').out,
      enable_waf_fail_open: p.child('enable_waf_fail_open').out,
      enable_xff_client_port: p.child('enable_xff_client_port').out,
      enable_zonal_shift: p.child('enable_zonal_shift').out,
      enforce_security_group_inbound_rules_on_private_link_traffic: p.child('enforce_security_group_inbound_rules_on_private_link_traffic').out,
      id: p.child('id').out,
      idle_timeout: p.child('idle_timeout').out,
      internal: p.child('internal').out,
      ip_address_type: p.child('ip_address_type').out,
      load_balancer_type: p.child('load_balancer_type').out,
      name: p.child('name').out,
      preserve_host_header: p.child('preserve_host_header').out,
      security_groups: p.child('security_groups').out,
      subnet_mapping: p.child('subnet_mapping').out,
      subnets: p.child('subnets').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
      xff_header_processing_mode: p.child('xff_header_processing_mode').out,
      zone_id: p.child('zone_id').out,
    },
    alb_listener(name, block): {
      local p = path(['data', 'aws_alb_listener', name]),
      _: p.out._ {
        block: {
          data: {
            aws_alb_listener: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      alpn_policy: p.child('alpn_policy').out,
      arn: p.child('arn').out,
      certificate_arn: p.child('certificate_arn').out,
      default_action: p.child('default_action').out,
      id: p.child('id').out,
      load_balancer_arn: p.child('load_balancer_arn').out,
      mutual_authentication: p.child('mutual_authentication').out,
      port: p.child('port').out,
      protocol: p.child('protocol').out,
      ssl_policy: p.child('ssl_policy').out,
      tags: p.child('tags').out,
    },
    alb_target_group(name, block): {
      local p = path(['data', 'aws_alb_target_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_alb_target_group: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      arn_suffix: p.child('arn_suffix').out,
      connection_termination: p.child('connection_termination').out,
      deregistration_delay: p.child('deregistration_delay').out,
      health_check: p.child('health_check').out,
      id: p.child('id').out,
      lambda_multi_value_headers_enabled: p.child('lambda_multi_value_headers_enabled').out,
      load_balancer_arns: p.child('load_balancer_arns').out,
      load_balancing_algorithm_type: p.child('load_balancing_algorithm_type').out,
      load_balancing_anomaly_mitigation: p.child('load_balancing_anomaly_mitigation').out,
      load_balancing_cross_zone_enabled: p.child('load_balancing_cross_zone_enabled').out,
      name: p.child('name').out,
      port: p.child('port').out,
      preserve_client_ip: p.child('preserve_client_ip').out,
      protocol: p.child('protocol').out,
      protocol_version: p.child('protocol_version').out,
      proxy_protocol_v2: p.child('proxy_protocol_v2').out,
      slow_start: p.child('slow_start').out,
      stickiness: p.child('stickiness').out,
      tags: p.child('tags').out,
      target_type: p.child('target_type').out,
      vpc_id: p.child('vpc_id').out,
    },
    ami(name, block): {
      local p = path(['data', 'aws_ami', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ami: {
              [name]: std.prune({
                executable_users: build.template(std.get(block, 'executable_users', null, true)),
                include_deprecated: build.template(std.get(block, 'include_deprecated', null, true)),
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
                name_regex: build.template(std.get(block, 'name_regex', null, true)),
                owners: build.template(std.get(block, 'owners', null, true)),
              }),
            },
          },
        },
      },
      architecture: p.child('architecture').out,
      arn: p.child('arn').out,
      block_device_mappings: p.child('block_device_mappings').out,
      boot_mode: p.child('boot_mode').out,
      creation_date: p.child('creation_date').out,
      deprecation_time: p.child('deprecation_time').out,
      description: p.child('description').out,
      ena_support: p.child('ena_support').out,
      executable_users: p.child('executable_users').out,
      hypervisor: p.child('hypervisor').out,
      id: p.child('id').out,
      image_id: p.child('image_id').out,
      image_location: p.child('image_location').out,
      image_owner_alias: p.child('image_owner_alias').out,
      image_type: p.child('image_type').out,
      imds_support: p.child('imds_support').out,
      include_deprecated: p.child('include_deprecated').out,
      kernel_id: p.child('kernel_id').out,
      most_recent: p.child('most_recent').out,
      name: p.child('name').out,
      name_regex: p.child('name_regex').out,
      owner_id: p.child('owner_id').out,
      owners: p.child('owners').out,
      platform: p.child('platform').out,
      platform_details: p.child('platform_details').out,
      product_codes: p.child('product_codes').out,
      public: p.child('public').out,
      ramdisk_id: p.child('ramdisk_id').out,
      root_device_name: p.child('root_device_name').out,
      root_device_type: p.child('root_device_type').out,
      root_snapshot_id: p.child('root_snapshot_id').out,
      sriov_net_support: p.child('sriov_net_support').out,
      state: p.child('state').out,
      state_reason: p.child('state_reason').out,
      tags: p.child('tags').out,
      tpm_support: p.child('tpm_support').out,
      usage_operation: p.child('usage_operation').out,
      virtualization_type: p.child('virtualization_type').out,
    },
    ami_ids(name, block): {
      local p = path(['data', 'aws_ami_ids', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ami_ids: {
              [name]: std.prune({
                executable_users: build.template(std.get(block, 'executable_users', null, true)),
                include_deprecated: build.template(std.get(block, 'include_deprecated', null, true)),
                name_regex: build.template(std.get(block, 'name_regex', null, true)),
                owners: build.template(block.owners),
                sort_ascending: build.template(std.get(block, 'sort_ascending', null, true)),
              }),
            },
          },
        },
      },
      executable_users: p.child('executable_users').out,
      id: p.child('id').out,
      ids: p.child('ids').out,
      include_deprecated: p.child('include_deprecated').out,
      name_regex: p.child('name_regex').out,
      owners: p.child('owners').out,
      sort_ascending: p.child('sort_ascending').out,
    },
    api_gateway_api_key(name, block): {
      local p = path(['data', 'aws_api_gateway_api_key', name]),
      _: p.out._ {
        block: {
          data: {
            aws_api_gateway_api_key: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      customer_id: p.child('customer_id').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      value: p.child('value').out,
    },
    api_gateway_authorizer(name, block): {
      local p = path(['data', 'aws_api_gateway_authorizer', name]),
      _: p.out._ {
        block: {
          data: {
            aws_api_gateway_authorizer: {
              [name]: std.prune({
                authorizer_id: build.template(block.authorizer_id),
                rest_api_id: build.template(block.rest_api_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      authorizer_credentials: p.child('authorizer_credentials').out,
      authorizer_id: p.child('authorizer_id').out,
      authorizer_result_ttl_in_seconds: p.child('authorizer_result_ttl_in_seconds').out,
      authorizer_uri: p.child('authorizer_uri').out,
      id: p.child('id').out,
      identity_source: p.child('identity_source').out,
      identity_validation_expression: p.child('identity_validation_expression').out,
      name: p.child('name').out,
      provider_arns: p.child('provider_arns').out,
      rest_api_id: p.child('rest_api_id').out,
      type: p.child('type').out,
    },
    api_gateway_authorizers(name, block): {
      local p = path(['data', 'aws_api_gateway_authorizers', name]),
      _: p.out._ {
        block: {
          data: {
            aws_api_gateway_authorizers: {
              [name]: std.prune({
                rest_api_id: build.template(block.rest_api_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      rest_api_id: p.child('rest_api_id').out,
    },
    api_gateway_domain_name(name, block): {
      local p = path(['data', 'aws_api_gateway_domain_name', name]),
      _: p.out._ {
        block: {
          data: {
            aws_api_gateway_domain_name: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      certificate_arn: p.child('certificate_arn').out,
      certificate_name: p.child('certificate_name').out,
      certificate_upload_date: p.child('certificate_upload_date').out,
      cloudfront_domain_name: p.child('cloudfront_domain_name').out,
      cloudfront_zone_id: p.child('cloudfront_zone_id').out,
      domain_name: p.child('domain_name').out,
      endpoint_configuration: p.child('endpoint_configuration').out,
      id: p.child('id').out,
      regional_certificate_arn: p.child('regional_certificate_arn').out,
      regional_certificate_name: p.child('regional_certificate_name').out,
      regional_domain_name: p.child('regional_domain_name').out,
      regional_zone_id: p.child('regional_zone_id').out,
      security_policy: p.child('security_policy').out,
      tags: p.child('tags').out,
    },
    api_gateway_export(name, block): {
      local p = path(['data', 'aws_api_gateway_export', name]),
      _: p.out._ {
        block: {
          data: {
            aws_api_gateway_export: {
              [name]: std.prune({
                accepts: build.template(std.get(block, 'accepts', null, true)),
                export_type: build.template(block.export_type),
                parameters: build.template(std.get(block, 'parameters', null, true)),
                rest_api_id: build.template(block.rest_api_id),
                stage_name: build.template(block.stage_name),
              }),
            },
          },
        },
      },
      accepts: p.child('accepts').out,
      body: p.child('body').out,
      content_disposition: p.child('content_disposition').out,
      content_type: p.child('content_type').out,
      export_type: p.child('export_type').out,
      id: p.child('id').out,
      parameters: p.child('parameters').out,
      rest_api_id: p.child('rest_api_id').out,
      stage_name: p.child('stage_name').out,
    },
    api_gateway_resource(name, block): {
      local p = path(['data', 'aws_api_gateway_resource', name]),
      _: p.out._ {
        block: {
          data: {
            aws_api_gateway_resource: {
              [name]: std.prune({
                path: build.template(block.path),
                rest_api_id: build.template(block.rest_api_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      parent_id: p.child('parent_id').out,
      path: p.child('path').out,
      path_part: p.child('path_part').out,
      rest_api_id: p.child('rest_api_id').out,
    },
    api_gateway_rest_api(name, block): {
      local p = path(['data', 'aws_api_gateway_rest_api', name]),
      _: p.out._ {
        block: {
          data: {
            aws_api_gateway_rest_api: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      api_key_source: p.child('api_key_source').out,
      arn: p.child('arn').out,
      binary_media_types: p.child('binary_media_types').out,
      description: p.child('description').out,
      endpoint_configuration: p.child('endpoint_configuration').out,
      execution_arn: p.child('execution_arn').out,
      id: p.child('id').out,
      minimum_compression_size: p.child('minimum_compression_size').out,
      name: p.child('name').out,
      policy: p.child('policy').out,
      root_resource_id: p.child('root_resource_id').out,
      tags: p.child('tags').out,
    },
    api_gateway_sdk(name, block): {
      local p = path(['data', 'aws_api_gateway_sdk', name]),
      _: p.out._ {
        block: {
          data: {
            aws_api_gateway_sdk: {
              [name]: std.prune({
                parameters: build.template(std.get(block, 'parameters', null, true)),
                rest_api_id: build.template(block.rest_api_id),
                sdk_type: build.template(block.sdk_type),
                stage_name: build.template(block.stage_name),
              }),
            },
          },
        },
      },
      body: p.child('body').out,
      content_disposition: p.child('content_disposition').out,
      content_type: p.child('content_type').out,
      id: p.child('id').out,
      parameters: p.child('parameters').out,
      rest_api_id: p.child('rest_api_id').out,
      sdk_type: p.child('sdk_type').out,
      stage_name: p.child('stage_name').out,
    },
    api_gateway_vpc_link(name, block): {
      local p = path(['data', 'aws_api_gateway_vpc_link', name]),
      _: p.out._ {
        block: {
          data: {
            aws_api_gateway_vpc_link: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
      status_message: p.child('status_message').out,
      tags: p.child('tags').out,
      target_arns: p.child('target_arns').out,
    },
    apigatewayv2_api(name, block): {
      local p = path(['data', 'aws_apigatewayv2_api', name]),
      _: p.out._ {
        block: {
          data: {
            aws_apigatewayv2_api: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
              }),
            },
          },
        },
      },
      api_endpoint: p.child('api_endpoint').out,
      api_id: p.child('api_id').out,
      api_key_selection_expression: p.child('api_key_selection_expression').out,
      arn: p.child('arn').out,
      cors_configuration: p.child('cors_configuration').out,
      description: p.child('description').out,
      disable_execute_api_endpoint: p.child('disable_execute_api_endpoint').out,
      execution_arn: p.child('execution_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      protocol_type: p.child('protocol_type').out,
      route_selection_expression: p.child('route_selection_expression').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    apigatewayv2_apis(name, block): {
      local p = path(['data', 'aws_apigatewayv2_apis', name]),
      _: p.out._ {
        block: {
          data: {
            aws_apigatewayv2_apis: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                protocol_type: build.template(std.get(block, 'protocol_type', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      name: p.child('name').out,
      protocol_type: p.child('protocol_type').out,
      tags: p.child('tags').out,
    },
    apigatewayv2_export(name, block): {
      local p = path(['data', 'aws_apigatewayv2_export', name]),
      _: p.out._ {
        block: {
          data: {
            aws_apigatewayv2_export: {
              [name]: std.prune({
                api_id: build.template(block.api_id),
                export_version: build.template(std.get(block, 'export_version', null, true)),
                include_extensions: build.template(std.get(block, 'include_extensions', null, true)),
                output_type: build.template(block.output_type),
                specification: build.template(block.specification),
                stage_name: build.template(std.get(block, 'stage_name', null, true)),
              }),
            },
          },
        },
      },
      api_id: p.child('api_id').out,
      body: p.child('body').out,
      export_version: p.child('export_version').out,
      id: p.child('id').out,
      include_extensions: p.child('include_extensions').out,
      output_type: p.child('output_type').out,
      specification: p.child('specification').out,
      stage_name: p.child('stage_name').out,
    },
    apigatewayv2_vpc_link(name, block): {
      local p = path(['data', 'aws_apigatewayv2_vpc_link', name]),
      _: p.out._ {
        block: {
          data: {
            aws_apigatewayv2_vpc_link: {
              [name]: std.prune({
                vpc_link_id: build.template(block.vpc_link_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      security_group_ids: p.child('security_group_ids').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      vpc_link_id: p.child('vpc_link_id').out,
    },
    appconfig_configuration_profile(name, block): {
      local p = path(['data', 'aws_appconfig_configuration_profile', name]),
      _: p.out._ {
        block: {
          data: {
            aws_appconfig_configuration_profile: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                configuration_profile_id: build.template(block.configuration_profile_id),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      arn: p.child('arn').out,
      configuration_profile_id: p.child('configuration_profile_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kms_key_identifier: p.child('kms_key_identifier').out,
      location_uri: p.child('location_uri').out,
      name: p.child('name').out,
      retrieval_role_arn: p.child('retrieval_role_arn').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      validator: p.child('validator').out,
    },
    appconfig_configuration_profiles(name, block): {
      local p = path(['data', 'aws_appconfig_configuration_profiles', name]),
      _: p.out._ {
        block: {
          data: {
            aws_appconfig_configuration_profiles: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      configuration_profile_ids: p.child('configuration_profile_ids').out,
      id: p.child('id').out,
    },
    appconfig_environment(name, block): {
      local p = path(['data', 'aws_appconfig_environment', name]),
      _: p.out._ {
        block: {
          data: {
            aws_appconfig_environment: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
                environment_id: build.template(block.environment_id),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      environment_id: p.child('environment_id').out,
      id: p.child('id').out,
      monitor: p.child('monitor').out,
      name: p.child('name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
    },
    appconfig_environments(name, block): {
      local p = path(['data', 'aws_appconfig_environments', name]),
      _: p.out._ {
        block: {
          data: {
            aws_appconfig_environments: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      environment_ids: p.child('environment_ids').out,
      id: p.child('id').out,
    },
    appintegrations_event_integration(name, block): {
      local p = path(['data', 'aws_appintegrations_event_integration', name]),
      _: p.out._ {
        block: {
          data: {
            aws_appintegrations_event_integration: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      event_filter: p.child('event_filter').out,
      eventbridge_bus: p.child('eventbridge_bus').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    appmesh_gateway_route(name, block): {
      local p = path(['data', 'aws_appmesh_gateway_route', name]),
      _: p.out._ {
        block: {
          data: {
            aws_appmesh_gateway_route: {
              [name]: std.prune({
                mesh_name: build.template(block.mesh_name),
                name: build.template(block.name),
                virtual_gateway_name: build.template(block.virtual_gateway_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_name: p.child('mesh_name').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      spec: p.child('spec').out,
      tags: p.child('tags').out,
      virtual_gateway_name: p.child('virtual_gateway_name').out,
    },
    appmesh_mesh(name, block): {
      local p = path(['data', 'aws_appmesh_mesh', name]),
      _: p.out._ {
        block: {
          data: {
            aws_appmesh_mesh: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      spec: p.child('spec').out,
      tags: p.child('tags').out,
    },
    appmesh_route(name, block): {
      local p = path(['data', 'aws_appmesh_route', name]),
      _: p.out._ {
        block: {
          data: {
            aws_appmesh_route: {
              [name]: std.prune({
                mesh_name: build.template(block.mesh_name),
                name: build.template(block.name),
                virtual_router_name: build.template(block.virtual_router_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_name: p.child('mesh_name').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      spec: p.child('spec').out,
      tags: p.child('tags').out,
      virtual_router_name: p.child('virtual_router_name').out,
    },
    appmesh_virtual_gateway(name, block): {
      local p = path(['data', 'aws_appmesh_virtual_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            aws_appmesh_virtual_gateway: {
              [name]: std.prune({
                mesh_name: build.template(block.mesh_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_name: p.child('mesh_name').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      spec: p.child('spec').out,
      tags: p.child('tags').out,
    },
    appmesh_virtual_node(name, block): {
      local p = path(['data', 'aws_appmesh_virtual_node', name]),
      _: p.out._ {
        block: {
          data: {
            aws_appmesh_virtual_node: {
              [name]: std.prune({
                mesh_name: build.template(block.mesh_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_name: p.child('mesh_name').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      spec: p.child('spec').out,
      tags: p.child('tags').out,
    },
    appmesh_virtual_router(name, block): {
      local p = path(['data', 'aws_appmesh_virtual_router', name]),
      _: p.out._ {
        block: {
          data: {
            aws_appmesh_virtual_router: {
              [name]: std.prune({
                mesh_name: build.template(block.mesh_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_name: p.child('mesh_name').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      spec: p.child('spec').out,
      tags: p.child('tags').out,
    },
    appmesh_virtual_service(name, block): {
      local p = path(['data', 'aws_appmesh_virtual_service', name]),
      _: p.out._ {
        block: {
          data: {
            aws_appmesh_virtual_service: {
              [name]: std.prune({
                mesh_name: build.template(block.mesh_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      mesh_name: p.child('mesh_name').out,
      mesh_owner: p.child('mesh_owner').out,
      name: p.child('name').out,
      resource_owner: p.child('resource_owner').out,
      spec: p.child('spec').out,
      tags: p.child('tags').out,
    },
    apprunner_hosted_zone_id(name, block): {
      local p = path(['data', 'aws_apprunner_hosted_zone_id', name]),
      _: p.out._ {
        block: {
          data: {
            aws_apprunner_hosted_zone_id: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      region: p.child('region').out,
    },
    appstream_image(name, block): {
      local p = path(['data', 'aws_appstream_image', name]),
      _: p.out._ {
        block: {
          data: {
            aws_appstream_image: {
              [name]: std.prune({
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
                name_regex: build.template(std.get(block, 'name_regex', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      applications: p.child('applications').out,
      appstream_agent_version: p.child('appstream_agent_version').out,
      arn: p.child('arn').out,
      base_image_arn: p.child('base_image_arn').out,
      created_time: p.child('created_time').out,
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      image_builder_name: p.child('image_builder_name').out,
      image_builder_supported: p.child('image_builder_supported').out,
      image_permissions: p.child('image_permissions').out,
      most_recent: p.child('most_recent').out,
      name: p.child('name').out,
      name_regex: p.child('name_regex').out,
      platform: p.child('platform').out,
      public_base_image_released_date: p.child('public_base_image_released_date').out,
      state: p.child('state').out,
      state_change_reason: p.child('state_change_reason').out,
      type: p.child('type').out,
    },
    arn(name, block): {
      local p = path(['data', 'aws_arn', name]),
      _: p.out._ {
        block: {
          data: {
            aws_arn: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      account: p.child('account').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      partition: p.child('partition').out,
      region: p.child('region').out,
      resource: p.child('resource').out,
      service: p.child('service').out,
    },
    athena_named_query(name, block): {
      local p = path(['data', 'aws_athena_named_query', name]),
      _: p.out._ {
        block: {
          data: {
            aws_athena_named_query: {
              [name]: std.prune({
                name: build.template(block.name),
                workgroup: build.template(std.get(block, 'workgroup', null, true)),
              }),
            },
          },
        },
      },
      database: p.child('database').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      querystring: p.child('querystring').out,
      workgroup: p.child('workgroup').out,
    },
    auditmanager_control(name, block): {
      local p = path(['data', 'aws_auditmanager_control', name]),
      _: p.out._ {
        block: {
          data: {
            aws_auditmanager_control: {
              [name]: std.prune({
                name: build.template(block.name),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      action_plan_instructions: p.child('action_plan_instructions').out,
      action_plan_title: p.child('action_plan_title').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      testing_information: p.child('testing_information').out,
      type: p.child('type').out,
    },
    auditmanager_framework(name, block): {
      local p = path(['data', 'aws_auditmanager_framework', name]),
      _: p.out._ {
        block: {
          data: {
            aws_auditmanager_framework: {
              [name]: std.prune({
                framework_type: build.template(block.framework_type),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      compliance_type: p.child('compliance_type').out,
      description: p.child('description').out,
      framework_type: p.child('framework_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    autoscaling_group(name, block): {
      local p = path(['data', 'aws_autoscaling_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_autoscaling_group: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zones: p.child('availability_zones').out,
      default_cooldown: p.child('default_cooldown').out,
      desired_capacity: p.child('desired_capacity').out,
      desired_capacity_type: p.child('desired_capacity_type').out,
      enabled_metrics: p.child('enabled_metrics').out,
      health_check_grace_period: p.child('health_check_grace_period').out,
      health_check_type: p.child('health_check_type').out,
      id: p.child('id').out,
      instance_maintenance_policy: p.child('instance_maintenance_policy').out,
      launch_configuration: p.child('launch_configuration').out,
      launch_template: p.child('launch_template').out,
      load_balancers: p.child('load_balancers').out,
      max_instance_lifetime: p.child('max_instance_lifetime').out,
      max_size: p.child('max_size').out,
      min_size: p.child('min_size').out,
      mixed_instances_policy: p.child('mixed_instances_policy').out,
      name: p.child('name').out,
      new_instances_protected_from_scale_in: p.child('new_instances_protected_from_scale_in').out,
      placement_group: p.child('placement_group').out,
      predicted_capacity: p.child('predicted_capacity').out,
      service_linked_role_arn: p.child('service_linked_role_arn').out,
      status: p.child('status').out,
      suspended_processes: p.child('suspended_processes').out,
      tag: p.child('tag').out,
      target_group_arns: p.child('target_group_arns').out,
      termination_policies: p.child('termination_policies').out,
      traffic_source: p.child('traffic_source').out,
      vpc_zone_identifier: p.child('vpc_zone_identifier').out,
      warm_pool: p.child('warm_pool').out,
      warm_pool_size: p.child('warm_pool_size').out,
    },
    autoscaling_groups(name, block): {
      local p = path(['data', 'aws_autoscaling_groups', name]),
      _: p.out._ {
        block: {
          data: {
            aws_autoscaling_groups: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      names: p.child('names').out,
    },
    availability_zone(name, block): {
      local p = path(['data', 'aws_availability_zone', name]),
      _: p.out._ {
        block: {
          data: {
            aws_availability_zone: {
              [name]: std.prune({
                all_availability_zones: build.template(std.get(block, 'all_availability_zones', null, true)),
              }),
            },
          },
        },
      },
      all_availability_zones: p.child('all_availability_zones').out,
      group_name: p.child('group_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_suffix: p.child('name_suffix').out,
      network_border_group: p.child('network_border_group').out,
      opt_in_status: p.child('opt_in_status').out,
      parent_zone_id: p.child('parent_zone_id').out,
      parent_zone_name: p.child('parent_zone_name').out,
      region: p.child('region').out,
      state: p.child('state').out,
      zone_id: p.child('zone_id').out,
      zone_type: p.child('zone_type').out,
    },
    availability_zones(name, block): {
      local p = path(['data', 'aws_availability_zones', name]),
      _: p.out._ {
        block: {
          data: {
            aws_availability_zones: {
              [name]: std.prune({
                all_availability_zones: build.template(std.get(block, 'all_availability_zones', null, true)),
                exclude_names: build.template(std.get(block, 'exclude_names', null, true)),
                exclude_zone_ids: build.template(std.get(block, 'exclude_zone_ids', null, true)),
                state: build.template(std.get(block, 'state', null, true)),
              }),
            },
          },
        },
      },
      all_availability_zones: p.child('all_availability_zones').out,
      exclude_names: p.child('exclude_names').out,
      exclude_zone_ids: p.child('exclude_zone_ids').out,
      group_names: p.child('group_names').out,
      id: p.child('id').out,
      names: p.child('names').out,
      state: p.child('state').out,
      zone_ids: p.child('zone_ids').out,
    },
    backup_framework(name, block): {
      local p = path(['data', 'aws_backup_framework', name]),
      _: p.out._ {
        block: {
          data: {
            aws_backup_framework: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      control: p.child('control').out,
      creation_time: p.child('creation_time').out,
      deployment_status: p.child('deployment_status').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
    },
    backup_plan(name, block): {
      local p = path(['data', 'aws_backup_plan', name]),
      _: p.out._ {
        block: {
          data: {
            aws_backup_plan: {
              [name]: std.prune({
                plan_id: build.template(block.plan_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      plan_id: p.child('plan_id').out,
      rule: p.child('rule').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    backup_report_plan(name, block): {
      local p = path(['data', 'aws_backup_report_plan', name]),
      _: p.out._ {
        block: {
          data: {
            aws_backup_report_plan: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      deployment_status: p.child('deployment_status').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      report_delivery_channel: p.child('report_delivery_channel').out,
      report_setting: p.child('report_setting').out,
      tags: p.child('tags').out,
    },
    backup_selection(name, block): {
      local p = path(['data', 'aws_backup_selection', name]),
      _: p.out._ {
        block: {
          data: {
            aws_backup_selection: {
              [name]: std.prune({
                plan_id: build.template(block.plan_id),
                selection_id: build.template(block.selection_id),
              }),
            },
          },
        },
      },
      iam_role_arn: p.child('iam_role_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      plan_id: p.child('plan_id').out,
      resources: p.child('resources').out,
      selection_id: p.child('selection_id').out,
    },
    backup_vault(name, block): {
      local p = path(['data', 'aws_backup_vault', name]),
      _: p.out._ {
        block: {
          data: {
            aws_backup_vault: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      name: p.child('name').out,
      recovery_points: p.child('recovery_points').out,
      tags: p.child('tags').out,
    },
    batch_compute_environment(name, block): {
      local p = path(['data', 'aws_batch_compute_environment', name]),
      _: p.out._ {
        block: {
          data: {
            aws_batch_compute_environment: {
              [name]: std.prune({
                compute_environment_name: build.template(block.compute_environment_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      compute_environment_name: p.child('compute_environment_name').out,
      ecs_cluster_arn: p.child('ecs_cluster_arn').out,
      id: p.child('id').out,
      service_role: p.child('service_role').out,
      state: p.child('state').out,
      status: p.child('status').out,
      status_reason: p.child('status_reason').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      update_policy: p.child('update_policy').out,
    },
    batch_job_definition(name, block): {
      local p = path(['data', 'aws_batch_job_definition', name]),
      _: p.out._ {
        block: {
          data: {
            aws_batch_job_definition: {
              [name]: std.prune({
                arn: build.template(std.get(block, 'arn', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                revision: build.template(std.get(block, 'revision', null, true)),
                status: build.template(std.get(block, 'status', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      arn_prefix: p.child('arn_prefix').out,
      container_orchestration_type: p.child('container_orchestration_type').out,
      eks_properties: p.child('eks_properties').out,
      id: p.child('id').out,
      name: p.child('name').out,
      node_properties: p.child('node_properties').out,
      retry_strategy: p.child('retry_strategy').out,
      revision: p.child('revision').out,
      scheduling_priority: p.child('scheduling_priority').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      timeout: p.child('timeout').out,
      type: p.child('type').out,
    },
    batch_job_queue(name, block): {
      local p = path(['data', 'aws_batch_job_queue', name]),
      _: p.out._ {
        block: {
          data: {
            aws_batch_job_queue: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      compute_environment_order: p.child('compute_environment_order').out,
      id: p.child('id').out,
      job_state_time_limit_action: p.child('job_state_time_limit_action').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      scheduling_policy_arn: p.child('scheduling_policy_arn').out,
      state: p.child('state').out,
      status: p.child('status').out,
      status_reason: p.child('status_reason').out,
      tags: p.child('tags').out,
    },
    batch_scheduling_policy(name, block): {
      local p = path(['data', 'aws_batch_scheduling_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_batch_scheduling_policy: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      fair_share_policy: p.child('fair_share_policy').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    bedrock_custom_model(name, block): {
      local p = path(['data', 'aws_bedrock_custom_model', name]),
      _: p.out._ {
        block: {
          data: {
            aws_bedrock_custom_model: {
              [name]: std.prune({
                model_id: build.template(block.model_id),
              }),
            },
          },
        },
      },
      base_model_arn: p.child('base_model_arn').out,
      creation_time: p.child('creation_time').out,
      hyperparameters: p.child('hyperparameters').out,
      id: p.child('id').out,
      job_arn: p.child('job_arn').out,
      job_name: p.child('job_name').out,
      job_tags: p.child('job_tags').out,
      model_arn: p.child('model_arn').out,
      model_id: p.child('model_id').out,
      model_kms_key_arn: p.child('model_kms_key_arn').out,
      model_name: p.child('model_name').out,
      model_tags: p.child('model_tags').out,
      output_data_config: p.child('output_data_config').out,
      training_data_config: p.child('training_data_config').out,
      training_metrics: p.child('training_metrics').out,
      validation_data_config: p.child('validation_data_config').out,
      validation_metrics: p.child('validation_metrics').out,
    },
    bedrock_custom_models(name, block): {
      local p = path(['data', 'aws_bedrock_custom_models', name]),
      _: p.out._ {
        block: {
          data: {
            aws_bedrock_custom_models: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      model_summaries: p.child('model_summaries').out,
    },
    bedrock_foundation_model(name, block): {
      local p = path(['data', 'aws_bedrock_foundation_model', name]),
      _: p.out._ {
        block: {
          data: {
            aws_bedrock_foundation_model: {
              [name]: std.prune({
                model_id: build.template(block.model_id),
              }),
            },
          },
        },
      },
      customizations_supported: p.child('customizations_supported').out,
      id: p.child('id').out,
      inference_types_supported: p.child('inference_types_supported').out,
      input_modalities: p.child('input_modalities').out,
      model_arn: p.child('model_arn').out,
      model_id: p.child('model_id').out,
      model_name: p.child('model_name').out,
      output_modalities: p.child('output_modalities').out,
      provider_name: p.child('provider_name').out,
      response_streaming_supported: p.child('response_streaming_supported').out,
    },
    bedrock_foundation_models(name, block): {
      local p = path(['data', 'aws_bedrock_foundation_models', name]),
      _: p.out._ {
        block: {
          data: {
            aws_bedrock_foundation_models: {
              [name]: std.prune({
                by_customization_type: build.template(std.get(block, 'by_customization_type', null, true)),
                by_inference_type: build.template(std.get(block, 'by_inference_type', null, true)),
                by_output_modality: build.template(std.get(block, 'by_output_modality', null, true)),
                by_provider: build.template(std.get(block, 'by_provider', null, true)),
              }),
            },
          },
        },
      },
      by_customization_type: p.child('by_customization_type').out,
      by_inference_type: p.child('by_inference_type').out,
      by_output_modality: p.child('by_output_modality').out,
      by_provider: p.child('by_provider').out,
      id: p.child('id').out,
      model_summaries: p.child('model_summaries').out,
    },
    bedrock_inference_profile(name, block): {
      local p = path(['data', 'aws_bedrock_inference_profile', name]),
      _: p.out._ {
        block: {
          data: {
            aws_bedrock_inference_profile: {
              [name]: std.prune({
                inference_profile_id: build.template(block.inference_profile_id),
              }),
            },
          },
        },
      },
      created_at: p.child('created_at').out,
      description: p.child('description').out,
      inference_profile_arn: p.child('inference_profile_arn').out,
      inference_profile_id: p.child('inference_profile_id').out,
      inference_profile_name: p.child('inference_profile_name').out,
      models: p.child('models').out,
      status: p.child('status').out,
      type: p.child('type').out,
      updated_at: p.child('updated_at').out,
    },
    bedrock_inference_profiles(name, block): {
      local p = path(['data', 'aws_bedrock_inference_profiles', name]),
      _: p.out._ {
        block: {
          data: {
            aws_bedrock_inference_profiles: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      inference_profile_summaries: p.child('inference_profile_summaries').out,
    },
    bedrockagent_agent_versions(name, block): {
      local p = path(['data', 'aws_bedrockagent_agent_versions', name]),
      _: p.out._ {
        block: {
          data: {
            aws_bedrockagent_agent_versions: {
              [name]: std.prune({
                agent_id: build.template(block.agent_id),
              }),
            },
          },
        },
      },
      agent_id: p.child('agent_id').out,
    },
    billing_service_account(name, block): {
      local p = path(['data', 'aws_billing_service_account', name]),
      _: p.out._ {
        block: {
          data: {
            aws_billing_service_account: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
    },
    budgets_budget(name, block): {
      local p = path(['data', 'aws_budgets_budget', name]),
      _: p.out._ {
        block: {
          data: {
            aws_budgets_budget: {
              [name]: std.prune({
                name: build.template(block.name),
                name_prefix: build.template(std.get(block, 'name_prefix', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      arn: p.child('arn').out,
      auto_adjust_data: p.child('auto_adjust_data').out,
      budget_exceeded: p.child('budget_exceeded').out,
      budget_limit: p.child('budget_limit').out,
      budget_type: p.child('budget_type').out,
      calculated_spend: p.child('calculated_spend').out,
      cost_filter: p.child('cost_filter').out,
      cost_types: p.child('cost_types').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      notification: p.child('notification').out,
      planned_limit: p.child('planned_limit').out,
      tags: p.child('tags').out,
      time_period_end: p.child('time_period_end').out,
      time_period_start: p.child('time_period_start').out,
      time_unit: p.child('time_unit').out,
    },
    caller_identity(name, block): {
      local p = path(['data', 'aws_caller_identity', name]),
      _: p.out._ {
        block: {
          data: {
            aws_caller_identity: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      arn: p.child('arn').out,
      id: p.child('id').out,
      user_id: p.child('user_id').out,
    },
    canonical_user_id(name, block): {
      local p = path(['data', 'aws_canonical_user_id', name]),
      _: p.out._ {
        block: {
          data: {
            aws_canonical_user_id: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      display_name: p.child('display_name').out,
      id: p.child('id').out,
    },
    ce_cost_category(name, block): {
      local p = path(['data', 'aws_ce_cost_category', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ce_cost_category: {
              [name]: std.prune({
                cost_category_arn: build.template(block.cost_category_arn),
              }),
            },
          },
        },
      },
      cost_category_arn: p.child('cost_category_arn').out,
      default_value: p.child('default_value').out,
      effective_end: p.child('effective_end').out,
      effective_start: p.child('effective_start').out,
      id: p.child('id').out,
      name: p.child('name').out,
      rule: p.child('rule').out,
      rule_version: p.child('rule_version').out,
      split_charge_rule: p.child('split_charge_rule').out,
      tags: p.child('tags').out,
    },
    ce_tags(name, block): {
      local p = path(['data', 'aws_ce_tags', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ce_tags: {
              [name]: std.prune({
                search_string: build.template(std.get(block, 'search_string', null, true)),
                tag_key: build.template(std.get(block, 'tag_key', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      search_string: p.child('search_string').out,
      tag_key: p.child('tag_key').out,
      tags: p.child('tags').out,
    },
    chatbot_slack_workspace(name, block): {
      local p = path(['data', 'aws_chatbot_slack_workspace', name]),
      _: p.out._ {
        block: {
          data: {
            aws_chatbot_slack_workspace: {
              [name]: std.prune({
                slack_team_name: build.template(block.slack_team_name),
              }),
            },
          },
        },
      },
      slack_team_id: p.child('slack_team_id').out,
      slack_team_name: p.child('slack_team_name').out,
    },
    cloudcontrolapi_resource(name, block): {
      local p = path(['data', 'aws_cloudcontrolapi_resource', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudcontrolapi_resource: {
              [name]: std.prune({
                identifier: build.template(block.identifier),
                role_arn: build.template(std.get(block, 'role_arn', null, true)),
                type_name: build.template(block.type_name),
                type_version_id: build.template(std.get(block, 'type_version_id', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      identifier: p.child('identifier').out,
      properties: p.child('properties').out,
      role_arn: p.child('role_arn').out,
      type_name: p.child('type_name').out,
      type_version_id: p.child('type_version_id').out,
    },
    cloudformation_export(name, block): {
      local p = path(['data', 'aws_cloudformation_export', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudformation_export: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      exporting_stack_id: p.child('exporting_stack_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      value: p.child('value').out,
    },
    cloudformation_stack(name, block): {
      local p = path(['data', 'aws_cloudformation_stack', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudformation_stack: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      capabilities: p.child('capabilities').out,
      description: p.child('description').out,
      disable_rollback: p.child('disable_rollback').out,
      iam_role_arn: p.child('iam_role_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      notification_arns: p.child('notification_arns').out,
      outputs: p.child('outputs').out,
      parameters: p.child('parameters').out,
      tags: p.child('tags').out,
      template_body: p.child('template_body').out,
      timeout_in_minutes: p.child('timeout_in_minutes').out,
    },
    cloudformation_type(name, block): {
      local p = path(['data', 'aws_cloudformation_type', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudformation_type: {
              [name]: std.prune({
                version_id: build.template(std.get(block, 'version_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_version_id: p.child('default_version_id').out,
      deprecated_status: p.child('deprecated_status').out,
      description: p.child('description').out,
      documentation_url: p.child('documentation_url').out,
      execution_role_arn: p.child('execution_role_arn').out,
      id: p.child('id').out,
      is_default_version: p.child('is_default_version').out,
      logging_config: p.child('logging_config').out,
      provisioning_type: p.child('provisioning_type').out,
      schema: p.child('schema').out,
      source_url: p.child('source_url').out,
      type: p.child('type').out,
      type_arn: p.child('type_arn').out,
      type_name: p.child('type_name').out,
      version_id: p.child('version_id').out,
      visibility: p.child('visibility').out,
    },
    cloudfront_cache_policy(name, block): {
      local p = path(['data', 'aws_cloudfront_cache_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudfront_cache_policy: {
              [name]: std.prune({
                id: build.template(std.get(block, 'id', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      comment: p.child('comment').out,
      default_ttl: p.child('default_ttl').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      max_ttl: p.child('max_ttl').out,
      min_ttl: p.child('min_ttl').out,
      name: p.child('name').out,
      parameters_in_cache_key_and_forwarded_to_origin: p.child('parameters_in_cache_key_and_forwarded_to_origin').out,
    },
    cloudfront_distribution(name, block): {
      local p = path(['data', 'aws_cloudfront_distribution', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudfront_distribution: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      aliases: p.child('aliases').out,
      arn: p.child('arn').out,
      domain_name: p.child('domain_name').out,
      enabled: p.child('enabled').out,
      etag: p.child('etag').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      id: p.child('id').out,
      in_progress_validation_batches: p.child('in_progress_validation_batches').out,
      last_modified_time: p.child('last_modified_time').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      web_acl_id: p.child('web_acl_id').out,
    },
    cloudfront_function(name, block): {
      local p = path(['data', 'aws_cloudfront_function', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudfront_function: {
              [name]: std.prune({
                name: build.template(block.name),
                stage: build.template(block.stage),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      code: p.child('code').out,
      comment: p.child('comment').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      key_value_store_associations: p.child('key_value_store_associations').out,
      last_modified_time: p.child('last_modified_time').out,
      name: p.child('name').out,
      runtime: p.child('runtime').out,
      stage: p.child('stage').out,
      status: p.child('status').out,
    },
    cloudfront_log_delivery_canonical_user_id(name, block): {
      local p = path(['data', 'aws_cloudfront_log_delivery_canonical_user_id', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudfront_log_delivery_canonical_user_id: {
              [name]: std.prune({
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      region: p.child('region').out,
    },
    cloudfront_origin_access_control(name, block): {
      local p = path(['data', 'aws_cloudfront_origin_access_control', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudfront_origin_access_control: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      name: p.child('name').out,
      origin_access_control_origin_type: p.child('origin_access_control_origin_type').out,
      signing_behavior: p.child('signing_behavior').out,
      signing_protocol: p.child('signing_protocol').out,
    },
    cloudfront_origin_access_identities(name, block): {
      local p = path(['data', 'aws_cloudfront_origin_access_identities', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudfront_origin_access_identities: {
              [name]: std.prune({
                comments: build.template(std.get(block, 'comments', null, true)),
              }),
            },
          },
        },
      },
      comments: p.child('comments').out,
      iam_arns: p.child('iam_arns').out,
      id: p.child('id').out,
      ids: p.child('ids').out,
      s3_canonical_user_ids: p.child('s3_canonical_user_ids').out,
    },
    cloudfront_origin_access_identity(name, block): {
      local p = path(['data', 'aws_cloudfront_origin_access_identity', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudfront_origin_access_identity: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      caller_reference: p.child('caller_reference').out,
      cloudfront_access_identity_path: p.child('cloudfront_access_identity_path').out,
      comment: p.child('comment').out,
      etag: p.child('etag').out,
      iam_arn: p.child('iam_arn').out,
      id: p.child('id').out,
      s3_canonical_user_id: p.child('s3_canonical_user_id').out,
    },
    cloudfront_origin_request_policy(name, block): {
      local p = path(['data', 'aws_cloudfront_origin_request_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudfront_origin_request_policy: {
              [name]: std.prune({
                id: build.template(std.get(block, 'id', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      comment: p.child('comment').out,
      cookies_config: p.child('cookies_config').out,
      etag: p.child('etag').out,
      headers_config: p.child('headers_config').out,
      id: p.child('id').out,
      name: p.child('name').out,
      query_strings_config: p.child('query_strings_config').out,
    },
    cloudfront_realtime_log_config(name, block): {
      local p = path(['data', 'aws_cloudfront_realtime_log_config', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudfront_realtime_log_config: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      endpoint: p.child('endpoint').out,
      fields: p.child('fields').out,
      id: p.child('id').out,
      name: p.child('name').out,
      sampling_rate: p.child('sampling_rate').out,
    },
    cloudfront_response_headers_policy(name, block): {
      local p = path(['data', 'aws_cloudfront_response_headers_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudfront_response_headers_policy: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      comment: p.child('comment').out,
      cors_config: p.child('cors_config').out,
      custom_headers_config: p.child('custom_headers_config').out,
      etag: p.child('etag').out,
      id: p.child('id').out,
      name: p.child('name').out,
      remove_headers_config: p.child('remove_headers_config').out,
      security_headers_config: p.child('security_headers_config').out,
      server_timing_headers_config: p.child('server_timing_headers_config').out,
    },
    cloudhsm_v2_cluster(name, block): {
      local p = path(['data', 'aws_cloudhsm_v2_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudhsm_v2_cluster: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
              }),
            },
          },
        },
      },
      cluster_certificates: p.child('cluster_certificates').out,
      cluster_id: p.child('cluster_id').out,
      cluster_state: p.child('cluster_state').out,
      id: p.child('id').out,
      security_group_id: p.child('security_group_id').out,
      subnet_ids: p.child('subnet_ids').out,
      vpc_id: p.child('vpc_id').out,
    },
    cloudtrail_service_account(name, block): {
      local p = path(['data', 'aws_cloudtrail_service_account', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudtrail_service_account: {
              [name]: std.prune({
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      region: p.child('region').out,
    },
    cloudwatch_event_bus(name, block): {
      local p = path(['data', 'aws_cloudwatch_event_bus', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudwatch_event_bus: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      kms_key_identifier: p.child('kms_key_identifier').out,
      name: p.child('name').out,
    },
    cloudwatch_event_connection(name, block): {
      local p = path(['data', 'aws_cloudwatch_event_connection', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudwatch_event_connection: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      authorization_type: p.child('authorization_type').out,
      id: p.child('id').out,
      name: p.child('name').out,
      secret_arn: p.child('secret_arn').out,
    },
    cloudwatch_event_source(name, block): {
      local p = path(['data', 'aws_cloudwatch_event_source', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudwatch_event_source: {
              [name]: std.prune({
                name_prefix: build.template(std.get(block, 'name_prefix', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_by: p.child('created_by').out,
      id: p.child('id').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      state: p.child('state').out,
    },
    cloudwatch_log_data_protection_policy_document(name, block): {
      local p = path(['data', 'aws_cloudwatch_log_data_protection_policy_document', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudwatch_log_data_protection_policy_document: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      json: p.child('json').out,
      name: p.child('name').out,
      version: p.child('version').out,
    },
    cloudwatch_log_group(name, block): {
      local p = path(['data', 'aws_cloudwatch_log_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudwatch_log_group: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      log_group_class: p.child('log_group_class').out,
      name: p.child('name').out,
      retention_in_days: p.child('retention_in_days').out,
      tags: p.child('tags').out,
    },
    cloudwatch_log_groups(name, block): {
      local p = path(['data', 'aws_cloudwatch_log_groups', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cloudwatch_log_groups: {
              [name]: std.prune({
                log_group_name_prefix: build.template(std.get(block, 'log_group_name_prefix', null, true)),
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      log_group_name_prefix: p.child('log_group_name_prefix').out,
      log_group_names: p.child('log_group_names').out,
    },
    codeartifact_authorization_token(name, block): {
      local p = path(['data', 'aws_codeartifact_authorization_token', name]),
      _: p.out._ {
        block: {
          data: {
            aws_codeartifact_authorization_token: {
              [name]: std.prune({
                domain: build.template(block.domain),
                duration_seconds: build.template(std.get(block, 'duration_seconds', null, true)),
              }),
            },
          },
        },
      },
      authorization_token: p.child('authorization_token').out,
      domain: p.child('domain').out,
      domain_owner: p.child('domain_owner').out,
      duration_seconds: p.child('duration_seconds').out,
      expiration: p.child('expiration').out,
      id: p.child('id').out,
    },
    codeartifact_repository_endpoint(name, block): {
      local p = path(['data', 'aws_codeartifact_repository_endpoint', name]),
      _: p.out._ {
        block: {
          data: {
            aws_codeartifact_repository_endpoint: {
              [name]: std.prune({
                domain: build.template(block.domain),
                format: build.template(block.format),
                repository: build.template(block.repository),
              }),
            },
          },
        },
      },
      domain: p.child('domain').out,
      domain_owner: p.child('domain_owner').out,
      format: p.child('format').out,
      id: p.child('id').out,
      repository: p.child('repository').out,
      repository_endpoint: p.child('repository_endpoint').out,
    },
    codebuild_fleet(name, block): {
      local p = path(['data', 'aws_codebuild_fleet', name]),
      _: p.out._ {
        block: {
          data: {
            aws_codebuild_fleet: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      base_capacity: p.child('base_capacity').out,
      compute_type: p.child('compute_type').out,
      created: p.child('created').out,
      environment_type: p.child('environment_type').out,
      fleet_service_role: p.child('fleet_service_role').out,
      id: p.child('id').out,
      image_id: p.child('image_id').out,
      last_modified: p.child('last_modified').out,
      name: p.child('name').out,
      overflow_behavior: p.child('overflow_behavior').out,
      scaling_configuration: p.child('scaling_configuration').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      vpc_config: p.child('vpc_config').out,
    },
    codecatalyst_dev_environment(name, block): {
      local p = path(['data', 'aws_codecatalyst_dev_environment', name]),
      _: p.out._ {
        block: {
          data: {
            aws_codecatalyst_dev_environment: {
              [name]: std.prune({
                alias: build.template(std.get(block, 'alias', null, true)),
                creator_id: build.template(std.get(block, 'creator_id', null, true)),
                env_id: build.template(block.env_id),
                project_name: build.template(block.project_name),
                space_name: build.template(block.space_name),
              }),
            },
          },
        },
      },
      alias: p.child('alias').out,
      creator_id: p.child('creator_id').out,
      env_id: p.child('env_id').out,
      id: p.child('id').out,
      ides: p.child('ides').out,
      inactivity_timeout_minutes: p.child('inactivity_timeout_minutes').out,
      instance_type: p.child('instance_type').out,
      last_updated_time: p.child('last_updated_time').out,
      persistent_storage: p.child('persistent_storage').out,
      project_name: p.child('project_name').out,
      space_name: p.child('space_name').out,
      status: p.child('status').out,
      status_reason: p.child('status_reason').out,
      tags: p.child('tags').out,
    },
    codecommit_approval_rule_template(name, block): {
      local p = path(['data', 'aws_codecommit_approval_rule_template', name]),
      _: p.out._ {
        block: {
          data: {
            aws_codecommit_approval_rule_template: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      approval_rule_template_id: p.child('approval_rule_template_id').out,
      content: p.child('content').out,
      creation_date: p.child('creation_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_modified_date: p.child('last_modified_date').out,
      last_modified_user: p.child('last_modified_user').out,
      name: p.child('name').out,
      rule_content_sha256: p.child('rule_content_sha256').out,
    },
    codecommit_repository(name, block): {
      local p = path(['data', 'aws_codecommit_repository', name]),
      _: p.out._ {
        block: {
          data: {
            aws_codecommit_repository: {
              [name]: std.prune({
                repository_name: build.template(block.repository_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      clone_url_http: p.child('clone_url_http').out,
      clone_url_ssh: p.child('clone_url_ssh').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      repository_id: p.child('repository_id').out,
      repository_name: p.child('repository_name').out,
    },
    codeguruprofiler_profiling_group(name, block): {
      local p = path(['data', 'aws_codeguruprofiler_profiling_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_codeguruprofiler_profiling_group: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      agent_orchestration_config: p.child('agent_orchestration_config').out,
      arn: p.child('arn').out,
      compute_platform: p.child('compute_platform').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      name: p.child('name').out,
      profiling_status: p.child('profiling_status').out,
      tags: p.child('tags').out,
      updated_at: p.child('updated_at').out,
    },
    codestarconnections_connection(name, block): {
      local p = path(['data', 'aws_codestarconnections_connection', name]),
      _: p.out._ {
        block: {
          data: {
            aws_codestarconnections_connection: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      connection_status: p.child('connection_status').out,
      host_arn: p.child('host_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      provider_type: p.child('provider_type').out,
      tags: p.child('tags').out,
    },
    cognito_identity_pool(name, block): {
      local p = path(['data', 'aws_cognito_identity_pool', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cognito_identity_pool: {
              [name]: std.prune({
                identity_pool_name: build.template(block.identity_pool_name),
              }),
            },
          },
        },
      },
      allow_classic_flow: p.child('allow_classic_flow').out,
      allow_unauthenticated_identities: p.child('allow_unauthenticated_identities').out,
      arn: p.child('arn').out,
      cognito_identity_providers: p.child('cognito_identity_providers').out,
      developer_provider_name: p.child('developer_provider_name').out,
      id: p.child('id').out,
      identity_pool_name: p.child('identity_pool_name').out,
      openid_connect_provider_arns: p.child('openid_connect_provider_arns').out,
      saml_provider_arns: p.child('saml_provider_arns').out,
      supported_login_providers: p.child('supported_login_providers').out,
      tags: p.child('tags').out,
    },
    cognito_user_group(name, block): {
      local p = path(['data', 'aws_cognito_user_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cognito_user_group: {
              [name]: std.prune({
                name: build.template(block.name),
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      precedence: p.child('precedence').out,
      role_arn: p.child('role_arn').out,
      user_pool_id: p.child('user_pool_id').out,
    },
    cognito_user_groups(name, block): {
      local p = path(['data', 'aws_cognito_user_groups', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cognito_user_groups: {
              [name]: std.prune({
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      groups: p.child('groups').out,
      id: p.child('id').out,
      user_pool_id: p.child('user_pool_id').out,
    },
    cognito_user_pool(name, block): {
      local p = path(['data', 'aws_cognito_user_pool', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cognito_user_pool: {
              [name]: std.prune({
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      account_recovery_setting: p.child('account_recovery_setting').out,
      admin_create_user_config: p.child('admin_create_user_config').out,
      arn: p.child('arn').out,
      auto_verified_attributes: p.child('auto_verified_attributes').out,
      creation_date: p.child('creation_date').out,
      custom_domain: p.child('custom_domain').out,
      deletion_protection: p.child('deletion_protection').out,
      device_configuration: p.child('device_configuration').out,
      domain: p.child('domain').out,
      email_configuration: p.child('email_configuration').out,
      estimated_number_of_users: p.child('estimated_number_of_users').out,
      id: p.child('id').out,
      lambda_config: p.child('lambda_config').out,
      last_modified_date: p.child('last_modified_date').out,
      mfa_configuration: p.child('mfa_configuration').out,
      name: p.child('name').out,
      schema_attributes: p.child('schema_attributes').out,
      sms_authentication_message: p.child('sms_authentication_message').out,
      sms_configuration_failure: p.child('sms_configuration_failure').out,
      sms_verification_message: p.child('sms_verification_message').out,
      tags: p.child('tags').out,
      user_pool_id: p.child('user_pool_id').out,
      user_pool_tags: p.child('user_pool_tags').out,
      username_attributes: p.child('username_attributes').out,
    },
    cognito_user_pool_client(name, block): {
      local p = path(['data', 'aws_cognito_user_pool_client', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cognito_user_pool_client: {
              [name]: std.prune({
                client_id: build.template(block.client_id),
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      access_token_validity: p.child('access_token_validity').out,
      allowed_oauth_flows: p.child('allowed_oauth_flows').out,
      allowed_oauth_flows_user_pool_client: p.child('allowed_oauth_flows_user_pool_client').out,
      allowed_oauth_scopes: p.child('allowed_oauth_scopes').out,
      analytics_configuration: p.child('analytics_configuration').out,
      callback_urls: p.child('callback_urls').out,
      client_id: p.child('client_id').out,
      client_secret: p.child('client_secret').out,
      default_redirect_uri: p.child('default_redirect_uri').out,
      enable_propagate_additional_user_context_data: p.child('enable_propagate_additional_user_context_data').out,
      enable_token_revocation: p.child('enable_token_revocation').out,
      explicit_auth_flows: p.child('explicit_auth_flows').out,
      generate_secret: p.child('generate_secret').out,
      id: p.child('id').out,
      id_token_validity: p.child('id_token_validity').out,
      logout_urls: p.child('logout_urls').out,
      name: p.child('name').out,
      prevent_user_existence_errors: p.child('prevent_user_existence_errors').out,
      read_attributes: p.child('read_attributes').out,
      refresh_token_validity: p.child('refresh_token_validity').out,
      supported_identity_providers: p.child('supported_identity_providers').out,
      token_validity_units: p.child('token_validity_units').out,
      user_pool_id: p.child('user_pool_id').out,
      write_attributes: p.child('write_attributes').out,
    },
    cognito_user_pool_clients(name, block): {
      local p = path(['data', 'aws_cognito_user_pool_clients', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cognito_user_pool_clients: {
              [name]: std.prune({
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      client_ids: p.child('client_ids').out,
      client_names: p.child('client_names').out,
      id: p.child('id').out,
      user_pool_id: p.child('user_pool_id').out,
    },
    cognito_user_pool_signing_certificate(name, block): {
      local p = path(['data', 'aws_cognito_user_pool_signing_certificate', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cognito_user_pool_signing_certificate: {
              [name]: std.prune({
                user_pool_id: build.template(block.user_pool_id),
              }),
            },
          },
        },
      },
      certificate: p.child('certificate').out,
      id: p.child('id').out,
      user_pool_id: p.child('user_pool_id').out,
    },
    cognito_user_pools(name, block): {
      local p = path(['data', 'aws_cognito_user_pools', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cognito_user_pools: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      ids: p.child('ids').out,
      name: p.child('name').out,
    },
    connect_bot_association(name, block): {
      local p = path(['data', 'aws_connect_bot_association', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_bot_association: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
    },
    connect_contact_flow(name, block): {
      local p = path(['data', 'aws_connect_contact_flow', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_contact_flow: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      contact_flow_id: p.child('contact_flow_id').out,
      content: p.child('content').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
    },
    connect_contact_flow_module(name, block): {
      local p = path(['data', 'aws_connect_contact_flow_module', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_contact_flow_module: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      contact_flow_module_id: p.child('contact_flow_module_id').out,
      content: p.child('content').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      state: p.child('state').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
    },
    connect_hours_of_operation(name, block): {
      local p = path(['data', 'aws_connect_hours_of_operation', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_hours_of_operation: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      config: p.child('config').out,
      description: p.child('description').out,
      hours_of_operation_id: p.child('hours_of_operation_id').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      time_zone: p.child('time_zone').out,
    },
    connect_instance(name, block): {
      local p = path(['data', 'aws_connect_instance', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_instance: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auto_resolve_best_voices_enabled: p.child('auto_resolve_best_voices_enabled').out,
      contact_flow_logs_enabled: p.child('contact_flow_logs_enabled').out,
      contact_lens_enabled: p.child('contact_lens_enabled').out,
      created_time: p.child('created_time').out,
      early_media_enabled: p.child('early_media_enabled').out,
      id: p.child('id').out,
      identity_management_type: p.child('identity_management_type').out,
      inbound_calls_enabled: p.child('inbound_calls_enabled').out,
      instance_alias: p.child('instance_alias').out,
      instance_id: p.child('instance_id').out,
      multi_party_conference_enabled: p.child('multi_party_conference_enabled').out,
      outbound_calls_enabled: p.child('outbound_calls_enabled').out,
      service_role: p.child('service_role').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
    },
    connect_instance_storage_config(name, block): {
      local p = path(['data', 'aws_connect_instance_storage_config', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_instance_storage_config: {
              [name]: std.prune({
                association_id: build.template(block.association_id),
                instance_id: build.template(block.instance_id),
                resource_type: build.template(block.resource_type),
              }),
            },
          },
        },
      },
      association_id: p.child('association_id').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      resource_type: p.child('resource_type').out,
      storage_config: p.child('storage_config').out,
    },
    connect_lambda_function_association(name, block): {
      local p = path(['data', 'aws_connect_lambda_function_association', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_lambda_function_association: {
              [name]: std.prune({
                function_arn: build.template(block.function_arn),
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      function_arn: p.child('function_arn').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
    },
    connect_prompt(name, block): {
      local p = path(['data', 'aws_connect_prompt', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_prompt: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      prompt_id: p.child('prompt_id').out,
    },
    connect_queue(name, block): {
      local p = path(['data', 'aws_connect_queue', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_queue: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      hours_of_operation_id: p.child('hours_of_operation_id').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      max_contacts: p.child('max_contacts').out,
      name: p.child('name').out,
      outbound_caller_config: p.child('outbound_caller_config').out,
      queue_id: p.child('queue_id').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
    },
    connect_quick_connect(name, block): {
      local p = path(['data', 'aws_connect_quick_connect', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_quick_connect: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      quick_connect_config: p.child('quick_connect_config').out,
      quick_connect_id: p.child('quick_connect_id').out,
      tags: p.child('tags').out,
    },
    connect_routing_profile(name, block): {
      local p = path(['data', 'aws_connect_routing_profile', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_routing_profile: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_outbound_queue_id: p.child('default_outbound_queue_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      media_concurrencies: p.child('media_concurrencies').out,
      name: p.child('name').out,
      queue_configs: p.child('queue_configs').out,
      routing_profile_id: p.child('routing_profile_id').out,
      tags: p.child('tags').out,
    },
    connect_security_profile(name, block): {
      local p = path(['data', 'aws_connect_security_profile', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_security_profile: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      organization_resource_id: p.child('organization_resource_id').out,
      permissions: p.child('permissions').out,
      security_profile_id: p.child('security_profile_id').out,
      tags: p.child('tags').out,
    },
    connect_user(name, block): {
      local p = path(['data', 'aws_connect_user', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_user: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      directory_user_id: p.child('directory_user_id').out,
      hierarchy_group_id: p.child('hierarchy_group_id').out,
      id: p.child('id').out,
      identity_info: p.child('identity_info').out,
      instance_id: p.child('instance_id').out,
      name: p.child('name').out,
      phone_config: p.child('phone_config').out,
      routing_profile_id: p.child('routing_profile_id').out,
      security_profile_ids: p.child('security_profile_ids').out,
      tags: p.child('tags').out,
      user_id: p.child('user_id').out,
    },
    connect_user_hierarchy_group(name, block): {
      local p = path(['data', 'aws_connect_user_hierarchy_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_user_hierarchy_group: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      hierarchy_group_id: p.child('hierarchy_group_id').out,
      hierarchy_path: p.child('hierarchy_path').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      level_id: p.child('level_id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    connect_user_hierarchy_structure(name, block): {
      local p = path(['data', 'aws_connect_user_hierarchy_structure', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_user_hierarchy_structure: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      hierarchy_structure: p.child('hierarchy_structure').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
    },
    connect_vocabulary(name, block): {
      local p = path(['data', 'aws_connect_vocabulary', name]),
      _: p.out._ {
        block: {
          data: {
            aws_connect_vocabulary: {
              [name]: std.prune({
                instance_id: build.template(block.instance_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      content: p.child('content').out,
      failure_reason: p.child('failure_reason').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      language_code: p.child('language_code').out,
      last_modified_time: p.child('last_modified_time').out,
      name: p.child('name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      vocabulary_id: p.child('vocabulary_id').out,
    },
    controltower_controls(name, block): {
      local p = path(['data', 'aws_controltower_controls', name]),
      _: p.out._ {
        block: {
          data: {
            aws_controltower_controls: {
              [name]: std.prune({
                target_identifier: build.template(block.target_identifier),
              }),
            },
          },
        },
      },
      enabled_controls: p.child('enabled_controls').out,
      id: p.child('id').out,
      target_identifier: p.child('target_identifier').out,
    },
    cur_report_definition(name, block): {
      local p = path(['data', 'aws_cur_report_definition', name]),
      _: p.out._ {
        block: {
          data: {
            aws_cur_report_definition: {
              [name]: std.prune({
                report_name: build.template(block.report_name),
              }),
            },
          },
        },
      },
      additional_artifacts: p.child('additional_artifacts').out,
      additional_schema_elements: p.child('additional_schema_elements').out,
      compression: p.child('compression').out,
      format: p.child('format').out,
      id: p.child('id').out,
      refresh_closed_reports: p.child('refresh_closed_reports').out,
      report_name: p.child('report_name').out,
      report_versioning: p.child('report_versioning').out,
      s3_bucket: p.child('s3_bucket').out,
      s3_prefix: p.child('s3_prefix').out,
      s3_region: p.child('s3_region').out,
      tags: p.child('tags').out,
      time_unit: p.child('time_unit').out,
    },
    customer_gateway(name, block): {
      local p = path(['data', 'aws_customer_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            aws_customer_gateway: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bgp_asn: p.child('bgp_asn').out,
      bgp_asn_extended: p.child('bgp_asn_extended').out,
      certificate_arn: p.child('certificate_arn').out,
      device_name: p.child('device_name').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
    },
    datapipeline_pipeline(name, block): {
      local p = path(['data', 'aws_datapipeline_pipeline', name]),
      _: p.out._ {
        block: {
          data: {
            aws_datapipeline_pipeline: {
              [name]: std.prune({
                pipeline_id: build.template(block.pipeline_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      pipeline_id: p.child('pipeline_id').out,
      tags: p.child('tags').out,
    },
    datapipeline_pipeline_definition(name, block): {
      local p = path(['data', 'aws_datapipeline_pipeline_definition', name]),
      _: p.out._ {
        block: {
          data: {
            aws_datapipeline_pipeline_definition: {
              [name]: std.prune({
                pipeline_id: build.template(block.pipeline_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      parameter_object: p.child('parameter_object').out,
      pipeline_id: p.child('pipeline_id').out,
      pipeline_object: p.child('pipeline_object').out,
    },
    datazone_environment_blueprint(name, block): {
      local p = path(['data', 'aws_datazone_environment_blueprint', name]),
      _: p.out._ {
        block: {
          data: {
            aws_datazone_environment_blueprint: {
              [name]: std.prune({
                domain_id: build.template(block.domain_id),
                managed: build.template(block.managed),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      blueprint_provider: p.child('blueprint_provider').out,
      description: p.child('description').out,
      domain_id: p.child('domain_id').out,
      id: p.child('id').out,
      managed: p.child('managed').out,
      name: p.child('name').out,
    },
    db_cluster_snapshot(name, block): {
      local p = path(['data', 'aws_db_cluster_snapshot', name]),
      _: p.out._ {
        block: {
          data: {
            aws_db_cluster_snapshot: {
              [name]: std.prune({
                db_cluster_identifier: build.template(std.get(block, 'db_cluster_identifier', null, true)),
                db_cluster_snapshot_identifier: build.template(std.get(block, 'db_cluster_snapshot_identifier', null, true)),
                include_public: build.template(std.get(block, 'include_public', null, true)),
                include_shared: build.template(std.get(block, 'include_shared', null, true)),
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
                snapshot_type: build.template(std.get(block, 'snapshot_type', null, true)),
              }),
            },
          },
        },
      },
      allocated_storage: p.child('allocated_storage').out,
      availability_zones: p.child('availability_zones').out,
      db_cluster_identifier: p.child('db_cluster_identifier').out,
      db_cluster_snapshot_arn: p.child('db_cluster_snapshot_arn').out,
      db_cluster_snapshot_identifier: p.child('db_cluster_snapshot_identifier').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      include_public: p.child('include_public').out,
      include_shared: p.child('include_shared').out,
      kms_key_id: p.child('kms_key_id').out,
      license_model: p.child('license_model').out,
      most_recent: p.child('most_recent').out,
      port: p.child('port').out,
      snapshot_create_time: p.child('snapshot_create_time').out,
      snapshot_type: p.child('snapshot_type').out,
      source_db_cluster_snapshot_arn: p.child('source_db_cluster_snapshot_arn').out,
      status: p.child('status').out,
      storage_encrypted: p.child('storage_encrypted').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    db_event_categories(name, block): {
      local p = path(['data', 'aws_db_event_categories', name]),
      _: p.out._ {
        block: {
          data: {
            aws_db_event_categories: {
              [name]: std.prune({
                source_type: build.template(std.get(block, 'source_type', null, true)),
              }),
            },
          },
        },
      },
      event_categories: p.child('event_categories').out,
      id: p.child('id').out,
      source_type: p.child('source_type').out,
    },
    db_instance(name, block): {
      local p = path(['data', 'aws_db_instance', name]),
      _: p.out._ {
        block: {
          data: {
            aws_db_instance: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      address: p.child('address').out,
      allocated_storage: p.child('allocated_storage').out,
      auto_minor_version_upgrade: p.child('auto_minor_version_upgrade').out,
      availability_zone: p.child('availability_zone').out,
      backup_retention_period: p.child('backup_retention_period').out,
      ca_cert_identifier: p.child('ca_cert_identifier').out,
      db_cluster_identifier: p.child('db_cluster_identifier').out,
      db_instance_arn: p.child('db_instance_arn').out,
      db_instance_class: p.child('db_instance_class').out,
      db_instance_identifier: p.child('db_instance_identifier').out,
      db_instance_port: p.child('db_instance_port').out,
      db_name: p.child('db_name').out,
      db_parameter_groups: p.child('db_parameter_groups').out,
      db_subnet_group: p.child('db_subnet_group').out,
      enabled_cloudwatch_logs_exports: p.child('enabled_cloudwatch_logs_exports').out,
      endpoint: p.child('endpoint').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      id: p.child('id').out,
      iops: p.child('iops').out,
      kms_key_id: p.child('kms_key_id').out,
      license_model: p.child('license_model').out,
      master_user_secret: p.child('master_user_secret').out,
      master_username: p.child('master_username').out,
      max_allocated_storage: p.child('max_allocated_storage').out,
      monitoring_interval: p.child('monitoring_interval').out,
      monitoring_role_arn: p.child('monitoring_role_arn').out,
      multi_az: p.child('multi_az').out,
      network_type: p.child('network_type').out,
      option_group_memberships: p.child('option_group_memberships').out,
      port: p.child('port').out,
      preferred_backup_window: p.child('preferred_backup_window').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      publicly_accessible: p.child('publicly_accessible').out,
      replicate_source_db: p.child('replicate_source_db').out,
      resource_id: p.child('resource_id').out,
      storage_encrypted: p.child('storage_encrypted').out,
      storage_throughput: p.child('storage_throughput').out,
      storage_type: p.child('storage_type').out,
      tags: p.child('tags').out,
      timezone: p.child('timezone').out,
      vpc_security_groups: p.child('vpc_security_groups').out,
    },
    db_instances(name, block): {
      local p = path(['data', 'aws_db_instances', name]),
      _: p.out._ {
        block: {
          data: {
            aws_db_instances: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_arns: p.child('instance_arns').out,
      instance_identifiers: p.child('instance_identifiers').out,
      tags: p.child('tags').out,
    },
    db_parameter_group(name, block): {
      local p = path(['data', 'aws_db_parameter_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_db_parameter_group: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      family: p.child('family').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    db_proxy(name, block): {
      local p = path(['data', 'aws_db_proxy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_db_proxy: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auth: p.child('auth').out,
      debug_logging: p.child('debug_logging').out,
      endpoint: p.child('endpoint').out,
      engine_family: p.child('engine_family').out,
      id: p.child('id').out,
      idle_client_timeout: p.child('idle_client_timeout').out,
      name: p.child('name').out,
      require_tls: p.child('require_tls').out,
      role_arn: p.child('role_arn').out,
      vpc_id: p.child('vpc_id').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
      vpc_subnet_ids: p.child('vpc_subnet_ids').out,
    },
    db_snapshot(name, block): {
      local p = path(['data', 'aws_db_snapshot', name]),
      _: p.out._ {
        block: {
          data: {
            aws_db_snapshot: {
              [name]: std.prune({
                db_instance_identifier: build.template(std.get(block, 'db_instance_identifier', null, true)),
                db_snapshot_identifier: build.template(std.get(block, 'db_snapshot_identifier', null, true)),
                include_public: build.template(std.get(block, 'include_public', null, true)),
                include_shared: build.template(std.get(block, 'include_shared', null, true)),
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
                snapshot_type: build.template(std.get(block, 'snapshot_type', null, true)),
              }),
            },
          },
        },
      },
      allocated_storage: p.child('allocated_storage').out,
      availability_zone: p.child('availability_zone').out,
      db_instance_identifier: p.child('db_instance_identifier').out,
      db_snapshot_arn: p.child('db_snapshot_arn').out,
      db_snapshot_identifier: p.child('db_snapshot_identifier').out,
      encrypted: p.child('encrypted').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      include_public: p.child('include_public').out,
      include_shared: p.child('include_shared').out,
      iops: p.child('iops').out,
      kms_key_id: p.child('kms_key_id').out,
      license_model: p.child('license_model').out,
      most_recent: p.child('most_recent').out,
      option_group_name: p.child('option_group_name').out,
      original_snapshot_create_time: p.child('original_snapshot_create_time').out,
      port: p.child('port').out,
      snapshot_create_time: p.child('snapshot_create_time').out,
      snapshot_type: p.child('snapshot_type').out,
      source_db_snapshot_identifier: p.child('source_db_snapshot_identifier').out,
      source_region: p.child('source_region').out,
      status: p.child('status').out,
      storage_type: p.child('storage_type').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    db_subnet_group(name, block): {
      local p = path(['data', 'aws_db_subnet_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_db_subnet_group: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
      subnet_ids: p.child('subnet_ids').out,
      supported_network_types: p.child('supported_network_types').out,
      vpc_id: p.child('vpc_id').out,
    },
    default_tags(name, block): {
      local p = path(['data', 'aws_default_tags', name]),
      _: p.out._ {
        block: {
          data: {
            aws_default_tags: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      tags: p.child('tags').out,
    },
    devopsguru_notification_channel(name, block): {
      local p = path(['data', 'aws_devopsguru_notification_channel', name]),
      _: p.out._ {
        block: {
          data: {
            aws_devopsguru_notification_channel: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    devopsguru_resource_collection(name, block): {
      local p = path(['data', 'aws_devopsguru_resource_collection', name]),
      _: p.out._ {
        block: {
          data: {
            aws_devopsguru_resource_collection: {
              [name]: std.prune({
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      type: p.child('type').out,
    },
    directory_service_directory(name, block): {
      local p = path(['data', 'aws_directory_service_directory', name]),
      _: p.out._ {
        block: {
          data: {
            aws_directory_service_directory: {
              [name]: std.prune({
                directory_id: build.template(block.directory_id),
              }),
            },
          },
        },
      },
      access_url: p.child('access_url').out,
      alias: p.child('alias').out,
      connect_settings: p.child('connect_settings').out,
      description: p.child('description').out,
      directory_id: p.child('directory_id').out,
      dns_ip_addresses: p.child('dns_ip_addresses').out,
      edition: p.child('edition').out,
      enable_sso: p.child('enable_sso').out,
      id: p.child('id').out,
      name: p.child('name').out,
      radius_settings: p.child('radius_settings').out,
      security_group_id: p.child('security_group_id').out,
      short_name: p.child('short_name').out,
      size: p.child('size').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      vpc_settings: p.child('vpc_settings').out,
    },
    dms_certificate(name, block): {
      local p = path(['data', 'aws_dms_certificate', name]),
      _: p.out._ {
        block: {
          data: {
            aws_dms_certificate: {
              [name]: std.prune({
                certificate_id: build.template(block.certificate_id),
              }),
            },
          },
        },
      },
      certificate_arn: p.child('certificate_arn').out,
      certificate_creation_date: p.child('certificate_creation_date').out,
      certificate_id: p.child('certificate_id').out,
      certificate_owner: p.child('certificate_owner').out,
      certificate_pem: p.child('certificate_pem').out,
      certificate_wallet: p.child('certificate_wallet').out,
      id: p.child('id').out,
      key_length: p.child('key_length').out,
      signing_algorithm: p.child('signing_algorithm').out,
      tags: p.child('tags').out,
      valid_from_date: p.child('valid_from_date').out,
      valid_to_date: p.child('valid_to_date').out,
    },
    dms_endpoint(name, block): {
      local p = path(['data', 'aws_dms_endpoint', name]),
      _: p.out._ {
        block: {
          data: {
            aws_dms_endpoint: {
              [name]: std.prune({
                endpoint_id: build.template(block.endpoint_id),
              }),
            },
          },
        },
      },
      certificate_arn: p.child('certificate_arn').out,
      database_name: p.child('database_name').out,
      elasticsearch_settings: p.child('elasticsearch_settings').out,
      endpoint_arn: p.child('endpoint_arn').out,
      endpoint_id: p.child('endpoint_id').out,
      endpoint_type: p.child('endpoint_type').out,
      engine_name: p.child('engine_name').out,
      extra_connection_attributes: p.child('extra_connection_attributes').out,
      id: p.child('id').out,
      kafka_settings: p.child('kafka_settings').out,
      kinesis_settings: p.child('kinesis_settings').out,
      kms_key_arn: p.child('kms_key_arn').out,
      mongodb_settings: p.child('mongodb_settings').out,
      password: p.child('password').out,
      port: p.child('port').out,
      postgres_settings: p.child('postgres_settings').out,
      redis_settings: p.child('redis_settings').out,
      redshift_settings: p.child('redshift_settings').out,
      s3_settings: p.child('s3_settings').out,
      secrets_manager_access_role_arn: p.child('secrets_manager_access_role_arn').out,
      secrets_manager_arn: p.child('secrets_manager_arn').out,
      server_name: p.child('server_name').out,
      service_access_role: p.child('service_access_role').out,
      ssl_mode: p.child('ssl_mode').out,
      tags: p.child('tags').out,
      username: p.child('username').out,
    },
    dms_replication_instance(name, block): {
      local p = path(['data', 'aws_dms_replication_instance', name]),
      _: p.out._ {
        block: {
          data: {
            aws_dms_replication_instance: {
              [name]: std.prune({
                replication_instance_id: build.template(block.replication_instance_id),
              }),
            },
          },
        },
      },
      allocated_storage: p.child('allocated_storage').out,
      auto_minor_version_upgrade: p.child('auto_minor_version_upgrade').out,
      availability_zone: p.child('availability_zone').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      multi_az: p.child('multi_az').out,
      network_type: p.child('network_type').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      publicly_accessible: p.child('publicly_accessible').out,
      replication_instance_arn: p.child('replication_instance_arn').out,
      replication_instance_class: p.child('replication_instance_class').out,
      replication_instance_id: p.child('replication_instance_id').out,
      replication_instance_private_ips: p.child('replication_instance_private_ips').out,
      replication_instance_public_ips: p.child('replication_instance_public_ips').out,
      replication_subnet_group_id: p.child('replication_subnet_group_id').out,
      tags: p.child('tags').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    dms_replication_subnet_group(name, block): {
      local p = path(['data', 'aws_dms_replication_subnet_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_dms_replication_subnet_group: {
              [name]: std.prune({
                replication_subnet_group_id: build.template(block.replication_subnet_group_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      replication_subnet_group_arn: p.child('replication_subnet_group_arn').out,
      replication_subnet_group_description: p.child('replication_subnet_group_description').out,
      replication_subnet_group_id: p.child('replication_subnet_group_id').out,
      subnet_group_status: p.child('subnet_group_status').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    dms_replication_task(name, block): {
      local p = path(['data', 'aws_dms_replication_task', name]),
      _: p.out._ {
        block: {
          data: {
            aws_dms_replication_task: {
              [name]: std.prune({
                replication_task_id: build.template(block.replication_task_id),
              }),
            },
          },
        },
      },
      cdc_start_position: p.child('cdc_start_position').out,
      cdc_start_time: p.child('cdc_start_time').out,
      id: p.child('id').out,
      migration_type: p.child('migration_type').out,
      replication_instance_arn: p.child('replication_instance_arn').out,
      replication_task_arn: p.child('replication_task_arn').out,
      replication_task_id: p.child('replication_task_id').out,
      replication_task_settings: p.child('replication_task_settings').out,
      source_endpoint_arn: p.child('source_endpoint_arn').out,
      start_replication_task: p.child('start_replication_task').out,
      status: p.child('status').out,
      table_mappings: p.child('table_mappings').out,
      tags: p.child('tags').out,
      target_endpoint_arn: p.child('target_endpoint_arn').out,
    },
    docdb_engine_version(name, block): {
      local p = path(['data', 'aws_docdb_engine_version', name]),
      _: p.out._ {
        block: {
          data: {
            aws_docdb_engine_version: {
              [name]: std.prune({
                engine: build.template(std.get(block, 'engine', null, true)),
                preferred_versions: build.template(std.get(block, 'preferred_versions', null, true)),
              }),
            },
          },
        },
      },
      engine: p.child('engine').out,
      engine_description: p.child('engine_description').out,
      exportable_log_types: p.child('exportable_log_types').out,
      id: p.child('id').out,
      parameter_group_family: p.child('parameter_group_family').out,
      preferred_versions: p.child('preferred_versions').out,
      supports_log_exports_to_cloudwatch: p.child('supports_log_exports_to_cloudwatch').out,
      valid_upgrade_targets: p.child('valid_upgrade_targets').out,
      version: p.child('version').out,
      version_description: p.child('version_description').out,
    },
    docdb_orderable_db_instance(name, block): {
      local p = path(['data', 'aws_docdb_orderable_db_instance', name]),
      _: p.out._ {
        block: {
          data: {
            aws_docdb_orderable_db_instance: {
              [name]: std.prune({
                engine: build.template(std.get(block, 'engine', null, true)),
                license_model: build.template(std.get(block, 'license_model', null, true)),
                preferred_instance_classes: build.template(std.get(block, 'preferred_instance_classes', null, true)),
              }),
            },
          },
        },
      },
      availability_zones: p.child('availability_zones').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      instance_class: p.child('instance_class').out,
      license_model: p.child('license_model').out,
      preferred_instance_classes: p.child('preferred_instance_classes').out,
      vpc: p.child('vpc').out,
    },
    dx_connection(name, block): {
      local p = path(['data', 'aws_dx_connection', name]),
      _: p.out._ {
        block: {
          data: {
            aws_dx_connection: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_device: p.child('aws_device').out,
      bandwidth: p.child('bandwidth').out,
      id: p.child('id').out,
      location: p.child('location').out,
      name: p.child('name').out,
      owner_account_id: p.child('owner_account_id').out,
      partner_name: p.child('partner_name').out,
      provider_name: p.child('provider_name').out,
      tags: p.child('tags').out,
      vlan_id: p.child('vlan_id').out,
    },
    dx_gateway(name, block): {
      local p = path(['data', 'aws_dx_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            aws_dx_gateway: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      amazon_side_asn: p.child('amazon_side_asn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner_account_id: p.child('owner_account_id').out,
    },
    dx_location(name, block): {
      local p = path(['data', 'aws_dx_location', name]),
      _: p.out._ {
        block: {
          data: {
            aws_dx_location: {
              [name]: std.prune({
                location_code: build.template(block.location_code),
              }),
            },
          },
        },
      },
      available_macsec_port_speeds: p.child('available_macsec_port_speeds').out,
      available_port_speeds: p.child('available_port_speeds').out,
      available_providers: p.child('available_providers').out,
      id: p.child('id').out,
      location_code: p.child('location_code').out,
      location_name: p.child('location_name').out,
    },
    dx_locations(name, block): {
      local p = path(['data', 'aws_dx_locations', name]),
      _: p.out._ {
        block: {
          data: {
            aws_dx_locations: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      location_codes: p.child('location_codes').out,
    },
    dx_router_configuration(name, block): {
      local p = path(['data', 'aws_dx_router_configuration', name]),
      _: p.out._ {
        block: {
          data: {
            aws_dx_router_configuration: {
              [name]: std.prune({
                router_type_identifier: build.template(block.router_type_identifier),
                virtual_interface_id: build.template(block.virtual_interface_id),
              }),
            },
          },
        },
      },
      customer_router_config: p.child('customer_router_config').out,
      id: p.child('id').out,
      router: p.child('router').out,
      router_type_identifier: p.child('router_type_identifier').out,
      virtual_interface_id: p.child('virtual_interface_id').out,
      virtual_interface_name: p.child('virtual_interface_name').out,
    },
    dynamodb_table(name, block): {
      local p = path(['data', 'aws_dynamodb_table', name]),
      _: p.out._ {
        block: {
          data: {
            aws_dynamodb_table: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attribute: p.child('attribute').out,
      billing_mode: p.child('billing_mode').out,
      deletion_protection_enabled: p.child('deletion_protection_enabled').out,
      global_secondary_index: p.child('global_secondary_index').out,
      hash_key: p.child('hash_key').out,
      id: p.child('id').out,
      local_secondary_index: p.child('local_secondary_index').out,
      name: p.child('name').out,
      point_in_time_recovery: p.child('point_in_time_recovery').out,
      range_key: p.child('range_key').out,
      read_capacity: p.child('read_capacity').out,
      replica: p.child('replica').out,
      stream_arn: p.child('stream_arn').out,
      stream_enabled: p.child('stream_enabled').out,
      stream_label: p.child('stream_label').out,
      stream_view_type: p.child('stream_view_type').out,
      table_class: p.child('table_class').out,
      tags: p.child('tags').out,
      ttl: p.child('ttl').out,
      write_capacity: p.child('write_capacity').out,
    },
    dynamodb_table_item(name, block): {
      local p = path(['data', 'aws_dynamodb_table_item', name]),
      _: p.out._ {
        block: {
          data: {
            aws_dynamodb_table_item: {
              [name]: std.prune({
                expression_attribute_names: build.template(std.get(block, 'expression_attribute_names', null, true)),
                key: build.template(block.key),
                projection_expression: build.template(std.get(block, 'projection_expression', null, true)),
                table_name: build.template(block.table_name),
              }),
            },
          },
        },
      },
      expression_attribute_names: p.child('expression_attribute_names').out,
      id: p.child('id').out,
      item: p.child('item').out,
      key: p.child('key').out,
      projection_expression: p.child('projection_expression').out,
      table_name: p.child('table_name').out,
    },
    ebs_default_kms_key(name, block): {
      local p = path(['data', 'aws_ebs_default_kms_key', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ebs_default_kms_key: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      key_arn: p.child('key_arn').out,
    },
    ebs_encryption_by_default(name, block): {
      local p = path(['data', 'aws_ebs_encryption_by_default', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ebs_encryption_by_default: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
    },
    ebs_snapshot(name, block): {
      local p = path(['data', 'aws_ebs_snapshot', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ebs_snapshot: {
              [name]: std.prune({
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
                owners: build.template(std.get(block, 'owners', null, true)),
                restorable_by_user_ids: build.template(std.get(block, 'restorable_by_user_ids', null, true)),
                snapshot_ids: build.template(std.get(block, 'snapshot_ids', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      data_encryption_key_id: p.child('data_encryption_key_id').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      most_recent: p.child('most_recent').out,
      outpost_arn: p.child('outpost_arn').out,
      owner_alias: p.child('owner_alias').out,
      owner_id: p.child('owner_id').out,
      owners: p.child('owners').out,
      restorable_by_user_ids: p.child('restorable_by_user_ids').out,
      snapshot_id: p.child('snapshot_id').out,
      snapshot_ids: p.child('snapshot_ids').out,
      start_time: p.child('start_time').out,
      state: p.child('state').out,
      storage_tier: p.child('storage_tier').out,
      tags: p.child('tags').out,
      volume_id: p.child('volume_id').out,
      volume_size: p.child('volume_size').out,
    },
    ebs_snapshot_ids(name, block): {
      local p = path(['data', 'aws_ebs_snapshot_ids', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ebs_snapshot_ids: {
              [name]: std.prune({
                owners: build.template(std.get(block, 'owners', null, true)),
                restorable_by_user_ids: build.template(std.get(block, 'restorable_by_user_ids', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      owners: p.child('owners').out,
      restorable_by_user_ids: p.child('restorable_by_user_ids').out,
    },
    ebs_volume(name, block): {
      local p = path(['data', 'aws_ebs_volume', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ebs_volume: {
              [name]: std.prune({
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      iops: p.child('iops').out,
      kms_key_id: p.child('kms_key_id').out,
      most_recent: p.child('most_recent').out,
      multi_attach_enabled: p.child('multi_attach_enabled').out,
      outpost_arn: p.child('outpost_arn').out,
      size: p.child('size').out,
      snapshot_id: p.child('snapshot_id').out,
      tags: p.child('tags').out,
      throughput: p.child('throughput').out,
      volume_id: p.child('volume_id').out,
      volume_type: p.child('volume_type').out,
    },
    ebs_volumes(name, block): {
      local p = path(['data', 'aws_ebs_volumes', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ebs_volumes: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    ec2_capacity_block_offering(name, block): {
      local p = path(['data', 'aws_ec2_capacity_block_offering', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_capacity_block_offering: {
              [name]: std.prune({
                capacity_duration_hours: build.template(block.capacity_duration_hours),
                instance_count: build.template(block.instance_count),
                instance_type: build.template(block.instance_type),
              }),
            },
          },
        },
      },
      availability_zone: p.child('availability_zone').out,
      capacity_block_offering_id: p.child('capacity_block_offering_id').out,
      capacity_duration_hours: p.child('capacity_duration_hours').out,
      currency_code: p.child('currency_code').out,
      end_date_range: p.child('end_date_range').out,
      instance_count: p.child('instance_count').out,
      instance_type: p.child('instance_type').out,
      start_date_range: p.child('start_date_range').out,
      tenancy: p.child('tenancy').out,
      upfront_fee: p.child('upfront_fee').out,
    },
    ec2_client_vpn_endpoint(name, block): {
      local p = path(['data', 'aws_ec2_client_vpn_endpoint', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_client_vpn_endpoint: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      authentication_options: p.child('authentication_options').out,
      client_cidr_block: p.child('client_cidr_block').out,
      client_connect_options: p.child('client_connect_options').out,
      client_login_banner_options: p.child('client_login_banner_options').out,
      client_vpn_endpoint_id: p.child('client_vpn_endpoint_id').out,
      connection_log_options: p.child('connection_log_options').out,
      description: p.child('description').out,
      dns_name: p.child('dns_name').out,
      dns_servers: p.child('dns_servers').out,
      id: p.child('id').out,
      security_group_ids: p.child('security_group_ids').out,
      self_service_portal: p.child('self_service_portal').out,
      self_service_portal_url: p.child('self_service_portal_url').out,
      server_certificate_arn: p.child('server_certificate_arn').out,
      session_timeout_hours: p.child('session_timeout_hours').out,
      split_tunnel: p.child('split_tunnel').out,
      tags: p.child('tags').out,
      transport_protocol: p.child('transport_protocol').out,
      vpc_id: p.child('vpc_id').out,
      vpn_port: p.child('vpn_port').out,
    },
    ec2_coip_pool(name, block): {
      local p = path(['data', 'aws_ec2_coip_pool', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_coip_pool: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      local_gateway_route_table_id: p.child('local_gateway_route_table_id').out,
      pool_cidrs: p.child('pool_cidrs').out,
      pool_id: p.child('pool_id').out,
      tags: p.child('tags').out,
    },
    ec2_coip_pools(name, block): {
      local p = path(['data', 'aws_ec2_coip_pools', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_coip_pools: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      pool_ids: p.child('pool_ids').out,
      tags: p.child('tags').out,
    },
    ec2_host(name, block): {
      local p = path(['data', 'aws_ec2_host', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_host: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      asset_id: p.child('asset_id').out,
      auto_placement: p.child('auto_placement').out,
      availability_zone: p.child('availability_zone').out,
      cores: p.child('cores').out,
      host_id: p.child('host_id').out,
      host_recovery: p.child('host_recovery').out,
      id: p.child('id').out,
      instance_family: p.child('instance_family').out,
      instance_type: p.child('instance_type').out,
      outpost_arn: p.child('outpost_arn').out,
      owner_id: p.child('owner_id').out,
      sockets: p.child('sockets').out,
      tags: p.child('tags').out,
      total_vcpus: p.child('total_vcpus').out,
    },
    ec2_instance_type(name, block): {
      local p = path(['data', 'aws_ec2_instance_type', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_instance_type: {
              [name]: std.prune({
                instance_type: build.template(block.instance_type),
              }),
            },
          },
        },
      },
      auto_recovery_supported: p.child('auto_recovery_supported').out,
      bare_metal: p.child('bare_metal').out,
      burstable_performance_supported: p.child('burstable_performance_supported').out,
      current_generation: p.child('current_generation').out,
      dedicated_hosts_supported: p.child('dedicated_hosts_supported').out,
      default_cores: p.child('default_cores').out,
      default_threads_per_core: p.child('default_threads_per_core').out,
      default_vcpus: p.child('default_vcpus').out,
      ebs_encryption_support: p.child('ebs_encryption_support').out,
      ebs_nvme_support: p.child('ebs_nvme_support').out,
      ebs_optimized_support: p.child('ebs_optimized_support').out,
      ebs_performance_baseline_bandwidth: p.child('ebs_performance_baseline_bandwidth').out,
      ebs_performance_baseline_iops: p.child('ebs_performance_baseline_iops').out,
      ebs_performance_baseline_throughput: p.child('ebs_performance_baseline_throughput').out,
      ebs_performance_maximum_bandwidth: p.child('ebs_performance_maximum_bandwidth').out,
      ebs_performance_maximum_iops: p.child('ebs_performance_maximum_iops').out,
      ebs_performance_maximum_throughput: p.child('ebs_performance_maximum_throughput').out,
      efa_supported: p.child('efa_supported').out,
      ena_support: p.child('ena_support').out,
      encryption_in_transit_supported: p.child('encryption_in_transit_supported').out,
      fpgas: p.child('fpgas').out,
      free_tier_eligible: p.child('free_tier_eligible').out,
      gpus: p.child('gpus').out,
      hibernation_supported: p.child('hibernation_supported').out,
      hypervisor: p.child('hypervisor').out,
      id: p.child('id').out,
      inference_accelerators: p.child('inference_accelerators').out,
      instance_disks: p.child('instance_disks').out,
      instance_storage_supported: p.child('instance_storage_supported').out,
      instance_type: p.child('instance_type').out,
      ipv6_supported: p.child('ipv6_supported').out,
      maximum_ipv4_addresses_per_interface: p.child('maximum_ipv4_addresses_per_interface').out,
      maximum_ipv6_addresses_per_interface: p.child('maximum_ipv6_addresses_per_interface').out,
      maximum_network_cards: p.child('maximum_network_cards').out,
      maximum_network_interfaces: p.child('maximum_network_interfaces').out,
      memory_size: p.child('memory_size').out,
      network_performance: p.child('network_performance').out,
      supported_architectures: p.child('supported_architectures').out,
      supported_placement_strategies: p.child('supported_placement_strategies').out,
      supported_root_device_types: p.child('supported_root_device_types').out,
      supported_usages_classes: p.child('supported_usages_classes').out,
      supported_virtualization_types: p.child('supported_virtualization_types').out,
      sustained_clock_speed: p.child('sustained_clock_speed').out,
      total_fpga_memory: p.child('total_fpga_memory').out,
      total_gpu_memory: p.child('total_gpu_memory').out,
      total_instance_storage: p.child('total_instance_storage').out,
      valid_cores: p.child('valid_cores').out,
      valid_threads_per_core: p.child('valid_threads_per_core').out,
    },
    ec2_instance_type_offering(name, block): {
      local p = path(['data', 'aws_ec2_instance_type_offering', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_instance_type_offering: {
              [name]: std.prune({
                location_type: build.template(std.get(block, 'location_type', null, true)),
                preferred_instance_types: build.template(std.get(block, 'preferred_instance_types', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_type: p.child('instance_type').out,
      location_type: p.child('location_type').out,
      preferred_instance_types: p.child('preferred_instance_types').out,
    },
    ec2_instance_type_offerings(name, block): {
      local p = path(['data', 'aws_ec2_instance_type_offerings', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_instance_type_offerings: {
              [name]: std.prune({
                location_type: build.template(std.get(block, 'location_type', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_types: p.child('instance_types').out,
      location_type: p.child('location_type').out,
      location_types: p.child('location_types').out,
      locations: p.child('locations').out,
    },
    ec2_instance_types(name, block): {
      local p = path(['data', 'aws_ec2_instance_types', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_instance_types: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_types: p.child('instance_types').out,
    },
    ec2_local_gateway(name, block): {
      local p = path(['data', 'aws_ec2_local_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_local_gateway: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      outpost_arn: p.child('outpost_arn').out,
      owner_id: p.child('owner_id').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
    },
    ec2_local_gateway_route_table(name, block): {
      local p = path(['data', 'aws_ec2_local_gateway_route_table', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_local_gateway_route_table: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      local_gateway_id: p.child('local_gateway_id').out,
      local_gateway_route_table_id: p.child('local_gateway_route_table_id').out,
      outpost_arn: p.child('outpost_arn').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
    },
    ec2_local_gateway_route_tables(name, block): {
      local p = path(['data', 'aws_ec2_local_gateway_route_tables', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_local_gateway_route_tables: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    ec2_local_gateway_virtual_interface(name, block): {
      local p = path(['data', 'aws_ec2_local_gateway_virtual_interface', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_local_gateway_virtual_interface: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      local_address: p.child('local_address').out,
      local_bgp_asn: p.child('local_bgp_asn').out,
      local_gateway_id: p.child('local_gateway_id').out,
      local_gateway_virtual_interface_ids: p.child('local_gateway_virtual_interface_ids').out,
      peer_address: p.child('peer_address').out,
      peer_bgp_asn: p.child('peer_bgp_asn').out,
      tags: p.child('tags').out,
      vlan: p.child('vlan').out,
    },
    ec2_local_gateway_virtual_interface_group(name, block): {
      local p = path(['data', 'aws_ec2_local_gateway_virtual_interface_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_local_gateway_virtual_interface_group: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      local_gateway_id: p.child('local_gateway_id').out,
      local_gateway_virtual_interface_ids: p.child('local_gateway_virtual_interface_ids').out,
      tags: p.child('tags').out,
    },
    ec2_local_gateway_virtual_interface_groups(name, block): {
      local p = path(['data', 'aws_ec2_local_gateway_virtual_interface_groups', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_local_gateway_virtual_interface_groups: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      local_gateway_virtual_interface_ids: p.child('local_gateway_virtual_interface_ids').out,
      tags: p.child('tags').out,
    },
    ec2_local_gateways(name, block): {
      local p = path(['data', 'aws_ec2_local_gateways', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_local_gateways: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    ec2_managed_prefix_list(name, block): {
      local p = path(['data', 'aws_ec2_managed_prefix_list', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_managed_prefix_list: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      address_family: p.child('address_family').out,
      arn: p.child('arn').out,
      entries: p.child('entries').out,
      id: p.child('id').out,
      max_entries: p.child('max_entries').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    ec2_managed_prefix_lists(name, block): {
      local p = path(['data', 'aws_ec2_managed_prefix_lists', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_managed_prefix_lists: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    ec2_network_insights_analysis(name, block): {
      local p = path(['data', 'aws_ec2_network_insights_analysis', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_network_insights_analysis: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      alternate_path_hints: p.child('alternate_path_hints').out,
      arn: p.child('arn').out,
      explanations: p.child('explanations').out,
      filter_in_arns: p.child('filter_in_arns').out,
      forward_path_components: p.child('forward_path_components').out,
      id: p.child('id').out,
      network_insights_analysis_id: p.child('network_insights_analysis_id').out,
      network_insights_path_id: p.child('network_insights_path_id').out,
      path_found: p.child('path_found').out,
      return_path_components: p.child('return_path_components').out,
      start_date: p.child('start_date').out,
      status: p.child('status').out,
      status_message: p.child('status_message').out,
      tags: p.child('tags').out,
      warning_message: p.child('warning_message').out,
    },
    ec2_network_insights_path(name, block): {
      local p = path(['data', 'aws_ec2_network_insights_path', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_network_insights_path: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      destination: p.child('destination').out,
      destination_arn: p.child('destination_arn').out,
      destination_ip: p.child('destination_ip').out,
      destination_port: p.child('destination_port').out,
      id: p.child('id').out,
      network_insights_path_id: p.child('network_insights_path_id').out,
      protocol: p.child('protocol').out,
      source: p.child('source').out,
      source_arn: p.child('source_arn').out,
      source_ip: p.child('source_ip').out,
      tags: p.child('tags').out,
    },
    ec2_public_ipv4_pool(name, block): {
      local p = path(['data', 'aws_ec2_public_ipv4_pool', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_public_ipv4_pool: {
              [name]: std.prune({
                pool_id: build.template(block.pool_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      network_border_group: p.child('network_border_group').out,
      pool_address_ranges: p.child('pool_address_ranges').out,
      pool_id: p.child('pool_id').out,
      tags: p.child('tags').out,
      total_address_count: p.child('total_address_count').out,
      total_available_address_count: p.child('total_available_address_count').out,
    },
    ec2_public_ipv4_pools(name, block): {
      local p = path(['data', 'aws_ec2_public_ipv4_pools', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_public_ipv4_pools: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      pool_ids: p.child('pool_ids').out,
      tags: p.child('tags').out,
    },
    ec2_serial_console_access(name, block): {
      local p = path(['data', 'aws_ec2_serial_console_access', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_serial_console_access: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      enabled: p.child('enabled').out,
      id: p.child('id').out,
    },
    ec2_spot_price(name, block): {
      local p = path(['data', 'aws_ec2_spot_price', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_spot_price: {
              [name]: std.prune({
                availability_zone: build.template(std.get(block, 'availability_zone', null, true)),
                instance_type: build.template(std.get(block, 'instance_type', null, true)),
              }),
            },
          },
        },
      },
      availability_zone: p.child('availability_zone').out,
      id: p.child('id').out,
      instance_type: p.child('instance_type').out,
      spot_price: p.child('spot_price').out,
      spot_price_timestamp: p.child('spot_price_timestamp').out,
    },
    ec2_transit_gateway(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      amazon_side_asn: p.child('amazon_side_asn').out,
      arn: p.child('arn').out,
      association_default_route_table_id: p.child('association_default_route_table_id').out,
      auto_accept_shared_attachments: p.child('auto_accept_shared_attachments').out,
      default_route_table_association: p.child('default_route_table_association').out,
      default_route_table_propagation: p.child('default_route_table_propagation').out,
      description: p.child('description').out,
      dns_support: p.child('dns_support').out,
      id: p.child('id').out,
      multicast_support: p.child('multicast_support').out,
      owner_id: p.child('owner_id').out,
      propagation_default_route_table_id: p.child('propagation_default_route_table_id').out,
      security_group_referencing_support: p.child('security_group_referencing_support').out,
      tags: p.child('tags').out,
      transit_gateway_cidr_blocks: p.child('transit_gateway_cidr_blocks').out,
      vpn_ecmp_support: p.child('vpn_ecmp_support').out,
    },
    ec2_transit_gateway_attachment(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_attachment', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_attachment: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      association_state: p.child('association_state').out,
      association_transit_gateway_route_table_id: p.child('association_transit_gateway_route_table_id').out,
      id: p.child('id').out,
      resource_id: p.child('resource_id').out,
      resource_owner_id: p.child('resource_owner_id').out,
      resource_type: p.child('resource_type').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      transit_gateway_owner_id: p.child('transit_gateway_owner_id').out,
    },
    ec2_transit_gateway_attachments(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_attachments', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_attachments: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    ec2_transit_gateway_connect(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_connect', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_connect: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      protocol: p.child('protocol').out,
      tags: p.child('tags').out,
      transit_gateway_connect_id: p.child('transit_gateway_connect_id').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      transport_attachment_id: p.child('transport_attachment_id').out,
    },
    ec2_transit_gateway_connect_peer(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_connect_peer', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_connect_peer: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bgp_asn: p.child('bgp_asn').out,
      bgp_peer_address: p.child('bgp_peer_address').out,
      bgp_transit_gateway_addresses: p.child('bgp_transit_gateway_addresses').out,
      id: p.child('id').out,
      inside_cidr_blocks: p.child('inside_cidr_blocks').out,
      peer_address: p.child('peer_address').out,
      tags: p.child('tags').out,
      transit_gateway_address: p.child('transit_gateway_address').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
      transit_gateway_connect_peer_id: p.child('transit_gateway_connect_peer_id').out,
    },
    ec2_transit_gateway_dx_gateway_attachment(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_dx_gateway_attachment', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_dx_gateway_attachment: {
              [name]: std.prune({
                dx_gateway_id: build.template(std.get(block, 'dx_gateway_id', null, true)),
                transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null, true)),
              }),
            },
          },
        },
      },
      dx_gateway_id: p.child('dx_gateway_id').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
    },
    ec2_transit_gateway_multicast_domain(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_multicast_domain', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_multicast_domain: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      associations: p.child('associations').out,
      auto_accept_shared_associations: p.child('auto_accept_shared_associations').out,
      id: p.child('id').out,
      igmpv2_support: p.child('igmpv2_support').out,
      members: p.child('members').out,
      owner_id: p.child('owner_id').out,
      sources: p.child('sources').out,
      state: p.child('state').out,
      static_sources_support: p.child('static_sources_support').out,
      tags: p.child('tags').out,
      transit_gateway_attachment_id: p.child('transit_gateway_attachment_id').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      transit_gateway_multicast_domain_id: p.child('transit_gateway_multicast_domain_id').out,
    },
    ec2_transit_gateway_peering_attachment(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_peering_attachment', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_peering_attachment: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      peer_account_id: p.child('peer_account_id').out,
      peer_region: p.child('peer_region').out,
      peer_transit_gateway_id: p.child('peer_transit_gateway_id').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
    },
    ec2_transit_gateway_peering_attachments(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_peering_attachments', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_peering_attachments: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
    },
    ec2_transit_gateway_route_table(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_route_table', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_route_table: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      default_association_route_table: p.child('default_association_route_table').out,
      default_propagation_route_table: p.child('default_propagation_route_table').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
    },
    ec2_transit_gateway_route_table_associations(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_route_table_associations', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_route_table_associations: {
              [name]: std.prune({
                transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      transit_gateway_route_table_id: p.child('transit_gateway_route_table_id').out,
    },
    ec2_transit_gateway_route_table_propagations(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_route_table_propagations', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_route_table_propagations: {
              [name]: std.prune({
                transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      transit_gateway_route_table_id: p.child('transit_gateway_route_table_id').out,
    },
    ec2_transit_gateway_route_table_routes(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_route_table_routes', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_route_table_routes: {
              [name]: std.prune({
                transit_gateway_route_table_id: build.template(block.transit_gateway_route_table_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      routes: p.child('routes').out,
      transit_gateway_route_table_id: p.child('transit_gateway_route_table_id').out,
    },
    ec2_transit_gateway_route_tables(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_route_tables', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_route_tables: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    ec2_transit_gateway_vpc_attachment(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_vpc_attachment', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_vpc_attachment: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      appliance_mode_support: p.child('appliance_mode_support').out,
      dns_support: p.child('dns_support').out,
      id: p.child('id').out,
      ipv6_support: p.child('ipv6_support').out,
      security_group_referencing_support: p.child('security_group_referencing_support').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      vpc_id: p.child('vpc_id').out,
      vpc_owner_id: p.child('vpc_owner_id').out,
    },
    ec2_transit_gateway_vpc_attachments(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_vpc_attachments', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_vpc_attachments: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
    },
    ec2_transit_gateway_vpn_attachment(name, block): {
      local p = path(['data', 'aws_ec2_transit_gateway_vpn_attachment', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ec2_transit_gateway_vpn_attachment: {
              [name]: std.prune({
                transit_gateway_id: build.template(std.get(block, 'transit_gateway_id', null, true)),
                vpn_connection_id: build.template(std.get(block, 'vpn_connection_id', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      tags: p.child('tags').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      vpn_connection_id: p.child('vpn_connection_id').out,
    },
    ecr_authorization_token(name, block): {
      local p = path(['data', 'aws_ecr_authorization_token', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ecr_authorization_token: {
              [name]: std.prune({
                registry_id: build.template(std.get(block, 'registry_id', null, true)),
              }),
            },
          },
        },
      },
      authorization_token: p.child('authorization_token').out,
      expires_at: p.child('expires_at').out,
      id: p.child('id').out,
      password: p.child('password').out,
      proxy_endpoint: p.child('proxy_endpoint').out,
      registry_id: p.child('registry_id').out,
      user_name: p.child('user_name').out,
    },
    ecr_image(name, block): {
      local p = path(['data', 'aws_ecr_image', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ecr_image: {
              [name]: std.prune({
                image_tag: build.template(std.get(block, 'image_tag', null, true)),
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
                repository_name: build.template(block.repository_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      image_digest: p.child('image_digest').out,
      image_pushed_at: p.child('image_pushed_at').out,
      image_size_in_bytes: p.child('image_size_in_bytes').out,
      image_tag: p.child('image_tag').out,
      image_tags: p.child('image_tags').out,
      image_uri: p.child('image_uri').out,
      most_recent: p.child('most_recent').out,
      registry_id: p.child('registry_id').out,
      repository_name: p.child('repository_name').out,
    },
    ecr_lifecycle_policy_document(name, block): {
      local p = path(['data', 'aws_ecr_lifecycle_policy_document', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ecr_lifecycle_policy_document: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      json: p.child('json').out,
    },
    ecr_pull_through_cache_rule(name, block): {
      local p = path(['data', 'aws_ecr_pull_through_cache_rule', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ecr_pull_through_cache_rule: {
              [name]: std.prune({
                ecr_repository_prefix: build.template(block.ecr_repository_prefix),
              }),
            },
          },
        },
      },
      credential_arn: p.child('credential_arn').out,
      ecr_repository_prefix: p.child('ecr_repository_prefix').out,
      id: p.child('id').out,
      registry_id: p.child('registry_id').out,
      upstream_registry_url: p.child('upstream_registry_url').out,
    },
    ecr_repositories(name, block): {
      local p = path(['data', 'aws_ecr_repositories', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ecr_repositories: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      names: p.child('names').out,
    },
    ecr_repository(name, block): {
      local p = path(['data', 'aws_ecr_repository', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ecr_repository: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      encryption_configuration: p.child('encryption_configuration').out,
      id: p.child('id').out,
      image_scanning_configuration: p.child('image_scanning_configuration').out,
      image_tag_mutability: p.child('image_tag_mutability').out,
      most_recent_image_tags: p.child('most_recent_image_tags').out,
      name: p.child('name').out,
      registry_id: p.child('registry_id').out,
      repository_url: p.child('repository_url').out,
      tags: p.child('tags').out,
    },
    ecr_repository_creation_template(name, block): {
      local p = path(['data', 'aws_ecr_repository_creation_template', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ecr_repository_creation_template: {
              [name]: std.prune({
                prefix: build.template(block.prefix),
              }),
            },
          },
        },
      },
      applied_for: p.child('applied_for').out,
      custom_role_arn: p.child('custom_role_arn').out,
      description: p.child('description').out,
      encryption_configuration: p.child('encryption_configuration').out,
      id: p.child('id').out,
      image_tag_mutability: p.child('image_tag_mutability').out,
      lifecycle_policy: p.child('lifecycle_policy').out,
      prefix: p.child('prefix').out,
      registry_id: p.child('registry_id').out,
      repository_policy: p.child('repository_policy').out,
      resource_tags: p.child('resource_tags').out,
    },
    ecrpublic_authorization_token(name, block): {
      local p = path(['data', 'aws_ecrpublic_authorization_token', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ecrpublic_authorization_token: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      authorization_token: p.child('authorization_token').out,
      expires_at: p.child('expires_at').out,
      id: p.child('id').out,
      password: p.child('password').out,
      user_name: p.child('user_name').out,
    },
    ecs_cluster(name, block): {
      local p = path(['data', 'aws_ecs_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ecs_cluster: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster_name: p.child('cluster_name').out,
      id: p.child('id').out,
      pending_tasks_count: p.child('pending_tasks_count').out,
      registered_container_instances_count: p.child('registered_container_instances_count').out,
      running_tasks_count: p.child('running_tasks_count').out,
      service_connect_defaults: p.child('service_connect_defaults').out,
      setting: p.child('setting').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
    },
    ecs_container_definition(name, block): {
      local p = path(['data', 'aws_ecs_container_definition', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ecs_container_definition: {
              [name]: std.prune({
                container_name: build.template(block.container_name),
                task_definition: build.template(block.task_definition),
              }),
            },
          },
        },
      },
      container_name: p.child('container_name').out,
      cpu: p.child('cpu').out,
      disable_networking: p.child('disable_networking').out,
      docker_labels: p.child('docker_labels').out,
      environment: p.child('environment').out,
      id: p.child('id').out,
      image: p.child('image').out,
      image_digest: p.child('image_digest').out,
      memory: p.child('memory').out,
      memory_reservation: p.child('memory_reservation').out,
      task_definition: p.child('task_definition').out,
    },
    ecs_service(name, block): {
      local p = path(['data', 'aws_ecs_service', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ecs_service: {
              [name]: std.prune({
                cluster_arn: build.template(block.cluster_arn),
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster_arn: p.child('cluster_arn').out,
      desired_count: p.child('desired_count').out,
      id: p.child('id').out,
      launch_type: p.child('launch_type').out,
      scheduling_strategy: p.child('scheduling_strategy').out,
      service_name: p.child('service_name').out,
      tags: p.child('tags').out,
      task_definition: p.child('task_definition').out,
    },
    ecs_task_definition(name, block): {
      local p = path(['data', 'aws_ecs_task_definition', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ecs_task_definition: {
              [name]: std.prune({
                task_definition: build.template(block.task_definition),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      arn_without_revision: p.child('arn_without_revision').out,
      execution_role_arn: p.child('execution_role_arn').out,
      family: p.child('family').out,
      id: p.child('id').out,
      network_mode: p.child('network_mode').out,
      revision: p.child('revision').out,
      status: p.child('status').out,
      task_definition: p.child('task_definition').out,
      task_role_arn: p.child('task_role_arn').out,
    },
    ecs_task_execution(name, block): {
      local p = path(['data', 'aws_ecs_task_execution', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ecs_task_execution: {
              [name]: std.prune({
                client_token: build.template(std.get(block, 'client_token', null, true)),
                cluster: build.template(block.cluster),
                desired_count: build.template(std.get(block, 'desired_count', null, true)),
                enable_ecs_managed_tags: build.template(std.get(block, 'enable_ecs_managed_tags', null, true)),
                enable_execute_command: build.template(std.get(block, 'enable_execute_command', null, true)),
                group: build.template(std.get(block, 'group', null, true)),
                launch_type: build.template(std.get(block, 'launch_type', null, true)),
                platform_version: build.template(std.get(block, 'platform_version', null, true)),
                propagate_tags: build.template(std.get(block, 'propagate_tags', null, true)),
                reference_id: build.template(std.get(block, 'reference_id', null, true)),
                started_by: build.template(std.get(block, 'started_by', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                task_definition: build.template(block.task_definition),
              }),
            },
          },
        },
      },
      client_token: p.child('client_token').out,
      cluster: p.child('cluster').out,
      desired_count: p.child('desired_count').out,
      enable_ecs_managed_tags: p.child('enable_ecs_managed_tags').out,
      enable_execute_command: p.child('enable_execute_command').out,
      group: p.child('group').out,
      id: p.child('id').out,
      launch_type: p.child('launch_type').out,
      platform_version: p.child('platform_version').out,
      propagate_tags: p.child('propagate_tags').out,
      reference_id: p.child('reference_id').out,
      started_by: p.child('started_by').out,
      tags: p.child('tags').out,
      task_arns: p.child('task_arns').out,
      task_definition: p.child('task_definition').out,
    },
    efs_access_point(name, block): {
      local p = path(['data', 'aws_efs_access_point', name]),
      _: p.out._ {
        block: {
          data: {
            aws_efs_access_point: {
              [name]: std.prune({
                access_point_id: build.template(block.access_point_id),
              }),
            },
          },
        },
      },
      access_point_id: p.child('access_point_id').out,
      arn: p.child('arn').out,
      file_system_arn: p.child('file_system_arn').out,
      file_system_id: p.child('file_system_id').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      posix_user: p.child('posix_user').out,
      root_directory: p.child('root_directory').out,
      tags: p.child('tags').out,
    },
    efs_access_points(name, block): {
      local p = path(['data', 'aws_efs_access_points', name]),
      _: p.out._ {
        block: {
          data: {
            aws_efs_access_points: {
              [name]: std.prune({
                file_system_id: build.template(block.file_system_id),
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      file_system_id: p.child('file_system_id').out,
      id: p.child('id').out,
      ids: p.child('ids').out,
    },
    efs_file_system(name, block): {
      local p = path(['data', 'aws_efs_file_system', name]),
      _: p.out._ {
        block: {
          data: {
            aws_efs_file_system: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone_id: p.child('availability_zone_id').out,
      availability_zone_name: p.child('availability_zone_name').out,
      creation_token: p.child('creation_token').out,
      dns_name: p.child('dns_name').out,
      encrypted: p.child('encrypted').out,
      file_system_id: p.child('file_system_id').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      lifecycle_policy: p.child('lifecycle_policy').out,
      name: p.child('name').out,
      performance_mode: p.child('performance_mode').out,
      protection: p.child('protection').out,
      provisioned_throughput_in_mibps: p.child('provisioned_throughput_in_mibps').out,
      size_in_bytes: p.child('size_in_bytes').out,
      tags: p.child('tags').out,
      throughput_mode: p.child('throughput_mode').out,
    },
    efs_mount_target(name, block): {
      local p = path(['data', 'aws_efs_mount_target', name]),
      _: p.out._ {
        block: {
          data: {
            aws_efs_mount_target: {
              [name]: std.prune({
                access_point_id: build.template(std.get(block, 'access_point_id', null, true)),
              }),
            },
          },
        },
      },
      access_point_id: p.child('access_point_id').out,
      availability_zone_id: p.child('availability_zone_id').out,
      availability_zone_name: p.child('availability_zone_name').out,
      dns_name: p.child('dns_name').out,
      file_system_arn: p.child('file_system_arn').out,
      file_system_id: p.child('file_system_id').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      mount_target_dns_name: p.child('mount_target_dns_name').out,
      mount_target_id: p.child('mount_target_id').out,
      network_interface_id: p.child('network_interface_id').out,
      owner_id: p.child('owner_id').out,
      security_groups: p.child('security_groups').out,
      subnet_id: p.child('subnet_id').out,
    },
    eip(name, block): {
      local p = path(['data', 'aws_eip', name]),
      _: p.out._ {
        block: {
          data: {
            aws_eip: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      association_id: p.child('association_id').out,
      carrier_ip: p.child('carrier_ip').out,
      customer_owned_ip: p.child('customer_owned_ip').out,
      customer_owned_ipv4_pool: p.child('customer_owned_ipv4_pool').out,
      domain: p.child('domain').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      ipam_pool_id: p.child('ipam_pool_id').out,
      network_interface_id: p.child('network_interface_id').out,
      network_interface_owner_id: p.child('network_interface_owner_id').out,
      private_dns: p.child('private_dns').out,
      private_ip: p.child('private_ip').out,
      ptr_record: p.child('ptr_record').out,
      public_dns: p.child('public_dns').out,
      public_ip: p.child('public_ip').out,
      public_ipv4_pool: p.child('public_ipv4_pool').out,
      tags: p.child('tags').out,
    },
    eips(name, block): {
      local p = path(['data', 'aws_eips', name]),
      _: p.out._ {
        block: {
          data: {
            aws_eips: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      allocation_ids: p.child('allocation_ids').out,
      id: p.child('id').out,
      public_ips: p.child('public_ips').out,
      tags: p.child('tags').out,
    },
    eks_access_entry(name, block): {
      local p = path(['data', 'aws_eks_access_entry', name]),
      _: p.out._ {
        block: {
          data: {
            aws_eks_access_entry: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                principal_arn: build.template(block.principal_arn),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      access_entry_arn: p.child('access_entry_arn').out,
      cluster_name: p.child('cluster_name').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      kubernetes_groups: p.child('kubernetes_groups').out,
      modified_at: p.child('modified_at').out,
      principal_arn: p.child('principal_arn').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
      type: p.child('type').out,
      user_name: p.child('user_name').out,
    },
    eks_addon(name, block): {
      local p = path(['data', 'aws_eks_addon', name]),
      _: p.out._ {
        block: {
          data: {
            aws_eks_addon: {
              [name]: std.prune({
                addon_name: build.template(block.addon_name),
                cluster_name: build.template(block.cluster_name),
              }),
            },
          },
        },
      },
      addon_name: p.child('addon_name').out,
      addon_version: p.child('addon_version').out,
      arn: p.child('arn').out,
      cluster_name: p.child('cluster_name').out,
      configuration_values: p.child('configuration_values').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      modified_at: p.child('modified_at').out,
      service_account_role_arn: p.child('service_account_role_arn').out,
      tags: p.child('tags').out,
    },
    eks_addon_version(name, block): {
      local p = path(['data', 'aws_eks_addon_version', name]),
      _: p.out._ {
        block: {
          data: {
            aws_eks_addon_version: {
              [name]: std.prune({
                addon_name: build.template(block.addon_name),
                kubernetes_version: build.template(block.kubernetes_version),
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
              }),
            },
          },
        },
      },
      addon_name: p.child('addon_name').out,
      id: p.child('id').out,
      kubernetes_version: p.child('kubernetes_version').out,
      most_recent: p.child('most_recent').out,
      version: p.child('version').out,
    },
    eks_cluster(name, block): {
      local p = path(['data', 'aws_eks_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            aws_eks_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      access_config: p.child('access_config').out,
      arn: p.child('arn').out,
      certificate_authority: p.child('certificate_authority').out,
      cluster_id: p.child('cluster_id').out,
      created_at: p.child('created_at').out,
      enabled_cluster_log_types: p.child('enabled_cluster_log_types').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      identity: p.child('identity').out,
      kubernetes_network_config: p.child('kubernetes_network_config').out,
      name: p.child('name').out,
      outpost_config: p.child('outpost_config').out,
      platform_version: p.child('platform_version').out,
      role_arn: p.child('role_arn').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      upgrade_policy: p.child('upgrade_policy').out,
      version: p.child('version').out,
      vpc_config: p.child('vpc_config').out,
      zonal_shift_config: p.child('zonal_shift_config').out,
    },
    eks_cluster_auth(name, block): {
      local p = path(['data', 'aws_eks_cluster_auth', name]),
      _: p.out._ {
        block: {
          data: {
            aws_eks_cluster_auth: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      token: p.child('token').out,
    },
    eks_clusters(name, block): {
      local p = path(['data', 'aws_eks_clusters', name]),
      _: p.out._ {
        block: {
          data: {
            aws_eks_clusters: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      names: p.child('names').out,
    },
    eks_node_group(name, block): {
      local p = path(['data', 'aws_eks_node_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_eks_node_group: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
                node_group_name: build.template(block.node_group_name),
              }),
            },
          },
        },
      },
      ami_type: p.child('ami_type').out,
      arn: p.child('arn').out,
      capacity_type: p.child('capacity_type').out,
      cluster_name: p.child('cluster_name').out,
      disk_size: p.child('disk_size').out,
      id: p.child('id').out,
      instance_types: p.child('instance_types').out,
      labels: p.child('labels').out,
      launch_template: p.child('launch_template').out,
      node_group_name: p.child('node_group_name').out,
      node_role_arn: p.child('node_role_arn').out,
      release_version: p.child('release_version').out,
      remote_access: p.child('remote_access').out,
      resources: p.child('resources').out,
      scaling_config: p.child('scaling_config').out,
      status: p.child('status').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      taints: p.child('taints').out,
      version: p.child('version').out,
    },
    eks_node_groups(name, block): {
      local p = path(['data', 'aws_eks_node_groups', name]),
      _: p.out._ {
        block: {
          data: {
            aws_eks_node_groups: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
              }),
            },
          },
        },
      },
      cluster_name: p.child('cluster_name').out,
      id: p.child('id').out,
      names: p.child('names').out,
    },
    elastic_beanstalk_application(name, block): {
      local p = path(['data', 'aws_elastic_beanstalk_application', name]),
      _: p.out._ {
        block: {
          data: {
            aws_elastic_beanstalk_application: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      appversion_lifecycle: p.child('appversion_lifecycle').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    elastic_beanstalk_hosted_zone(name, block): {
      local p = path(['data', 'aws_elastic_beanstalk_hosted_zone', name]),
      _: p.out._ {
        block: {
          data: {
            aws_elastic_beanstalk_hosted_zone: {
              [name]: std.prune({
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      region: p.child('region').out,
    },
    elastic_beanstalk_solution_stack(name, block): {
      local p = path(['data', 'aws_elastic_beanstalk_solution_stack', name]),
      _: p.out._ {
        block: {
          data: {
            aws_elastic_beanstalk_solution_stack: {
              [name]: std.prune({
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
                name_regex: build.template(block.name_regex),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      most_recent: p.child('most_recent').out,
      name: p.child('name').out,
      name_regex: p.child('name_regex').out,
    },
    elasticache_cluster(name, block): {
      local p = path(['data', 'aws_elasticache_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            aws_elasticache_cluster: {
              [name]: std.prune({
                cluster_id: build.template(block.cluster_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      cache_nodes: p.child('cache_nodes').out,
      cluster_address: p.child('cluster_address').out,
      cluster_id: p.child('cluster_id').out,
      configuration_endpoint: p.child('configuration_endpoint').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      ip_discovery: p.child('ip_discovery').out,
      log_delivery_configuration: p.child('log_delivery_configuration').out,
      maintenance_window: p.child('maintenance_window').out,
      network_type: p.child('network_type').out,
      node_type: p.child('node_type').out,
      notification_topic_arn: p.child('notification_topic_arn').out,
      num_cache_nodes: p.child('num_cache_nodes').out,
      parameter_group_name: p.child('parameter_group_name').out,
      port: p.child('port').out,
      preferred_outpost_arn: p.child('preferred_outpost_arn').out,
      replication_group_id: p.child('replication_group_id').out,
      security_group_ids: p.child('security_group_ids').out,
      snapshot_retention_limit: p.child('snapshot_retention_limit').out,
      snapshot_window: p.child('snapshot_window').out,
      subnet_group_name: p.child('subnet_group_name').out,
      tags: p.child('tags').out,
    },
    elasticache_replication_group(name, block): {
      local p = path(['data', 'aws_elasticache_replication_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_elasticache_replication_group: {
              [name]: std.prune({
                replication_group_id: build.template(block.replication_group_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auth_token_enabled: p.child('auth_token_enabled').out,
      automatic_failover_enabled: p.child('automatic_failover_enabled').out,
      cluster_mode: p.child('cluster_mode').out,
      configuration_endpoint_address: p.child('configuration_endpoint_address').out,
      description: p.child('description').out,
      id: p.child('id').out,
      log_delivery_configuration: p.child('log_delivery_configuration').out,
      member_clusters: p.child('member_clusters').out,
      multi_az_enabled: p.child('multi_az_enabled').out,
      node_type: p.child('node_type').out,
      num_cache_clusters: p.child('num_cache_clusters').out,
      num_node_groups: p.child('num_node_groups').out,
      port: p.child('port').out,
      primary_endpoint_address: p.child('primary_endpoint_address').out,
      reader_endpoint_address: p.child('reader_endpoint_address').out,
      replicas_per_node_group: p.child('replicas_per_node_group').out,
      replication_group_id: p.child('replication_group_id').out,
      snapshot_retention_limit: p.child('snapshot_retention_limit').out,
      snapshot_window: p.child('snapshot_window').out,
    },
    elasticache_reserved_cache_node_offering(name, block): {
      local p = path(['data', 'aws_elasticache_reserved_cache_node_offering', name]),
      _: p.out._ {
        block: {
          data: {
            aws_elasticache_reserved_cache_node_offering: {
              [name]: std.prune({
                cache_node_type: build.template(block.cache_node_type),
                duration: build.template(block.duration),
                offering_type: build.template(block.offering_type),
                product_description: build.template(block.product_description),
              }),
            },
          },
        },
      },
      cache_node_type: p.child('cache_node_type').out,
      duration: p.child('duration').out,
      fixed_price: p.child('fixed_price').out,
      offering_id: p.child('offering_id').out,
      offering_type: p.child('offering_type').out,
      product_description: p.child('product_description').out,
    },
    elasticache_serverless_cache(name, block): {
      local p = path(['data', 'aws_elasticache_serverless_cache', name]),
      _: p.out._ {
        block: {
          data: {
            aws_elasticache_serverless_cache: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cache_usage_limits: p.child('cache_usage_limits').out,
      create_time: p.child('create_time').out,
      daily_snapshot_time: p.child('daily_snapshot_time').out,
      description: p.child('description').out,
      endpoint: p.child('endpoint').out,
      engine: p.child('engine').out,
      full_engine_version: p.child('full_engine_version').out,
      kms_key_id: p.child('kms_key_id').out,
      major_engine_version: p.child('major_engine_version').out,
      name: p.child('name').out,
      reader_endpoint: p.child('reader_endpoint').out,
      security_group_ids: p.child('security_group_ids').out,
      snapshot_retention_limit: p.child('snapshot_retention_limit').out,
      status: p.child('status').out,
      subnet_ids: p.child('subnet_ids').out,
      user_group_id: p.child('user_group_id').out,
    },
    elasticache_subnet_group(name, block): {
      local p = path(['data', 'aws_elasticache_subnet_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_elasticache_subnet_group: {
              [name]: std.prune({
                name: build.template(block.name),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    elasticache_user(name, block): {
      local p = path(['data', 'aws_elasticache_user', name]),
      _: p.out._ {
        block: {
          data: {
            aws_elasticache_user: {
              [name]: std.prune({
                access_string: build.template(std.get(block, 'access_string', null, true)),
                engine: build.template(std.get(block, 'engine', null, true)),
                no_password_required: build.template(std.get(block, 'no_password_required', null, true)),
                passwords: build.template(std.get(block, 'passwords', null, true)),
                user_id: build.template(block.user_id),
                user_name: build.template(std.get(block, 'user_name', null, true)),
              }),
            },
          },
        },
      },
      access_string: p.child('access_string').out,
      engine: p.child('engine').out,
      id: p.child('id').out,
      no_password_required: p.child('no_password_required').out,
      passwords: p.child('passwords').out,
      user_id: p.child('user_id').out,
      user_name: p.child('user_name').out,
    },
    elasticsearch_domain(name, block): {
      local p = path(['data', 'aws_elasticsearch_domain', name]),
      _: p.out._ {
        block: {
          data: {
            aws_elasticsearch_domain: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      access_policies: p.child('access_policies').out,
      advanced_options: p.child('advanced_options').out,
      advanced_security_options: p.child('advanced_security_options').out,
      arn: p.child('arn').out,
      auto_tune_options: p.child('auto_tune_options').out,
      cluster_config: p.child('cluster_config').out,
      cognito_options: p.child('cognito_options').out,
      created: p.child('created').out,
      deleted: p.child('deleted').out,
      domain_id: p.child('domain_id').out,
      domain_name: p.child('domain_name').out,
      ebs_options: p.child('ebs_options').out,
      elasticsearch_version: p.child('elasticsearch_version').out,
      encryption_at_rest: p.child('encryption_at_rest').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      kibana_endpoint: p.child('kibana_endpoint').out,
      log_publishing_options: p.child('log_publishing_options').out,
      node_to_node_encryption: p.child('node_to_node_encryption').out,
      processing: p.child('processing').out,
      snapshot_options: p.child('snapshot_options').out,
      tags: p.child('tags').out,
      vpc_options: p.child('vpc_options').out,
    },
    elb(name, block): {
      local p = path(['data', 'aws_elb', name]),
      _: p.out._ {
        block: {
          data: {
            aws_elb: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      access_logs: p.child('access_logs').out,
      arn: p.child('arn').out,
      availability_zones: p.child('availability_zones').out,
      connection_draining: p.child('connection_draining').out,
      connection_draining_timeout: p.child('connection_draining_timeout').out,
      cross_zone_load_balancing: p.child('cross_zone_load_balancing').out,
      desync_mitigation_mode: p.child('desync_mitigation_mode').out,
      dns_name: p.child('dns_name').out,
      health_check: p.child('health_check').out,
      id: p.child('id').out,
      idle_timeout: p.child('idle_timeout').out,
      instances: p.child('instances').out,
      internal: p.child('internal').out,
      listener: p.child('listener').out,
      name: p.child('name').out,
      security_groups: p.child('security_groups').out,
      source_security_group: p.child('source_security_group').out,
      source_security_group_id: p.child('source_security_group_id').out,
      subnets: p.child('subnets').out,
      tags: p.child('tags').out,
      zone_id: p.child('zone_id').out,
    },
    elb_hosted_zone_id(name, block): {
      local p = path(['data', 'aws_elb_hosted_zone_id', name]),
      _: p.out._ {
        block: {
          data: {
            aws_elb_hosted_zone_id: {
              [name]: std.prune({
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      region: p.child('region').out,
    },
    elb_service_account(name, block): {
      local p = path(['data', 'aws_elb_service_account', name]),
      _: p.out._ {
        block: {
          data: {
            aws_elb_service_account: {
              [name]: std.prune({
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      region: p.child('region').out,
    },
    emr_release_labels(name, block): {
      local p = path(['data', 'aws_emr_release_labels', name]),
      _: p.out._ {
        block: {
          data: {
            aws_emr_release_labels: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      release_labels: p.child('release_labels').out,
    },
    emr_supported_instance_types(name, block): {
      local p = path(['data', 'aws_emr_supported_instance_types', name]),
      _: p.out._ {
        block: {
          data: {
            aws_emr_supported_instance_types: {
              [name]: std.prune({
                release_label: build.template(block.release_label),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      release_label: p.child('release_label').out,
    },
    emrcontainers_virtual_cluster(name, block): {
      local p = path(['data', 'aws_emrcontainers_virtual_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            aws_emrcontainers_virtual_cluster: {
              [name]: std.prune({
                virtual_cluster_id: build.template(block.virtual_cluster_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      container_provider: p.child('container_provider').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      name: p.child('name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      virtual_cluster_id: p.child('virtual_cluster_id').out,
    },
    fsx_ontap_file_system(name, block): {
      local p = path(['data', 'aws_fsx_ontap_file_system', name]),
      _: p.out._ {
        block: {
          data: {
            aws_fsx_ontap_file_system: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      automatic_backup_retention_days: p.child('automatic_backup_retention_days').out,
      daily_automatic_backup_start_time: p.child('daily_automatic_backup_start_time').out,
      deployment_type: p.child('deployment_type').out,
      disk_iops_configuration: p.child('disk_iops_configuration').out,
      dns_name: p.child('dns_name').out,
      endpoint_ip_address_range: p.child('endpoint_ip_address_range').out,
      endpoints: p.child('endpoints').out,
      ha_pairs: p.child('ha_pairs').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      network_interface_ids: p.child('network_interface_ids').out,
      owner_id: p.child('owner_id').out,
      preferred_subnet_id: p.child('preferred_subnet_id').out,
      route_table_ids: p.child('route_table_ids').out,
      storage_capacity: p.child('storage_capacity').out,
      storage_type: p.child('storage_type').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      throughput_capacity: p.child('throughput_capacity').out,
      throughput_capacity_per_ha_pair: p.child('throughput_capacity_per_ha_pair').out,
      vpc_id: p.child('vpc_id').out,
      weekly_maintenance_start_time: p.child('weekly_maintenance_start_time').out,
    },
    fsx_ontap_storage_virtual_machine(name, block): {
      local p = path(['data', 'aws_fsx_ontap_storage_virtual_machine', name]),
      _: p.out._ {
        block: {
          data: {
            aws_fsx_ontap_storage_virtual_machine: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      active_directory_configuration: p.child('active_directory_configuration').out,
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      endpoints: p.child('endpoints').out,
      file_system_id: p.child('file_system_id').out,
      id: p.child('id').out,
      lifecycle_status: p.child('lifecycle_status').out,
      lifecycle_transition_reason: p.child('lifecycle_transition_reason').out,
      name: p.child('name').out,
      subtype: p.child('subtype').out,
      tags: p.child('tags').out,
      uuid: p.child('uuid').out,
    },
    fsx_ontap_storage_virtual_machines(name, block): {
      local p = path(['data', 'aws_fsx_ontap_storage_virtual_machines', name]),
      _: p.out._ {
        block: {
          data: {
            aws_fsx_ontap_storage_virtual_machines: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
    },
    fsx_openzfs_snapshot(name, block): {
      local p = path(['data', 'aws_fsx_openzfs_snapshot', name]),
      _: p.out._ {
        block: {
          data: {
            aws_fsx_openzfs_snapshot: {
              [name]: std.prune({
                most_recent: build.template(std.get(block, 'most_recent', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                snapshot_ids: build.template(std.get(block, 'snapshot_ids', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      id: p.child('id').out,
      most_recent: p.child('most_recent').out,
      name: p.child('name').out,
      snapshot_id: p.child('snapshot_id').out,
      snapshot_ids: p.child('snapshot_ids').out,
      tags: p.child('tags').out,
      volume_id: p.child('volume_id').out,
    },
    fsx_windows_file_system(name, block): {
      local p = path(['data', 'aws_fsx_windows_file_system', name]),
      _: p.out._ {
        block: {
          data: {
            aws_fsx_windows_file_system: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      active_directory_id: p.child('active_directory_id').out,
      aliases: p.child('aliases').out,
      arn: p.child('arn').out,
      audit_log_configuration: p.child('audit_log_configuration').out,
      automatic_backup_retention_days: p.child('automatic_backup_retention_days').out,
      backup_id: p.child('backup_id').out,
      copy_tags_to_backups: p.child('copy_tags_to_backups').out,
      daily_automatic_backup_start_time: p.child('daily_automatic_backup_start_time').out,
      deployment_type: p.child('deployment_type').out,
      disk_iops_configuration: p.child('disk_iops_configuration').out,
      dns_name: p.child('dns_name').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      network_interface_ids: p.child('network_interface_ids').out,
      owner_id: p.child('owner_id').out,
      preferred_file_server_ip: p.child('preferred_file_server_ip').out,
      preferred_subnet_id: p.child('preferred_subnet_id').out,
      security_group_ids: p.child('security_group_ids').out,
      skip_final_backup: p.child('skip_final_backup').out,
      storage_capacity: p.child('storage_capacity').out,
      storage_type: p.child('storage_type').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      throughput_capacity: p.child('throughput_capacity').out,
      vpc_id: p.child('vpc_id').out,
      weekly_maintenance_start_time: p.child('weekly_maintenance_start_time').out,
    },
    globalaccelerator_accelerator(name, block): {
      local p = path(['data', 'aws_globalaccelerator_accelerator', name]),
      _: p.out._ {
        block: {
          data: {
            aws_globalaccelerator_accelerator: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attributes: p.child('attributes').out,
      dns_name: p.child('dns_name').out,
      dual_stack_dns_name: p.child('dual_stack_dns_name').out,
      enabled: p.child('enabled').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      id: p.child('id').out,
      ip_address_type: p.child('ip_address_type').out,
      ip_sets: p.child('ip_sets').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    globalaccelerator_custom_routing_accelerator(name, block): {
      local p = path(['data', 'aws_globalaccelerator_custom_routing_accelerator', name]),
      _: p.out._ {
        block: {
          data: {
            aws_globalaccelerator_custom_routing_accelerator: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attributes: p.child('attributes').out,
      dns_name: p.child('dns_name').out,
      enabled: p.child('enabled').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      id: p.child('id').out,
      ip_address_type: p.child('ip_address_type').out,
      ip_sets: p.child('ip_sets').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    glue_catalog_table(name, block): {
      local p = path(['data', 'aws_glue_catalog_table', name]),
      _: p.out._ {
        block: {
          data: {
            aws_glue_catalog_table: {
              [name]: std.prune({
                database_name: build.template(block.database_name),
                name: build.template(block.name),
                query_as_of_time: build.template(std.get(block, 'query_as_of_time', null, true)),
                transaction_id: build.template(std.get(block, 'transaction_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      catalog_id: p.child('catalog_id').out,
      database_name: p.child('database_name').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      parameters: p.child('parameters').out,
      partition_index: p.child('partition_index').out,
      partition_keys: p.child('partition_keys').out,
      query_as_of_time: p.child('query_as_of_time').out,
      retention: p.child('retention').out,
      storage_descriptor: p.child('storage_descriptor').out,
      table_type: p.child('table_type').out,
      target_table: p.child('target_table').out,
      transaction_id: p.child('transaction_id').out,
      view_expanded_text: p.child('view_expanded_text').out,
      view_original_text: p.child('view_original_text').out,
    },
    glue_connection(name, block): {
      local p = path(['data', 'aws_glue_connection', name]),
      _: p.out._ {
        block: {
          data: {
            aws_glue_connection: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      catalog_id: p.child('catalog_id').out,
      connection_properties: p.child('connection_properties').out,
      connection_type: p.child('connection_type').out,
      description: p.child('description').out,
      id: p.child('id').out,
      match_criteria: p.child('match_criteria').out,
      name: p.child('name').out,
      physical_connection_requirements: p.child('physical_connection_requirements').out,
      tags: p.child('tags').out,
    },
    glue_data_catalog_encryption_settings(name, block): {
      local p = path(['data', 'aws_glue_data_catalog_encryption_settings', name]),
      _: p.out._ {
        block: {
          data: {
            aws_glue_data_catalog_encryption_settings: {
              [name]: std.prune({
                catalog_id: build.template(block.catalog_id),
              }),
            },
          },
        },
      },
      catalog_id: p.child('catalog_id').out,
      data_catalog_encryption_settings: p.child('data_catalog_encryption_settings').out,
      id: p.child('id').out,
    },
    glue_registry(name, block): {
      local p = path(['data', 'aws_glue_registry', name]),
      _: p.out._ {
        block: {
          data: {
            aws_glue_registry: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      name: p.child('name').out,
    },
    glue_script(name, block): {
      local p = path(['data', 'aws_glue_script', name]),
      _: p.out._ {
        block: {
          data: {
            aws_glue_script: {
              [name]: std.prune({
                language: build.template(std.get(block, 'language', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      language: p.child('language').out,
      python_script: p.child('python_script').out,
      scala_code: p.child('scala_code').out,
    },
    grafana_workspace(name, block): {
      local p = path(['data', 'aws_grafana_workspace', name]),
      _: p.out._ {
        block: {
          data: {
            aws_grafana_workspace: {
              [name]: std.prune({
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      account_access_type: p.child('account_access_type').out,
      arn: p.child('arn').out,
      authentication_providers: p.child('authentication_providers').out,
      created_date: p.child('created_date').out,
      data_sources: p.child('data_sources').out,
      description: p.child('description').out,
      endpoint: p.child('endpoint').out,
      grafana_version: p.child('grafana_version').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      name: p.child('name').out,
      notification_destinations: p.child('notification_destinations').out,
      organization_role_name: p.child('organization_role_name').out,
      organizational_units: p.child('organizational_units').out,
      permission_type: p.child('permission_type').out,
      role_arn: p.child('role_arn').out,
      saml_configuration_status: p.child('saml_configuration_status').out,
      stack_set_name: p.child('stack_set_name').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
    },
    guardduty_detector(name, block): {
      local p = path(['data', 'aws_guardduty_detector', name]),
      _: p.out._ {
        block: {
          data: {
            aws_guardduty_detector: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      features: p.child('features').out,
      finding_publishing_frequency: p.child('finding_publishing_frequency').out,
      id: p.child('id').out,
      service_role_arn: p.child('service_role_arn').out,
      status: p.child('status').out,
    },
    guardduty_finding_ids(name, block): {
      local p = path(['data', 'aws_guardduty_finding_ids', name]),
      _: p.out._ {
        block: {
          data: {
            aws_guardduty_finding_ids: {
              [name]: std.prune({
                detector_id: build.template(block.detector_id),
              }),
            },
          },
        },
      },
      detector_id: p.child('detector_id').out,
      finding_ids: p.child('finding_ids').out,
      has_findings: p.child('has_findings').out,
      id: p.child('id').out,
    },
    iam_access_keys(name, block): {
      local p = path(['data', 'aws_iam_access_keys', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_access_keys: {
              [name]: std.prune({
                user: build.template(block.user),
              }),
            },
          },
        },
      },
      access_keys: p.child('access_keys').out,
      id: p.child('id').out,
      user: p.child('user').out,
    },
    iam_account_alias(name, block): {
      local p = path(['data', 'aws_iam_account_alias', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_account_alias: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      account_alias: p.child('account_alias').out,
      id: p.child('id').out,
    },
    iam_group(name, block): {
      local p = path(['data', 'aws_iam_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_group: {
              [name]: std.prune({
                group_name: build.template(block.group_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      group_id: p.child('group_id').out,
      group_name: p.child('group_name').out,
      id: p.child('id').out,
      path: p.child('path').out,
      users: p.child('users').out,
    },
    iam_instance_profile(name, block): {
      local p = path(['data', 'aws_iam_instance_profile', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_instance_profile: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      create_date: p.child('create_date').out,
      id: p.child('id').out,
      name: p.child('name').out,
      path: p.child('path').out,
      role_arn: p.child('role_arn').out,
      role_id: p.child('role_id').out,
      role_name: p.child('role_name').out,
    },
    iam_instance_profiles(name, block): {
      local p = path(['data', 'aws_iam_instance_profiles', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_instance_profiles: {
              [name]: std.prune({
                role_name: build.template(block.role_name),
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      names: p.child('names').out,
      paths: p.child('paths').out,
      role_name: p.child('role_name').out,
    },
    iam_openid_connect_provider(name, block): {
      local p = path(['data', 'aws_iam_openid_connect_provider', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_openid_connect_provider: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      client_id_list: p.child('client_id_list').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      thumbprint_list: p.child('thumbprint_list').out,
      url: p.child('url').out,
    },
    iam_policy(name, block): {
      local p = path(['data', 'aws_iam_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_policy: {
              [name]: std.prune({
                path_prefix: build.template(std.get(block, 'path_prefix', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attachment_count: p.child('attachment_count').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      path: p.child('path').out,
      path_prefix: p.child('path_prefix').out,
      policy: p.child('policy').out,
      policy_id: p.child('policy_id').out,
      tags: p.child('tags').out,
    },
    iam_policy_document(name, block): {
      local p = path(['data', 'aws_iam_policy_document', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_policy_document: {
              [name]: std.prune({
                override_json: build.template(std.get(block, 'override_json', null, true)),
                override_policy_documents: build.template(std.get(block, 'override_policy_documents', null, true)),
                policy_id: build.template(std.get(block, 'policy_id', null, true)),
                source_json: build.template(std.get(block, 'source_json', null, true)),
                source_policy_documents: build.template(std.get(block, 'source_policy_documents', null, true)),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      json: p.child('json').out,
      minified_json: p.child('minified_json').out,
      override_json: p.child('override_json').out,
      override_policy_documents: p.child('override_policy_documents').out,
      policy_id: p.child('policy_id').out,
      source_json: p.child('source_json').out,
      source_policy_documents: p.child('source_policy_documents').out,
      version: p.child('version').out,
    },
    iam_principal_policy_simulation(name, block): {
      local p = path(['data', 'aws_iam_principal_policy_simulation', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_principal_policy_simulation: {
              [name]: std.prune({
                action_names: build.template(block.action_names),
                additional_policies_json: build.template(std.get(block, 'additional_policies_json', null, true)),
                caller_arn: build.template(std.get(block, 'caller_arn', null, true)),
                permissions_boundary_policies_json: build.template(std.get(block, 'permissions_boundary_policies_json', null, true)),
                policy_source_arn: build.template(block.policy_source_arn),
                resource_arns: build.template(std.get(block, 'resource_arns', null, true)),
                resource_handling_option: build.template(std.get(block, 'resource_handling_option', null, true)),
                resource_owner_account_id: build.template(std.get(block, 'resource_owner_account_id', null, true)),
                resource_policy_json: build.template(std.get(block, 'resource_policy_json', null, true)),
              }),
            },
          },
        },
      },
      action_names: p.child('action_names').out,
      additional_policies_json: p.child('additional_policies_json').out,
      all_allowed: p.child('all_allowed').out,
      caller_arn: p.child('caller_arn').out,
      id: p.child('id').out,
      permissions_boundary_policies_json: p.child('permissions_boundary_policies_json').out,
      policy_source_arn: p.child('policy_source_arn').out,
      resource_arns: p.child('resource_arns').out,
      resource_handling_option: p.child('resource_handling_option').out,
      resource_owner_account_id: p.child('resource_owner_account_id').out,
      resource_policy_json: p.child('resource_policy_json').out,
      results: p.child('results').out,
    },
    iam_role(name, block): {
      local p = path(['data', 'aws_iam_role', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_role: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      assume_role_policy: p.child('assume_role_policy').out,
      create_date: p.child('create_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      max_session_duration: p.child('max_session_duration').out,
      name: p.child('name').out,
      path: p.child('path').out,
      permissions_boundary: p.child('permissions_boundary').out,
      role_last_used: p.child('role_last_used').out,
      tags: p.child('tags').out,
      unique_id: p.child('unique_id').out,
    },
    iam_roles(name, block): {
      local p = path(['data', 'aws_iam_roles', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_roles: {
              [name]: std.prune({
                name_regex: build.template(std.get(block, 'name_regex', null, true)),
                path_prefix: build.template(std.get(block, 'path_prefix', null, true)),
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      name_regex: p.child('name_regex').out,
      names: p.child('names').out,
      path_prefix: p.child('path_prefix').out,
    },
    iam_saml_provider(name, block): {
      local p = path(['data', 'aws_iam_saml_provider', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_saml_provider: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      create_date: p.child('create_date').out,
      id: p.child('id').out,
      name: p.child('name').out,
      saml_metadata_document: p.child('saml_metadata_document').out,
      tags: p.child('tags').out,
      valid_until: p.child('valid_until').out,
    },
    iam_server_certificate(name, block): {
      local p = path(['data', 'aws_iam_server_certificate', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_server_certificate: {
              [name]: std.prune({
                latest: build.template(std.get(block, 'latest', null, true)),
                name_prefix: build.template(std.get(block, 'name_prefix', null, true)),
                path_prefix: build.template(std.get(block, 'path_prefix', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      certificate_body: p.child('certificate_body').out,
      certificate_chain: p.child('certificate_chain').out,
      expiration_date: p.child('expiration_date').out,
      id: p.child('id').out,
      latest: p.child('latest').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      path: p.child('path').out,
      path_prefix: p.child('path_prefix').out,
      upload_date: p.child('upload_date').out,
    },
    iam_session_context(name, block): {
      local p = path(['data', 'aws_iam_session_context', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_session_context: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      issuer_arn: p.child('issuer_arn').out,
      issuer_id: p.child('issuer_id').out,
      issuer_name: p.child('issuer_name').out,
      session_name: p.child('session_name').out,
    },
    iam_user(name, block): {
      local p = path(['data', 'aws_iam_user', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_user: {
              [name]: std.prune({
                user_name: build.template(block.user_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      path: p.child('path').out,
      permissions_boundary: p.child('permissions_boundary').out,
      tags: p.child('tags').out,
      user_id: p.child('user_id').out,
      user_name: p.child('user_name').out,
    },
    iam_user_ssh_key(name, block): {
      local p = path(['data', 'aws_iam_user_ssh_key', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_user_ssh_key: {
              [name]: std.prune({
                encoding: build.template(block.encoding),
                ssh_public_key_id: build.template(block.ssh_public_key_id),
                username: build.template(block.username),
              }),
            },
          },
        },
      },
      encoding: p.child('encoding').out,
      fingerprint: p.child('fingerprint').out,
      id: p.child('id').out,
      public_key: p.child('public_key').out,
      ssh_public_key_id: p.child('ssh_public_key_id').out,
      status: p.child('status').out,
      username: p.child('username').out,
    },
    iam_users(name, block): {
      local p = path(['data', 'aws_iam_users', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iam_users: {
              [name]: std.prune({
                name_regex: build.template(std.get(block, 'name_regex', null, true)),
                path_prefix: build.template(std.get(block, 'path_prefix', null, true)),
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      name_regex: p.child('name_regex').out,
      names: p.child('names').out,
      path_prefix: p.child('path_prefix').out,
    },
    identitystore_group(name, block): {
      local p = path(['data', 'aws_identitystore_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_identitystore_group: {
              [name]: std.prune({
                identity_store_id: build.template(block.identity_store_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      display_name: p.child('display_name').out,
      external_ids: p.child('external_ids').out,
      group_id: p.child('group_id').out,
      id: p.child('id').out,
      identity_store_id: p.child('identity_store_id').out,
    },
    identitystore_groups(name, block): {
      local p = path(['data', 'aws_identitystore_groups', name]),
      _: p.out._ {
        block: {
          data: {
            aws_identitystore_groups: {
              [name]: std.prune({
                identity_store_id: build.template(block.identity_store_id),
              }),
            },
          },
        },
      },
      groups: p.child('groups').out,
      identity_store_id: p.child('identity_store_id').out,
    },
    identitystore_user(name, block): {
      local p = path(['data', 'aws_identitystore_user', name]),
      _: p.out._ {
        block: {
          data: {
            aws_identitystore_user: {
              [name]: std.prune({
                identity_store_id: build.template(block.identity_store_id),
              }),
            },
          },
        },
      },
      addresses: p.child('addresses').out,
      display_name: p.child('display_name').out,
      emails: p.child('emails').out,
      external_ids: p.child('external_ids').out,
      id: p.child('id').out,
      identity_store_id: p.child('identity_store_id').out,
      locale: p.child('locale').out,
      name: p.child('name').out,
      nickname: p.child('nickname').out,
      phone_numbers: p.child('phone_numbers').out,
      preferred_language: p.child('preferred_language').out,
      profile_url: p.child('profile_url').out,
      timezone: p.child('timezone').out,
      title: p.child('title').out,
      user_id: p.child('user_id').out,
      user_name: p.child('user_name').out,
      user_type: p.child('user_type').out,
    },
    imagebuilder_component(name, block): {
      local p = path(['data', 'aws_imagebuilder_component', name]),
      _: p.out._ {
        block: {
          data: {
            aws_imagebuilder_component: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      change_description: p.child('change_description').out,
      data: p.child('data').out,
      date_created: p.child('date_created').out,
      description: p.child('description').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      platform: p.child('platform').out,
      supported_os_versions: p.child('supported_os_versions').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      version: p.child('version').out,
    },
    imagebuilder_components(name, block): {
      local p = path(['data', 'aws_imagebuilder_components', name]),
      _: p.out._ {
        block: {
          data: {
            aws_imagebuilder_components: {
              [name]: std.prune({
                owner: build.template(std.get(block, 'owner', null, true)),
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      names: p.child('names').out,
      owner: p.child('owner').out,
    },
    imagebuilder_container_recipe(name, block): {
      local p = path(['data', 'aws_imagebuilder_container_recipe', name]),
      _: p.out._ {
        block: {
          data: {
            aws_imagebuilder_container_recipe: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      component: p.child('component').out,
      container_type: p.child('container_type').out,
      date_created: p.child('date_created').out,
      description: p.child('description').out,
      dockerfile_template_data: p.child('dockerfile_template_data').out,
      encrypted: p.child('encrypted').out,
      id: p.child('id').out,
      instance_configuration: p.child('instance_configuration').out,
      kms_key_id: p.child('kms_key_id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      parent_image: p.child('parent_image').out,
      platform: p.child('platform').out,
      tags: p.child('tags').out,
      target_repository: p.child('target_repository').out,
      version: p.child('version').out,
      working_directory: p.child('working_directory').out,
    },
    imagebuilder_container_recipes(name, block): {
      local p = path(['data', 'aws_imagebuilder_container_recipes', name]),
      _: p.out._ {
        block: {
          data: {
            aws_imagebuilder_container_recipes: {
              [name]: std.prune({
                owner: build.template(std.get(block, 'owner', null, true)),
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      names: p.child('names').out,
      owner: p.child('owner').out,
    },
    imagebuilder_distribution_configuration(name, block): {
      local p = path(['data', 'aws_imagebuilder_distribution_configuration', name]),
      _: p.out._ {
        block: {
          data: {
            aws_imagebuilder_distribution_configuration: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      date_created: p.child('date_created').out,
      date_updated: p.child('date_updated').out,
      description: p.child('description').out,
      distribution: p.child('distribution').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    imagebuilder_distribution_configurations(name, block): {
      local p = path(['data', 'aws_imagebuilder_distribution_configurations', name]),
      _: p.out._ {
        block: {
          data: {
            aws_imagebuilder_distribution_configurations: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      names: p.child('names').out,
    },
    imagebuilder_image(name, block): {
      local p = path(['data', 'aws_imagebuilder_image', name]),
      _: p.out._ {
        block: {
          data: {
            aws_imagebuilder_image: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      build_version_arn: p.child('build_version_arn').out,
      container_recipe_arn: p.child('container_recipe_arn').out,
      date_created: p.child('date_created').out,
      distribution_configuration_arn: p.child('distribution_configuration_arn').out,
      enhanced_image_metadata_enabled: p.child('enhanced_image_metadata_enabled').out,
      id: p.child('id').out,
      image_recipe_arn: p.child('image_recipe_arn').out,
      image_scanning_configuration: p.child('image_scanning_configuration').out,
      image_tests_configuration: p.child('image_tests_configuration').out,
      infrastructure_configuration_arn: p.child('infrastructure_configuration_arn').out,
      name: p.child('name').out,
      os_version: p.child('os_version').out,
      output_resources: p.child('output_resources').out,
      platform: p.child('platform').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    imagebuilder_image_pipeline(name, block): {
      local p = path(['data', 'aws_imagebuilder_image_pipeline', name]),
      _: p.out._ {
        block: {
          data: {
            aws_imagebuilder_image_pipeline: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      container_recipe_arn: p.child('container_recipe_arn').out,
      date_created: p.child('date_created').out,
      date_last_run: p.child('date_last_run').out,
      date_next_run: p.child('date_next_run').out,
      date_updated: p.child('date_updated').out,
      description: p.child('description').out,
      distribution_configuration_arn: p.child('distribution_configuration_arn').out,
      enhanced_image_metadata_enabled: p.child('enhanced_image_metadata_enabled').out,
      id: p.child('id').out,
      image_recipe_arn: p.child('image_recipe_arn').out,
      image_scanning_configuration: p.child('image_scanning_configuration').out,
      image_tests_configuration: p.child('image_tests_configuration').out,
      infrastructure_configuration_arn: p.child('infrastructure_configuration_arn').out,
      name: p.child('name').out,
      platform: p.child('platform').out,
      schedule: p.child('schedule').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
    },
    imagebuilder_image_pipelines(name, block): {
      local p = path(['data', 'aws_imagebuilder_image_pipelines', name]),
      _: p.out._ {
        block: {
          data: {
            aws_imagebuilder_image_pipelines: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      names: p.child('names').out,
    },
    imagebuilder_image_recipe(name, block): {
      local p = path(['data', 'aws_imagebuilder_image_recipe', name]),
      _: p.out._ {
        block: {
          data: {
            aws_imagebuilder_image_recipe: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      block_device_mapping: p.child('block_device_mapping').out,
      component: p.child('component').out,
      date_created: p.child('date_created').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      parent_image: p.child('parent_image').out,
      platform: p.child('platform').out,
      tags: p.child('tags').out,
      user_data_base64: p.child('user_data_base64').out,
      version: p.child('version').out,
      working_directory: p.child('working_directory').out,
    },
    imagebuilder_image_recipes(name, block): {
      local p = path(['data', 'aws_imagebuilder_image_recipes', name]),
      _: p.out._ {
        block: {
          data: {
            aws_imagebuilder_image_recipes: {
              [name]: std.prune({
                owner: build.template(std.get(block, 'owner', null, true)),
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      names: p.child('names').out,
      owner: p.child('owner').out,
    },
    imagebuilder_infrastructure_configuration(name, block): {
      local p = path(['data', 'aws_imagebuilder_infrastructure_configuration', name]),
      _: p.out._ {
        block: {
          data: {
            aws_imagebuilder_infrastructure_configuration: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      date_created: p.child('date_created').out,
      date_updated: p.child('date_updated').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_metadata_options: p.child('instance_metadata_options').out,
      instance_profile_name: p.child('instance_profile_name').out,
      instance_types: p.child('instance_types').out,
      key_pair: p.child('key_pair').out,
      logging: p.child('logging').out,
      name: p.child('name').out,
      resource_tags: p.child('resource_tags').out,
      security_group_ids: p.child('security_group_ids').out,
      sns_topic_arn: p.child('sns_topic_arn').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      terminate_instance_on_failure: p.child('terminate_instance_on_failure').out,
    },
    imagebuilder_infrastructure_configurations(name, block): {
      local p = path(['data', 'aws_imagebuilder_infrastructure_configurations', name]),
      _: p.out._ {
        block: {
          data: {
            aws_imagebuilder_infrastructure_configurations: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      names: p.child('names').out,
    },
    inspector_rules_packages(name, block): {
      local p = path(['data', 'aws_inspector_rules_packages', name]),
      _: p.out._ {
        block: {
          data: {
            aws_inspector_rules_packages: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
    },
    instance(name, block): {
      local p = path(['data', 'aws_instance', name]),
      _: p.out._ {
        block: {
          data: {
            aws_instance: {
              [name]: std.prune({
                get_password_data: build.template(std.get(block, 'get_password_data', null, true)),
                get_user_data: build.template(std.get(block, 'get_user_data', null, true)),
                instance_id: build.template(std.get(block, 'instance_id', null, true)),
              }),
            },
          },
        },
      },
      ami: p.child('ami').out,
      arn: p.child('arn').out,
      associate_public_ip_address: p.child('associate_public_ip_address').out,
      availability_zone: p.child('availability_zone').out,
      credit_specification: p.child('credit_specification').out,
      disable_api_stop: p.child('disable_api_stop').out,
      disable_api_termination: p.child('disable_api_termination').out,
      ebs_block_device: p.child('ebs_block_device').out,
      ebs_optimized: p.child('ebs_optimized').out,
      enclave_options: p.child('enclave_options').out,
      ephemeral_block_device: p.child('ephemeral_block_device').out,
      get_password_data: p.child('get_password_data').out,
      get_user_data: p.child('get_user_data').out,
      host_id: p.child('host_id').out,
      host_resource_group_arn: p.child('host_resource_group_arn').out,
      iam_instance_profile: p.child('iam_instance_profile').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      instance_state: p.child('instance_state').out,
      instance_tags: p.child('instance_tags').out,
      instance_type: p.child('instance_type').out,
      ipv6_addresses: p.child('ipv6_addresses').out,
      key_name: p.child('key_name').out,
      launch_time: p.child('launch_time').out,
      maintenance_options: p.child('maintenance_options').out,
      metadata_options: p.child('metadata_options').out,
      monitoring: p.child('monitoring').out,
      network_interface_id: p.child('network_interface_id').out,
      outpost_arn: p.child('outpost_arn').out,
      password_data: p.child('password_data').out,
      placement_group: p.child('placement_group').out,
      placement_partition_number: p.child('placement_partition_number').out,
      private_dns: p.child('private_dns').out,
      private_dns_name_options: p.child('private_dns_name_options').out,
      private_ip: p.child('private_ip').out,
      public_dns: p.child('public_dns').out,
      public_ip: p.child('public_ip').out,
      root_block_device: p.child('root_block_device').out,
      secondary_private_ips: p.child('secondary_private_ips').out,
      security_groups: p.child('security_groups').out,
      source_dest_check: p.child('source_dest_check').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      tenancy: p.child('tenancy').out,
      user_data: p.child('user_data').out,
      user_data_base64: p.child('user_data_base64').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    instances(name, block): {
      local p = path(['data', 'aws_instances', name]),
      _: p.out._ {
        block: {
          data: {
            aws_instances: {
              [name]: std.prune({
                instance_state_names: build.template(std.get(block, 'instance_state_names', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      instance_state_names: p.child('instance_state_names').out,
      instance_tags: p.child('instance_tags').out,
      ipv6_addresses: p.child('ipv6_addresses').out,
      private_ips: p.child('private_ips').out,
      public_ips: p.child('public_ips').out,
    },
    internet_gateway(name, block): {
      local p = path(['data', 'aws_internet_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            aws_internet_gateway: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attachments: p.child('attachments').out,
      id: p.child('id').out,
      internet_gateway_id: p.child('internet_gateway_id').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
    },
    iot_endpoint(name, block): {
      local p = path(['data', 'aws_iot_endpoint', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iot_endpoint: {
              [name]: std.prune({
                endpoint_type: build.template(std.get(block, 'endpoint_type', null, true)),
              }),
            },
          },
        },
      },
      endpoint_address: p.child('endpoint_address').out,
      endpoint_type: p.child('endpoint_type').out,
      id: p.child('id').out,
    },
    iot_registration_code(name, block): {
      local p = path(['data', 'aws_iot_registration_code', name]),
      _: p.out._ {
        block: {
          data: {
            aws_iot_registration_code: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      registration_code: p.child('registration_code').out,
    },
    ip_ranges(name, block): {
      local p = path(['data', 'aws_ip_ranges', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ip_ranges: {
              [name]: std.prune({
                regions: build.template(std.get(block, 'regions', null, true)),
                services: build.template(block.services),
                url: build.template(std.get(block, 'url', null, true)),
              }),
            },
          },
        },
      },
      cidr_blocks: p.child('cidr_blocks').out,
      create_date: p.child('create_date').out,
      id: p.child('id').out,
      ipv6_cidr_blocks: p.child('ipv6_cidr_blocks').out,
      regions: p.child('regions').out,
      services: p.child('services').out,
      sync_token: p.child('sync_token').out,
      url: p.child('url').out,
    },
    ivs_stream_key(name, block): {
      local p = path(['data', 'aws_ivs_stream_key', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ivs_stream_key: {
              [name]: std.prune({
                channel_arn: build.template(block.channel_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      channel_arn: p.child('channel_arn').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      value: p.child('value').out,
    },
    kendra_experience(name, block): {
      local p = path(['data', 'aws_kendra_experience', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kendra_experience: {
              [name]: std.prune({
                experience_id: build.template(block.experience_id),
                index_id: build.template(block.index_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      configuration: p.child('configuration').out,
      created_at: p.child('created_at').out,
      description: p.child('description').out,
      endpoints: p.child('endpoints').out,
      error_message: p.child('error_message').out,
      experience_id: p.child('experience_id').out,
      id: p.child('id').out,
      index_id: p.child('index_id').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      status: p.child('status').out,
      updated_at: p.child('updated_at').out,
    },
    kendra_faq(name, block): {
      local p = path(['data', 'aws_kendra_faq', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kendra_faq: {
              [name]: std.prune({
                faq_id: build.template(block.faq_id),
                index_id: build.template(block.index_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      description: p.child('description').out,
      error_message: p.child('error_message').out,
      faq_id: p.child('faq_id').out,
      file_format: p.child('file_format').out,
      id: p.child('id').out,
      index_id: p.child('index_id').out,
      language_code: p.child('language_code').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      s3_path: p.child('s3_path').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      updated_at: p.child('updated_at').out,
    },
    kendra_index(name, block): {
      local p = path(['data', 'aws_kendra_index', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kendra_index: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      capacity_units: p.child('capacity_units').out,
      created_at: p.child('created_at').out,
      description: p.child('description').out,
      document_metadata_configuration_updates: p.child('document_metadata_configuration_updates').out,
      edition: p.child('edition').out,
      error_message: p.child('error_message').out,
      id: p.child('id').out,
      index_statistics: p.child('index_statistics').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      server_side_encryption_configuration: p.child('server_side_encryption_configuration').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      updated_at: p.child('updated_at').out,
      user_context_policy: p.child('user_context_policy').out,
      user_group_resolution_configuration: p.child('user_group_resolution_configuration').out,
      user_token_configurations: p.child('user_token_configurations').out,
    },
    kendra_query_suggestions_block_list(name, block): {
      local p = path(['data', 'aws_kendra_query_suggestions_block_list', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kendra_query_suggestions_block_list: {
              [name]: std.prune({
                index_id: build.template(block.index_id),
                query_suggestions_block_list_id: build.template(block.query_suggestions_block_list_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      description: p.child('description').out,
      error_message: p.child('error_message').out,
      file_size_bytes: p.child('file_size_bytes').out,
      id: p.child('id').out,
      index_id: p.child('index_id').out,
      item_count: p.child('item_count').out,
      name: p.child('name').out,
      query_suggestions_block_list_id: p.child('query_suggestions_block_list_id').out,
      role_arn: p.child('role_arn').out,
      source_s3_path: p.child('source_s3_path').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      updated_at: p.child('updated_at').out,
    },
    kendra_thesaurus(name, block): {
      local p = path(['data', 'aws_kendra_thesaurus', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kendra_thesaurus: {
              [name]: std.prune({
                index_id: build.template(block.index_id),
                thesaurus_id: build.template(block.thesaurus_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      description: p.child('description').out,
      error_message: p.child('error_message').out,
      file_size_bytes: p.child('file_size_bytes').out,
      id: p.child('id').out,
      index_id: p.child('index_id').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      source_s3_path: p.child('source_s3_path').out,
      status: p.child('status').out,
      synonym_rule_count: p.child('synonym_rule_count').out,
      tags: p.child('tags').out,
      term_count: p.child('term_count').out,
      thesaurus_id: p.child('thesaurus_id').out,
      updated_at: p.child('updated_at').out,
    },
    key_pair(name, block): {
      local p = path(['data', 'aws_key_pair', name]),
      _: p.out._ {
        block: {
          data: {
            aws_key_pair: {
              [name]: std.prune({
                include_public_key: build.template(std.get(block, 'include_public_key', null, true)),
                key_name: build.template(std.get(block, 'key_name', null, true)),
                key_pair_id: build.template(std.get(block, 'key_pair_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      create_time: p.child('create_time').out,
      fingerprint: p.child('fingerprint').out,
      id: p.child('id').out,
      include_public_key: p.child('include_public_key').out,
      key_name: p.child('key_name').out,
      key_pair_id: p.child('key_pair_id').out,
      key_type: p.child('key_type').out,
      public_key: p.child('public_key').out,
      tags: p.child('tags').out,
    },
    kinesis_firehose_delivery_stream(name, block): {
      local p = path(['data', 'aws_kinesis_firehose_delivery_stream', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kinesis_firehose_delivery_stream: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    kinesis_stream(name, block): {
      local p = path(['data', 'aws_kinesis_stream', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kinesis_stream: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      closed_shards: p.child('closed_shards').out,
      creation_timestamp: p.child('creation_timestamp').out,
      encryption_type: p.child('encryption_type').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      name: p.child('name').out,
      open_shards: p.child('open_shards').out,
      retention_period: p.child('retention_period').out,
      shard_level_metrics: p.child('shard_level_metrics').out,
      status: p.child('status').out,
      stream_mode_details: p.child('stream_mode_details').out,
      tags: p.child('tags').out,
    },
    kinesis_stream_consumer(name, block): {
      local p = path(['data', 'aws_kinesis_stream_consumer', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kinesis_stream_consumer: {
              [name]: std.prune({
                stream_arn: build.template(block.stream_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_timestamp: p.child('creation_timestamp').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
      stream_arn: p.child('stream_arn').out,
    },
    kms_alias(name, block): {
      local p = path(['data', 'aws_kms_alias', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kms_alias: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      target_key_arn: p.child('target_key_arn').out,
      target_key_id: p.child('target_key_id').out,
    },
    kms_ciphertext(name, block): {
      local p = path(['data', 'aws_kms_ciphertext', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kms_ciphertext: {
              [name]: std.prune({
                context: build.template(std.get(block, 'context', null, true)),
                key_id: build.template(block.key_id),
                plaintext: build.template(block.plaintext),
              }),
            },
          },
        },
      },
      ciphertext_blob: p.child('ciphertext_blob').out,
      context: p.child('context').out,
      id: p.child('id').out,
      key_id: p.child('key_id').out,
      plaintext: p.child('plaintext').out,
    },
    kms_custom_key_store(name, block): {
      local p = path(['data', 'aws_kms_custom_key_store', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kms_custom_key_store: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      cloud_hsm_cluster_id: p.child('cloud_hsm_cluster_id').out,
      connection_state: p.child('connection_state').out,
      creation_date: p.child('creation_date').out,
      custom_key_store_id: p.child('custom_key_store_id').out,
      custom_key_store_name: p.child('custom_key_store_name').out,
      id: p.child('id').out,
      trust_anchor_certificate: p.child('trust_anchor_certificate').out,
    },
    kms_key(name, block): {
      local p = path(['data', 'aws_kms_key', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kms_key: {
              [name]: std.prune({
                grant_tokens: build.template(std.get(block, 'grant_tokens', null, true)),
                key_id: build.template(block.key_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      cloud_hsm_cluster_id: p.child('cloud_hsm_cluster_id').out,
      creation_date: p.child('creation_date').out,
      custom_key_store_id: p.child('custom_key_store_id').out,
      customer_master_key_spec: p.child('customer_master_key_spec').out,
      deletion_date: p.child('deletion_date').out,
      description: p.child('description').out,
      enabled: p.child('enabled').out,
      expiration_model: p.child('expiration_model').out,
      grant_tokens: p.child('grant_tokens').out,
      id: p.child('id').out,
      key_id: p.child('key_id').out,
      key_manager: p.child('key_manager').out,
      key_spec: p.child('key_spec').out,
      key_state: p.child('key_state').out,
      key_usage: p.child('key_usage').out,
      multi_region: p.child('multi_region').out,
      multi_region_configuration: p.child('multi_region_configuration').out,
      origin: p.child('origin').out,
      pending_deletion_window_in_days: p.child('pending_deletion_window_in_days').out,
      valid_to: p.child('valid_to').out,
      xks_key_configuration: p.child('xks_key_configuration').out,
    },
    kms_public_key(name, block): {
      local p = path(['data', 'aws_kms_public_key', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kms_public_key: {
              [name]: std.prune({
                grant_tokens: build.template(std.get(block, 'grant_tokens', null, true)),
                key_id: build.template(block.key_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      customer_master_key_spec: p.child('customer_master_key_spec').out,
      encryption_algorithms: p.child('encryption_algorithms').out,
      grant_tokens: p.child('grant_tokens').out,
      id: p.child('id').out,
      key_id: p.child('key_id').out,
      key_usage: p.child('key_usage').out,
      public_key: p.child('public_key').out,
      public_key_pem: p.child('public_key_pem').out,
      signing_algorithms: p.child('signing_algorithms').out,
    },
    kms_secret(name, block): {
      local p = path(['data', 'aws_kms_secret', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kms_secret: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    kms_secrets(name, block): {
      local p = path(['data', 'aws_kms_secrets', name]),
      _: p.out._ {
        block: {
          data: {
            aws_kms_secrets: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      plaintext: p.child('plaintext').out,
    },
    lakeformation_data_lake_settings(name, block): {
      local p = path(['data', 'aws_lakeformation_data_lake_settings', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lakeformation_data_lake_settings: {
              [name]: std.prune({
                catalog_id: build.template(std.get(block, 'catalog_id', null, true)),
              }),
            },
          },
        },
      },
      admins: p.child('admins').out,
      allow_external_data_filtering: p.child('allow_external_data_filtering').out,
      allow_full_table_external_data_access: p.child('allow_full_table_external_data_access').out,
      authorized_session_tag_value_list: p.child('authorized_session_tag_value_list').out,
      catalog_id: p.child('catalog_id').out,
      create_database_default_permissions: p.child('create_database_default_permissions').out,
      create_table_default_permissions: p.child('create_table_default_permissions').out,
      external_data_filtering_allow_list: p.child('external_data_filtering_allow_list').out,
      id: p.child('id').out,
      parameters: p.child('parameters').out,
      read_only_admins: p.child('read_only_admins').out,
      trusted_resource_owners: p.child('trusted_resource_owners').out,
    },
    lakeformation_permissions(name, block): {
      local p = path(['data', 'aws_lakeformation_permissions', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lakeformation_permissions: {
              [name]: std.prune({
                catalog_id: build.template(std.get(block, 'catalog_id', null, true)),
                catalog_resource: build.template(std.get(block, 'catalog_resource', null, true)),
                principal: build.template(block.principal),
              }),
            },
          },
        },
      },
      catalog_id: p.child('catalog_id').out,
      catalog_resource: p.child('catalog_resource').out,
      id: p.child('id').out,
      permissions: p.child('permissions').out,
      permissions_with_grant_option: p.child('permissions_with_grant_option').out,
      principal: p.child('principal').out,
    },
    lakeformation_resource(name, block): {
      local p = path(['data', 'aws_lakeformation_resource', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lakeformation_resource: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      last_modified: p.child('last_modified').out,
      role_arn: p.child('role_arn').out,
    },
    lambda_alias(name, block): {
      local p = path(['data', 'aws_lambda_alias', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lambda_alias: {
              [name]: std.prune({
                function_name: build.template(block.function_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      function_name: p.child('function_name').out,
      function_version: p.child('function_version').out,
      id: p.child('id').out,
      invoke_arn: p.child('invoke_arn').out,
      name: p.child('name').out,
    },
    lambda_code_signing_config(name, block): {
      local p = path(['data', 'aws_lambda_code_signing_config', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lambda_code_signing_config: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      allowed_publishers: p.child('allowed_publishers').out,
      arn: p.child('arn').out,
      config_id: p.child('config_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_modified: p.child('last_modified').out,
      policies: p.child('policies').out,
    },
    lambda_function(name, block): {
      local p = path(['data', 'aws_lambda_function', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lambda_function: {
              [name]: std.prune({
                function_name: build.template(block.function_name),
                qualifier: build.template(std.get(block, 'qualifier', null, true)),
              }),
            },
          },
        },
      },
      architectures: p.child('architectures').out,
      arn: p.child('arn').out,
      code_sha256: p.child('code_sha256').out,
      code_signing_config_arn: p.child('code_signing_config_arn').out,
      dead_letter_config: p.child('dead_letter_config').out,
      description: p.child('description').out,
      environment: p.child('environment').out,
      ephemeral_storage: p.child('ephemeral_storage').out,
      file_system_config: p.child('file_system_config').out,
      function_name: p.child('function_name').out,
      handler: p.child('handler').out,
      id: p.child('id').out,
      image_uri: p.child('image_uri').out,
      invoke_arn: p.child('invoke_arn').out,
      kms_key_arn: p.child('kms_key_arn').out,
      last_modified: p.child('last_modified').out,
      layers: p.child('layers').out,
      logging_config: p.child('logging_config').out,
      memory_size: p.child('memory_size').out,
      qualified_arn: p.child('qualified_arn').out,
      qualified_invoke_arn: p.child('qualified_invoke_arn').out,
      qualifier: p.child('qualifier').out,
      reserved_concurrent_executions: p.child('reserved_concurrent_executions').out,
      role: p.child('role').out,
      runtime: p.child('runtime').out,
      signing_job_arn: p.child('signing_job_arn').out,
      signing_profile_version_arn: p.child('signing_profile_version_arn').out,
      source_code_hash: p.child('source_code_hash').out,
      source_code_size: p.child('source_code_size').out,
      tags: p.child('tags').out,
      timeout: p.child('timeout').out,
      tracing_config: p.child('tracing_config').out,
      version: p.child('version').out,
      vpc_config: p.child('vpc_config').out,
    },
    lambda_function_url(name, block): {
      local p = path(['data', 'aws_lambda_function_url', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lambda_function_url: {
              [name]: std.prune({
                function_name: build.template(block.function_name),
                qualifier: build.template(std.get(block, 'qualifier', null, true)),
              }),
            },
          },
        },
      },
      authorization_type: p.child('authorization_type').out,
      cors: p.child('cors').out,
      creation_time: p.child('creation_time').out,
      function_arn: p.child('function_arn').out,
      function_name: p.child('function_name').out,
      function_url: p.child('function_url').out,
      id: p.child('id').out,
      invoke_mode: p.child('invoke_mode').out,
      last_modified_time: p.child('last_modified_time').out,
      qualifier: p.child('qualifier').out,
      url_id: p.child('url_id').out,
    },
    lambda_functions(name, block): {
      local p = path(['data', 'aws_lambda_functions', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lambda_functions: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      function_arns: p.child('function_arns').out,
      function_names: p.child('function_names').out,
      id: p.child('id').out,
    },
    lambda_invocation(name, block): {
      local p = path(['data', 'aws_lambda_invocation', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lambda_invocation: {
              [name]: std.prune({
                function_name: build.template(block.function_name),
                input: build.template(block.input),
                qualifier: build.template(std.get(block, 'qualifier', null, true)),
              }),
            },
          },
        },
      },
      function_name: p.child('function_name').out,
      id: p.child('id').out,
      input: p.child('input').out,
      qualifier: p.child('qualifier').out,
      result: p.child('result').out,
    },
    lambda_layer_version(name, block): {
      local p = path(['data', 'aws_lambda_layer_version', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lambda_layer_version: {
              [name]: std.prune({
                compatible_architecture: build.template(std.get(block, 'compatible_architecture', null, true)),
                compatible_runtime: build.template(std.get(block, 'compatible_runtime', null, true)),
                layer_name: build.template(block.layer_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      code_sha256: p.child('code_sha256').out,
      compatible_architecture: p.child('compatible_architecture').out,
      compatible_architectures: p.child('compatible_architectures').out,
      compatible_runtime: p.child('compatible_runtime').out,
      compatible_runtimes: p.child('compatible_runtimes').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      layer_arn: p.child('layer_arn').out,
      layer_name: p.child('layer_name').out,
      license_info: p.child('license_info').out,
      signing_job_arn: p.child('signing_job_arn').out,
      signing_profile_version_arn: p.child('signing_profile_version_arn').out,
      source_code_hash: p.child('source_code_hash').out,
      source_code_size: p.child('source_code_size').out,
      version: p.child('version').out,
    },
    launch_configuration(name, block): {
      local p = path(['data', 'aws_launch_configuration', name]),
      _: p.out._ {
        block: {
          data: {
            aws_launch_configuration: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      associate_public_ip_address: p.child('associate_public_ip_address').out,
      ebs_block_device: p.child('ebs_block_device').out,
      ebs_optimized: p.child('ebs_optimized').out,
      enable_monitoring: p.child('enable_monitoring').out,
      ephemeral_block_device: p.child('ephemeral_block_device').out,
      iam_instance_profile: p.child('iam_instance_profile').out,
      id: p.child('id').out,
      image_id: p.child('image_id').out,
      instance_type: p.child('instance_type').out,
      key_name: p.child('key_name').out,
      metadata_options: p.child('metadata_options').out,
      name: p.child('name').out,
      placement_tenancy: p.child('placement_tenancy').out,
      root_block_device: p.child('root_block_device').out,
      security_groups: p.child('security_groups').out,
      spot_price: p.child('spot_price').out,
      user_data: p.child('user_data').out,
    },
    launch_template(name, block): {
      local p = path(['data', 'aws_launch_template', name]),
      _: p.out._ {
        block: {
          data: {
            aws_launch_template: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      block_device_mappings: p.child('block_device_mappings').out,
      capacity_reservation_specification: p.child('capacity_reservation_specification').out,
      cpu_options: p.child('cpu_options').out,
      credit_specification: p.child('credit_specification').out,
      default_version: p.child('default_version').out,
      description: p.child('description').out,
      disable_api_stop: p.child('disable_api_stop').out,
      disable_api_termination: p.child('disable_api_termination').out,
      ebs_optimized: p.child('ebs_optimized').out,
      elastic_gpu_specifications: p.child('elastic_gpu_specifications').out,
      elastic_inference_accelerator: p.child('elastic_inference_accelerator').out,
      enclave_options: p.child('enclave_options').out,
      hibernation_options: p.child('hibernation_options').out,
      iam_instance_profile: p.child('iam_instance_profile').out,
      id: p.child('id').out,
      image_id: p.child('image_id').out,
      instance_initiated_shutdown_behavior: p.child('instance_initiated_shutdown_behavior').out,
      instance_market_options: p.child('instance_market_options').out,
      instance_requirements: p.child('instance_requirements').out,
      instance_type: p.child('instance_type').out,
      kernel_id: p.child('kernel_id').out,
      key_name: p.child('key_name').out,
      latest_version: p.child('latest_version').out,
      license_specification: p.child('license_specification').out,
      maintenance_options: p.child('maintenance_options').out,
      metadata_options: p.child('metadata_options').out,
      monitoring: p.child('monitoring').out,
      name: p.child('name').out,
      network_interfaces: p.child('network_interfaces').out,
      placement: p.child('placement').out,
      private_dns_name_options: p.child('private_dns_name_options').out,
      ram_disk_id: p.child('ram_disk_id').out,
      security_group_names: p.child('security_group_names').out,
      tag_specifications: p.child('tag_specifications').out,
      tags: p.child('tags').out,
      user_data: p.child('user_data').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    lb(name, block): {
      local p = path(['data', 'aws_lb', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lb: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      access_logs: p.child('access_logs').out,
      arn: p.child('arn').out,
      arn_suffix: p.child('arn_suffix').out,
      client_keep_alive: p.child('client_keep_alive').out,
      connection_logs: p.child('connection_logs').out,
      customer_owned_ipv4_pool: p.child('customer_owned_ipv4_pool').out,
      desync_mitigation_mode: p.child('desync_mitigation_mode').out,
      dns_name: p.child('dns_name').out,
      dns_record_client_routing_policy: p.child('dns_record_client_routing_policy').out,
      drop_invalid_header_fields: p.child('drop_invalid_header_fields').out,
      enable_cross_zone_load_balancing: p.child('enable_cross_zone_load_balancing').out,
      enable_deletion_protection: p.child('enable_deletion_protection').out,
      enable_http2: p.child('enable_http2').out,
      enable_tls_version_and_cipher_suite_headers: p.child('enable_tls_version_and_cipher_suite_headers').out,
      enable_waf_fail_open: p.child('enable_waf_fail_open').out,
      enable_xff_client_port: p.child('enable_xff_client_port').out,
      enable_zonal_shift: p.child('enable_zonal_shift').out,
      enforce_security_group_inbound_rules_on_private_link_traffic: p.child('enforce_security_group_inbound_rules_on_private_link_traffic').out,
      id: p.child('id').out,
      idle_timeout: p.child('idle_timeout').out,
      internal: p.child('internal').out,
      ip_address_type: p.child('ip_address_type').out,
      load_balancer_type: p.child('load_balancer_type').out,
      name: p.child('name').out,
      preserve_host_header: p.child('preserve_host_header').out,
      security_groups: p.child('security_groups').out,
      subnet_mapping: p.child('subnet_mapping').out,
      subnets: p.child('subnets').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
      xff_header_processing_mode: p.child('xff_header_processing_mode').out,
      zone_id: p.child('zone_id').out,
    },
    lb_hosted_zone_id(name, block): {
      local p = path(['data', 'aws_lb_hosted_zone_id', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lb_hosted_zone_id: {
              [name]: std.prune({
                load_balancer_type: build.template(std.get(block, 'load_balancer_type', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      load_balancer_type: p.child('load_balancer_type').out,
      region: p.child('region').out,
    },
    lb_listener(name, block): {
      local p = path(['data', 'aws_lb_listener', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lb_listener: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      alpn_policy: p.child('alpn_policy').out,
      arn: p.child('arn').out,
      certificate_arn: p.child('certificate_arn').out,
      default_action: p.child('default_action').out,
      id: p.child('id').out,
      load_balancer_arn: p.child('load_balancer_arn').out,
      mutual_authentication: p.child('mutual_authentication').out,
      port: p.child('port').out,
      protocol: p.child('protocol').out,
      ssl_policy: p.child('ssl_policy').out,
      tags: p.child('tags').out,
    },
    lb_listener_rule(name, block): {
      local p = path(['data', 'aws_lb_listener_rule', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lb_listener_rule: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      listener_arn: p.child('listener_arn').out,
      priority: p.child('priority').out,
      tags: p.child('tags').out,
    },
    lb_target_group(name, block): {
      local p = path(['data', 'aws_lb_target_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lb_target_group: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      arn_suffix: p.child('arn_suffix').out,
      connection_termination: p.child('connection_termination').out,
      deregistration_delay: p.child('deregistration_delay').out,
      health_check: p.child('health_check').out,
      id: p.child('id').out,
      lambda_multi_value_headers_enabled: p.child('lambda_multi_value_headers_enabled').out,
      load_balancer_arns: p.child('load_balancer_arns').out,
      load_balancing_algorithm_type: p.child('load_balancing_algorithm_type').out,
      load_balancing_anomaly_mitigation: p.child('load_balancing_anomaly_mitigation').out,
      load_balancing_cross_zone_enabled: p.child('load_balancing_cross_zone_enabled').out,
      name: p.child('name').out,
      port: p.child('port').out,
      preserve_client_ip: p.child('preserve_client_ip').out,
      protocol: p.child('protocol').out,
      protocol_version: p.child('protocol_version').out,
      proxy_protocol_v2: p.child('proxy_protocol_v2').out,
      slow_start: p.child('slow_start').out,
      stickiness: p.child('stickiness').out,
      tags: p.child('tags').out,
      target_type: p.child('target_type').out,
      vpc_id: p.child('vpc_id').out,
    },
    lb_trust_store(name, block): {
      local p = path(['data', 'aws_lb_trust_store', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lb_trust_store: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    lbs(name, block): {
      local p = path(['data', 'aws_lbs', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lbs: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
    },
    lex_bot(name, block): {
      local p = path(['data', 'aws_lex_bot', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lex_bot: {
              [name]: std.prune({
                name: build.template(block.name),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      checksum: p.child('checksum').out,
      child_directed: p.child('child_directed').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      detect_sentiment: p.child('detect_sentiment').out,
      enable_model_improvements: p.child('enable_model_improvements').out,
      failure_reason: p.child('failure_reason').out,
      id: p.child('id').out,
      idle_session_ttl_in_seconds: p.child('idle_session_ttl_in_seconds').out,
      last_updated_date: p.child('last_updated_date').out,
      locale: p.child('locale').out,
      name: p.child('name').out,
      nlu_intent_confidence_threshold: p.child('nlu_intent_confidence_threshold').out,
      status: p.child('status').out,
      version: p.child('version').out,
      voice_id: p.child('voice_id').out,
    },
    lex_bot_alias(name, block): {
      local p = path(['data', 'aws_lex_bot_alias', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lex_bot_alias: {
              [name]: std.prune({
                bot_name: build.template(block.bot_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bot_name: p.child('bot_name').out,
      bot_version: p.child('bot_version').out,
      checksum: p.child('checksum').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      name: p.child('name').out,
    },
    lex_intent(name, block): {
      local p = path(['data', 'aws_lex_intent', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lex_intent: {
              [name]: std.prune({
                name: build.template(block.name),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      checksum: p.child('checksum').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      name: p.child('name').out,
      parent_intent_signature: p.child('parent_intent_signature').out,
      version: p.child('version').out,
    },
    lex_slot_type(name, block): {
      local p = path(['data', 'aws_lex_slot_type', name]),
      _: p.out._ {
        block: {
          data: {
            aws_lex_slot_type: {
              [name]: std.prune({
                name: build.template(block.name),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      checksum: p.child('checksum').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      enumeration_value: p.child('enumeration_value').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      name: p.child('name').out,
      value_selection_strategy: p.child('value_selection_strategy').out,
      version: p.child('version').out,
    },
    licensemanager_grants(name, block): {
      local p = path(['data', 'aws_licensemanager_grants', name]),
      _: p.out._ {
        block: {
          data: {
            aws_licensemanager_grants: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
    },
    licensemanager_received_license(name, block): {
      local p = path(['data', 'aws_licensemanager_received_license', name]),
      _: p.out._ {
        block: {
          data: {
            aws_licensemanager_received_license: {
              [name]: std.prune({
                license_arn: build.template(block.license_arn),
              }),
            },
          },
        },
      },
      beneficiary: p.child('beneficiary').out,
      consumption_configuration: p.child('consumption_configuration').out,
      create_time: p.child('create_time').out,
      entitlements: p.child('entitlements').out,
      home_region: p.child('home_region').out,
      id: p.child('id').out,
      issuer: p.child('issuer').out,
      license_arn: p.child('license_arn').out,
      license_metadata: p.child('license_metadata').out,
      license_name: p.child('license_name').out,
      product_name: p.child('product_name').out,
      product_sku: p.child('product_sku').out,
      received_metadata: p.child('received_metadata').out,
      status: p.child('status').out,
      validity: p.child('validity').out,
      version: p.child('version').out,
    },
    licensemanager_received_licenses(name, block): {
      local p = path(['data', 'aws_licensemanager_received_licenses', name]),
      _: p.out._ {
        block: {
          data: {
            aws_licensemanager_received_licenses: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
    },
    location_geofence_collection(name, block): {
      local p = path(['data', 'aws_location_geofence_collection', name]),
      _: p.out._ {
        block: {
          data: {
            aws_location_geofence_collection: {
              [name]: std.prune({
                collection_name: build.template(block.collection_name),
              }),
            },
          },
        },
      },
      collection_arn: p.child('collection_arn').out,
      collection_name: p.child('collection_name').out,
      create_time: p.child('create_time').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      tags: p.child('tags').out,
      update_time: p.child('update_time').out,
    },
    location_map(name, block): {
      local p = path(['data', 'aws_location_map', name]),
      _: p.out._ {
        block: {
          data: {
            aws_location_map: {
              [name]: std.prune({
                map_name: build.template(block.map_name),
              }),
            },
          },
        },
      },
      configuration: p.child('configuration').out,
      create_time: p.child('create_time').out,
      description: p.child('description').out,
      id: p.child('id').out,
      map_arn: p.child('map_arn').out,
      map_name: p.child('map_name').out,
      tags: p.child('tags').out,
      update_time: p.child('update_time').out,
    },
    location_place_index(name, block): {
      local p = path(['data', 'aws_location_place_index', name]),
      _: p.out._ {
        block: {
          data: {
            aws_location_place_index: {
              [name]: std.prune({
                index_name: build.template(block.index_name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').out,
      data_source: p.child('data_source').out,
      data_source_configuration: p.child('data_source_configuration').out,
      description: p.child('description').out,
      id: p.child('id').out,
      index_arn: p.child('index_arn').out,
      index_name: p.child('index_name').out,
      tags: p.child('tags').out,
      update_time: p.child('update_time').out,
    },
    location_route_calculator(name, block): {
      local p = path(['data', 'aws_location_route_calculator', name]),
      _: p.out._ {
        block: {
          data: {
            aws_location_route_calculator: {
              [name]: std.prune({
                calculator_name: build.template(block.calculator_name),
              }),
            },
          },
        },
      },
      calculator_arn: p.child('calculator_arn').out,
      calculator_name: p.child('calculator_name').out,
      create_time: p.child('create_time').out,
      data_source: p.child('data_source').out,
      description: p.child('description').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      update_time: p.child('update_time').out,
    },
    location_tracker(name, block): {
      local p = path(['data', 'aws_location_tracker', name]),
      _: p.out._ {
        block: {
          data: {
            aws_location_tracker: {
              [name]: std.prune({
                tracker_name: build.template(block.tracker_name),
              }),
            },
          },
        },
      },
      create_time: p.child('create_time').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      position_filtering: p.child('position_filtering').out,
      tags: p.child('tags').out,
      tracker_arn: p.child('tracker_arn').out,
      tracker_name: p.child('tracker_name').out,
      update_time: p.child('update_time').out,
    },
    location_tracker_association(name, block): {
      local p = path(['data', 'aws_location_tracker_association', name]),
      _: p.out._ {
        block: {
          data: {
            aws_location_tracker_association: {
              [name]: std.prune({
                consumer_arn: build.template(block.consumer_arn),
                tracker_name: build.template(block.tracker_name),
              }),
            },
          },
        },
      },
      consumer_arn: p.child('consumer_arn').out,
      id: p.child('id').out,
      tracker_name: p.child('tracker_name').out,
    },
    location_tracker_associations(name, block): {
      local p = path(['data', 'aws_location_tracker_associations', name]),
      _: p.out._ {
        block: {
          data: {
            aws_location_tracker_associations: {
              [name]: std.prune({
                tracker_name: build.template(block.tracker_name),
              }),
            },
          },
        },
      },
      consumer_arns: p.child('consumer_arns').out,
      id: p.child('id').out,
      tracker_name: p.child('tracker_name').out,
    },
    media_convert_queue(name, block): {
      local p = path(['data', 'aws_media_convert_queue', name]),
      _: p.out._ {
        block: {
          data: {
            aws_media_convert_queue: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
    },
    medialive_input(name, block): {
      local p = path(['data', 'aws_medialive_input', name]),
      _: p.out._ {
        block: {
          data: {
            aws_medialive_input: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      attached_channels: p.child('attached_channels').out,
      destinations: p.child('destinations').out,
      id: p.child('id').out,
      input_class: p.child('input_class').out,
      input_devices: p.child('input_devices').out,
      input_partner_ids: p.child('input_partner_ids').out,
      input_source_type: p.child('input_source_type').out,
      media_connect_flows: p.child('media_connect_flows').out,
      name: p.child('name').out,
      role_arn: p.child('role_arn').out,
      security_groups: p.child('security_groups').out,
      sources: p.child('sources').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
    },
    memorydb_acl(name, block): {
      local p = path(['data', 'aws_memorydb_acl', name]),
      _: p.out._ {
        block: {
          data: {
            aws_memorydb_acl: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      minimum_engine_version: p.child('minimum_engine_version').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      user_names: p.child('user_names').out,
    },
    memorydb_cluster(name, block): {
      local p = path(['data', 'aws_memorydb_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            aws_memorydb_cluster: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      acl_name: p.child('acl_name').out,
      arn: p.child('arn').out,
      auto_minor_version_upgrade: p.child('auto_minor_version_upgrade').out,
      cluster_endpoint: p.child('cluster_endpoint').out,
      data_tiering: p.child('data_tiering').out,
      description: p.child('description').out,
      engine_patch_version: p.child('engine_patch_version').out,
      engine_version: p.child('engine_version').out,
      final_snapshot_name: p.child('final_snapshot_name').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      maintenance_window: p.child('maintenance_window').out,
      name: p.child('name').out,
      node_type: p.child('node_type').out,
      num_replicas_per_shard: p.child('num_replicas_per_shard').out,
      num_shards: p.child('num_shards').out,
      parameter_group_name: p.child('parameter_group_name').out,
      port: p.child('port').out,
      security_group_ids: p.child('security_group_ids').out,
      shards: p.child('shards').out,
      snapshot_retention_limit: p.child('snapshot_retention_limit').out,
      snapshot_window: p.child('snapshot_window').out,
      sns_topic_arn: p.child('sns_topic_arn').out,
      subnet_group_name: p.child('subnet_group_name').out,
      tags: p.child('tags').out,
      tls_enabled: p.child('tls_enabled').out,
    },
    memorydb_parameter_group(name, block): {
      local p = path(['data', 'aws_memorydb_parameter_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_memorydb_parameter_group: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      family: p.child('family').out,
      id: p.child('id').out,
      name: p.child('name').out,
      parameter: p.child('parameter').out,
      tags: p.child('tags').out,
    },
    memorydb_snapshot(name, block): {
      local p = path(['data', 'aws_memorydb_snapshot', name]),
      _: p.out._ {
        block: {
          data: {
            aws_memorydb_snapshot: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cluster_configuration: p.child('cluster_configuration').out,
      cluster_name: p.child('cluster_name').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      name: p.child('name').out,
      source: p.child('source').out,
      tags: p.child('tags').out,
    },
    memorydb_subnet_group(name, block): {
      local p = path(['data', 'aws_memorydb_subnet_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_memorydb_subnet_group: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    memorydb_user(name, block): {
      local p = path(['data', 'aws_memorydb_user', name]),
      _: p.out._ {
        block: {
          data: {
            aws_memorydb_user: {
              [name]: std.prune({
                user_name: build.template(block.user_name),
              }),
            },
          },
        },
      },
      access_string: p.child('access_string').out,
      arn: p.child('arn').out,
      authentication_mode: p.child('authentication_mode').out,
      id: p.child('id').out,
      minimum_engine_version: p.child('minimum_engine_version').out,
      tags: p.child('tags').out,
      user_name: p.child('user_name').out,
    },
    mq_broker(name, block): {
      local p = path(['data', 'aws_mq_broker', name]),
      _: p.out._ {
        block: {
          data: {
            aws_mq_broker: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      authentication_strategy: p.child('authentication_strategy').out,
      auto_minor_version_upgrade: p.child('auto_minor_version_upgrade').out,
      broker_id: p.child('broker_id').out,
      broker_name: p.child('broker_name').out,
      configuration: p.child('configuration').out,
      deployment_mode: p.child('deployment_mode').out,
      encryption_options: p.child('encryption_options').out,
      engine_type: p.child('engine_type').out,
      engine_version: p.child('engine_version').out,
      host_instance_type: p.child('host_instance_type').out,
      id: p.child('id').out,
      instances: p.child('instances').out,
      ldap_server_metadata: p.child('ldap_server_metadata').out,
      logs: p.child('logs').out,
      maintenance_window_start_time: p.child('maintenance_window_start_time').out,
      publicly_accessible: p.child('publicly_accessible').out,
      security_groups: p.child('security_groups').out,
      storage_type: p.child('storage_type').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      user: p.child('user').out,
    },
    mq_broker_engine_types(name, block): {
      local p = path(['data', 'aws_mq_broker_engine_types', name]),
      _: p.out._ {
        block: {
          data: {
            aws_mq_broker_engine_types: {
              [name]: std.prune({
                engine_type: build.template(std.get(block, 'engine_type', null, true)),
              }),
            },
          },
        },
      },
      broker_engine_types: p.child('broker_engine_types').out,
      engine_type: p.child('engine_type').out,
      id: p.child('id').out,
    },
    mq_broker_instance_type_offerings(name, block): {
      local p = path(['data', 'aws_mq_broker_instance_type_offerings', name]),
      _: p.out._ {
        block: {
          data: {
            aws_mq_broker_instance_type_offerings: {
              [name]: std.prune({
                engine_type: build.template(std.get(block, 'engine_type', null, true)),
                host_instance_type: build.template(std.get(block, 'host_instance_type', null, true)),
                storage_type: build.template(std.get(block, 'storage_type', null, true)),
              }),
            },
          },
        },
      },
      broker_instance_options: p.child('broker_instance_options').out,
      engine_type: p.child('engine_type').out,
      host_instance_type: p.child('host_instance_type').out,
      id: p.child('id').out,
      storage_type: p.child('storage_type').out,
    },
    msk_bootstrap_brokers(name, block): {
      local p = path(['data', 'aws_msk_bootstrap_brokers', name]),
      _: p.out._ {
        block: {
          data: {
            aws_msk_bootstrap_brokers: {
              [name]: std.prune({
                cluster_arn: build.template(block.cluster_arn),
              }),
            },
          },
        },
      },
      bootstrap_brokers: p.child('bootstrap_brokers').out,
      bootstrap_brokers_public_sasl_iam: p.child('bootstrap_brokers_public_sasl_iam').out,
      bootstrap_brokers_public_sasl_scram: p.child('bootstrap_brokers_public_sasl_scram').out,
      bootstrap_brokers_public_tls: p.child('bootstrap_brokers_public_tls').out,
      bootstrap_brokers_sasl_iam: p.child('bootstrap_brokers_sasl_iam').out,
      bootstrap_brokers_sasl_scram: p.child('bootstrap_brokers_sasl_scram').out,
      bootstrap_brokers_tls: p.child('bootstrap_brokers_tls').out,
      bootstrap_brokers_vpc_connectivity_sasl_iam: p.child('bootstrap_brokers_vpc_connectivity_sasl_iam').out,
      bootstrap_brokers_vpc_connectivity_sasl_scram: p.child('bootstrap_brokers_vpc_connectivity_sasl_scram').out,
      bootstrap_brokers_vpc_connectivity_tls: p.child('bootstrap_brokers_vpc_connectivity_tls').out,
      cluster_arn: p.child('cluster_arn').out,
      id: p.child('id').out,
    },
    msk_broker_nodes(name, block): {
      local p = path(['data', 'aws_msk_broker_nodes', name]),
      _: p.out._ {
        block: {
          data: {
            aws_msk_broker_nodes: {
              [name]: std.prune({
                cluster_arn: build.template(block.cluster_arn),
              }),
            },
          },
        },
      },
      cluster_arn: p.child('cluster_arn').out,
      id: p.child('id').out,
      node_info_list: p.child('node_info_list').out,
    },
    msk_cluster(name, block): {
      local p = path(['data', 'aws_msk_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            aws_msk_cluster: {
              [name]: std.prune({
                cluster_name: build.template(block.cluster_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bootstrap_brokers: p.child('bootstrap_brokers').out,
      bootstrap_brokers_public_sasl_iam: p.child('bootstrap_brokers_public_sasl_iam').out,
      bootstrap_brokers_public_sasl_scram: p.child('bootstrap_brokers_public_sasl_scram').out,
      bootstrap_brokers_public_tls: p.child('bootstrap_brokers_public_tls').out,
      bootstrap_brokers_sasl_iam: p.child('bootstrap_brokers_sasl_iam').out,
      bootstrap_brokers_sasl_scram: p.child('bootstrap_brokers_sasl_scram').out,
      bootstrap_brokers_tls: p.child('bootstrap_brokers_tls').out,
      broker_node_group_info: p.child('broker_node_group_info').out,
      cluster_name: p.child('cluster_name').out,
      cluster_uuid: p.child('cluster_uuid').out,
      id: p.child('id').out,
      kafka_version: p.child('kafka_version').out,
      number_of_broker_nodes: p.child('number_of_broker_nodes').out,
      tags: p.child('tags').out,
      zookeeper_connect_string: p.child('zookeeper_connect_string').out,
      zookeeper_connect_string_tls: p.child('zookeeper_connect_string_tls').out,
    },
    msk_configuration(name, block): {
      local p = path(['data', 'aws_msk_configuration', name]),
      _: p.out._ {
        block: {
          data: {
            aws_msk_configuration: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kafka_versions: p.child('kafka_versions').out,
      latest_revision: p.child('latest_revision').out,
      name: p.child('name').out,
      server_properties: p.child('server_properties').out,
    },
    msk_kafka_version(name, block): {
      local p = path(['data', 'aws_msk_kafka_version', name]),
      _: p.out._ {
        block: {
          data: {
            aws_msk_kafka_version: {
              [name]: std.prune({
                preferred_versions: build.template(std.get(block, 'preferred_versions', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      preferred_versions: p.child('preferred_versions').out,
      status: p.child('status').out,
      version: p.child('version').out,
    },
    msk_vpc_connection(name, block): {
      local p = path(['data', 'aws_msk_vpc_connection', name]),
      _: p.out._ {
        block: {
          data: {
            aws_msk_vpc_connection: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      authentication: p.child('authentication').out,
      client_subnets: p.child('client_subnets').out,
      id: p.child('id').out,
      security_groups: p.child('security_groups').out,
      tags: p.child('tags').out,
      target_cluster_arn: p.child('target_cluster_arn').out,
      vpc_id: p.child('vpc_id').out,
    },
    mskconnect_connector(name, block): {
      local p = path(['data', 'aws_mskconnect_connector', name]),
      _: p.out._ {
        block: {
          data: {
            aws_mskconnect_connector: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
    },
    mskconnect_custom_plugin(name, block): {
      local p = path(['data', 'aws_mskconnect_custom_plugin', name]),
      _: p.out._ {
        block: {
          data: {
            aws_mskconnect_custom_plugin: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      latest_revision: p.child('latest_revision').out,
      name: p.child('name').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
    },
    mskconnect_worker_configuration(name, block): {
      local p = path(['data', 'aws_mskconnect_worker_configuration', name]),
      _: p.out._ {
        block: {
          data: {
            aws_mskconnect_worker_configuration: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      latest_revision: p.child('latest_revision').out,
      name: p.child('name').out,
      properties_file_content: p.child('properties_file_content').out,
      tags: p.child('tags').out,
    },
    nat_gateway(name, block): {
      local p = path(['data', 'aws_nat_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            aws_nat_gateway: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      allocation_id: p.child('allocation_id').out,
      association_id: p.child('association_id').out,
      connectivity_type: p.child('connectivity_type').out,
      id: p.child('id').out,
      network_interface_id: p.child('network_interface_id').out,
      private_ip: p.child('private_ip').out,
      public_ip: p.child('public_ip').out,
      secondary_allocation_ids: p.child('secondary_allocation_ids').out,
      secondary_private_ip_address_count: p.child('secondary_private_ip_address_count').out,
      secondary_private_ip_addresses: p.child('secondary_private_ip_addresses').out,
      state: p.child('state').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    nat_gateways(name, block): {
      local p = path(['data', 'aws_nat_gateways', name]),
      _: p.out._ {
        block: {
          data: {
            aws_nat_gateways: {
              [name]: std.prune({
                vpc_id: build.template(std.get(block, 'vpc_id', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    neptune_engine_version(name, block): {
      local p = path(['data', 'aws_neptune_engine_version', name]),
      _: p.out._ {
        block: {
          data: {
            aws_neptune_engine_version: {
              [name]: std.prune({
                engine: build.template(std.get(block, 'engine', null, true)),
                preferred_versions: build.template(std.get(block, 'preferred_versions', null, true)),
              }),
            },
          },
        },
      },
      engine: p.child('engine').out,
      engine_description: p.child('engine_description').out,
      exportable_log_types: p.child('exportable_log_types').out,
      id: p.child('id').out,
      parameter_group_family: p.child('parameter_group_family').out,
      preferred_versions: p.child('preferred_versions').out,
      supported_timezones: p.child('supported_timezones').out,
      supports_log_exports_to_cloudwatch: p.child('supports_log_exports_to_cloudwatch').out,
      supports_read_replica: p.child('supports_read_replica').out,
      valid_upgrade_targets: p.child('valid_upgrade_targets').out,
      version: p.child('version').out,
      version_description: p.child('version_description').out,
    },
    neptune_orderable_db_instance(name, block): {
      local p = path(['data', 'aws_neptune_orderable_db_instance', name]),
      _: p.out._ {
        block: {
          data: {
            aws_neptune_orderable_db_instance: {
              [name]: std.prune({
                engine: build.template(std.get(block, 'engine', null, true)),
                license_model: build.template(std.get(block, 'license_model', null, true)),
                preferred_instance_classes: build.template(std.get(block, 'preferred_instance_classes', null, true)),
              }),
            },
          },
        },
      },
      availability_zones: p.child('availability_zones').out,
      engine: p.child('engine').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      instance_class: p.child('instance_class').out,
      license_model: p.child('license_model').out,
      max_iops_per_db_instance: p.child('max_iops_per_db_instance').out,
      max_iops_per_gib: p.child('max_iops_per_gib').out,
      max_storage_size: p.child('max_storage_size').out,
      min_iops_per_db_instance: p.child('min_iops_per_db_instance').out,
      min_iops_per_gib: p.child('min_iops_per_gib').out,
      min_storage_size: p.child('min_storage_size').out,
      multi_az_capable: p.child('multi_az_capable').out,
      preferred_instance_classes: p.child('preferred_instance_classes').out,
      read_replica_capable: p.child('read_replica_capable').out,
      storage_type: p.child('storage_type').out,
      supports_enhanced_monitoring: p.child('supports_enhanced_monitoring').out,
      supports_iam_database_authentication: p.child('supports_iam_database_authentication').out,
      supports_iops: p.child('supports_iops').out,
      supports_performance_insights: p.child('supports_performance_insights').out,
      supports_storage_encryption: p.child('supports_storage_encryption').out,
      vpc: p.child('vpc').out,
    },
    network_acls(name, block): {
      local p = path(['data', 'aws_network_acls', name]),
      _: p.out._ {
        block: {
          data: {
            aws_network_acls: {
              [name]: std.prune({
                vpc_id: build.template(std.get(block, 'vpc_id', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    network_interface(name, block): {
      local p = path(['data', 'aws_network_interface', name]),
      _: p.out._ {
        block: {
          data: {
            aws_network_interface: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      association: p.child('association').out,
      attachment: p.child('attachment').out,
      availability_zone: p.child('availability_zone').out,
      description: p.child('description').out,
      id: p.child('id').out,
      interface_type: p.child('interface_type').out,
      ipv6_addresses: p.child('ipv6_addresses').out,
      mac_address: p.child('mac_address').out,
      outpost_arn: p.child('outpost_arn').out,
      owner_id: p.child('owner_id').out,
      private_dns_name: p.child('private_dns_name').out,
      private_ip: p.child('private_ip').out,
      private_ips: p.child('private_ips').out,
      requester_id: p.child('requester_id').out,
      security_groups: p.child('security_groups').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    network_interfaces(name, block): {
      local p = path(['data', 'aws_network_interfaces', name]),
      _: p.out._ {
        block: {
          data: {
            aws_network_interfaces: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    networkfirewall_firewall(name, block): {
      local p = path(['data', 'aws_networkfirewall_firewall', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkfirewall_firewall: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      delete_protection: p.child('delete_protection').out,
      description: p.child('description').out,
      encryption_configuration: p.child('encryption_configuration').out,
      firewall_policy_arn: p.child('firewall_policy_arn').out,
      firewall_policy_change_protection: p.child('firewall_policy_change_protection').out,
      firewall_status: p.child('firewall_status').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subnet_change_protection: p.child('subnet_change_protection').out,
      subnet_mapping: p.child('subnet_mapping').out,
      tags: p.child('tags').out,
      update_token: p.child('update_token').out,
      vpc_id: p.child('vpc_id').out,
    },
    networkfirewall_firewall_policy(name, block): {
      local p = path(['data', 'aws_networkfirewall_firewall_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkfirewall_firewall_policy: {
              [name]: std.prune({
                arn: build.template(std.get(block, 'arn', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      firewall_policy: p.child('firewall_policy').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      update_token: p.child('update_token').out,
    },
    networkfirewall_resource_policy(name, block): {
      local p = path(['data', 'aws_networkfirewall_resource_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkfirewall_resource_policy: {
              [name]: std.prune({
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      resource_arn: p.child('resource_arn').out,
    },
    networkmanager_connection(name, block): {
      local p = path(['data', 'aws_networkmanager_connection', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkmanager_connection: {
              [name]: std.prune({
                connection_id: build.template(block.connection_id),
                global_network_id: build.template(block.global_network_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      connected_device_id: p.child('connected_device_id').out,
      connected_link_id: p.child('connected_link_id').out,
      connection_id: p.child('connection_id').out,
      description: p.child('description').out,
      device_id: p.child('device_id').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      link_id: p.child('link_id').out,
      tags: p.child('tags').out,
    },
    networkmanager_connections(name, block): {
      local p = path(['data', 'aws_networkmanager_connections', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkmanager_connections: {
              [name]: std.prune({
                device_id: build.template(std.get(block, 'device_id', null, true)),
                global_network_id: build.template(block.global_network_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      device_id: p.child('device_id').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    networkmanager_core_network_policy_document(name, block): {
      local p = path(['data', 'aws_networkmanager_core_network_policy_document', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkmanager_core_network_policy_document: {
              [name]: std.prune({
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      json: p.child('json').out,
      version: p.child('version').out,
    },
    networkmanager_device(name, block): {
      local p = path(['data', 'aws_networkmanager_device', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkmanager_device: {
              [name]: std.prune({
                device_id: build.template(block.device_id),
                global_network_id: build.template(block.global_network_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_location: p.child('aws_location').out,
      description: p.child('description').out,
      device_id: p.child('device_id').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      model: p.child('model').out,
      serial_number: p.child('serial_number').out,
      site_id: p.child('site_id').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
      vendor: p.child('vendor').out,
    },
    networkmanager_devices(name, block): {
      local p = path(['data', 'aws_networkmanager_devices', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkmanager_devices: {
              [name]: std.prune({
                global_network_id: build.template(block.global_network_id),
                site_id: build.template(std.get(block, 'site_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      ids: p.child('ids').out,
      site_id: p.child('site_id').out,
      tags: p.child('tags').out,
    },
    networkmanager_global_network(name, block): {
      local p = path(['data', 'aws_networkmanager_global_network', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkmanager_global_network: {
              [name]: std.prune({
                global_network_id: build.template(block.global_network_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
    },
    networkmanager_global_networks(name, block): {
      local p = path(['data', 'aws_networkmanager_global_networks', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkmanager_global_networks: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    networkmanager_link(name, block): {
      local p = path(['data', 'aws_networkmanager_link', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkmanager_link: {
              [name]: std.prune({
                global_network_id: build.template(block.global_network_id),
                link_id: build.template(block.link_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bandwidth: p.child('bandwidth').out,
      description: p.child('description').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      link_id: p.child('link_id').out,
      provider_name: p.child('provider_name').out,
      site_id: p.child('site_id').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
    },
    networkmanager_links(name, block): {
      local p = path(['data', 'aws_networkmanager_links', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkmanager_links: {
              [name]: std.prune({
                global_network_id: build.template(block.global_network_id),
                provider_name: build.template(std.get(block, 'provider_name', null, true)),
                site_id: build.template(std.get(block, 'site_id', null, true)),
                tags: build.template(std.get(block, 'tags', null, true)),
                type: build.template(std.get(block, 'type', null, true)),
              }),
            },
          },
        },
      },
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      ids: p.child('ids').out,
      provider_name: p.child('provider_name').out,
      site_id: p.child('site_id').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
    },
    networkmanager_site(name, block): {
      local p = path(['data', 'aws_networkmanager_site', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkmanager_site: {
              [name]: std.prune({
                global_network_id: build.template(block.global_network_id),
                site_id: build.template(block.site_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      location: p.child('location').out,
      site_id: p.child('site_id').out,
      tags: p.child('tags').out,
    },
    networkmanager_sites(name, block): {
      local p = path(['data', 'aws_networkmanager_sites', name]),
      _: p.out._ {
        block: {
          data: {
            aws_networkmanager_sites: {
              [name]: std.prune({
                global_network_id: build.template(block.global_network_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      global_network_id: p.child('global_network_id').out,
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    oam_link(name, block): {
      local p = path(['data', 'aws_oam_link', name]),
      _: p.out._ {
        block: {
          data: {
            aws_oam_link: {
              [name]: std.prune({
                link_identifier: build.template(block.link_identifier),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      label: p.child('label').out,
      label_template: p.child('label_template').out,
      link_configuration: p.child('link_configuration').out,
      link_id: p.child('link_id').out,
      link_identifier: p.child('link_identifier').out,
      resource_types: p.child('resource_types').out,
      sink_arn: p.child('sink_arn').out,
      tags: p.child('tags').out,
    },
    oam_links(name, block): {
      local p = path(['data', 'aws_oam_links', name]),
      _: p.out._ {
        block: {
          data: {
            aws_oam_links: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
    },
    oam_sink(name, block): {
      local p = path(['data', 'aws_oam_sink', name]),
      _: p.out._ {
        block: {
          data: {
            aws_oam_sink: {
              [name]: std.prune({
                sink_identifier: build.template(block.sink_identifier),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      sink_id: p.child('sink_id').out,
      sink_identifier: p.child('sink_identifier').out,
      tags: p.child('tags').out,
    },
    oam_sinks(name, block): {
      local p = path(['data', 'aws_oam_sinks', name]),
      _: p.out._ {
        block: {
          data: {
            aws_oam_sinks: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
    },
    opensearch_domain(name, block): {
      local p = path(['data', 'aws_opensearch_domain', name]),
      _: p.out._ {
        block: {
          data: {
            aws_opensearch_domain: {
              [name]: std.prune({
                domain_name: build.template(block.domain_name),
              }),
            },
          },
        },
      },
      access_policies: p.child('access_policies').out,
      advanced_options: p.child('advanced_options').out,
      advanced_security_options: p.child('advanced_security_options').out,
      arn: p.child('arn').out,
      auto_tune_options: p.child('auto_tune_options').out,
      cluster_config: p.child('cluster_config').out,
      cognito_options: p.child('cognito_options').out,
      created: p.child('created').out,
      dashboard_endpoint: p.child('dashboard_endpoint').out,
      dashboard_endpoint_v2: p.child('dashboard_endpoint_v2').out,
      deleted: p.child('deleted').out,
      domain_endpoint_v2_hosted_zone_id: p.child('domain_endpoint_v2_hosted_zone_id').out,
      domain_id: p.child('domain_id').out,
      domain_name: p.child('domain_name').out,
      ebs_options: p.child('ebs_options').out,
      encryption_at_rest: p.child('encryption_at_rest').out,
      endpoint: p.child('endpoint').out,
      endpoint_v2: p.child('endpoint_v2').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      ip_address_type: p.child('ip_address_type').out,
      kibana_endpoint: p.child('kibana_endpoint').out,
      log_publishing_options: p.child('log_publishing_options').out,
      node_to_node_encryption: p.child('node_to_node_encryption').out,
      processing: p.child('processing').out,
      snapshot_options: p.child('snapshot_options').out,
      software_update_options: p.child('software_update_options').out,
      tags: p.child('tags').out,
      vpc_options: p.child('vpc_options').out,
    },
    opensearchserverless_access_policy(name, block): {
      local p = path(['data', 'aws_opensearchserverless_access_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_opensearchserverless_access_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      policy: p.child('policy').out,
      policy_version: p.child('policy_version').out,
      type: p.child('type').out,
    },
    opensearchserverless_collection(name, block): {
      local p = path(['data', 'aws_opensearchserverless_collection', name]),
      _: p.out._ {
        block: {
          data: {
            aws_opensearchserverless_collection: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      collection_endpoint: p.child('collection_endpoint').out,
      created_date: p.child('created_date').out,
      dashboard_endpoint: p.child('dashboard_endpoint').out,
      description: p.child('description').out,
      failure_code: p.child('failure_code').out,
      failure_message: p.child('failure_message').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      last_modified_date: p.child('last_modified_date').out,
      name: p.child('name').out,
      standby_replicas: p.child('standby_replicas').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
    },
    opensearchserverless_lifecycle_policy(name, block): {
      local p = path(['data', 'aws_opensearchserverless_lifecycle_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_opensearchserverless_lifecycle_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_modified_date: p.child('last_modified_date').out,
      name: p.child('name').out,
      policy: p.child('policy').out,
      policy_version: p.child('policy_version').out,
      type: p.child('type').out,
    },
    opensearchserverless_security_config(name, block): {
      local p = path(['data', 'aws_opensearchserverless_security_config', name]),
      _: p.out._ {
        block: {
          data: {
            aws_opensearchserverless_security_config: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      config_version: p.child('config_version').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_modified_date: p.child('last_modified_date').out,
      type: p.child('type').out,
    },
    opensearchserverless_security_policy(name, block): {
      local p = path(['data', 'aws_opensearchserverless_security_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_opensearchserverless_security_policy: {
              [name]: std.prune({
                name: build.template(block.name),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_modified_date: p.child('last_modified_date').out,
      name: p.child('name').out,
      policy: p.child('policy').out,
      policy_version: p.child('policy_version').out,
      type: p.child('type').out,
    },
    opensearchserverless_vpc_endpoint(name, block): {
      local p = path(['data', 'aws_opensearchserverless_vpc_endpoint', name]),
      _: p.out._ {
        block: {
          data: {
            aws_opensearchserverless_vpc_endpoint: {
              [name]: std.prune({
                vpc_endpoint_id: build.template(block.vpc_endpoint_id),
              }),
            },
          },
        },
      },
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      name: p.child('name').out,
      security_group_ids: p.child('security_group_ids').out,
      subnet_ids: p.child('subnet_ids').out,
      vpc_endpoint_id: p.child('vpc_endpoint_id').out,
      vpc_id: p.child('vpc_id').out,
    },
    organizations_delegated_administrators(name, block): {
      local p = path(['data', 'aws_organizations_delegated_administrators', name]),
      _: p.out._ {
        block: {
          data: {
            aws_organizations_delegated_administrators: {
              [name]: std.prune({
                service_principal: build.template(std.get(block, 'service_principal', null, true)),
              }),
            },
          },
        },
      },
      delegated_administrators: p.child('delegated_administrators').out,
      id: p.child('id').out,
      service_principal: p.child('service_principal').out,
    },
    organizations_delegated_services(name, block): {
      local p = path(['data', 'aws_organizations_delegated_services', name]),
      _: p.out._ {
        block: {
          data: {
            aws_organizations_delegated_services: {
              [name]: std.prune({
                account_id: build.template(block.account_id),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      delegated_services: p.child('delegated_services').out,
      id: p.child('id').out,
    },
    organizations_organization(name, block): {
      local p = path(['data', 'aws_organizations_organization', name]),
      _: p.out._ {
        block: {
          data: {
            aws_organizations_organization: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      accounts: p.child('accounts').out,
      arn: p.child('arn').out,
      aws_service_access_principals: p.child('aws_service_access_principals').out,
      enabled_policy_types: p.child('enabled_policy_types').out,
      feature_set: p.child('feature_set').out,
      id: p.child('id').out,
      master_account_arn: p.child('master_account_arn').out,
      master_account_email: p.child('master_account_email').out,
      master_account_id: p.child('master_account_id').out,
      master_account_name: p.child('master_account_name').out,
      non_master_accounts: p.child('non_master_accounts').out,
      roots: p.child('roots').out,
    },
    organizations_organizational_unit(name, block): {
      local p = path(['data', 'aws_organizations_organizational_unit', name]),
      _: p.out._ {
        block: {
          data: {
            aws_organizations_organizational_unit: {
              [name]: std.prune({
                name: build.template(block.name),
                parent_id: build.template(block.parent_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      parent_id: p.child('parent_id').out,
    },
    organizations_organizational_unit_child_accounts(name, block): {
      local p = path(['data', 'aws_organizations_organizational_unit_child_accounts', name]),
      _: p.out._ {
        block: {
          data: {
            aws_organizations_organizational_unit_child_accounts: {
              [name]: std.prune({
                parent_id: build.template(block.parent_id),
              }),
            },
          },
        },
      },
      accounts: p.child('accounts').out,
      id: p.child('id').out,
      parent_id: p.child('parent_id').out,
    },
    organizations_organizational_unit_descendant_accounts(name, block): {
      local p = path(['data', 'aws_organizations_organizational_unit_descendant_accounts', name]),
      _: p.out._ {
        block: {
          data: {
            aws_organizations_organizational_unit_descendant_accounts: {
              [name]: std.prune({
                parent_id: build.template(block.parent_id),
              }),
            },
          },
        },
      },
      accounts: p.child('accounts').out,
      id: p.child('id').out,
      parent_id: p.child('parent_id').out,
    },
    organizations_organizational_unit_descendant_organizational_units(name, block): {
      local p = path(['data', 'aws_organizations_organizational_unit_descendant_organizational_units', name]),
      _: p.out._ {
        block: {
          data: {
            aws_organizations_organizational_unit_descendant_organizational_units: {
              [name]: std.prune({
                parent_id: build.template(block.parent_id),
              }),
            },
          },
        },
      },
      children: p.child('children').out,
      id: p.child('id').out,
      parent_id: p.child('parent_id').out,
    },
    organizations_organizational_units(name, block): {
      local p = path(['data', 'aws_organizations_organizational_units', name]),
      _: p.out._ {
        block: {
          data: {
            aws_organizations_organizational_units: {
              [name]: std.prune({
                parent_id: build.template(block.parent_id),
              }),
            },
          },
        },
      },
      children: p.child('children').out,
      id: p.child('id').out,
      parent_id: p.child('parent_id').out,
    },
    organizations_policies(name, block): {
      local p = path(['data', 'aws_organizations_policies', name]),
      _: p.out._ {
        block: {
          data: {
            aws_organizations_policies: {
              [name]: std.prune({
                filter: build.template(block.filter),
              }),
            },
          },
        },
      },
      filter: p.child('filter').out,
      id: p.child('id').out,
      ids: p.child('ids').out,
    },
    organizations_policies_for_target(name, block): {
      local p = path(['data', 'aws_organizations_policies_for_target', name]),
      _: p.out._ {
        block: {
          data: {
            aws_organizations_policies_for_target: {
              [name]: std.prune({
                filter: build.template(block.filter),
                target_id: build.template(block.target_id),
              }),
            },
          },
        },
      },
      filter: p.child('filter').out,
      id: p.child('id').out,
      ids: p.child('ids').out,
      target_id: p.child('target_id').out,
    },
    organizations_policy(name, block): {
      local p = path(['data', 'aws_organizations_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_organizations_policy: {
              [name]: std.prune({
                policy_id: build.template(block.policy_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_managed: p.child('aws_managed').out,
      content: p.child('content').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      policy_id: p.child('policy_id').out,
      type: p.child('type').out,
    },
    organizations_resource_tags(name, block): {
      local p = path(['data', 'aws_organizations_resource_tags', name]),
      _: p.out._ {
        block: {
          data: {
            aws_organizations_resource_tags: {
              [name]: std.prune({
                resource_id: build.template(block.resource_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      resource_id: p.child('resource_id').out,
      tags: p.child('tags').out,
    },
    outposts_asset(name, block): {
      local p = path(['data', 'aws_outposts_asset', name]),
      _: p.out._ {
        block: {
          data: {
            aws_outposts_asset: {
              [name]: std.prune({
                arn: build.template(block.arn),
                asset_id: build.template(block.asset_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      asset_id: p.child('asset_id').out,
      asset_type: p.child('asset_type').out,
      host_id: p.child('host_id').out,
      id: p.child('id').out,
      rack_elevation: p.child('rack_elevation').out,
      rack_id: p.child('rack_id').out,
    },
    outposts_assets(name, block): {
      local p = path(['data', 'aws_outposts_assets', name]),
      _: p.out._ {
        block: {
          data: {
            aws_outposts_assets: {
              [name]: std.prune({
                arn: build.template(block.arn),
                host_id_filter: build.template(std.get(block, 'host_id_filter', null, true)),
                status_id_filter: build.template(std.get(block, 'status_id_filter', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      asset_ids: p.child('asset_ids').out,
      host_id_filter: p.child('host_id_filter').out,
      id: p.child('id').out,
      status_id_filter: p.child('status_id_filter').out,
    },
    outposts_outpost(name, block): {
      local p = path(['data', 'aws_outposts_outpost', name]),
      _: p.out._ {
        block: {
          data: {
            aws_outposts_outpost: {
              [name]: std.prune({
                owner_id: build.template(std.get(block, 'owner_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zone: p.child('availability_zone').out,
      availability_zone_id: p.child('availability_zone_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      lifecycle_status: p.child('lifecycle_status').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      site_arn: p.child('site_arn').out,
      site_id: p.child('site_id').out,
      supported_hardware_type: p.child('supported_hardware_type').out,
      tags: p.child('tags').out,
    },
    outposts_outpost_instance_type(name, block): {
      local p = path(['data', 'aws_outposts_outpost_instance_type', name]),
      _: p.out._ {
        block: {
          data: {
            aws_outposts_outpost_instance_type: {
              [name]: std.prune({
                arn: build.template(block.arn),
                preferred_instance_types: build.template(std.get(block, 'preferred_instance_types', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      instance_type: p.child('instance_type').out,
      preferred_instance_types: p.child('preferred_instance_types').out,
    },
    outposts_outpost_instance_types(name, block): {
      local p = path(['data', 'aws_outposts_outpost_instance_types', name]),
      _: p.out._ {
        block: {
          data: {
            aws_outposts_outpost_instance_types: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      instance_types: p.child('instance_types').out,
    },
    outposts_outposts(name, block): {
      local p = path(['data', 'aws_outposts_outposts', name]),
      _: p.out._ {
        block: {
          data: {
            aws_outposts_outposts: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      availability_zone: p.child('availability_zone').out,
      availability_zone_id: p.child('availability_zone_id').out,
      id: p.child('id').out,
      ids: p.child('ids').out,
      owner_id: p.child('owner_id').out,
      site_id: p.child('site_id').out,
    },
    outposts_site(name, block): {
      local p = path(['data', 'aws_outposts_site', name]),
      _: p.out._ {
        block: {
          data: {
            aws_outposts_site: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    outposts_sites(name, block): {
      local p = path(['data', 'aws_outposts_sites', name]),
      _: p.out._ {
        block: {
          data: {
            aws_outposts_sites: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
    },
    partition(name, block): {
      local p = path(['data', 'aws_partition', name]),
      _: p.out._ {
        block: {
          data: {
            aws_partition: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      dns_suffix: p.child('dns_suffix').out,
      id: p.child('id').out,
      partition: p.child('partition').out,
      reverse_dns_prefix: p.child('reverse_dns_prefix').out,
    },
    polly_voices(name, block): {
      local p = path(['data', 'aws_polly_voices', name]),
      _: p.out._ {
        block: {
          data: {
            aws_polly_voices: {
              [name]: std.prune({
                engine: build.template(std.get(block, 'engine', null, true)),
                include_additional_language_codes: build.template(std.get(block, 'include_additional_language_codes', null, true)),
                language_code: build.template(std.get(block, 'language_code', null, true)),
              }),
            },
          },
        },
      },
      engine: p.child('engine').out,
      id: p.child('id').out,
      include_additional_language_codes: p.child('include_additional_language_codes').out,
      language_code: p.child('language_code').out,
    },
    prefix_list(name, block): {
      local p = path(['data', 'aws_prefix_list', name]),
      _: p.out._ {
        block: {
          data: {
            aws_prefix_list: {
              [name]: std.prune({
                prefix_list_id: build.template(std.get(block, 'prefix_list_id', null, true)),
              }),
            },
          },
        },
      },
      cidr_blocks: p.child('cidr_blocks').out,
      id: p.child('id').out,
      name: p.child('name').out,
      prefix_list_id: p.child('prefix_list_id').out,
    },
    pricing_product(name, block): {
      local p = path(['data', 'aws_pricing_product', name]),
      _: p.out._ {
        block: {
          data: {
            aws_pricing_product: {
              [name]: std.prune({
                service_code: build.template(block.service_code),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      result: p.child('result').out,
      service_code: p.child('service_code').out,
    },
    prometheus_default_scraper_configuration(name, block): {
      local p = path(['data', 'aws_prometheus_default_scraper_configuration', name]),
      _: p.out._ {
        block: {
          data: {
            aws_prometheus_default_scraper_configuration: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      configuration: p.child('configuration').out,
    },
    prometheus_workspace(name, block): {
      local p = path(['data', 'aws_prometheus_workspace', name]),
      _: p.out._ {
        block: {
          data: {
            aws_prometheus_workspace: {
              [name]: std.prune({
                workspace_id: build.template(block.workspace_id),
              }),
            },
          },
        },
      },
      alias: p.child('alias').out,
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      kms_key_arn: p.child('kms_key_arn').out,
      prometheus_endpoint: p.child('prometheus_endpoint').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      workspace_id: p.child('workspace_id').out,
    },
    prometheus_workspaces(name, block): {
      local p = path(['data', 'aws_prometheus_workspaces', name]),
      _: p.out._ {
        block: {
          data: {
            aws_prometheus_workspaces: {
              [name]: std.prune({
                alias_prefix: build.template(std.get(block, 'alias_prefix', null, true)),
              }),
            },
          },
        },
      },
      alias_prefix: p.child('alias_prefix').out,
      aliases: p.child('aliases').out,
      arns: p.child('arns').out,
      id: p.child('id').out,
      workspace_ids: p.child('workspace_ids').out,
    },
    qldb_ledger(name, block): {
      local p = path(['data', 'aws_qldb_ledger', name]),
      _: p.out._ {
        block: {
          data: {
            aws_qldb_ledger: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      deletion_protection: p.child('deletion_protection').out,
      id: p.child('id').out,
      kms_key: p.child('kms_key').out,
      name: p.child('name').out,
      permissions_mode: p.child('permissions_mode').out,
      tags: p.child('tags').out,
    },
    quicksight_analysis(name, block): {
      local p = path(['data', 'aws_quicksight_analysis', name]),
      _: p.out._ {
        block: {
          data: {
            aws_quicksight_analysis: {
              [name]: std.prune({
                analysis_id: build.template(block.analysis_id),
              }),
            },
          },
        },
      },
      analysis_id: p.child('analysis_id').out,
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      created_time: p.child('created_time').out,
      definition: p.child('definition').out,
      id: p.child('id').out,
      last_published_time: p.child('last_published_time').out,
      last_updated_time: p.child('last_updated_time').out,
      name: p.child('name').out,
      permissions: p.child('permissions').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      theme_arn: p.child('theme_arn').out,
    },
    quicksight_data_set(name, block): {
      local p = path(['data', 'aws_quicksight_data_set', name]),
      _: p.out._ {
        block: {
          data: {
            aws_quicksight_data_set: {
              [name]: std.prune({
                data_set_id: build.template(block.data_set_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      column_groups: p.child('column_groups').out,
      column_level_permission_rules: p.child('column_level_permission_rules').out,
      data_set_id: p.child('data_set_id').out,
      data_set_usage_configuration: p.child('data_set_usage_configuration').out,
      field_folders: p.child('field_folders').out,
      id: p.child('id').out,
      import_mode: p.child('import_mode').out,
      logical_table_map: p.child('logical_table_map').out,
      name: p.child('name').out,
      permissions: p.child('permissions').out,
      physical_table_map: p.child('physical_table_map').out,
      row_level_permission_data_set: p.child('row_level_permission_data_set').out,
      row_level_permission_tag_configuration: p.child('row_level_permission_tag_configuration').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    quicksight_group(name, block): {
      local p = path(['data', 'aws_quicksight_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_quicksight_group: {
              [name]: std.prune({
                group_name: build.template(block.group_name),
                namespace: build.template(std.get(block, 'namespace', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      description: p.child('description').out,
      group_name: p.child('group_name').out,
      id: p.child('id').out,
      namespace: p.child('namespace').out,
      principal_id: p.child('principal_id').out,
    },
    quicksight_theme(name, block): {
      local p = path(['data', 'aws_quicksight_theme', name]),
      _: p.out._ {
        block: {
          data: {
            aws_quicksight_theme: {
              [name]: std.prune({
                theme_id: build.template(block.theme_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      base_theme_id: p.child('base_theme_id').out,
      configuration: p.child('configuration').out,
      created_time: p.child('created_time').out,
      id: p.child('id').out,
      last_updated_time: p.child('last_updated_time').out,
      name: p.child('name').out,
      permissions: p.child('permissions').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      theme_id: p.child('theme_id').out,
      version_description: p.child('version_description').out,
      version_number: p.child('version_number').out,
    },
    quicksight_user(name, block): {
      local p = path(['data', 'aws_quicksight_user', name]),
      _: p.out._ {
        block: {
          data: {
            aws_quicksight_user: {
              [name]: std.prune({
                namespace: build.template(std.get(block, 'namespace', null, true)),
                user_name: build.template(block.user_name),
              }),
            },
          },
        },
      },
      active: p.child('active').out,
      arn: p.child('arn').out,
      aws_account_id: p.child('aws_account_id').out,
      email: p.child('email').out,
      id: p.child('id').out,
      identity_type: p.child('identity_type').out,
      namespace: p.child('namespace').out,
      principal_id: p.child('principal_id').out,
      user_name: p.child('user_name').out,
      user_role: p.child('user_role').out,
    },
    ram_resource_share(name, block): {
      local p = path(['data', 'aws_ram_resource_share', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ram_resource_share: {
              [name]: std.prune({
                resource_owner: build.template(block.resource_owner),
                resource_share_status: build.template(std.get(block, 'resource_share_status', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owning_account_id: p.child('owning_account_id').out,
      resource_arns: p.child('resource_arns').out,
      resource_owner: p.child('resource_owner').out,
      resource_share_status: p.child('resource_share_status').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
    },
    rds_certificate(name, block): {
      local p = path(['data', 'aws_rds_certificate', name]),
      _: p.out._ {
        block: {
          data: {
            aws_rds_certificate: {
              [name]: std.prune({
                latest_valid_till: build.template(std.get(block, 'latest_valid_till', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      certificate_type: p.child('certificate_type').out,
      customer_override: p.child('customer_override').out,
      customer_override_valid_till: p.child('customer_override_valid_till').out,
      id: p.child('id').out,
      latest_valid_till: p.child('latest_valid_till').out,
      thumbprint: p.child('thumbprint').out,
      valid_from: p.child('valid_from').out,
      valid_till: p.child('valid_till').out,
    },
    rds_cluster(name, block): {
      local p = path(['data', 'aws_rds_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            aws_rds_cluster: {
              [name]: std.prune({
                cluster_identifier: build.template(block.cluster_identifier),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      availability_zones: p.child('availability_zones').out,
      backtrack_window: p.child('backtrack_window').out,
      backup_retention_period: p.child('backup_retention_period').out,
      cluster_identifier: p.child('cluster_identifier').out,
      cluster_members: p.child('cluster_members').out,
      cluster_resource_id: p.child('cluster_resource_id').out,
      database_name: p.child('database_name').out,
      db_cluster_parameter_group_name: p.child('db_cluster_parameter_group_name').out,
      db_subnet_group_name: p.child('db_subnet_group_name').out,
      db_system_id: p.child('db_system_id').out,
      enabled_cloudwatch_logs_exports: p.child('enabled_cloudwatch_logs_exports').out,
      endpoint: p.child('endpoint').out,
      engine: p.child('engine').out,
      engine_mode: p.child('engine_mode').out,
      engine_version: p.child('engine_version').out,
      final_snapshot_identifier: p.child('final_snapshot_identifier').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      iam_database_authentication_enabled: p.child('iam_database_authentication_enabled').out,
      iam_roles: p.child('iam_roles').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      master_user_secret: p.child('master_user_secret').out,
      master_username: p.child('master_username').out,
      network_type: p.child('network_type').out,
      port: p.child('port').out,
      preferred_backup_window: p.child('preferred_backup_window').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      reader_endpoint: p.child('reader_endpoint').out,
      replication_source_identifier: p.child('replication_source_identifier').out,
      storage_encrypted: p.child('storage_encrypted').out,
      tags: p.child('tags').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    rds_cluster_parameter_group(name, block): {
      local p = path(['data', 'aws_rds_cluster_parameter_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_rds_cluster_parameter_group: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      family: p.child('family').out,
      name: p.child('name').out,
    },
    rds_clusters(name, block): {
      local p = path(['data', 'aws_rds_clusters', name]),
      _: p.out._ {
        block: {
          data: {
            aws_rds_clusters: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      cluster_arns: p.child('cluster_arns').out,
      cluster_identifiers: p.child('cluster_identifiers').out,
      id: p.child('id').out,
    },
    rds_engine_version(name, block): {
      local p = path(['data', 'aws_rds_engine_version', name]),
      _: p.out._ {
        block: {
          data: {
            aws_rds_engine_version: {
              [name]: std.prune({
                default_only: build.template(std.get(block, 'default_only', null, true)),
                engine: build.template(block.engine),
                has_major_target: build.template(std.get(block, 'has_major_target', null, true)),
                has_minor_target: build.template(std.get(block, 'has_minor_target', null, true)),
                include_all: build.template(std.get(block, 'include_all', null, true)),
                latest: build.template(std.get(block, 'latest', null, true)),
                preferred_major_targets: build.template(std.get(block, 'preferred_major_targets', null, true)),
                preferred_upgrade_targets: build.template(std.get(block, 'preferred_upgrade_targets', null, true)),
                preferred_versions: build.template(std.get(block, 'preferred_versions', null, true)),
              }),
            },
          },
        },
      },
      default_character_set: p.child('default_character_set').out,
      default_only: p.child('default_only').out,
      engine: p.child('engine').out,
      engine_description: p.child('engine_description').out,
      exportable_log_types: p.child('exportable_log_types').out,
      has_major_target: p.child('has_major_target').out,
      has_minor_target: p.child('has_minor_target').out,
      id: p.child('id').out,
      include_all: p.child('include_all').out,
      latest: p.child('latest').out,
      parameter_group_family: p.child('parameter_group_family').out,
      preferred_major_targets: p.child('preferred_major_targets').out,
      preferred_upgrade_targets: p.child('preferred_upgrade_targets').out,
      preferred_versions: p.child('preferred_versions').out,
      status: p.child('status').out,
      supported_character_sets: p.child('supported_character_sets').out,
      supported_feature_names: p.child('supported_feature_names').out,
      supported_modes: p.child('supported_modes').out,
      supported_timezones: p.child('supported_timezones').out,
      supports_global_databases: p.child('supports_global_databases').out,
      supports_limitless_database: p.child('supports_limitless_database').out,
      supports_log_exports_to_cloudwatch: p.child('supports_log_exports_to_cloudwatch').out,
      supports_parallel_query: p.child('supports_parallel_query').out,
      supports_read_replica: p.child('supports_read_replica').out,
      valid_major_targets: p.child('valid_major_targets').out,
      valid_minor_targets: p.child('valid_minor_targets').out,
      valid_upgrade_targets: p.child('valid_upgrade_targets').out,
      version: p.child('version').out,
      version_actual: p.child('version_actual').out,
      version_description: p.child('version_description').out,
    },
    rds_orderable_db_instance(name, block): {
      local p = path(['data', 'aws_rds_orderable_db_instance', name]),
      _: p.out._ {
        block: {
          data: {
            aws_rds_orderable_db_instance: {
              [name]: std.prune({
                engine: build.template(block.engine),
                engine_latest_version: build.template(std.get(block, 'engine_latest_version', null, true)),
                preferred_engine_versions: build.template(std.get(block, 'preferred_engine_versions', null, true)),
                preferred_instance_classes: build.template(std.get(block, 'preferred_instance_classes', null, true)),
              }),
            },
          },
        },
      },
      availability_zone_group: p.child('availability_zone_group').out,
      availability_zones: p.child('availability_zones').out,
      engine: p.child('engine').out,
      engine_latest_version: p.child('engine_latest_version').out,
      engine_version: p.child('engine_version').out,
      id: p.child('id').out,
      instance_class: p.child('instance_class').out,
      license_model: p.child('license_model').out,
      max_iops_per_db_instance: p.child('max_iops_per_db_instance').out,
      max_iops_per_gib: p.child('max_iops_per_gib').out,
      max_storage_size: p.child('max_storage_size').out,
      min_iops_per_db_instance: p.child('min_iops_per_db_instance').out,
      min_iops_per_gib: p.child('min_iops_per_gib').out,
      min_storage_size: p.child('min_storage_size').out,
      multi_az_capable: p.child('multi_az_capable').out,
      outpost_capable: p.child('outpost_capable').out,
      preferred_engine_versions: p.child('preferred_engine_versions').out,
      preferred_instance_classes: p.child('preferred_instance_classes').out,
      read_replica_capable: p.child('read_replica_capable').out,
      storage_type: p.child('storage_type').out,
      supported_engine_modes: p.child('supported_engine_modes').out,
      supported_network_types: p.child('supported_network_types').out,
      supports_clusters: p.child('supports_clusters').out,
      supports_enhanced_monitoring: p.child('supports_enhanced_monitoring').out,
      supports_global_databases: p.child('supports_global_databases').out,
      supports_iam_database_authentication: p.child('supports_iam_database_authentication').out,
      supports_iops: p.child('supports_iops').out,
      supports_kerberos_authentication: p.child('supports_kerberos_authentication').out,
      supports_multi_az: p.child('supports_multi_az').out,
      supports_performance_insights: p.child('supports_performance_insights').out,
      supports_storage_autoscaling: p.child('supports_storage_autoscaling').out,
      supports_storage_encryption: p.child('supports_storage_encryption').out,
      vpc: p.child('vpc').out,
    },
    rds_reserved_instance_offering(name, block): {
      local p = path(['data', 'aws_rds_reserved_instance_offering', name]),
      _: p.out._ {
        block: {
          data: {
            aws_rds_reserved_instance_offering: {
              [name]: std.prune({
                db_instance_class: build.template(block.db_instance_class),
                duration: build.template(block.duration),
                multi_az: build.template(block.multi_az),
                offering_type: build.template(block.offering_type),
                product_description: build.template(block.product_description),
              }),
            },
          },
        },
      },
      currency_code: p.child('currency_code').out,
      db_instance_class: p.child('db_instance_class').out,
      duration: p.child('duration').out,
      fixed_price: p.child('fixed_price').out,
      id: p.child('id').out,
      multi_az: p.child('multi_az').out,
      offering_id: p.child('offering_id').out,
      offering_type: p.child('offering_type').out,
      product_description: p.child('product_description').out,
    },
    redshift_cluster(name, block): {
      local p = path(['data', 'aws_redshift_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            aws_redshift_cluster: {
              [name]: std.prune({
                cluster_identifier: build.template(block.cluster_identifier),
              }),
            },
          },
        },
      },
      allow_version_upgrade: p.child('allow_version_upgrade').out,
      aqua_configuration_status: p.child('aqua_configuration_status').out,
      arn: p.child('arn').out,
      automated_snapshot_retention_period: p.child('automated_snapshot_retention_period').out,
      availability_zone: p.child('availability_zone').out,
      availability_zone_relocation_enabled: p.child('availability_zone_relocation_enabled').out,
      bucket_name: p.child('bucket_name').out,
      cluster_identifier: p.child('cluster_identifier').out,
      cluster_namespace_arn: p.child('cluster_namespace_arn').out,
      cluster_nodes: p.child('cluster_nodes').out,
      cluster_parameter_group_name: p.child('cluster_parameter_group_name').out,
      cluster_public_key: p.child('cluster_public_key').out,
      cluster_revision_number: p.child('cluster_revision_number').out,
      cluster_subnet_group_name: p.child('cluster_subnet_group_name').out,
      cluster_type: p.child('cluster_type').out,
      cluster_version: p.child('cluster_version').out,
      database_name: p.child('database_name').out,
      default_iam_role_arn: p.child('default_iam_role_arn').out,
      elastic_ip: p.child('elastic_ip').out,
      enable_logging: p.child('enable_logging').out,
      encrypted: p.child('encrypted').out,
      endpoint: p.child('endpoint').out,
      enhanced_vpc_routing: p.child('enhanced_vpc_routing').out,
      iam_roles: p.child('iam_roles').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      log_destination_type: p.child('log_destination_type').out,
      log_exports: p.child('log_exports').out,
      maintenance_track_name: p.child('maintenance_track_name').out,
      manual_snapshot_retention_period: p.child('manual_snapshot_retention_period').out,
      master_username: p.child('master_username').out,
      multi_az: p.child('multi_az').out,
      node_type: p.child('node_type').out,
      number_of_nodes: p.child('number_of_nodes').out,
      port: p.child('port').out,
      preferred_maintenance_window: p.child('preferred_maintenance_window').out,
      publicly_accessible: p.child('publicly_accessible').out,
      s3_key_prefix: p.child('s3_key_prefix').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
      vpc_security_group_ids: p.child('vpc_security_group_ids').out,
    },
    redshift_cluster_credentials(name, block): {
      local p = path(['data', 'aws_redshift_cluster_credentials', name]),
      _: p.out._ {
        block: {
          data: {
            aws_redshift_cluster_credentials: {
              [name]: std.prune({
                auto_create: build.template(std.get(block, 'auto_create', null, true)),
                cluster_identifier: build.template(block.cluster_identifier),
                db_groups: build.template(std.get(block, 'db_groups', null, true)),
                db_name: build.template(std.get(block, 'db_name', null, true)),
                db_user: build.template(block.db_user),
                duration_seconds: build.template(std.get(block, 'duration_seconds', null, true)),
              }),
            },
          },
        },
      },
      auto_create: p.child('auto_create').out,
      cluster_identifier: p.child('cluster_identifier').out,
      db_groups: p.child('db_groups').out,
      db_name: p.child('db_name').out,
      db_password: p.child('db_password').out,
      db_user: p.child('db_user').out,
      duration_seconds: p.child('duration_seconds').out,
      expiration: p.child('expiration').out,
      id: p.child('id').out,
    },
    redshift_data_shares(name, block): {
      local p = path(['data', 'aws_redshift_data_shares', name]),
      _: p.out._ {
        block: {
          data: {
            aws_redshift_data_shares: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    redshift_orderable_cluster(name, block): {
      local p = path(['data', 'aws_redshift_orderable_cluster', name]),
      _: p.out._ {
        block: {
          data: {
            aws_redshift_orderable_cluster: {
              [name]: std.prune({
                preferred_node_types: build.template(std.get(block, 'preferred_node_types', null, true)),
              }),
            },
          },
        },
      },
      availability_zones: p.child('availability_zones').out,
      cluster_type: p.child('cluster_type').out,
      cluster_version: p.child('cluster_version').out,
      id: p.child('id').out,
      node_type: p.child('node_type').out,
      preferred_node_types: p.child('preferred_node_types').out,
    },
    redshift_producer_data_shares(name, block): {
      local p = path(['data', 'aws_redshift_producer_data_shares', name]),
      _: p.out._ {
        block: {
          data: {
            aws_redshift_producer_data_shares: {
              [name]: std.prune({
                producer_arn: build.template(block.producer_arn),
                status: build.template(std.get(block, 'status', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      producer_arn: p.child('producer_arn').out,
      status: p.child('status').out,
    },
    redshift_service_account(name, block): {
      local p = path(['data', 'aws_redshift_service_account', name]),
      _: p.out._ {
        block: {
          data: {
            aws_redshift_service_account: {
              [name]: std.prune({
                region: build.template(std.get(block, 'region', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      region: p.child('region').out,
    },
    redshift_subnet_group(name, block): {
      local p = path(['data', 'aws_redshift_subnet_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_redshift_subnet_group: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
    },
    redshiftserverless_credentials(name, block): {
      local p = path(['data', 'aws_redshiftserverless_credentials', name]),
      _: p.out._ {
        block: {
          data: {
            aws_redshiftserverless_credentials: {
              [name]: std.prune({
                db_name: build.template(std.get(block, 'db_name', null, true)),
                duration_seconds: build.template(std.get(block, 'duration_seconds', null, true)),
                workgroup_name: build.template(block.workgroup_name),
              }),
            },
          },
        },
      },
      db_name: p.child('db_name').out,
      db_password: p.child('db_password').out,
      db_user: p.child('db_user').out,
      duration_seconds: p.child('duration_seconds').out,
      expiration: p.child('expiration').out,
      id: p.child('id').out,
      workgroup_name: p.child('workgroup_name').out,
    },
    redshiftserverless_namespace(name, block): {
      local p = path(['data', 'aws_redshiftserverless_namespace', name]),
      _: p.out._ {
        block: {
          data: {
            aws_redshiftserverless_namespace: {
              [name]: std.prune({
                namespace_name: build.template(block.namespace_name),
              }),
            },
          },
        },
      },
      admin_username: p.child('admin_username').out,
      arn: p.child('arn').out,
      db_name: p.child('db_name').out,
      default_iam_role_arn: p.child('default_iam_role_arn').out,
      iam_roles: p.child('iam_roles').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      log_exports: p.child('log_exports').out,
      namespace_id: p.child('namespace_id').out,
      namespace_name: p.child('namespace_name').out,
    },
    redshiftserverless_workgroup(name, block): {
      local p = path(['data', 'aws_redshiftserverless_workgroup', name]),
      _: p.out._ {
        block: {
          data: {
            aws_redshiftserverless_workgroup: {
              [name]: std.prune({
                workgroup_name: build.template(block.workgroup_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      endpoint: p.child('endpoint').out,
      enhanced_vpc_routing: p.child('enhanced_vpc_routing').out,
      id: p.child('id').out,
      namespace_name: p.child('namespace_name').out,
      publicly_accessible: p.child('publicly_accessible').out,
      security_group_ids: p.child('security_group_ids').out,
      subnet_ids: p.child('subnet_ids').out,
      workgroup_id: p.child('workgroup_id').out,
      workgroup_name: p.child('workgroup_name').out,
    },
    region(name, block): {
      local p = path(['data', 'aws_region', name]),
      _: p.out._ {
        block: {
          data: {
            aws_region: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      endpoint: p.child('endpoint').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    regions(name, block): {
      local p = path(['data', 'aws_regions', name]),
      _: p.out._ {
        block: {
          data: {
            aws_regions: {
              [name]: std.prune({
                all_regions: build.template(std.get(block, 'all_regions', null, true)),
              }),
            },
          },
        },
      },
      all_regions: p.child('all_regions').out,
      id: p.child('id').out,
      names: p.child('names').out,
    },
    resourceexplorer2_search(name, block): {
      local p = path(['data', 'aws_resourceexplorer2_search', name]),
      _: p.out._ {
        block: {
          data: {
            aws_resourceexplorer2_search: {
              [name]: std.prune({
                query_string: build.template(block.query_string),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      query_string: p.child('query_string').out,
      resource_count: p.child('resource_count').out,
      resources: p.child('resources').out,
      view_arn: p.child('view_arn').out,
    },
    resourcegroupstaggingapi_resources(name, block): {
      local p = path(['data', 'aws_resourcegroupstaggingapi_resources', name]),
      _: p.out._ {
        block: {
          data: {
            aws_resourcegroupstaggingapi_resources: {
              [name]: std.prune({
                exclude_compliant_resources: build.template(std.get(block, 'exclude_compliant_resources', null, true)),
                include_compliance_details: build.template(std.get(block, 'include_compliance_details', null, true)),
                resource_arn_list: build.template(std.get(block, 'resource_arn_list', null, true)),
                resource_type_filters: build.template(std.get(block, 'resource_type_filters', null, true)),
              }),
            },
          },
        },
      },
      exclude_compliant_resources: p.child('exclude_compliant_resources').out,
      id: p.child('id').out,
      include_compliance_details: p.child('include_compliance_details').out,
      resource_arn_list: p.child('resource_arn_list').out,
      resource_tag_mapping_list: p.child('resource_tag_mapping_list').out,
      resource_type_filters: p.child('resource_type_filters').out,
    },
    route(name, block): {
      local p = path(['data', 'aws_route', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route: {
              [name]: std.prune({
                route_table_id: build.template(block.route_table_id),
              }),
            },
          },
        },
      },
      carrier_gateway_id: p.child('carrier_gateway_id').out,
      core_network_arn: p.child('core_network_arn').out,
      destination_cidr_block: p.child('destination_cidr_block').out,
      destination_ipv6_cidr_block: p.child('destination_ipv6_cidr_block').out,
      destination_prefix_list_id: p.child('destination_prefix_list_id').out,
      egress_only_gateway_id: p.child('egress_only_gateway_id').out,
      gateway_id: p.child('gateway_id').out,
      id: p.child('id').out,
      instance_id: p.child('instance_id').out,
      local_gateway_id: p.child('local_gateway_id').out,
      nat_gateway_id: p.child('nat_gateway_id').out,
      network_interface_id: p.child('network_interface_id').out,
      route_table_id: p.child('route_table_id').out,
      transit_gateway_id: p.child('transit_gateway_id').out,
      vpc_peering_connection_id: p.child('vpc_peering_connection_id').out,
    },
    route53_delegation_set(name, block): {
      local p = path(['data', 'aws_route53_delegation_set', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53_delegation_set: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      caller_reference: p.child('caller_reference').out,
      id: p.child('id').out,
      name_servers: p.child('name_servers').out,
    },
    route53_resolver_endpoint(name, block): {
      local p = path(['data', 'aws_route53_resolver_endpoint', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53_resolver_endpoint: {
              [name]: std.prune({
                resolver_endpoint_id: build.template(std.get(block, 'resolver_endpoint_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      direction: p.child('direction').out,
      id: p.child('id').out,
      ip_addresses: p.child('ip_addresses').out,
      name: p.child('name').out,
      protocols: p.child('protocols').out,
      resolver_endpoint_id: p.child('resolver_endpoint_id').out,
      resolver_endpoint_type: p.child('resolver_endpoint_type').out,
      status: p.child('status').out,
      vpc_id: p.child('vpc_id').out,
    },
    route53_resolver_firewall_config(name, block): {
      local p = path(['data', 'aws_route53_resolver_firewall_config', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53_resolver_firewall_config: {
              [name]: std.prune({
                resource_id: build.template(block.resource_id),
              }),
            },
          },
        },
      },
      firewall_fail_open: p.child('firewall_fail_open').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      resource_id: p.child('resource_id').out,
    },
    route53_resolver_firewall_domain_list(name, block): {
      local p = path(['data', 'aws_route53_resolver_firewall_domain_list', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53_resolver_firewall_domain_list: {
              [name]: std.prune({
                firewall_domain_list_id: build.template(block.firewall_domain_list_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      creator_request_id: p.child('creator_request_id').out,
      domain_count: p.child('domain_count').out,
      firewall_domain_list_id: p.child('firewall_domain_list_id').out,
      id: p.child('id').out,
      managed_owner_name: p.child('managed_owner_name').out,
      modification_time: p.child('modification_time').out,
      name: p.child('name').out,
      status: p.child('status').out,
      status_message: p.child('status_message').out,
    },
    route53_resolver_firewall_rule_group(name, block): {
      local p = path(['data', 'aws_route53_resolver_firewall_rule_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53_resolver_firewall_rule_group: {
              [name]: std.prune({
                firewall_rule_group_id: build.template(block.firewall_rule_group_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      creator_request_id: p.child('creator_request_id').out,
      firewall_rule_group_id: p.child('firewall_rule_group_id').out,
      id: p.child('id').out,
      modification_time: p.child('modification_time').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      rule_count: p.child('rule_count').out,
      share_status: p.child('share_status').out,
      status: p.child('status').out,
      status_message: p.child('status_message').out,
    },
    route53_resolver_firewall_rule_group_association(name, block): {
      local p = path(['data', 'aws_route53_resolver_firewall_rule_group_association', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53_resolver_firewall_rule_group_association: {
              [name]: std.prune({
                firewall_rule_group_association_id: build.template(block.firewall_rule_group_association_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      creator_request_id: p.child('creator_request_id').out,
      firewall_rule_group_association_id: p.child('firewall_rule_group_association_id').out,
      firewall_rule_group_id: p.child('firewall_rule_group_id').out,
      id: p.child('id').out,
      managed_owner_name: p.child('managed_owner_name').out,
      modification_time: p.child('modification_time').out,
      mutation_protection: p.child('mutation_protection').out,
      name: p.child('name').out,
      priority: p.child('priority').out,
      status: p.child('status').out,
      status_message: p.child('status_message').out,
      vpc_id: p.child('vpc_id').out,
    },
    route53_resolver_firewall_rules(name, block): {
      local p = path(['data', 'aws_route53_resolver_firewall_rules', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53_resolver_firewall_rules: {
              [name]: std.prune({
                action: build.template(std.get(block, 'action', null, true)),
                firewall_rule_group_id: build.template(block.firewall_rule_group_id),
                priority: build.template(std.get(block, 'priority', null, true)),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      firewall_rule_group_id: p.child('firewall_rule_group_id').out,
      firewall_rules: p.child('firewall_rules').out,
      id: p.child('id').out,
      priority: p.child('priority').out,
    },
    route53_resolver_query_log_config(name, block): {
      local p = path(['data', 'aws_route53_resolver_query_log_config', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53_resolver_query_log_config: {
              [name]: std.prune({
                name: build.template(std.get(block, 'name', null, true)),
                resolver_query_log_config_id: build.template(std.get(block, 'resolver_query_log_config_id', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      destination_arn: p.child('destination_arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      resolver_query_log_config_id: p.child('resolver_query_log_config_id').out,
      share_status: p.child('share_status').out,
      tags: p.child('tags').out,
    },
    route53_resolver_rule(name, block): {
      local p = path(['data', 'aws_route53_resolver_rule', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53_resolver_rule: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner_id: p.child('owner_id').out,
      resolver_endpoint_id: p.child('resolver_endpoint_id').out,
      resolver_rule_id: p.child('resolver_rule_id').out,
      rule_type: p.child('rule_type').out,
      share_status: p.child('share_status').out,
      tags: p.child('tags').out,
    },
    route53_resolver_rules(name, block): {
      local p = path(['data', 'aws_route53_resolver_rules', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53_resolver_rules: {
              [name]: std.prune({
                name_regex: build.template(std.get(block, 'name_regex', null, true)),
                owner_id: build.template(std.get(block, 'owner_id', null, true)),
                resolver_endpoint_id: build.template(std.get(block, 'resolver_endpoint_id', null, true)),
                rule_type: build.template(std.get(block, 'rule_type', null, true)),
                share_status: build.template(std.get(block, 'share_status', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name_regex: p.child('name_regex').out,
      owner_id: p.child('owner_id').out,
      resolver_endpoint_id: p.child('resolver_endpoint_id').out,
      resolver_rule_ids: p.child('resolver_rule_ids').out,
      rule_type: p.child('rule_type').out,
      share_status: p.child('share_status').out,
    },
    route53_traffic_policy_document(name, block): {
      local p = path(['data', 'aws_route53_traffic_policy_document', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53_traffic_policy_document: {
              [name]: std.prune({
                record_type: build.template(std.get(block, 'record_type', null, true)),
                start_endpoint: build.template(std.get(block, 'start_endpoint', null, true)),
                start_rule: build.template(std.get(block, 'start_rule', null, true)),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      json: p.child('json').out,
      record_type: p.child('record_type').out,
      start_endpoint: p.child('start_endpoint').out,
      start_rule: p.child('start_rule').out,
      version: p.child('version').out,
    },
    route53_zone(name, block): {
      local p = path(['data', 'aws_route53_zone', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53_zone: {
              [name]: std.prune({
                private_zone: build.template(std.get(block, 'private_zone', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      caller_reference: p.child('caller_reference').out,
      comment: p.child('comment').out,
      id: p.child('id').out,
      linked_service_description: p.child('linked_service_description').out,
      linked_service_principal: p.child('linked_service_principal').out,
      name: p.child('name').out,
      name_servers: p.child('name_servers').out,
      primary_name_server: p.child('primary_name_server').out,
      private_zone: p.child('private_zone').out,
      resource_record_set_count: p.child('resource_record_set_count').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
      zone_id: p.child('zone_id').out,
    },
    route53_zones(name, block): {
      local p = path(['data', 'aws_route53_zones', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53_zones: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
    },
    route53profiles_profiles(name, block): {
      local p = path(['data', 'aws_route53profiles_profiles', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route53profiles_profiles: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      profiles: p.child('profiles').out,
    },
    route_table(name, block): {
      local p = path(['data', 'aws_route_table', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route_table: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      associations: p.child('associations').out,
      gateway_id: p.child('gateway_id').out,
      id: p.child('id').out,
      owner_id: p.child('owner_id').out,
      route_table_id: p.child('route_table_id').out,
      routes: p.child('routes').out,
      subnet_id: p.child('subnet_id').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    route_tables(name, block): {
      local p = path(['data', 'aws_route_tables', name]),
      _: p.out._ {
        block: {
          data: {
            aws_route_tables: {
              [name]: std.prune({
                vpc_id: build.template(std.get(block, 'vpc_id', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    s3_account_public_access_block(name, block): {
      local p = path(['data', 'aws_s3_account_public_access_block', name]),
      _: p.out._ {
        block: {
          data: {
            aws_s3_account_public_access_block: {
              [name]: std.prune({
                account_id: build.template(std.get(block, 'account_id', null, true)),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      block_public_acls: p.child('block_public_acls').out,
      block_public_policy: p.child('block_public_policy').out,
      id: p.child('id').out,
      ignore_public_acls: p.child('ignore_public_acls').out,
      restrict_public_buckets: p.child('restrict_public_buckets').out,
    },
    s3_bucket(name, block): {
      local p = path(['data', 'aws_s3_bucket', name]),
      _: p.out._ {
        block: {
          data: {
            aws_s3_bucket: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      bucket: p.child('bucket').out,
      bucket_domain_name: p.child('bucket_domain_name').out,
      bucket_regional_domain_name: p.child('bucket_regional_domain_name').out,
      hosted_zone_id: p.child('hosted_zone_id').out,
      id: p.child('id').out,
      region: p.child('region').out,
      website_domain: p.child('website_domain').out,
      website_endpoint: p.child('website_endpoint').out,
    },
    s3_bucket_object(name, block): {
      local p = path(['data', 'aws_s3_bucket_object', name]),
      _: p.out._ {
        block: {
          data: {
            aws_s3_bucket_object: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                key: build.template(block.key),
                range: build.template(std.get(block, 'range', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      body: p.child('body').out,
      bucket: p.child('bucket').out,
      bucket_key_enabled: p.child('bucket_key_enabled').out,
      cache_control: p.child('cache_control').out,
      content_disposition: p.child('content_disposition').out,
      content_encoding: p.child('content_encoding').out,
      content_language: p.child('content_language').out,
      content_length: p.child('content_length').out,
      content_type: p.child('content_type').out,
      etag: p.child('etag').out,
      expiration: p.child('expiration').out,
      expires: p.child('expires').out,
      id: p.child('id').out,
      key: p.child('key').out,
      last_modified: p.child('last_modified').out,
      metadata: p.child('metadata').out,
      object_lock_legal_hold_status: p.child('object_lock_legal_hold_status').out,
      object_lock_mode: p.child('object_lock_mode').out,
      object_lock_retain_until_date: p.child('object_lock_retain_until_date').out,
      range: p.child('range').out,
      server_side_encryption: p.child('server_side_encryption').out,
      sse_kms_key_id: p.child('sse_kms_key_id').out,
      storage_class: p.child('storage_class').out,
      tags: p.child('tags').out,
      version_id: p.child('version_id').out,
      website_redirect_location: p.child('website_redirect_location').out,
    },
    s3_bucket_objects(name, block): {
      local p = path(['data', 'aws_s3_bucket_objects', name]),
      _: p.out._ {
        block: {
          data: {
            aws_s3_bucket_objects: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                delimiter: build.template(std.get(block, 'delimiter', null, true)),
                encoding_type: build.template(std.get(block, 'encoding_type', null, true)),
                fetch_owner: build.template(std.get(block, 'fetch_owner', null, true)),
                max_keys: build.template(std.get(block, 'max_keys', null, true)),
                prefix: build.template(std.get(block, 'prefix', null, true)),
                start_after: build.template(std.get(block, 'start_after', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      common_prefixes: p.child('common_prefixes').out,
      delimiter: p.child('delimiter').out,
      encoding_type: p.child('encoding_type').out,
      fetch_owner: p.child('fetch_owner').out,
      id: p.child('id').out,
      keys: p.child('keys').out,
      max_keys: p.child('max_keys').out,
      owners: p.child('owners').out,
      prefix: p.child('prefix').out,
      start_after: p.child('start_after').out,
    },
    s3_bucket_policy(name, block): {
      local p = path(['data', 'aws_s3_bucket_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_s3_bucket_policy: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      id: p.child('id').out,
      policy: p.child('policy').out,
    },
    s3_directory_buckets(name, block): {
      local p = path(['data', 'aws_s3_directory_buckets', name]),
      _: p.out._ {
        block: {
          data: {
            aws_s3_directory_buckets: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      buckets: p.child('buckets').out,
      id: p.child('id').out,
    },
    s3_object(name, block): {
      local p = path(['data', 'aws_s3_object', name]),
      _: p.out._ {
        block: {
          data: {
            aws_s3_object: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                checksum_mode: build.template(std.get(block, 'checksum_mode', null, true)),
                key: build.template(block.key),
                range: build.template(std.get(block, 'range', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      body: p.child('body').out,
      bucket: p.child('bucket').out,
      bucket_key_enabled: p.child('bucket_key_enabled').out,
      cache_control: p.child('cache_control').out,
      checksum_crc32: p.child('checksum_crc32').out,
      checksum_crc32c: p.child('checksum_crc32c').out,
      checksum_mode: p.child('checksum_mode').out,
      checksum_sha1: p.child('checksum_sha1').out,
      checksum_sha256: p.child('checksum_sha256').out,
      content_disposition: p.child('content_disposition').out,
      content_encoding: p.child('content_encoding').out,
      content_language: p.child('content_language').out,
      content_length: p.child('content_length').out,
      content_type: p.child('content_type').out,
      etag: p.child('etag').out,
      expiration: p.child('expiration').out,
      expires: p.child('expires').out,
      id: p.child('id').out,
      key: p.child('key').out,
      last_modified: p.child('last_modified').out,
      metadata: p.child('metadata').out,
      object_lock_legal_hold_status: p.child('object_lock_legal_hold_status').out,
      object_lock_mode: p.child('object_lock_mode').out,
      object_lock_retain_until_date: p.child('object_lock_retain_until_date').out,
      range: p.child('range').out,
      server_side_encryption: p.child('server_side_encryption').out,
      sse_kms_key_id: p.child('sse_kms_key_id').out,
      storage_class: p.child('storage_class').out,
      tags: p.child('tags').out,
      version_id: p.child('version_id').out,
      website_redirect_location: p.child('website_redirect_location').out,
    },
    s3_objects(name, block): {
      local p = path(['data', 'aws_s3_objects', name]),
      _: p.out._ {
        block: {
          data: {
            aws_s3_objects: {
              [name]: std.prune({
                bucket: build.template(block.bucket),
                delimiter: build.template(std.get(block, 'delimiter', null, true)),
                encoding_type: build.template(std.get(block, 'encoding_type', null, true)),
                fetch_owner: build.template(std.get(block, 'fetch_owner', null, true)),
                max_keys: build.template(std.get(block, 'max_keys', null, true)),
                prefix: build.template(std.get(block, 'prefix', null, true)),
                request_payer: build.template(std.get(block, 'request_payer', null, true)),
                start_after: build.template(std.get(block, 'start_after', null, true)),
              }),
            },
          },
        },
      },
      bucket: p.child('bucket').out,
      common_prefixes: p.child('common_prefixes').out,
      delimiter: p.child('delimiter').out,
      encoding_type: p.child('encoding_type').out,
      fetch_owner: p.child('fetch_owner').out,
      id: p.child('id').out,
      keys: p.child('keys').out,
      max_keys: p.child('max_keys').out,
      owners: p.child('owners').out,
      prefix: p.child('prefix').out,
      request_charged: p.child('request_charged').out,
      request_payer: p.child('request_payer').out,
      start_after: p.child('start_after').out,
    },
    s3control_multi_region_access_point(name, block): {
      local p = path(['data', 'aws_s3control_multi_region_access_point', name]),
      _: p.out._ {
        block: {
          data: {
            aws_s3control_multi_region_access_point: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      account_id: p.child('account_id').out,
      alias: p.child('alias').out,
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      domain_name: p.child('domain_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      public_access_block: p.child('public_access_block').out,
      regions: p.child('regions').out,
      status: p.child('status').out,
    },
    sagemaker_prebuilt_ecr_image(name, block): {
      local p = path(['data', 'aws_sagemaker_prebuilt_ecr_image', name]),
      _: p.out._ {
        block: {
          data: {
            aws_sagemaker_prebuilt_ecr_image: {
              [name]: std.prune({
                dns_suffix: build.template(std.get(block, 'dns_suffix', null, true)),
                image_tag: build.template(std.get(block, 'image_tag', null, true)),
                region: build.template(std.get(block, 'region', null, true)),
                repository_name: build.template(block.repository_name),
              }),
            },
          },
        },
      },
      dns_suffix: p.child('dns_suffix').out,
      id: p.child('id').out,
      image_tag: p.child('image_tag').out,
      region: p.child('region').out,
      registry_id: p.child('registry_id').out,
      registry_path: p.child('registry_path').out,
      repository_name: p.child('repository_name').out,
    },
    secretsmanager_random_password(name, block): {
      local p = path(['data', 'aws_secretsmanager_random_password', name]),
      _: p.out._ {
        block: {
          data: {
            aws_secretsmanager_random_password: {
              [name]: std.prune({
                exclude_characters: build.template(std.get(block, 'exclude_characters', null, true)),
                exclude_lowercase: build.template(std.get(block, 'exclude_lowercase', null, true)),
                exclude_numbers: build.template(std.get(block, 'exclude_numbers', null, true)),
                exclude_punctuation: build.template(std.get(block, 'exclude_punctuation', null, true)),
                exclude_uppercase: build.template(std.get(block, 'exclude_uppercase', null, true)),
                include_space: build.template(std.get(block, 'include_space', null, true)),
                password_length: build.template(std.get(block, 'password_length', null, true)),
                require_each_included_type: build.template(std.get(block, 'require_each_included_type', null, true)),
              }),
            },
          },
        },
      },
      exclude_characters: p.child('exclude_characters').out,
      exclude_lowercase: p.child('exclude_lowercase').out,
      exclude_numbers: p.child('exclude_numbers').out,
      exclude_punctuation: p.child('exclude_punctuation').out,
      exclude_uppercase: p.child('exclude_uppercase').out,
      id: p.child('id').out,
      include_space: p.child('include_space').out,
      password_length: p.child('password_length').out,
      random_password: p.child('random_password').out,
      require_each_included_type: p.child('require_each_included_type').out,
    },
    secretsmanager_secret(name, block): {
      local p = path(['data', 'aws_secretsmanager_secret', name]),
      _: p.out._ {
        block: {
          data: {
            aws_secretsmanager_secret: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      kms_key_id: p.child('kms_key_id').out,
      last_changed_date: p.child('last_changed_date').out,
      name: p.child('name').out,
      policy: p.child('policy').out,
      tags: p.child('tags').out,
    },
    secretsmanager_secret_rotation(name, block): {
      local p = path(['data', 'aws_secretsmanager_secret_rotation', name]),
      _: p.out._ {
        block: {
          data: {
            aws_secretsmanager_secret_rotation: {
              [name]: std.prune({
                secret_id: build.template(block.secret_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      rotation_enabled: p.child('rotation_enabled').out,
      rotation_lambda_arn: p.child('rotation_lambda_arn').out,
      rotation_rules: p.child('rotation_rules').out,
      secret_id: p.child('secret_id').out,
    },
    secretsmanager_secret_version(name, block): {
      local p = path(['data', 'aws_secretsmanager_secret_version', name]),
      _: p.out._ {
        block: {
          data: {
            aws_secretsmanager_secret_version: {
              [name]: std.prune({
                secret_id: build.template(block.secret_id),
                version_stage: build.template(std.get(block, 'version_stage', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      id: p.child('id').out,
      secret_binary: p.child('secret_binary').out,
      secret_id: p.child('secret_id').out,
      secret_string: p.child('secret_string').out,
      version_id: p.child('version_id').out,
      version_stage: p.child('version_stage').out,
      version_stages: p.child('version_stages').out,
    },
    secretsmanager_secret_versions(name, block): {
      local p = path(['data', 'aws_secretsmanager_secret_versions', name]),
      _: p.out._ {
        block: {
          data: {
            aws_secretsmanager_secret_versions: {
              [name]: std.prune({
                include_deprecated: build.template(std.get(block, 'include_deprecated', null, true)),
                secret_id: build.template(block.secret_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      include_deprecated: p.child('include_deprecated').out,
      name: p.child('name').out,
      secret_id: p.child('secret_id').out,
      versions: p.child('versions').out,
    },
    secretsmanager_secrets(name, block): {
      local p = path(['data', 'aws_secretsmanager_secrets', name]),
      _: p.out._ {
        block: {
          data: {
            aws_secretsmanager_secrets: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      names: p.child('names').out,
    },
    security_group(name, block): {
      local p = path(['data', 'aws_security_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_security_group: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    security_groups(name, block): {
      local p = path(['data', 'aws_security_groups', name]),
      _: p.out._ {
        block: {
          data: {
            aws_security_groups: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
      vpc_ids: p.child('vpc_ids').out,
    },
    securityhub_standards_control_associations(name, block): {
      local p = path(['data', 'aws_securityhub_standards_control_associations', name]),
      _: p.out._ {
        block: {
          data: {
            aws_securityhub_standards_control_associations: {
              [name]: std.prune({
                security_control_id: build.template(block.security_control_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      security_control_id: p.child('security_control_id').out,
      standards_control_associations: p.child('standards_control_associations').out,
    },
    serverlessapplicationrepository_application(name, block): {
      local p = path(['data', 'aws_serverlessapplicationrepository_application', name]),
      _: p.out._ {
        block: {
          data: {
            aws_serverlessapplicationrepository_application: {
              [name]: std.prune({
                application_id: build.template(block.application_id),
              }),
            },
          },
        },
      },
      application_id: p.child('application_id').out,
      id: p.child('id').out,
      name: p.child('name').out,
      required_capabilities: p.child('required_capabilities').out,
      semantic_version: p.child('semantic_version').out,
      source_code_url: p.child('source_code_url').out,
      template_url: p.child('template_url').out,
    },
    service(name, block): {
      local p = path(['data', 'aws_service', name]),
      _: p.out._ {
        block: {
          data: {
            aws_service: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      dns_name: p.child('dns_name').out,
      id: p.child('id').out,
      partition: p.child('partition').out,
      region: p.child('region').out,
      reverse_dns_name: p.child('reverse_dns_name').out,
      reverse_dns_prefix: p.child('reverse_dns_prefix').out,
      service_id: p.child('service_id').out,
      supported: p.child('supported').out,
    },
    service_discovery_dns_namespace(name, block): {
      local p = path(['data', 'aws_service_discovery_dns_namespace', name]),
      _: p.out._ {
        block: {
          data: {
            aws_service_discovery_dns_namespace: {
              [name]: std.prune({
                name: build.template(block.name),
                type: build.template(block.type),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      hosted_zone: p.child('hosted_zone').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
    },
    service_discovery_http_namespace(name, block): {
      local p = path(['data', 'aws_service_discovery_http_namespace', name]),
      _: p.out._ {
        block: {
          data: {
            aws_service_discovery_http_namespace: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      http_name: p.child('http_name').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    service_discovery_service(name, block): {
      local p = path(['data', 'aws_service_discovery_service', name]),
      _: p.out._ {
        block: {
          data: {
            aws_service_discovery_service: {
              [name]: std.prune({
                name: build.template(block.name),
                namespace_id: build.template(block.namespace_id),
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      dns_config: p.child('dns_config').out,
      health_check_config: p.child('health_check_config').out,
      health_check_custom_config: p.child('health_check_custom_config').out,
      id: p.child('id').out,
      name: p.child('name').out,
      namespace_id: p.child('namespace_id').out,
      tags: p.child('tags').out,
      tags_all: p.child('tags_all').out,
    },
    service_principal(name, block): {
      local p = path(['data', 'aws_service_principal', name]),
      _: p.out._ {
        block: {
          data: {
            aws_service_principal: {
              [name]: std.prune({
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      region: p.child('region').out,
      service_name: p.child('service_name').out,
      suffix: p.child('suffix').out,
    },
    servicecatalog_constraint(name, block): {
      local p = path(['data', 'aws_servicecatalog_constraint', name]),
      _: p.out._ {
        block: {
          data: {
            aws_servicecatalog_constraint: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      description: p.child('description').out,
      id: p.child('id').out,
      owner: p.child('owner').out,
      parameters: p.child('parameters').out,
      portfolio_id: p.child('portfolio_id').out,
      product_id: p.child('product_id').out,
      status: p.child('status').out,
      type: p.child('type').out,
    },
    servicecatalog_launch_paths(name, block): {
      local p = path(['data', 'aws_servicecatalog_launch_paths', name]),
      _: p.out._ {
        block: {
          data: {
            aws_servicecatalog_launch_paths: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                product_id: build.template(block.product_id),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      id: p.child('id').out,
      product_id: p.child('product_id').out,
      summaries: p.child('summaries').out,
    },
    servicecatalog_portfolio(name, block): {
      local p = path(['data', 'aws_servicecatalog_portfolio', name]),
      _: p.out._ {
        block: {
          data: {
            aws_servicecatalog_portfolio: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      arn: p.child('arn').out,
      created_time: p.child('created_time').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      provider_name: p.child('provider_name').out,
      tags: p.child('tags').out,
    },
    servicecatalog_portfolio_constraints(name, block): {
      local p = path(['data', 'aws_servicecatalog_portfolio_constraints', name]),
      _: p.out._ {
        block: {
          data: {
            aws_servicecatalog_portfolio_constraints: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                portfolio_id: build.template(block.portfolio_id),
                product_id: build.template(std.get(block, 'product_id', null, true)),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      details: p.child('details').out,
      id: p.child('id').out,
      portfolio_id: p.child('portfolio_id').out,
      product_id: p.child('product_id').out,
    },
    servicecatalog_product(name, block): {
      local p = path(['data', 'aws_servicecatalog_product', name]),
      _: p.out._ {
        block: {
          data: {
            aws_servicecatalog_product: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      arn: p.child('arn').out,
      created_time: p.child('created_time').out,
      description: p.child('description').out,
      distributor: p.child('distributor').out,
      has_default_path: p.child('has_default_path').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      status: p.child('status').out,
      support_description: p.child('support_description').out,
      support_email: p.child('support_email').out,
      support_url: p.child('support_url').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
    },
    servicecatalog_provisioning_artifacts(name, block): {
      local p = path(['data', 'aws_servicecatalog_provisioning_artifacts', name]),
      _: p.out._ {
        block: {
          data: {
            aws_servicecatalog_provisioning_artifacts: {
              [name]: std.prune({
                accept_language: build.template(std.get(block, 'accept_language', null, true)),
                product_id: build.template(block.product_id),
              }),
            },
          },
        },
      },
      accept_language: p.child('accept_language').out,
      id: p.child('id').out,
      product_id: p.child('product_id').out,
      provisioning_artifact_details: p.child('provisioning_artifact_details').out,
    },
    servicecatalogappregistry_application(name, block): {
      local p = path(['data', 'aws_servicecatalogappregistry_application', name]),
      _: p.out._ {
        block: {
          data: {
            aws_servicecatalogappregistry_application: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      application_tag: p.child('application_tag').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    servicequotas_service(name, block): {
      local p = path(['data', 'aws_servicequotas_service', name]),
      _: p.out._ {
        block: {
          data: {
            aws_servicequotas_service: {
              [name]: std.prune({
                service_name: build.template(block.service_name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      service_code: p.child('service_code').out,
      service_name: p.child('service_name').out,
    },
    servicequotas_service_quota(name, block): {
      local p = path(['data', 'aws_servicequotas_service_quota', name]),
      _: p.out._ {
        block: {
          data: {
            aws_servicequotas_service_quota: {
              [name]: std.prune({
                service_code: build.template(block.service_code),
              }),
            },
          },
        },
      },
      adjustable: p.child('adjustable').out,
      arn: p.child('arn').out,
      default_value: p.child('default_value').out,
      global_quota: p.child('global_quota').out,
      id: p.child('id').out,
      quota_code: p.child('quota_code').out,
      quota_name: p.child('quota_name').out,
      service_code: p.child('service_code').out,
      service_name: p.child('service_name').out,
      usage_metric: p.child('usage_metric').out,
      value: p.child('value').out,
    },
    servicequotas_templates(name, block): {
      local p = path(['data', 'aws_servicequotas_templates', name]),
      _: p.out._ {
        block: {
          data: {
            aws_servicequotas_templates: {
              [name]: std.prune({
                region: build.template(block.region),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      region: p.child('region').out,
    },
    ses_active_receipt_rule_set(name, block): {
      local p = path(['data', 'aws_ses_active_receipt_rule_set', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ses_active_receipt_rule_set: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      rule_set_name: p.child('rule_set_name').out,
    },
    ses_domain_identity(name, block): {
      local p = path(['data', 'aws_ses_domain_identity', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ses_domain_identity: {
              [name]: std.prune({
                domain: build.template(block.domain),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      domain: p.child('domain').out,
      id: p.child('id').out,
      verification_token: p.child('verification_token').out,
    },
    ses_email_identity(name, block): {
      local p = path(['data', 'aws_ses_email_identity', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ses_email_identity: {
              [name]: std.prune({
                email: build.template(block.email),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      email: p.child('email').out,
      id: p.child('id').out,
    },
    sesv2_configuration_set(name, block): {
      local p = path(['data', 'aws_sesv2_configuration_set', name]),
      _: p.out._ {
        block: {
          data: {
            aws_sesv2_configuration_set: {
              [name]: std.prune({
                configuration_set_name: build.template(block.configuration_set_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      configuration_set_name: p.child('configuration_set_name').out,
      delivery_options: p.child('delivery_options').out,
      id: p.child('id').out,
      reputation_options: p.child('reputation_options').out,
      sending_options: p.child('sending_options').out,
      suppression_options: p.child('suppression_options').out,
      tags: p.child('tags').out,
      tracking_options: p.child('tracking_options').out,
      vdm_options: p.child('vdm_options').out,
    },
    sesv2_dedicated_ip_pool(name, block): {
      local p = path(['data', 'aws_sesv2_dedicated_ip_pool', name]),
      _: p.out._ {
        block: {
          data: {
            aws_sesv2_dedicated_ip_pool: {
              [name]: std.prune({
                pool_name: build.template(block.pool_name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      dedicated_ips: p.child('dedicated_ips').out,
      id: p.child('id').out,
      pool_name: p.child('pool_name').out,
      scaling_mode: p.child('scaling_mode').out,
      tags: p.child('tags').out,
    },
    sesv2_email_identity(name, block): {
      local p = path(['data', 'aws_sesv2_email_identity', name]),
      _: p.out._ {
        block: {
          data: {
            aws_sesv2_email_identity: {
              [name]: std.prune({
                email_identity: build.template(block.email_identity),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      configuration_set_name: p.child('configuration_set_name').out,
      dkim_signing_attributes: p.child('dkim_signing_attributes').out,
      email_identity: p.child('email_identity').out,
      id: p.child('id').out,
      identity_type: p.child('identity_type').out,
      tags: p.child('tags').out,
      verified_for_sending_status: p.child('verified_for_sending_status').out,
    },
    sesv2_email_identity_mail_from_attributes(name, block): {
      local p = path(['data', 'aws_sesv2_email_identity_mail_from_attributes', name]),
      _: p.out._ {
        block: {
          data: {
            aws_sesv2_email_identity_mail_from_attributes: {
              [name]: std.prune({
                email_identity: build.template(block.email_identity),
              }),
            },
          },
        },
      },
      behavior_on_mx_failure: p.child('behavior_on_mx_failure').out,
      email_identity: p.child('email_identity').out,
      id: p.child('id').out,
      mail_from_domain: p.child('mail_from_domain').out,
    },
    sfn_activity(name, block): {
      local p = path(['data', 'aws_sfn_activity', name]),
      _: p.out._ {
        block: {
          data: {
            aws_sfn_activity: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_date: p.child('creation_date').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    sfn_alias(name, block): {
      local p = path(['data', 'aws_sfn_alias', name]),
      _: p.out._ {
        block: {
          data: {
            aws_sfn_alias: {
              [name]: std.prune({
                description: build.template(std.get(block, 'description', null, true)),
                name: build.template(block.name),
                statemachine_arn: build.template(block.statemachine_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_date: p.child('creation_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      routing_configuration: p.child('routing_configuration').out,
      statemachine_arn: p.child('statemachine_arn').out,
    },
    sfn_state_machine(name, block): {
      local p = path(['data', 'aws_sfn_state_machine', name]),
      _: p.out._ {
        block: {
          data: {
            aws_sfn_state_machine: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_date: p.child('creation_date').out,
      definition: p.child('definition').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      revision_id: p.child('revision_id').out,
      role_arn: p.child('role_arn').out,
      status: p.child('status').out,
    },
    sfn_state_machine_versions(name, block): {
      local p = path(['data', 'aws_sfn_state_machine_versions', name]),
      _: p.out._ {
        block: {
          data: {
            aws_sfn_state_machine_versions: {
              [name]: std.prune({
                statemachine_arn: build.template(block.statemachine_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      statemachine_arn: p.child('statemachine_arn').out,
      statemachine_versions: p.child('statemachine_versions').out,
    },
    shield_protection(name, block): {
      local p = path(['data', 'aws_shield_protection', name]),
      _: p.out._ {
        block: {
          data: {
            aws_shield_protection: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
      protection_arn: p.child('protection_arn').out,
      protection_id: p.child('protection_id').out,
      resource_arn: p.child('resource_arn').out,
    },
    signer_signing_job(name, block): {
      local p = path(['data', 'aws_signer_signing_job', name]),
      _: p.out._ {
        block: {
          data: {
            aws_signer_signing_job: {
              [name]: std.prune({
                job_id: build.template(block.job_id),
              }),
            },
          },
        },
      },
      completed_at: p.child('completed_at').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      job_id: p.child('job_id').out,
      job_invoker: p.child('job_invoker').out,
      job_owner: p.child('job_owner').out,
      platform_display_name: p.child('platform_display_name').out,
      platform_id: p.child('platform_id').out,
      profile_name: p.child('profile_name').out,
      profile_version: p.child('profile_version').out,
      requested_by: p.child('requested_by').out,
      revocation_record: p.child('revocation_record').out,
      signature_expires_at: p.child('signature_expires_at').out,
      signed_object: p.child('signed_object').out,
      source: p.child('source').out,
      status: p.child('status').out,
      status_reason: p.child('status_reason').out,
    },
    signer_signing_profile(name, block): {
      local p = path(['data', 'aws_signer_signing_profile', name]),
      _: p.out._ {
        block: {
          data: {
            aws_signer_signing_profile: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      platform_display_name: p.child('platform_display_name').out,
      platform_id: p.child('platform_id').out,
      revocation_record: p.child('revocation_record').out,
      signature_validity_period: p.child('signature_validity_period').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      version: p.child('version').out,
      version_arn: p.child('version_arn').out,
    },
    sns_topic(name, block): {
      local p = path(['data', 'aws_sns_topic', name]),
      _: p.out._ {
        block: {
          data: {
            aws_sns_topic: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    sqs_queue(name, block): {
      local p = path(['data', 'aws_sqs_queue', name]),
      _: p.out._ {
        block: {
          data: {
            aws_sqs_queue: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
      url: p.child('url').out,
    },
    sqs_queues(name, block): {
      local p = path(['data', 'aws_sqs_queues', name]),
      _: p.out._ {
        block: {
          data: {
            aws_sqs_queues: {
              [name]: std.prune({
                queue_name_prefix: build.template(std.get(block, 'queue_name_prefix', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      queue_name_prefix: p.child('queue_name_prefix').out,
      queue_urls: p.child('queue_urls').out,
    },
    ssm_document(name, block): {
      local p = path(['data', 'aws_ssm_document', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssm_document: {
              [name]: std.prune({
                document_format: build.template(std.get(block, 'document_format', null, true)),
                document_version: build.template(std.get(block, 'document_version', null, true)),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      content: p.child('content').out,
      document_format: p.child('document_format').out,
      document_type: p.child('document_type').out,
      document_version: p.child('document_version').out,
      id: p.child('id').out,
      name: p.child('name').out,
    },
    ssm_instances(name, block): {
      local p = path(['data', 'aws_ssm_instances', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssm_instances: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
    },
    ssm_maintenance_windows(name, block): {
      local p = path(['data', 'aws_ssm_maintenance_windows', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssm_maintenance_windows: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
    },
    ssm_parameter(name, block): {
      local p = path(['data', 'aws_ssm_parameter', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssm_parameter: {
              [name]: std.prune({
                name: build.template(block.name),
                with_decryption: build.template(std.get(block, 'with_decryption', null, true)),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      id: p.child('id').out,
      insecure_value: p.child('insecure_value').out,
      name: p.child('name').out,
      type: p.child('type').out,
      value: p.child('value').out,
      version: p.child('version').out,
      with_decryption: p.child('with_decryption').out,
    },
    ssm_parameters_by_path(name, block): {
      local p = path(['data', 'aws_ssm_parameters_by_path', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssm_parameters_by_path: {
              [name]: std.prune({
                path: build.template(block.path),
                recursive: build.template(std.get(block, 'recursive', null, true)),
                with_decryption: build.template(std.get(block, 'with_decryption', null, true)),
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      names: p.child('names').out,
      path: p.child('path').out,
      recursive: p.child('recursive').out,
      types: p.child('types').out,
      values: p.child('values').out,
      with_decryption: p.child('with_decryption').out,
    },
    ssm_patch_baseline(name, block): {
      local p = path(['data', 'aws_ssm_patch_baseline', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssm_patch_baseline: {
              [name]: std.prune({
                default_baseline: build.template(std.get(block, 'default_baseline', null, true)),
                name_prefix: build.template(std.get(block, 'name_prefix', null, true)),
                operating_system: build.template(std.get(block, 'operating_system', null, true)),
                owner: build.template(block.owner),
              }),
            },
          },
        },
      },
      approval_rule: p.child('approval_rule').out,
      approved_patches: p.child('approved_patches').out,
      approved_patches_compliance_level: p.child('approved_patches_compliance_level').out,
      approved_patches_enable_non_security: p.child('approved_patches_enable_non_security').out,
      default_baseline: p.child('default_baseline').out,
      description: p.child('description').out,
      global_filter: p.child('global_filter').out,
      id: p.child('id').out,
      json: p.child('json').out,
      name: p.child('name').out,
      name_prefix: p.child('name_prefix').out,
      operating_system: p.child('operating_system').out,
      owner: p.child('owner').out,
      rejected_patches: p.child('rejected_patches').out,
      rejected_patches_action: p.child('rejected_patches_action').out,
      source: p.child('source').out,
    },
    ssm_patch_baselines(name, block): {
      local p = path(['data', 'aws_ssm_patch_baselines', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssm_patch_baselines: {
              [name]: std.prune({
                default_baselines: build.template(std.get(block, 'default_baselines', null, true)),
              }),
            },
          },
        },
      },
      baseline_identities: p.child('baseline_identities').out,
      default_baselines: p.child('default_baselines').out,
    },
    ssmcontacts_contact(name, block): {
      local p = path(['data', 'aws_ssmcontacts_contact', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssmcontacts_contact: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      alias: p.child('alias').out,
      arn: p.child('arn').out,
      display_name: p.child('display_name').out,
      id: p.child('id').out,
      tags: p.child('tags').out,
      type: p.child('type').out,
    },
    ssmcontacts_contact_channel(name, block): {
      local p = path(['data', 'aws_ssmcontacts_contact_channel', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssmcontacts_contact_channel: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      activation_status: p.child('activation_status').out,
      arn: p.child('arn').out,
      contact_id: p.child('contact_id').out,
      delivery_address: p.child('delivery_address').out,
      id: p.child('id').out,
      name: p.child('name').out,
      type: p.child('type').out,
    },
    ssmcontacts_plan(name, block): {
      local p = path(['data', 'aws_ssmcontacts_plan', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssmcontacts_plan: {
              [name]: std.prune({
                contact_id: build.template(block.contact_id),
              }),
            },
          },
        },
      },
      contact_id: p.child('contact_id').out,
      id: p.child('id').out,
      stage: p.child('stage').out,
    },
    ssmcontacts_rotation(name, block): {
      local p = path(['data', 'aws_ssmcontacts_rotation', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssmcontacts_rotation: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      contact_ids: p.child('contact_ids').out,
      id: p.child('id').out,
      name: p.child('name').out,
      recurrence: p.child('recurrence').out,
      start_time: p.child('start_time').out,
      tags: p.child('tags').out,
      time_zone_id: p.child('time_zone_id').out,
    },
    ssmincidents_replication_set(name, block): {
      local p = path(['data', 'aws_ssmincidents_replication_set', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssmincidents_replication_set: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_by: p.child('created_by').out,
      deletion_protected: p.child('deletion_protected').out,
      id: p.child('id').out,
      last_modified_by: p.child('last_modified_by').out,
      region: p.child('region').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
    },
    ssmincidents_response_plan(name, block): {
      local p = path(['data', 'aws_ssmincidents_response_plan', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssmincidents_response_plan: {
              [name]: std.prune({
                arn: build.template(block.arn),
              }),
            },
          },
        },
      },
      action: p.child('action').out,
      arn: p.child('arn').out,
      chat_channel: p.child('chat_channel').out,
      display_name: p.child('display_name').out,
      engagements: p.child('engagements').out,
      id: p.child('id').out,
      incident_template: p.child('incident_template').out,
      integration: p.child('integration').out,
      name: p.child('name').out,
      tags: p.child('tags').out,
    },
    ssoadmin_application(name, block): {
      local p = path(['data', 'aws_ssoadmin_application', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssoadmin_application: {
              [name]: std.prune({
                application_arn: build.template(block.application_arn),
              }),
            },
          },
        },
      },
      application_account: p.child('application_account').out,
      application_arn: p.child('application_arn').out,
      application_provider_arn: p.child('application_provider_arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_arn: p.child('instance_arn').out,
      name: p.child('name').out,
      status: p.child('status').out,
    },
    ssoadmin_application_assignments(name, block): {
      local p = path(['data', 'aws_ssoadmin_application_assignments', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssoadmin_application_assignments: {
              [name]: std.prune({
                application_arn: build.template(block.application_arn),
              }),
            },
          },
        },
      },
      application_arn: p.child('application_arn').out,
      id: p.child('id').out,
    },
    ssoadmin_application_providers(name, block): {
      local p = path(['data', 'aws_ssoadmin_application_providers', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssoadmin_application_providers: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    ssoadmin_instances(name, block): {
      local p = path(['data', 'aws_ssoadmin_instances', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssoadmin_instances: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      identity_store_ids: p.child('identity_store_ids').out,
    },
    ssoadmin_permission_set(name, block): {
      local p = path(['data', 'aws_ssoadmin_permission_set', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssoadmin_permission_set: {
              [name]: std.prune({
                instance_arn: build.template(block.instance_arn),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      instance_arn: p.child('instance_arn').out,
      name: p.child('name').out,
      relay_state: p.child('relay_state').out,
      session_duration: p.child('session_duration').out,
      tags: p.child('tags').out,
    },
    ssoadmin_permission_sets(name, block): {
      local p = path(['data', 'aws_ssoadmin_permission_sets', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssoadmin_permission_sets: {
              [name]: std.prune({
                instance_arn: build.template(block.instance_arn),
              }),
            },
          },
        },
      },
      arns: p.child('arns').out,
      id: p.child('id').out,
      instance_arn: p.child('instance_arn').out,
    },
    ssoadmin_principal_application_assignments(name, block): {
      local p = path(['data', 'aws_ssoadmin_principal_application_assignments', name]),
      _: p.out._ {
        block: {
          data: {
            aws_ssoadmin_principal_application_assignments: {
              [name]: std.prune({
                instance_arn: build.template(block.instance_arn),
                principal_id: build.template(block.principal_id),
                principal_type: build.template(block.principal_type),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      instance_arn: p.child('instance_arn').out,
      principal_id: p.child('principal_id').out,
      principal_type: p.child('principal_type').out,
    },
    storagegateway_local_disk(name, block): {
      local p = path(['data', 'aws_storagegateway_local_disk', name]),
      _: p.out._ {
        block: {
          data: {
            aws_storagegateway_local_disk: {
              [name]: std.prune({
                gateway_arn: build.template(block.gateway_arn),
              }),
            },
          },
        },
      },
      disk_id: p.child('disk_id').out,
      disk_node: p.child('disk_node').out,
      disk_path: p.child('disk_path').out,
      gateway_arn: p.child('gateway_arn').out,
      id: p.child('id').out,
    },
    subnet(name, block): {
      local p = path(['data', 'aws_subnet', name]),
      _: p.out._ {
        block: {
          data: {
            aws_subnet: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      assign_ipv6_address_on_creation: p.child('assign_ipv6_address_on_creation').out,
      availability_zone: p.child('availability_zone').out,
      availability_zone_id: p.child('availability_zone_id').out,
      available_ip_address_count: p.child('available_ip_address_count').out,
      cidr_block: p.child('cidr_block').out,
      customer_owned_ipv4_pool: p.child('customer_owned_ipv4_pool').out,
      default_for_az: p.child('default_for_az').out,
      enable_dns64: p.child('enable_dns64').out,
      enable_lni_at_device_index: p.child('enable_lni_at_device_index').out,
      enable_resource_name_dns_a_record_on_launch: p.child('enable_resource_name_dns_a_record_on_launch').out,
      enable_resource_name_dns_aaaa_record_on_launch: p.child('enable_resource_name_dns_aaaa_record_on_launch').out,
      id: p.child('id').out,
      ipv6_cidr_block: p.child('ipv6_cidr_block').out,
      ipv6_cidr_block_association_id: p.child('ipv6_cidr_block_association_id').out,
      ipv6_native: p.child('ipv6_native').out,
      map_customer_owned_ip_on_launch: p.child('map_customer_owned_ip_on_launch').out,
      map_public_ip_on_launch: p.child('map_public_ip_on_launch').out,
      outpost_arn: p.child('outpost_arn').out,
      owner_id: p.child('owner_id').out,
      private_dns_hostname_type_on_launch: p.child('private_dns_hostname_type_on_launch').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    subnets(name, block): {
      local p = path(['data', 'aws_subnets', name]),
      _: p.out._ {
        block: {
          data: {
            aws_subnets: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    synthetics_runtime_version(name, block): {
      local p = path(['data', 'aws_synthetics_runtime_version', name]),
      _: p.out._ {
        block: {
          data: {
            aws_synthetics_runtime_version: {
              [name]: std.prune({
                latest: build.template(std.get(block, 'latest', null, true)),
                prefix: build.template(block.prefix),
                version: build.template(std.get(block, 'version', null, true)),
              }),
            },
          },
        },
      },
      deprecation_date: p.child('deprecation_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      latest: p.child('latest').out,
      prefix: p.child('prefix').out,
      release_date: p.child('release_date').out,
      version: p.child('version').out,
      version_name: p.child('version_name').out,
    },
    synthetics_runtime_versions(name, block): {
      local p = path(['data', 'aws_synthetics_runtime_versions', name]),
      _: p.out._ {
        block: {
          data: {
            aws_synthetics_runtime_versions: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
    },
    timestreamwrite_database(name, block): {
      local p = path(['data', 'aws_timestreamwrite_database', name]),
      _: p.out._ {
        block: {
          data: {
            aws_timestreamwrite_database: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_time: p.child('created_time').out,
      kms_key_id: p.child('kms_key_id').out,
      last_updated_time: p.child('last_updated_time').out,
      name: p.child('name').out,
      table_count: p.child('table_count').out,
    },
    timestreamwrite_table(name, block): {
      local p = path(['data', 'aws_timestreamwrite_table', name]),
      _: p.out._ {
        block: {
          data: {
            aws_timestreamwrite_table: {
              [name]: std.prune({
                database_name: build.template(block.database_name),
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      creation_time: p.child('creation_time').out,
      database_name: p.child('database_name').out,
      last_updated_time: p.child('last_updated_time').out,
      magnetic_store_write_properties: p.child('magnetic_store_write_properties').out,
      name: p.child('name').out,
      retention_properties: p.child('retention_properties').out,
      schema: p.child('schema').out,
      table_status: p.child('table_status').out,
    },
    transfer_connector(name, block): {
      local p = path(['data', 'aws_transfer_connector', name]),
      _: p.out._ {
        block: {
          data: {
            aws_transfer_connector: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      access_role: p.child('access_role').out,
      arn: p.child('arn').out,
      as2_config: p.child('as2_config').out,
      id: p.child('id').out,
      logging_role: p.child('logging_role').out,
      security_policy_name: p.child('security_policy_name').out,
      service_managed_egress_ip_addresses: p.child('service_managed_egress_ip_addresses').out,
      sftp_config: p.child('sftp_config').out,
      tags: p.child('tags').out,
      url: p.child('url').out,
    },
    transfer_server(name, block): {
      local p = path(['data', 'aws_transfer_server', name]),
      _: p.out._ {
        block: {
          data: {
            aws_transfer_server: {
              [name]: std.prune({
                server_id: build.template(block.server_id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      certificate: p.child('certificate').out,
      domain: p.child('domain').out,
      endpoint: p.child('endpoint').out,
      endpoint_type: p.child('endpoint_type').out,
      id: p.child('id').out,
      identity_provider_type: p.child('identity_provider_type').out,
      invocation_role: p.child('invocation_role').out,
      logging_role: p.child('logging_role').out,
      protocols: p.child('protocols').out,
      security_policy_name: p.child('security_policy_name').out,
      server_id: p.child('server_id').out,
      structured_log_destinations: p.child('structured_log_destinations').out,
      tags: p.child('tags').out,
      url: p.child('url').out,
    },
    verifiedpermissions_policy_store(name, block): {
      local p = path(['data', 'aws_verifiedpermissions_policy_store', name]),
      _: p.out._ {
        block: {
          data: {
            aws_verifiedpermissions_policy_store: {
              [name]: std.prune({
                id: build.template(block.id),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_date: p.child('created_date').out,
      description: p.child('description').out,
      id: p.child('id').out,
      last_updated_date: p.child('last_updated_date').out,
      validation_settings: p.child('validation_settings').out,
    },
    vpc(name, block): {
      local p = path(['data', 'aws_vpc', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpc: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cidr_block: p.child('cidr_block').out,
      cidr_block_associations: p.child('cidr_block_associations').out,
      default: p.child('default').out,
      dhcp_options_id: p.child('dhcp_options_id').out,
      enable_dns_hostnames: p.child('enable_dns_hostnames').out,
      enable_dns_support: p.child('enable_dns_support').out,
      enable_network_address_usage_metrics: p.child('enable_network_address_usage_metrics').out,
      id: p.child('id').out,
      instance_tenancy: p.child('instance_tenancy').out,
      ipv6_association_id: p.child('ipv6_association_id').out,
      ipv6_cidr_block: p.child('ipv6_cidr_block').out,
      main_route_table_id: p.child('main_route_table_id').out,
      owner_id: p.child('owner_id').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
    },
    vpc_dhcp_options(name, block): {
      local p = path(['data', 'aws_vpc_dhcp_options', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpc_dhcp_options: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      dhcp_options_id: p.child('dhcp_options_id').out,
      domain_name: p.child('domain_name').out,
      domain_name_servers: p.child('domain_name_servers').out,
      id: p.child('id').out,
      ipv6_address_preferred_lease_time: p.child('ipv6_address_preferred_lease_time').out,
      netbios_name_servers: p.child('netbios_name_servers').out,
      netbios_node_type: p.child('netbios_node_type').out,
      ntp_servers: p.child('ntp_servers').out,
      owner_id: p.child('owner_id').out,
      tags: p.child('tags').out,
    },
    vpc_endpoint(name, block): {
      local p = path(['data', 'aws_vpc_endpoint', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpc_endpoint: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cidr_blocks: p.child('cidr_blocks').out,
      dns_entry: p.child('dns_entry').out,
      dns_options: p.child('dns_options').out,
      id: p.child('id').out,
      ip_address_type: p.child('ip_address_type').out,
      network_interface_ids: p.child('network_interface_ids').out,
      owner_id: p.child('owner_id').out,
      policy: p.child('policy').out,
      prefix_list_id: p.child('prefix_list_id').out,
      private_dns_enabled: p.child('private_dns_enabled').out,
      requester_managed: p.child('requester_managed').out,
      route_table_ids: p.child('route_table_ids').out,
      security_group_ids: p.child('security_group_ids').out,
      service_name: p.child('service_name').out,
      state: p.child('state').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      vpc_endpoint_type: p.child('vpc_endpoint_type').out,
      vpc_id: p.child('vpc_id').out,
    },
    vpc_endpoint_service(name, block): {
      local p = path(['data', 'aws_vpc_endpoint_service', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpc_endpoint_service: {
              [name]: std.prune({
                service: build.template(std.get(block, 'service', null, true)),
              }),
            },
          },
        },
      },
      acceptance_required: p.child('acceptance_required').out,
      arn: p.child('arn').out,
      availability_zones: p.child('availability_zones').out,
      base_endpoint_dns_names: p.child('base_endpoint_dns_names').out,
      id: p.child('id').out,
      manages_vpc_endpoints: p.child('manages_vpc_endpoints').out,
      owner: p.child('owner').out,
      private_dns_name: p.child('private_dns_name').out,
      private_dns_names: p.child('private_dns_names').out,
      service: p.child('service').out,
      service_id: p.child('service_id').out,
      service_name: p.child('service_name').out,
      service_type: p.child('service_type').out,
      supported_ip_address_types: p.child('supported_ip_address_types').out,
      tags: p.child('tags').out,
      vpc_endpoint_policy_supported: p.child('vpc_endpoint_policy_supported').out,
    },
    vpc_ipam_pool(name, block): {
      local p = path(['data', 'aws_vpc_ipam_pool', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpc_ipam_pool: {
              [name]: std.prune({
                id: build.template(std.get(block, 'id', null, true)),
                ipam_pool_id: build.template(std.get(block, 'ipam_pool_id', null, true)),
              }),
            },
          },
        },
      },
      address_family: p.child('address_family').out,
      allocation_default_netmask_length: p.child('allocation_default_netmask_length').out,
      allocation_max_netmask_length: p.child('allocation_max_netmask_length').out,
      allocation_min_netmask_length: p.child('allocation_min_netmask_length').out,
      allocation_resource_tags: p.child('allocation_resource_tags').out,
      arn: p.child('arn').out,
      auto_import: p.child('auto_import').out,
      aws_service: p.child('aws_service').out,
      description: p.child('description').out,
      id: p.child('id').out,
      ipam_pool_id: p.child('ipam_pool_id').out,
      ipam_scope_id: p.child('ipam_scope_id').out,
      ipam_scope_type: p.child('ipam_scope_type').out,
      locale: p.child('locale').out,
      pool_depth: p.child('pool_depth').out,
      publicly_advertisable: p.child('publicly_advertisable').out,
      source_ipam_pool_id: p.child('source_ipam_pool_id').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
    },
    vpc_ipam_pool_cidrs(name, block): {
      local p = path(['data', 'aws_vpc_ipam_pool_cidrs', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpc_ipam_pool_cidrs: {
              [name]: std.prune({
                ipam_pool_id: build.template(block.ipam_pool_id),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ipam_pool_cidrs: p.child('ipam_pool_cidrs').out,
      ipam_pool_id: p.child('ipam_pool_id').out,
    },
    vpc_ipam_pools(name, block): {
      local p = path(['data', 'aws_vpc_ipam_pools', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpc_ipam_pools: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ipam_pools: p.child('ipam_pools').out,
    },
    vpc_ipam_preview_next_cidr(name, block): {
      local p = path(['data', 'aws_vpc_ipam_preview_next_cidr', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpc_ipam_preview_next_cidr: {
              [name]: std.prune({
                disallowed_cidrs: build.template(std.get(block, 'disallowed_cidrs', null, true)),
                ipam_pool_id: build.template(block.ipam_pool_id),
                netmask_length: build.template(std.get(block, 'netmask_length', null, true)),
              }),
            },
          },
        },
      },
      cidr: p.child('cidr').out,
      disallowed_cidrs: p.child('disallowed_cidrs').out,
      id: p.child('id').out,
      ipam_pool_id: p.child('ipam_pool_id').out,
      netmask_length: p.child('netmask_length').out,
    },
    vpc_peering_connection(name, block): {
      local p = path(['data', 'aws_vpc_peering_connection', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpc_peering_connection: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      accepter: p.child('accepter').out,
      cidr_block: p.child('cidr_block').out,
      cidr_block_set: p.child('cidr_block_set').out,
      id: p.child('id').out,
      ipv6_cidr_block_set: p.child('ipv6_cidr_block_set').out,
      owner_id: p.child('owner_id').out,
      peer_cidr_block: p.child('peer_cidr_block').out,
      peer_cidr_block_set: p.child('peer_cidr_block_set').out,
      peer_ipv6_cidr_block_set: p.child('peer_ipv6_cidr_block_set').out,
      peer_owner_id: p.child('peer_owner_id').out,
      peer_region: p.child('peer_region').out,
      peer_vpc_id: p.child('peer_vpc_id').out,
      region: p.child('region').out,
      requester: p.child('requester').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
      vpc_id: p.child('vpc_id').out,
    },
    vpc_peering_connections(name, block): {
      local p = path(['data', 'aws_vpc_peering_connections', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpc_peering_connections: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    vpc_security_group_rule(name, block): {
      local p = path(['data', 'aws_vpc_security_group_rule', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpc_security_group_rule: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      cidr_ipv4: p.child('cidr_ipv4').out,
      cidr_ipv6: p.child('cidr_ipv6').out,
      description: p.child('description').out,
      from_port: p.child('from_port').out,
      id: p.child('id').out,
      ip_protocol: p.child('ip_protocol').out,
      is_egress: p.child('is_egress').out,
      prefix_list_id: p.child('prefix_list_id').out,
      referenced_security_group_id: p.child('referenced_security_group_id').out,
      security_group_id: p.child('security_group_id').out,
      security_group_rule_id: p.child('security_group_rule_id').out,
      tags: p.child('tags').out,
      to_port: p.child('to_port').out,
    },
    vpc_security_group_rules(name, block): {
      local p = path(['data', 'aws_vpc_security_group_rules', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpc_security_group_rules: {
              [name]: std.prune({
                tags: build.template(std.get(block, 'tags', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    vpclattice_auth_policy(name, block): {
      local p = path(['data', 'aws_vpclattice_auth_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpclattice_auth_policy: {
              [name]: std.prune({
                policy: build.template(std.get(block, 'policy', null, true)),
                resource_identifier: build.template(block.resource_identifier),
                state: build.template(std.get(block, 'state', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      resource_identifier: p.child('resource_identifier').out,
      state: p.child('state').out,
    },
    vpclattice_listener(name, block): {
      local p = path(['data', 'aws_vpclattice_listener', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpclattice_listener: {
              [name]: std.prune({
                listener_identifier: build.template(block.listener_identifier),
                service_identifier: build.template(block.service_identifier),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      created_at: p.child('created_at').out,
      default_action: p.child('default_action').out,
      id: p.child('id').out,
      last_updated_at: p.child('last_updated_at').out,
      listener_id: p.child('listener_id').out,
      listener_identifier: p.child('listener_identifier').out,
      name: p.child('name').out,
      port: p.child('port').out,
      protocol: p.child('protocol').out,
      service_arn: p.child('service_arn').out,
      service_id: p.child('service_id').out,
      service_identifier: p.child('service_identifier').out,
      tags: p.child('tags').out,
    },
    vpclattice_resource_policy(name, block): {
      local p = path(['data', 'aws_vpclattice_resource_policy', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpclattice_resource_policy: {
              [name]: std.prune({
                resource_arn: build.template(block.resource_arn),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      policy: p.child('policy').out,
      resource_arn: p.child('resource_arn').out,
    },
    vpclattice_service(name, block): {
      local p = path(['data', 'aws_vpclattice_service', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpclattice_service: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auth_type: p.child('auth_type').out,
      certificate_arn: p.child('certificate_arn').out,
      custom_domain_name: p.child('custom_domain_name').out,
      dns_entry: p.child('dns_entry').out,
      id: p.child('id').out,
      name: p.child('name').out,
      service_identifier: p.child('service_identifier').out,
      status: p.child('status').out,
      tags: p.child('tags').out,
    },
    vpclattice_service_network(name, block): {
      local p = path(['data', 'aws_vpclattice_service_network', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpclattice_service_network: {
              [name]: std.prune({
                service_network_identifier: build.template(block.service_network_identifier),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      auth_type: p.child('auth_type').out,
      created_at: p.child('created_at').out,
      id: p.child('id').out,
      last_updated_at: p.child('last_updated_at').out,
      name: p.child('name').out,
      number_of_associated_services: p.child('number_of_associated_services').out,
      number_of_associated_vpcs: p.child('number_of_associated_vpcs').out,
      service_network_identifier: p.child('service_network_identifier').out,
      tags: p.child('tags').out,
    },
    vpcs(name, block): {
      local p = path(['data', 'aws_vpcs', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpcs: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      ids: p.child('ids').out,
      tags: p.child('tags').out,
    },
    vpn_gateway(name, block): {
      local p = path(['data', 'aws_vpn_gateway', name]),
      _: p.out._ {
        block: {
          data: {
            aws_vpn_gateway: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      amazon_side_asn: p.child('amazon_side_asn').out,
      arn: p.child('arn').out,
      attached_vpc_id: p.child('attached_vpc_id').out,
      availability_zone: p.child('availability_zone').out,
      id: p.child('id').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
    },
    waf_ipset(name, block): {
      local p = path(['data', 'aws_waf_ipset', name]),
      _: p.out._ {
        block: {
          data: {
            aws_waf_ipset: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    waf_rate_based_rule(name, block): {
      local p = path(['data', 'aws_waf_rate_based_rule', name]),
      _: p.out._ {
        block: {
          data: {
            aws_waf_rate_based_rule: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    waf_rule(name, block): {
      local p = path(['data', 'aws_waf_rule', name]),
      _: p.out._ {
        block: {
          data: {
            aws_waf_rule: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    waf_subscribed_rule_group(name, block): {
      local p = path(['data', 'aws_waf_subscribed_rule_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_waf_subscribed_rule_group: {
              [name]: std.prune({
                metric_name: build.template(std.get(block, 'metric_name', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      metric_name: p.child('metric_name').out,
      name: p.child('name').out,
    },
    waf_web_acl(name, block): {
      local p = path(['data', 'aws_waf_web_acl', name]),
      _: p.out._ {
        block: {
          data: {
            aws_waf_web_acl: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    wafregional_ipset(name, block): {
      local p = path(['data', 'aws_wafregional_ipset', name]),
      _: p.out._ {
        block: {
          data: {
            aws_wafregional_ipset: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    wafregional_rate_based_rule(name, block): {
      local p = path(['data', 'aws_wafregional_rate_based_rule', name]),
      _: p.out._ {
        block: {
          data: {
            aws_wafregional_rate_based_rule: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    wafregional_rule(name, block): {
      local p = path(['data', 'aws_wafregional_rule', name]),
      _: p.out._ {
        block: {
          data: {
            aws_wafregional_rule: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    wafregional_subscribed_rule_group(name, block): {
      local p = path(['data', 'aws_wafregional_subscribed_rule_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_wafregional_subscribed_rule_group: {
              [name]: std.prune({
                metric_name: build.template(std.get(block, 'metric_name', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      metric_name: p.child('metric_name').out,
      name: p.child('name').out,
    },
    wafregional_web_acl(name, block): {
      local p = path(['data', 'aws_wafregional_web_acl', name]),
      _: p.out._ {
        block: {
          data: {
            aws_wafregional_web_acl: {
              [name]: std.prune({
                name: build.template(block.name),
              }),
            },
          },
        },
      },
      id: p.child('id').out,
      name: p.child('name').out,
    },
    wafv2_ip_set(name, block): {
      local p = path(['data', 'aws_wafv2_ip_set', name]),
      _: p.out._ {
        block: {
          data: {
            aws_wafv2_ip_set: {
              [name]: std.prune({
                name: build.template(block.name),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      addresses: p.child('addresses').out,
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      ip_address_version: p.child('ip_address_version').out,
      name: p.child('name').out,
      scope: p.child('scope').out,
    },
    wafv2_regex_pattern_set(name, block): {
      local p = path(['data', 'aws_wafv2_regex_pattern_set', name]),
      _: p.out._ {
        block: {
          data: {
            aws_wafv2_regex_pattern_set: {
              [name]: std.prune({
                name: build.template(block.name),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      regular_expression: p.child('regular_expression').out,
      scope: p.child('scope').out,
    },
    wafv2_rule_group(name, block): {
      local p = path(['data', 'aws_wafv2_rule_group', name]),
      _: p.out._ {
        block: {
          data: {
            aws_wafv2_rule_group: {
              [name]: std.prune({
                name: build.template(block.name),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      scope: p.child('scope').out,
    },
    wafv2_web_acl(name, block): {
      local p = path(['data', 'aws_wafv2_web_acl', name]),
      _: p.out._ {
        block: {
          data: {
            aws_wafv2_web_acl: {
              [name]: std.prune({
                name: build.template(block.name),
                scope: build.template(block.scope),
              }),
            },
          },
        },
      },
      arn: p.child('arn').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      scope: p.child('scope').out,
    },
    workspaces_bundle(name, block): {
      local p = path(['data', 'aws_workspaces_bundle', name]),
      _: p.out._ {
        block: {
          data: {
            aws_workspaces_bundle: {
              [name]: std.prune({
                bundle_id: build.template(std.get(block, 'bundle_id', null, true)),
                name: build.template(std.get(block, 'name', null, true)),
                owner: build.template(std.get(block, 'owner', null, true)),
              }),
            },
          },
        },
      },
      bundle_id: p.child('bundle_id').out,
      compute_type: p.child('compute_type').out,
      description: p.child('description').out,
      id: p.child('id').out,
      name: p.child('name').out,
      owner: p.child('owner').out,
      root_storage: p.child('root_storage').out,
      user_storage: p.child('user_storage').out,
    },
    workspaces_directory(name, block): {
      local p = path(['data', 'aws_workspaces_directory', name]),
      _: p.out._ {
        block: {
          data: {
            aws_workspaces_directory: {
              [name]: std.prune({
                directory_id: build.template(block.directory_id),
              }),
            },
          },
        },
      },
      alias: p.child('alias').out,
      customer_user_name: p.child('customer_user_name').out,
      directory_id: p.child('directory_id').out,
      directory_name: p.child('directory_name').out,
      directory_type: p.child('directory_type').out,
      dns_ip_addresses: p.child('dns_ip_addresses').out,
      iam_role_id: p.child('iam_role_id').out,
      id: p.child('id').out,
      ip_group_ids: p.child('ip_group_ids').out,
      registration_code: p.child('registration_code').out,
      saml_properties: p.child('saml_properties').out,
      self_service_permissions: p.child('self_service_permissions').out,
      subnet_ids: p.child('subnet_ids').out,
      tags: p.child('tags').out,
      workspace_access_properties: p.child('workspace_access_properties').out,
      workspace_creation_properties: p.child('workspace_creation_properties').out,
      workspace_security_group_id: p.child('workspace_security_group_id').out,
    },
    workspaces_image(name, block): {
      local p = path(['data', 'aws_workspaces_image', name]),
      _: p.out._ {
        block: {
          data: {
            aws_workspaces_image: {
              [name]: std.prune({
                image_id: build.template(block.image_id),
              }),
            },
          },
        },
      },
      description: p.child('description').out,
      id: p.child('id').out,
      image_id: p.child('image_id').out,
      name: p.child('name').out,
      operating_system_type: p.child('operating_system_type').out,
      required_tenancy: p.child('required_tenancy').out,
      state: p.child('state').out,
    },
    workspaces_workspace(name, block): {
      local p = path(['data', 'aws_workspaces_workspace', name]),
      _: p.out._ {
        block: {
          data: {
            aws_workspaces_workspace: {
              [name]: std.prune({
              }),
            },
          },
        },
      },
      bundle_id: p.child('bundle_id').out,
      computer_name: p.child('computer_name').out,
      directory_id: p.child('directory_id').out,
      id: p.child('id').out,
      ip_address: p.child('ip_address').out,
      root_volume_encryption_enabled: p.child('root_volume_encryption_enabled').out,
      state: p.child('state').out,
      tags: p.child('tags').out,
      user_name: p.child('user_name').out,
      user_volume_encryption_enabled: p.child('user_volume_encryption_enabled').out,
      volume_encryption_key: p.child('volume_encryption_key').out,
      workspace_id: p.child('workspace_id').out,
      workspace_properties: p.child('workspace_properties').out,
    },
  },
  func: {
    arn_build(partition, service, region, account_id, resource): func('provider::aws::arn_build', [partition, service, region, account_id, resource]),
    arn_parse(arn): func('provider::aws::arn_parse', [arn]),
    trim_iam_role_path(arn): func('provider::aws::trim_iam_role_path', [arn]),
  },
};

provider
